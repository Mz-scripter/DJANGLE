[
{"title": "Django Insert Data", "url": "https://www.w3schools.com/django/django_insert_data.php", "content": "Django Insert Data   ❮ Previous  Next ❯    Add Records  The Members table created in the previous chapter is empty.  We will use the Python interpreter (Python shell) to add some \nmembers to it.  To open a Python shell, type this command:   py manage.py shell   Now we are in the shell, the result should be something like this:   Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. (InteractiveConsole) >>>   At the bottom, after the three >>> write the following:   >>> from members.models import Member   Hit [enter] and write this to look at the empty Member table:   >>> Member.objects.all()   This should give you an empty QuerySet object, like this:   <QuerySet []>   A QuerySet is a collection of data from a database.  Read more about QuerySets in the Django QuerySet chapter.  Add a record to the table, by executing these two lines:   >>> member = Member(firstname='Emil', lastname='Refsnes') >>> member.save()   Execute this command to see if the Member table got a member:   >>> Member.objects.all().values()   Hopefully, the result will look like this:   <QuerySet [{'id': 1, 'firstname': 'Emil', 'lastname': 'Refsnes'}]>    Add Multiple Records  You can add multiple records by making a list of Member objects,\nand execute .save() on each entry:   >>> member1 = Member(firstname='Tobias', lastname='Refsnes') >>> member2 = Member(firstname='Linus', lastname='Refsnes') >>> member3 = Member(firstname='Lene', lastname='Refsnes') >>> member4 = Member(firstname='Stale', lastname='Refsnes') >>> member5 = Member(firstname='Jane', lastname='Doe') >>> members_list = \n  [member1, member2, member3, member4, member5] >>> for x in members_list: >>>   x.save()   Now there are 6 members in the Member table:   >>> Member.objects.all().values() <QuerySet [{'id': 1, 'firstname': 'Emil', 'lastname': 'Refsnes'}, {'id': 2, 'firstname': 'Tobias', 'lastname': 'Refsnes'}, {'id': 3, 'firstname': 'Linus', 'lastname': 'Refsnes'}, {'id': 4, 'firstname': 'Lene', 'lastname': 'Refsnes'}, {'id': 5, 'firstname': 'Stale', 'lastname': 'Refsnes'}, {'id': 6, 'firstname': 'Jane', 'lastname': 'Doe'}]>       ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Models", "url": "https://www.w3schools.com/django/django_models.php", "content": "Django Models   ❮ Previous  Next ❯    A Django model is a table in your database.   Django Models  Up until now in this tutorial,\noutput has been static data from Python or HTML templates.  Now we will see how Django allows us to work with data,\nwithout having to change or upload files in the process.  In Django, data is created in objects, called Models, and is actually tables in a database.   Create Table (Model)  To create a model, navigate to the models.py file\nin the /members/ folder.  Open it, and add a Member table by creating a Member  class , \nand describe the table fields in it:   my_tennis_club/members/models.py :  from django.db import models\n\nclass Member(models.Model):\n  firstname = models.CharField(max_length=255)\n  lastname = models.CharField(max_length=255)   The first field, firstname , is a Text field, and will contain the first name of the members.  The second field, lastname , is also a Text field, with the member's last name.  Both firstname and lastname is set up to have a maximum of 255 characters.   SQLite Database  When we created the Django project, we got an empty SQLite database.  It was created in the my_tennis_club root folder, \n  and has the filename db.sqlite3 .  By default, all Models created in the Django project will be created as tables in this database.    Migrate  Now when we have described a Model in the models.py file, we must run a command to actually create the table in the database.  Navigate to the /my_tennis_club/ folder and run this command:   py manage.py makemigrations members   Which will result in this output:   Migrations for 'members': members\\migrations\\0001_initial.py - Create model Member  (myworld) C:\\Users\\ Your Name \\myworld\\my_tennis_club>   Django creates a file describing the changes and stores the file in the /migrations/ folder:   my_tennis_club/members/migrations/0001_initial.py :  # Generated by Django 4.1.2 on 2022-10-27 11:14\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Member',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('firstname', models.CharField(max_length=255)),\n                ('lastname', models.CharField(max_length=255)),\n            ],\n        ),\n    ]   Note that Django inserts an id field for your tables,\nwhich is an auto increment number (first record gets the value 1, the second record 2 etc.), this is the default \nbehavior of Django,\nyou can override it by describing your own id field.  The table is not created yet, you will have to run one more command, then \nDjango will create and execute an SQL statement, based on the content of the new \nfile in the /migrations/ folder.  Run the migrate command:   py manage.py migrate   Which will result in this output:   Operations to perform: Apply all migrations: admin, auth, contenttypes, members, sessions Running migrations: Applying members.0001_initial... OK  (myworld) C:\\Users\\ Your Name \\myworld\\my_tennis_club>   Now you have a Member table in you database!   View SQL  As a side-note: you can view the SQL statement that were executed from the migration above.\nAll you have to do is to run this command, with the migration number:   py manage.py sqlmigrate members 0001   Which will result in this output:   BEGIN; -- -- Create model Member -- CREATE TABLE \"members_member\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"firstname\" varchar(255) NOT NULL, \"lastname\" varchar(255) NOT NULL);\nCOMMIT;       ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Templates", "url": "https://www.w3schools.com/django/django_templates.php", "content": "Django Templates   ❮ Previous  Next ❯    Templates  In the Django Intro page, we learned that the \nresult should be in HTML, and it should be created in a template, so let's do that.  Create a templates folder inside the members folder, and create a HTML file \nnamed myfirst.html .  The file structure should be like this:   my_tennis_club manage.py my_tennis_club/ members/ templates/ myfirst.html    Open the HTML file and insert the following:   my_tennis_club/members/templates/myfirst.html :  <!DOCTYPE html>\n<html>\n<body>\n\n<h1>Hello World!</h1>\n<p>Welcome to my first Django project!</p>\n\n</body>\n</html>    Modify the View  Open the views.py file and replace the members view with this:   my_tennis_club/members/views.py :  from django.http import HttpResponse\nfrom django.template import loader\n\ndef members(request):\n  template = loader.get_template('myfirst.html')\n  return HttpResponse(template.render())    Change Settings  To be able to work with more complicated stuff than \"Hello World!\", \nWe have to tell Django that a new app is created.  This is done in the settings.py file in the my_tennis_club folder.  Look up the INSTALLED_APPS[] list and add the members app like this:   my_tennis_club/my_tennis_club/settings.py :  INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'members'\n]   Then run this command:   py manage.py migrate   Which will produce this output:   Operations to perform: Apply all migrations: admin, auth,\n  contenttypes, sessions Running migrations: Applying \n  contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying \n  admin.0002_logentry_remove_auto_add... OK Applying \n  admin.0003_logentry_add_action_flag_choices... OK Applying \n  contenttypes.0002_remove_content_type_name... OK Applying \n  auth.0002_alter_permission_name_max_length... OK Applying \n  auth.0003_alter_user_email_max_length... OK Applying \n  auth.0004_alter_user_username_opts... OK Applying \n  auth.0005_alter_user_last_login_null... OK Applying \n  auth.0006_require_contenttypes_0002... OK Applying \n  auth.0007_alter_validators_add_error_messages... OK Applying \n  auth.0008_alter_user_username_max_length... OK Applying \n  auth.0009_alter_user_last_name_max_length... OK Applying \n  auth.0010_alter_group_name_max_length... OK Applying \n  auth.0011_update_proxy_permissions... OK Applying \n  auth.0012_alter_user_first_name_max_length... OK Applying \n  sessions.0001_initial... OK (myworld) C:\\Users\\ Your Name \\myworld\\my_tennis_club>    Start the server by navigating to the /my_tennis_club folder and execute this command:   py manage.py runserver   In the browser window, type 127.0.0.1:8000/members/ in the address bar.  The result should look like this:       ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django URLs", "url": "https://www.w3schools.com/django/django_urls.php", "content": "Django URLs   ❮ Previous  Next ❯    URLs  Create a file named urls.py in the same folder as the views.py file, and type this code in it:   my_tennis_club/members/urls.py :  from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('members/', views.members, name='members'),\n]   The urls.py file you just created is \nspecific for the members application. We have \nto do some routing in the root directory my_tennis_club as well. This may seem complicated, but for now, just follow the instructions \nbelow.  There is a file called urls.py on the my_tennis_club folder, open that file and add the include module in the import statement, and also add a path() function in the urlpatterns[] list, with arguments that will route users that comes in via 127.0.0.1:8000/ .  Then your file will look like this:   my_tennis_club/my_tennis_club/urls.py :  from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('', include('members.urls')),\n    path('admin/', admin.site.urls),\n]   If the server is not running, navigate to the /my_tennis_club folder and execute this command in the command prompt:   py manage.py runserver   In the browser window, type 127.0.0.1:8000/members/ in the address bar.       ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Views", "url": "https://www.w3schools.com/django/django_views.php", "content": "Django Views   ❮ Previous  Next ❯    Views  Django views are Python functions that take http requests and return http response, \nlike HTML documents.  A web page that uses Django is full of views with different tasks and \nmissions.  Views are usually put in a file called views.py located on your app's folder.  There is a views.py in your members folder that looks like this:   my_tennis_club/members/views.py :  from django.shortcuts import render\n\n# Create your views here.   Find it and open it, and replace the content with this:   my_tennis_club/members/views.py :  from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef members(request):\n    return HttpResponse(\"Hello world!\")    Note: The name of the view does not have to be the same as the application.  I call it members because I think it fits well\nin this context.   This is a simple example on how to send a response back to the browser.  But how can we execute the view?\nWell, we must call the view via a URL.  You will learn about URLs in the next chapter .      ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Create App", "url": "https://www.w3schools.com/django/django_create_app.php", "content": "Django Create App   ❮ Previous  Next ❯    What is an App?  An app is a web application that has a specific meaning in your project, like a \nhome page, a contact form, or a members database.  In this tutorial we will create an app that allows us to list and register members in a database.  But first, let's just create a simple Django app that displays \"Hello \nWorld!\".   Create App  I will name my app members .  Start by navigating to the selected location where you want to store the app, in my case the my_tennis_club folder, and run the \ncommand below.  If the server is still running, and you are not able to write commands, press \n[CTRL] [BREAK], or [CTRL] [C] to stop the server and you should be back in the virtual \nenvironment.   py manage.py startapp members   Django creates a folder named members in my project, \nwith this content:   my_tennis_club manage.py my_tennis_club/ members/ migrations/ __init__.py __init__.py admin.py apps.py models.py tests.py views.py    These are all files and folders with a specific meaning. You will learn  \nabout most of them later in this tutorial.  First, take a look at the file called views.py .  This is where we gather the information we need to send back a proper \nresponse.  You will learn more about views in the next chapter .      ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Create Project", "url": "https://www.w3schools.com/django/django_create_project.php", "content": "Django Create Project   ❮ Previous  Next ❯    My First Project  Once you have come up with a suitable name for your Django project, like \nmine: my_tennis_club , navigate to where in the file \nsystem you want to store the code (in the virtual environment),\nI will navigate to the myworld folder, and run this command in the command prompt:   django-admin startproject my_tennis_club   Django creates a my_tennis_club folder on my computer, with this content:   my_tennis_club manage.py my_tennis_club/ __init__.py asgi.py settings.py urls.py wsgi.py    These are all files and folders with a specific meaning, you will learn \nabout some of them later in this tutorial, but for now, it is more important to know that this \nis the location of your project, and that you can start building  \napplications in it.   Run the Django Project  Now that you have a Django project, you can run it, and see what it looks like in a browser.  Navigate to the /my_tennis_club folder and execute this command in the command prompt:   py manage.py runserver   Which will produce this result:   Watching for file changes with StatReloader Performing system checks...  System check identified no issues (0 silenced).  You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions. Run 'python manage.py migrate' to apply them. October 27, 2022 - 13:03:14 Django version 4.1.2, using settings 'my_tennis_club.settings' Starting development server at http://127.0.0.1:8000/ Quit the server with CTRL-BREAK.   Open a new browser window and type 127.0.0.1:8000 in the address bar.  The result:    What's Next?  We have a Django project!  The next step is to make an app in your \nproject.  You cannot have a web page created with Django without an app.      ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Install Django", "url": "https://www.w3schools.com/django/django_install_django.php", "content": "Install Django   ❮ Previous  Next ❯    Install Django  Now, that we have created a virtual environment, we are ready to install Django.   Note: Remember to install Django while you are in the virtual environment!   Django is installed using pip, with this command:   Windows:   (myworld) C:\\Users\\ Your Name > py -m pip install Django  Unix/MacOS:   (myworld) ... $ python -m pip install Django   Which will give a result that looks like this (at least on my Windows machine):   Collecting Django Downloading \n  Django-4.0.3-py3-none-any.whl (8.0 MB) |████████████████████████████████| \n  8.0 MB 2.2 MB/s Collecting sqlparse>=0.2.2 Using cached \n  sqlparse-0.4.2-py3-none-any.whl (42 kB) Collecting asgiref<4,>=3.4.1 Downloading asgiref-3.5.0-py3-none-any.whl (22 kB) Collecting tzdata; \n  sys_platform == \"win32\" Downloading tzdata-2021.5-py2.py3-none-any.whl (339 \n  kB) |████████████████████████████████| 339 kB 6.4 MB/s Installing \n  collected packages: sqlparse, asgiref, tzdata, Django Successfully \n  installed Django-4.0.3 asgiref-3.5.0 sqlparse-0.4.2 tzdata-2021.5  WARNING: You are using pip version 20.2.3; however, version 22.3 is available. You should consider upgrading via the 'C:\\Users\\ Your Name \\myworld\\Scripts\\python.exe -m pip install --upgrade pip' command.     That's it! Now you have installed Django in your new project, running in a virtual environment!   Windows, Mac, or Unix?  You can run this project on either one. There are some small differences, like when writing commands in the command \nprompt, Windows uses py as the first word in the command line, \nwhile Unix and MacOS use python :   Windows:  py --version  Unix/MacOS:  python --version    In the rest of this tutorial, we will be using the Windows command.    Check Django Version  You can check if Django is installed by asking for its version number like this:    (myworld) C:\\Users\\ Your Name > django-admin --version   If Django is installed, you will get a result with the version number:   4.1.2    What's Next?  Now you are ready to create a Django project in a virtual environment on your computer.  In the next chapters of this tutorial we will create a Django project and look at the various \nfeatures of Django\nand hopefully make you a Django developer.      ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django - Create Virtual Environment", "url": "https://www.w3schools.com/django/django_create_virtual_environment.php", "content": "Django - Create Virtual Environment   ❮ Previous  Next ❯    Virtual Environment  It is suggested to have a dedicated virtual environment for each Django project, and one way to manage a virtual environment \nis venv , which is included in Python.  The name of the virtual environment is your choice, in this tutorial we will call it myworld .  Type the following in the command prompt, remember to navigate to \nwhere you want to create your project:   Windows:  py -m venv myworld  Unix/MacOS:  python -m venv myworld   This will set up a virtual environment, and create a folder named \"myworld\" \nwith subfolders and files, like this:   myworld Include Lib Scripts pyvenv.cfg   Then you have to activate the environment, by typing this command:   Windows:  myworld\\Scripts\\activate.bat  Unix/MacOS:  source myworld/bin/activate   Once the environment is activated, you will see this result in the command prompt:   Windows:  (myworld) C:\\Users\\ Your Name >  Unix/MacOS:  (myworld) ... $    Note: You must activate the virtual environment every time you open \nthe command prompt to work on your project.    Install Django  In the next chapter you will finally learn how to install Django!      ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Getting Started", "url": "https://www.w3schools.com/django/django_getstarted.php", "content": "Django Getting Started   ❮ Previous  Next ❯     To install Django, you must have Python installed, and a package manager like PIP .  PIP is included in Python from version 3.4.    Django Requires Python  To check if your system has Python installed, run this command in the command prompt:   python --version   If Python is installed, you will get a result with the version number, like this   Python 3.9.2   If you find that you do not have Python installed on your computer,\nthen you can download it for free from the following website: https://www.python.org/   PIP  To install Django, you must use a package manager like PIP, which is included in Python from version 3.4.  To check if your system has PIP installed, run this command in the command prompt:   pip --version   If PIP is installed, you will get a result with the version number.  For me, on a windows machine, the result looks like this:   pip 20.2.3 from c:\\python39\\lib\\site-packages\\pip (python 3.9)   If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/   Virtual Environment  It is suggested to have a dedicated virtual environment for each Django project,\nand in the next chapter you will learn how to create a virtual environment, and then install Django in it.       ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Tutorial", "url": "https://www.w3schools.com/django/index.php", "content": "Django Tutorial   ❮ Home  Next ❯    [+:  Django is a back-end server side web framework.  Django is free, open source and written in Python.  Django makes it easier to build web pages using Python.  Start learning \n  Django now ❯    Learning by Doing  In this tutorial you get a step by step guide on how to install and create a Django project.\nYou will learn how to create a project where you can add, read, update or delete data.  You will learn how to make HTML Templates and use Django Template Tags to insert data within a HTML document.  You will learn how to work with QuerySets to extract, filter, and sort data from the database.  You will also learn how to set up a PostgreSQL database and how to deploy your \nDjango project to the world.      Django  Introduction    Getting Started    Virtual Environment    Install Django    Create Project    Create App    Views    Urls    Templates    Models    Insert Data    Update Data    Delete Data    Update Model    Display  Prepare    Add Details    Add Master    Add Main    Add 404    Add Test    Admin  Admin    Create User    Models    List Display    Update    Add    Delete    Syntax  Variables    Tags    If...Else    For Loop    Comment    Include    QuerySets  QuerySet    Get Data    Filter    Order By    Static Files  Add Static    WhiteNoise    Collect    Global Static    Add to Poject    PostgreSQL  Intro    AWS Account    RDS    Connect    Add Members    Deploy  Elastic Beanstalk    Requirements    django.config    Create .zip    Deploy    Update      Learning by Examples  In the tutorial we will use examples to better explain the various concepts.   Example  <ul>\n  {% for x in mymembers %}\n    <li>{{ x.firstname }}</li>\n  {% endfor %}\n</ul>  Run Example »    Learning by Exercises  Many chapters in this tutorial end with an exercise where you can check your level of knowledge.   See all Django Exercises   Django Quiz  Learn by taking a quiz! The quiz will give you a signal of how much you know about Django.  Start Django Quiz    My Learning  Track your progress with the free \"My Learning\" program here at W3Schools.  Log in to your account, and start earning points!  This is an optional feature. You can study at W3Schools without using My Learning.           Learning by References  You will also find references over the most common Django features:   Template Tags  QuerySet Filters  Field Lookups     ❮ Home  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Introduction", "url": "https://www.w3schools.com/django/django_intro.php", "content": "Django Introduction   ❮ Previous  Next ❯    What is Django?  Django is a Python framework that makes it easier to create web sites using Python.  Django takes care of the difficult stuff so \nthat you can concentrate on building your web applications.  Django emphasizes reusability of components, also referred to as DRY (Don't \nRepeat Yourself), and comes with ready-to-use features like login system, \ndatabase connection and CRUD operations (Create Read Update Delete).   Django is especially helpful for database driven websites.    How does Django Work?  Django follows the MVT design pattern (Model View Template).   Model - The data you want to present, usually data from a database.  View - A request handler that returns the relevant template and content - based on the request from the user.  Template - A text file (like an HTML file) containing the layout of the web page, with logic on how to display the data.    Model  The model provides data from the database.  In Django, the data is delivered as an Object Relational Mapping (ORM),\nwhich is a technique designed to make it easier to work with databases.  The most common way to extract data from a database is SQL. One problem with \nSQL is that you have to have a pretty good understanding of the database structure\nto be able to work with it.  Django, with ORM, makes it easier to communicate with the database, without having to write \ncomplex SQL statements.  The models are usually located in a file called models.py .   View  A view is a function or method that takes http requests as arguments,\nimports the relevant model(s), and finds out what data to send to the template,\nand returns the final result.  The views are usually located in a file called views.py .   Template  A template is a file where you describe how the result should be represented.  Templates are often .html files, with HTML code describing the layout of a web page,\nbut it can also be in other file formats to present other results, but we will concentrate on .html files.  Django uses standard HTML to describe the layout, but uses Django tags to add logic:  <h1>My Homepage</h1>\n\n<p>My name is {{ firstname }}.</p>  The templates of an application is located in a folder named templates .   URLs  Django also provides a way to navigate around the different pages in a website.  When a user requests a URL, Django decides which view it will send it to.  This is done in a file called urls.py .   So, What is Going On?  When you have installed Django and created your first Django web application,\nand the browser requests the URL, this is basically what happens:   Django receives the URL, checks the urls.py file, and calls the view that matches the URL.  The view, located in views.py , checks for relevant models.  The models are imported from the models.py file.  The view then sends the data to a specified template in the template folder.  The template contains HTML and Django tags, and with the data it returns \nfinished HTML content back to the browser.   Django can do a lot more than this, but this is basically what you will learn in this tutorial, and are the basic steps\nin a simple web application made with Django.   Django History  Django was invented by Lawrence Journal-World in 2003, to meet the short \ndeadlines in the newspaper and at the same time meeting the demands of \nexperienced web developers.  Initial release to the public was in July 2005.  Latest version of Django is 4.0.3 (March 2022).      ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django for Tag", "url": "https://www.w3schools.com/django/django_tags_for.php", "content": "Django for Tag   ❮ Previous  Next ❯    For Loops  A for loop is used for iterating over a sequence, like looping over items in an \narray, a list, or a dictionary.   Example  Loop through the items of a list:  {% for x in fruits %}\n  <h1>{{ x }}</h1>\n{% endfor %}  Run Example »    Example  Loop through a list of dictionaries:  {% for x in cars %}\n  <h1>{{ x.brand }}</h1>\n  <p>{{ x.model }}</p>\n  <p>{{ x.year }}</p>\n{% endfor %}  Run Example »    Data From a Model  Data in a model is like a table with rows and columns.  The Member model we created earlier has five rows, and each row has \nthree columns:     id  firstname  lastname  phone  joined_date    1  Emil  Refsnes  5551234  2022-01-05    2  Tobias  Refsnes  5557777  2022-04-01    3  Linus  Refsnes  5554321  2021-12-24    4  Lene  Refsnes  5551234  2021-05-01    5  Stalikken  Refsnes  5559876  2022-09-29     When we fetch data from the model, it comes as a QuerySet object, with a similar format as the \ncars example above: a list with dictionaries:   <QuerySet [\n  {\n    'id': 1,\n    'firstname': 'Emil',\n    'lastname': 'Refsnes',\n    'phone': 5551234,\n    'joined_date': datetime.date(2022, 1, 5)\n  },\n  {\n    'id': 2,\n    'firstname': 'Tobias',\n    'lastname': 'Refsnes'\n    'phone': 5557777,\n    'joined_date': datetime.date(2021, 4, 1)\n  },\n  {\n    'id': 3,\n    'firstname': 'Linus',\n    'lastname': 'Refsnes'\n    'phone': 5554321,\n    'joined_date': datetime.date(2021, 12, 24)\n  },\n  {\n    'id': 4,\n    'firstname': 'Lene',\n    'lastname': 'Refsnes'\n    'phone': 5551234,\n    'joined_date': datetime.date(2021, 5, 1)\n  },\n  {\n    'id': 5,\n    'firstname': 'Stalikken',\n    'lastname': 'Refsnes'\n    'phone': 5559876,\n    'joined_date': datetime.date(2022, 9, 29)\n  }\n]>    Example  Loop through items fetched from a database:  {% for x in members %}\n  <h1>{{ x.id }}</h1>\n  <p>\n    {{ x.firstname }}\n    {{ x.lastname }}\n  </p>\n{% endfor %}  Run Example »    Reversed  The reversed keyword is used when you want \nto do the loop in reversed order.   Example  {% for x in members reversed %}\n  <h1>{{ x.id }}</h1>\n  <p>\n    {{ x.firstname }}\n    {{ x.lastname }}\n  </p>\n{% endfor %}  Run Example »    Empty  The empty keyword can be used if you want to \ndo something special if the object is empty.   Example  <ul>\n  {% for x in emptytestobject %}\n    <li>{{ x.firstname }}</li>\n  {% empty %}\n    <li>No members</li>\n  {% endfor %}\n</ul>  Run Example »   The empty keyword can also be used if the object does not exist:   Example  <ul>\n  {% for x in myobject %}\n    <li>{{ x.firstname }}</li>\n  {% empty %}\n    <li>No members</li>\n  {% endfor %}\n</ul>  Run Example »    Loop Variables  Django has some variables that are available for you inside a loop:   forloop.counter  forloop.counter0  forloop.first  forloop.last  forloop.parentloop  forloop.revcounter  forloop.revcounter0   forloop.counter  The current iteration, starting at 1.   Example  <ul>\n  {% for x in fruits %}\n    <li>{{ forloop.counter }}</li>\n  {% endfor %}\n</ul>  Run Example »   forloop.counter0  The current iteration, starting at 0.   Example  <ul>\n  {% for x in fruits %}\n    <li>{{ forloop.counter0 }}</li>\n  {% endfor %}\n</ul>  Run Example »   forloop.first  Allows you to test if the loop is on its first iteration.   Example  Draw a blue background for the first iteration of the loop:  <ul>\n  {% for x in fruits %}\n    <li\n      {% if forloop.first %}\n        style='background-color:lightblue;'\n      {% endif %}\n    >{{ x }}</li>\n  {% endfor %}\n</ul>  Run Example »   forloop.last  Allows you to test if the loop is on its last iteration.   Example  Draw a blue background for the last iteration of the loop:  <ul>\n  {% for x in fruits %}\n    <li\n      {% if forloop.last %}\n        style='background-color:lightblue;'\n      {% endif %}\n    >{{ x }}</li>\n  {% endfor %}\n</ul>  Run Example »   forloop.revcounter  The current iteration if you start at the end and count backwards, ending up at 1.   Example  <ul>\n  {% for x in fruits %}\n    <li>{{ forloop.revcounter }}</li>\n  {% endfor %}\n</ul>  Run Example »   forloop.revcounter0  The current iteration if you start at the end and count backwards, ending up at \n0.   Example  <ul>\n  {% for x in fruits %}\n    <li>{{ forloop.revcounter0 }}</li>\n  {% endfor %}\n</ul>  Run Example »       ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django if Tag", "url": "https://www.w3schools.com/django/django_tags_if.php", "content": "Django if Tag   ❮ Previous  Next ❯    If Statement  An if statement evaluates a variable and executes a block of code if the value is true.   Example  {% if greeting == 1 %}\n  <h1>Hello</h1>\n{% endif %}  Run Example »    Elif  The elif keyword says \"if the previous conditions were not true,\nthen try this condition\".   Example  {% if greeting == 1 %}\n  <h1>Hello</h1>\n{% elif greeting == 2 %}\n  <h1>Welcome</h1>\n{% endif %}  Run Example »    Else  The else keyword catches anything which isn't caught by the preceding conditions.   Example  {% if greeting == 1 %}\n  <h1>Hello</h1>\n{% elif greeting == 2 %}\n  <h1>Welcome</h1>\n{% else %}\n  <h1>Goodbye</h1>\n{% endif %}  Run Example »    Operators  The above examples uses the == operator, which is used to check if a variable is equal to a value,\nbut there are many other operators you can use, or you can even drop the operator if you just want to check if \na variable is not empty:   Example  {% if greeting %}\n  <h1>Hello</h1>\n{% endif %}  Run Example »    ==  Is equal to.   Example  {% if greeting == 2 %}\n  <h1>Hello</h1>\n{% endif %}  Run Example »    !=  Is not equal to.   Example  {% if greeting != 1 %}\n  <h1>Hello</h1>\n{% endif %}  Run Example »    <  Is less than.   Example  {% if greeting < 3 %}\n  <h1>Hello</h1>\n{% endif %}  Run Example »    <=  Is less than, or equal to.   Example  {% if greeting <= 3 %}\n  <h1>Hello</h1>\n{% endif %}  Run Example »    >  Is greater than.   Example  {% if greeting > 1 %}\n  <h1>Hello</h1>\n{% endif %}  Run Example »    >=  Is greater than, or equal to.   Example  {% if greeting >= 1 %}\n  <h1>Hello</h1>\n{% endif %}  Run Example »    and  To check if more than one condition is true.   Example  {% if greeting == 1 and day == \"Friday\" %}\n  <h1>Hello Weekend!</h1>\n{% endif %}  Run Example »    or  To check if one of the conditions is true.   Example  {% if greeting == 1 or greeting == 5 %}\n  <h1>Hello</h1>\n{% endif %}  Run Example »    and/or  Combine and and or .   Example  {% if greeting == 1 and day == \"Friday\" or greeting == 5 %}  Run Example »   Parentheses are not allowed in if statements \nin Django, so when you combine and and or operators, it is important to know that \nparentheses are added for and but not for or .  Meaning that the above example is \nread by the interpreter like this:   {% if (greeting == 1 and day == \"Friday\") or greeting == 5 %}    in  To check if a certain item is present in an object.   Example  {% if 'Banana' in fruits %}\n  <h1>Hello</h1>\n{% else %}\n  <h1>Goodbye</h1>\n{% endif %}  Run Example »    not in  To check if a certain item is not present in an object.   Example  {% if 'Banana' not in fruits %}\n  <h1>Hello</h1>\n{% else %}\n  <h1>Goodbye</h1>\n{% endif %}  Run Example »    is  Check if two objects are the same.  This operator is different from the == operator, because the == operator \nchecks the values of two objects, but the is operator checks \nthe identity of two \nobjects.  In the view we have two objects, x and y , with the same values:   Example  views.py :  from django.http import HttpResponse\nfrom django.template import loader\n\ndef testing(request):\n  template = loader.get_template('template.html')\n  context = {\n    'x': ['Apple', 'Banana', 'Cherry'], \n    'y': ['Apple', 'Banana', 'Cherry'], \n  }\n  return HttpResponse(template.render(context, request))   The two objects have the same value, but is it the same object?   Example  {% if x is y %}\n  <h1>YES</h1>\n{% else %}\n  <h1>NO</h1>\n{% endif %}  Run Example »   Let us try the same example with the == operator instead:   Example  {% if x == y %}\n  <h1>YES</h1>\n{% else %}\n  <h1>NO</h1>\n{% endif %}  Run Example »   How can two objects be the same? Well, if you have two objects that points to \nthe same object, then the is operator evaluates \nto true:  We will demonstrate this by using the {% with %} tag, which allows us to create variables in the template:   Example  {% with var1=x var2=x %}\n  {% if var1 is var2 %}\n    <h1>YES</h1>\n  {% else %}\n    <h1>NO</h1>\n  {% endif %}\n{% endwith %}  Run Example »    is not  To check if two objects are not the same.   Example  {% if x is not y %}\n  <h1>YES</h1>\n{% else %}\n  <h1>NO</h1>\n{% endif %}  Run Example »       ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Template Tags", "url": "https://www.w3schools.com/django/django_template_tags.php", "content": "Django Template Tags   ❮ Previous  Next ❯    Template Tags  In Django templates, you can perform programming logic\nlike executing if statements\nand for loops.  These keywords, if and for ,\nare called \"template tags\" in Django.  To execute template tags, we surround them in {% %} brackets.   Example  templates/template.html :  {% if greeting == 1 %}\n  <h1>Hello</h1>\n{% else %}\n  <h1>Bye</h1>\n{% endif %}  Run Example »    Django Code  The template tags are a way of telling Django that here comes something else than plain HTML.  The template tags allows us to to do some programming on the server before sending HTML to the client.   templates/template.html :  <ul>\n  {% for x in mymembers %}\n    <li>{{ x.firstname }}</li>\n  {% endfor %}\n</ul>  Run Example »   In the next chapters you will learn about the most common template tags.   Tag Reference  A list of all template tags:    Tag  Description    autoescape  Specifies if autoescape mode is on or off    block  Specifies a block section    comment  Specifies a comment section    csrf_token  Protects forms from Cross Site Request Forgeries    cycle  Specifies content to use in each cycle of a loop    debug  Specifies debugging information    extends  Specifies a parent template    filter  Filters content before returning it    firstof  Returns the first not empty variable    for  Specifies a for loop    if  Specifies a if statement    ifchanged  Used in for loops. Outputs a block only if a value has changed since the \nlast iteration    include  Specifies included content/template    load  Loads template tags from another library    lorem  Outputs random text    now  Outputs the current date/time    regroup  Sorts an object by a group    resetcycle  Used in cycles. Resets the cycle    spaceless  Removes whitespace between HTML tags    templatetag  Outputs a specified template tag    url  Returns the absolute URL part of a URL    verbatim  Specifies contents that should not be rendered by the template engine    widthratio  Calculates a width value based on the ratio between a given value and a max \nvalue    with  Specifies a variable to use in the block      ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Template Variables", "url": "https://www.w3schools.com/django/django_template_variables.php", "content": "Django Template Variables   ❮ Previous  Next ❯    Template Variables  In Django templates, you can render variables by putting them inside {{ }} brackets:   Example  templates/template.html :  <h1>Hello {{ firstname }}, how are you?</h1>  Run Example »    Create Variable in View  The variable firstname in the example above was sent to the template via a view:   views.py :  from django.http import HttpResponse\nfrom django.template import loader\n\ndef testing(request):\n  template = loader.get_template('template.html')\n  context = {\n    'firstname': 'Linus',\n  }\n  return HttpResponse(template.render(context, request))  Run Example »   As you can see in the view above, we create an object named context and fill it with data, and send it as the first parameter in the template.render() function.   Create Variables in Template  You can also create variables directly in the template, by using the {% with %} template tag.  The variable is available until the {% endwith %} tag appears:   Example  templates/template.html :  {% with firstname=\"Tobias\" %}\n<h1>Hello {{ firstname }}, how are you?</h1>\n{% endwith %}  Run Example »   You will learn more about template tags in \nthe next chapter.   Data From a Model  The example above showed a easy approach on how to create and use variables in a template.  Normally, most of the external data you want to use in a template, comes from a model.  We have created a model in the previous chapters, called Member ,\nwhich we will use in many examples in the next chapters of this tutorial.  To get data from the Member model,\nwe will have to import it in the views.py file,\nand extract data from it in the view:   members/views.py :  from django.http import HttpResponse, HttpResponseRedirect\nfrom django.template import loader\nfrom .models import Member\n\ndef testing(request):\n  mymembers = Member.objects.all().values()\n  template = loader.get_template('template.html')\n  context = {\n    'mymembers': mymembers,\n  }\n  return HttpResponse(template.render(context, request))   Now we can use the data in the template:   templates/template.html :  <ul>\n  {% for x in mymembers %}\n    <li>{{ x.firstname }}</li>\n  {% endfor %}\n</ul>  Run Example »   We use the Django template tag {% for %} to loop through the \nmembers. You will learn more about template tags in the next chapter.     ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "W3Schools Django Certificate", "url": "https://www.w3schools.com/django/django_exam.php", "content": "W3Schools Django Certificate   ❮ Previous  Next ❯      w 3 s c h o o l s  C E R T I F I E D   .   2 0 2 2      W3Schools offers an Online Certification Program.  The perfect solution for busy professionals who need to balance work, family, and career building.  More than 50 000 certificates already issued!   Get Your Certificate »      w 3 s c h o o l s  C E R T I F I E D   .   2 0 2 2  W3Schools offers an Online Certification Program.  The perfect solution for busy professionals who need to balance work, family, and career building.  More than 50 000 certificates already issued!  Get Your Certificate »            Document your skills Improve your career      Study at your own pace Save time and money      Known brand Trusted by top companies         Who Should Consider Getting Certified?  Any student or professional within the digital industry.  Certifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.  W3Schools is Trusted by Top Companies  W3Schools has over two decades of experience with teaching coding online.  Our certificates are recognized and valued by companies looking to employ skilled developers.  Save Time and Money  Show the world your coding skills by getting a certification.  The prices is a small fraction compared to the price of traditional education.  Document and validate your competence by getting certified!    Exam overview  Fee: 95 USD  Achievable certification levels:  Intermediate (40%) Advanced (75%) Professional (90%)  Number of questions:  Adaptive, 60 on average  Requirement to pass:  Minimum 40% - Intermediate level  Time limit: 60 minutes  Number of attempts to pass: 3  Exam deadline: None  Certification Expiration: None  Format: Online, multiple choice  Register now »     Advance Faster in Your Career  Getting a certificate proves your commitment to upgrading your skills.  The certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.  It gives you the credibility needed for more responsibilities, larger projects, and a higher salary.  Knowledge is power, especially in the current job market.  Documentation of your skills enables you to advance your career or helps you to start a new one.    How Does It Work?   Study for free at W3Schools.com  Study at your own speed  Test your skills with W3Schools online quizzes  Apply for your certificate by paying an exam fee  Take your exam online, at any time, and from any location     Get Your Certificate and Share It With The World  Example certificate:   Each certificate gets a unique link that can be shared with others.  Validate your certification with the link or QR code.  Check how it looks like in this Example .  Share your certificate on Linked in the Certifications section in just one click!    Document Your Skills  Getting a certificate proves your commitment to upgrade your skills,\ngives you the credibility needed for more responsibilities, larger projects, and a higher salary.  Get Your Certificate »    Looking to add multiple users?  Are you an educator, manager or business owner looking for courses or certifications?  We are working with schools, companies and organizations from all over the world.  Get courses and/or certifications for your team here.     ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Server", "url": "https://www.w3schools.com/django/django_server.php", "content": "Django Server   ❮ Previous  Next ❯         Create Django Server   Host Django on Python Server with W3Schools Spaces  Get Started Now!        Practice  Coding Skills          kAI  AI Tutor       Build  Projects       Host  Securely             Choose your Plan  By subscribing to a plan you support the W3Schools mission to make learning available to everyone - no matter their background.     Monthly      Annually           Free  $0 /Forever      This is for you that are beginning to explore coding and web development   Build and host 1 static website  100 credits/month     Access various AI features like W3Schools kAI coding tutor and interview preparation.    No support     Get Free      W3Schools Plus  $14.99 /Month      This is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience.   Ad-free experience  Build and host 15 static websites  Build and host 1 full stack server  Choose from 18 frameworks / languages  Choose from 75+ templates  10000 credits/month     Access various AI features like W3Schools kAI coding tutor and interview preparation.    Priority Support  Cancel anytime     Get Plus      W3Schools Classroom  Contact us for information     W3Schools right to use and Plus for educational institutions or enterprise customers   Everything in W3Schools Plus  Certification Exams  And much more!     Get More Info             NEW SUBSCRIBER DEAL  25% OFF  FOR A YEAR    USE PROMO CODE:  SPACES25        Want custom domains?  You can also buy a domain or connect an existing one.  Looking to add multiple users?  Read here for how to get in touch         Powerful Code Editor  Front-end, Back-end or Full-stack - the choice is yours             Practice Makes Perfect  Sharpen and Master your development skills with these technologies using Spaces .    Get Started Now!           Save Time with Templates  Build powerful websites in just a few clicks      Portfolio      Blog        Webshop      Tutor     Explore All Templates   Get Started Now!            k AI  Just landed in Spaces  Learn to code more effectively and intelligently with kAI - AI tutor  Get Started Now!         Hi! I'm kAI, W3Schools AI Tutor...  Feel free to ask me any coding-related questions, and I'll do my best to assist you.  I can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more...  I can even create complete websites for you based on your input, so what are you waiting for?          Super Simple to Share  Host and Publish Websites in no time     Included for free in all plans  W3Schools subdomain, hosting, and SSL certificate.  Want custom domains?  Buy a domain or transfer an existing one and connect it to your space.                How it works     1. Join W3Schools - and create a space     2. Choose a template - or start from scratch     3. Edit code directly in your browser     4. Share your website with the world         Coding Made Easy  All at your fingertips with our easy-to-use code editor   Cloud-based  Terminal & Log  How To Libraries  Database  File Navigator  Package Manager  Analytics  Environment Manager    Get Started Now!         Cloud-Based  Save Time & Money.  No installation required. Access everything in your browser. Get started in seconds.  Get Started Now!              File Navigator  All Your Files in One Place.  Find and switch easily between your code files without leaving the code editor.  Get Started Now!            Terminal and Log  Fix Your Code Faster.  Monitor your code, debug and troubleshoot your work during the development process.  Get Started Now!            Database  Get Full Data Visibility.  Find and preview all the data stored in your website. Anytime, from anywhere.  Get Started Now!            Environment Manager  Increased Control and Security.  Control your website access points to establish secure connections.  Get Started Now!            Package Manager  Find What You Need Quicker.  Search and install frameworks and libraries in just one click.  Get Started Now!            User Analytics  Get Traffic Insights.  Learn from your website visitors to deliver a better user experience.  Get Started Now!              Get Inspired  Connect and share your website with the community to get instant feedback  Get Started Now!               Frequently Asked Questions   What's the difference between 'Basic' and 'Full Stack' Spaces?   With Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites.    Which programming languages are included in 'Basic' and 'Full Stack' Spaces?   Basic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django.    How are subscriptions renewed?   Your subscription will be automatically renewed every month.    What happens if I cancel my subscription?   Your access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically.    Can I subscribe to multiple accounts at once?   To subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com    Have some other questions? Visit our support page  Subscribe for $14.99/Month  Cancel anytime.        ❮ Previous  Log in to track progress  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django ", "url": "https://www.w3schools.com/django/django_study_plan.php", "content": "Django Study Plan   ❮ Previous  Next ❯    Introduction  The Django study plan helps you teach your students Django step-by-step.  Creating a study plan for Django is easy.  You can use a pre-built study plan or customize it.  Students have different skill levels. The study plans can be customized to ensure that everyone is challenged.  Save time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of Django to the final exam.   W3Schools Academy  This study plan is a feature of W3Schools Academy.  W3Schools Academy is a platform that has everything you need to teach coding, all in one place.  It offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.  You need to have an active subscription to access the study plan feature. There are two different subscription tiers:   Essentials ($1.99 / month per student)  Full Access ($5.99 / month per student)  Calculate your price and order here .   Learn More »  Academy also offer other features such as:   Managing your classroom  Tracking of student progress and reports  Labs, assignments, and code challenges (prebuilt challenges or create your own ones)  Auto-grading  Teaching materials  Certification exams   Get a free demo »   Teacher Materials  W3Schools has everything you need to teach Django.  The Django training materials is available for you to include and use in your study plan:   W3Schools Django Tutorial  Django Exercises  Django Quiz  Django Challenges (Coding challenges)  Django Certification Exam (End of Pathway Exam)    Django Syllabus  With the Django Syllabus, your students will start with the basics, like getting started with Django, and understanding how it works. Then, move to more advanced topics, like creating models, managing views, and building dynamic web applications. Each chapter includes examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun.  Read more about Django Syllabus .   Study Plan Overview  The study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.    Learning Paths   You can add ready-made learning paths.  The learning paths are by default ordered by our recommended order.  You can change the order.  You can add custom activities with text, links, or multi-media files.  Drag and drop or click to make changes to the path.     Interactive Content   Tutorials  Try-its (test code snippets)  Exercises  Quiz  Challenges  Labs     Timeline and Pace   You can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).  You can decide the learning pace for your class.  Different study plans can be assigned to different students in the same class.  The flexibility can help to make sure that everyone is challenged.     Track Student Progress   There are tools to track student progress.  The analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.  The challenges can be auto-graded or manually graded. The results are available to you as a teacher.     End of Pathway Exam   The Django study plan aligns with the Django Certification Exam.  The exam can be taken at the end of the study plan, at your selected date.  The exam summarizes the Django Tutorial.  You get reports of the students' results.     Accessibility   Study plans and learning materials are accessible on desktops, tablets, and smartphones.  This ensures students can learn anytime, anywhere.     Learn More »   Sample Study Plan  You choose the timeline and pace of your study plans.  Schools have different preferences.  Some would like more intensive pace, e.g. 3 weeks, others 12 or more weeks.  It is completely up to you.  For example, this is how a 3-week Django study plan could look like:   Week 1: Introduction, Display Data, Admin  Week 2: Syntax, QuerySets, Static Files  Week 3: PostgreSQL, Deploy, More Django, Django Certification Exam   Image of Sample Django study plan:    Ready to get started?  Start with Django Study Plans today.  Get Started »   Are You a Teacher?  Are you interested in learning how you can use W3Schools Academy to Teach Django programming?  Join our upcoming webinar for a guided demo of W3Schools Academy . You'll see how it works, and discover how it can make teaching programming easier and more engaging.     Join our FREE Webinar »     ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django ", "url": "https://www.w3schools.com/django/django_syllabus.php", "content": "Django Syllabus   ❮ Previous  Next ❯    Introduction  The W3Schools Django Tutorial is comprehensive and beginner-friendly.  It will give you a fundamental knowledge of Django.  It is designed for beginners and requires only basic Python knowledge.  The content has been carefully made to be bite-sized, simple, and easy to understand.  The content has been proven by millions of users over the years. It is updated and improved frequently.  The syllabus outline and its sequence are structured so you can learn Django step by step, from the introduction to creating web applications.  Get Started With Django »   Learning Outcomes   Learn what Django is and create your first project  Set up virtual environment and install Django  Create Django apps and handle web pages with views  Connect pages using Django URLs  Create templates with Django template tags  Work with databases using Django models  Learn CRUD operations (Create, Read, Update, Delete)  Use Django admin interface to manage data  Work with static files and PostgreSQL database  Deploy your Django project to the web    Note: Are you a teacher teaching Django? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here .    Which Subjects Are Django Relevant For?   Web Development: Django can be used for building robust web applications.  Back-end Development: Django provides a complete framework for server-side development.  Database Management: Django's ORM simplifies database operations.  Content Management: Django is good for building content management systems and content-driven websites.  API Development: Django REST framework enables powerful API creation.  E-commerce: Django can be used for building secure e-commerce platforms.  Enterprise Applications: Django is suitable for large-scale enterprise solutions.   Get Started   Activities  In this tutorial we offer different activities for you to learn Django for free:   Lessons  Exercises  Quizzes    Sign in to Track Progress  You can also create a free account to track your progress.  As a signed-in user, you get access to features such as:   Learning paths  Sandbox and lab environments  Achievements  And much more!   Sign Up - It's free   Overview of the Modules     Django Home  Django Intro  Django Get Started  Create Virtual Environment  Install Django  Django Create Project  Django Create App  Django Views  Django URLs  Django Templates  Django Models  Django Insert Data  Django Update Data  Django Delete Data  Django Update Model  Prep Template and View  Add Link to Details  Add Master Template  Add Main Index Page  Django 404 Template  Add Test View  Django Admin  Create User  Include Models  Set List Display  Update Members  Add Members  Delete Members  Django Variables  Django Tags  Django If Else  Django For Loop  Django Comment  Django Include  QuerySet Introduction  QuerySet Get  QuerySet Filter  QuerySet Order By  Add Static Files  Install WhiteNoise  Collect Static Files  Add Global Static Files  Add Styles to the Project  PostgreSQL Intro  Create AWS Account  Create Database in RDS  Connect to Database  Add Members  Elastic Beanstalk (EB)  Create requirements.txt  Create django.config  Create .zip File  Deploy with EB  Update Project  Add Slug Field  Add Bootstrap 5  Template Tag Reference  Filter Reference  Field lookups Reference  Django Compiler    Get Started   Sandbox and Lab Environment  Django, like any other framework, is best learned through hands-on practice.  Try this example using our editor:   Example  <ul>\n  {% for x in mymembers %}\n    <li>{{ x.firstname }}</li>\n  {% endfor %}\n</ul>  Run Example »   If you want to explore more and host your project, we have a feature called Spaces that allows you to build, test and deploy Django applications for free.  Here you get a secure sandbox environment called Spaces, where you can practice Django code and test projects in real-time.  Spaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates.  Spaces require no installation and run directly in the browser.  Features include:   Collaboration  File navigator  Terminal & log  Package manager  Database  Environment manager  Analytics      Create a Spaces Account   Django Certification  W3Schools offers an end-of-pathway certification program.  Here you can take exams to get certified.  The Django exam is a test that summarizes the W3Schools Django syllabus.  After passing the exam you get the \"Certified Django Developer\" Certification.  The certification examis adaptive and graded; students will get a grade from intermediate, advanced to professional.     Buy Certificate »   Are You a Teacher?  Are you interested in learning how you can use W3Schools Academy to Teach \nDjango?  Join our upcoming webinar for a guided demo of W3Schools Academy . You'll see how it works, and discover how it can make teaching programming easier and more engaging.     Join our FREE Webinar »    ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django ", "url": "https://www.w3schools.com/django/django_quiz.php", "content": "Django Quiz   ❮ Previous  Next ❯    You can test your Django skills with W3Schools' Quiz.   The Test  The test contains 25 questions and there is no time limit.  The test is not official, it's just a nice way to see how much you know about \nDjango.  Count Your Score  You will get 1 point for each correct answer. At the end of the Quiz,\nyour total score will be displayed. Maximum score is 25 points.   Start the Quiz  Good luck!  Start the Django Quiz ❯    If you do not know Django, we suggest that you read our Django Tutorial from scratch.      ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django ", "url": "https://www.w3schools.com/django/django_exercises.php", "content": "Django Exercises   ❮ Previous  Next ❯            Exercises  Test your Django skills with exercises from all categories:  Introduction Get started Virtual Environment Installing Django Creating Project Creating Django App Views URLs Templates Models Insert Data Delete Data Update Model 404 Template Admin Create User Admin Include Models Variables The If Tag The For Tag The Comment Tag Include Querysets Queryset Get Data Filter Querysets Sort Querysets Static Files Collect Static Files Global Static Files Add CSS File    Log in to track your progress  If you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete.  As a logged on W3Schools user you will have access to many features like having your own web page , track your learning progress , receive personal guided paths , and more .   The Exercise  The exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. \nThere are between 3 and 9 questions in  each category.\nThe answer can be found in the corresponding tutorial chapter. If you're stuck, \nor answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer.   If you don't know Django, we suggest that you read our Django Tutorial from scratch.     ❮ Previous  Next ❯               ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django ", "url": "https://www.w3schools.com/django/django_compiler.php", "content": "Django Online Compiler   ❮ Previous  Next ❯    Django Compiler (Editor)  If you want to create your own website or build Python applications using Django, check out W3Schools Spaces .  W3Schools Spaces is a website-building tool that enables you to create and share your own website, as well as develop and host your Python applications using Django.  You have full control over the website's appearance and functionality by editing the code directly in your web browser.  W3Schools Spaces is user-friendly and requires no setup, making it easy to use.  Get started with Django by selecting the Python environment in Spaces.     The code editor is packed with features to help you achieve more:   Templates: Start from scratch or use a template  Cloud-based: no installations required. You only need your browser  Terminal & Log: debug and troubleshoot your code easily  File Navigator: switch between files inside the code editor  And much more!   Learn More   Learn Faster  Practice is key to mastering coding, and the best way to put your Django knowledge into practice is by getting practical with code.  Use W3Schools Spaces to build, test and deploy code.  The code editor lets you write and practice different types of computer languages. It includes \nDjango, but you can use it for other languages too.  New languages are added all the time:     Learn More   If you don't know Django, we suggest that you read our Django Tutorial from scratch.  If you don't know Python, we suggest that you read our Python Tutorial from scratch.    Easy Package Management  Get an overview of your packages and easily add or delete frameworks and libraries. Then, with just one click, you can make changes to your packages without manual installation.   Learn More    Build Powerful Websites  You can use the code editor in W3School Spaces to build frontend or full-stack websites from scratch.  Or you can use the 60+ templates available and save time:                    Create your Spaces account today and explore them all!  Learn More   Share Your Website With The World  Host and publish your websites in no time with W3School Spaces .  W3Schools subdomain and SSL certificate are included for free with W3School Spaces . An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online.  Want a custom domain for your website?  You can buy a domain or transfer an existing one and connect it to your space.  Learn More   How Does It Work?  Get started in a few clicks with W3School Spaces .        ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "QuerySet Field Lookups Reference", "url": "https://www.w3schools.com/django/django_ref_field_lookups.php", "content": "QuerySet Field Lookups Reference   ❮ Previous  Next ❯    Field Lookups Reference  A list of all field look up keywords:    Keyword  Description    contains  Contains the phrase    icontains  Same as contains, but case-insensitive    date  Matches a date    day  Matches a date (day of month, 1-31) (for dates)    endswith  Ends with    iendswith  Same as endswidth, but case-insensitive    exact  An exact match    iexact  Same as exact, but case-insensitive    in  Matches one of the values    isnull  Matches NULL values    gt  Greater than    gte  Greater than, or equal to    hour  Matches an hour (for datetimes)    lt  Less than    lte  Less than, or equal to    minute  Matches a minute (for datetimes)    month  Matches a month (for dates)    quarter  Matches a quarter of the year (1-4) (for dates)    range  Match between    regex  Matches a regular expression    iregex  Same as regex, but case-insensitive    second  Matches a second (for datetimes)    startswith  Starts with    istartswith  Same as startswith, but case-insensitive    time  Matches a time (for datetimes)    week  Matches a week number (1-53) (for dates)    week_day  Matches a day of week (1-7) 1 is Sunday    iso_week_day  Matches a ISO 8601 day of week (1-7) 1 is Monday    year  Matches a year (for dates)    iso_year  Matches an ISO 8601 year (for dates)      ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Filter Reference", "url": "https://www.w3schools.com/django/django_ref_filter.php", "content": "Filter Reference   ❮ Previous  Next ❯    Filter Reference  A list of all filter keywords:    Keyword  Description    add  Adds a specified value.    addslashes  Adds a slash before any quote characters, to escape strings.    capfirst  Returns the first letter in uppercase.    center  Centers the value in the middle of a specified width.    cut  Removes any specified character or phrases.    date  Returns dates in the specified format.    default  Returns a specified value if the value is False.    default_if_none  Returns a specified value if the value is None.    dictsort  Sorts a dictionary by the given value.    dictsortreversed  Sorts a dictionary reversed, by the given value.    divisibleby  Returns True if the value can be divided by the specified number, otherwise it returns False.    escape  Escapes HTML code from a string.    escapejs  Escapes JavaScript code from a string.    filesizeformat  Returns a number into a file size format.    first  Returns the first item of an object (for Strings, the first character is \nreturned).    floatformat  Rounds floating numbers to a specified number of decimals, default one decimal.    force_escape  Escapes HTML code from a string.    get_digit  Returns a specific digit of a number.    iriencode  Convert an IRI into a URL friendly string.    join  Returns the items of a list into a string.    json_script  Returns an object into a JSON object surrounded by <script></script> tags.    last  Returns the last item of an object (for Strings, the last character is \nreturned).    length  Returns the number of items in an object, or the number of characters in a \nstring.    length_is  Returns True if the length is the same as the specified number    linebreaks  Returns the text with <br> instead of line breaks, and <p> instead of more \nthan one line break.    linebreaksbr  Returns the text with <br> instead of line breaks.    linenumbers  Returns the text with line numbers for each line.    ljust  Left aligns the value according to a specified width    lower  Returns the text in lower case letters.    make_list  Converts a value into a list object.    phone2numeric  Converts phone numbers with letters into numeric phone numbers.    pluralize  Adds a 's' at the end of a value if the specified numeric value is \nnot 1.    pprint      random  Returns a random item of an object    rjust  Right aligns the value according to a specified width    safe  Marks that this text is safe and should not be HTML escaped.    safeseq  Marks each item of an object as safe and the item should not be HTML \nescaped.    slice  Returns a specified slice of a text or object.    slugify  Converts text into one long alphanumeric-lower-case word.    stringformat  Converts the value into a specified format.    striptags  Removes HTML tags from a text.    time  Returns a time in the specified format.    timesince  Returns the difference between two datetimes.    timeuntil  Returns the difference between two datetimes.    title  Upper cases the first character of each word in a text, all other characters \nare converted to lower case.    truncatechars  Shortens a string into the specified number of characters.    truncatechars_html  Shortens a string into the specified number of characters, not considering \nthe length of any HTML tags.    truncatewords  Shortens a string into the specified number of words.    truncatewords_html  Shortens a string into the specified number of words, not considering any \nHTML tags.    unordered_list  Returns the items of an object as an unordered HTML list.    upper  Returns the text in upper case letters.    urlencode  URL encodes a string.    urlize  Returns any URLs in a string as HTML links.    urlizetrunc  Returns any URLs in a string as HTML links, but shortens the links into the \nspecified number of characters.    wordcount  Returns the number of words in a text.    wordwrap  Wrap words at a specified number of characters.    yesno  Converts Booleans values into specified values.    i18n      l10n      tz        ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Template Tags Reference", "url": "https://www.w3schools.com/django/django_ref_template_tags.php", "content": "Django Template Tags Reference   ❮ Previous  Next ❯    Template Tags Reference  A list of all template tags:    Tag  Description    autoescape  Specifies if autoescape mode is on or off    block  Specifies a block section    comment  Specifies a comment section    csrf_token  Protects forms from Cross Site Request Forgeries    cycle  Specifies content to use in each cycle of a loop    debug  Specifies debugging information    extends  Specifies a parent template    filter  Filters content before returning it    firstof  Returns the first not empty variable    for  Specifies a for loop    if  Specifies a if statement    ifchanged  Used in for loops. Outputs a block only if a value has changed since the \nlast iteration    include  Specifies included content/template    load  Loads template tags from another library    lorem  Outputs random text    now  Outputs the current date/time    regroup  Sorts an object by a group    resetcycle  Used in cycles. Resets the cycle    spaceless  Removes whitespace between HTML tags    templatetag  Outputs a specified template tag    url  Returns the absolute URL part of a URL    verbatim  Specifies contents that should not be rendered by the template engine    widthratio  Calculates a width value based on the ratio between a given value and a max \nvalue    with  Specifies a variable to use in the block      ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django - Add Static File", "url": "https://www.w3schools.com/django/django_add_bootstrap5.php", "content": "Django - Add Static File   ❮ Previous  Next ❯    Add Bootstrap 5  There are two main methods to use bootstrap in your Django project. Either by \ndownloading the required files and include them in your project, or you can \ninstall the bootstrap 5 module in your virtual environment .  We will use the second method, installing Bootstrap 5 in the virtual \nenvironment.   Install Bootstrap 5  Bootstrap 5 should be installed in the virtual environment.  We will install it in an existing project, the My Tennis Club project , \ncreated earlier in this tutorial.  Open the command view, navigate to the virtual environment folder and \nactivate the virtual environment:   Scripts\\activate.bat   Once you are inside the virtual environment, install Bootstrap 5 with this command:   pip \n  install django-bootstrap-v5   Which will give you a result like this:   Collecting django-bootstrap-v5 Downloading django_bootstrap_v5-1.0.11-py3-none-any.whl (24 kB) Requirement already satisfied: django<5.0,>=2.2 in c:\\users\\ your name \\myworld\\lib\\site-packages (from django-bootstrap-v5) (4.1.4) Collecting beautifulsoup4<5.0.0,>=4.8.0 Downloading beautifulsoup4-4.11.1-py3-none-any.whl (128 kB) |████████████████████████████████| 128 kB 6.4 MB/s Requirement already satisfied: tzdata; sys_platform == \"win32\" in c:\\users\\ your name \\myworld\\lib\\site-packages (from django<5.0,>=2.2->django-bootstrap-v5) (2022.7) Requirement already satisfied: asgiref<4,>=3.5.2 in c:\\users\\ your name \\myworld\\lib\\site-packages (from django<5.0,>=2.2->django-bootstrap-v5) (3.5.2) Requirement already satisfied: sqlparse>=0.2.2 in c:\\users\\ your name \\myworld\\lib\\site-packages (from django<5.0,>=2.2->django-bootstrap-v5) (0.4.3) Collecting soupsieve>1.2 Downloading soupsieve-2.3.2.post1-py3-none-any.whl (37 kB) Installing collected packages: soupsieve, beautifulsoup4, django-bootstrap-v5 Successfully installed beautifulsoup4-4.11.1 django-bootstrap-v5-1.0.11 soupsieve-2.3.2.post1    Update Settings  Next step is to include the bootstrap module in the INSTALLED_APPS list in settings.py :   my_tennis_club/my_tennis_club/settings.py :  INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'members',\n    'bootstrap5',\n]   Bootstrap 5 is now ready to use in your project!   Remove Old Styling  ThThe My Tennis Club project already has a stylesheet, remove it and the Members page \nwithout styling will look like this:    Add Bootstrap 5 to Template  To use Bootstrap 5 in the project, start by inserting some lines of code in the master.html template:   my_tennis_club/members/templates/master.html :  <!DOCTYPE html>\n<html>\n<head>\n  <title>{% block title %}{% endblock %}</title>\n  {% load bootstrap5 %}\n  {% bootstrap_css %}\n  {% bootstrap_javascript %}\n</head>\n<body>\n\n<div class=\"container\">\n  <ul class=\"nav bg-info\">\n    <li class=\"nav-item\">\n      <a class=\"nav-link link-light\" href=\"/\">HOME</a>\n    </li>\n    <li class=\"nav-item\">\n      <a class=\"nav-link link-light\" href=\"/members\">MEMBERS</a>\n    </li>\n  </ul>\n\n  {% block content %}\n  {% endblock %}\n</div>\n</body>\n</html>   As you can see, we inserted these three lines in the <head> section:   {% load bootstrap5 %}\n  {% bootstrap_css %}\n  {% bootstrap_javascript %}   The first line tells Django that it should load the Bootstrap 5 module in this template.  The second line inserts the <link> element with the referral to the bootstrap stylesheet.  The third line inserts the <script> element with the referral to the necessary javascript file.  We also did some changes to the HTML elements in the template, like inserting \nbootstrap classes to the navigation bar:   <div class=\"container\">\n  <ul class=\"nav bg-info\">\n    <li class=\"nav-item\">\n      <a class=\"nav-link link-light\" href=\"/\">HOME</a>\n    </li>\n    <li class=\"nav-item\">\n      <a class=\"nav-link link-light\" href=\"/members\">MEMBERS</a>\n    </li>\n  </ul>\n  {% block content %}\n  {% endblock %}\n</div>   If you run the project now, the members page will look like this:   That's it! Bootstrap 5 is now a part of your project!  Learn more about Bootstrap 5 in our Bootstrap 5 Tutorial .    ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Slug Field", "url": "https://www.w3schools.com/django/django_slug_field.php", "content": "Django Slug Field   ❮ Previous  Next ❯    What is Slug?  Have you ever seen url's that look like this:   w3schools.com/django/learn-about-slug-field   The \" learn-about-slug-field \" part is a slug.  It is a description containing only letters, hyphens, numbers or underscores.  It is often used in url's to make them easier to read, but also to make them more search engine friendly.   Url Without Slug  If you have followed our Django Project created in this tutorial, you will have a small Django project looking like this:   And if you click the first member, you will jump to this page:   Check out the address bar:   127.0.0.1:8000/members/details/1   The number \"1\" refers to the ID of that particular record in the database.  Makes sense to the developer, but probably not to anyone else.   Url With Slug  It would have made more sense if the url looked like this:   Check out the address bar:   127.0.0.1:8000/members/details/emil-refsnes   That is a more user friendly url, and Django can help you create such url's in your project.   Modify the models.py File  Start by adding a new field in the database.  Open the models.py file and add a field called slug with the data type SlugField :   my_tennis_club/members/models.py :  from django.db import models\n\nclass Member(models.Model):\n  firstname = models.CharField(max_length=255)\n  lastname = models.CharField(max_length=255)\n  phone = models.IntegerField(null=True)\n  joined_date = models.DateField(null=True)\n  slug = models.SlugField(default=\"\", null=False)\n\n  def __str__(self):\n    return f\"{self.firstname} {self.lastname}\"   This is a change in the Model's structure, and therefor we have to make a migration\nto tell Django that it has to update the database:   py manage.py makemigrations   And the migrate command:   py manage.py migrate    Change Admin  Now we have a new field in the database, but we also want this field to be updated automatically\nwhen we set the firstname or lastname of a member.  This can be done with a built-in Django feature called prepopulated_fields where you specify the field you want to pre-populate, and a tuple with the \nfield(s) you want to populate it with.  This is done in the admin.py file:   my_tennis_club/members/admin.py :  from django.contrib import admin\nfrom .models import Member\n\n# Register your models here.\n\nclass MemberAdmin(admin.ModelAdmin):\n  list_display = (\"firstname\", \"lastname\", \"joined_date\",)\n  prepopulated_fields = {\"slug\": (\"firstname\", \"lastname\")}\n  \nadmin.site.register(Member, MemberAdmin)   Enter the Admin interface and open a record for editing:   Click \"SAVE\" and the \"slug\" field will be auto populated with the firstname and the lastname,\nand since the \"slug\" field is of type SlugField, it will \"slugify\" the value, meaning it will\nput a hyphen between each word.  Next time you open the member for editing you will see the slug field with value:    Note: Since the new field is empty by default,\nyou have to do this save operation for each member.    Modify Template  Now we can replace the ID field with the slug field throughout the project.  Start with the all_members.html template,\nwhere we have a link to the details page:   my_tennis_club/members/templates/all_members.html :  {% extends \"master.html\" %}\n\n{% block title %}\n  My Tennis Club - List of all members\n{% endblock %}\n\n\n{% block content %}\n  <div class=\"mycard\">\n    <h1>Members</h1>\n    <ul>\n      {% for x in mymembers %}\n        <li onclick=\"window.location = 'details/{{ x.slug }}'\">{{ x.firstname }} {{ x.lastname }}</li>\n      {% endfor %}\n    </ul>\n  </div>\n{% endblock %}    Modify URL  We also have to make some changes in the urls.py file.  Change from <int:id> to <slug:slug> :   my_tennis_club/members/urls.py :  from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.main, name='main'),\n    path('members/', views.members, name='members'),\n    path('members/details/<slug:slug>', views.details, name='details'),\n    path('testing/', views.testing, name='testing'),\n]    Modify View  Finally, change the details view to handle \nincoming request\nas slug instead of ID:   my_tennis_club/members/views.py :  from django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\n\ndef members(request):\n  mymembers = Member.objects.all().values()\n  template = loader.get_template('all_members.html')\n  context = {\n    'mymembers': mymembers,\n  }\n  return HttpResponse(template.render(context, request))\n  \ndef details(request, slug):\n  mymember = Member.objects.get(slug=slug)\n  template = loader.get_template('details.html')\n  context = {\n    'mymember': mymember,\n  }\n  return HttpResponse(template.render(context, request))\n  \ndef main(request):\n  template = loader.get_template('main.html')\n  return HttpResponse(template.render())\n\ndef testing(request):\n  template = loader.get_template('template.html')\n  context = {\n    'fruits': ['Apple', 'Banana', 'Cherry'],   \n  }\n  return HttpResponse(template.render(context, request))   Now the link to details works with the new slugified url:   If you have followed all the steps on your own computer, you can see the result in your own browser: 127.0.0.1:8000/members/ .  If the server is down, you have to start it again with the runserver command:   py manage.py runserver     ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Deploy Django Project - Create zip File", "url": "https://www.w3schools.com/django/django_deploy_zip.php", "content": "Deploy Django Project - Create zip File   ❮ Previous  Next ❯    Zip Your Project  To wrap your project into a .zip file,\nyou cannot zip the entire project folder, but choose the files and folders manually.  The files to include in the .zip file are highlighted (blue) in the example below:   my_tennis_club  .ebextensions/  members/  my_tennis_club/ mystaticfiles/  productionfiles/ db.sqlite3 manage.py  requirements.txt    With your file explorer,\nnavigate to the project folder,\nselect these files and folders, right-click and\nchoose to create a zip file.   Zip File  Now you have a .zip file of your project which you can upload to Elastic beanstalk:   my_tennis_club .ebextensions/ members/ my_tennis_club/ mystaticfiles/ productionfiles/ db.sqlite3 manage.py  my_tennis_clup.zip requirements.txt       ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Deploy Django - Elastic Beanstalk", "url": "https://www.w3schools.com/django/django_deploy_eb.php", "content": "Deploy Django - Elastic Beanstalk   ❮ Previous  Next ❯    Elastic Beanstalk  In AWS, navigate to the Elastic Beanstalk application, as we did in the Choose Provider chapter, and click the\n\"Create application\" button:    Create EB Application  Once you have clicked the \"Create Application\" button,\nyou will be taken to this page, where you can give your Django project a name.\nI will name it \"my-first-django\":    Choose Platform  Then scroll down until you see the \"Platform\" section, and choose \"Python\", with the recommended version:    Upload .zip File  Next, scroll down to the next section,\nthe \"Application code\" section, and choose \"Upload your code\".  Click on the \"Choose file\" button, navigate to the .zip file you\ncreated in the previous chapter and upload it:   The .zip file is uploaded, and we are ready to deploy!   Deploy  Click the \"Create application\" button to start deploying.    Waiting  The deployment will take a few minutes.    Success!  Finally the project is live, and you can view it by clicking the link below the Myfirstdjango-env header, or type the host address in your browser:     ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Deploy Django - Update Project", "url": "https://www.w3schools.com/django/django_deploy_update.php", "content": "Deploy Django - Update Project   ❮ Previous  Next ❯    Deploy Changes  Any changes you do with the application locally, on your own computer,\nis not visible on the deployed version.  So if you make a change, and you want it to be visible on the deployed version,\nyou have to upload a new .zip file.   Create .zip file  To wrap your project into a .zip file,\nfollow the steps described in the Create .zip File chapter:  Start by selecting the relevant files and folders of your project,\nif you have the same project as we have in our tutorial, you should select the\nhighlighted files in the example below:   my_tennis_club  .ebextensions/  members/  my_tennis_club/ mystaticfiles/  productionfiles/ db.sqlite3 manage.py  requirements.txt    Right-click and\nchoose to create a .zip file.  Now you have a .zip file, containing the changes, and you can upload it to Elastic beanstalk:   my_tennis_club .ebextensions/ members/ my_tennis_club/ mystaticfiles/ productionfiles/ db.sqlite3 manage.py  my_tennis_clup.zip requirements.txt     Upload to Elastic Beanstalk  Log into your Amazon Web Services account,\nand find your project under the \"Elastic Beanstalk\" application:   Click the \"Upload and deploy\" button.   Choose .zip File  Click the \"Choose file\" button to upload the .zip file you just created:    Deploy  Click the \"Deploy\" button:    Uploaded!  That's it, your project is updated with all the new changes.    Note: Follow these steps every time you want to update your project.     ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Deploy Django - Create Requirements", "url": "https://www.w3schools.com/django/django_deploy_requirements.php", "content": "Deploy Django - Create Requirements   ❮ Previous  Next ❯    Lock in Dependencies  When you create a Django application, there are some Python packages that your project \ndepends on.  Django itself is a Python package, and we have to make sure that the server where we deploy our project\nalso has the Django package installed, and all the other packages your project requires.  Luckily there is a command for this as well, just run this command in the command view:   py -m pip freeze > requirements.txt   The result of the above command, is a file called requirements.txt being created in the project:   my_tennis_club members/ my_tennis_club/ mystaticfiles/ productionfiles/ db.sqlite3 manage.py  requirements.txt    The file contains all the packages that this project depends on:\nwith this content:   my_tennis_club/requirements.txt :  asgiref==3.5.2\nDjango==4.1.4\npsycopg2-binary==2.9.5\nsqlparse==0.4.3\ntzdata==2022.7\nwhitenoise==6.2.0    Note: You can create this file on your own, and insert the packages manually,\njust make sure you get all the packages your project depends on, and you must name the file requirements.txt .   Now the hosting provider knows which packages to install when we deploy our project.  But Elastic Beanstalk needs more information,\ngo to the next chapter to create an \"EB\" config file.    ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Deploy Django - django.config", "url": "https://www.w3schools.com/django/django_deploy_config.php", "content": "Deploy Django - django.config   ❮ Previous  Next ❯    Provider-Specific Settings  We have chosen AWS as our hosting provider, and Elastic Beanstalk as a service\nto deploy the Django project, and it has some specific requirements.   .ebextension Folder  It requires that you create a folder on the root level of your project called .ebextensions :   my_tennis_club .ebextensions/ members/ my_tennis_club/ mystaticfiles/ productionfiles/ db.sqlite3 manage.py requirements.txt     Create django.config File  In the .ebextensions folder, create a file called django.config :   my_tennis_club .ebextensions/ django.config    Open the file and insert these settings:   my_tennis_club/.ebextensions/django.config :  option_settings:\n  aws:elasticbeanstalk:container:python:\n    WSGIPath: my_tennis_club.wsgi:application     Note: These steps are specific for AWS and Elastic beanstalk, but every provider has some provider-specific settings.   The next step is to wrap all the dependencies into one .zip file, which you will learn in the next chapter .    ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Deploy Django - Choose Provider", "url": "https://www.w3schools.com/django/django_deploy_provider.php", "content": "Deploy Django - Choose Provider   ❮ Previous  Next ❯    Deploy to the World  To deploy a project means to make it visible for other people on the internet.  So far, in this tutorial, we have made a Django project that runs locally on your computer.\nThis is often called, \"in development\", and when we have deployed it, we call it \"in production\".   Where to Deploy?  There are many providers out there that offers servers for Django projects.\nIn this tutorial we will use the Amazon Web Services (AWS) platform, mainly because they offer a free\nsolution that only requires you to create an AWS account.   Note: you can choose whatever server provider you like,\nthey will all give you the same result, but they will have some provider-specific\nsettings that you should be aware of when following this tutorial.    AWS  Log into your AWS account. (If you do not have an AWS account, follow the steps in the Create AWS Account chapter.)    AWS Console  Once you have signed in, you should be directed to the AWS Console Home page:     Elastic Beanstalk  We will be using a service called \"Elastic Beanstalk\" to deploy the Django project.  In the search field at the top, search for \"elastic beanstalk\", and click to start the service:  Run Demo         Lock in Dependencies  Once you have started the \"Elastic Beanstalk\" service, we could start with the deployment,\nbut first we need to lock in some dependencies, which means to make you local Django project ready for deployment.  You will learn how to in the next chapters.    ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "PostgreSQL - Add Members", "url": "https://www.w3schools.com/django/django_db_add_members.php", "content": "PostgreSQL - Add Members   ❮ Previous  Next ❯    Members  The \"My Tennis Club\" project has no members: 127.0.0.1:8000/ .  That is because we have created a brand new database, and it is empty.  The old SQLite database contained 5 members,\nso let us dive into the admin interface and add the same 5 members.  But first we have to create a new superuser.   Create superuser  Since we now have a new database, we have to create the superuser once again:  This is done by typing this command in the command view:   py manage.py createsuperuser   Which will give this prompt:   Username:   Here you must enter: username, e-mail address, (you can just pick a fake \ne-mail address), and password:   Username: johndoe Email address: johndoe@dummymail.com Password: Password (again): This password is too short. It must contain at least 8 characters. This password is too common. This password is entirely numeric. Bypass password validation and create user anyway? [y/N]:   My password did not meet the criteria, but this is a test environment, and I choose to create user anyway, by enter y:   Bypass password validation and create user anyway? [y/N]: y   If you press [Enter], you should have successfully created a user:   Superuser created successfully.   Now start the server again:   py manage.py runserver   In the browser window, type 127.0.0.1:8000/admin in the address bar.  And fill in the form with the correct username and password:   Which should result in this interface:    Add Members  When you are in the admin interface, click the \"Add\" button for \"Members\", and start inserting new members\nuntil you have a list like this:    My Tennis Club  In the browser window,\ntype 127.0.0.1:8000/members in the address bar.  And once again you have a Tennis Club page with 5 members!    Next: let's deploy this project , so that the whole world can see it!    ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Connect to Database", "url": "https://www.w3schools.com/django/django_db_connect.php", "content": "Connect to Database   ❮ Previous  Next ❯    Modify Settings  To make Django able to connect to your database, you have to specify it in the DATABASES tuple in the settings.py file.  Before, it looked like this:   SQLite  my_tennis_club/my_tennis_club/settings.py :  .\n.\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n.   Now, you should change it to look like this:   PostgreSQL  my_tennis_club/my_tennis_club/settings.py :  .\n.\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'postgres',\n        'USER': 'masteruser',\n        'PASSWORD': '12345678',\n        'HOST': 'w3-django-project.cdxmgq9zqqlr.us-east-1.rds.amazonaws.com',\n        'PORT': '5432'\n    }\n}\n.    Note: The values will be different for your project.    Engine?  As you can see in the settings.py file,\nwe insert postgresql instead of sqlite .   Name?  The database does not have a name, but you have to assign one in order to \naccess the database.  If no name is given, the provider accepts 'postgres' as the name of the database.   Username and Password?  Insert the username and password that you specified when you created the database.   Host? Port?  As you can see in the settings.py file,\nwe insert postgresql instead of sqlite ,\nand insert the username and password that we specified when we created the database.  The HOST and PORT can be found under the \"Connectivity & security\" section in the RDS instance.\nThey are described as \"Endpoint\" and \"Port\":   Which for my project is this:  'HOST': 'w3-django-project.cdxmgq9zqqlr.us-east-1.rds.amazonaws.com'   'PORT': '5432'    Migrate  Once we have done the changes in settings.py ,\nwe must run a migration in our virtual environment, before the changes will take place:   py manage.py migrate   Which will give you this result:   Operations to perform: Apply all migrations: admin, auth, contenttypes, members, sessions Running migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying admin.0003_logentry_add_action_flag_choices... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying auth.0008_alter_user_username_max_length... OK Applying auth.0009_alter_user_last_name_max_length... OK Applying auth.0010_alter_group_name_max_length... OK Applying auth.0011_update_proxy_permissions... OK Applying auth.0012_alter_user_first_name_max_length... OK Applying members.0001_initial... OK Applying members.0002_members_delete_member... OK Applying members.0003_rename_members_member... OK Applying sessions.0001_initial... OK    Now, if you run the project:   py manage.py runserver   And view it in your browser:  127.0.0.1:8000/ .  You will get the home page of the project, but if you click on the \"members\" link, you will see that\nthere are no members.  That is because the database is empty.\nIn the next chapter we will fill the database with members.    ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Create AWS Account", "url": "https://www.w3schools.com/django/django_db_create_aws_account.php", "content": "Create AWS Account   ❮ Previous  Next ❯    Why AWS?  There are many providers out there that can host Django projects and PostgreSQL databases.  In this tutorial we will use the Amazon Web Services (AWS) platform, mainly because they offer a free\nsolution that can host both Django projects and PostgreSQL databases. All you \nneed is an AWS account.   Note: you can choose whatever server provider you like,\nthey will most likely all give you a satisfying result, but they will have some provider-specific\nsettings that you should be aware of when following this tutorial.    AWS  Go to aws.amazon.com , and create an account:    Sign In  Once you have created an AWS account, it is time to sign in for the first time:    AWS Console  If this is your first time you sign into your AWS account,\nyou will be directed to the AWS Console Home page:     Add the RDS Service  Once you have an AWS account, you can start creating a database.  We will use a database service at AWS, called RDS.  In the search field, search for \"RDS\", and click to start the service:    Once the service has started, you should see something like this:      In the next chapter we will create the PostgreSQL database.    ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Create PostgreSQL Database", "url": "https://www.w3schools.com/django/django_db_create_rds.php", "content": "Create PostgreSQL Database   ❮ Previous  Next ❯    Create Database  Inside the RDS service, create a database, either by \nnavigating to the Database section,\nor just click the \"Create database\" button:    Settings  Once you have started creating a database, you will be given some choices for the type and settings of your database.  To add a PostgreSQL database to your Django project, choose the following options:  Standard creation method:   PostgreSQL engine method:   Free Tier Template:   Name of database, username, and password  You can choose any name, username, and password:   Keep the default instance configuration:   Check off the storage autoscaling:  It can be a good thing to enable storage autoscaling, but for this tutorial it is not \nnecessary.   Grant public access, and create a new security group:  Give the security group a name, we will call it \"w3-django\":   Keep default db authentications:   Keep default monitoring:   Click Create database:   This will take a few minutes, but when it is finished, you will have a new PostgreSQL database, \nalmost ready to run on your Django project!  In the next chapter you will learn how to connect your project to the database.    ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Introduction to PostgreSQL", "url": "https://www.w3schools.com/django/django_db_postgresql_intro.php", "content": "Introduction to PostgreSQL   ❮ Previous  Next ❯    Database Engines  Django comes with a SQLite database which is great for testing and debugging at the beginning of a project.  However, it is not very suitable for production.  Django also support these database engines:   PostgreSQL  MariaDB  MySQL  Oracle   We will take a closer look at the PostgreSQL database engine.   PostgreSQL  PostgreSQL database is an open source relational database, which should cover \nmost demands you have when creating a database for a Django project.  It has a good reputation, it is reliable, and it perform well under most \ncircumstances.  We will add a PostgreSQL database to our Django project.  To be able to use PostgreSQL in Django we have to install a package called psycopg2 .   Install psycopg2  Type this command in the command line to install the package. Make sure you are still inn the virtual\nenvironment:   pip install psycopg2-binary   The result should be something like this:   Collecting psycopg2-binary Downloading psycopg2_binary-2.9.5-cp39-cp39-win_amd64.whl (1.2 MB) |████████████████████████████████| 1.2 MB 3.3 MB/s Installing collected packages: psycopg2-binary Successfully installed psycopg2-binary-2.9.5  WARNING: You are using pip version 20.2.3; however, version 22.3.1 is available.\nYou should consider upgrading via the 'c:\\users\\ Your Name \\myworld\\scripts\\python.exe -m pip install --upgrade pip' command.   The psycopg2 package is a driver that is \nnecessary for PostgreSQL to work in Python.  We also need a server where we can host the database.  In this tutorial we have chosen the Amazon Web Services (AWS) platform,\nyou will learn more about that in the next chapter .    ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Add CSS File to the Project", "url": "https://www.w3schools.com/django/django_add_css_file_project.php", "content": "Add CSS File to the Project   ❮ Previous  Next ❯    The Project - My Tennis Club  If you have followed the steps in the entire Django tutorial, you will have a my_tennis_club project on your computer, with 5 members:   Run Example  We want to add a stylesheet to this project, and put it in the mystaticfiles folder:   my_tennis_club manage.py my_tennis_club/ members/ mystaticfiles/ mystyles.css    The name of the CSS file is your choice, we call it mystyles.css in this project.  Open the CSS file and insert the following:   my_tennis_club/mystaticfiles/mystyles.css :  body {\n  background-color: violet;\n}    Modify the Master Template  Now you have a css file, the next step will be to include this file in the master template:  Open the master template file and add the following:   my_tennis_club/members/templates/master.html :  {% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n  <title>{% block title %}{% endblock %}</title>\n  <link rel=\"stylesheet\" href=\"{% static 'mystyles.css' %}\">  \n</head>\n<body>\n\n{% block content %}\n{% endblock %}\n\n</body>\n</html>    Check Settings  Make sure your settings.py file contains a STATICFILES_DIRS list with a reference to the mystaticfiles folder on the root directory, and \nthat you have specified a STATICFILES_ROOT folder:   my_tennis_club/my_tennis_club/settings.py :  .\n.\nSTATIC_ROOT = BASE_DIR / 'productionfiles'\n\nSTATIC_URL = 'static/'\n\n#Add this in your settings.py file:\nSTATICFILES_DIRS = [\n    BASE_DIR / 'mystaticfiles'\n]\n.\n.    Collect Static Files  Every time you make a change in a static file, you must run the collectstatic command to make the changes take effect:   py manage.py collectstatic   If you have executed the command earlier in the project, Django will prompt you with a question:   You have requested to collect static files at the destination location as specified in your settings:  C:\\Users\\ Your Name \\myworld\\my_tennis_club\\productionfiles  This will overwrite existing files! Are you sure you want to do this?  Type 'yes' to continue, or 'no' to cancel:   Type 'yes'. This will update any changes done in the static files, and give you this result:   1 static file copied to 'C:\\Users\\ Your Name \\minverden\\my_tennis_club\\productionfiles', 132 unmodified.   Now, if you run the project:   py manage.py runserver   It will look like this:   Run Example  If you have followed all the steps on you own computer, you can see the result in your own browser:  In the browser window, type 127.0.0.1:8000/members/ in the address bar.   Spice up the Style!  In the example above we showed you how to include a stylesheet to your project.  We ended up with a purple web page, but CSS can do more than just change the background color.  We want to do more with the styles, and end up with a result like this:   Run Example  First, replace the content of the mystyles.css file with this:   my_tennis_club/mystaticfiles/mystyles.css :  @import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;600&display=swap');\nbody {\n  margin:0;\n  font: 600 18px 'Source Sans Pro', sans-serif;\n  letter-spacing: 0.64px;\n  color: #585d74;\n}\n.topnav {\n  background-color:#375BDC;\n  color:#ffffff;\n  padding:10px;\n}\n.topnav a:link, .topnav a:visited {\n  text-decoration: none;\n  color: #ffffff; \n}\n.topnav a:hover, .topnav a:active {\n  text-decoration: underline;\n}\n.mycard {\n  background-color: #f1f1f1;\n  background-image: linear-gradient(to bottom, #375BDC, #4D70EF); \n  background-size: 100% 120px;\n  background-repeat: no-repeat;\n  margin: 40px auto;\n  width: 350px;\n  border-radius: 5px;\n  box-shadow: 0 5px 7px -1px rgba(51, 51, 51, 0.23); \n  padding: 20px;\n}\n.mycard h1 {\n  text-align: center;\n  color:#ffffff;\n  margin:20px 0 60px 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\nli {\n  background-color: #ffffff;\n  background-image: linear-gradient(to right, #375BDC, #4D70EF); \n  background-size: 50px 60px;\n  background-repeat: no-repeat;\n  cursor: pointer;\n  transition: transform .25s;\n  border-radius: 5px;\n  box-shadow: 0 5px 7px -1px rgba(51, 51, 51, 0.23);\n  padding: 15px;\n  padding-left: 70px;\n  margin-top: 5px;\n}\nli:hover {\n  transform: scale(1.1);\n}\na:link, a:visited {\n  color: #375BDC; \n}\n.main, .main h1 {\n  text-align:center;\n  color:#375BDC;\n}    Modify Templates  You also have to make some changes to the templates:  Master  We want all pages to have the same top navigation, therefor we insert the top \nnavigation into master.html :   my_tennis_club/members/templates/master.html :  {% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"{% static 'mystyles.css' %}\">\n  <title>{% block title %}{% endblock %}</title>\n</head>\n<body>\n\n<div class=\"topnav\">\n  <a href=\"/\">HOME</a> |\n  <a href=\"/members\">MEMBERS</a>\n</div>\n\n{% block content %}\n{% endblock %}\n\n</body>\n</html>   Members  In all_members.html we want to make som changes in the HTML code.  The members are put in a div element, and the links become list items with onclick attributes.  We also want to remove the navigation, because that is now a part of the master template.   my_tennis_club/members/templates/all_members.html :  {% extends \"master.html\" %}\n\n{% block title %}\n  My Tennis Club - List of all members\n{% endblock %}\n\n\n{% block content %}\n  <div class=\"mycard\">\n    <h1>Members</h1>\n    <ul>\n      {% for x in mymembers %}\n        <li onclick=\"window.location = 'details/{{ x.id }}'\">{{ x.firstname }} {{ x.lastname }}</li>\n      {% endfor %}\n    </ul>\n  </div>\n{% endblock %}   Details  In details.html we will put the member details in \na div element, and remove the link back to members,\nbecause that is now a part of the navigation in the master template.   my_tennis_club/members/templates/details.html :  {% extends \"master.html\" %}\n\n{% block title %}\n  Details about {{ mymember.firstname }} {{ mymember.lastname }}\n{% endblock %}\n\n{% block content %}\n  <div class=\"mycard\">\n    <h1>{{ mymember.firstname }} {{ mymember.lastname }}</h1>\n    <p>Phone {{ mymember.phone }}</p>\n    <p>Member since: {{ mymember.joined_date }}</p>\n  </div>\n{% endblock %}   Main  In the main.html template, we will\nput some of the HTML code into a div element:   my_tennis_club/members/templates/main.html :  {% extends \"master.html\" %}\n\n{% block title %}\n  My Tennis Club\n{% endblock %}\n\n{% block content %}\n  <div class=\"main\">\n    <h1>My Tennis Club</h1>\n\n    <h3>Members</h3>\n  \n    <p>Check out all our <a href=\"members/\">members</a></p>\n  </div>\n{% endblock %}    Collect Static Files  Since we did some changes in the static mystyles.css file,\nwe have to run the collectstatic command to make the changes take effect:   py manage.py collectstatic   Now, if you run the project:   py manage.py runserver   You can see what the result should look like:  Run Example  Or, if you have followed all the steps on you own computer, you can see the result in your own browser:  In the browser window, type 127.0.0.1:8000/members/ in the address bar.      ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django - Global Static Files", "url": "https://www.w3schools.com/django/django_add_global_static_files.php", "content": "Django - Global Static Files   ❮ Previous  Next ❯    Add a Global CSS File  We have learned how to add a static file in the application's static folder, and how to use it in the application.  But what if other applications in your project wants to use the file?  Then we have to create a folder on the root directory and put the file(s) there.  It is not enough to create a static folder in the root directory,\nand Django will fix the rest.\nWe have to tell Django where to look for these static files.  Start by creating a folder on the project's root level,\nthis folder can be called whatever you like, I will call it mystaticfiles in this tutorial:   my_tennis_club db.sqlite3 manage.py my_tennis_club/ members/ mystaticfiles/    Add a CSS file in the mystaticfiles folder, \nthe name is your choice, we will call it myglobal.css in this example:   my_tennis_club db.sqlite3 manage.py my_tennis_club/ members/ mystaticfiles/ myglobal.css    Open the CSS file and insert the following:   my_tennis_club/mystaticfiles/myglobal.css :  body {\n  color: violet;\n}    Modify Settings  You will have to tell Django to also look for static files in the mystaticfiles folder in the root directory,\nthis is done in the settings.py file:   Add a STATICFILES_DIRS list:  my_tennis_club/my_tennis_club/settings.py :  .\n.\n\nSTATIC_ROOT = BASE_DIR / 'productionfiles'\n\nSTATIC_URL = 'static/'\n\n#Add this in your settings.py file:\nSTATICFILES_DIRS = [\n    BASE_DIR / 'mystaticfiles'\n]\n.\n.   In the STATICFILES_DIRS list, you can list all the directories where Django should look for static files.  The BASE_DIR keyword represents the root directory of the project,\nand together with the / \"mystaticfiles\" , it \nmeans the mystaticfiles folder in the root \ndirectory.   Search Order  If you have files with the same name, Django will use the first occurrence of \nthe file.  The search starts in the directories listed in STATICFILES_DIRS , using the order you have provided. Then , if the file is not found, the search continues in the static folder of each application.    Modify the Template  Now you have a global CSS file for the entire project, which can be \naccessed from all your applications.  To use it in a template, use the same syntax as you did for the myfirst.css file:  Begin the template with the following:  {% load static %}  And refer to the file like this:  <link rel=\"stylesheet\" href=\"{% static 'myglobal.css' %}\">   Example  my_tennis_club/members/templates/template.html :  {% load static %}\n<!DOCTYPE html>\n<html>\n<link rel=\"stylesheet\" href=\"{% static 'myglobal.css' %}\">\n<body>\n\n{% for x in fruits %}\n  <h1>{{ x }}</h1>\n{% endfor %}\n\n</body>\n</html>  Run Example »     Didn't Work?   That is correct. You need to collect the static files once again.   Collect Static Files  Run the collectstatic command to collect the new static file:   py manage.py collectstatic   Which will produce this result:   You have requested to collect static files at the destination location as specified in your settings:  C:\\Users\\ Your Name \\myworld\\my_tennis_club\\productionfiles  This will overwrite existing files! Are you sure you want to do this?  Type 'yes' to continue, or 'no' to cancel:   Type yes:   Type 'yes' to continue, or 'no' to cancel: yes   Which will produce this result:   1 static file copied to 'C:\\Users\\ Your Name \\myworld\\my_tennis_club\\productionfiles', 131 unmodified.    The Example Should Work  Start the server, and the example will work:   py manage.py runserver   Check out the result in your own browser: 127.0.0.1:8000/testing/ .   Example  my_tennis_club/members/templates/template.html :  {% load static %}\n<!DOCTYPE html>\n<html>\n<link rel=\"stylesheet\" href=\"{% static 'myglobal.css' %}\">\n<body>\n\n{% for x in fruits %}\n  <h1>{{ x }}</h1>\n{% endfor %}\n\n</body>\n</html>  Run Example »       ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django - Collect Static Files", "url": "https://www.w3schools.com/django/django_collect_static_files.php", "content": "Django - Collect Static Files   ❮ Previous  Next ❯    Handle Static Files  Static files in your project, like stylesheets, JavaScripts, and images,\nare not handled automatically by Django when DEBUG = False .  When DEBUG = True , this worked fine, all we had to do was to put them in the static folder of the application.  When DEBUG = False , static files have to be collected\nand put in a specified folder before we can use it.   Collect Static Files  To collect all necessary static files for your project, start by specifying a STATIC_ROOT property in the settings.py file.  This specifies a folder where you want to collect your static files.  You can call the folder whatever you like, we will call it productionfiles :   my_tennis_club/my_tennis_club/settings.py :  .\n.\n\nSTATIC_ROOT = BASE_DIR / 'productionfiles'\n\nSTATIC_URL = 'static/'\n\n.\n.   You could manually create this folder and collect and put all static files of your project\ninto this folder, but Django has a command that do this for you:   py manage.py collectstatic   Which will produce this result:   131 static files copied to 'C:\\Users\\ your_name \\myworld\\my_tennis_club\\productionfiles'.   131 files? Why so many? Well this is because of the admin user interface, \nthat comes built-in with Django.\nWe want to keep this feature in production, and it comes with a whole bunch of files including stylesheets, fonts, images, and \nJavaScripts.   my_tennis_club members/ my_tennis_club/ productionfiles/ admin/ myfirst.css     The Example Should Work  Now you have collected the static files of your project, and if you have installed WhiteNoise , the example from the Add Static Files chapter will \nfinally work.  Start the server and see the result:   py manage.py runserver   And check out the result in your own browser: 127.0.0.1:8000/testing/ .   Example  my_tennis_club/members/templates/template.html :  {% load static %}\n<!DOCTYPE html>\n<html>\n<link rel=\"stylesheet\" href=\"{% static 'myfirst.css' %}\">\n<body>\n\n{% for x in fruits %}\n  <h1>{{ x }}</h1>\n{% endfor %}\n\n</body>\n</html>  Run Example »       ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django - Installing WhiteNoise", "url": "https://www.w3schools.com/django/django_static_whitenoise.php", "content": "Django - Installing WhiteNoise   ❮ Previous  Next ❯    WhiteNoise  Django does not have a built-in solution for serving static files, at least not in production when DEBUG has to be False .  We have to use a third-party solution to accomplish this.  In this Tutorial we will use WhiteNoise, which is a Python library, built for \nserving static files.   Install WhiteNoise  To install WhiteNoise in your virtual environment, type the command below:   pip install whitenoise   The result should be something like this:   Collecting whitenoise Downloading whitenoise-6.2.0-py3-none-any.whl (19 kB) Installing collected packages: whitenoise Successfully installed whitenoise-6.2.0  WARNING: You are using pip version 20.2.3; however, version 22.3.1 is available. You should consider upgrading via the 'c:\\users\\ Your Name \\myworld\\scripts\\python.exe -m pip install --upgrade pip' command.    Modify Settings  To make Django aware of you wanting to run WhitNoise, you have to specify it in the MIDDLEWARE list in settings.py file:   my_tennis_club/my_tennis_club/settings.py :  .\n.\nMIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware',\n].\n.    Collect Static Files  There are one more action you have to perform before you can serve the static file from the example\nin the previous chapter . You have to collect all static files\nand put them into one specified folder. You will learn how in the next chapter .    ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django - Add Static File", "url": "https://www.w3schools.com/django/django_add_static_files.php", "content": "Django - Add Static File   ❮ Previous  Next ❯    Create Static Folder  When building web applications, you probably want to add some static files like images or css files.  Start by creating a folder named static in your project, the same place where you created the templates folder:  The name of the folder has to be static .   my_tennis_club manage.py my_tennis_club/ members/ templates/ static/    Add a CSS file in the static folder, \nthe name is your choice, we will call it myfirst.css in this example:   my_tennis_club manage.py my_tennis_club/ members/ templates/ static/ myfirst.css    Open the CSS file and insert the following:   my_tennis_club/members/static/myfirst.css :  body {\n  background-color: lightblue;\n  font-family: verdana;\n}    Modify the Template  Now you have a CSS file, with some CSS styling. The next step will be to include this file in \na HTML template:  Open the HTML file and add the following:  {% load static %}  And:  <link rel=\"stylesheet\" href=\"{% static 'myfirst.css' %}\">   Example  my_tennis_club/members/templates/template.html :  {% load static %}\n<!DOCTYPE html>\n<html>\n<link rel=\"stylesheet\" href=\"{% static 'myfirst.css' %}\">\n<body>\n\n{% for x in fruits %}\n  <h1>{{ x }}</h1>\n{% endfor %}\n\n</body>\n</html>  Run Example »   Restart the server for the changes to take effect:   py manage.py runserver   And check out the result in your own browser: 127.0.0.1:8000/testing/ .   Didn't Work?  Just testing? If you just want to play around, and not \ngoing to deploy your work, you can set DEBUG = True in the settings.py file, \nand the example above will work.  Plan to deploy? If you plan to deploy your work, you should \n  set DEBUG = False in the settings.py file. The example above will fail, because Django has no built-in solution for \n  serving static files, but there are other ways to serve static files, you will \n  learn how in the next chapter.    Example (in development):  my_tennis_club/my_tennis_club/settings.py :  .\n.\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n.\n.   This will make the example work, but we want you to choose DEBUG = False ,\nbecause that is the best way to learn how to work with Django.   Choose Debug = False  For the rest of this tutorial, we will run with DEBUG = False , even in \ndevelopment, because that is the best way to learn how to work with Django.   Example:  my_tennis_club/my_tennis_club/settings.py :  .\n.\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = False\n\nALLOWED_HOSTS = ['*']\n\n.\n.    ALLOWED_HOSTS  When using DEBUG = False you have to specify which host name(s) are allowed\nto host your work. You could choose '127.0.0.1' or 'localhost' which both represents the address of your local machine.  We choose '*' , which means any address are allowed to host this site.\nThis should be change into a real domain name when you deploy your project to a public server.    Didn't Work?  That is right, the example still does not work.  You will have install a third-party library in order to handle static files.  There are many alternatives, we will show you how to use a Python library called WhiteNoise in the next chapter .      ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django QuerySet - Order By", "url": "https://www.w3schools.com/django/django_queryset_orderby.php", "content": "Django QuerySet - Order By   ❮ Previous  Next ❯    Order By  To sort QuerySets, Django uses the order_by() method:   Example  Order the result alphabetically by firstname:  mydata = Member.objects.all().order_by('firstname').values()  Run Example »    In SQL, the above statement would be written like this:   SELECT * FROM members ORDER BY firstname;    Descending Order  By default, the result is sorted ascending (the lowest value first),\nto change the direction to descending (the highest value first), use the minus sign (NOT), - in front of the field name:   Example  Order the result firstname descending:  mydata = Member.objects.all().order_by('-firstname').values()  Run Example »    In SQL, the above statement would be written like this:   SELECT * FROM members ORDER BY firstname DESC;    Multiple Order Bys  To order by more than one field, separate the fieldnames with a comma in the order_by() method:   Example  Order the result first by lastname ascending, then descending on id:  mydata = Member.objects.all().order_by('lastname', '-id').values()  Run Example »    In SQL, the above statement would be written like this:   SELECT * FROM members ORDER BY lastname ASC, id DESC;       ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django QuerySet - Filter", "url": "https://www.w3schools.com/django/django_queryset_filter.php", "content": "Django QuerySet - Filter   ❮ Previous  Next ❯    QuerySet Filter  The filter() method is used to filter your search, and allows you to return only the rows that matches the \nsearch term.  As we learned in the previous chapter, we can filter on field names like this:   Example  Return only the records where the firstname is 'Emil':  mydata = Member.objects.filter(firstname='Emil').values()  Run Example »    In SQL, the above statement would be written like this:   SELECT * FROM members WHERE firstname = 'Emil';    AND  The filter() method takes the arguments as \n**kwargs (keyword arguments), so you \ncan filter on more than one field by separating them by a comma.   Example  Return records where lastname is \"Refsnes\" and id is 2:  mydata = Member.objects.filter(lastname='Refsnes', id=2).values()  Run Example »    In SQL, the above statement would be written like this:   SELECT * FROM members WHERE lastname = 'Refsnes' AND id = 2;    OR  To return records where firstname is Emil or firstname is Tobias (meaning: \nreturning records that matches either query, not necessarily both) is not as \neasy as the AND example above.  We can use multiple filter() methods, \nseparated by a pipe | character. The results will \nmerge into one model.   Example  Return records where firstname is either \"Emil\" or Tobias\":  mydata = Member.objects.filter(firstname='Emil').values() | Member.objects.filter(firstname='Tobias').values()  Run Example »    Another common method is to import and use Q expressions:   Example  Return records where firstname is either \"Emil\" or Tobias\":  from django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\nfrom django.db.models import Q\n\ndef testing(request):\n  mydata = Member.objects.filter(Q(firstname='Emil') | Q(firstname='Tobias')).values()\n  template = loader.get_template('template.html')\n  context = {\n    'mymembers': mydata,\n  }\n  return HttpResponse(template.render(context, request))  Run Example »    In SQL, the above statement would be written like this:   SELECT * FROM members WHERE firstname = 'Emil' OR firstname = 'Tobias';    Field Lookups  Django has its own way of specifying SQL statements and WHERE clauses.  To make specific where clauses in Django, use \"Field lookups\".  Field lookups are keywords that represents specific SQL keywords.   Example:  Use the __startswith keyword:  .filter(firstname__startswith='L');  Is the same as the SQL statement:  WHERE firstname LIKE 'L%'   The above statement will return records where firstname starts with 'L'.  Field Lookups Syntax  All Field lookup keywords must be specified with the fieldname, followed by two(!) underscore characters, and the keyword.  In our Member model, the statement would be written like this:  Example  Return the records where firstname starts with the letter 'L':  mydata = Member.objects.filter(firstname__startswith='L').values()  Run Example »     Field Lookups Reference  A list of all field look up keywords:    Keyword  Description    contains  Contains the phrase    icontains  Same as contains, but case-insensitive    date  Matches a date    day  Matches a date (day of month, 1-31) (for dates)    endswith  Ends with    iendswith  Same as endswidth, but case-insensitive    exact  An exact match    iexact  Same as exact, but case-insensitive    in  Matches one of the values    isnull  Matches NULL values    gt  Greater than    gte  Greater than, or equal to    hour  Matches an hour (for datetimes)    lt  Less than    lte  Less than, or equal to    minute  Matches a minute (for datetimes)    month  Matches a month (for dates)    quarter  Matches a quarter of the year (1-4) (for dates)    range  Match between    regex  Matches a regular expression    iregex  Same as regex, but case-insensitive    second  Matches a second (for datetimes)    startswith  Starts with    istartswith  Same as startswith, but case-insensitive    time  Matches a time (for datetimes)    week  Matches a week number (1-53) (for dates)    week_day  Matches a day of week (1-7) 1 is sunday    iso_week_day  Matches a ISO 8601 day of week (1-7) 1 is monday    year  Matches a year (for dates)    iso_year  Matches an ISO 8601 year (for dates)        ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django QuerySet", "url": "https://www.w3schools.com/django/django_queryset.php", "content": "Django QuerySet   ❮ Previous  Next ❯    Django QuerySet  A QuerySet is a collection of data from a database.  A QuerySet is built up as a list of objects.  QuerySets makes it easier to get the data you actually need, by allowing you to filter and order the data \nat an early stage.  In this tutorial we will be querying data from the Member table.   Member :      id  firstname  lastname  phone  joined_date    1  Emil  Refsnes  5551234  2022-01-05    2  Tobias  Refsnes  5557777  2022-04-01    3  Linus  Refsnes  5554321  2021-12-24    4  Lene  Refsnes  5551234  2021-05-01    5  Stalikken  Refsnes  5559876  2022-09-29         Querying Data  In views.py , we have a view for testing called testing where we will test different queries.  In the example below we use the .all() method to get all the records and fields of the Member model:   View  views.py :  from django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\n\ndef testing(request):\n  mydata = Member.objects.all()\n  template = loader.get_template('template.html')\n  context = {\n    'mymembers': mydata,\n  }\n  return HttpResponse(template.render(context, request))   The object is placed in a variable called mydata , and is sent to the template \nvia the context object as mymembers , and looks like this:  <QuerySet [ <Member: Member object (1)>, <Member: \n  Member object (2)>, <Member: Member object (3)>, <Member: Member object (4)>, <Member: Member object (5)> ]>  As you can see, our Member model contains 5 records, and are listed inside \nthe QuerySet as 5 objects.  In the template you can use the mymembers object to generate content:   Template  templates/template.html :  <table border='1'>\n  <tr>\n    <th>ID</th>\n    <th>Firstname</th>\n    <th>Lastname</th>\n  </tr>\n  {% for x in mymembers %}\n    <tr>\n      <td>{{ x.id }}</td>\n        <td>{{ x.firstname }}</td>\n      <td>{{ x.lastname }}</td>\n    </tr>\n  {% endfor %}\n</table>  Run Example »       ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django QuerySet - Get Data", "url": "https://www.w3schools.com/django/django_queryset_get.php", "content": "Django QuerySet - Get Data   ❮ Previous  Next ❯    Get Data  There are different methods to get data from a model into a QuerySet.   The values() Method  The values() method allows you to return \neach object as a Python dictionary, with the names and values as key/value \npairs:   Example  views.py :  from django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\n\ndef testing(request):\n  mydata = Member.objects.all().values()\n  template = loader.get_template('template.html')\n  context = {\n    'mymembers': mydata,\n  }\n  return HttpResponse(template.render(context, request))  Run Example »     Return Specific Columns  The values_list() method allows you to return \nonly the columns that you specify.   Example  Return only the firstname columns:  views.py :  from django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\n\ndef testing(request):\n  mydata = Member.objects.values_list('firstname')\n  template = loader.get_template('template.html')\n  context = {\n    'mymembers': mydata,\n  }\n  return HttpResponse(template.render(context, request))  Run Example »     Return Specific Rows  You can filter the search to only return specific rows/records, by using the filter() method.   Example  Return only the records where firstname is \n  'Emil'  views.py :  from django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\n\ndef testing(request):\n  mydata = Member.objects.filter(firstname='Emil').values()\n  template = loader.get_template('template.html')\n  context = {\n    'mymembers': mydata,\n  }\n  return HttpResponse(template.render(context, request))  Run Example »    You will learn more about the filter() method in the next chapter .      ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django include Tag", "url": "https://www.w3schools.com/django/django_tags_include.php", "content": "Django include Tag   ❮ Previous  Next ❯    Include  The include tag allows you to include a template inside the current template.  This is useful when you have a block of content that is the same for many pages.   Example  templates/footer.html :  <p>You have reached the bottom of this page, thank you for your time.</p>  templates/template.html :  <h1>Hello</h1>\n\n<p>This page contains a footer in a template.</p>\n\n{% include 'footer.html' %}  Run Example »    Variables in Include  You can send variables into the template by using the with keyword.  In the include file, you refer to the variables by using the {{  variablename  }} syntax:   Example  templates/mymenu.html :  <div>HOME | {{ me }} | ABOUT | FORUM | {{ sponsor }}</div>  templates/template.html :  <!DOCTYPE html>\n<html>\n<body>\n\n{% include \"mymenu.html\" with me=\"TOBIAS\" sponsor=\"W3SCHOOLS\" %}\n\n<h1>Welcome</h1>\n\n<p>This is my webpage</p>\n\n</body>\n</html>  Run Example »       ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django comment Tag", "url": "https://www.w3schools.com/django/django_tags_comment.php", "content": "Django comment Tag   ❮ Previous  Next ❯    Comments  Comments allows you to have sections of code that should be ignored.   Example  <h1>Welcome Everyone</h1>\n{% comment %}\n  <h1>Welcome ladies and gentlemen</h1>\n{% endcomment %}  Run Example »    Comment Description  You can add a message to your comment, to help you remember why you wrote the \ncomment, or as message to other people reading the code.   Example  Add a description to your comment:  <h1>Welcome Everyone</h1>\n{% comment \"this was the original welcome message\" %}\n    <h1>Welcome ladies and gentlemen</h1>\n{% endcomment %}  Run Example »    Smaller Comments  You can also use the {# ... #} tags when commenting out code, which can be easier  \nfor smaller comments:   Example  Comment out the word Everyone:  <h1>Welcome{# Everyone#}</h1>  Run Example »    Comment in Views  Views are written in Python, and Python comments are written with the # character:   Example  Comment out a section in the view:  from django.http import HttpResponse\nfrom django.template import loader\n\ndef testing(request):\n  template = loader.get_template('template.html')\n  #context = {\n  # 'var1': 'John',\n  #}\n  return HttpResponse(template.render())  Run Example »   Read more about Python Comments in out Python Comment Tutorial .      ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Admin - Delete Members", "url": "https://www.w3schools.com/django/django_admin_delete_members.php", "content": "Django Admin - Delete Members   ❮ Previous  Next ❯    Delete Members  To delete a new member, you can either select a member and choose the action \"Delete selected members\" like this:  Run Demo       Or you can open a member for editing, and click the red DELETE button at the bottom, like this:  Run Demo          ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Admin - Add Members", "url": "https://www.w3schools.com/django/django_admin_add_members.php", "content": "Django Admin - Add Members   ❮ Previous  Next ❯    Add Members  To add a new member, click on the \"ADD MEMBERS\" button in the top right \ncorner:   You will get an empty form where you can fill in the members fields:   Fill in the fields and click \"SAVE\":   Now the Members Model have 6 members:     ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Admin - Update Members", "url": "https://www.w3schools.com/django/django_admin_update_members.php", "content": "Django Admin - Update Members   ❮ Previous  Next ❯    Update Members  Now we are able to create, update, and delete members in our database, and we start by giving them all a date for \nwhen they became members.  Click the first member, Stalikken ,\nto open the record for editing, and give him a joined_date :   While we are in here, let us give him a phone number as well:   Click \"SAVE\" and go back to the list of all members:   Repeat these steps and give all members a date and a phone number, and end up with a list like this:     ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Admin - Set Fields to Display", "url": "https://www.w3schools.com/django/django_admin_set_list_display.php", "content": "Django Admin - Set Fields to Display   ❮ Previous  Next ❯    Make the List Display More Reader-Friendly  When you display a Model as a list, Django displays each record as the string representation of the record object,\nwhich in our case is \"Member object (1)\", \"Member object(2)\" etc.:   To change this to a more reader-friendly format, we have two choices:   Change the string representation function, __str__() of the Member Model  Set the list_details property of the Member Model    Change the String Representation Function  To change the string representation, we have to define the __str__() function of the Member Model\nin models.py , like this:   my_tennis_club/members/models.py :  from django.db import models\n\nclass Member(models.Model):\n  firstname = models.CharField(max_length=255)\n  lastname = models.CharField(max_length=255)\n  phone = models.IntegerField(null=True)\n  joined_date = models.DateField(null=True)\n\n  def __str__(self):\n    return f\"{self.firstname} {self.lastname}\"   Which gives us this result:    Defining our own __str__() function is not a Django feature,\nit is how to change the string representation of objects in Python.\nRead more about Python objects in our Python object tutorial .    Set list_display  We can control the fields to display by specifying them in a list_display property in the admin.py file.  First create a MemberAdmin() class and specify the list_display tuple, like this:   my_tennis_club/members/admin.py :  from django.contrib import admin\nfrom .models import Member\n\n# Register your models here.\n\nclass MemberAdmin(admin.ModelAdmin):\n  list_display = (\"firstname\", \"lastname\", \"joined_date\",)\n  \nadmin.site.register(Member, MemberAdmin)   Remember to add the MemberAdmin as an argumet in the admin.site.register(Member, MemberAdmin) .  Now go back to the browser and you should get this result:     ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Admin - Include Member", "url": "https://www.w3schools.com/django/django_admin_include_members.php", "content": "Django Admin - Include Member   ❮ Previous  Next ❯    Include Member in the Admin Interface  To include the Member model in the admin interface, we have to tell Django that this model should be visible in the admin interface.  This is done in a file called admin.py , and is located in your app's folder, \nwhich in our case is the members folder.  Open it, and it should look like this:   my_tennis_club/members/admin.py :  from django.contrib import admin\n\n# Register your models here.   Insert a couple of lines here to make the Member model visible in the admin \npage:   my_tennis_club/members/admin.py :  from django.contrib import admin\nfrom .models import Member\n\n# Register your models here.\nadmin.site.register(Member)   Now go back to the browser and you should get this result:   Click Members and see the five records we inserted earlier in this tutorial:    Change Display  In the list in the screenshot above, we see \"Member object (1)\", \"Member object (2)\" etc. which might not be the data\nyou wanted to be displayed in the list.  It would be better to display \"firstname\" and \"lastname\" instead.  This can easily be done by changing some settings in the models.py and/or the admin.py files.\nYou will learn more about this in the next chapter .      ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Admin - Create User", "url": "https://www.w3schools.com/django/django_admin_create_user.php", "content": "Django Admin - Create User   ❮ Previous  Next ❯    Create User  To be able to log into the admin application, we need to create a user.  This is done by typing this command in the command view:   py manage.py createsuperuser   Which will give this prompt:   Username:   Here you must enter: username, e-mail address, (you can just pick a fake \ne-mail address), and password:   Username: johndoe Email address: johndoe@dummymail.com Password: Password (again): This password is too short. It must contain at least 8 characters. This password is too common. This password is entirely numeric. Bypass password validation and create user anyway? [y/N]:   My password did not meet the criteria, but this is a test environment, and I choose to create user anyway, by enter y:   Bypass password validation and create user anyway? [y/N]: y   If you press [Enter], you should have successfully created a user:   Superuser created successfully.   Now start the server again:   py manage.py runserver   In the browser window, type 127.0.0.1:8000/admin/ in the address bar.  And fill in the form with the correct username and password:   Which should result in this user interface:   Here you can create, read, update, and delete groups and users, but where is the Members model?   Missing Model  The Members model is missing, as it should be, you have to tell Django which models that should be visible in the admin interface.  You will learn how to include the Members model in the next chapter .      ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Admin", "url": "https://www.w3schools.com/django/django_admin.php", "content": "Django Admin   ❮ Previous  Next ❯    Django Admin  Django Admin is a really great tool in Django, it is actually a CRUD* user interface of all your models!   *CRUD stands for Create Read Update Delete.   It is free and comes ready-to-use with Django:    Getting Started  To enter the admin user interface, start the server by navigating to the /myworld folder and execute this command:   py manage.py runserver   In the browser window, type 127.0.0.1:8000/admin/ in the address bar.  The result should look like this:   The reason why this URL goes to the Django admin log in page can be found \nin the urls.py file of your project:   my_tennis_club/my_tennis_club/urls.py :  from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('', include('members.urls')),\n    path('admin/', admin.site.urls),\n]   The urlpatterns[] list takes requests going \nto admin/ and sends them to admin.site.urls , which is part of\na built-in application that comes with Django, and contains a lot of \nfunctionality and user interfaces, one of them being the log-in user interface.    Django Exercises   Test Yourself With Exercises   Exercise:  To be able to log into the built-in admin application, you have to create a super user.  Insert the missing command to create a super user:   py manage.py     Submit Answer »  Start the Exercise       ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Add Test View", "url": "https://www.w3schools.com/django/django_test_view.php", "content": "Django Add Test View   ❮ Previous  Next ❯    Test View  When testing different aspects of Django, it can be a good idea to have somewhere to test\ncode without destroying the main project.  This is optional off course, but if you like to follow all steps in this tutorial,\nyou should add a test view that is exactly like the one we create below.  Then you can follow the examples and try them out on your own computer.   Add View  Start by adding a view called \"testing\" in the views.py file:   my_tennis_club/members/views.py :  from django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\n\ndef members(request):\n  mymembers = Member.objects.all().values()\n  template = loader.get_template('all_members.html')\n  context = {\n    'mymembers': mymembers,\n  }\n  return HttpResponse(template.render(context, request))\n  \ndef details(request, id):\n  mymember = Member.objects.get(id=id)\n  template = loader.get_template('details.html')\n  context = {\n    'mymember': mymember,\n  }\n  return HttpResponse(template.render(context, request))\n  \ndef main(request):\n  template = loader.get_template('main.html')\n  return HttpResponse(template.render())\n\ndef testing(request):\n  template = loader.get_template('template.html')\n  context = {\n    'fruits': ['Apple', 'Banana', 'Cherry'],   \n  }\n  return HttpResponse(template.render(context, request))    URLs  We have to make sure that incoming urls to /testing/ will be redirected to \nthe testing view.  This is done in the urls.py file in the members folder:   my_tennis_club/members/urls.py :  from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.main, name='main'),\n    path('members/', views.members, name='members'),\n    path('members/details/<int:id>', views.details, name='details'),\n    path('testing/', views.testing, name='testing'),    \n]    Test Template  We also need a template where we can play around with HTML and Django code.  You might noticed that there was a reference to a template in the testing view?  Create a template called \"template.html\" in the templates folder:   my_tennis_club manage.py my_tennis_club/ members/ templates/ 404.html all_members.html details.html main.html master.html myfirst.html template.html    Open the template.html file and insert the following:   my_tennis_club/members/templates/template.html :  <!DOCTYPE html>\n<html>\n<body>\n\n{% for x in fruits %}\n  <h1>{{ x }}</h1>\n{% endfor %}\n\n<p>In views.py you can see what the fruits variable looks like.</p>\n\n</body>\n</html>  Run Example »   If the server is not running, navigate to the /my_tennis_club folder and execute this command in the command prompt:   py manage.py runserver   In the browser window, type 127.0.0.1:8000/testing/ in the address bar.  The result should be like this:     ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django 404 (page not found)", "url": "https://www.w3schools.com/django/django_404.php", "content": "Django 404 (page not found)   ❮ Previous  Next ❯    Page Not Found  If you try to access a page that does not exist (a 404 error), Django directs you to a built-in view that handles 404 errors.  You will learn how to customize this 404 view later in this chapter, but \nfirst, just try to request a page that does not exist.  In the browser window, type 127.0.0.1:8000/masfdfg/ in the address bar.  You will get one of two results:  1:   2:   If you got the first result, you got directed to the built-in Django 404 \ntemplate.  If you got the second result, then DEBUG is \nset to True in your settings, and you must set it to False to get directed to \nthe 404 template.  This is done in the settings.py file, which \nis located in the \nproject folder, in our case the my_tennis_club folder, \nwhere you also have to specify the host name from where your project runs from:   Example  Set the debug property to False , and allow the project to run from your local \nhost:  my_tennis_club/my_tennis_club/settings.py :  .\n.\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = False\n\nALLOWED_HOSTS = ['*']\n.\n.    Important: When DEBUG = False, Django requires you to specify the hosts you will allow this\nDjango project to run from.  In production, this should be replaced with a proper domain name:  ALLOWED_HOSTS = [' yourdomain.com ']   In the browser window, type  127.0.0.1:8000/masfdfg/ in the address bar, and you will get the built-in 404 template:    Customize the 404 Template  Django will look for a file named 404.html in the templates folder, and display it when there is a 404 error.  If no such file exists, Django shows the \"Not Found\" that you saw in the \nexample above.  To customize this message, all you have to do is to create a file in the templates folder and name it 404.html , and fill it with whatever you \nwant:   my_tennis_club/members/templates/404.html :  <!DOCTYPE html> <html> <title>Wrong address</title> <body> <h1>Ooops!</h1> <h2>I cannot \n  find the file you requested!</h2> </body> </html>   In the browser window, type  127.0.0.1:8000/masfdfg/ in the address bar, and you will get the customized 404 template:       ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Add Main Index Page", "url": "https://www.w3schools.com/django/django_add_main.php", "content": "Django Add Main Index Page   ❮ Previous  Next ❯    Main Index Page  Our project needs a main page.  The main page will be the landing page when someone visits the root folder of the project.  Now, you get an error when visiting the root folder of your project:  127.0.0.1:8000/ .  Start by creating a template called main.html :   Main  my_tennis_club/members/templates/main.html :  {% extends \"master.html\" %}\n\n{% block title %}\n  My Tennis Club\n{% endblock %}\n\n\n{% block content %}\n  <h1>My Tennis Club</h1>\n\n  <h3>Members</h3>\n  \n  <p>Check out all our <a href=\"members/\">members</a></p>\n  \n{% endblock %}    Create new View  Then create a new view called main , that will deal with incoming requests to \nroot of the project:   my_tennis_club/members/views.py :  from django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\n\ndef members(request):\n  mymembers = Member.objects.all().values()\n  template = loader.get_template('all_members.html')\n  context = {\n    'mymembers': mymembers,\n  }\n  return HttpResponse(template.render(context, request))\n  \ndef details(request, id):\n  mymember = Member.objects.get(id=id)\n  template = loader.get_template('details.html')\n  context = {\n    'mymember': mymember,\n  }\n  return HttpResponse(template.render(context, request))\n  \ndef main(request):\n  template = loader.get_template('main.html')\n  return HttpResponse(template.render())   The main view does the following:   loads the main.html template.  Outputs the HTML that is rendered by the template.    Add URL  Now we need to make sure that the root url points to the correct view.  Open the urls.py file and add the main view to the urlpatterns list:   my_tennis_club/members/urls.py :  from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.main, name='main'),\n    path('members/', views.members, name='members'),\n    path('members/details/<int:id>', views.details, name='details'),\n]  Run Example »    Add Link Back to Main  The members page is missing a link back to the main page,\nso let us add that in the all_members.html template,\nin the content block:   Example  my_tennis_club/members/templates/all_members.html :  {% extends \"master.html\" %}\n\n{% block title %}\n  My Tennis Club - List of all members\n{% endblock %}\n\n\n{% block content %}\n\n  <p><a href=\"/\">HOME</a></p>\n\n  <h1>Members</h1>\n  \n  <ul>\n    {% for x in mymembers %}\n      <li><a href=\"details/{{ x.id }}\">{{ x.firstname }} {{ x.lastname }}</a></li>\n    {% endfor %}\n  </ul>\n{% endblock %}  Run Example »   If you have followed all the steps on your own computer, you can see the result in your own browser: 127.0.0.1:8000/ .  If the server is down, you have to start it again with the runserver command:   py manage.py runserver     ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Add Master Template", "url": "https://www.w3schools.com/django/django_master_template.php", "content": "Django Add Master Template   ❮ Previous  Next ❯    The extends Tag  In the previous pages we created two templates, one for listing all members, and one\nfor details about a member.  The templates have a set of HTML code that are the same for both templates.  Django provides a way of making a \"parent template\" that you can include in all pages to \ndo the stuff\nthat is the same in all pages.  Start by creating a template called master.html , with all the necessary HTML elements:   Master  my_tennis_club/members/templates/master.html :  <!DOCTYPE html>\n<html>\n<head>\n  <title>{% block title %}{% endblock %}</title>\n</head>\n<body>\n\n{% block content %}\n{% endblock %}\n\n</body>\n</html>   Do you see Django block Tag inside the <title> element, and the <body> element?  They are placeholders, telling Django to replace this block with content from other sources.   Modify Templates  Now the two templates ( all_members.html and details.html ) can use this master.html template.  This is done by including the master template with the {% extends %} tag,\nand inserting a title block and a content block:   Members  my_tennis_club/members/templates/all_members.html :  {% extends \"master.html\" %}\n\n{% block title %}\n  My Tennis Club - List of all members\n{% endblock %}\n\n\n{% block content %}\n  <h1>Members</h1>\n  \n  <ul>\n    {% for x in mymembers %}\n      <li><a href=\"details/{{ x.id }}\">{{ x.firstname }} {{ x.lastname }}</a></li>\n    {% endfor %}\n  </ul>\n{% endblock %}  Run Example »    Details  my_tennis_club/members/templates/details.html :  {% extends \"master.html\" %}\n\n{% block title %}\n  Details about {{ mymember.firstname }} {{ mymember.lastname }}\n{% endblock %}\n\n\n{% block content %}\n  <h1>{{ mymember.firstname }} {{ mymember.lastname }}</h1>\n  \n  <p>Phone {{ mymember.phone }}</p>\n  <p>Member since: {{ mymember.joined_date }}</p>\n  \n  <p>Back to <a href=\"/members\">Members</a></p>\n  \n{% endblock %}  Run Example »   If you have followed all the steps on your own computer, you can see the result in your own browser: 127.0.0.1:8000/members/ .  If the server is down, you have to start it again with the runserver command:   py manage.py runserver     ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Add Link to Details", "url": "https://www.w3schools.com/django/django_add_link_details.php", "content": "Django Add Link to Details   ❮ Previous  Next ❯    Details Template  The next step in our web page will be to add a Details page, where we can list more details about a specific member.  Start by creating a new template called details.html :   my_tennis_club/members/templates/details.html :  <!DOCTYPE html>\n<html>\n\n<body>\n\n<h1>{{ mymember.firstname }} {{ mymember.lastname }}</h1>\n  \n<p>Phone: {{ mymember.phone }}</p>\n<p>Member since: {{ mymember.joined_date }}</p>\n\n<p>Back to <a href=\"/members\">Members</a></p>\n\n</body>\n</html>    Add Link in all-members Template  The list in all_members.html should be clickable,\nand take you to the details page with the ID of the member you clicked on:   my_tennis_club/members/templates/all_members.html :  <!DOCTYPE html>\n<html>\n<body>\n\n<h1>Members</h1>\n  \n<ul>\n  {% for x in mymembers %}\n    <li><a href=\"details/{{ x.id }}\">{{ x.firstname }} {{ x.lastname }}</a></li>\n  {% endfor %}\n</ul>\n\n</body>\n</html>    Create new View  Then create a new view in the views.py file, that will deal with incoming requests to the /details/ url:  my_tennis_club/members/views.py :  from django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\n\ndef members(request):\n  mymembers = Member.objects.all().values()\n  template = loader.get_template('all_members.html')\n  context = {\n    'mymembers': mymembers,\n  }\n  return HttpResponse(template.render(context, request))\n  \ndef details(request, id):\n  mymember = Member.objects.get(id=id)\n  template = loader.get_template('details.html')\n  context = {\n    'mymember': mymember,\n  }\n  return HttpResponse(template.render(context, request))   The details view does the following:   Gets the id as an argument.  Uses the id to locate the correct record \n  in the Member table.  loads the details.html template.  Creates an object containing the member.  Sends the object to the template.  Outputs the HTML that is rendered by the template.    Add URLs  Now we need to make sure that the /details/ url points to the correct view, with id as a parameter.  Open the urls.py file and add the details view to the urlpatterns list:   my_tennis_club/members/urls.py :  from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('members/', views.members, name='members'),\n    path('members/details/<int:id>', views.details, name='details'),\n]  Run Example »   If you have followed all the steps on your own computer, you can see the result in your own browser: 127.0.0.1:8000/members/ .  If the server is down, you have to start it again with the runserver command:   py manage.py runserver     ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Prepare Template", "url": "https://www.w3schools.com/django/django_prepare_template.php", "content": "Django Prepare Template   ❮ Previous  Next ❯    Create Template  After creating Models, with the fields and data we want in them,\nit is time to display the data in a web page.  Start by creating an HTML file named all_members.html and place it in the /templates/ folder:   my_tennis_club/members/templates/all_members.html :  <!DOCTYPE html>\n<html>\n<body>\n\n<h1>Members</h1>\n  \n<ul>\n  {% for x in mymembers %}\n    <li>{{ x.firstname }} {{ x.lastname }}</li>\n  {% endfor %}\n</ul>\n\n</body>\n</html>   Do you see the {% %} brackets inside the HTML document?  They are Django Tags, telling Django to perform some programming logic inside these brackets.  You will learn more about Django Tags in our Django Tags chapter .   Modify View  Next we need to make the model data available in the template. This is done in the view.  In the view we have to import the Member model, and send it to the template like this:   my_tennis_club/members/views.py :  from django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\n\ndef members(request):\n  mymembers = Member.objects.all().values()\n  template = loader.get_template('all_members.html')\n  context = {\n    'mymembers': mymembers,\n  }\n  return HttpResponse(template.render(context, request))  Run Example »   The members view does the following:   Creates a mymembers object with all the values of the Member model.  Loads the all_members.html template.  Creates an object containing the mymembers object.  Sends the object to the template.  Outputs the HTML that is rendered by the template.    The Result   We have created an example so that you can see the result:  Run Example »  If you have followed all the steps on your own computer, you can see the result in your own browser:  Start the server by navigating to the /my_tennis_club/ folder and execute this command:   py manage.py runserver   In the browser window, type 127.0.0.1:8000/members/ in the address bar.    ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Update Model", "url": "https://www.w3schools.com/django/django_update_model.php", "content": "Django Update Model   ❮ Previous  Next ❯    Add Fields in the Model  To add a field to a table after it is created, open the models.py file, and make your changes:   my_tennis_club/members/models.py :  from django.db import models\n\nclass Member(models.Model):\n  firstname = models.CharField(max_length=255)\n  lastname = models.CharField(max_length=255)\n  phone = models.IntegerField()\n  joined_date = models.DateField()   As you can see, we want to add phone and joined_date to our Member Model.  This is a change in the Model's structure, and therefor we have to make a migration\nto tell Django that it has to update the database:   py manage.py makemigrations members   Which, in my case, will result in a prompt, because I try to add fields that \nare not allowed to be null, to a table that already contains records.  As you can see, Django asks if I want to provide the fields with a specific \nvalue, or if I want to stop the migration and fix it in the model:   py manage.py makemigrations members You are trying to add a non-nullable field 'joined_date' to members without a default;\nwe can't do that (the database needs something to populate existing rows). Please select a fix: 1) Provide a one-off default now (will be set on all existing rows with a null value for this column) 2) Quit, and let me add a default in models.py Select an option:   I will select option 2, and open the models.py file again and allow NULL values for the two new fields:   my_tennis_club/members/models.py :  from django.db import models\n\nclass Member(models.Model):\n  firstname = models.CharField(max_length=255)\n  lastname = models.CharField(max_length=255)\n  phone = models.IntegerField(null=True)\n  joined_date = models.DateField(null=True)   And make the migration once again:   py manage.py makemigrations members   Which will result in this:   Migrations for 'members': members\\migrations\\0002_member_joined_date_member_phone.py - Add field \n  joined_date to member - Add field \n  phone to member   Run the migrate command:   py manage.py migrate   Which will result in this output:   Operations to perform: Apply all migrations: admin, auth, contenttypes, members, sessions Running migrations: Applying members.0002_member_joined_date_member_phone... OK  (myworld) C:\\Users\\ Your Name \\myworld\\my_tennis_club>    Insert Data  We can insert data to the two new fields with the same approach as we did in the Update Data chapter :  First we enter the Python Shell:   py manage.py shell   Now we are in the shell, the result should be something like this:   Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. (InteractiveConsole) >>>   At the bottom, after the three >>> write the following (and hit [enter] for each line):   >>> from members.models import Member >>> x = Member.objects.all()[0] >>> x.phone = 5551234 >>> x.joined_date = '2022-01-05' >>> x.save()   This will insert a phone number and a date in the Member Model, at least for the first record, the four remaining\nrecords will for now be left empty. We will deal with them later in the tutorial.  Execute this command to see if the Member table got updated:   >>> Member.objects.all().values()   The result should look like this:   <QuerySet [ {'id': 1, 'firstname': 'Emil', 'lastname': 'Refsnes', 'phone': 5551234, 'joined_date': datetime.date(2022, 1, 5)}, {'id': 2, 'firstname': 'Tobias', 'lastname': 'Refsnes', 'phone': None, 'joined_date': None}, {'id': 3, 'firstname': 'Linus', 'lastname': 'Refsnes', 'phone': None, 'joined_date': None}, {'id': 4, 'firstname': 'Lene', 'lastname': 'Refsnes', 'phone': None, 'joined_date': None}, {'id': 5, 'firstname': 'Stalikken', 'lastname': 'Refsnes', 'phone': None, 'joined_date': None}]>       ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Delete Data", "url": "https://www.w3schools.com/django/django_delete_data.php", "content": "Django Delete Data   ❮ Previous  Next ❯    Delete Records  To delete a record in a table, start by getting the record you want to delete:   >>> from members.models import Member >>> x = Member.objects.all()[5]   x will now represent the member at index 5,\nwhich is \"Jane Doe\", but to make sure, let us see if that is correct:   >>> x.firstname   This should give you this result:   'Jane'   Now we can delete the record:   >>> x.delete()   The result will be:   (1, {'members.Member': 1})    Which tells us how many items were deleted, and from which Model.  If we look at the Member Model, we can see that 'Jane Doe' is removed from the Model:   >>> Member.objects.all().values() <QuerySet [{'id': 1, 'firstname': 'Emil', 'lastname': 'Refsnes'}, {'id': 2, 'firstname': 'Tobias', 'lastname': 'Refsnes'}, {'id': 3, 'firstname': 'Linus', 'lastname': 'Refsnes'}, {'id': 4, 'firstname': 'Lene', 'lastname': 'Refsnes'}, {'id': 5, 'firstname': 'Stalikken', 'lastname': 'Refsnes'}]>       ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"},
{"title": "Django Update Data", "url": "https://www.w3schools.com/django/django_update_data.php", "content": "Django Update Data   ❮ Previous  Next ❯    Update Records  To update records that are already in the database, we first have to get the record we want to update:   >>> from members.models import Member >>> x = Member.objects.all()[4]   x will now represent the member at index 4,\nwhich is \"Stale Refsnes\", but to make sure, let us see if that is correct:   >>> x.firstname   This should give you this result:   'Stale'   Now we can change the values of this record:   >>> x.firstname = \"Stalikken\" >>> x.save()   Execute this command to see if the Member table got updated:   >>> Member.objects.all().values()   Hopefully, the result will look like this:   <QuerySet [{'id': 1, 'firstname': 'Emil', 'lastname': 'Refsnes'}, {'id': 2, 'firstname': 'Tobias', 'lastname': 'Refsnes'}, {'id': 3, 'firstname': 'Linus', 'lastname': 'Refsnes'}, {'id': 4, 'firstname': 'Lene', 'lastname': 'Refsnes'}, {'id': 5, 'firstname': 'Stalikken', 'lastname': 'Refsnes'}, {'id': 6, 'firstname': 'Jane', 'lastname': 'Doe'}]>       ❮ Previous  Next ❯              ★  +1          Track your progress - it's free!            Log in  Sign Up"}
]
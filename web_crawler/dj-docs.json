[
{"title": "Django documentation contents", "url": "https://docs.djangoproject.com/en/5.1/contents/", "content": "Django documentation contents ¶ Getting started Django at a glance Design your model Install it Enjoy the free API A dynamic admin interface: it’s not just scaffolding – it’s the whole house Design your URLs Write your views Design your templates This is just the surface Quick install guide Install Python Set up a database Install Django Verifying That’s it! Writing your first Django app, part 1 Creating a project The development server Creating the Polls app Write your first view Writing your first Django app, part 2 Database setup Creating models Activating models Playing with the API Introducing the Django Admin Writing your first Django app, part 3 Overview Writing more views Write views that actually do something Raising a 404 error Use the template system Removing hardcoded URLs in templates Namespacing URL names Writing your first Django app, part 4 Write a minimal form Use generic views: Less code is better Writing your first Django app, part 5 Introducing automated testing Basic testing strategies Writing our first test Test a view When testing, more is better Further testing What’s next? Writing your first Django app, part 6 Customize your app’s look and feel Adding a background-image Writing your first Django app, part 7 Customize the admin form Adding related objects Customize the admin change list Customize the admin look and feel Customize the admin index page Writing your first Django app, part 8 Installing Django Debug Toolbar Getting help from others Installing other third-party packages What’s next? Advanced tutorial: How to write reusable apps Reusability matters Your project and your reusable app Installing some prerequisites Packaging your app Using your own package Publishing your app Installing Python packages with a virtual environment What to read next Finding documentation How the documentation is organized How documentation is updated Where to get it Differences between versions Writing your first contribution for Django Introduction Code of Conduct Installing Git Getting a copy of Django’s development version Running Django’s test suite for the first time Working on a feature Creating a branch Writing some tests for your ticket Writing the code for your ticket Running Django’s test suite for the second time Writing Documentation Previewing your changes Committing the changes Pushing the commit and making a pull request Next steps Using Django How to install Django Install Python Install Apache and mod_wsgi Get your database running Install the Django code Models and databases Models Making queries Aggregation Search Managers Performing raw SQL queries Database transactions Multiple databases Tablespaces Database access optimization Database instrumentation Fixtures Examples of model relationship API usage Handling HTTP requests URL dispatcher Writing views View decorators File Uploads Django shortcut functions Generic views Middleware How to use sessions Working with forms HTML forms Django’s role in forms Forms in Django Building a form More about Django Form classes Working with form templates Further topics Templates The Django template language Support for template engines Class-based views Introduction to class-based views Built-in class-based generic views Form handling with class-based views Using mixins with class-based views Basic examples Usage in your URLconf Subclassing generic views Asynchronous class-based views Migrations The Commands Backend Support Workflow Transactions Dependencies Migration files Adding migrations to apps Reversing migrations Historical models Considerations when removing model fields Data Migrations Squashing migrations Serializing values Supporting multiple Django versions Managing files Using files in models The File object File storage Testing in Django Writing and running tests Testing tools Advanced testing topics User authentication in Django Overview Installation Usage Django’s cache framework Setting up the cache The per-site cache The per-view cache Template fragment caching The low-level cache API Asynchronous support Downstream caches Using Vary headers Controlling cache: Using other headers Order of MIDDLEWARE Conditional View Processing The condition decorator Shortcuts for only computing one value Using the decorators with other HTTP methods Comparison with middleware conditional processing Cryptographic signing Protecting SECRET_KEY and SECRET_KEY_FALLBACKS Using the low-level API Sending email Quick examples send_mail() send_mass_mail() mail_admins() mail_managers() Examples Preventing header injection The EmailMessage class Email backends Configuring email for development Internationalization and localization Overview Definitions Logging Overview Security implications Configuring logging Pagination The Paginator class Example Paginating a ListView Using Paginator in a view function Security in Django Cross site scripting (XSS) protection Cross site request forgery (CSRF) protection SQL injection protection Clickjacking protection SSL/HTTPS Host header validation Referrer policy Cross-origin opener policy Session security User-uploaded content Additional security topics Performance and optimization Introduction General approaches Caching Understanding laziness Databases HTTP performance Template performance Using different versions of available software Serializing Django objects Serializing data Deserializing data Serialization formats Natural keys Django settings The basics Designating the settings Default settings Using settings in Python code Altering settings at runtime Security Available settings Creating your own settings Using settings without setting DJANGO_SETTINGS_MODULE Signals Listening to signals Defining and sending signals Disconnecting signals System check framework Writing your own checks External packages Localflavor Comments Formtools Asynchronous support Async views Async safety Async adapter functions How-to guides Models, data and databases How to provide initial data for models How to integrate Django with a legacy database How to create custom model fields How to create database migrations How to write custom lookups Templates and output How to create CSV output How to create PDF files How to override templates How to implement a custom template backend How to create custom template tags and filters Project configuration and management How to manage static files (e.g. images, JavaScript, CSS) How to configure and use logging How to manage error reporting How to delete a Django application Installing, deploying and upgrading How to upgrade Django to a newer version How to install Django on Windows How to deploy Django How to deploy static files Other guides How to authenticate using REMOTE_USER How to use Django’s CSRF protection How to create custom django-admin commands How to write a custom storage class Django FAQ FAQ: General Why does this project exist? What does “Django” mean, and how do you pronounce it? Is Django stable? Does Django scale? Who’s behind this? How is Django licensed? Why does Django include Python’s license file? Which sites use Django? Django appears to be a MVC framework, but you call the Controller the “view”, and the View the “template”. How come you don’t use the standard names? <Framework X> does <feature Y> – why doesn’t Django? Why did you write all of Django from scratch, instead of using other Python libraries? Is Django a content-management-system (CMS)? How can I download the Django documentation to read it offline? How do I cite Django? FAQ: Installation How do I get started? What are Django’s prerequisites? What Python version can I use with Django? What Python version should I use with Django? Should I use the stable version or development version? FAQ: Using Django Why do I get an error about importing DJANGO_SETTINGS_MODULE ? I can’t stand your template language. Do I have to use it? Do I have to use your model/database layer? How do I use image and file fields? How do I make a variable available to all my templates? FAQ: Getting Help How do I do X? Why doesn’t Y work? Where can I go to get help? Why hasn’t my message appeared on django-users ? Nobody answered my question! What should I do? I think I’ve found a bug! What should I do? I think I’ve found a security problem! What should I do? FAQ: Databases and models How can I see the raw SQL queries Django is running? Can I use Django with a preexisting database? If I make changes to a model, how do I update the database? Do Django models support multiple-column primary keys? Does Django support NoSQL databases? How do I add database-specific options to my CREATE TABLE statements, such as specifying MyISAM as the table type? FAQ: The admin I can’t log in. When I enter a valid username and password, it just brings up the login page again, with no error messages. I can’t log in. When I enter a valid username and password, it brings up the login page again, with a “Please enter a correct username and password” error. How do I automatically set a field’s value to the user who last edited the object in the admin? How do I limit admin access so that objects can only be edited by the users who created them? My admin-site CSS and images showed up fine using the development server, but they’re not displaying when using mod_wsgi. My “list_filter” contains a ManyToManyField, but the filter doesn’t display. Some objects aren’t appearing in the admin. How can I customize the functionality of the admin interface? The dynamically-generated admin site is ugly! How can I change it? What browsers are supported for using the admin? What assistive technologies are supported for using the admin? FAQ: Contributing code How can I get started contributing code to Django? I submitted a bug fix several weeks ago. Why are you ignoring my contribution? When and how might I remind the team of a change I care about? But I’ve reminded you several times and you keep ignoring my contribution! I’m sure my ticket is absolutely 100% perfect, can I mark it as “Ready For Checkin” myself? Troubleshooting Problems running django-admin Miscellaneous API Reference Applications Projects and applications Configuring applications Application configuration Application registry Initialization process System check framework API reference Builtin tags Core system checks contrib app checks Built-in class-based views API Base views Generic display views Generic editing views Generic date views Class-based views mixins Class-based generic views - flattened index Specification Base vs Generic views Clickjacking Protection An example of clickjacking Preventing clickjacking How to use it Limitations contrib packages The Django admin site django.contrib.auth The contenttypes framework The flatpages app GeoDjango django.contrib.humanize The messages framework django.contrib.postgres The redirects app The sitemap framework The “sites” framework The staticfiles app The syndication feed framework admin auth contenttypes flatpages gis humanize messages postgres redirects sessions sites sitemaps syndication Other add-ons Cross Site Request Forgery protection How it works Limitations Utilities Settings Frequently Asked Questions Databases General notes PostgreSQL notes MariaDB notes MySQL notes SQLite notes Oracle notes Subclassing the built-in database backends Using a 3rd-party database backend django-admin and manage.py Usage Available commands Commands provided by applications Default options Extra niceties Running management commands from your code Output redirection Django Exceptions Django Core Exceptions URL Resolver exceptions Database Exceptions HTTP Exceptions Sessions Exceptions Transaction Exceptions Testing Framework Exceptions Python Exceptions File handling The File object File storage API Uploaded Files and Upload Handlers Forms The Forms API Form fields Model Form Functions Formset Functions The form rendering API Widgets Form and field validation Logging Django’s default logging configuration Django logging extensions Middleware Available middleware Middleware ordering Migration Operations Schema Operations Special Operations Operation category Writing your own Models Model field reference Field attribute reference Model index reference Constraints reference Model _meta API Related objects reference Model class reference Model Meta options Model instance reference QuerySet API reference Lookup API reference Query Expressions Conditional Expressions Database Functions Paginator Paginator class Page class Exceptions Request and response objects Quick overview HttpRequest objects QueryDict objects HttpResponse objects JsonResponse objects StreamingHttpResponse objects FileResponse objects HttpResponseBase class SchemaEditor Methods Attributes Settings Core Settings Auth Messages Sessions Sites Static Files Core Settings Topical Index Signals Model signals Management signals Request/response signals Test signals Database Wrappers Templates The Django template language Built-in template tags and filters The Django template language: for Python programmers TemplateResponse and SimpleTemplateResponse SimpleTemplateResponse objects TemplateResponse objects The rendering process Using TemplateResponse and SimpleTemplateResponse Unicode data Creating the database General string handling Models Templates Files Form submission django.urls utility functions reverse() reverse_lazy() resolve() get_script_prefix() django.urls functions for use in URLconfs path() re_path() include() register_converter() django.conf.urls functions for use in URLconfs static() handler400 handler403 handler404 handler500 Django Utils django.utils.cache django.utils.dateparse django.utils.decorators django.utils.encoding django.utils.feedgenerator django.utils.functional django.utils.html django.utils.http django.utils.module_loading django.utils.safestring django.utils.text django.utils.timezone django.utils.translation Validators Writing validators How validators are run Built-in validators Built-in Views Serving files in development Error views Meta-documentation and miscellany API stability What “stable” means Stable APIs Exceptions Design philosophies Overall Models Database API URL design Template system Views Cache Framework Third-party distributions of Django For distributors Glossary Release notes Final releases 5.1 release 5.0 release 4.2 release 4.1 release 4.0 release 3.2 release 3.1 release 3.0 release 2.2 release 2.1 release 2.0 release 1.11 release 1.10 release 1.9 release 1.8 release 1.7 release 1.6 release 1.5 release 1.4 release 1.3 release 1.2 release 1.1 release 1.0 release Pre-1.0 releases Security releases Django internals Contributing to Django Communication channels Getting started Work on the Django framework Other ways of contributing Mailing lists and Forum Django Forum django-users django-developers django-announce django-updates Organization of the Django Project Principles Mergers Releasers Steering council Changing the organization Django’s security policies Reporting security issues How does Django evaluate a report Supported versions How Django discloses security issues Who receives advance notification Requesting notifications Django’s release process Official releases Release cadence Deprecation policy Supported versions Release process Django Deprecation Timeline 6.0 5.1 5.0 4.1 4.0 3.1 3.0 2.1 2.0 1.10 1.9 1.8 1.7 1.6 1.5 1.4 1.3 The Django source code repository High-level overview The main branch Stable branches Tags How is Django Formed? Overview Prerequisites Pre-release tasks Actually rolling the release Making the release(s) available to the public Post-release New stable branch tasks Notes on setting the VERSION tuple Indices, glossary and tables ¶ Index Module Index Glossary", "keywords": ["previewing", "column", "comments", "transactions", "work", "signing", "variable", "type", "url", "httpresponse", "manytomanyfield", "username", "settings", "aggregation", "overview", "classes", "django_settings_module", "party", "testing", "secret_key", "cms", "upload", "performance", "use", "django.utils.feedgenerator", "utility", "strategies", "views", "messages", "ways", "condition", "project", "specification", "login", "default", "surface", "suite", "filters", "referrer", "injection", "page", "workflow", "vary", "package", "postgres", "contrib", "constraints", "users", "toolbar", "backend", "paginator", "localization", "version", "wrappers", "images", "tuple", "install", "windows", "cross", "meta", "querydict", "x", "tablespaces", "policy", "steps", "secret_key_fallbacks", "prerequisites", "team", "running", "header", "implications", "flatpages", "reverse_lazy", "admin", "adapter", "python", "downstream", "logging", "formats", "fixtures", "customize", "lookup", "migration", "understanding", "sessions", "host", "jsonresponse", "storage", "stability", "others", "faq", "look", "topics", "display", "framework", "miscellany", "mailing", "search", "unicode", "headers", "django.urls", "operation", "forms", "utilities", "simpletemplateresponse", "django.utils.timezone", "feature", "glossary", "issues", "releasers", "urlconf", "instrumentation", "available", "django.conf.urls", "django.utils.decorators", "error", "differences", "xss", "design", "template", "debug", "cache", "migrations", "%", "rendering", "static", "altering", "order", "tasks", "documentation", "-", "resolve", "development", "deprecation", "mod_wsgi", "uploads", "general", "application", "scripting", "glance", "table", "mixins", "system", "branch", "list_filter", "notifications", "files", "query", "weeks", "mariadb", "get_script_prefix", "runtime", "using", "versions", "authentication", "limitations", "¶", "installing", "channels", "server", "change", "sites", "commit", "example", "session", "house", "license", "functions", "value", "conditional", "definitions", "source", "nosql", "introduction", "optimization", "writing", "html", "ssl", "handler404", "examples", "cadence", "setup", "form", "object", "httprequest", "niceties", "postgresql", "attributes", "comparison", "initialization", "password", "api", "post", "projects", "level", "django", "message", "validation", "csrf", "field", "contents", "http", "release(s", "libraries", "layer", "objects", "language", "squashing", "technologies", "index", "lists", "mvc", "interface", "software", "https", "mysql", "statements", "overall", "branches", "staticfiles", "widgets", "handling", "guides", "serialization", "templates", "pre-1.0", "help", "checkin", "time", "release", "oracle", "middleware", "category", "queryset", "mail_managers", "builtin", "commands", "emailmessage", "site", "organization", "css", "problem", "for", "releases", "output", "fields", "apis", "distributions", "copy", "decorator", "custom", "resolver", "methods", "mail_admins", "pagination", "browsers", "geodjango", "apache", "urls", "base", "process", "access", "conduct", "javascript", ">", "timeline", "considerations", "email", "streaminghttpresponse", "fix", "content", "validators", "caching", "handlers", "ons", "applications", "request", "redirects", "internationalization", "tables", "remote_user", "protection", "data", "polls", "register_converter", "lookups", "options", "environment", "dependencies", "notes", "submission", "clickjacking", "templateresponse", "formset", "response", "editing", "keys", "configuration", "sql", "send_mass_mail", "getting", "path", "pdf", "tools", "managers", "auth", "forum", "contenttypes", "opener", "backends", "apps", "module", "urlconfs", "packages", "advance", "decorators", "humanize", "add", "django.utils.cache", "fileresponse", "security", "redirection", "models", "registry", "listview", "feed", "council", "shortcuts", "image", "support", "schemaeditor", "distributors", "deserializing", "ready", "git", "background", "changes", "questions", "filter", "problems", "policies", "legacy", "management", "removing", "myisam", "_", "tests", "check", "utils", "values", "mergers", "special", "times", "generic", "caches", "reusability", "role", "async", "communication", "safety", "test", "fragment", "re_path", "forgery", "laziness", "usage", "preexisting", "transaction", "handler500", "tutorial", "model", "y", "processing", "mean", "httpresponsebase", "checks", "n’t", "handler400", "sqlite", "basics", "steering", "syndication", "internals", "scratch", "class", "django.utils.dateparse", "announce", "report", "finding", "attribute", "gis", "function", "developers", "string", "list", "bug", "question", "ticket", "app", "view", "user", "part", "file", "operations", "installation", "core", "extensions", "exceptions", "django.utils.html", "sitemap", "notification", "principles", "names", "signals", "topical", "contribution", "expressions", "tags", "csv", "date", "django.contrib.auth", "serializing", "functionality", "database", "relationship", "databases", "reference", "instance", "engines", "schema", "code", "indices", "handler403", "per", "controller", "configuring"], "type": "documentation"},
{"title": "Writing your first Django app, part 2", "url": "https://docs.djangoproject.com/en/5.1/intro/tutorial02/", "content": "Writing your first Django app, part 2 ¶ This tutorial begins where Tutorial 1 left off.\nWe’ll set up the database, create your first model, and get a quick\nintroduction to Django’s automatically-generated admin site. Where to get help: If you’re having trouble going through this tutorial, please head over to\nthe Getting Help section of the FAQ. Database setup ¶ Now, open up mysite/settings.py . It’s a normal Python module with\nmodule-level variables representing Django settings. By default, the DATABASES configuration uses SQLite. If you’re new\nto databases, or you’re just interested in trying Django, this is the easiest\nchoice. SQLite is included in Python, so you won’t need to install anything\nelse to support your database. When starting your first real project, however,\nyou may want to use a more scalable database like PostgreSQL, to avoid\ndatabase-switching headaches down the road. If you wish to use another database, see details to customize and get\nyour database running . While you’re editing mysite/settings.py , set TIME_ZONE to\nyour time zone. Also, note the INSTALLED_APPS setting at the top of the file. That\nholds the names of all Django applications that are activated in this Django\ninstance. Apps can be used in multiple projects, and you can package and\ndistribute them for use by others in their projects. By default, INSTALLED_APPS contains the following apps, all of which\ncome with Django: django.contrib.admin – The admin site. You’ll use it shortly. django.contrib.auth – An authentication system. django.contrib.contenttypes – A framework for content types. django.contrib.sessions – A session framework. django.contrib.messages – A messaging framework. django.contrib.staticfiles – A framework for managing\nstatic files. These applications are included by default as a convenience for the common case. Some of these applications make use of at least one database table, though,\nso we need to create the tables in the database before we can use them. To do\nthat, run the following command: /  $ python manage.py migrate ...\\> py manage.py migrate The migrate command looks at the INSTALLED_APPS setting\nand creates any necessary database tables according to the database settings\nin your mysite/settings.py file and the database migrations shipped\nwith the app (we’ll cover those later). You’ll see a message for each\nmigration it applies. If you’re interested, run the command-line client for your\ndatabase and type \\dt (PostgreSQL), SHOW TABLES; (MariaDB, MySQL), .tables (SQLite), or SELECT TABLE_NAME FROM USER_TABLES; (Oracle) to\ndisplay the tables Django created. For the minimalists Like we said above, the default applications are included for the common\ncase, but not everybody needs them. If you don’t need any or all of them,\nfeel free to comment-out or delete the appropriate line(s) from INSTALLED_APPS before running migrate . The migrate command will only run migrations for apps in INSTALLED_APPS . Creating models ¶ Now we’ll define your models – essentially, your database layout, with\nadditional metadata. Philosophy A model is the single, definitive source of information about your data. It\ncontains the essential fields and behaviors of the data you’re storing.\nDjango follows the DRY Principle . The goal is to define your\ndata model in one place and automatically derive things from it. This includes the migrations - unlike in Ruby On Rails, for example, migrations\nare entirely derived from your models file, and are essentially a\nhistory that Django can roll through to update your database schema to\nmatch your current models. In our poll app, we’ll create two models: Question and Choice . A Question has a question and a publication date. A Choice has two\nfields: the text of the choice and a vote tally. Each Choice is associated\nwith a Question . These concepts are represented by Python classes. Edit the polls/models.py file so it looks like this: polls/models.py ¶ from django.db import models class Question ( models . Model ): question_text = models . CharField ( max_length = 200 ) pub_date = models . DateTimeField ( \"date published\" ) class Choice ( models . Model ): question = models . ForeignKey ( Question , on_delete = models . CASCADE ) choice_text = models . CharField ( max_length = 200 ) votes = models . IntegerField ( default = 0 ) Here, each model is represented by a class that subclasses django.db.models.Model . Each model has a number of class variables,\neach of which represents a database field in the model. Each field is represented by an instance of a Field class – e.g., CharField for character fields and DateTimeField for datetimes. This tells Django what\ntype of data each field holds. The name of each Field instance (e.g. question_text or pub_date ) is the field’s name, in machine-friendly\nformat. You’ll use this value in your Python code, and your database will use\nit as the column name. You can use an optional first positional argument to a Field to designate a human-readable name. That’s used\nin a couple of introspective parts of Django, and it doubles as documentation.\nIf this field isn’t provided, Django will use the machine-readable name. In this\nexample, we’ve only defined a human-readable name for Question.pub_date .\nFor all other fields in this model, the field’s machine-readable name will\nsuffice as its human-readable name. Some Field classes have required arguments. CharField , for example, requires that you give it a max_length . That’s used not only in the\ndatabase schema, but in validation, as we’ll soon see. A Field can also have various optional arguments; in\nthis case, we’ve set the default value of votes to 0. Finally, note a relationship is defined, using ForeignKey . That tells Django each Choice is\nrelated to a single Question . Django supports all the common database\nrelationships: many-to-one, many-to-many, and one-to-one. Activating models ¶ That small bit of model code gives Django a lot of information. With it, Django\nis able to: Create a database schema ( CREATE TABLE statements) for this app. Create a Python database-access API for accessing Question and Choice objects. But first we need to tell our project that the polls app is installed. Philosophy Django apps are “pluggable”: You can use an app in multiple projects, and\nyou can distribute apps, because they don’t have to be tied to a given\nDjango installation. To include the app in our project, we need to add a reference to its\nconfiguration class in the INSTALLED_APPS setting. The PollsConfig class is in the polls/apps.py file, so its dotted path\nis 'polls.apps.PollsConfig' . Edit the mysite/settings.py file and\nadd that dotted path to the INSTALLED_APPS setting. It’ll look like\nthis: mysite/settings.py ¶ INSTALLED_APPS = [ \"polls.apps.PollsConfig\" , \"django.contrib.admin\" , \"django.contrib.auth\" , \"django.contrib.contenttypes\" , \"django.contrib.sessions\" , \"django.contrib.messages\" , \"django.contrib.staticfiles\" , ] Now Django knows to include the polls app. Let’s run another command: /  $ python manage.py makemigrations polls ...\\> py manage.py makemigrations polls You should see something similar to the following: Migrations for 'polls':\n  polls/migrations/0001_initial.py\n    + Create model Question\n    + Create model Choice By running makemigrations , you’re telling Django that you’ve made\nsome changes to your models (in this case, you’ve made new ones) and that\nyou’d like the changes to be stored as a migration . Migrations are how Django stores changes to your models (and thus your\ndatabase schema) - they’re files on disk. You can read the migration for your\nnew model if you like; it’s the file polls/migrations/0001_initial.py .\nDon’t worry, you’re not expected to read them every time Django makes one, but\nthey’re designed to be human-editable in case you want to manually tweak how\nDjango changes things. There’s a command that will run the migrations for you and manage your database\nschema automatically - that’s called migrate , and we’ll come to it in a\nmoment - but first, let’s see what SQL that migration would run. The sqlmigrate command takes migration names and returns their SQL: /  $ python manage.py sqlmigrate polls 0001 ...\\> py manage.py sqlmigrate polls 0001 You should see something similar to the following (we’ve reformatted it for\nreadability): BEGIN ; -- -- Create model Question -- CREATE TABLE \"polls_question\" ( \"id\" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY , \"question_text\" varchar ( 200 ) NOT NULL , \"pub_date\" timestamp with time zone NOT NULL ); -- -- Create model Choice -- CREATE TABLE \"polls_choice\" ( \"id\" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY , \"choice_text\" varchar ( 200 ) NOT NULL , \"votes\" integer NOT NULL , \"question_id\" bigint NOT NULL ); ALTER TABLE \"polls_choice\" ADD CONSTRAINT \"polls_choice_question_id_c5b4b260_fk_polls_question_id\" FOREIGN KEY ( \"question_id\" ) REFERENCES \"polls_question\" ( \"id\" ) DEFERRABLE INITIALLY DEFERRED ; CREATE INDEX \"polls_choice_question_id_c5b4b260\" ON \"polls_choice\" ( \"question_id\" ); COMMIT ; Note the following: The exact output will vary depending on the database you are using. The\nexample above is generated for PostgreSQL. Table names are automatically generated by combining the name of the app\n( polls ) and the lowercase name of the model – question and choice . (You can override this behavior.) Primary keys (IDs) are added automatically. (You can override this, too.) By convention, Django appends \"_id\" to the foreign key field name.\n(Yes, you can override this, as well.) The foreign key relationship is made explicit by a FOREIGN KEY constraint. Don’t worry about the DEFERRABLE parts; it’s telling\nPostgreSQL to not enforce the foreign key until the end of the transaction. It’s tailored to the database you’re using, so database-specific field types\nsuch as auto_increment (MySQL), bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (PostgreSQL), or integer primary key autoincrement (SQLite)\nare handled for you automatically. Same goes for the quoting of field names\n– e.g., using double quotes or single quotes. The sqlmigrate command doesn’t actually run the migration on your\ndatabase - instead, it prints it to the screen so that you can see what SQL\nDjango thinks is required. It’s useful for checking what Django is going to\ndo or if you have database administrators who require SQL scripts for\nchanges. If you’re interested, you can also run python manage.py check ; this checks for any problems in\nyour project without making migrations or touching the database. Now, run migrate again to create those model tables in your database: /  $ python manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, polls, sessions Running migrations: Rendering model states... DONE Applying polls.0001_initial... OK ...\\> py manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, polls, sessions Running migrations: Rendering model states... DONE Applying polls.0001_initial... OK The migrate command takes all the migrations that haven’t been\napplied (Django tracks which ones are applied using a special table in your\ndatabase called django_migrations ) and runs them against your database -\nessentially, synchronizing the changes you made to your models with the schema\nin the database. Migrations are very powerful and let you change your models over time, as you\ndevelop your project, without the need to delete your database or tables and\nmake new ones - it specializes in upgrading your database live, without\nlosing data. We’ll cover them in more depth in a later part of the tutorial,\nbut for now, remember the three-step guide to making model changes: Change your models (in models.py ). Run python manage.py makemigrations to create\nmigrations for those changes Run python manage.py migrate to apply those changes to\nthe database. The reason that there are separate commands to make and apply migrations is\nbecause you’ll commit migrations to your version control system and ship them\nwith your app; they not only make your development easier, they’re also\nusable by other developers and in production. Read the django-admin documentation for full\ninformation on what the manage.py utility can do. Playing with the API ¶ Now, let’s hop into the interactive Python shell and play around with the free\nAPI Django gives you. To invoke the Python shell, use this command: /  $ python manage.py shell ...\\> py manage.py shell We’re using this instead of simply typing “python”, because manage.py sets the DJANGO_SETTINGS_MODULE environment variable, which gives\nDjango the Python import path to your mysite/settings.py file. Once you’re in the shell, explore the database API : >>> from polls.models import Choice , Question # Import the model classes we just wrote. # No questions are in the system yet. >>> Question . objects . all () <QuerySet []> # Create a new Question. # Support for time zones is enabled in the default settings file, so # Django expects a datetime with tzinfo for pub_date. Use timezone.now() # instead of datetime.datetime.now() and it will do the right thing. >>> from django.utils import timezone >>> q = Question ( question_text = \"What's new?\" , pub_date = timezone . now ()) # Save the object into the database. You have to call save() explicitly. >>> q . save () # Now it has an ID. >>> q . id 1 # Access model field values via Python attributes. >>> q . question_text \"What's new?\" >>> q . pub_date datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=datetime.timezone.utc) # Change values by changing the attributes, then calling save(). >>> q . question_text = \"What's up?\" >>> q . save () # objects.all() displays all the questions in the database. >>> Question . objects . all () <QuerySet [<Question: Question object (1)>]> Wait a minute. <Question: Question object (1)> isn’t a helpful\nrepresentation of this object. Let’s fix that by editing the Question model\n(in the polls/models.py file) and adding a __str__() method to both Question and Choice : polls/models.py ¶ from django.db import models class Question ( models . Model ): # ... def __str__ ( self ): return self . question_text class Choice ( models . Model ): # ... def __str__ ( self ): return self . choice_text It’s important to add __str__() methods to your\nmodels, not only for your own convenience when dealing with the interactive\nprompt, but also because objects’ representations are used throughout Django’s\nautomatically-generated admin. Let’s also add a custom method to this model: polls/models.py ¶ import datetime from django.db import models from django.utils import timezone class Question ( models . Model ): # ... def was_published_recently ( self ): return self . pub_date >= timezone . now () - datetime . timedelta ( days = 1 ) Note the addition of import datetime and from django.utils import timezone , to reference Python’s standard datetime module and Django’s\ntime-zone-related utilities in django.utils.timezone , respectively. If\nyou aren’t familiar with time zone handling in Python, you can learn more in\nthe time zone support docs . Save these changes and start a new Python interactive shell by running python manage.py shell again: >>> from polls.models import Choice , Question # Make sure our __str__() addition worked. >>> Question . objects . all () <QuerySet [<Question: What's up?>]> # Django provides a rich database lookup API that's entirely driven by # keyword arguments. >>> Question . objects . filter ( id = 1 ) <QuerySet [<Question: What's up?>]> >>> Question . objects . filter ( question_text__startswith = \"What\" ) <QuerySet [<Question: What's up?>]> # Get the question that was published this year. >>> from django.utils import timezone >>> current_year = timezone . now () . year >>> Question . objects . get ( pub_date__year = current_year ) <Question: What's up?> # Request an ID that doesn't exist, this will raise an exception. >>> Question . objects . get ( id = 2 ) Traceback (most recent call last): ... DoesNotExist : Question matching query does not exist. # Lookup by a primary key is the most common case, so Django provides a # shortcut for primary-key exact lookups. # The following is identical to Question.objects.get(id=1). >>> Question . objects . get ( pk = 1 ) <Question: What's up?> # Make sure our custom method worked. >>> q = Question . objects . get ( pk = 1 ) >>> q . was_published_recently () True # Give the Question a couple of Choices. The create call constructs a new # Choice object, does the INSERT statement, adds the choice to the set # of available choices and returns the new Choice object. Django creates # a set (defined as \"choice_set\") to hold the \"other side\" of a ForeignKey # relation (e.g. a question's choice) which can be accessed via the API. >>> q = Question . objects . get ( pk = 1 ) # Display any choices from the related object set -- none so far. >>> q . choice_set . all () <QuerySet []> # Create three choices. >>> q . choice_set . create ( choice_text = \"Not much\" , votes = 0 ) <Choice: Not much> >>> q . choice_set . create ( choice_text = \"The sky\" , votes = 0 ) <Choice: The sky> >>> c = q . choice_set . create ( choice_text = \"Just hacking again\" , votes = 0 ) # Choice objects have API access to their related Question objects. >>> c . question <Question: What's up?> # And vice versa: Question objects get access to Choice objects. >>> q . choice_set . all () <QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]> >>> q . choice_set . count () 3 # The API automatically follows relationships as far as you need. # Use double underscores to separate relationships. # This works as many levels deep as you want; there's no limit. # Find all Choices for any question whose pub_date is in this year # (reusing the 'current_year' variable we created above). >>> Choice . objects . filter ( question__pub_date__year = current_year ) <QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]> # Let's delete one of the choices. Use delete() for that. >>> c = q . choice_set . filter ( choice_text__startswith = \"Just hacking\" ) >>> c . delete () For more information on model relations, see Accessing related objects . For more on how to use double underscores to perform\nfield lookups via the API, see Field lookups . For\nfull details on the database API, see our Database API reference . Introducing the Django Admin ¶ Philosophy Generating admin sites for your staff or clients to add, change, and delete\ncontent is tedious work that doesn’t require much creativity. For that\nreason, Django entirely automates creation of admin interfaces for models. Django was written in a newsroom environment, with a very clear separation\nbetween “content publishers” and the “public” site. Site managers use the\nsystem to add news stories, events, sports scores, etc., and that content is\ndisplayed on the public site. Django solves the problem of creating a\nunified interface for site administrators to edit content. The admin isn’t intended to be used by site visitors. It’s for site\nmanagers. Creating an admin user ¶ First we’ll need to create a user who can login to the admin site. Run the\nfollowing command: /  $ python manage.py createsuperuser ...\\> py manage.py createsuperuser Enter your desired username and press enter. Username: admin You will then be prompted for your desired email address: Email address: admin@example.com The final step is to enter your password. You will be asked to enter your\npassword twice, the second time as a confirmation of the first. Password: **********\nPassword (again): *********\nSuperuser created successfully. Start the development server ¶ The Django admin site is activated by default. Let’s start the development\nserver and explore it. If the server is not running start it like so: /  $ python manage.py runserver ...\\> py manage.py runserver Now, open a web browser and go to “/admin/” on your local domain – e.g., http://127.0.0.1:8000/admin/ . You should see the admin’s login screen: Since translation is turned on by default, if\nyou set LANGUAGE_CODE , the login screen will be displayed in the\ngiven language (if Django has appropriate translations). Enter the admin site ¶ Now, try logging in with the superuser account you created in the previous step.\nYou should see the Django admin index page: You should see a few types of editable content: groups and users. They are\nprovided by django.contrib.auth , the authentication framework shipped\nby Django. Make the poll app modifiable in the admin ¶ But where’s our poll app? It’s not displayed on the admin index page. Only one more thing to do: we need to tell the admin that Question objects\nhave an admin interface. To do this, open the polls/admin.py file, and\nedit it to look like this: polls/admin.py ¶ from django.contrib import admin from .models import Question admin . site . register ( Question ) Explore the free admin functionality ¶ Now that we’ve registered Question , Django knows that it should be displayed on\nthe admin index page: Click “Questions”. Now you’re at the “change list” page for questions. This page\ndisplays all the questions in the database and lets you choose one to change it.\nThere’s the “What’s up?” question we created earlier: Click the “What’s up?” question to edit it: Things to note here: The form is automatically generated from the Question model. The different model field types ( DateTimeField , CharField ) correspond to the appropriate HTML\ninput widget. Each type of field knows how to display itself in the Django\nadmin. Each DateTimeField gets free JavaScript\nshortcuts. Dates get a “Today” shortcut and calendar popup, and times get\na “Now” shortcut and a convenient popup that lists commonly entered times. The bottom part of the page gives you a couple of options: Save – Saves changes and returns to the change-list page for this type of\nobject. Save and continue editing – Saves changes and reloads the admin page for\nthis object. Save and add another – Saves changes and loads a new, blank form for this\ntype of object. Delete – Displays a delete confirmation page. If the value of “Date published” doesn’t match the time when you created the\nquestion in Tutorial 1 , it probably\nmeans you forgot to set the correct value for the TIME_ZONE setting.\nChange it, reload the page and check that the correct value appears. Change the “Date published” by clicking the “Today” and “Now” shortcuts. Then\nclick “Save and continue editing.” Then click “History” in the upper right.\nYou’ll see a page listing all changes made to this object via the Django admin,\nwith the timestamp and username of the person who made the change: When you’re comfortable with the models API and have familiarized yourself with\nthe admin site, read part 3 of this tutorial to learn\nabout how to add more views to our polls app.", "keywords": ["alter", "column", "py", "work", "variable", "type", "line", "headaches", "statement", "\\", "place", "question_text", "polls_choice", "popup", "username", "id", "settings", "reason", "classes", "null", "django_settings_module", "mysite", "method", "shell", "question.objects.get(id=1", "person", "django.contrib.messages", "http://127.0.0.1:8000", "use", "utility", "views", "right", "principle", "project", "scripts", "login", "default", "unlike", "client", "calendar", "domain", "need", ".tables", "page", "top", "users", "guide", "self", "argument", "by", "django.contrib.staticfiles", "version", "trouble", "staff", "human", "apps.py", "name", "relationships", "reload", "admin", "minimalists", "python", "charfield", "addition", "manage.py", "lookup", "migration", "sessions", "faq", "others", "rails", "address", "depth", "line(s", "*", "framework", "relations", "minute", "enter", "utilities", "django.utils.timezone", "key", "levels", "zone", "doesnotexist", "browser", "separation", "identity", "migrations", "control", "datetime", "setting", "django.contrib.sessions", "documentation", "development", "creation", "datetime.datetime.now", "sky", "migrate", "table", "convenience", "behavior", "auto_increment", "system", "ids", "str", "files", "query", "mariadb", "following", "pub_date__year", "import", "moment", "information", "polls_question", "#", "settings.py", "section", "authentication", "¶", "web", "couple", "server", "layout", "change", "sites", "format", "polls.apps", "commit", "example", "django.db.models", "session", "autoincrement", "year", "value", "source", "dry", "begin", "introduction", "primary", "save", "c", "html", "create", "django.db", "things", "details", "setup", "form", "object", "datetime.datetime(2012", "postgresql", "attributes", "returns", "tzinfo", "password", "api", "dates", "insert", "quoting", "projects", "level", "django", "days", "message", "validation", "lot", "text", "field", "relation", "integerfield", "foreign", "=", "objects", "news", "language", ".models", "index", "lists", "interface", "mysql", "datetimes", "statements", "translation", "handling", "admin/", "help", "time", "exception", "count", "oracle", "q", "delete", "queryset", "lowercase", "commands", "site", "d", "problem", "accessing", "groups", "philosophy", "output", "fields", "custom", "methods", "side", "machine", "keyword", "choice_text__startswith", "none", "question_id", "variables", "access", "polls_choice_question_id_c5b4b260_fk_polls_question_id", "command", "polls.models", "scores", "javascript", "timezone.now", "timedelta", "email", "convention", "production", "content", "choice_set", "end", "makemigrations", "applications", "publication", "tables", "thing", "screen", "createsuperuser", "creativity", "data", "polls", "widget", "matching", "constraint", "lookups", "pub_date", "options", "environment", "votes", "states", "administrators", "references", "readability", "’s", "superuser", "keys", "configuration", "sql", "events", "deferrable", "path", "django.utils", "managers", "auth", "contenttypes", "ruby", "module", "apps", "arguments", "goal", "/admin/", "press", "polls.0001_initial", "visitors", "editable", "publishers", "models", "underscores", "call", "django.contrib.admin", "varchar", "disk", "vote", "confirmation", "stories", "newsroom", "shortcuts", "support", "clients", "types", "current_year", "docs", "changes", "questions", "filter", "django.contrib", "problems", "check", "metadata", "values", "migrations/0001_initial.py", "quotes", "times", "translations", "today", "sqlmigrate", "zones", "behaviors", "show", "stores", "/", "\\dt", "timezone", "input", "transaction", "tally", "tutorial", "model", "max_length", "character", "choice", "displays", "runserver", "checks", "n’t", "installed_apps", "sqlite", "case", "choice_text", "class", "number", "choices", "out", "bigint", "pollsconfig", "ones", "developers", "list", "bit", "question", "concepts", "interfaces", "app", "parts", "i", "datetimefield", "user", "part", "file", "operations", "installation", "account", "history", "traceback", "sports", "prompt", "representations", "names", "representation", "date", "set", "django.contrib.auth", "functionality", "foreignkey", "database", "relationship", "databases", "limit", "reference", "instance", "schema", "code", "road", "question.pub_date", "step", "timestamp", "django.contrib.contenttypes"], "type": "documentation"},
{"title": "Writing your first Django app, part 1", "url": "https://docs.djangoproject.com/en/5.1/intro/tutorial01/", "content": "Writing your first Django app, part 1 ¶ Let’s learn by example. Throughout this tutorial, we’ll walk you through the creation of a basic\npoll application. It’ll consist of two parts: A public site that lets people view polls and vote in them. An admin site that lets you add, change, and delete polls. We’ll assume you have Django installed already. You can\ntell Django is installed and which version by running the following command\nin a shell prompt (indicated by the $ prefix): /  $ python -m django --version ...\\> py -m django --version If Django is installed, you should see the version of your installation. If it\nisn’t, you’ll get an error telling “No module named django”. This tutorial is written for Django 5.1, which supports Python 3.10 and\nlater. If the Django version doesn’t match, you can refer to the tutorial for\nyour version of Django by using the version switcher at the bottom right corner\nof this page, or update Django to the newest version. If you’re using an older\nversion of Python, check What Python version can I use with Django? to find a compatible\nversion of Django. Where to get help: If you’re having trouble going through this tutorial, please head over to\nthe Getting Help section of the FAQ. Creating a project ¶ If this is your first time using Django, you’ll have to take care of some\ninitial setup. Namely, you’ll need to auto-generate some code that establishes a\nDjango project – a collection of settings for an instance of Django,\nincluding database configuration, Django-specific options and\napplication-specific settings. From the command line, cd into a directory where you’d like to store your\ncode and create a new directory named djangotutorial . (This directory name\ndoesn’t matter to Django; you can rename it to anything you like.) /  $ mkdir djangotutorial ...\\> mkdir djangotutorial Then, run the following command to bootstrap a new Django project: /  $ django-admin startproject mysite djangotutorial ...\\> django-admin startproject mysite djangotutorial This will create a project called mysite inside the djangotutorial directory. If it didn’t work, see Problems running django-admin . Note You’ll need to avoid naming projects after built-in Python or Django\ncomponents. In particular, this means you should avoid using names like django (which will conflict with Django itself) or test (which\nconflicts with a built-in Python package). Let’s look at what startproject created: djangotutorial/\n    manage.py\n    mysite/\n        __init__.py\n        settings.py\n        urls.py\n        asgi.py\n        wsgi.py These files are: manage.py : A command-line utility that lets you interact with this\nDjango project in various ways. You can read all the details about manage.py in django-admin and manage.py . mysite/ : A directory that is the actual Python package for your\nproject. Its name is the Python package name you’ll need to use to import\nanything inside it (e.g. mysite.urls ). mysite/__init__.py : An empty file that tells Python that this\ndirectory should be considered a Python package. If you’re a Python beginner,\nread more about packages in the official Python docs. mysite/settings.py : Settings/configuration for this Django\nproject. Django settings will tell you all about how settings\nwork. mysite/urls.py : The URL declarations for this Django project; a\n“table of contents” of your Django-powered site. You can read more about\nURLs in URL dispatcher . mysite/asgi.py : An entry-point for ASGI-compatible web servers to\nserve your project. See How to deploy with ASGI for more details. mysite/wsgi.py : An entry-point for WSGI-compatible web servers to\nserve your project. See How to deploy with WSGI for more details. The development server ¶ Let’s verify your Django project works. Change into the djangotutorial directory, if you haven’t already, and run the following commands: /  $ python manage.py runserver ...\\> py manage.py runserver You’ll see the following output on the command line: Performing system checks...\n\nSystem check identified no issues (0 silenced).\n\nYou have unapplied migrations; your app may not work properly until they are applied.\nRun 'python manage.py migrate' to apply them.\n\nDecember 17, 2024 - 15:50:53\nDjango version 5.1, using settings 'mysite.settings'\nStarting development server at http://127.0.0.1:8000/ Quit the server with CONTROL-C. Note Ignore the warning about unapplied database migrations for now; we’ll deal\nwith the database shortly. Now that the server’s running, visit http://127.0.0.1:8000/ with your web\nbrowser. You’ll see a “Congratulations!” page, with a rocket taking off.\nIt worked! You’ve started the Django development server, a lightweight web server written\npurely in Python. We’ve included this with Django so you can develop things\nrapidly, without having to deal with configuring a production server – such as\nApache – until you’re ready for production. Now’s a good time to note: don’t use this server in anything resembling a\nproduction environment. It’s intended only for use while developing. (We’re in\nthe business of making web frameworks, not web servers.) (To serve the site on a different port, see the runserver reference.) Automatic reloading of runserver The development server automatically reloads Python code for each request\nas needed. You don’t need to restart the server for code changes to take\neffect. However, some actions like adding files don’t trigger a restart,\nso you’ll have to restart the server in these cases. Creating the Polls app ¶ Now that your environment – a “project” – is set up, you’re set to start\ndoing work. Each application you write in Django consists of a Python package that follows\na certain convention. Django comes with a utility that automatically generates\nthe basic directory structure of an app, so you can focus on writing code\nrather than creating directories. Projects vs. apps What’s the difference between a project and an app? An app is a web\napplication that does something – e.g., a blog system, a database of\npublic records or a small poll app. A project is a collection of\nconfiguration and apps for a particular website. A project can contain\nmultiple apps. An app can be in multiple projects. Your apps can live anywhere in your Python path . In\nthis tutorial, we’ll create our poll app inside the djangotutorial folder. To create your app, make sure you’re in the same directory as manage.py and type this command: /  $ python manage.py startapp polls ...\\> py manage.py startapp polls That’ll create a directory polls , which is laid out like this: polls/\n    __init__.py\n    admin.py\n    apps.py\n    migrations/\n        __init__.py\n    models.py\n    tests.py\n    views.py This directory structure will house the poll application. Write your first view ¶ Let’s write the first view. Open the file polls/views.py and put the following Python code in it: polls/views.py ¶ from django.http import HttpResponse def index ( request ): return HttpResponse ( \"Hello, world. You're at the polls index.\" ) This is the most basic view possible in Django. To access it in a browser, we\nneed to map it to a URL - and for this we need to define a URL configuration,\nor “URLconf” for short. These URL configurations are defined inside each\nDjango app, and they are Python files named urls.py . To define a URLconf for the polls app, create a file polls/urls.py with the following content: polls/urls.py ¶ from django.urls import path from . import views urlpatterns = [ path ( \"\" , views . index , name = \"index\" ), ] Your app directory should now look like: polls/\n    __init__.py\n    admin.py\n    apps.py\n    migrations/\n        __init__.py\n    models.py\n    tests.py\n    urls.py\n    views.py The next step is to configure the global URLconf in the mysite project to\ninclude the URLconf defined in polls.urls . To do this, add an import for django.urls.include in mysite/urls.py and insert an include() in the urlpatterns list, so you have: mysite/urls.py ¶ from django.contrib import admin from django.urls import include , path urlpatterns = [ path ( \"polls/\" , include ( \"polls.urls\" )), path ( \"admin/\" , admin . site . urls ), ] The path() function expects at least two arguments: route and view .\nThe include() function allows referencing other URLconfs.\nWhenever Django encounters include() , it chops off whatever\npart of the URL matched up to that point and sends the remaining string to the\nincluded URLconf for further processing. The idea behind include() is to make it easy to\nplug-and-play URLs. Since polls are in their own URLconf\n( polls/urls.py ), they can be placed under “/polls/”, or under\n“/fun_polls/”, or under “/content/polls/”, or any other path root, and the\napp will still work. When to use include() You should always use include() when you include other URL patterns.\nThe only exception is admin.site.urls , which is a pre-built URLconf\nprovided by Django for the default admin site. You have now wired an index view into the URLconf. Verify it’s working with\nthe following command: /  $ python manage.py runserver ...\\> py manage.py runserver Go to http://localhost:8000/polls/ in your browser, and you should see the\ntext “ Hello, world. You’re at the polls index. ”, which you defined in the index view. Page not found? If you get an error page here, check that you’re going to http://localhost:8000/polls/ and not http://localhost:8000/ . When you’re comfortable with the basic request and response flow, read part 2 of this tutorial to start working with the\ndatabase.", "keywords": ["reloading", "urlconf", "website", "index", "py", "work", "browser", "frameworks", "http://localhost:8000/", "declarations", "error", "line", "url", "httpresponse", "migrations", "control", "restart", "\\", "changes", "/fun_polls/", "-", "django.contrib", "problems", "development", "mysite.urls", "servers", "creation", "help", "settings", "works", "time", "application", "exception", "prefix", "mysite", "records", "migrate", "port", "table", "check", "configurations", "asgi.py", "system", "directories", "commands", "views.py", "/polls/", "conflicts", "site", "files", "cases", "corner", "use", "utility", "import", "views", "ways", "difference", "urlpatterns", "project", "settings.py", "point", "startproject", "test", "section", "output", "idea", "¶", "default", "urls.py", "mysite.settings", "/", "web", "tutorial", "server", "apache", "polls.urls", "page", "change", "urls", "processing", "package", "command", "example", "runserver", "checks", "n’t", "convention", "production", "content", "people", "route", "business", "components", "auto", "request", "version", "include", "blog", "return", "function", "care", "string", "things", "list", "trouble", "details", "actions", "polls", "setup", "djangotutorial", "app", "view", "flow", "parts", "name", "poll", "options", "environment", "root", "init__.py", "warning", "part", "file", "world", "admin", "installation", "’s", "patterns", "python", "startapp", "response", "mkdir", "manage.py", "cd", "configuration", "beginner", "congratulations", "folder", "note", "prompt", "admin.site.urls", "quit", "faq", "projects", "names", "path", "django", "directory", "switcher", "asgi", "text", "structure", "module", "apps", "arguments", "urlconfs", "packages", "contents", "database", "december", "rocket", "django.urls", "reference", "instance", "effect", "code", "=", "wsgi", "django.urls.include", "collection", "http://127.0.0.1:8000/", "entry", "c.", "issues", "step"], "type": "documentation"},
{"title": "Quick install guide", "url": "https://docs.djangoproject.com/en/5.1/intro/install/", "content": "Quick install guide ¶ Before you can use Django, you’ll need to get it installed. We have a complete installation guide that covers all the\npossibilities; this guide will guide you to a minimal installation that’ll work\nwhile you walk through the introduction. Install Python ¶ Being a Python web framework, Django requires Python. See What Python version can I use with Django? for details. Python includes a lightweight\ndatabase called SQLite so you won’t need to set up a database just yet. Get the latest version of Python at https://www.python.org/downloads/ or with\nyour operating system’s package manager. You can verify that Python is installed by typing python from your shell;\nyou should see something like: Python 3.x.y [GCC 4.x] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> Set up a database ¶ This step is only necessary if you’d like to work with a “large” database engine\nlike PostgreSQL, MariaDB, MySQL, or Oracle. To install such a database, consult\nthe database installation information . Install Django ¶ You’ve got three options to install Django: Install an official release . This\nis the best approach for most users. Install a version of Django provided by your operating system\ndistribution . Install the latest development version . This option is for enthusiasts who want\nthe latest-and-greatest features and aren’t afraid of running brand new code.\nYou might encounter new bugs in the development version, but reporting them\nhelps the development of Django. Also, releases of third-party packages are\nless likely to be compatible with the development version than with the\nlatest stable release. Always refer to the documentation that corresponds to the\nversion of Django you’re using! If you do either of the first two steps, keep an eye out for parts of the\ndocumentation marked new in development version . That phrase flags\nfeatures that are only available in development versions of Django, and\nthey likely won’t work with an official release. Verifying ¶ To verify that Django can be seen by Python, type python from your shell.\nThen at the Python prompt, try to import Django: >>> import django\n>>> print(django.get_version())\n5.1 You may have another version of Django installed. That’s it! ¶ That’s it – you can now move onto the tutorial .", "keywords": ["gcc", "import", "releases", "information", "introduction", "version", "mysql", "prompt", "type", "brand", "install", "python", "django", "phrase", "versions", "¶", "engine", "option", "copyright", "eye", "web", "documentation", "framework", "approach", "distribution", "details", "development", "packages", "https://www.python.org/downloads/", "steps", "help", "tutorial", "database", "operating", "linux", "release", "oracle", "parts", "print(django.get_version", "package", "options", "party", "shell", "flags", "3.x.y", "features", "code", "credits", "bugs", "postgresql", "users", "system", "enthusiasts", "guide", "possibilities", "license", "installation", "step", "sqlite", "mariadb", "manager"], "type": "documentation"},
{"title": "Django at a glance", "url": "https://docs.djangoproject.com/en/5.1/intro/overview/", "content": "Django at a glance ¶ Because Django was developed in a fast-paced newsroom environment, it was\ndesigned to make common web development tasks fast and easy. Here’s an informal\noverview of how to write a database-driven web app with Django. The goal of this document is to give you enough technical specifics to\nunderstand how Django works, but this isn’t intended to be a tutorial or\nreference – but we’ve got both! When you’re ready to start a project, you can start with the tutorial or dive right into more\ndetailed documentation . Design your model ¶ Although you can use Django without a database, it comes with an object-relational mapper in which you describe your database layout in Python\ncode. The data-model syntax offers many rich ways of\nrepresenting your models – so far, it’s been solving many years’ worth of\ndatabase-schema problems. Here’s a quick example: news/models.py ¶ from django.db import models class Reporter ( models . Model ): full_name = models . CharField ( max_length = 70 ) def __str__ ( self ): return self . full_name class Article ( models . Model ): pub_date = models . DateField () headline = models . CharField ( max_length = 200 ) content = models . TextField () reporter = models . ForeignKey ( Reporter , on_delete = models . CASCADE ) def __str__ ( self ): return self . headline Install it ¶ Next, run the Django command-line utilities to create the database tables\nautomatically: /  $ python manage.py makemigrations $ python manage.py migrate ...\\> py manage.py makemigrations ...\\> py manage.py migrate The makemigrations command looks at all your available models and\ncreates migrations for whichever tables don’t already exist. migrate runs the migrations and creates tables in your database, as well as optionally\nproviding much richer schema control . Enjoy the free API ¶ With that, you’ve got a free, and rich, Python API to access your data. The API is created on the fly, no code generation\nnecessary: # Import the models we created from our \"news\" app >>> from news.models import Article , Reporter # No reporters are in the system yet. >>> Reporter . objects . all () <QuerySet []> # Create a new Reporter. >>> r = Reporter ( full_name = \"John Smith\" ) # Save the object into the database. You have to call save() explicitly. >>> r . save () # Now it has an ID. >>> r . id 1 # Now the new reporter is in the database. >>> Reporter . objects . all () <QuerySet [<Reporter: John Smith>]> # Fields are represented as attributes on the Python object. >>> r . full_name 'John Smith' # Django provides a rich database lookup API. >>> Reporter . objects . get ( id = 1 ) <Reporter: John Smith> >>> Reporter . objects . get ( full_name__startswith = \"John\" ) <Reporter: John Smith> >>> Reporter . objects . get ( full_name__contains = \"mith\" ) <Reporter: John Smith> >>> Reporter . objects . get ( id = 2 ) Traceback (most recent call last): ... DoesNotExist : Reporter matching query does not exist. # Create an article. >>> from datetime import date >>> a = Article ( ... pub_date = date . today (), headline = \"Django is cool\" , content = \"Yeah.\" , reporter = r ... ) >>> a . save () # Now the article is in the database. >>> Article . objects . all () <QuerySet [<Article: Django is cool>]> # Article objects get API access to related Reporter objects. >>> r = a . reporter >>> r . full_name 'John Smith' # And vice versa: Reporter objects get API access to Article objects. >>> r . article_set . all () <QuerySet [<Article: Django is cool>]> # The API follows relationships as far as you need, performing efficient # JOINs for you behind the scenes. # This finds all articles by a reporter whose name starts with \"John\". >>> Article . objects . filter ( reporter__full_name__startswith = \"John\" ) <QuerySet [<Article: Django is cool>]> # Change an object by altering its attributes and calling save(). >>> r . full_name = \"Billy Goat\" >>> r . save () # Delete an object with delete(). >>> r . delete () A dynamic admin interface: it’s not just scaffolding – it’s the whole house ¶ Once your models are defined, Django can automatically create a professional,\nproduction ready administrative interface –\na website that lets authenticated users add, change and delete objects. The\nonly step required is to register your model in the admin site: news/models.py ¶ from django.db import models class Article ( models . Model ): pub_date = models . DateField () headline = models . CharField ( max_length = 200 ) content = models . TextField () reporter = models . ForeignKey ( Reporter , on_delete = models . CASCADE ) news/admin.py ¶ from django.contrib import admin from . import models admin . site . register ( models . Article ) The philosophy here is that your site is edited by a staff, or a client, or\nmaybe just you – and you don’t want to have to deal with creating backend\ninterfaces only to manage content. One typical workflow in creating Django apps is to create models and get the\nadmin sites up and running as fast as possible, so your staff (or clients) can\nstart populating data. Then, develop the way data is presented to the public. Design your URLs ¶ A clean, elegant URL scheme is an important detail in a high-quality web\napplication. Django encourages beautiful URL design and doesn’t put any cruft\nin URLs, like .php or .asp . To design URLs for an app, you create a Python module called a URLconf . A table of contents for your app, it contains a mapping\nbetween URL patterns and Python callback functions. URLconfs also serve to\ndecouple URLs from Python code. Here’s what a URLconf might look like for the Reporter / Article example above: news/urls.py ¶ from django.urls import path from . import views urlpatterns = [ path ( \"articles/<int:year>/\" , views . year_archive ), path ( \"articles/<int:year>/<int:month>/\" , views . month_archive ), path ( \"articles/<int:year>/<int:month>/<int:pk>/\" , views . article_detail ), ] The code above maps URL paths to Python callback functions (“views”). The path\nstrings use parameter tags to “capture” values from the URLs. When a user\nrequests a page, Django runs through each path, in order, and stops at the\nfirst one that matches the requested URL. (If none of them matches, Django\ncalls a special-case 404 view.) This is blazingly fast, because the paths are\ncompiled into regular expressions at load time. Once one of the URL patterns matches, Django calls the given view, which is a\nPython function. Each view gets passed a request object – which contains\nrequest metadata – and the values captured in the pattern. For example, if a user requested the URL “/articles/2005/05/39323/”, Django\nwould call the function news.views.article_detail(request, year=2005, month=5, pk=39323) . Write your views ¶ Each view is responsible for doing one of two things: Returning an HttpResponse object containing the content for the\nrequested page, or raising an exception such as Http404 .\nThe rest is up to you. Generally, a view retrieves data according to the parameters, loads a template\nand renders the template with the retrieved data. Here’s an example view for year_archive from above: news/views.py ¶ from django.shortcuts import render from .models import Article def year_archive ( request , year ): a_list = Article . objects . filter ( pub_date__year = year ) context = { \"year\" : year , \"article_list\" : a_list } return render ( request , \"news/year_archive.html\" , context ) This example uses Django’s template system , which has\nseveral powerful features but strives to stay simple enough for non-programmers\nto use. Design your templates ¶ The code above loads the news/year_archive.html template. Django has a template search path, which allows you to minimize redundancy among\ntemplates. In your Django settings, you specify a list of directories to check\nfor templates with DIRS . If a template doesn’t exist\nin the first directory, it checks the second, and so on. Let’s say the news/year_archive.html template was found. Here’s what that\nmight look like: news/templates/news/year_archive.html ¶ {% extends \"base.html\" %} {% block title %} Articles for {{ year }}{% endblock %} {% block content %} < h1 > Articles for {{ year }} </ h1 > {% for article in article_list %} < p > {{ article.headline }} </ p > < p > By {{ article.reporter.full_name }} </ p > < p > Published {{ article.pub_date | date :\"F j, Y\" }} </ p > {% endfor %} {% endblock %} Variables are surrounded by double-curly braces. {{ article.headline }} means “Output the value of the article’s headline attribute.” But dots aren’t\nused only for attribute lookup. They also can do dictionary-key lookup, index\nlookup and function calls. Note {{ article.pub_date|date:\"F j, Y\" }} uses a Unix-style “pipe” (the “|”\ncharacter). This is called a template filter, and it’s a way to filter the value\nof a variable. In this case, the date filter formats a Python datetime object in\nthe given format (as found in PHP’s date function). You can chain together as many filters as you’d like. You can write custom\ntemplate filters . You can write custom template tags , which run custom\nPython code behind the scenes. Finally, Django uses the concept of “template inheritance”. That’s what the {% extends \"base.html\" %} does. It means “First load the template called\n‘base’, which has defined a bunch of blocks, and fill the blocks with the\nfollowing blocks.” In short, that lets you dramatically cut down on redundancy\nin templates: each template has to define only what’s unique to that template. Here’s what the “base.html” template, including the use of static files , might look like: templates/base.html ¶ {% load static %} < html lang = \"en\" > < head > < title > {% block title %}{% endblock %} </ title > </ head > < body > < img src = \" {% static 'images/sitelogo.png' %} \" alt = \"Logo\" > {% block content %}{% endblock %} </ body > </ html > Simplistically, it defines the look-and-feel of the site (with the site’s logo),\nand provides “holes” for child templates to fill. This means that a site redesign\ncan be done by changing a single file – the base template. It also lets you create multiple versions of a site, with different base\ntemplates, while reusing child templates. Django’s creators have used this\ntechnique to create strikingly different mobile versions of sites by only\ncreating a new base template. Note that you don’t have to use Django’s template system if you prefer another\nsystem. While Django’s template system is particularly well-integrated with\nDjango’s model layer, nothing forces you to use it. For that matter, you don’t\nhave to use Django’s database API, either. You can use another database\nabstraction layer, you can read XML files, you can read files off disk, or\nanything you want. Each piece of Django – models, views, templates – is\ndecoupled from the next. This is just the surface ¶ This has been only a quick overview of Django’s functionality. Some more useful\nfeatures: A caching framework that integrates with memcached\nor other backends. A syndication framework that lets you\ncreate RSS and Atom feeds by writing a small Python class. More attractive automatically-generated admin features – this overview\nbarely scratched the surface. The next steps are for you to download Django , read the tutorial and join the community . Thanks for your interest!", "keywords": ["urlconf", "matches", "disk", "website", "worth", "index", "base.html", "py", "interface", "logo", "doesnotexist", "variable", "line", "newsroom", "specifics", "design", "url", "httpresponse", "template", "migrations", "control", "mapper", "reporter", "clients", "%", "p", "tasks", "order", "article.reporter.full_name", "templates", "documentation", "filter", "django.contrib", "development", "problems", "-", "style", "scenes", "id", "month>/<int", "settings", "time", "billy", "application", "exception", "overview", "cascade", "glance", "migrate", "queryset", "delete", "table", "pipe", "month=5", "php", "system", "metadata", "maps", "views.py", "values", "rest", "directories", "site", "concept", "str", "d", "files", "query", "generation", "redundancy", "use", "interest", "import", "views", "ways", "datefield", "pk=39323", "j", "feel", "project", "paths", "article", "john", "today", "#", "philosophy", "load", "dots", "fields", "way", "versions", "¶", "filters", "surface", "src", "piece", "atom", "custom", "web", "/", "f", "img", "client", "fly", "rss", "year_archive", "mith", "tutorial", "model", "layout", "max_length", "workflow", "page", "change", "urls", "none", "news.views.article_detail(request", "sites", "block", "y", "callback", "variables", "character", "format", "base", "access", "render", "redesign", "command", "reporters", "example", ">", "users", "house", "n’t", "year", "calls", "article.pub_date|date:\"f", "abstraction", "functions", "value", "full_name", "production", "syndication", "content", "years", "self", "month>/", "unix", "case", "class", "makemigrations", "community", "bunch", "xml", "request", "programmers", "inheritance", "images", "return", "save", "html", "tables", "mapping", "public", "attribute", "function", "holes", "things", "list", "steps", "data", "relational", "staff", "interfaces", "app", "matching", "view", "cruft", "a_list", "articles", "i", "object", "pub_date", "joins", "environment", "relationships", "name", "user", "pattern", "body", "goat", "file", "attributes", "admin", "quality", "patterns", "python", "endfor", "charfield", "http404", "r", "year=2005", "child", "matter", "traceback", "formats", "manage.py", "articles/<int", "braces", "api", "lookup", "full_name__contains", "year>/", "path", "technique", "django", "thanks", "creators", "|", "smith", "expressions", "directory", "lang", "h1", "parameter", "dirs", "document", "tags", "syntax", "date", "curly", "framework", "module", "apps", "backends", "goal", "news.models", "textfield", "contents", "urlconfs", "strings", "head", "functionality", "requests", "foreignkey", "database", "search", "context", "headline", "django.urls", "non", "reference", "year>/<int", "utilities", "schema", "code", "models", "=", "features", "detail", "endblock", "layer", "objects", "news", "parameters", "blocks", "scheme", ".models", "step", "title", "call"], "type": "documentation"},
{"title": "Getting started", "url": "https://docs.djangoproject.com/en/5.1/intro/", "content": "Getting started ¶ New to Django? Or to web development in general? Well, you came to the right\nplace: read this material to quickly get up and running. Django at a glance Quick install guide Writing your first Django app, part 1 Writing your first Django app, part 2 Writing your first Django app, part 3 Writing your first Django app, part 4 Writing your first Django app, part 5 Writing your first Django app, part 6 Writing your first Django app, part 7 Writing your first Django app, part 8 Advanced tutorial: How to write reusable apps What to read next Writing your first contribution for Django See also If you’re new to Python , you might want to start by getting an idea of what\nthe language is like. Django is 100% Python, so if you’ve got minimal\ncomfort with Python you’ll probably get a lot more out of Django. If you’re new to programming entirely, you might want to start with this list of Python resources for non-programmers If you already know a few other languages and want to get up to speed with\nPython quickly, we recommend referring the official Python documentation , which provides comprehensive and authoritative\ninformation about the language, as well as links to other resources such as\na list of books about Python .", "keywords": ["new", "information", "material", "programmers", "languages", "comfort", "install", "idea", "django", "contribution", "%", "web", "lot", "list", "-", "development", "place", "apps", "documentation", "books", "tutorial", "app", "glance", "quick", "non", "resources", "part", "links", "guide", "language", "python"], "type": "documentation"},
{"title": "Writing your first Django app, part 7", "url": "https://docs.djangoproject.com/en/5.1/intro/tutorial07/", "content": "Writing your first Django app, part 7 ¶ This tutorial begins where Tutorial 6 left off. We’re\ncontinuing the web-poll application and will focus on customizing Django’s\nautomatically-generated admin site that we first explored in Tutorial 2 . Where to get help: If you’re having trouble going through this tutorial, please head over to\nthe Getting Help section of the FAQ. Customize the admin form ¶ By registering the Question model with admin.site.register(Question) ,\nDjango was able to construct a default form representation. Often, you’ll want\nto customize how the admin form looks and works. You’ll do this by telling\nDjango the options you want when you register the object. Let’s see how this works by reordering the fields on the edit form. Replace\nthe admin.site.register(Question) line with: polls/admin.py ¶ from django.contrib import admin from .models import Question class QuestionAdmin ( admin . ModelAdmin ): fields = [ \"pub_date\" , \"question_text\" ] admin . site . register ( Question , QuestionAdmin ) You’ll follow this pattern – create a model admin class, then pass it as the\nsecond argument to admin.site.register() – any time you need to change the\nadmin options for a model. This particular change above makes the “Publication date” come before the\n“Question” field: This isn’t impressive with only two fields, but for admin forms with dozens\nof fields, choosing an intuitive order is an important usability detail. And speaking of forms with dozens of fields, you might want to split the form\nup into fieldsets: polls/admin.py ¶ from django.contrib import admin from .models import Question class QuestionAdmin ( admin . ModelAdmin ): fieldsets = [ ( None , { \"fields\" : [ \"question_text\" ]}), ( \"Date information\" , { \"fields\" : [ \"pub_date\" ]}), ] admin . site . register ( Question , QuestionAdmin ) The first element of each tuple in fieldsets is the title of the fieldset.\nHere’s what our form looks like now: Adding related objects ¶ OK, we have our Question admin page, but a Question has multiple Choice s, and the admin page doesn’t display choices. Yet. There are two ways to solve this problem. The first is to register Choice with the admin just as we did with Question : polls/admin.py ¶ from django.contrib import admin from .models import Choice , Question # ... admin . site . register ( Choice ) Now “Choices” is an available option in the Django admin. The “Add choice” form\nlooks like this: In that form, the “Question” field is a select box containing every question in the\ndatabase. Django knows that a ForeignKey should be\nrepresented in the admin as a <select> box. In our case, only one question\nexists at this point. Also note the “Add another question” link next to “Question.” Every object with\na ForeignKey relationship to another gets this for free. When you click\n“Add another question”, you’ll get a popup window with the “Add question” form.\nIf you add a question in that window and click “Save”, Django will save the\nquestion to the database and dynamically add it as the selected choice on the\n“Add choice” form you’re looking at. But, really, this is an inefficient way of adding Choice objects to the system.\nIt’d be better if you could add a bunch of Choices directly when you create the Question object. Let’s make that happen. Remove the register() call for the Choice model. Then, edit the Question registration code to read: polls/admin.py ¶ from django.contrib import admin from .models import Choice , Question class ChoiceInline ( admin . StackedInline ): model = Choice extra = 3 class QuestionAdmin ( admin . ModelAdmin ): fieldsets = [ ( None , { \"fields\" : [ \"question_text\" ]}), ( \"Date information\" , { \"fields\" : [ \"pub_date\" ], \"classes\" : [ \"collapse\" ]}), ] inlines = [ ChoiceInline ] admin . site . register ( Question , QuestionAdmin ) This tells Django: “ Choice objects are edited on the Question admin page. By\ndefault, provide enough fields for 3 choices.” Load the “Add question” page to see how that looks: It works like this: There are three slots for related Choices – as specified\nby extra – and each time you come back to the “Change” page for an\nalready-created object, you get another three extra slots. At the end of the three current slots you will find an “Add another Choice”\nlink.  If you click on it, a new slot will be added. If you want to remove the\nadded slot, you can click on the X to the top right of the added slot. This\nimage shows an added slot: One small problem, though. It takes a lot of screen space to display all the\nfields for entering related Choice objects. For that reason, Django offers a\ntabular way of displaying inline related objects. To use it, change the ChoiceInline declaration to read: polls/admin.py ¶ class ChoiceInline ( admin . TabularInline ): ... With that TabularInline (instead of StackedInline ), the\nrelated objects are displayed in a more compact, table-based format: Note that there is an extra “Delete?” column that allows removing rows added\nusing the “Add another Choice” button and rows that have already been saved. Customize the admin change list ¶ Now that the Question admin page is looking good, let’s make some tweaks to the\n“change list” page – the one that displays all the questions in the system. Here’s what it looks like at this point: By default, Django displays the str() of each object. But sometimes it’d be\nmore helpful if we could display individual fields. To do that, use the list_display admin option, which is a\nlist of field names to display, as columns, on the change list page for the\nobject: polls/admin.py ¶ class QuestionAdmin ( admin . ModelAdmin ): # ... list_display = [ \"question_text\" , \"pub_date\" ] For good measure, let’s also include the was_published_recently() method\nfrom Tutorial 2 : polls/admin.py ¶ class QuestionAdmin ( admin . ModelAdmin ): # ... list_display = [ \"question_text\" , \"pub_date\" , \"was_published_recently\" ] Now the question change list page looks like this: You can click on the column headers to sort by those values – except in the\ncase of the was_published_recently header, because sorting by the output\nof an arbitrary method is not supported. Also note that the column header for was_published_recently is, by default, the name of the method (with\nunderscores replaced with spaces), and that each line contains the string\nrepresentation of the output. You can improve that by using the display() decorator on that method (extending the polls/models.py file that was\ncreated in Tutorial 2 ), as follows: polls/models.py ¶ from django.contrib import admin class Question ( models . Model ): # ... @admin . display ( boolean = True , ordering = \"pub_date\" , description = \"Published recently?\" , ) def was_published_recently ( self ): now = timezone . now () return now - datetime . timedelta ( days = 1 ) <= self . pub_date <= now For more information on the properties configurable via the decorator, see list_display . Edit your polls/admin.py file again and add an improvement to the Question change list page: filters using the list_filter . Add the following line to QuestionAdmin : list_filter = [ \"pub_date\" ] That adds a “Filter” sidebar that lets people filter the change list by the pub_date field: The type of filter displayed depends on the type of field you’re filtering on.\nBecause pub_date is a DateTimeField , Django\nknows to give appropriate filter options: “Any date”, “Today”, “Past 7 days”,\n“This month”, “This year”. This is shaping up well. Let’s add some search capability: search_fields = [ \"question_text\" ] That adds a search box at the top of the change list. When somebody enters\nsearch terms, Django will search the question_text field. You can use as many\nfields as you’d like – although because it uses a LIKE query behind the\nscenes, limiting the number of search fields to a reasonable number will make\nit easier for your database to do the search. Now’s also a good time to note that change lists give you free pagination. The\ndefault is to display 100 items per page. Change list pagination , search boxes , filters , date-hierarchies , and column-header-ordering all work together like you think they should. Customize the admin look and feel ¶ Clearly, having “Django administration” at the top of each admin page is\nridiculous. It’s just placeholder text. You can change it, though, using Django’s template system. The Django admin is\npowered by Django itself, and its interfaces use Django’s own template system. Customizing your project’s templates ¶ Create a templates directory in your djangotutorial directory.\nTemplates can live anywhere on your filesystem that Django can access. (Django\nruns as whatever user your server runs.) However, keeping your templates within\nthe project is a good convention to follow. Open your settings file ( mysite/settings.py , remember) and add a DIRS option in the TEMPLATES setting: mysite/settings.py ¶ TEMPLATES = [ { \"BACKEND\" : \"django.template.backends.django.DjangoTemplates\" , \"DIRS\" : [ BASE_DIR / \"templates\" ], \"APP_DIRS\" : True , \"OPTIONS\" : { \"context_processors\" : [ \"django.template.context_processors.debug\" , \"django.template.context_processors.request\" , \"django.contrib.auth.context_processors.auth\" , \"django.contrib.messages.context_processors.messages\" , ], }, }, ] DIRS is a list of filesystem directories to check\nwhen loading Django templates; it’s a search path. Organizing templates Just like the static files, we could have all our templates together, in\none big templates directory, and it would work perfectly well. However,\ntemplates that belong to a particular application should be placed in that\napplication’s template directory (e.g. polls/templates ) rather than the\nproject’s ( templates ). We’ll discuss in more detail in the reusable apps tutorial why we do this. Now create a directory called admin inside templates , and copy the\ntemplate admin/base_site.html from within the default Django admin\ntemplate directory in the source code of Django itself\n( django/contrib/admin/templates ) into that directory. Where are the Django source files? If you have difficulty finding where the Django source files are located\non your system, run the following command: /  $ python -c \"import django; print(django.__path__)\" ...\\> py -c \"import django; print(django.__path__)\" Then, edit the file and replace {{ site_header|default:_('Django administration') }} (including the curly\nbraces) with your own site’s name as you see fit. You should end up with\na section of code like: {% block branding %} < div id = \"site-name\" >< a href = \" {% url 'admin:index' %} \" > Polls Administration </ a ></ div > {% if user.is_anonymous %} {% include \"admin/color_theme_toggle.html\" %} {% endif %} {% endblock %} We use this approach to teach you how to override templates. In an actual\nproject, you would probably use\nthe django.contrib.admin.AdminSite.site_header attribute to more easily\nmake this particular customization. This template file contains lots of text like {% block branding %} and {{ title }} . The {% and {{ tags are part of Django’s\ntemplate language. When Django renders admin/base_site.html , this\ntemplate language will be evaluated to produce the final HTML page, just like\nwe saw in Tutorial 3 . Note that any of Django’s default admin templates can be overridden. To\noverride a template, do the same thing you did with base_site.html – copy\nit from the default directory into your custom directory, and make changes. Customizing your application’s templates ¶ Astute readers will ask: But if DIRS was empty by\ndefault, how was Django finding the default admin templates? The answer is\nthat, since APP_DIRS is set to True ,\nDjango automatically looks for a templates/ subdirectory within each\napplication package, for use as a fallback (don’t forget that django.contrib.admin is an application). Our poll application is not very complex and doesn’t need custom admin\ntemplates. But if it grew more sophisticated and required modification of\nDjango’s standard admin templates for some of its functionality, it would be\nmore sensible to modify the application’s templates, rather than those in the project . That way, you could include the polls application in any new project\nand be assured that it would find the custom templates it needed. See the template loading documentation for more\ninformation about how Django finds its templates. Customize the admin index page ¶ On a similar note, you might want to customize the look and feel of the Django\nadmin index page. By default, it displays all the apps in INSTALLED_APPS that have been\nregistered with the admin application, in alphabetical order. You may want to\nmake significant changes to the layout. After all, the index is probably the\nmost important page of the admin, and it should be easy to use. The template to customize is admin/index.html . (Do the same as with admin/base_site.html in the previous section – copy it from the default\ndirectory to your custom template directory). Edit the file, and you’ll see it\nuses a template variable called app_list . That variable contains every\ninstalled Django app. Instead of using that, you can hard-code links to\nobject-specific admin pages in whatever way you think is best. When you’re comfortable with the admin, read part 8 of this\ntutorial to learn how to use third-party packages.", "keywords": ["lists", "edit", "index", "django.template.context_processors.request", "column", "py", "work", "variable", "app_list", "type", "line", "button", "template", "url", "app_dirs", "image", "django.contrib.auth.context_processors.auth", "fallback", "admin.site.register(question", "register", "measure", "rows", "%", "order", "\\", "templates", "changes", "questions", "django.contrib", "filter", "documentation", "question_text", "scenes", "lots", "administration", "help", "settings", "works", "reason", "time", "declaration", "tabularinline", "application", "difficulty", "answer", "classes", "mysite", "stackedinline", "method", "party", "delete", "table", "slots", "customization", "usability", "system", "directories", "values", "site", "list_filter", "str", "d", "files", "query", "use", "import", "problem", "right", "registration", "ways", "information", "items", "project", "today", "#", "settings.py", "point", "output", "fields", "section", "way", "¶", "spaces", "default", "filters", "option", "fieldsets", "list_display", "decorator", "web", "/", "custom", "fieldset", "pagination", "tutorial", "model", "improvement", "terms", "none", "page", "change", "server", "choice", "adminsite.site_header", "layout", "block", "format", "package", "contrib", "top", "command", "base_site.html", "n’t", "year", "timedelta", "djangotemplates", "convention", "backend", "self", "hierarchies", "end", "boxes", "people", "source", "case", "argument", "readers", "class", "number", "bunch", "choices", "filesystem", "placeholder", "tuple", "subdirectory", "publication", "save", "columns", "html", "attribute", "thing", "string", "list", "month", "trouble", "properties", "x", "question", "screen", "href", "questionadmin", "admin.site.register", "django.contrib.messages.context_processors.messages", "polls", "element", "interfaces", "app", "runs", "form", "name", "object", "options", "pattern", "pub_date", "sidebar", "datetimefield", "user", "poll", "header", "part", "file", "slot", "one", "admin", "window", "space", "python", "link", "context_processors", "color_theme_toggle.html", "search_fields", "div", "description", "s", "braces", "ok", "box", "tweaks", "note", "faq", "path", "names", "django", "days", "modification", "directory", "look", "display", "dirs", "tags", "representation", "date", "lot", "text", "curly", "approach", "field", "apps", "choiceinline", "functionality", "packages", "dozens", "capability", "foreignkey", "database", "search", "relationship", "astute", "headers", "forms", "code", "=", "models", "site_header|default:_('django", "detail", "underscores", "endblock", "objects", "modeladmin", "links", "pages", "language", ".models", ".", "title", "django.contrib.admin"], "type": "documentation"},
{"title": "Writing your first Django app, part 6", "url": "https://docs.djangoproject.com/en/5.1/intro/tutorial06/", "content": "Writing your first Django app, part 6 ¶ This tutorial begins where Tutorial 5 left off.\nWe’ve built a tested web-poll application, and we’ll now add a stylesheet and\nan image. Aside from the HTML generated by the server, web applications generally need\nto serve additional files — such as images, JavaScript, or CSS — necessary to\nrender the complete web page. In Django, we refer to these files as “static\nfiles”. For small projects, this isn’t a big deal, because you can keep the static\nfiles somewhere your web server can find it. However, in bigger projects –\nespecially those comprised of multiple apps – dealing with the multiple sets\nof static files provided by each application starts to get tricky. That’s what django.contrib.staticfiles is for: it collects static files\nfrom each of your applications (and any other places you specify) into a\nsingle location that can easily be served in production. Where to get help: If you’re having trouble going through this tutorial, please head over to\nthe Getting Help section of the FAQ. Customize your app’s look and feel ¶ First, create a directory called static in your polls directory. Django\nwill look for static files there, similarly to how Django finds templates\ninside polls/templates/ . Django’s STATICFILES_FINDERS setting contains a list\nof finders that know how to discover static files from various\nsources. One of the defaults is AppDirectoriesFinder which\nlooks for a “static” subdirectory in each of the INSTALLED_APPS , like the one in polls we just created. The admin\nsite uses the same directory structure for its static files. Within the static directory you have just created, create another directory\ncalled polls and within that create a file called style.css . In other\nwords, your stylesheet should be at polls/static/polls/style.css . Because\nof how the AppDirectoriesFinder staticfile finder works, you can refer to\nthis static file in Django as polls/style.css , similar to how you reference\nthe path for templates. Static file namespacing Just like templates, we might be able to get away with putting our static\nfiles directly in polls/static (rather than creating another polls subdirectory), but it would actually be a bad idea. Django will choose the\nfirst static file it finds whose name matches, and if you had a static file\nwith the same name in a different application, Django would be unable to\ndistinguish between them. We need to be able to point Django at the right\none, and the best way to ensure this is by namespacing them. That is, by\nputting those static files inside another directory named for the\napplication itself. Put the following code in that stylesheet ( polls/static/polls/style.css ): polls/static/polls/style.css ¶ li a { color : green ; } Next, add the following at the top of polls/templates/polls/index.html : polls/templates/polls/index.html ¶ {% load static %} < link rel = \"stylesheet\" href = \" {% static 'polls/style.css' %} \" > The {% static %} template tag generates the absolute URL of static files. That’s all you need to do for development. Start the server (or restart it if it’s already running): /  $ python manage.py runserver ...\\> py manage.py runserver Reload http://localhost:8000/polls/ and you should see that the question\nlinks are green (Django style!) which means that your stylesheet was properly\nloaded. Adding a background-image ¶ Next, we’ll create a subdirectory for images. Create an images subdirectory\nin the polls/static/polls/ directory. Inside this directory, add any image\nfile that you’d like to use as a background. For the purposes of this tutorial,\nwe’re using a file named background.png , which will have the full path polls/static/polls/images/background.png . Then, add a reference to your image in your stylesheet\n( polls/static/polls/style.css ): polls/static/polls/style.css ¶ body { background : white url ( \"images/background.png\" ) no-repeat ; } Reload http://localhost:8000/polls/ and you should see the background\nloaded in the top left of the screen. Warning The {% static %} template tag is not available for use in static files\nwhich aren’t generated by Django, like your stylesheet. You should always\nuse relative paths to link your static files between each other,\nbecause then you can change STATIC_URL (used by the static template tag to generate its URLs) without having to modify\na bunch of paths in your static files as well. These are the basics . For more details on settings and other bits included\nwith the framework see the static files howto and the staticfiles reference . Deploying\nstatic files discusses how to use static\nfiles on a real server. When you’re comfortable with the static files, read part 7 of this\ntutorial to learn how to customize Django’s\nautomatically-generated admin site.", "keywords": ["matches", "py", "template", "url", "image", "staticfiles", "finder", "%", "static", "background", "templates", "development", "style", "places", "help", "settings", "sets", "application", "green", "site", "files", "css", "use", "following", "left", "paths", "appdirectoriesfinder", "load", "next", "section", "idea", "way", "¶", "static_url", "web", "/", "location", "tutorial", "server", "page", "urls", "finders", "purposes", "top", "javascript", "n’t", "basics", "production", "stylesheet", "color", "howto", "words", "bunch", "applications", "images", "subdirectory", "html", "li", "list", "trouble", "href", "details", "question", "screen", "polls", "app", "name", "body", "bits", "reload", "part", "file", "sources", "admin", "link", "manage.py", "faq", "projects", "path", "django", "tag", "directory", "look", "index.html", "framework", "structure", "apps", "style.css", "deal", "repeat", "reference", "code", "=", "links", "defaults", "rel"], "type": "documentation"},
{"title": "Writing your first Django app, part 5", "url": "https://docs.djangoproject.com/en/5.1/intro/tutorial05/", "content": "Writing your first Django app, part 5 ¶ This tutorial begins where Tutorial 4 left off.\nWe’ve built a web-poll application, and we’ll now create some automated tests\nfor it. Where to get help: If you’re having trouble going through this tutorial, please head over to\nthe Getting Help section of the FAQ. Introducing automated testing ¶ What are automated tests? ¶ Tests are routines that check the operation of your code. Testing operates at different levels. Some tests might apply to a tiny detail\n( does a particular model method return values as expected? ) while others\nexamine the overall operation of the software ( does a sequence of user inputs\non the site produce the desired result? ). That’s no different from the kind of\ntesting you did earlier in Tutorial 2 , using the shell to examine the behavior of a method, or running the\napplication and entering data to check how it behaves. What’s different in automated tests is that the testing work is done for\nyou by the system. You create a set of tests once, and then as you make changes\nto your app, you can check that your code still works as you originally\nintended, without having to perform time consuming manual testing. Why you need to create tests ¶ So why create tests, and why now? You may feel that you have quite enough on your plate just learning\nPython/Django, and having yet another thing to learn and do may seem\noverwhelming and perhaps unnecessary. After all, our polls application is\nworking quite happily now; going through the trouble of creating automated\ntests is not going to make it work any better. If creating the polls\napplication is the last bit of Django programming you will ever do, then true,\nyou don’t need to know how to create automated tests. But, if that’s not the\ncase, now is an excellent time to learn. Tests will save you time ¶ Up to a certain point, ‘checking that it seems to work’ will be a satisfactory\ntest. In a more sophisticated application, you might have dozens of complex\ninteractions between components. A change in any of those components could have unexpected consequences on the\napplication’s behavior. Checking that it still ‘seems to work’ could mean\nrunning through your code’s functionality with twenty different variations of\nyour test data to make sure you haven’t broken something - not a good use\nof your time. That’s especially true when automated tests could do this for you in seconds.\nIf something’s gone wrong, tests will also assist in identifying the code\nthat’s causing the unexpected behavior. Sometimes it may seem a chore to tear yourself away from your productive,\ncreative programming work to face the unglamorous and unexciting business\nof writing tests, particularly when you know your code is working properly. However, the task of writing tests is a lot more fulfilling than spending hours\ntesting your application manually or trying to identify the cause of a\nnewly-introduced problem. Tests don’t just identify problems, they prevent them ¶ It’s a mistake to think of tests merely as a negative aspect of development. Without tests, the purpose or intended behavior of an application might be\nrather opaque. Even when it’s your own code, you will sometimes find yourself\npoking around in it trying to find out what exactly it’s doing. Tests change that; they light up your code from the inside, and when something\ngoes wrong, they focus light on the part that has gone wrong - even if you\nhadn’t even realized it had gone wrong . Tests make your code more attractive ¶ You might have created a brilliant piece of software, but you will find that\nmany other developers will refuse to look at it because it lacks tests; without\ntests, they won’t trust it. Jacob Kaplan-Moss, one of Django’s original\ndevelopers, says “Code without tests is broken by design.” That other developers want to see tests in your software before they take it\nseriously is yet another reason for you to start writing tests. Tests help teams work together ¶ The previous points are written from the point of view of a single developer\nmaintaining an application. Complex applications will be maintained by teams.\nTests guarantee that colleagues don’t inadvertently break your code (and that\nyou don’t break theirs without knowing). If you want to make a living as a\nDjango programmer, you must be good at writing tests! Basic testing strategies ¶ There are many ways to approach writing tests. Some programmers follow a discipline called “ test-driven development ”; they\nactually write their tests before they write their code. This might seem\ncounterintuitive, but in fact it’s similar to what most people will often do\nanyway: they describe a problem, then create some code to solve it. Test-driven\ndevelopment formalizes the problem in a Python test case. More often, a newcomer to testing will create some code and later decide that\nit should have some tests. Perhaps it would have been better to write some\ntests earlier, but it’s never too late to get started. Sometimes it’s difficult to figure out where to get started with writing tests.\nIf you have written several thousand lines of Python, choosing something to\ntest might not be easy. In such a case, it’s fruitful to write your first test\nthe next time you make a change, either when you add a new feature or fix a bug. So let’s do that right away. Writing our first test ¶ We identify a bug ¶ Fortunately, there’s a little bug in the polls application for us to fix\nright away: the Question.was_published_recently() method returns True if\nthe Question was published within the last day (which is correct) but also if\nthe Question ’s pub_date field is in the future (which certainly isn’t). Confirm the bug by using the shell to check the method on a question\nwhose date lies in the future: /  $ python manage.py shell ...\\> py manage.py shell >>> import datetime >>> from django.utils import timezone >>> from polls.models import Question >>> # create a Question instance with pub_date 30 days in the future >>> future_question = Question ( pub_date = timezone . now () + datetime . timedelta ( days = 30 )) >>> # was it published recently? >>> future_question . was_published_recently () True Since things in the future are not ‘recent’, this is clearly wrong. Create a test to expose the bug ¶ What we’ve just done in the shell to test for the problem is exactly\nwhat we can do in an automated test, so let’s turn that into an automated test. A conventional place for an application’s tests is in the application’s tests.py file; the testing system will automatically find tests in any file\nwhose name begins with test . Put the following in the tests.py file in the polls application: polls/tests.py ¶ import datetime from django.test import TestCase from django.utils import timezone from .models import Question class QuestionModelTests ( TestCase ): def test_was_published_recently_with_future_question ( self ): \"\"\" was_published_recently() returns False for questions whose pub_date is in the future. \"\"\" time = timezone . now () + datetime . timedelta ( days = 30 ) future_question = Question ( pub_date = time ) self . assertIs ( future_question . was_published_recently (), False ) Here we have created a django.test.TestCase subclass with a method that\ncreates a Question instance with a pub_date in the future. We then check\nthe output of was_published_recently() - which ought to be False. Running tests ¶ In the terminal, we can run our test: /  $ python manage.py test polls ...\\> py manage.py test polls and you’ll see something like: Creating test database for alias 'default' ...\nSystem check identified no issues ( 0 silenced ) . F ====================================================================== FAIL: test_was_published_recently_with_future_question ( polls.tests.QuestionModelTests ) ----------------------------------------------------------------------\nTraceback ( most recent call last ) : File \"/path/to/djangotutorial/polls/tests.py\" , line 16 , in test_was_published_recently_with_future_question self.assertIs ( future_question.was_published_recently () , False ) AssertionError: True is not False\n\n----------------------------------------------------------------------\nRan 1 test in 0 .001s\n\nFAILED ( failures = 1 ) Destroying test database for alias 'default' ... Different error? If instead you’re getting a NameError here, you may have missed a step\nin Part 2 where we added imports of datetime and timezone to polls/models.py . Copy the imports from\nthat section, and try running your tests again. What happened is this: manage.py test polls looked for tests in the polls application it found a subclass of the django.test.TestCase class it created a special database for the purpose of testing it looked for test methods - ones whose names begin with test in test_was_published_recently_with_future_question it created a Question instance whose pub_date field is 30 days in the future … and using the assertIs() method, it discovered that its was_published_recently() returns True , though we wanted it to return False The test informs us which test failed and even the line on which the failure\noccurred. Fixing the bug ¶ We already know what the problem is: Question.was_published_recently() should\nreturn False if its pub_date is in the future. Amend the method in models.py , so that it will only return True if the date is also in the\npast: polls/models.py ¶ def was_published_recently ( self ): now = timezone . now () return now - datetime . timedelta ( days = 1 ) <= self . pub_date <= now and run the test again: Creating test database for alias 'default'... System check identified no issues (0 silenced). . ---------------------------------------------------------------------- Ran 1 test in 0.001s OK Destroying test database for alias 'default'... After identifying a bug, we wrote a test that exposes it and corrected the bug\nin the code so our test passes. Many other things might go wrong with our application in the future, but we can\nbe sure that we won’t inadvertently reintroduce this bug, because running the\ntest will warn us immediately. We can consider this little portion of the\napplication pinned down safely forever. More comprehensive tests ¶ While we’re here, we can further pin down the was_published_recently() method; in fact, it would be positively embarrassing if in fixing one bug we had\nintroduced another. Add two more test methods to the same class, to test the behavior of the method\nmore comprehensively: polls/tests.py ¶ def test_was_published_recently_with_old_question ( self ): \"\"\" was_published_recently() returns False for questions whose pub_date is older than 1 day. \"\"\" time = timezone . now () - datetime . timedelta ( days = 1 , seconds = 1 ) old_question = Question ( pub_date = time ) self . assertIs ( old_question . was_published_recently (), False ) def test_was_published_recently_with_recent_question ( self ): \"\"\" was_published_recently() returns True for questions whose pub_date is within the last day. \"\"\" time = timezone . now () - datetime . timedelta ( hours = 23 , minutes = 59 , seconds = 59 ) recent_question = Question ( pub_date = time ) self . assertIs ( recent_question . was_published_recently (), True ) And now we have three tests that confirm that Question.was_published_recently() returns sensible values for past, recent, and future questions. Again, polls is a minimal application, but however complex it grows in the\nfuture and whatever other code it interacts with, we now have some guarantee\nthat the method we have written tests for will behave in expected ways. Test a view ¶ The polls application is fairly undiscriminating: it will publish any question,\nincluding ones whose pub_date field lies in the future. We should improve\nthis. Setting a pub_date in the future should mean that the Question is\npublished at that moment, but invisible until then. A test for a view ¶ When we fixed the bug above, we wrote the test first and then the code to fix\nit. In fact that was an example of test-driven development, but it doesn’t\nreally matter in which order we do the work. In our first test, we focused closely on the internal behavior of the code. For\nthis test, we want to check its behavior as it would be experienced by a user\nthrough a web browser. Before we try to fix anything, let’s have a look at the tools at our disposal. The Django test client ¶ Django provides a test Client to simulate a user\ninteracting with the code at the view level.  We can use it in tests.py or even in the shell . We will start again with the shell , where we need to do a couple of\nthings that won’t be necessary in tests.py . The first is to set up the test\nenvironment in the shell : /  $ python manage.py shell ...\\> py manage.py shell >>> from django.test.utils import setup_test_environment >>> setup_test_environment () setup_test_environment() installs a template renderer\nwhich will allow us to examine some additional attributes on responses such as response.context that otherwise wouldn’t be available. Note that this\nmethod does not set up a test database, so the following will be run against\nthe existing database and the output may differ slightly depending on what\nquestions you already created. You might get unexpected results if your TIME_ZONE in settings.py isn’t correct. If you don’t remember setting\nit earlier, check it before continuing. Next we need to import the test client class (later in tests.py we will use\nthe django.test.TestCase class, which comes with its own client, so\nthis won’t be required): >>> from django.test import Client >>> # create an instance of the client for our use >>> client = Client () With that ready, we can ask the client to do some work for us: >>> # get a response from '/' >>> response = client . get ( \"/\" ) Not Found: / >>> # we should expect a 404 from that address; if you instead see an >>> # \"Invalid HTTP_HOST header\" error and a 400 response, you probably >>> # omitted the setup_test_environment() call described earlier. >>> response . status_code 404 >>> # on the other hand we should expect to find something at '/polls/' >>> # we'll use 'reverse()' rather than a hardcoded URL >>> from django.urls import reverse >>> response = client . get ( reverse ( \"polls:index\" )) >>> response . status_code 200 >>> response . content b'\\n    <ul>\\n    \\n        <li><a href=\"/polls/1/\">What&#x27;s up?</a></li>\\n    \\n    </ul>\\n\\n' >>> response . context [ \"latest_question_list\" ] <QuerySet [<Question: What's up?>]> Improving our view ¶ The list of polls shows polls that aren’t published yet (i.e. those that have a pub_date in the future). Let’s fix that. In Tutorial 4 we introduced a class-based view,\nbased on ListView : polls/views.py ¶ class IndexView ( generic . ListView ): template_name = \"polls/index.html\" context_object_name = \"latest_question_list\" def get_queryset ( self ): \"\"\"Return the last five published questions.\"\"\" return Question . objects . order_by ( \"-pub_date\" )[: 5 ] We need to amend the get_queryset() method and change it so that it also\nchecks the date by comparing it with timezone.now() . First we need to add\nan import: polls/views.py ¶ from django.utils import timezone and then we must amend the get_queryset method like so: polls/views.py ¶ def get_queryset ( self ): \"\"\" Return the last five published questions (not including those set to be published in the future). \"\"\" return Question . objects . filter ( pub_date__lte = timezone . now ()) . order_by ( \"-pub_date\" )[ : 5 ] Question.objects.filter(pub_date__lte=timezone.now()) returns a queryset\ncontaining Question s whose pub_date is less than or equal to - that\nis, earlier than or equal to - timezone.now . Testing our new view ¶ Now you can satisfy yourself that this behaves as expected by firing up runserver , loading the site in your browser, creating Questions with\ndates in the past and future, and checking that only those that have been\npublished are listed. You don’t want to have to do that every single time you\nmake any change that might affect this - so let’s also create a test, based on\nour shell session above. Add the following to polls/tests.py : polls/tests.py ¶ from django.urls import reverse and we’ll create a shortcut function to create questions as well as a new test\nclass: polls/tests.py ¶ def create_question ( question_text , days ): \"\"\" Create a question with the given `question_text` and published the given number of `days` offset to now (negative for questions published in the past, positive for questions that have yet to be published). \"\"\" time = timezone . now () + datetime . timedelta ( days = days ) return Question . objects . create ( question_text = question_text , pub_date = time ) class QuestionIndexViewTests ( TestCase ): def test_no_questions ( self ): \"\"\" If no questions exist, an appropriate message is displayed. \"\"\" response = self . client . get ( reverse ( \"polls:index\" )) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , \"No polls are available.\" ) self . assertQuerySetEqual ( response . context [ \"latest_question_list\" ], []) def test_past_question ( self ): \"\"\" Questions with a pub_date in the past are displayed on the index page. \"\"\" question = create_question ( question_text = \"Past question.\" , days =- 30 ) response = self . client . get ( reverse ( \"polls:index\" )) self . assertQuerySetEqual ( response . context [ \"latest_question_list\" ], [ question ], ) def test_future_question ( self ): \"\"\" Questions with a pub_date in the future aren't displayed on the index page. \"\"\" create_question ( question_text = \"Future question.\" , days = 30 ) response = self . client . get ( reverse ( \"polls:index\" )) self . assertContains ( response , \"No polls are available.\" ) self . assertQuerySetEqual ( response . context [ \"latest_question_list\" ], []) def test_future_question_and_past_question ( self ): \"\"\" Even if both past and future questions exist, only past questions are displayed. \"\"\" question = create_question ( question_text = \"Past question.\" , days =- 30 ) create_question ( question_text = \"Future question.\" , days = 30 ) response = self . client . get ( reverse ( \"polls:index\" )) self . assertQuerySetEqual ( response . context [ \"latest_question_list\" ], [ question ], ) def test_two_past_questions ( self ): \"\"\" The questions index page may display multiple questions. \"\"\" question1 = create_question ( question_text = \"Past question 1.\" , days =- 30 ) question2 = create_question ( question_text = \"Past question 2.\" , days =- 5 ) response = self . client . get ( reverse ( \"polls:index\" )) self . assertQuerySetEqual ( response . context [ \"latest_question_list\" ], [ question2 , question1 ], ) Let’s look at some of these more closely. First is a question shortcut function, create_question , to take some\nrepetition out of the process of creating questions. test_no_questions doesn’t create any questions, but checks the message:\n“No polls are available.” and verifies the latest_question_list is empty.\nNote that the django.test.TestCase class provides some additional\nassertion methods. In these examples, we use assertContains() and assertQuerySetEqual() . In test_past_question , we create a question and verify that it appears in\nthe list. In test_future_question , we create a question with a pub_date in the\nfuture. The database is reset for each test method, so the first question is no\nlonger there, and so again the index shouldn’t have any questions in it. And so on. In effect, we are using the tests to tell a story of admin input\nand user experience on the site, and checking that at every state and for every\nnew change in the state of the system, the expected results are published. Testing the DetailView ¶ What we have works well; however, even though future questions don’t appear in\nthe index , users can still reach them if they know or guess the right URL. So\nwe need to add a similar  constraint to DetailView : polls/views.py ¶ class DetailView ( generic . DetailView ): ... def get_queryset ( self ): \"\"\" Excludes any questions that aren't published yet. \"\"\" return Question . objects . filter ( pub_date__lte = timezone . now ()) We should then add some tests, to check that a Question whose pub_date is in the past can be displayed, and that one with a pub_date in the future\nis not: polls/tests.py ¶ class QuestionDetailViewTests ( TestCase ): def test_future_question ( self ): \"\"\" The detail view of a question with a pub_date in the future returns a 404 not found. \"\"\" future_question = create_question ( question_text = \"Future question.\" , days = 5 ) url = reverse ( \"polls:detail\" , args = ( future_question . id ,)) response = self . client . get ( url ) self . assertEqual ( response . status_code , 404 ) def test_past_question ( self ): \"\"\" The detail view of a question with a pub_date in the past displays the question's text. \"\"\" past_question = create_question ( question_text = \"Past Question.\" , days =- 5 ) url = reverse ( \"polls:detail\" , args = ( past_question . id ,)) response = self . client . get ( url ) self . assertContains ( response , past_question . question_text ) Ideas for more tests ¶ We ought to add a similar get_queryset method to ResultsView and\ncreate a new test class for that view. It’ll be very similar to what we have\njust created; in fact there will be a lot of repetition. We could also improve our application in other ways, adding tests along the\nway. For example, it’s silly that Questions can be published on the site\nthat have no Choices . So, our views could check for this, and exclude such Questions . Our tests would create a Question without Choices and\nthen test that it’s not published, as well as create a similar Question with Choices , and test that it is published. Perhaps logged-in admin users should be allowed to see unpublished Questions , but not ordinary visitors. Again: whatever needs to be added to\nthe software to accomplish this should be accompanied by a test, whether you\nwrite the test first and then make the code pass the test, or work out the\nlogic in your code first and then write a test to prove it. At a certain point you are bound to look at your tests and wonder whether your\ncode is suffering from test bloat, which brings us to: When testing, more is better ¶ It might seem that our tests are growing out of control. At this rate there will\nsoon be more code in our tests than in our application, and the repetition\nis unaesthetic, compared to the elegant conciseness of the rest of our code. It doesn’t matter . Let them grow. For the most part, you can write a test\nonce and then forget about it. It will continue performing its useful function\nas you continue to develop your program. Sometimes tests will need to be updated. Suppose that we amend our views so that\nonly Questions with Choices are published. In that case, many of our\nexisting tests will fail - telling us exactly which tests need to be amended to\nbring them up to date , so to that extent tests help look after themselves. At worst, as you continue developing, you might find that you have some tests\nthat are now redundant. Even that’s not a problem; in testing redundancy is\na good thing. As long as your tests are sensibly arranged, they won’t become unmanageable.\nGood rules-of-thumb include having: a separate TestClass for each model or view a separate test method for each set of conditions you want to test test method names that describe their function Further testing ¶ This tutorial only introduces some of the basics of testing. There’s a great\ndeal more you can do, and a number of very useful tools at your disposal to\nachieve some very clever things. For example, while our tests here have covered some of the internal logic of a\nmodel and the way our views publish information, you can use an “in-browser”\nframework such as Selenium to test the way your HTML actually renders in a\nbrowser. These tools allow you to check not just the behavior of your Django\ncode, but also, for example, of your JavaScript. It’s quite something to see\nthe tests launch a browser, and start interacting with your site, as if a human\nbeing were driving it! Django includes LiveServerTestCase to facilitate integration with tools like Selenium. If you have a complex application, you may want to run tests automatically\nwith every commit for the purposes of continuous integration , so that\nquality control is itself - at least partially - automated. A good way to spot untested parts of your application is to check code\ncoverage. This also helps identify fragile or even dead code. If you can’t test\na piece of code, it usually means that code should be refactored or removed.\nCoverage will help to identify dead code. See Integration with coverage.py for details. Testing in Django has comprehensive\ninformation about testing. What’s next? ¶ For full details on testing, see Testing in Django . When you’re comfortable with testing Django views, read part 6 of this tutorial to learn about\nstatic files management.", "keywords": ["experience", "state", "index", "django.test.utils", "py", "listview", "[:", "resultsview", "work", "software", "jacob", "browser", "disposal", "terminal", "test_future_question_and_past_question", "error", "developer", "line", "design", "template", "url", "questionindexviewtests", "control", "story", "datetime", "programmer", "discipline", "recent_question", "detailview", "past_question", "\\", "changes", "order", "assertquerysetequal", "questions", "def", "filter", "problems", "development", "place", "question_text", "rules", "renderer", "future_question", "help", "portion", "reason", "false", "time", "test_was_published_recently_with_recent_question", "works", "application", "bloat", "order_by", "management", "light", "living", "day", "variations", "assertion", "method", "create_question", "shell", "thumb", "queryset", "verifies", "tests", "mistake", "points", "check", "hand", "args", "inputs", "testing", "behavior", "system", "teams", "/polls/", "values", "views.py", "test_was_published_recently_with_old_question", "site", "rest", "responses", "d", "files", "repetition", "li><a", "use", "extent", "following", "redundancy", "strategies", "import", "problem", "\\n", "views", "ways", "moment", "information", "minutes", "result", "#", "indexview", "conciseness", "point", "assertionerror", "test", "output", "section", "questiondetailviewtests", "way", "integration", "¶", "default", "kaplan", "piece", "testcase", "/", "web", "f", "timezone", "methods", "client", "consequences", "test_no_questions", "input", "couple", "tutorial", "model", "page", "change", "process", "kind", "purposes", "results", "commit", "testclass", "polls.models", "test_two_past_questions", "test_was_published_recently_with_future_question", "example", "javascript", "session", "latest_question_list", "invalid", "users", "n’t", "nameerror", "timedelta", "self.assertis", "old_question", "basics", "content", "routines", "chore", "seconds", "self", "people", "case", "imports", "class", "number", "business", "components", "behaves", "applications", "ideas", "programmers", "choices", "b'\\n", "writing", "return", "aspect", "inside", "rate", "html", "polls.tests", "interactions", "ones", "function", "developers", "thing", "setup_test_environment", "future", "examples", "pub_date__lte", "things", "list", "bug", "trouble", "bit", "details", "question", "data", "polls", "cause", "app", "view", "assertis", "lines", "question1", "constraint", "human", "parts", "name", "pub_date", "i", "coverage", "environment", "user", "task", "header", "part", "file", "attributes", "question2", "quality", "programming", "python", "/path", "ran", "test_future_question", "response", "shortcut", "traceback", "manage.py", "sequence", "guarantee", "subclass", "dates", "ok", "-pub_date", "colleagues", "failures", "faq", "others", "names", "level", "django", "days", "conditions", "tools", "django.utils", "fact", "look", "questionmodeltests", "failure", "address", "message", "being", "plate", "index.html", "response.context", "selenium", "newcomer", "set", "lot", "date", "text", "framework", "field", "program", "functionality", "dozens", "database", "moss", ".001s", "reverse", "context", "context_object_name", "deal", "assertcontains", "purpose", "django.urls", "visitors", "operation", "logic", "effect", "instance", "past", "status_code", "code", "=", "feature", "detail", "objects", "hours", "levels", "counterintuitive", "get_queryset", ".models", "alias", "issues", "call", "step", "href=\"/polls/1/\">what&#x27;s"], "type": "documentation"},
{"title": "Writing your first Django app, part 4", "url": "https://docs.djangoproject.com/en/5.1/intro/tutorial04/", "content": "Writing your first Django app, part 4 ¶ This tutorial begins where Tutorial 3 left off. We’re\ncontinuing the web-poll application and will focus on form processing and\ncutting down our code. Where to get help: If you’re having trouble going through this tutorial, please head over to\nthe Getting Help section of the FAQ. Write a minimal form ¶ Let’s update our poll detail template (“polls/detail.html”) from the last\ntutorial, so that the template contains an HTML <form> element: polls/templates/polls/detail.html ¶ < form action = \" {% url 'polls:vote' question.id %} \" method = \"post\" > {% csrf_token %} < fieldset > < legend >< h1 > {{ question.question_text }} </ h1 ></ legend > {% if error_message %} < p >< strong > {{ error_message }} </ strong ></ p > {% endif %} {% for choice in question.choice_set.all %} < input type = \"radio\" name = \"choice\" id = \"choice {{ forloop .counter }} \" value = \" {{ choice.id }} \" > < label for = \"choice {{ forloop .counter }} \" > {{ choice.choice_text }} </ label >< br > {% endfor %} </ fieldset > < input type = \"submit\" value = \"Vote\" > </ form > A quick rundown: The above template displays a radio button for each question choice. The value of each radio button is the associated question choice’s ID. The name of each radio button is \"choice\" . That means, when somebody\nselects one of the radio buttons and submits the form, it’ll send the\nPOST data choice=# where # is the ID of the selected choice. This is the\nbasic concept of HTML forms. We set the form’s action to {% url 'polls:vote' question.id %} , and we\nset method=\"post\" . Using method=\"post\" (as opposed to method=\"get\" ) is very important, because the act of submitting this\nform will alter data server-side. Whenever you create a form that alters\ndata server-side, use method=\"post\" . This tip isn’t specific to\nDjango; it’s good web development practice in general. forloop.counter indicates how many times the for tag has gone\nthrough its loop Since we’re creating a POST form (which can have the effect of modifying\ndata), we need to worry about Cross Site Request Forgeries.\nThankfully, you don’t have to worry too hard, because Django comes with a\nhelpful system for protecting against it. In short, all POST forms that are\ntargeted at internal URLs should use the {% csrf_token %} template tag. Now, let’s create a Django view that handles the submitted data and does\nsomething with it. Remember, in Tutorial 3 , we\ncreated a URLconf for the polls application that includes this line: polls/urls.py ¶ path ( \"<int:question_id>/vote/\" , views . vote , name = \"vote\" ), We also created a dummy implementation of the vote() function. Let’s\ncreate a real version. Add the following to polls/views.py : polls/views.py ¶ from django.db.models import F from django.http import HttpResponse , HttpResponseRedirect from django.shortcuts import get_object_or_404 , render from django.urls import reverse from .models import Choice , Question # ... def vote ( request , question_id ): question = get_object_or_404 ( Question , pk = question_id ) try : selected_choice = question . choice_set . get ( pk = request . POST [ \"choice\" ]) except ( KeyError , Choice . DoesNotExist ): # Redisplay the question voting form. return render ( request , \"polls/detail.html\" , { \"question\" : question , \"error_message\" : \"You didn't select a choice.\" , }, ) else : selected_choice . votes = F ( \"votes\" ) + 1 selected_choice . save () # Always return an HttpResponseRedirect after successfully dealing # with POST data. This prevents data from being posted twice if a # user hits the Back button. return HttpResponseRedirect ( reverse ( \"polls:results\" , args = ( question . id ,))) This code includes a few things we haven’t covered yet in this tutorial: request.POST is a dictionary-like\nobject that lets you access submitted data by key name. In this case, request.POST['choice'] returns the ID of the selected choice, as a\nstring. request.POST values are\nalways strings. Note that Django also provides request.GET for accessing GET data in the same way –\nbut we’re explicitly using request.POST in our code, to ensure that data is only\naltered via a POST call. request.POST['choice'] will raise KeyError if choice wasn’t provided in POST data. The above code checks for KeyError and redisplays the question form with an error\nmessage if choice isn’t given. F(\"votes\") + 1 instructs the database to increase the vote count by 1. After incrementing the choice count, the code returns an HttpResponseRedirect rather than a normal HttpResponse . HttpResponseRedirect takes a single argument: the\nURL to which the user will be redirected (see the following point for how\nwe construct the URL in this case). As the Python comment above points out, you should always return an HttpResponseRedirect after successfully dealing with\nPOST data. This tip isn’t specific to Django; it’s good web development\npractice in general. We are using the reverse() function in the HttpResponseRedirect constructor in this example.\nThis function helps avoid having to hardcode a URL in the view function.\nIt is given the name of the view that we want to pass control to and the\nvariable portion of the URL pattern that points to that view. In this\ncase, using the URLconf we set up in Tutorial 3 ,\nthis reverse() call will return a string like \"/polls/3/results/\" where the 3 is the value of question.id . This redirected URL will\nthen call the 'results' view to display the final page. As mentioned in Tutorial 3 , request is an HttpRequest object. For more on HttpRequest objects, see the request and\nresponse documentation . After somebody votes in a question, the vote() view redirects to the results\npage for the question. Let’s write that view: polls/views.py ¶ from django.shortcuts import get_object_or_404 , render def results ( request , question_id ): question = get_object_or_404 ( Question , pk = question_id ) return render ( request , \"polls/results.html\" , { \"question\" : question }) This is almost exactly the same as the detail() view from Tutorial 3 . The only difference is the template name. We’ll fix this\nredundancy later. Now, create a polls/results.html template: polls/templates/polls/results.html ¶ < h1 > {{ question.question_text }} </ h1 > < ul > {% for choice in question.choice_set.all %} < li > {{ choice.choice_text }} -- {{ choice.votes }} vote {{ choice.votes | pluralize }} </ li > {% endfor %} </ ul > < a href = \" {% url 'polls:detail' question.id %} \" > Vote again? </ a > Now, go to /polls/1/ in your browser and vote in the question. You should see a\nresults page that gets updated each time you vote. If you submit the form\nwithout having chosen a choice, you should see the error message. Use generic views: Less code is better ¶ The detail() (from Tutorial 3 ) and results() views are very short – and, as mentioned above, redundant. The index() view, which displays a list of polls, is similar. These views represent a common case of basic web development: getting data from\nthe database according to a parameter passed in the URL, loading a template and\nreturning the rendered template. Because this is so common, Django provides a\nshortcut, called the “generic views” system. Generic views abstract common patterns to the point where you don’t even need to\nwrite Python code to write an app. For example, the ListView and DetailView generic views\nabstract the concepts of “display a list of objects” and\n“display a detail page for a particular type of object” respectively. Let’s convert our poll app to use the generic views system, so we can delete a\nbunch of our own code. We’ll have to take a few steps to make the conversion.\nWe will: Convert the URLconf. Delete some of the old, unneeded views. Introduce new views based on Django’s generic views. Read on for details. Why the code-shuffle? Generally, when writing a Django app, you’ll evaluate whether generic views\nare a good fit for your problem, and you’ll use them from the beginning,\nrather than refactoring your code halfway through. But this tutorial\nintentionally has focused on writing the views “the hard way” until now, to\nfocus on core concepts. You should know basic math before you start using a calculator. Amend URLconf ¶ First, open the polls/urls.py URLconf and change it like so: polls/urls.py ¶ from django.urls import path from . import views app_name = \"polls\" urlpatterns = [ path ( \"\" , views . IndexView . as_view (), name = \"index\" ), path ( \"<int:pk>/\" , views . DetailView . as_view (), name = \"detail\" ), path ( \"<int:pk>/results/\" , views . ResultsView . as_view (), name = \"results\" ), path ( \"<int:question_id>/vote/\" , views . vote , name = \"vote\" ), ] Note that the name of the matched pattern in the path strings of the second and\nthird patterns has changed from <question_id> to <pk> . This is\nnecessary because we’ll use the DetailView generic view to replace our detail() and results() views, and it expects the primary key value\ncaptured from the URL to be called \"pk\" . Amend views ¶ Next, we’re going to remove our old index , detail , and results views and use Django’s generic views instead. To do so, open the polls/views.py file and change it like so: polls/views.py ¶ from django.db.models import F from django.http import HttpResponseRedirect from django.shortcuts import get_object_or_404 , render from django.urls import reverse from django.views import generic from .models import Choice , Question class IndexView ( generic . ListView ): template_name = \"polls/index.html\" context_object_name = \"latest_question_list\" def get_queryset ( self ): \"\"\"Return the last five published questions.\"\"\" return Question . objects . order_by ( \"-pub_date\" )[: 5 ] class DetailView ( generic . DetailView ): model = Question template_name = \"polls/detail.html\" class ResultsView ( generic . DetailView ): model = Question template_name = \"polls/results.html\" def vote ( request , question_id ): # same as above, no changes needed. ... Each generic view needs to know what model it will be acting upon. This is\nprovided using either the model attribute (in this example, model = Question for DetailView and ResultsView ) or by defining the get_queryset() method (as\nshown in IndexView ). By default, the DetailView generic\nview uses a template called <app name>/<model name>_detail.html .\nIn our case, it would use the template \"polls/question_detail.html\" . The template_name attribute is used to tell Django to use a specific\ntemplate name instead of the autogenerated default template name. We\nalso specify the template_name for the results list view –\nthis ensures that the results view and the detail view have a\ndifferent appearance when rendered, even though they’re both a DetailView behind the scenes. Similarly, the ListView generic\nview uses a default template called <app name>/<model name>_list.html ; we use template_name to tell ListView to use our existing \"polls/index.html\" template. In previous parts of the tutorial, the templates have been provided\nwith a context that contains the question and latest_question_list context variables. For DetailView the question variable is provided\nautomatically – since we’re using a Django model ( Question ), Django\nis able to determine an appropriate name for the context variable.\nHowever, for ListView, the automatically generated context variable is question_list . To override this we provide the context_object_name attribute, specifying that we want to use latest_question_list instead.\nAs an alternative approach, you could change your templates to match\nthe new default context variables – but it’s a lot easier to tell Django to\nuse the variable you want. Run the server, and use your new polling app based on generic views. For full details on generic views, see the generic views documentation . When you’re comfortable with forms and generic views, read part 5 of this\ntutorial to learn about testing our polls app.", "keywords": ["implementation", "urlconf", "vote", "index", "[:", "listview", "resultsview", "doesnotexist", "browser", "variable", "pk>/results/", "error", "type", "method=\"get", "line", "template", "button", "url", "httpresponse", "fit", "calculator", "control", "%", "p", "detailview", "changes", "templates", "tip", "documentation", "questions", "method=\"post", "development", "scenes", "forloop", "id", "help", "portion", "pk", "time", "application", "count", "order_by", "act", "ul", "method", "radio", "args", "appearance", "name>/<model", "system", "views.py", "concept", "values", "site", "d", "redundancy", "following", "views", "import", "times", "problem", "difference", "amend", "#", "indexview", "point", "section", "way", "name>_list.html", "¶", "default", "urls.py", "keyerror", "rundown", "web", "f", "input", "side", "tutorial", "server", ".counter", "model", "page", "/polls/1/", "processing", "urls", "choice", "question_id", "variables", "loop", "modifying", "render", "question.choice_set.all", "beginning", "results", "example", "checks", "latest_question_list", "n’t", "value", "<", "first", "int", "label", "self", "case", "argument", "class", "bunch", "request", "choice.votes", "version", "choice.choice_text", "redirects", "math", "return", "html", "name>_detail.html", "action", "br", "cross", "function", "attribute", "forgeries", "li", "string", "things", "f(\"votes", "forloop.counter", "list", "trouble", "href", "details", "question", "comment", "concepts", "steps", "django.views", "data", "polls", "element", "app", "view", "as_view", "form", "get_object_or_404", "parts", "name", "i", "object", "pattern", "voting", "user", "httprequest", "votes", "part", "file", "buttons", "pk>/", "httpresponseredirect", "’s", "patterns", "python", "endfor", "core", "get", "conversion", "response", "shortcut", "constructor", "template_name", "alters", "results.html", "-pub_date", "faq", "post", "path", "django", "tag", "message", "results/", "h1", "index.html", "parameter", "lot", "selected_choice", "back", "approach", "shuffle", "practice", "polling", "strings", "database", "reverse", "context", "django.urls", "forms", "effect", "error_message", "code", "=", "detail", "objects", "django.shortcuts", "detail.html", "get_queryset", ".models", "call", "context_object_name"], "type": "documentation"},
{"title": "Writing your first Django app, part 3", "url": "https://docs.djangoproject.com/en/5.1/intro/tutorial03/", "content": "Writing your first Django app, part 3 ¶ This tutorial begins where Tutorial 2 left off. We’re\ncontinuing the web-poll application and will focus on creating the public\ninterface – “views.” Where to get help: If you’re having trouble going through this tutorial, please head over to\nthe Getting Help section of the FAQ. Overview ¶ A view is a “type” of web page in your Django application that generally serves\na specific function and has a specific template. For example, in a blog\napplication, you might have the following views: Blog homepage – displays the latest few entries. Entry “detail” page – permalink page for a single entry. Year-based archive page – displays all months with entries in the\ngiven year. Month-based archive page – displays all days with entries in the\ngiven month. Day-based archive page – displays all entries in the given day. Comment action – handles posting comments to a given entry. In our poll application, we’ll have the following four views: Question “index” page – displays the latest few questions. Question “detail” page – displays a question text, with no results but\nwith a form to vote. Question “results” page – displays results for a particular question. Vote action – handles voting for a particular choice in a particular\nquestion. In Django, web pages and other content are delivered by views. Each view is\nrepresented by a Python function (or method, in the case of class-based views).\nDjango will choose a view by examining the URL that’s requested (to be precise,\nthe part of the URL after the domain name). Now in your time on the web you may have come across such beauties as ME2/Sites/dirmod.htm?sid=&type=gen&mod=Core+Pages&gid=A6CD4967199A42D9B65B1B .\nYou will be pleased to know that Django allows us much more elegant URL patterns than that. A URL pattern is the general form of a URL - for example: /newsarchive/<year>/<month>/ . To get from a URL to a view, Django uses what are known as ‘URLconfs’. A\nURLconf maps URL patterns to views. This tutorial provides basic instruction in the use of URLconfs, and you can\nrefer to URL dispatcher for more information. Writing more views ¶ Now let’s add a few more views to polls/views.py . These views are\nslightly different, because they take an argument: polls/views.py ¶ def detail ( request , question_id ): return HttpResponse ( \"You're looking at question %s .\" % question_id ) def results ( request , question_id ): response = \"You're looking at the results of question %s .\" return HttpResponse ( response % question_id ) def vote ( request , question_id ): return HttpResponse ( \"You're voting on question %s .\" % question_id ) Wire these new views into the polls.urls module by adding the following path() calls: polls/urls.py ¶ from django.urls import path from . import views urlpatterns = [ # ex: /polls/ path ( \"\" , views . index , name = \"index\" ), # ex: /polls/5/ path ( \"<int:question_id>/\" , views . detail , name = \"detail\" ), # ex: /polls/5/results/ path ( \"<int:question_id>/results/\" , views . results , name = \"results\" ), # ex: /polls/5/vote/ path ( \"<int:question_id>/vote/\" , views . vote , name = \"vote\" ), ] Take a look in your browser, at “/polls/34/”. It’ll run the detail() function and display whatever ID you provide in the URL. Try\n“/polls/34/results/” and “/polls/34/vote/” too – these will display the\nplaceholder results and voting pages. When somebody requests a page from your website – say, “/polls/34/”, Django\nwill load the mysite.urls Python module because it’s pointed to by the ROOT_URLCONF setting. It finds the variable named urlpatterns and traverses the patterns in order. After finding the match at 'polls/' ,\nit strips off the matching text ( \"polls/\" ) and sends the remaining text – \"34/\" – to the ‘polls.urls’ URLconf for further processing. There it\nmatches '<int:question_id>/' , resulting in a call to the detail() view\nlike so: detail(request=<HttpRequest object>, question_id=34) The question_id=34 part comes from <int:question_id> . Using angle\nbrackets “captures” part of the URL and sends it as a keyword argument to the\nview function. The question_id part of the string defines the name that\nwill be used to identify the matched pattern, and the int part is a\nconverter that determines what patterns should match this part of the URL path.\nThe colon ( : ) separates the converter and pattern name. Write views that actually do something ¶ Each view is responsible for doing one of two things: returning an HttpResponse object containing the content for the\nrequested page, or raising an exception such as Http404 . The\nrest is up to you. Your view can read records from a database, or not. It can use a template\nsystem such as Django’s – or a third-party Python template system – or not.\nIt can generate a PDF file, output XML, create a ZIP file on the fly, anything\nyou want, using whatever Python libraries you want. All Django wants is that HttpResponse . Or an exception. Because it’s convenient, let’s use Django’s own database API, which we covered\nin Tutorial 2 . Here’s one stab at a new index() view, which displays the latest 5 poll questions in the system, separated by\ncommas, according to publication date: polls/views.py ¶ from django.http import HttpResponse from .models import Question def index ( request ): latest_question_list = Question . objects . order_by ( \"-pub_date\" )[: 5 ] output = \", \" . join ([ q . question_text for q in latest_question_list ]) return HttpResponse ( output ) # Leave the rest of the views (detail, results, vote) unchanged There’s a problem here, though: the page’s design is hard-coded in the view. If\nyou want to change the way the page looks, you’ll have to edit this Python code.\nSo let’s use Django’s template system to separate the design from Python by\ncreating a template that the view can use. First, create a directory called templates in your polls directory.\nDjango will look for templates in there. Your project’s TEMPLATES setting describes how Django will load and\nrender templates. The default settings file configures a DjangoTemplates backend whose APP_DIRS option is set to True . By convention DjangoTemplates looks for a “templates”\nsubdirectory in each of the INSTALLED_APPS . Within the templates directory you have just created, create another\ndirectory called polls , and within that create a file called index.html . In other words, your template should be at polls/templates/polls/index.html . Because of how the app_directories template loader works as described above, you can refer to this template within\nDjango as polls/index.html . Template namespacing Now we might be able to get away with putting our templates directly in polls/templates (rather than creating another polls subdirectory),\nbut it would actually be a bad idea. Django will choose the first template\nit finds whose name matches, and if you had a template with the same name\nin a different application, Django would be unable to distinguish between\nthem. We need to be able to point Django at the right one, and the best\nway to ensure this is by namespacing them. That is, by putting those\ntemplates inside another directory named for the application itself. Put the following code in that template: polls/templates/polls/index.html ¶ {% if latest_question_list %} < ul > {% for question in latest_question_list %} < li >< a href = \"/polls/ {{ question.id }} /\" > {{ question.question_text }} </ a ></ li > {% endfor %} </ ul > {% else %} < p > No polls are available. </ p > {% endif %} Note To make the tutorial shorter, all template examples use incomplete HTML. In\nyour own projects you should use complete HTML documents . Now let’s update our index view in polls/views.py to use the template: polls/views.py ¶ from django.http import HttpResponse from django.template import loader from .models import Question def index ( request ): latest_question_list = Question . objects . order_by ( \"-pub_date\" )[: 5 ] template = loader . get_template ( \"polls/index.html\" ) context = { \"latest_question_list\" : latest_question_list , } return HttpResponse ( template . render ( context , request )) That code loads the template called polls/index.html and passes it a\ncontext. The context is a dictionary mapping template variable names to Python\nobjects. Load the page by pointing your browser at “/polls/”, and you should see a\nbulleted-list containing the “What’s up” question from Tutorial 2 . The link points to the question’s detail page. A shortcut: render() ¶ It’s a very common idiom to load a template, fill a context and return an HttpResponse object with the result of the rendered\ntemplate. Django provides a shortcut. Here’s the full index() view,\nrewritten: polls/views.py ¶ from django.shortcuts import render from .models import Question def index ( request ): latest_question_list = Question . objects . order_by ( \"-pub_date\" )[: 5 ] context = { \"latest_question_list\" : latest_question_list } return render ( request , \"polls/index.html\" , context ) Note that once we’ve done this in all these views, we no longer need to import loader and HttpResponse (you’ll\nwant to keep HttpResponse if you still have the stub methods for detail , results , and vote ). The render() function takes the request object as its\nfirst argument, a template name as its second argument and a dictionary as its\noptional third argument. It returns an HttpResponse object of the given template rendered with the given context. Raising a 404 error ¶ Now, let’s tackle the question detail view – the page that displays the question text\nfor a given poll. Here’s the view: polls/views.py ¶ from django.http import Http404 from django.shortcuts import render from .models import Question # ... def detail ( request , question_id ): try : question = Question . objects . get ( pk = question_id ) except Question . DoesNotExist : raise Http404 ( \"Question does not exist\" ) return render ( request , \"polls/detail.html\" , { \"question\" : question }) The new concept here: The view raises the Http404 exception\nif a question with the requested ID doesn’t exist. We’ll discuss what you could put in that polls/detail.html template a bit\nlater, but if you’d like to quickly get the above example working, a file\ncontaining just: polls/templates/polls/detail.html ¶ {{ question }} will get you started for now. A shortcut: get_object_or_404() ¶ It’s a very common idiom to use get() and raise Http404 if the object doesn’t exist. Django\nprovides a shortcut. Here’s the detail() view, rewritten: polls/views.py ¶ from django.shortcuts import get_object_or_404 , render from .models import Question # ... def detail ( request , question_id ): question = get_object_or_404 ( Question , pk = question_id ) return render ( request , \"polls/detail.html\" , { \"question\" : question }) The get_object_or_404() function takes a Django model\nas its first argument and an arbitrary number of keyword arguments, which it\npasses to the get() function of the\nmodel’s manager. It raises Http404 if the object doesn’t\nexist. Philosophy Why do we use a helper function get_object_or_404() instead of automatically catching the ObjectDoesNotExist exceptions at a higher\nlevel, or having the model API raise Http404 instead of ObjectDoesNotExist ? Because that would couple the model layer to the view layer. One of the\nforemost design goals of Django is to maintain loose coupling. Some\ncontrolled coupling is introduced in the django.shortcuts module. There’s also a get_list_or_404() function, which works\njust as get_object_or_404() – except using filter() instead of get() . It raises Http404 if the list is empty. Use the template system ¶ Back to the detail() view for our poll application. Given the context\nvariable question , here’s what the polls/detail.html template might look\nlike: polls/templates/polls/detail.html ¶ < h1 > {{ question.question_text }} </ h1 > < ul > {% for choice in question.choice_set.all %} < li > {{ choice.choice_text }} </ li > {% endfor %} </ ul > The template system uses dot-lookup syntax to access variable attributes. In\nthe example of {{ question.question_text }} , first Django does a dictionary lookup\non the object question . Failing that, it tries an attribute lookup – which\nworks, in this case. If attribute lookup had failed, it would’ve tried a\nlist-index lookup. Method-calling happens in the {% for %} loop: question.choice_set.all is interpreted as the Python code question.choice_set.all() , which returns an iterable of Choice objects and is\nsuitable for use in the {% for %} tag. See the template guide for more about templates. Removing hardcoded URLs in templates ¶ Remember, when we wrote the link to a question in the polls/index.html template, the link was partially hardcoded like this: < li >< a href = \"/polls/ {{ question.id }} /\" > {{ question.question_text }} </ a ></ li > The problem with this hardcoded, tightly-coupled approach is that it becomes\nchallenging to change URLs on projects with a lot of templates. However, since\nyou defined the name argument in the path() functions in\nthe polls.urls module, you can remove a reliance on specific URL paths\ndefined in your url configurations by using the {% url %} template tag: < li >< a href = \" {% url 'detail' question.id %} \" > {{ question.question_text }} </ a ></ li > The way this works is by looking up the URL definition as specified in the polls.urls module. You can see exactly where the URL name of ‘detail’ is\ndefined below: ... # the 'name' value as called by the {% url %} template tag path ( \"<int:question_id>/\" , views . detail , name = \"detail\" ), ... If you want to change the URL of the polls detail view to something else,\nperhaps to something like polls/specifics/12/ instead of doing it in the\ntemplate (or templates) you would change it in polls/urls.py : ... # added the word 'specifics' path ( \"specifics/<int:question_id>/\" , views . detail , name = \"detail\" ), ... Namespacing URL names ¶ The tutorial project has just one app, polls . In real Django projects,\nthere might be five, ten, twenty apps or more. How does Django differentiate\nthe URL names between them? For example, the polls app has a detail view, and so might an app on the same project that is for a blog. How does one\nmake it so that Django knows which app view to create for a url when using the {% url %} template tag? The answer is to add namespaces to your  URLconf. In the polls/urls.py file, go ahead and add an app_name to set the application namespace: polls/urls.py ¶ from django.urls import path from . import views app_name = \"polls\" urlpatterns = [ path ( \"\" , views . index , name = \"index\" ), path ( \"<int:question_id>/\" , views . detail , name = \"detail\" ), path ( \"<int:question_id>/results/\" , views . results , name = \"results\" ), path ( \"<int:question_id>/vote/\" , views . vote , name = \"vote\" ), ] Now change your polls/index.html template from: polls/templates/polls/index.html ¶ < li >< a href = \" {% url 'detail' question.id %} \" > {{ question.question_text }} </ a ></ li > to point at the namespaced detail view: polls/templates/polls/index.html ¶ < li >< a href = \" {% url 'polls:detail' question.id %} \" > {{ question.question_text }} </ a ></ li > When you’re comfortable with writing views, read part 4 of this tutorial to learn the basics about form processing and generic\nviews.", "keywords": ["dictionary", "urlconf", "matches", "iterable", "index", "vote", "website", "stub", "[:", "match", "comments", "remember", "interface", "doesnotexist", "browser", "variable", "error", "type", "design", "template", "specifics", "handles", "url", "httpresponse", "app_dirs", "a6cd4967199a42d9b65b1b", "%", "core+pages&gid", "setting", "question_id=34", "stab", "order", "p", "templates", "questions", "def", "filter", "mysite.urls", "me2", "id", "help", "settings", "pk", "time", "application", "exception", "order_by", "overview", "day", "34/", "loader", "answer", "q", "ul", "records", "method", "colon", "party", "configurations", "system", "maps", "views.py", "/polls/", "rest", "app_directories", "concept", "app_name", "zip", "use", "manager", "question_id>/results/", "views", "dirmod.htm?sid=&type", "import", "problem", "information", "urlpatterns", "project", "paths", "#", "result", "philosophy", "beauties", "output", "section", "way", "idea", "¶", "default", "urls.py", "option", "web", "methods", "definition", "domain", "fly", "homepage", "keyword", "entries", "tutorial", "polls.urls", "model", "page", "documents", "question_id", "processing", "choice", "idiom", "sites", "join", "loop", "urls", "converter", "/polls/34/", "render", "question.choice_set.all", "results", "word", "example", "displays", ">", "latest_question_list", "djangotemplates", "year", "configures", "n’t", "guide", "functions", "convention", "installed_apps", "value", "basics", "dot", "content", "backend", "int", "case", "argument", "class", "number", "xml", "words", "request", "blog", "choice.choice_text", "placeholder", "months", "subdirectory", "return", "publication", "html", "mapping", "action", "attribute", "function", "examples", "li", "string", "things", "month", "list", "trouble", "href", "bit", "question", "comment", "call", "polls", "app", "view", "matching", "instruction", "form", "get_object_or_404", "angle", "brackets", "name", "root_urlconf", "poll", "pattern", "object", "voting", "reliance", "coupling", "/polls/5", "part", "file", "one", "attributes", "’s", "patterns", "python", "endfor", "link", "http404", "goals", "get", "namespaces", "response", "shortcut", "working", "exceptions", "wire", "api", "note", "-pub_date", "lookup", "’ve", "ex", "faq", "path", "projects", "pdf", "django", "days", "get_template", "names", "level", "directory", "tag", "look", "namespace", "h1", "index.html", "true", "syntax", "date", "lot", "text", "polls/", "approach", "module", "apps", "arguments", "urlconfs", "commas", "calling", "get_list_or_404", "database", "context", "libraries", "captures", "django.urls", "layer", "=", "code", "specifics/<int", "detail", "pages", "objects", "django.shortcuts", "detail.html", "objectdoesnotexist", ".models", "entry", "question_id>/", "helper"], "type": "documentation"},
{"title": "Writing your first contribution for Django", "url": "https://docs.djangoproject.com/en/5.1/intro/contributing/", "content": "Writing your first contribution for Django ¶ Introduction ¶ Interested in giving back to the community a little? Maybe you’ve found a bug\nin Django that you’d like to see fixed, or maybe there’s a small feature you\nwant added. Contributing back to Django itself is the best way to see your own concerns\naddressed. This may seem daunting at first, but it’s a well-traveled path with\ndocumentation, tooling, and a community to support you. We’ll walk you through\nthe entire process, so you can learn by example. Who’s this tutorial for? ¶ See also If you are looking for a reference on the details of making code\ncontributions, see the Contributing code documentation. For this tutorial, we expect that you have at least a basic understanding of\nhow Django works. This means you should be comfortable going through the\nexisting tutorials on writing your first Django app .\nIn addition, you should have a good understanding of Python itself. But if you\ndon’t, Dive Into Python is a fantastic (and free) online book for beginning\nPython programmers. Those of you who are unfamiliar with version control systems and Trac will find\nthat this tutorial and its links include just enough information to get started.\nHowever, you’ll probably want to read some more about these different tools if\nyou plan on contributing to Django regularly. For the most part though, this tutorial tries to explain as much as possible,\nso that it can be of use to the widest audience. Where to get help: If you’re having trouble going through this tutorial, please post a message\non the Django Forum , django-developers , or drop by #django-dev on irc.libera.chat to chat with other Django users who\nmight be able to help. What does this tutorial cover? ¶ We’ll be walking you through contributing to Django for the first time.\nBy the end of this tutorial, you should have a basic understanding of both the\ntools and the processes involved. Specifically, we’ll be covering the following: Installing Git. Downloading a copy of Django’s development version. Running Django’s test suite. Writing a test for your changes. Writing the code for your changes. Testing your changes. Submitting a pull request. Where to look for more information. Once you’re done with the tutorial, you can look through the rest of Django’s documentation on contributing .\nIt contains lots of great information and is a must read for anyone who’d like\nto become a regular contributor to Django. If you’ve got questions, it’s\nprobably got the answers. Python 3 required! The current version of Django doesn’t support Python 2.7. Get Python 3 at Python’s download page or with your\noperating system’s package manager. For Windows users See Install Python on Windows docs for additional guidance. Code of Conduct ¶ As a contributor, you can help us keep the Django community open and inclusive.\nPlease read and follow our Code of Conduct . Installing Git ¶ For this tutorial, you’ll need Git installed to download the current\ndevelopment version of Django and to generate a branch for the changes you\nmake. To check whether or not you have Git installed, enter git into the command\nline. If you get messages saying that this command could not be found, you’ll\nhave to download and install it, see Git’s download page . If you’re not that familiar with Git, you can always find out more about its\ncommands (once it’s installed) by typing git help into the command line. Getting a copy of Django’s development version ¶ The first step to contributing to Django is to get a copy of the source code.\nFirst, fork Django on GitHub . Then,\nfrom the command line, use the cd command to navigate to the directory\nwhere you’ll want your local copy of Django to live. Download the Django source code repository using the following command: /  $ git clone https://github.com/YourGitHubName/django.git ...\\> git clone https://github.com/YourGitHubName/django.git Low bandwidth connection? You can add the --depth 1 argument to git clone to skip downloading\nall of Django’s commit history, which reduces data transfer from  ~250 MB\nto ~70 MB. Now that you have a local copy of Django, you can install it just like you would\ninstall any package using pip . The most convenient way to do so is by using\na virtual environment , which is a feature built into Python that allows you\nto keep a separate directory of installed packages for each of your projects so\nthat they don’t interfere with each other. It’s a good idea to keep all your virtual environments in one place, for\nexample in .virtualenvs/ in your home directory. Create a new virtual environment by running: /  $ python3 -m venv ~/.virtualenvs/djangodev ...\\> py -m venv %HOMEPATH% \\.virtualenvs\\djangodev The path is where the new environment will be saved on your computer. The final step in setting up your virtual environment is to activate it: $ source ~/.virtualenvs/djangodev/bin/activate If the source command is not available, you can try using a dot instead: $ . ~/.virtualenvs/djangodev/bin/activate You have to activate the virtual environment whenever you open a new\nterminal window. For Windows users To activate your virtual environment on Windows, run: ...\\> %HOMEPATH% \\.virtualenvs\\djangodev\\Scripts\\activate.bat The name of the currently activated virtual environment is displayed on the\ncommand line to help you keep track of which one you are using. Anything you\ninstall through pip while this name is displayed will be installed in that\nvirtual environment, isolated from other environments and system-wide packages. Go ahead and install the previously cloned copy of Django: /  $ python -m pip install -e /path/to/your/local/clone/django/ ...\\> py -m pip install -e \\path\\to\\your\\local\\clone\\django\\ The installed version of Django is now pointing at your local copy by installing\nin editable mode. You will immediately see any changes you make to it, which is\nof great help when writing your first contribution. Creating projects with a local copy of Django ¶ It may be helpful to test your local changes with a Django project. First you\nhave to create a new virtual environment, install the previously cloned\nlocal copy of Django in editable mode ,\nand create a new Django project outside of your local copy of Django. You will\nimmediately see any changes you make to Django in your new project, which is\nof great help when writing your first contribution, especially if testing\nany changes to the UI. You can follow the tutorial for help in creating a\nDjango project. Running Django’s test suite for the first time ¶ When contributing to Django it’s very important that your code changes don’t\nintroduce bugs into other areas of Django. One way to check that Django still\nworks after you make your changes is by running Django’s test suite. If all\nthe tests still pass, then you can be reasonably sure that your changes\nwork and haven’t broken other parts of Django. If you’ve never run Django’s test\nsuite before, it’s a good idea to run it once beforehand to get familiar with\nits output. Before running the test suite, enter the Django tests/ directory using the cd tests command, and install test dependencies by running: /  $ python -m pip install -r requirements/py3.txt ...\\> py -m pip install -r requirements\\py3.txt If you encounter an error during the installation, your system might be missing\na dependency for one or more of the Python packages. Consult the failing\npackage’s documentation or search the web with the error message that you\nencounter. Now we are ready to run the test suite: /  $ ./runtests.py ...\\> runtests.py Now sit back and relax. Django’s entire test suite has thousands of tests, and\nit takes at least a few minutes to run, depending on the speed of your\ncomputer. While Django’s test suite is running, you’ll see a stream of characters\nrepresenting the status of each test as it completes. E indicates that an\nerror was raised during a test, and F indicates that a test’s assertions\nfailed. Both of these are considered to be test failures. Meanwhile, x and s indicated expected failures and skipped tests, respectively. Dots indicate\npassing tests. Skipped tests are typically due to missing external libraries required to run\nthe test; see Running all the tests for a list of dependencies\nand be sure to install any for tests related to the changes you are making (we\nwon’t need any for this tutorial). Some tests are specific to a particular\ndatabase backend and will be skipped if not testing with that backend. SQLite\nis the database backend for the default settings. To run the tests using a\ndifferent backend, see Using another settings module . Once the tests complete, you should be greeted with a message informing you\nwhether the test suite passed or failed. Since you haven’t yet made any changes\nto Django’s code, the entire test suite should pass. If you get failures or\nerrors make sure you’ve followed all of the previous steps properly. See Running the unit tests for more information. Note that the latest Django “main” branch may not always be stable. When\ndeveloping against “main”, you can check Django’s continuous integration\nbuilds to determine if the failures are specific to your machine or if they\nare also present in Django’s official builds. If you click to view a particular\nbuild, you can view the “Configuration Matrix” which shows failures broken down\nby Python version and database backend. Note For this tutorial and the ticket we’re working on, testing against SQLite\nis sufficient, however, it’s possible (and sometimes necessary) to run the tests using a different database . When making UI changes, you will need to run the Selenium tests . Working on a feature ¶ For this tutorial, we’ll work on a “fake ticket” as a case study. Here are the\nimaginary details: Ticket #99999 – Allow making toast Django should provide a function django.shortcuts.make_toast() that\nreturns 'toast' . We’ll now implement this feature and associated tests. Creating a branch ¶ Before making any changes, create a new branch for the ticket: /  $ git checkout -b ticket_99999 ...\\> git checkout -b ticket_99999 You can choose any name that you want for the branch, “ticket_99999” is an\nexample. All changes made in this branch will be specific to the ticket and\nwon’t affect the main copy of the code that we cloned earlier. Writing some tests for your ticket ¶ In most cases, for a contribution to be accepted into Django it has to include\ntests. For bug fix contributions, this means writing a regression test to\nensure that  the bug is never reintroduced into Django later on. A regression\ntest should be written in such a way that it will fail while the bug still\nexists and pass once the bug has been fixed. For contributions containing new\nfeatures, you’ll need to include tests which ensure that the new features are\nworking correctly. They too should fail when the new feature is not present,\nand then pass once it has been implemented. A good way to do this is to write your new tests first, before making any\nchanges to the code. This style of development is called test-driven development and can be applied to both entire projects and\nsingle changes. After writing your tests, you then run them to make sure that\nthey do indeed fail (since you haven’t fixed that bug or added that feature\nyet). If your new tests don’t fail, you’ll need to fix them so that they do.\nAfter all, a regression test that passes regardless of whether a bug is present\nis not very helpful at preventing that bug from reoccurring down the road. Now for our hands-on example. Writing a test for ticket #99999 ¶ In order to resolve this ticket, we’ll add a make_toast() function to the django.shortcuts module. First we are going to write a test that tries to\nuse the function and check that its output looks correct. Navigate to Django’s tests/shortcuts/ folder and create a new file test_make_toast.py . Add the following code: from django.shortcuts import make_toast from django.test import SimpleTestCase class MakeToastTests ( SimpleTestCase ): def test_make_toast ( self ): self . assertEqual ( make_toast (), \"toast\" ) This test checks that the make_toast() returns 'toast' . But this testing thing looks kinda hard… If you’ve never had to deal with tests before, they can look a little hard\nto write at first glance. Fortunately, testing is a very big subject in\ncomputer programming, so there’s lots of information out there: A good first look at writing tests for Django can be found in the\ndocumentation on Writing and running tests . Dive Into Python (a free online book for beginning Python developers)\nincludes a great introduction to Unit Testing . After reading those, if you want something a little meatier to sink\nyour teeth into, there’s always the Python unittest documentation. Running your new test ¶ Since we haven’t made any modifications to django.shortcuts yet, our test\nshould fail. Let’s run all the tests in the shortcuts folder to make sure\nthat’s really what happens. cd to the Django tests/ directory and run: /  $ ./runtests.py shortcuts ...\\> runtests.py shortcuts If the tests ran correctly, you should see one failure corresponding to the test\nmethod we added, with this error: ImportError: cannot import name 'make_toast' from 'django.shortcuts' If all of the tests passed, then you’ll want to make sure that you added the\nnew test shown above to the appropriate folder and file name. Writing the code for your ticket ¶ Next we’ll be adding the make_toast() function. Navigate to the django/ folder and open the shortcuts.py file. At the\nbottom, add: def make_toast (): return \"toast\" Now we need to make sure that the test we wrote earlier passes, so we can see\nwhether the code we added is working correctly. Again, navigate to the Django tests/ directory and run: /  $ ./runtests.py shortcuts ...\\> runtests.py shortcuts Everything should pass. If it doesn’t, make sure you correctly added the\nfunction to the correct file. Running Django’s test suite for the second time ¶ Once you’ve verified that your changes and test are working correctly, it’s\na good idea to run the entire Django test suite to verify that your change\nhasn’t introduced any bugs into other areas of Django. While successfully\npassing the entire test suite doesn’t guarantee your code is bug free, it does\nhelp identify many bugs and regressions that might otherwise go unnoticed. To run the entire Django test suite, cd into the Django tests/ directory and run: /  $ ./runtests.py ...\\> runtests.py Writing Documentation ¶ This is a new feature, so it should be documented. Open the file docs/topics/http/shortcuts.txt and add the following at the end of the\nfile: ``make_toast()`` ================ .. function :: make_toast() .. versionadded :: 2.2\n\nReturns ``'toast'`` . Since this new feature will be in an upcoming release it is also added to the\nrelease notes for the next version of Django. Open the release notes for the\nlatest version in docs/releases/ , which at time of writing is 2.2.txt .\nAdd a note under the “Minor Features” header: :mod:`django.shortcuts` ~~~~~~~~~~~~~~~~~~~~~~~ * The new :func: `django.shortcuts.make_toast` function returns ``'toast'`` . For more information on writing documentation, including an explanation of what\nthe versionadded bit is all about, see Writing documentation . That page also includes\nan explanation of how to build a copy of the documentation locally, so you can\npreview the HTML that will be generated. Previewing your changes ¶ Now it’s time to review the changes made in the branch. To stage all the\nchanges ready for commit, run: /  $ git add --all ...\\> git add --all Then display the differences between your current copy of Django (with your\nchanges) and the revision that you initially checked out earlier in the\ntutorial with: /  $ git diff --cached ...\\> git diff --cached Use the arrow keys to move up and down. diff --git a/django/shortcuts.py b/django/shortcuts.py index 7ab1df0e9d..8dde9e28d9 100644 --- a/django/shortcuts.py +++ b/django/shortcuts.py @@ -156,3 +156,7 @@ def resolve_url(to, *args, **kwargs): # Finally, fall back and assume it's a URL return to + + +def make_toast(): +    return 'toast' diff --git a/docs/releases/2.2.txt b/docs/releases/2.2.txt index 7d85d30c4a..81518187b3 100644 --- a/docs/releases/2.2.txt +++ b/docs/releases/2.2.txt @@ -40,6 +40,11 @@ database constraints. Constraints are added to models using the Minor features -------------- +:mod:`django.shortcuts` +~~~~~~~~~~~~~~~~~~~~~~~ + +* The new :func:`django.shortcuts.make_toast` function returns ``'toast'``. + :mod:`django.contrib.admin` ~~~~~~~~~~~~~~~~~~~~~~~~~~~ diff --git a/docs/topics/http/shortcuts.txt b/docs/topics/http/shortcuts.txt index 7b3a3a2c00..711bf6bb6d 100644 --- a/docs/topics/http/shortcuts.txt +++ b/docs/topics/http/shortcuts.txt @@ -271,3 +271,12 @@ This example is equivalent to:: my_objects = list(MyModel.objects.filter(published=True)) if not my_objects: raise Http404(\"No MyModel matches the given query.\") + +``make_toast()`` +================ + +.. function:: make_toast() + +.. versionadded:: 2.2 + +Returns ``'toast'``. diff --git a/tests/shortcuts/test_make_toast.py b/tests/shortcuts/test_make_toast.py new file mode 100644 index 0000000000..6f4c627b6e --- /dev/null +++ b/tests/shortcuts/test_make_toast.py @@ -0,0 +1,7 @@ +from django.shortcuts import make_toast +from django.test import SimpleTestCase + + +class MakeToastTests(SimpleTestCase): +    def test_make_toast(self): +        self.assertEqual(make_toast(), 'toast') When you’re done previewing the changes, hit the q key to return to the\ncommand line. If the diff looked okay, it’s time to commit the changes. Committing the changes ¶ To commit the changes: /  $ git commit ...\\> git commit This opens up a text editor to type the commit message. Follow the commit\nmessage guidelines and write a message like: Fixed #99999 -- Added a shortcut function to make toast. Pushing the commit and making a pull request ¶ After committing the changes, send it to your fork on GitHub (substitute\n“ticket_99999” with the name of your branch if it’s different): /  $ git push origin ticket_99999 ...\\> git push origin ticket_99999 You can create a pull request by visiting the Django GitHub page . You’ll see your branch under “Your\nrecently pushed branches”. Click “Compare & pull request” next to it. Please don’t do it for this tutorial, but on the next page that displays a\npreview of the changes, you would click “Create pull request”. Next steps ¶ Congratulations, you’ve learned how to make a pull request to Django! Details\nof more advanced techniques you may need are in Working with Git and GitHub . Now you can put those skills to good use by helping to improve Django’s\ncodebase. More information for new contributors ¶ Before you get too into contributing to Django, there’s a little more\ninformation on contributing that you should probably take a look at: You should make sure to read Django’s documentation on claiming tickets and submitting pull requests .\nIt covers Trac etiquette, how to claim tickets for yourself, expected\ncoding style (both for code and docs), and many other important details. First time contributors should also read Django’s documentation\nfor first time contributors .\nIt has lots of good advice for those of us who are new to helping out\nwith Django. After those, if you’re still hungry for more information about\ncontributing, you can always browse through the rest of Django’s documentation on contributing .\nIt contains a ton of useful information and should be your first source\nfor answering any questions you might have. Finding your first real ticket ¶ Once you’ve looked through some of that information, you’ll be ready to go out\nand find a ticket of your own to contribute to. Pay special attention to\ntickets with the “easy pickings” criterion. These tickets are often much\nsimpler in nature and are great for first time contributors. Once you’re\nfamiliar with contributing to Django, you can start working on more difficult\nand complicated tickets. If you just want to get started already (and nobody would blame you!), try\ntaking a look at the list of easy tickets without a branch and the easy tickets that have branches which need improvement . If you’re familiar\nwith writing tests, you can also look at the list of easy tickets that need tests . Remember to follow the guidelines about\nclaiming tickets that were mentioned in the link to Django’s documentation on claiming tickets and submitting branches . What’s next after creating a pull request? ¶ After a ticket has a branch, it needs to be reviewed by a second set of eyes.\nAfter submitting a pull request, update the ticket metadata by setting the\nflags on the ticket to say “has patch”, “doesn’t need tests”, etc, so others\ncan find it for review. Contributing doesn’t necessarily always mean writing\ncode from scratch. Reviewing open pull requests is also a very helpful\ncontribution. See Triaging tickets for details.", "keywords": ["explanation", "index", "ton", "connection", "characters", "py", "run", "+", "work", "eyes", "diff", "track", "error", "differences", "line", "audience", "shortcuts", "url", "branches", "control", "book", "nature", "ui", "systems", "git", "python3", "shortcuts.txt", "docs", "py3.txt", "\\", "changes", "order", "documentation", "-", "questions", "development", "place", "def", "style", "subject", "patch", "lots", "help", "settings", "computer", "time", "release", "null", "711bf6bb6d", "glance", "q", "substitute", "method", "tests", "args", "bugs", "testing", "system", "maketoasttests(simpletestcase", "commands", "\\path\\to\\your\\local\\clone\\django\\", "dependency", "rest", "branch", "metadata", "congratulations", "mode", "djangodev", "cases", "query", "fork", "use", "manager", "following", "status", "passes", "import", "messages", "dive", "clone", "preview", "information", "processes", "project", "minutes", "advice", "shortcuts.py", "#", "guidelines", "dots", "repository", "test", "bin", "way", "idea", "output", "./runtests.py", "integration", "¶", "default", "suite", "installing", "answers", "techniques", "copy", "guidance", "/", "web", "f", "contributing", "irc.libera.chat", "venv", "requirements", "machine", "attention", "contributor", "tutorial", "modifications", "improvement", "page", "change", "8dde9e28d9", "package", "process", "origin", "conduct", "bottom", "working", "commit", "command", "assertions", "builds", "example", "constraints", "users", "n’t", "unit", "importerror", "pip", "\\.virtualenvs\\djangodev", "sqlite", "fix", "dot", "mymodel", "backend", "self", "end", "source", "criterion", "runtests.py", "case", "argument", "scratch", "class", "community", "arrow", "stream", "regression", "thousands", "dev", "programmers", "request", "introduction", "version", "github", "tickets", "writing", "install", "windows", "return", "81518187b3", "html", "study", "environments", "function", "developers", "thing", ".virtualenvs/", "list", "bug", "details", "trouble", "areas", "bit", "e", "ticket", "a", "steps", "editor", "data", "teeth", "my_objects", "app", "meatier", "pull", "parts", "cover", "name", "home", "mb", "environment", "releases/2.2.txt", "flags", "header", "part", "activate", "file", "review", "one", "-40,6", "~250", "dependencies", "notes", "mod:`django.shortcuts", "returns", "window", "installation", "programming", "errors", "python", "’s", "@@", "+40,11", "link", "addition", "concerns", "shortcut", "history", "homepath%", "mod:`django.contrib.admin", "maketoasttests", "kwargs", "hands", "cd", "configuration", "tooling", "keys", "folder", "http404(\"no", "self.assertequal(make_toast", "trac", "understanding", "transfer", "failures", "test_make_toast.py", "note", "ticket_99999", "path", "projects", "toast", "others", "django", "pickings", "tools", "message", "contribution", "directory", "speed", "look", "failure", "push", "topics", "forum", "selenium", "simpletestcase", "minor", "tutorials", "make_toast", "regressions", "*", "text", "set", "module", "contributors", "packages", "skills", "matrix", "requests", "database", "operating", "http", "-0,0", "func", "etiquette", "7ab1df0e9d", "contributions", "libraries", "resolve_url(to", "reference", "codebase", "download", "features", "code", "checkout", "feature", "=", "models", "road", "revision", "links", "django.shortcuts", "key", "build", "step"], "type": "documentation"},
{"title": "What to read next", "url": "https://docs.djangoproject.com/en/5.1/intro/whatsnext/", "content": "What to read next ¶ So you’ve read all the introductory material and have\ndecided you’d like to keep using Django. We’ve only just scratched the surface\nwith this intro (in fact, if you’ve read every single word, you’ve read about\n5% of the overall documentation). So what’s next? Well, we’ve always been big fans of learning by doing. At this point you should\nknow enough to start a project of your own and start fooling around. As you need\nto learn new tricks, come back to the documentation. We’ve put a lot of effort into making Django’s documentation useful, clear and\nas complete as possible. The rest of this document explains more about how the\ndocumentation works so that you can get the most out of it. (Yes, this is documentation about documentation. Rest assured we have no plans\nto write a document about how to read the document about documentation.) Finding documentation ¶ Django’s got a lot of documentation – almost 450,000 words and counting –\nso finding what you need can sometimes be tricky. A good place to start\nis the Index . We also recommend using the builtin search feature. Or you can just browse around! How the documentation is organized ¶ Django’s main documentation is broken up into “chunks” designed to fill\ndifferent needs: The introductory material is designed for people new\nto Django – or to web development in general. It doesn’t cover anything\nin depth, but instead gives a high-level overview of how developing in\nDjango “feels”. The topic guides , on the other hand, dive deep into\nindividual parts of Django. There are complete guides to Django’s model system , template engine , forms framework , and much\nmore. This is probably where you’ll want to spend most of your time; if you work\nyour way through these guides you should come out knowing pretty much\neverything there is to know about Django. Web development is often broad, not deep – problems span many domains.\nWe’ve written a set of how-to guides that answer\ncommon “How do I …?” questions. Here you’ll find information about generating PDFs with Django , writing\ncustom template tags , and more. Answers to really common questions can also be found in the FAQ . The guides and how-to’s don’t cover every single class, function, and\nmethod available in Django – that would be overwhelming when you’re\ntrying to learn. Instead, details about individual classes, functions,\nmethods, and modules are kept in the reference . This is\nwhere you’ll turn to find the details of a particular function or\nwhatever you need. If you are interested in deploying a project for public use, our docs have several guides for various deployment\nsetups as well as a deployment checklist for some things you’ll need to think about. Finally, there’s some “specialized” documentation not usually relevant to\nmost developers. This includes the release notes and internals documentation for those who want to add\ncode to Django itself, and a few other things that don’t fit elsewhere . How documentation is updated ¶ Just as the Django code base is developed and improved on a daily basis, our\ndocumentation is consistently improving. We improve documentation for several\nreasons: To make content fixes, such as grammar/typo corrections. To add information and/or examples to existing sections that need to be\nexpanded. To document Django features that aren’t yet documented. (The list of\nsuch features is shrinking but exists nonetheless.) To add documentation for new features as new features get added, or as\nDjango APIs or behaviors change. Django’s documentation is kept in the same source control system as its code. It\nlives in the docs directory of our Git repository. Each document\nonline is a separate text file in the repository. Where to get it ¶ You can read Django documentation in several ways. They are, in order of\npreference: On the web ¶ The most recent version of the Django documentation lives at https://docs.djangoproject.com/en/dev/ . These HTML pages are generated\nautomatically from the text files in source control. That means they reflect the\n“latest and greatest” in Django – they include the very latest corrections and\nadditions, and they discuss the latest Django features, which may only be\navailable to users of the Django development version. (See Differences between versions below.) We encourage you to help improve the docs by submitting changes, corrections and\nsuggestions in the ticket system . The Django developers actively monitor the\nticket system and use your feedback to improve the documentation for everybody. Note, however, that tickets should explicitly relate to the documentation,\nrather than asking broad tech-support questions. If you need help with your\nparticular Django setup, try the django-users mailing list or the #django\nIRC channel instead. In plain text ¶ For offline reading, or just for convenience, you can read the Django\ndocumentation in plain text. If you’re using an official release of Django, the zipped package (tarball) of\nthe code includes a docs/ directory, which contains all the documentation\nfor that release. If you’re using the development version of Django (aka the main branch), the docs/ directory contains all of the documentation. You can update your\nGit checkout to get the latest changes. One low-tech way of taking advantage of the text documentation is by using the\nUnix grep utility to search for a phrase in all of the documentation. For\nexample, this will show you each mention of the phrase “max_length” in any\nDjango document: /  $ grep -r max_length /path/to/django/docs/ ...\\> grep -r max_length \\path\\to\\django\\docs\\ As HTML, locally ¶ You can get a local copy of the HTML documentation following a few steps: Django’s documentation uses a system called Sphinx to convert from\nplain text to HTML. You’ll need to install Sphinx by either downloading\nand installing the package from the Sphinx website, or with pip : /  $ python -m pip install Sphinx ...\\> py -m pip install Sphinx Then, use the included Makefile to turn the documentation into HTML: $ cd path/to/django/docs $ make html You’ll need GNU Make installed for this. If you’re on Windows you can alternatively use the included batch file: cd path\\to\\django\\docs\nmake.bat html The HTML documentation will be placed in docs/_build/html . Differences between versions ¶ The text documentation in the main branch of the Git repository contains the\n“latest and greatest” changes and additions. These changes include\ndocumentation of new features targeted for Django’s next feature\nrelease . For that reason, it’s worth pointing out our policy\nto highlight recent changes and additions to Django. We follow this policy: The development documentation at https://docs.djangoproject.com/en/dev/ is\nfrom the main branch. These docs correspond to the latest feature release,\nplus whatever features have been added/changed in the framework since then. As we add features to Django’s development version, we update the\ndocumentation in the same Git commit transaction. To distinguish feature changes/additions in the docs, we use the phrase:\n“New in Django Development version” for the version of Django that hasn’t\nbeen released yet, or “New in version X.Y” for released versions. Documentation fixes and improvements may be backported to the last release\nbranch, at the discretion of the merger, however, once a version of Django is no longer supported , that version of the\ndocs won’t get any further updates. The main documentation web page includes links to documentation for\nprevious versions. Be sure you are using the version of the docs\ncorresponding to the version of Django you are using!", "keywords": ["index", "website", "path\\to\\django\\docs", "py", "material", "setups", "tech", "differences", "template", "support", "control", "grep", "%", "git", "tarball", "docs", "guides", "order", "changes", "basis", "documentation", "questions", "\\", "development", "intro", "place", "problems", "help", "reason", "time", "overview", "classes", "release", "additions", "method", "feedback", "x.y", "hand", "convenience", "irc", "system", "rest", "branch", "modules", "preference", "files", "use", "utility", "new", "ways", "information", "project", "discretion", "topic", "point", "repository", "apis", "way", "versions", "behaviors", "¶", "surface", "answers", "copy", "custom", "web", "/", "methods", "effort", "?", "transaction", "model", "max_length", "gnu", "suggestions", "page", "typo", "pdfs", "package", "base", "word", "example", "fixes", "users", "checklist", "pip", "functions", "channel", "counting", "content", "internals", "deployment", "people", "source", "unix", "fans", "class", "online", "words", "version", "tickets", "advantage", "windows", "html", "needs", "engine", "function", "developers", "examples", "things", "list", "details", "ticket", "policy", "steps", "https://docs.djangoproject.com/en/dev/", "setup", "parts", "grammar", "file", "notes", "’s", "python", "reasons", "corrections", "domains", "cd", "tricks", "sections", "reading", "sphinx", "faq", "path", "level", "django", "phrase", "directory", "fact", "depth", "document", "tags", "lot", "set", "framework", "text", "plans", "mention", "mailing", "search", "makefile", "docs/_build", "forms", "reference", "features", "code", "checkout", "feature", "pages", "merger", "updates", "links", "improvements", "batch", "chunks"], "type": "documentation"},
{"title": "Advanced tutorial: How to write reusable apps", "url": "https://docs.djangoproject.com/en/5.1/intro/reusable-apps/", "content": "Advanced tutorial: How to write reusable apps ¶ This advanced tutorial begins where Tutorial 8 left off. We’ll be turning our web-poll into a standalone Python package\nyou can reuse in new projects and share with other people. If you haven’t recently completed Tutorials 1–8, we encourage you to review\nthese so that your example project matches the one described below. Reusability matters ¶ It’s a lot of work to design, build, test and maintain a web application. Many\nPython and Django projects share common problems. Wouldn’t it be great if we\ncould save some of this repeated work? Reusability is the way of life in Python. The Python Package Index (PyPI) has a vast range of packages you can use in your own\nPython programs. Check out Django Packages for\nexisting reusable apps you could incorporate in your project. Django itself is\nalso a normal Python package. This means that you can take existing Python\npackages or Django apps and compose them into your own web project. You only\nneed to write the parts that make your project unique. Let’s say you were starting a new project that needed a polls app like the one\nwe’ve been working on. How do you make this app reusable? Luckily, you’re well\non the way already. In Tutorial 1 , we saw how we\ncould decouple polls from the project-level URLconf using an include .\nIn this tutorial, we’ll take further steps to make the app easy to use in new\nprojects and ready to publish for others to install and use. Package? App? A Python package provides a way of grouping related Python code for\neasy reuse. A package contains one or more files of Python code (also known\nas “modules”). A package can be imported with import foo.bar or from foo import bar . For a directory (like polls ) to form a package, it must contain\na special file __init__.py , even if this file is empty. A Django application is a Python package that is specifically intended\nfor use in a Django project. An application may use common Django\nconventions, such as having models , tests , urls , and views submodules. Later on we use the term packaging to describe the process of making a\nPython package easy for others to install. It can be a little confusing, we\nknow. Your project and your reusable app ¶ After the previous tutorials, our project should look like this: djangotutorial/\n    manage.py\n    mysite/\n        __init__.py\n        settings.py\n        urls.py\n        asgi.py\n        wsgi.py\n    polls/\n        __init__.py\n        admin.py\n        apps.py\n        migrations/\n            __init__.py\n            0001_initial.py\n        models.py\n        static/\n            polls/\n                images/\n                    background.png\n                style.css\n        templates/\n            polls/\n                detail.html\n                index.html\n                results.html\n        tests.py\n        urls.py\n        views.py\n    templates/\n        admin/\n            base_site.html You created djangotutorial/templates in Tutorial 7 , and polls/templates in Tutorial 3 . Now perhaps it is clearer why we chose\nto have separate template directories for the project and application:\neverything that is part of the polls application is in polls . It makes the\napplication self-contained and easier to drop into a new project. The polls directory could now be copied into a new Django project and\nimmediately reused. It’s not quite ready to be published though. For that, we\nneed to package the app to make it easy for others to install. Installing some prerequisites ¶ The current state of Python packaging is a bit muddled with various tools. For\nthis tutorial, we’re going to use setuptools to build our package. It’s\nthe recommended packaging tool (merged with the distribute fork). We’ll\nalso be using pip to install and uninstall it. You should install these\ntwo packages now. If you need help, you can refer to how to install\nDjango with pip . You can install setuptools the same way. Packaging your app ¶ Python packaging refers to preparing your app in a specific format that can\nbe easily installed and used. Django itself is packaged very much like\nthis. For a small app like polls, this process isn’t too difficult. First, create a parent directory for the package, outside of your Django\nproject. Call this directory django-polls . Choosing a name for your app When choosing a name for your package, check PyPI to avoid naming\nconflicts with existing packages. We recommend using a django- prefix for package names, to identify your package as specific to\nDjango, and a corresponding django_ prefix for your module name. For\nexample, the django-ratelimit package contains the django_ratelimit module. Application labels (that is, the final part of the dotted path to\napplication packages) must be unique in INSTALLED_APPS .\nAvoid using the same label as any of the Django contrib packages , for example auth , admin , or messages . Move the polls directory into django-polls directory, and rename it\nto django_polls . Edit django_polls/apps.py so that name refers to the\nnew module name and add label to give a short name for\nthe app: django-polls/django_polls/apps.py ¶ from django.apps import AppConfig class PollsConfig ( AppConfig ): default_auto_field = \"django.db.models.BigAutoField\" name = \"django_polls\" label = \"polls\" Create a file django-polls/README.rst with the following contents: django-polls/README.rst ¶ ============ django-polls ============ django-polls is a Django app to conduct web-based polls. For each\nquestion, visitors can choose between a fixed number of answers.\n\nDetailed documentation is in the \"docs\" directory. Quick start ----------- 1. Add \"polls\" to your INSTALLED_APPS setting like this::\n\n    INSTALLED_APPS = [ ..., \"django_polls\", ] 2. Include the polls URLconf in your project urls.py like this::\n\n    path(\"polls/\", include(\"django_polls.urls\")), 3. Run ``python manage.py migrate`` to create the models. 4. Start the development server and visit the admin to create a poll. 5. Visit the ``/polls/`` URL to participate in the poll. Create a django-polls/LICENSE file. Choosing a license is beyond the\nscope of this tutorial, but suffice it to say that code released publicly\nwithout a license is useless . Django and many Django-compatible apps are\ndistributed under the BSD license; however, you’re free to pick your own\nlicense. Just be aware that your licensing choice will affect who is able\nto use your code. Next we’ll create the pyproject.toml file which details how to build and\ninstall the app. A full explanation of this file is beyond the scope of this\ntutorial, but the Python Packaging User Guide has a good\nexplanation. Create the django-polls/pyproject.toml file with the\nfollowing contents: django-polls/pyproject.toml ¶ [build-system] requires = [ \"setuptools>=61.0\" ] build-backend = \"setuptools.build_meta\" [project] name = \"django-polls\" version = \"0.1\" dependencies = [ \"django>=X.Y\" , # Replace \"X.Y\" as appropriate ] description = \"A Django app to conduct web-based polls.\" readme = \"README.rst\" requires-python = \">= 3.10\" authors = [ { name = \"Your Name\" , email = \"yourname@example.com\" }, ] classifiers = [ \"Environment :: Web Environment\" , \"Framework :: Django\" , \"Framework :: Django :: X.Y\" , # Replace \"X.Y\" as appropriate \"Intended Audience :: Developers\" , \"License :: OSI Approved :: BSD License\" , \"Operating System :: OS Independent\" , \"Programming Language :: Python\" , \"Programming Language :: Python :: 3\" , \"Programming Language :: Python :: 3 :: Only\" , \"Programming Language :: Python :: 3.10\" , \"Programming Language :: Python :: 3.11\" , \"Programming Language :: Python :: 3.12\" , \"Programming Language :: Python :: 3.13\" , \"Topic :: Internet :: WWW/HTTP\" , \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\" , ] [project.urls] Homepage = \"https://www.example.com/\" Many common files and Python modules and packages are included in the\npackage by default. To include additional files, we’ll need to create a MANIFEST.in file. To include the templates and static files, create a\nfile django-polls/MANIFEST.in with the following contents: django-polls/MANIFEST.in ¶ recursive-include django_polls/static *\nrecursive-include django_polls/templates * It’s optional, but recommended, to include detailed documentation with your\napp. Create an empty directory django-polls/docs for future\ndocumentation. Note that the docs directory won’t be included in your package unless\nyou add some files to it. Many Django apps also provide their documentation\nonline through sites like readthedocs.org . Check that the build package is installed ( python -m pip install build ) and try building your package by running python -m build inside django-polls . This creates a directory called dist and builds your\nnew package into source and binary formats, django-polls-0.1.tar.gz and django_polls-0.1-py3-none-any.whl . For more information on packaging, see Python’s Tutorial on Packaging and\nDistributing Projects . Using your own package ¶ Since we moved the polls directory out of the project, it’s no longer\nworking. We’ll now fix this by installing our new django-polls package. Installing as a user library The following steps install django-polls as a user library. Per-user\ninstalls have a lot of advantages over installing the package system-wide,\nsuch as being usable on systems where you don’t have administrator access\nas well as preventing the package from affecting system services and other\nusers of the machine. Note that per-user installations can still affect the behavior of system\ntools that run as that user, so using a virtual environment is a more robust\nsolution (see below). To install the package, use pip (you already installed it , right?): python -m pip install --user django-polls/dist/django-polls-0.1.tar.gz Update mysite/settings.py to point to the new module name: INSTALLED_APPS = [ \"django_polls.apps.PollsConfig\" , ... , ] Update mysite/urls.py to point to the new module name: urlpatterns = [ path ( \"polls/\" , include ( \"django_polls.urls\" )), ... , ] Run the development server to confirm the project continues to work. Publishing your app ¶ Now that we’ve packaged and tested django-polls , it’s ready to share with\nthe world! If this wasn’t just an example, you could now: Email the package to a friend. Upload the package on your website. Post the package on a public repository, such as the Python Package Index\n(PyPI) . packaging.python.org has a good\ntutorial for doing this. Installing Python packages with a virtual environment ¶ Earlier, we installed django-polls as a user library. This has some\ndisadvantages: Modifying the user libraries can affect other Python software on your system. You won’t be able to run multiple versions of this package (or others with\nthe same name). Typically, these situations only arise once you’re maintaining several Django\nprojects. When they do, the best solution is to use venv . This tool allows you to maintain multiple isolated\nPython environments, each with its own copy of the libraries and package\nnamespace.", "keywords": ["state", "urlconf", "explanation", "index", "edit", "replace", "friend", "website", "work", "distributing", "software", "packaging", "manifest.in", "range", "template", "audience", "url", "):", "systems", "docs", "templates", "documentation", "-", "problems", "development", "programs", "intended", "help", "application", "prefix", "mysite", "_", "default_auto_field", "migrate", "x.y", "tests", "reuse", "1–8", "behavior", "system", "directories", "authors", "readme", "conflicts", "modules", "labels", "files", "fork", "solution", "use", "packaging.python.org", "bsd", "import", "messages", "bar", "installations", "information", "reusability", "urlpatterns", "project", "#", "topic", "settings.py", "repository", "test", "way", "versions", "¶", "default", "disadvantages", "urls.py", "answers", "services", "independent", "copy", "web", "naming", "venv", "machine", "homepage", "update", "submodules", "tutorial", "server", "urls", "choice", "sites", "format", "package", "process", "contrib", "access", "polls-0.1.tar.gz", "example", "django.db.models", "users", "guide", "tool", "pip", "license", "email", "installed_apps", "content", "backend", "self", "label", "source", "people", "administrator", "licensing", "ratelimit", "class", "number", "classifiers", "include(\"django_polls.urls", "include", "version", "install", "pollsconfig", "environments", "developers", "term", "bit", "question", "internet", "advantages", "steps", "polls", "app", "setuptools>=61.0", "www", "django.apps", "parts", "apps.py", "installs", "name", "poll", "prerequisites", "environment", "user", "init__.py", "part", "file", "world", "one", "library", "admin", "dependencies", "django>=x.y", "programming", "django_polls", "django_polls-0.1-py3-none-any.whl", "python", "parent", "life", "description", "formats", "situations", "results.html", "setuptools", "others", "projects", "level", "names", "django", "path", "dist", "tools", "yourname@example.com", "directory", "namespace", "auth", "index.html", "scope", "tutorials", "lot", "framework", "osi", "module", "apps", "project.urls", "packages", "contents", "foo", "wsgi.py", "http", "bigautofield", "libraries", "visitors", "code", "models", "=", "conventions", "detail.html", "appconfig", "language", "django_ratelimit", "build", "pypi"], "type": "documentation"},
{"title": "Writing your first Django app, part 8", "url": "https://docs.djangoproject.com/en/5.1/intro/tutorial08/", "content": "Writing your first Django app, part 8 ¶ This tutorial begins where Tutorial 7 left off. We’ve\nbuilt our web-poll application and will now look at third-party packages. One of\nDjango’s strengths is the rich ecosystem of third-party packages. They’re\ncommunity developed packages that can be used to quickly improve the feature set\nof an application. This tutorial will show how to add Django Debug Toolbar , a commonly used third-party package. The Django Debug\nToolbar has ranked in the top three most used third-party packages in the\nDjango Developers Survey in recent years. Where to get help: If you’re having trouble going through this tutorial, please head over to\nthe Getting Help section of the FAQ. Installing Django Debug Toolbar ¶ Django Debug Toolbar is a useful tool for debugging Django web applications.\nIt’s a third-party package that is maintained by the community organization Django Commons . The toolbar helps you\nunderstand how your application functions and to identify problems. It does so\nby providing panels that provide debug information about the current request\nand response. To install a third-party application like the toolbar, you need to install\nthe package by running the below command within an activated virtual\nenvironment. This is similar to our earlier step to install Django . /  $ python -m pip install django-debug-toolbar ...\\> py -m pip install django-debug-toolbar Third-party packages that integrate with Django need some post-installation\nsetup to integrate them with your project. Often you will need to add the\npackage’s Django app to your INSTALLED_APPS setting. Some packages\nneed other changes, like additions to your URLconf ( urls.py ). Django Debug Toolbar requires several setup steps. Follow them in its\ninstallation guide .\nThe steps are not duplicated in this tutorial, because as a third-party\npackage, it may change separately to Django’s schedule. Once installed, you should be able to see the DjDT “handle” on the right side\nof the browser window when you browse to http://localhost:8000/admin/ .\nClick it to open the debug toolbar and use the tools in each panel. See the panels documentation page for more information on what the panels show. Getting help from others ¶ At some point you will run into a problem, for example the\ntoolbar may not render. When this happens and you’re unable to\nresolve the issue yourself, there are options available to you. If the problem is with a specific package, check if there’s a\ntroubleshooting of FAQ in the package’s documentation. For example the\nDjango Debug Toolbar has a Tips section that\noutlines troubleshooting options. Search for similar issues on the package’s issue tracker. Django Debug\nToolbar’s is on GitHub . Consult the Django Forum . Join the Django Discord server . Join the #Django IRC channel on Libera.chat . Installing other third-party packages ¶ There are many more third-party packages, which you can find using the\nfantastic Django resource, Django Packages . It can be difficult to know what third-party packages you should use. This\ndepends on your needs and goals. Sometimes it’s fine to use a package that’s\nin its alpha state. Other times, you need to know it’s production ready. Adam Johnson has a blog post that outlines\na set of characteristics that qualifies a package as “well maintained”.\nDjango Packages shows data for some of these characteristics, such as when the\npackage was last updated. As Adam points out in his post, when the answer to one of the questions is\n“no”, that’s an opportunity to contribute. What’s next? ¶ The beginner tutorial ends here. In the meantime, you might want to check out\nsome pointers on where to go from here . If you are familiar with Python packaging and interested in learning how to\nturn polls into a “reusable app”, check out Advanced tutorial: How to\nwrite reusable apps .", "keywords": ["state", "urlconf", "py", "browser", "packaging", "debug", "panel", "schedule", "admin/", "\\", "changes", "discord", "documentation", "-", "questions", "problems", "survey", "help", "application", "answer", "additions", "troubleshooting", "party", "irc", "organization", "problem", "times", "information", "project", "point", "handle", "section", "¶", "urls.py", "resource", "web", "adam", "side", "tutorial", "server", "page", "package", "meantime", "command", "example", "guide", "tool", "pip", "functions", "installed_apps", "channel", "production", "toolbar", "years", "opportunity", "community", "panels", "applications", "request", "github", "blog", "install", "needs", "third", "alpha", "tips", "developers", "trouble", "steps", "data", "polls", "setup", "app", "commons", "options", "environment", "part", "tracker", "ecosystem", "installation", "window", "goals", "python", "libera.chat", "issue", "response", "johnson", "beginner", "characteristics", "faq", "others", "post", "django", "tools", "djdt", "forum", "set", "apps", "packages", "search", "strengths", "feature", "pointers", "step", "issues"], "type": "documentation"},
{"title": "How to install Django", "url": "https://docs.djangoproject.com/en/5.1/topics/install/", "content": "How to install Django ¶ This document will get you up and running with Django. Install Python ¶ Django is a Python web framework. See What Python version can I use with Django? for\ndetails. Get the latest version of Python at https://www.python.org/downloads/ or with\nyour operating system’s package manager. Python on Windows If you are just starting with Django and using Windows, you may find How to install Django on Windows useful. Install Apache and mod_wsgi ¶ If you just want to experiment with Django, skip ahead to the next\nsection; Django includes a lightweight web server you can use for\ntesting, so you won’t need to set up Apache until you’re ready to\ndeploy Django in production. If you want to use Django on a production site, use Apache with mod_wsgi . mod_wsgi operates in one of two modes: embedded\nmode or daemon mode. In embedded mode, mod_wsgi is similar to\nmod_perl – it embeds Python within Apache and loads Python code into\nmemory when the server starts. Code stays in memory throughout the\nlife of an Apache process, which leads to significant performance\ngains over other server arrangements. In daemon mode, mod_wsgi spawns\nan independent daemon process that handles requests. The daemon\nprocess can run as a different user than the web server, possibly\nleading to improved security. The daemon process can be restarted\nwithout restarting the entire Apache web server, possibly making\nrefreshing your codebase more seamless. Consult the mod_wsgi\ndocumentation to determine which mode is right for your setup. Make\nsure you have Apache installed with the mod_wsgi module activated.\nDjango will work with any version of Apache that supports mod_wsgi. See How to use Django with mod_wsgi for information on how to configure mod_wsgi once you have it\ninstalled. If you can’t use mod_wsgi for some reason, fear not: Django supports many other\ndeployment options. One is uWSGI ; it works\nvery well with nginx . Additionally, Django follows the WSGI spec\n( PEP 3333 ), which allows it to run on a variety of server platforms. Get your database running ¶ If you plan to use Django’s database API functionality, you’ll need to make\nsure a database server is running. Django supports many different database\nservers and is officially supported with PostgreSQL , MariaDB , MySQL , Oracle and SQLite . If you are developing a small project or something you don’t plan to deploy in\na production environment, SQLite is generally the best option as it doesn’t\nrequire running a separate server. However, SQLite has many differences from\nother databases, so if you are working on something substantial, it’s\nrecommended to develop with the same database that you plan on using in\nproduction. In addition to the officially supported databases, there are backends\nprovided by 3rd parties that allow you to use other\ndatabases with Django. To use another database other than SQLite, you’ll need to make sure that the\nappropriate Python database bindings are installed: If you’re using PostgreSQL, you’ll need the psycopg or psycopg2 package. Refer to the PostgreSQL notes for further\ndetails. If you’re using MySQL or MariaDB, you’ll need a DB API driver like mysqlclient . See notes for the MySQL\nbackend for details. If you’re using SQLite you might want to read the SQLite backend notes . If you’re using Oracle, you’ll need to install oracledb , but please read the notes for the Oracle backend for details regarding\nsupported versions of both Oracle and oracledb . If you’re using an unofficial 3rd party backend, please consult the\ndocumentation provided for any additional requirements. And ensure that the following keys in the 'default' item of the DATABASES dictionary match your database connection settings: ENGINE – Either 'django.db.backends.sqlite3' , 'django.db.backends.postgresql' , 'django.db.backends.mysql' , or 'django.db.backends.oracle' . Other backends are also available . NAME – The name of your database. If you’re using SQLite, the\ndatabase will be a file on your computer. In that case, NAME should be\nthe full absolute path, including the filename of that file. You don’t need\nto create anything beforehand; the database file will be created\nautomatically when needed. The default value, BASE_DIR / 'db.sqlite3' ,\nwill store the file in your project directory. For databases other than SQLite If you are not using SQLite as your database, additional settings such as USER , PASSWORD , and HOST must be added.\nFor more details, see the reference documentation for DATABASES . Also, make sure that you’ve created the database by this point. Do that\nwith “ CREATE DATABASE database_name; ” within your database’s\ninteractive prompt. If you plan to use Django’s manage.py migrate command to automatically\ncreate database tables for your models (after first installing Django and\ncreating a project), you’ll need to ensure that Django has permission to create\nand alter tables in the database you’re using; if you plan to manually create\nthe tables, you can grant Django SELECT , INSERT , UPDATE and DELETE permissions. After creating a database user with these permissions,\nyou’ll specify the details in your project’s settings file, see DATABASES for details. If you’re using Django’s testing framework to test\ndatabase queries, Django will need permission to create a test database. Install the Django code ¶ Installation instructions are slightly different depending on whether you’re\ninstalling a distribution-specific package, downloading the latest official\nrelease, or fetching the latest development version. Installing an official release with pip ¶ This is the recommended way to install Django. Install pip . The easiest is to use the standalone pip installer . If your\ndistribution already has pip installed, you might need to update it if\nit’s outdated. If it’s outdated, you’ll know because installation won’t\nwork. Take a look at venv . This tool provides\nisolated Python environments, which are more practical than installing\npackages systemwide. It also allows installing packages without\nadministrator privileges. The contributing tutorial walks through how to create a virtual environment. After you’ve created and activated a virtual environment, enter the command: /  $ python -m pip install Django ...\\> py -m pip install Django Installing a distribution-specific package ¶ Check the distribution specific notes to see if\nyour platform/distribution provides official Django packages/installers.\nDistribution-provided packages will typically allow for automatic installation\nof dependencies and supported upgrade paths; however, these packages will rarely\ncontain the latest release of Django. Installing the development version ¶ Tracking Django development If you decide to use the latest development version of Django,\nyou’ll want to pay close attention to the development timeline ,\nand you’ll want to keep an eye on the release notes for the\nupcoming release . This will help you stay\non top of any new features you might want to use, as well as any changes\nyou’ll need to make to your code when updating your copy of Django.\n(For stable releases, any necessary changes are documented in the\nrelease notes.) If you’d like to be able to update your Django code occasionally with the\nlatest bug fixes and improvements, follow these instructions: Make sure that you have Git installed and that you can run its commands\nfrom a shell. (Enter git help at a shell prompt to test this.) Check out Django’s main development branch like so: /  $ git clone https://github.com/django/django.git ...\\> git clone https://github.com/django/django.git This will create a directory django in your current directory. Make sure that the Python interpreter can load Django’s code. The most\nconvenient way to do this is to use a virtual environment and pip . The contributing tutorial walks through how to\ncreate a virtual environment. After setting up and activating the virtual environment, run the following\ncommand: /  $ python -m pip install -e django/ ...\\> py -m pip install -e django\\ This will make Django’s code importable, and will also make the django-admin utility command available. In other words, you’re all\nset! When you want to update your copy of the Django source code, run the command git pull from within the django directory. When you do this, Git will\ndownload any changes.", "keywords": ["base_dir", "dictionary", "connection", "permissions", "instructions", "py", "driver", "work", "mysql", "differences", "handles", "interpreter", "git", "\\", "changes", "documentation", "distribution", "development", "servers", "mod_wsgi", "settings", "help", "reason", "computer", "release", "oracle", "django.db.backends.oracle", "party", "shell", "migrate", "delete", "testing", "system", "commands", "branch", "site", "mode", "performance", "mariadb", "manager", "utility", "django.db.backends.postgresql", "releases", "clone", "information", "item", "project", "oracledb", "permission", "paths", "upgrade", "nginx", "point", "variety", "test", "section", "versions", "way", "parties", "¶", "default", "option", "eye", "copy", "web", "/", "arrangements", "venv", "requirements", "daemon", "attention", "update", "https://www.python.org/downloads/", "tutorial", "server", "apache", "select", "uwsgi", "package", "process", "top", "command", "timeline", "fixes", "n’t", "tool", "pip", "value", "sqlite", "production", "backend", "deployment", "source", "administrator", "case", "words", "version", "bindings", "install", "windows", "platform", "tables", "engine", "create", "installers", "environments", "django.db.backends.mysql", "bug", "details", "filename", "setup", "psycopg", "name", "options", "environment", "gains", "user", "spec", "https://github.com/django/django.git", "file", "queries", "mod_perl", "postgresql", "dependencies", "notes", "installation", "python", "tracking", "importable", "addition", "life", "spawns", "password", "manage.py", "keys", "api", "platforms", "prompt", "host", "insert", "path", "django", "directory", "look", "pep", "django.db.backends.sqlite3", "document", "framework", "module", "backends", "functionality", "packages", "requests", "database", "operating", "memory", "databases", "db", "installer", "codebase", "reference", "security", "features", "code", "models", "modes", "wsgi", "mysqlclient", "improvements", "db.sqlite3", "privileges"], "type": "documentation"},
{"title": "The Django source code repository", "url": "https://docs.djangoproject.com/en/5.1/internals/git/", "content": "The Django source code repository ¶ When deploying a Django application into a real production environment, you\nwill almost always want to use an official packaged release of Django . However, if you’d like to try out in-development code from an upcoming release\nor contribute to the development of Django, you’ll need to obtain a clone of\nDjango’s source code repository. This document covers the way the code repository is laid out and how to work\nwith and find things in it. High-level overview ¶ The Django source code repository uses Git to track changes to the code\nover time, so you’ll need a copy of the Git client (a program called git )\non your computer, and you’ll want to familiarize yourself with the basics of\nhow Git works. Git’s website offers downloads for various operating systems. The site also\ncontains vast amounts of documentation . The Django Git repository is located online at github.com/django/django . It contains the full source code for all\nDjango releases, which you can browse online. The Git repository includes several branches : main contains the main in-development code which will become\nthe next packaged release of Django. This is where most development\nactivity is focused. stable/A.B.x are the branches where release preparation work happens.\nThey are also used for bugfix and security releases which occur as necessary\nafter the initial release of a feature version. The Git repository also contains tags . These are the exact revisions from\nwhich packaged Django releases were produced, since version 1.0. A number of tags also exist under the archive/ prefix for archived\nwork . The source code for the Djangoproject.com website can be found at github.com/django/djangoproject.com . The main branch ¶ If you’d like to try out the in-development code for the next release of\nDjango, or if you’d like to contribute to Django by fixing bugs or developing\nnew features, you’ll want to get the code from the main branch. Note Prior to March 2021, the main branch was called master . Note that this will get all of Django: in addition to the top-level django module containing Python code, you’ll also get a copy of Django’s\ndocumentation, test suite, packaging scripts and other miscellaneous bits.\nDjango’s code will be present in your clone as a directory named django . To try out the in-development code with your own applications, place the\ndirectory containing your clone on your Python import path. Then import statements which look for Django will find the django module within your\nclone. If you’re going to be working on Django’s code (say, to fix a bug or\ndevelop a new feature), you can probably stop reading here and move\nover to the documentation for contributing to Django , which covers things like the preferred\ncoding style and how to generate and submit a patch. Stable branches ¶ Django uses branches to prepare for releases of Django. Each major release\nseries has its own stable branch. These branches can be found in the repository as stable/A.B.x branches and will be created right after the first alpha is tagged. For example, immediately after Django 1.5 alpha 1 was tagged, the branch stable/1.5.x was created and all further work on preparing the code for the\nfinal 1.5 release was done there. These branches also provide bugfix and security support as described in Supported versions . For example, after the release of Django 1.5, the branch stable/1.5.x receives only fixes for security and critical stability bugs, which are\neventually released as Django 1.5.1 and so on, stable/1.4.x receives only\nsecurity and data loss fixes, and stable/1.3.x no longer receives any\nupdates. Historical information This policy for handling stable/A.B.x branches was adopted starting\nwith the Django 1.5 release cycle. Previously, these branches weren’t created until right after the releases\nand the stabilization work occurred on the main repository branch. Thus,\nno new feature development work for the next release of Django could be\ncommitted until the final release happened. For example, shortly after the release of Django 1.3 the branch stable/1.3.x was created. Official support for that release has expired,\nand so it no longer receives direct maintenance from the Django project.\nHowever, that and all other similarly named branches continue to exist, and\ninterested community members have occasionally used them to provide\nunofficial support for old Django releases. Tags ¶ Each Django release is tagged and signed by the releaser. The tags can be found on GitHub’s tags page. Archived feature-development work ¶ Historical information Since Django moved to Git in 2012, anyone can clone the repository and\ncreate their own branches, alleviating the need for official branches in\nthe source code repository. The following section is mostly useful if you’re exploring the repository’s\nhistory, for example if you’re trying to understand how some features were\ndesigned. Feature-development branches tend by their nature to be temporary. Some\nproduce successful features which are merged back into Django’s main branch to\nbecome part of an official release, but others do not; in either case, there\ncomes a time when the branch is no longer being actively worked on by any\ndeveloper. At this point the branch is considered closed. Django used to be maintained with the Subversion revision control system, that\nhas no standard way of indicating this. As a workaround, branches of Django\nwhich are closed and no longer maintained were moved into attic . A number of tags exist under the archive/ prefix to maintain a reference to\nthis and other work of historical interest. The following tags under the archive/attic/ prefix reference the tip of\nbranches whose code eventually became part of Django itself: boulder-oracle-sprint : Added support for Oracle databases to\nDjango’s object-relational mapper. This has been part of Django\nsince the 1.0 release. gis : Added support for geographic/spatial queries to Django’s\nobject-relational mapper. This has been part of Django since the 1.0\nrelease, as the bundled application django.contrib.gis . i18n : Added internationalization support to\nDjango. This has been part of Django since the 0.90 release. magic-removal : A major refactoring of both the internals and\npublic APIs of Django’s object-relational mapper. This has been part\nof Django since the 0.95 release. multi-auth : A refactoring of Django’s bundled\nauthentication framework which added support for authentication backends . This has\nbeen part of Django since the 0.95 release. new-admin : A refactoring of Django’s bundled\nadministrative application . This became part of\nDjango as of the 0.91 release, but was superseded by another\nrefactoring (see next listing) prior to the Django 1.0 release. newforms-admin : The second refactoring of Django’s bundled\nadministrative application. This became part of Django as of the 1.0\nrelease, and is the basis of the current incarnation of django.contrib.admin . queryset-refactor : A refactoring of the internals of Django’s\nobject-relational mapper. This became part of Django as of the 1.0\nrelease. unicode : A refactoring of Django’s internals to consistently use\nUnicode-based strings in most places within Django and Django\napplications. This became part of Django as of the 1.0 release. Additionally, the following tags under the archive/attic/ prefix reference\nthe tips of branches that were closed, but whose code was never merged into\nDjango, and the features they aimed to implement were never finished: full-history generic-auth multiple-db-support per-object-permissions schema-evolution schema-evolution-ng search-api sqlalchemy Finally, under the archive/ prefix, the repository contains soc20XX/<project> tags referencing the tip of branches that were used by\nstudents who worked on Django during the 2009 and 2010 Google Summer of Code\nprograms.", "keywords": ["djangoproject.com", "website", "permissions", "google", "boulder", "work", "removal", "packaging", "activity", "statements", "developer", "amounts", "branches", "maintenance", "support", "control", "mapper", "nature", "systems", "git", "changes", "tip", "basis", "documentation", "-", "patch", "development", "style", "programs", "places", "computer", "time", "application", "release", "overview", "prefix", "oracle", "django.contrib.gis", "queryset", "attic", "preparation", "a.b.x", "bugs", "1.5.1", "system", "branch", "site", "newforms", "sqlalchemy", "incarnation", "interest", "import", "ng", "clone", "releases", "stable/1.5.x", "information", "scripts", "project", "students", "point", "repository", "test", "apis", "way", "versions", "section", "authentication", "¶", "suite", "listing", "copy", "client", "need", "downloads", "magic", "page", "evolution", "example", "fixes", "stabilization", "subversion", "basics", "production", "github.com/django/django", "internals", "source", "case", "community", "number", "applications", "version", "github", "internationalization", "cycle", "refactoring", "summer", "alpha", "gis", "tips", "things", "series", "bug", "policy", "data", "sprint", "relational", "bits", "object", "environment", "part", "queries", "admin", "stable/1.4.x", "python", "releaser", "addition", "stable/1.3.x", "history", "api", "stability", "path", "others", "level", "django", "archive", "directory", "master", "bugfix", "document", "tags", "framework", "module", "backends", "program", "loss", "strings", "search", "operating", "unicode", "reference", "security", "features", "code", "refactor", "feature", "schema", "march", "revision", "updates", "multi", "members", "revisions", "workaround", "django.contrib.admin"], "type": "documentation"},
{"title": "How is Django Formed?", "url": "https://docs.djangoproject.com/en/5.1/internals/howto-release-django/", "content": "How is Django Formed? ¶ This document explains how to release Django. Please, keep these instructions up-to-date if you make changes! The point\nhere is to be descriptive, not prescriptive, so feel free to streamline or\notherwise make changes, but update this document accordingly! Overview ¶ There are three types of releases that you might need to make: Security releases: disclosing and fixing a vulnerability. This’ll\ngenerally involve two or three simultaneous releases – e.g.\n3.2.x, 4.0.x, and, depending on timing, perhaps a 4.1.x. Regular version releases: either a final release (e.g. 4.1) or a\nbugfix update (e.g. 4.1.1). Pre-releases: e.g. 4.2 alpha, beta, or rc. The short version of the steps involved is: If this is a security release, pre-notify the security distribution list\none week before the actual release. Proofread the release notes, looking for organization and writing errors.\nDraft a blog post and email announcement. Update version numbers and create the release package(s). Upload the package(s) to the djangoproject.com server. Verify package(s) signatures, check if they can be installed, and ensure\nminimal functionality. Upload the new version(s) to PyPI. Declare the new version in the admin on djangoproject.com . Post the blog entry and send out the email announcements. Update version numbers post-release. There are a lot of details, so please read on. Prerequisites ¶ You’ll need a few things before getting started. If this is your first release,\nyou’ll need to coordinate with another releaser to get all these things lined\nup, and write to the Ops mailing list requesting the required access and\npermissions. A Unix environment with these tools installed (in alphabetical order): bash git GPG make man hashing tools (typically md5sum , sha1sum , and sha256sum on\nLinux, or md5 and shasum on macOS) python ssh A GPG key pair. Ensure that the private part of this key is securely stored.\nThe public part needs to be uploaded to your GitHub account, and also to the\nJenkins server running the “confirm release” job. More than one GPG key If the key you want to use is not your default signing key, you’ll need to\nadd -u you@example.com to every GPG signing command shown below, where you@example.com is the email address associated with the key you want\nto use. A clean Python virtual environment per Django version being released, with\nthese required Python packages installed: $ python -m pip install build twine Access to Django’s project on PyPI to\nupload binaries, ideally with extra permissions to yank a release if necessary. Create a project-scoped token\nfollowing the official documentation and set up your $HOME/.pypirc file like this: ~/.pypirc ¶ [distutils] index-servers = pypi django [pypi] username = __token__ password = # User-scoped or project-scoped token, to set as the default. [django] repository = https://upload.pypi.org/legacy/ username = __token__ password = # A project token. Access to Django’s project on Transifex , with a Manager role. Generate\nan API Token in the user setting section and set up your $HOME/.transifexrc file like this: ~/.transifexrc ¶ [https://www.transifex.com] rest_hostname = https://rest.api.transifex.com token = # API token Access to the djangoproject.com server to upload files (using scp ). Access to the Django admin on djangoproject.com as a “Site maintainer”. Access to create a post in the Django Forum - Announcements category and to  send emails to\nthe following mailing lists: django-users django-developers django-announce Access to the django-security repo in GitHub. Among other things, this\nprovides access to the pre-notification distribution list (needed for\nsecurity release preparation tasks). Pre-release tasks ¶ A few items need to be taken care of before even beginning the release process.\nThis stuff starts about a week before the release; most of it can be done\nany time leading up to the actual release. 10 (or more) days before a security release ¶ Request the CVE IDs for the security\nissue(s) being released. One CVE ID per issue, requested with Vendor: djangoproject and Product: django . Generate the relevant (private) patch(es) using git format-patch , one\nfor the main branch and one for each stable branch being patched. A week before a security release ¶ Send out pre-notification exactly one week before the security release.\nThe template for that email and a list of the recipients are in the private django-security GitHub wiki. BCC the pre-notification recipients and be\nsure to include the relevant CVE IDs. Attach all the relevant patches\n(targeting main and the stable branches) and sign the email text with\nthe key you’ll use for the release, with a command like: $ gpg --clearsign --digest-algo SHA256 prenotification-email.txt Notify django-announce of the upcoming\nsecurity release with a general message such as: Notice of upcoming Django security releases (3.2.24, 4.2.10 and 5.0.2)\n\nDjango versions 5.0.2, 4.2.10, and 3.2.24 will be released on Tuesday,\nFebruary 6th, 2024 around 1500 UTC. They will fix one security defect\nwith severity \"moderate\".\n\nFor details of severity levels, see:\nhttps://docs.djangoproject.com/en/dev/internals/security/#how-django-discloses-security-issues A few days before any release ¶ As the release approaches, watch Trac to make sure no release blockers\nare left for the upcoming release. Check with the other mergers to make sure they don’t have any uncommitted\nchanges for the release. Proofread the release notes, including looking at the online version to catch any broken links or reST errors, and\nmake sure the release notes contain the correct date. Double-check that the release notes mention deprecation timelines\nfor any APIs noted as deprecated, and that they mention any changes\nin Python version support. Double-check that the release notes index has a link to the notes\nfor the new release; this will be in docs/releases/index.txt . If this is a feature release , ensure translations from Transifex\nhave been integrated. This is typically done by a separate translation’s\nmanager rather than the releaser, but here are the steps. This process is a\nbit lengthy so be sure to set aside 4-10 hours to do this, and ideally plan\nfor this task one or two days ahead of the release day. In addition to having a configured Transifex account, the tx CLI should be available in\nyour PATH . Then, you can fetch all the translations by running: $ python scripts/manage_translations.py fetch This command takes some time to run. When done, carefully inspect the output\nfor potential errors and/or warnings. If there are some, you will need to\ndebug and resolve them on a case by case basis. The recently fetched translations need some manual adjusting. First of all,\nthe PO-Revision-Date values must be manually bumped to be later than POT-Creation-Date . You can use a command similar to this to bulk update\nall the .po files (compare the diff against the relevant stable branch): $ git diff --name-only stable/5.0.x | grep \"\\.po\" | xargs sed -ri \"s/PO-Revision-Date: [0-9\\-]+ /PO-Revision-Date: $( date -I ) /g\" All the new .po files should be manually and carefully inspected to\navoid committing a change in a file without any new translations. Also,\nthere shouldn’t be any changes in the “plural forms”: if there are any\n(usually Spanish and French report changes for this) those will need\nreverting. Lastly, commit the changed/added files (both .po and .mo ) and create\na new PR targeting the stable branch of the corresponding release (example PR updating translations for 4.2 ). Update the django-admin manual page : $ cd docs\n$ make man\n$ man _build/man/django-admin.1 # do a quick sanity check $ cp _build/man/django-admin.1 man/django-admin.1 and then commit the changed man page. If this is the alpha release of a new series, create a new stable branch\nfrom main. For example, when releasing Django 4.2: $ git checkout -b stable/4.2.x origin/main\n$ git push origin -u stable/4.2.x:stable/4.2.x At the same time, update the django_next_version variable in docs/conf.py on the stable release branch to point to the new\ndevelopment version. For example, when creating stable/4.2.x , set django_next_version to '5.0' on the new branch. If this is the “dot zero” release of a new series, create a new branch from\nthe current stable branch in the django-docs-translations repository. For\nexample, when releasing Django 4.2: $ git checkout -b stable/4.2.x origin/stable/4.1.x\n$ git push origin stable/4.2.x:stable/4.2.x Write the announcement blog post for the release. You can enter it into the\nadmin at any time and mark it as inactive. Here are a few examples: example\nsecurity release announcement , example regular release announcement , example pre-release announcement . Actually rolling the release ¶ OK, this is the fun part, where we actually push out a release! If you’re\nissuing multiple releases , repeat these steps for each release. Check Jenkins is green for the version(s) you’re putting out. You\nprobably shouldn’t issue a release until it’s green, and you should make\nsure that the latest green run includes the changes that you are releasing. Cleanup the release notes for this release. Make these changes in main and backport to all branches where the release notes for a particular\nversion are located. For a feature release, remove the UNDER DEVELOPMENT header at the top\nof the release notes, remove the Expected prefix and update the\nrelease date, if necessary ( example commit ). For a patch release, remove the Expected prefix and update the\nrelease date for all releases, if necessary ( example commit ). A release always begins from a release branch, so you should make sure\nyou’re on an up-to-date stable branch. Also, you should have available a\nclean and dedicated virtual environment per version being released. For\nexample: $ git checkout stable/4.1.x\n$ git pull If this is a security release, merge the appropriate patches from django-security . Rebase these patches as necessary to make each one a\nplain commit on the release branch rather than a merge commit. To ensure\nthis, merge them with the --ff-only flag; for example: $ git checkout stable/4.1.x\n$ git merge --ff-only security/4.1.x (This assumes security/4.1.x is a branch in the django-security repo\ncontaining the necessary security patches for the next release in the 4.1\nseries.) If git refuses to merge with --ff-only , switch to the security-patch\nbranch and rebase it on the branch you are about to merge it into ( git checkout security/4.1.x; git rebase stable/4.1.x ) and then switch back and\ndo the merge. Make sure the commit message for each security fix explains\nthat the commit is a security fix and that an announcement will follow\n( example security commit ). Update the version number in django/__init__.py for the release.\nPlease see notes on setting the VERSION tuple below for details\non VERSION ( example commit ). If this is a pre-release package also update the “Development Status”\ntrove classifier in pyproject.toml to reflect this. An rc pre-release should not change the trove classifier ( example\ncommit for alpha release , example commit for beta release ). Otherwise, make sure the classifier is set to Development Status :: 5 - Production/Stable . Tag the release using git tag . For example: $ git tag --sign --message = \"Tag 4.1.1\" 4 .1.1 You can check your work running git tag --verify <tag> . Push your work and the new tag: $ git push\n$ git push --tags Make sure you have an absolutely clean tree by running git clean -dfx . Run python -m build to generate the release packages. This will create\nthe release packages in a dist/ directory. Generate the hashes of the release packages: $ cd dist\n$ md5sum *\n$ sha1sum *\n$ sha256sum * Create a “checksums” file, Django-<<VERSION>>.checksum.txt containing\nthe hashes and release information. Start with this template and insert the\ncorrect version, date, GPG key ID (from gpg --list-keys --keyid-format LONG ), release manager’s GitHub username,\nrelease URL, and checksums: This file contains MD5, SHA1, and SHA256 checksums for the source-code\ntarball and wheel files of Django <<VERSION>>, released <<DATE>>.\n\nTo use this file, you will need a working install of PGP or other\ncompatible public-key encryption software. You will also need to have\nthe Django release manager's public key in your keyring. This key has\nthe ID ``XXXXXXXXXXXXXXXX`` and can be imported from the MIT\nkeyserver, for example, if using the open-source GNU Privacy Guard\nimplementation of PGP:\n\n    gpg --keyserver pgp.mit.edu --recv-key XXXXXXXXXXXXXXXX\n\nor via the GitHub API:\n\n    curl https://github.com/<<RELEASE MANAGER GITHUB USERNAME>>.gpg | gpg --import -\n\nOnce the key is imported, verify this file:\n\n    gpg --verify <<THIS FILENAME>>\n\nOnce you have verified this file, you can use normal MD5, SHA1, or SHA256\nchecksumming applications to generate the checksums of the Django\npackage and compare them to the checksums listed below.\n\nRelease packages\n================\n\nhttps://www.djangoproject.com/m/releases/<<MAJOR VERSION>>/<<RELEASE TAR.GZ FILENAME>>\nhttps://www.djangoproject.com/m/releases/<<MAJOR VERSION>>/<<RELEASE WHL FILENAME>>\n\nMD5 checksums\n=============\n\n<<MD5SUM>>  <<RELEASE TAR.GZ FILENAME>>\n<<MD5SUM>>  <<RELEASE WHL FILENAME>>\n\nSHA1 checksums\n==============\n\n<<SHA1SUM>>  <<RELEASE TAR.GZ FILENAME>>\n<<SHA1SUM>>  <<RELEASE WHL FILENAME>>\n\nSHA256 checksums\n================\n\n<<SHA256SUM>>  <<RELEASE TAR.GZ FILENAME>>\n<<SHA256SUM>>  <<RELEASE WHL FILENAME>> Sign the checksum file ( gpg --clearsign --digest-algo SHA256 Django-<version>.checksum.txt ). This generates a signed document, Django-<version>.checksum.txt.asc which you can then verify using gpg --verify Django-<version>.checksum.txt.asc . Making the release(s) available to the public ¶ Now you’re ready to actually put the release out there. To do this: Upload the checksum file(s): $ scp Django-A.B.C.checksum.txt.asc djangoproject.com:/home/www/www/media/pgp/Django-A.B.C.checksum.txt (If this is a security release, what follows should be done 15 minutes\nbefore the announced release time, no sooner.) Upload the release package(s) to the djangoproject server, replacing\nA.B. with the appropriate version number, e.g. 4.1 for a 4.1.x release: $ scp Django-* djangoproject.com:/home/www/www/media/releases/A.B If this is the alpha release of a new series, you will need to create first the directory A.B. Test that the release packages install correctly using pip . Here’s one\nsimple method (this just tests that the binaries are available, that they\ninstall correctly, and that migrations and the development server start, but\nit’ll catch silly mistakes): $ RELEASE_VERSION = '4.1.1' $ MAJOR_VERSION = ` echo $RELEASE_VERSION | cut -c 1 -3 ` $ python -m venv django-pip-tarball\n$ . django-pip-tarball/bin/activate\n$ python -m pip install https://www.djangoproject.com/m/releases/ $MAJOR_VERSION /Django- $RELEASE_VERSION .tar.gz\n$ django-admin startproject test_tarball\n$ cd test_tarball\n$ ./manage.py --help # Ensure executable bits $ python manage.py migrate\n$ python manage.py runserver\n<CTRL+C>\n$ deactivate\n$ cd .. && rm -rf test_tarball && rm -rf django-pip-tarball\n\n$ python -m venv django-pip-wheel\n$ . django-pip-wheel/bin/activate\n$ python -m pip install https://www.djangoproject.com/m/releases/ $MAJOR_VERSION /Django- $RELEASE_VERSION -py3-none-any.whl\n$ django-admin startproject test_wheel\n$ cd test_wheel\n$ ./manage.py --help # Ensure executable bits $ python manage.py migrate\n$ python manage.py runserver\n<CTRL+C>\n$ deactivate\n$ cd .. && rm -rf test_wheel && rm -rf django-pip-wheel Run the confirm-release build on Jenkins to verify the checksum file(s)\n(e.g. use 4.2rc1 for https://media.djangoproject.com/pgp/Django-4.2rc1.checksum.txt ). Upload the release packages to PyPI (for pre-releases, only upload the wheel\nfile): $ twine upload dist/* Go to the Add release page in the admin , enter the new release number\nexactly as it appears in the name of the tarball\n( Django-<version>.tar.gz ). So for example enter “4.1.1” or “4.2rc1”,\netc. If the release is part of an LTS branch, mark it so. If this is the alpha release of a new series, also create a Release object\nfor the final release, ensuring that the Release date field is blank,\nthus marking it as unreleased . For example, when creating the Release\nobject for 4.2a1 , also create 4.2 with the Release date field blank. Make the blog post announcing the release live. For a new version release (e.g. 4.1, 4.2), update the default stable version\nof the docs by flipping the is_default flag to True on the\nappropriate DocumentRelease object in the docs.djangoproject.com database (this will automatically flip it to False for all\nothers); you can do this using the site’s admin. Create new DocumentRelease objects for each language that has an entry\nfor the previous release. Update djangoproject.com’s robots.docs.txt file by copying the result generated from running the command manage_translations.py robots_txt in the current stable branch from the django-docs-translations repository . For example, when releasing Django\n4.2: $ git checkout stable/4.2.x\n$ git pull\n$ python manage_translations.py robots_txt Post the release announcement to the django-announce , django-developers , django-users mailing lists, and the Django Forum. This should include a\nlink to the announcement blog post. If this is a security release, send a separate email to oss-security @ lists . openwall . com . Provide a descriptive subject, for example,\n“Django” plus the issue title from the release notes (including CVE ID). The\nmessage body should include the vulnerability details, for example, the\nannouncement blog post text. Include a link to the announcement blog post. Add a link to the blog post in the topic of the #django IRC channel: /msg chanserv TOPIC #django new topic goes here . Post-release ¶ You’re almost done! All that’s left to do now is: Update the VERSION tuple in django/__init__.py again,\nincrementing to whatever the next expected release will be. For\nexample, after releasing 4.1.1, update VERSION to VERSION = (4, 1, 2, 'alpha', 0) . Add the release in Trac’s versions list if necessary (and make it the\ndefault by changing the default_version setting in the\ncode.djangoproject.com’s trac.ini , if it’s a final release). The new X.Y\nversion should be added after the alpha release and the default version\nshould be updated after “dot zero” release. If this was a final release: Update the current stable branch and remove the pre-release branch in the Django release process on Trac. Update djangoproject.com’s download page ( example PR ). If this was a security release, update Archive of security issues with\ndetails of the issues addressed. New stable branch tasks ¶ There are several items to do in the time following the creation of a new\nstable branch (often following an alpha release). Some of these tasks don’t\nneed to be done by the releaser. Create a new DocumentRelease object in the docs.djangoproject.com database for the new version’s docs, and update the docs/fixtures/doc_releases.json JSON fixture, so people without access\nto the production DB can still run an up-to-date copy of the docs site\n( example PR ). Create a stub release note for the new feature version. Use the stub from\nthe previous feature release version or copy the contents from the previous\nfeature version and delete most of the contents leaving only the headings. Increase the default PBKDF2 iterations in django.contrib.auth.hashers.PBKDF2PasswordHasher by about 20%\n(pick a round number). Run the tests, and update the 3 failing\nhasher tests with the new values. Make sure this gets noted in the\nrelease notes (see the 4.1 release notes for an example). Remove features that have reached the end of their deprecation cycle. Each\nremoval should be done in a separate commit for clarity. In the commit\nmessage, add a “refs #XXXX” to the original ticket where the deprecation\nbegan if possible. Remove .. versionadded:: , .. versionchanged:: , and .. deprecated:: annotations in the documentation from two releases ago.\nFor example, in Django 4.2, notes for 4.0 will be removed. Add the new branch to Read the Docs . Since the automatically\ngenerated version names (“stable-A.B.x”) differ from the version names\nused in Read the Docs (“A.B.x”), create a ticket requesting\nthe new version. Request the new classifier on PyPI . For example Framework :: Django :: 3.1 . Update the current branch under active development and add pre-release\nbranch in the Django release process on Trac. Notes on setting the VERSION tuple ¶ Django’s version reporting is controlled by the VERSION tuple in django/__init__.py . This is a five-element tuple, whose elements\nare: Major version. Minor version. Micro version. Status – can be one of “alpha”, “beta”, “rc” or “final”. Series number, for alpha/beta/RC packages which run in sequence\n(allowing, for example, “beta 1”, “beta 2”, etc.). For a final release, the status is always “final” and the series\nnumber is always 0. A series number of 0 with an “alpha” status will\nbe reported as “pre-alpha”. Some examples: (4, 1, 1, \"final\", 0) → “4.1.1” (4, 2, 0, \"alpha\", 0) → “4.2 pre-alpha” (4, 2, 0, \"beta\", 1) → “4.2 beta 1”", "keywords": ["work", "removal", "signing", "variable", "xxxxxxxxxxxxxxxx", "url", "grep", "version(s", "distribution", "django/__init__.py", "username", "id", "prenotification-email.txt", "overview", "day", "method", "checksums", "django-a.b.c.checksum.txt.asc", "irc", "status", "man", "cp", "mistakes", "items", "project", "scripts", "minutes", "topic", "-i", "https://www.djangoproject.com/m/releases/<<major", "default", "pgp.mit.edu", "ssh", "main", "page", "package", "scp", "--digest", "top", "checksum", "maintainer", "users", "tree", "iterations", "code.djangoproject.com", "checksumming", "people", "refs", "version", "home/.transifexrc", "tuple", "install", "alpha", "hashes", "./manage.py", "start", "steps", "element", "a.b.", "name", "prerequisites", "header", "remove", "admin", "release_version", "python", "link", "addition", "django-<version>.checksum.txt", "fixtures", "sha1sum", "classifier", "others", "tag", "|", "address", "https://www.djangoproject.com/m/releases/", "gpg", "conf.py", "true", "*", "framework", "pgp", "xargs", "mailing", "patch(es", "--list", "/msg", "4.0.x", "forms", "download", "features", "february", "checkout", "feature", "hours", "key", "levels", "updating", "issues", "keyserver", "permissions", "warnings", "-dfx", "ops", "confirm", "sha1", "template", "debug", "migrations", "tarball", "setting", "%", "tasks", "order", "lts", "basis", "documentation", "-", "patch", "deprecation", "development", "creation", "-u", "rebase", "6th", "migrate", "preparation", "a.b.x", "wheel", "ids", "branch", "blockers", "files", "macos", "'", "information", "json", "you@example.com", "#", "result", "point", "section", "versions", "announcements", "¶", "cve", "venv", "server", "gnu", "change", "format", "commit", "example", "jenkins", "-py3", "source", "test_wheel", "blog", "timing", "examples", "things", "\\.po", "4.1.x", "details", "-rf", "long", "object", "task", "/po", "security/4.1.x", "one", "privacy", "vendor", "wiki", "issue", "https://github.com/<<release", "password", "docs.djangoproject.com", "sequence", "pr", "api", "note", "https://upload.pypi.org/legacy/", "post", "django", "days", "--sign", "message", "vulnerability", "default_version", "bugfix", "stuff", "lot", "text", "field", "contents", "release(s", "chanserv", "=", "objects", "4.1.1", "language", "--import", "build", "stable", "5.0.2", "implementation", "index", "lists", "stub", "instructions", "run", "software", "utc", "diff", "stable/4.1.x", "patches", "pot", "branches", "announcement", "translation", "sanity", "a.b", "recipients", "time", "release", "djangoproject.com:/home", "category", "merge", "x.y", "djangoproject", "mit", "site", "organization", "manager", "releases", "defect", "com", "repository", "rest_hostname", "apis", "output", "bin", "copy", "sha256sum", "pyproject.toml", "update", "none", "po", "process", "access", "command", "username>>.gpg", "email", "fix", "dot", "production", "end", "week", "unix", "reporting", "flag", "applications", "request", "bash", "timelines", "cycle", "rc", "django-", "distutils", "series", "--name", ".po", "bits", "environment", "clarity", "md5sum", "notes", "&", "releaser", "job", "package(s", "s", "keys", "beta", "ok", "trac", "dist", "path", "severity", "archive", "tools", "directory", "push", "oss", "forum", "elements", "binaries", "packages", "add", "db", "security", "title", "twine", "major_version", "stable/4.2.x", "robots_txt", "support", "types", "git", "docs", "changes", "/django-", "servers", "subject", "a.b.c.checksum.txt", "cli", "false", "xxxx", "product", "linux", "md5", "notify", "prefix", "django.contrib.auth.hashers", "_", "test_tarball", "tests", "check", "values", "mergers", "clean", "3.2.x", "role", "backport", "translations", "media", "annotations", "tar.gz", "test", "https://media.djangoproject.com/pgp/django-4.2rc1.checksum.txt", "robots.docs.txt", "pair", "fixture", "rm", "https://docs.djangoproject.com/en/dev/internals/security/#how-django-discloses-security-issues", "--ff", "origin", "signatures", "whl", "runserver", "pip", "-3", "channel", "hasher", "case", "tuesday", "number", "numbers", "github", "guard", "announce", "report", "openwall", "developers", "care", "list", "bit", "filename", "4.2rc1", "manage_translations.py", "ticket", "www", "body", "file(s", "user", "part", "file", ".mo", "issue(s", "sha256", "activate", "read", "emails", "errors", "notice", "pbkdf2", "account", "cd", "version>>/<<release", "notification", "bcc", "names", "pre", "document", "fetch", "date", "encryption", "functionality", "documentrelease", "database", "algo", "transifex", "code", "https://rest.api.transifex.com", "headings", "keyring", "revision", "links", "-c", "entry", "repo", "django_next_version", "pypi"], "type": "documentation"},
{"title": "Django Deprecation Timeline", "url": "https://docs.djangoproject.com/en/5.1/internals/deprecation/", "content": "Django Deprecation Timeline ¶ This document outlines when various pieces of Django will be removed or altered\nin a backward incompatible way, following their deprecation, as per the deprecation policy . More details\nabout each item can often be found in the release notes of two versions prior. 6.0 ¶ See the Django 5.0 release notes for more\ndetails on these changes. The DjangoDivFormRenderer and Jinja2DivFormRenderer transitional form\nrenderers will be removed. Support for passing positional arguments to BaseConstraint will be\nremoved. request will be required in the signature of ModelAdmin.lookup_allowed() subclasses. The django.db.models.sql.datastructures.Join will no longer fallback to get_joining_columns() . The get_joining_columns() method of ForeignObject and ForeignObjectRel will be removed. The ForeignObject.get_reverse_joining_columns() method will be removed. The default scheme for forms.URLField will change from \"http\" to \"https\" . Support for calling format_html() without passing args or kwargs will be\nremoved. Support for cx_Oracle will be removed. BaseDatabaseOperations.field_cast_sql() will be removed. The ChoicesMeta alias to django.db.models.enums.ChoicesType will be\nremoved. The Prefetch.get_current_queryset() method will be removed. The get_prefetch_queryset() method of related managers and descriptors\nwill be removed. get_prefetcher() and prefetch_related_objects() will no longer\nfallback to get_prefetch_queryset() . The FORMS_URLFIELD_ASSUME_HTTPS transitional setting will be removed. See the Django 5.1 release notes for more\ndetails on these changes. The ModelAdmin.log_deletion() and LogEntryManager.log_action() methods will be removed. The undocumented django.utils.itercompat.is_iterable() function and the django.utils.itercompat module will be removed. The django.contrib.gis.geoip2.GeoIP2.coords() method will be removed. The django.contrib.gis.geoip2.GeoIP2.open() method will be removed. Support for passing positional arguments to Model.save() and Model.asave() will be removed. The setter for django.contrib.gis.gdal.OGRGeometry.coord_dim will be\nremoved. django.urls.register_converter() will no longer allow overriding existing\nconverters. The check keyword argument of CheckConstraint will be removed. The OS_OPEN_FLAGS attribute of FileSystemStorage will be removed. The get_cache_name() method of FieldCacheMixin will be removed. 5.1 ¶ See the Django 4.2 release notes for more\ndetails on these changes. The BaseUserManager.make_random_password() method will be removed. The model’s Meta.index_together option will be removed. The length_is template filter will be removed. The django.contrib.auth.hashers.SHA1PasswordHasher , django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher , and django.contrib.auth.hashers.UnsaltedMD5PasswordHasher will be removed. The model django.contrib.postgres.fields.CICharField , django.contrib.postgres.fields.CIEmailField , and django.contrib.postgres.fields.CITextField will be removed. Stub fields\nwill remain for compatibility with historical migrations. The django.contrib.postgres.fields.CIText mixin will be removed. The map_width and map_height attributes of BaseGeometryWidget will be removed. The SimpleTestCase.assertFormsetError() method will be removed. The TransactionTestCase.assertQuerysetEqual() method will be removed. Support for passing encoded JSON string literals to JSONField and\nassociated lookups and expressions will be removed. Support for passing positional arguments to Signer and TimestampSigner will be removed. The DEFAULT_FILE_STORAGE and STATICFILES_STORAGE settings will be\nremoved. The django.core.files.storage.get_storage_class() function will be\nremoved. 5.0 ¶ See the Django 4.0 release notes for more\ndetails on these changes. The SERIALIZE test setting will be removed. The undocumented django.utils.baseconv module will be removed. The undocumented django.utils.datetime_safe module will be removed. The default value of the USE_TZ setting will change from False to True . The default sitemap protocol for sitemaps built outside the context of a\nrequest will change from 'http' to 'https' . The extra_tests argument for DiscoverRunner.build_suite() and DiscoverRunner.run_tests() will be removed. The django.contrib.postgres.aggregates.ArrayAgg , JSONBAgg , and StringAgg aggregates will return None when there are no rows instead\nof [] , [] , and '' respectively. The USE_L10N setting will be removed. The USE_DEPRECATED_PYTZ transitional setting will be removed. Support for pytz timezones will be removed. The is_dst argument will be removed from: QuerySet.datetimes() django.utils.timezone.make_aware() django.db.models.functions.Trunc() django.db.models.functions.TruncSecond() django.db.models.functions.TruncMinute() django.db.models.functions.TruncHour() django.db.models.functions.TruncDay() django.db.models.functions.TruncWeek() django.db.models.functions.TruncMonth() django.db.models.functions.TruncQuarter() django.db.models.functions.TruncYear() The django.contrib.gis.admin.GeoModelAdmin and OSMGeoAdmin classes\nwill be removed. The undocumented BaseForm._html_output() method will be removed. The ability to return a str , rather than a SafeString , when rendering\nan ErrorDict and ErrorList will be removed. See the Django 4.1 release notes for more\ndetails on these changes. The SitemapIndexItem.__str__() method will be removed. The CSRF_COOKIE_MASKED transitional setting will be removed. The name argument of django.utils.functional.cached_property() will\nbe removed. The opclasses argument of django.contrib.postgres.constraints.ExclusionConstraint will be removed. The undocumented ability to pass errors=None to SimpleTestCase.assertFormError() and assertFormsetError() will be\nremoved. django.contrib.sessions.serializers.PickleSerializer will be removed. The usage of QuerySet.iterator() on a queryset that prefetches related\nobjects without providing the chunk_size argument will no longer be\nallowed. Passing unsaved model instances to related filters will no longer be allowed. created=True will be required in the signature of RemoteUserBackend.configure_user() subclasses. Support for logging out via GET requests in the django.contrib.auth.views.LogoutView and django.contrib.auth.views.logout_then_login() will be removed. The django.utils.timezone.utc alias to datetime.timezone.utc will be\nremoved. Passing a response object and a form/formset name to SimpleTestCase.assertFormError() and assertFormsetError() will no\nlonger be allowed. The django.contrib.gis.admin.OpenLayersWidget will be removed. The django.contrib.auth.hashers.CryptPasswordHasher will be removed. The \"django/forms/default.html\" and \"django/forms/formsets/default.html\" templates will be removed. The ability to pass nulls_first=False or nulls_last=False to Expression.asc() and Expression.desc() methods, and the OrderBy expression will be removed. 4.1 ¶ See the Django 3.2 release notes for more\ndetails on these changes. Support for assigning objects which don’t support creating deep copies with copy.deepcopy() to class attributes in TestCase.setUpTestData() will\nbe removed. BaseCommand.requires_system_checks won’t support boolean values. The whitelist argument and domain_whitelist attribute of django.core.validators.EmailValidator will be removed. The default_app_config module variable will be removed. TransactionTestCase.assertQuerysetEqual() will no longer automatically\ncall repr() on a queryset when compared to string values. django.core.cache.backends.memcached.MemcachedCache will be removed. Support for the pre-Django 3.2 format of messages used by django.contrib.messages.storage.cookie.CookieStorage will be removed. 4.0 ¶ See the Django 3.0 release notes for more\ndetails on these changes. django.utils.http.urlquote() , urlquote_plus() , urlunquote() , and urlunquote_plus() will be removed. django.utils.encoding.force_text() and smart_text() will be removed. django.utils.translation.ugettext() , ugettext_lazy() , ugettext_noop() , ungettext() , and ungettext_lazy() will be\nremoved. django.views.i18n.set_language() will no longer set the user language in request.session (key django.utils.translation.LANGUAGE_SESSION_KEY ). alias=None will be required in the signature of django.db.models.Expression.get_group_by_cols() subclasses. django.utils.text.unescape_entities() will be removed. django.utils.http.is_safe_url() will be removed. See the Django 3.1 release notes for more\ndetails on these changes. The PASSWORD_RESET_TIMEOUT_DAYS setting will be removed. The undocumented usage of the isnull lookup with non-boolean values\nas the right-hand side will no longer be allowed. The django.db.models.query_utils.InvalidQuery exception class will be\nremoved. The django-admin.py entry point will be removed. The HttpRequest.is_ajax() method will be removed. Support for the pre-Django 3.1 encoding format of cookies values used by django.contrib.messages.storage.cookie.CookieStorage will be removed. Support for the pre-Django 3.1 password reset tokens in the admin site (that\nuse the SHA-1 hashing algorithm) will be removed. Support for the pre-Django 3.1 encoding format of sessions will be removed. Support for the pre-Django 3.1 django.core.signing.Signer signatures\n(encoded with the SHA-1 algorithm) will be removed. Support for the pre-Django 3.1 django.core.signing.dumps() signatures\n(encoded with the SHA-1 algorithm) in django.core.signing.loads() will be\nremoved. Support for the pre-Django 3.1 user sessions (that use the SHA-1 algorithm)\nwill be removed. The get_response argument for django.utils.deprecation.MiddlewareMixin.__init__() will be required and\nwon’t accept None . The providing_args argument for django.dispatch.Signal will be\nremoved. The length argument for django.utils.crypto.get_random_string() will\nbe required. The list message for ModelMultipleChoiceField will be removed. Support for passing raw column aliases to QuerySet.order_by() will be\nremoved. The model NullBooleanField will be removed. A stub field will remain for\ncompatibility with historical migrations. django.conf.urls.url() will be removed. The model django.contrib.postgres.fields.JSONField will be removed. A\nstub field will remain for compatibility with historical migrations. django.contrib.postgres.forms.JSONField , django.contrib.postgres.fields.jsonb.KeyTransform , and django.contrib.postgres.fields.jsonb.KeyTextTransform will be removed. The {% ifequal %} and {% ifnotequal %} template tags will be removed. The DEFAULT_HASHING_ALGORITHM transitional setting will be removed. 3.1 ¶ See the Django 2.2 release notes for more\ndetails on these changes. django.utils.timezone.FixedOffset will be removed. django.core.paginator.QuerySetPaginator will be removed. A model’s Meta.ordering will no longer affect GROUP BY queries. django.contrib.postgres.fields.FloatRangeField and django.contrib.postgres.forms.FloatRangeField will be removed. The FILE_CHARSET setting will be removed. django.contrib.staticfiles.storage.CachedStaticFilesStorage will be\nremoved. RemoteUserBackend.configure_user() will require request as the first\npositional argument. Support for SimpleTestCase.allow_database_queries and TransactionTestCase.multi_db will be removed. 3.0 ¶ See the Django 2.0 release notes for more\ndetails on these changes. The django.db.backends.postgresql_psycopg2 module will be removed. django.shortcuts.render_to_response() will be removed. The DEFAULT_CONTENT_TYPE setting will be removed. HttpRequest.xreadlines() will be removed. Support for the context argument of Field.from_db_value() and Expression.convert_value() will be removed. The field_name keyword argument of QuerySet.earliest() and latest() will be removed. See the Django 2.1 release notes for more\ndetails on these changes. django.contrib.gis.db.models.functions.ForceRHR will be removed. django.utils.http.cookie_date() will be removed. The staticfiles and admin_static template tag libraries will be\nremoved. django.contrib.staticfiles.templatetags.static() will be removed. The shim to allow InlineModelAdmin.has_add_permission() to be defined\nwithout an obj argument will be removed. 2.1 ¶ See the Django 1.11 release notes for more\ndetails on these changes. contrib.auth.views.login() , logout() , password_change() , password_change_done() , password_reset() , password_reset_done() , password_reset_confirm() , and password_reset_complete() will be\nremoved. The extra_context parameter of contrib.auth.views.logout_then_login() will be removed. django.test.runner.setup_databases() will be removed. django.utils.translation.string_concat() will be removed. django.core.cache.backends.memcached.PyLibMCCache will no longer support\npassing pylibmc behavior settings as top-level attributes of OPTIONS . The host parameter of django.utils.http.is_safe_url() will be\nremoved. Silencing of exceptions raised while rendering the {% include %} template\ntag will be removed. DatabaseIntrospection.get_indexes() will be removed. The authenticate() method of authentication backends will require request as the first positional argument. The django.db.models.permalink() decorator will be removed. The USE_ETAGS setting will be removed. CommonMiddleware and django.utils.cache.patch_response_headers() will no longer set ETags. The Model._meta.has_auto_field attribute will be removed. url() ’s support for inline flags in regular expression groups ( (?i) , (?L) , (?m) , (?s) , and (?u) ) will be removed. Support for Widget.render() methods without the renderer argument\nwill be removed. 2.0 ¶ See the Django 1.9 release notes for more\ndetails on these changes. The weak argument to django.dispatch.signals.Signal.disconnect() will\nbe removed. django.db.backends.base.BaseDatabaseOperations.check_aggregate_support() will be removed. The django.forms.extras package will be removed. The assignment_tag helper will be removed. The host argument to assertsRedirects will be removed. The\ncompatibility layer which allows absolute URLs to be considered equal to\nrelative ones when the path is identical will also be removed. Field.rel will be removed. Field.remote_field.to attribute will be removed. The on_delete argument for ForeignKey and OneToOneField will be\nrequired. django.db.models.fields.add_lazy_relation() will be removed. When time zone support is enabled, database backends that don’t support time\nzones won’t convert aware datetimes to naive values in UTC anymore when such\nvalues are passed as parameters to SQL queries executed outside of the ORM,\ne.g. with cursor.execute() . The django.contrib.auth.tests.utils.skipIfCustomUser() decorator will be\nremoved. The GeoManager and GeoQuerySet classes will be removed. The django.contrib.gis.geoip module will be removed. The supports_recursion check for template loaders will be removed from: django.template.engine.Engine.find_template() django.template.loader_tags.ExtendsNode.find_template() django.template.loaders.base.Loader.supports_recursion() django.template.loaders.cached.Loader.supports_recursion() The load_template() and load_template_sources() template loader\nmethods will be removed. The template_dirs argument for template loaders will be removed: django.template.loaders.base.Loader.get_template() django.template.loaders.cached.Loader.cache_key() django.template.loaders.cached.Loader.get_template() django.template.loaders.cached.Loader.get_template_sources() django.template.loaders.filesystem.Loader.get_template_sources() The django.template.loaders.base.Loader.__call__() method will be\nremoved. Support for custom error views with a single positional parameter will be\ndropped. The mime_type attribute of django.utils.feedgenerator.Atom1Feed and django.utils.feedgenerator.RssFeed will be removed in favor of content_type . The app_name argument to django.conf.urls.include() will be\nremoved. Support for passing a 3-tuple as the first argument to include() will\nbe removed. Support for setting a URL instance namespace without an application\nnamespace will be removed. Field._get_val_from_obj() will be removed in favor of Field.value_from_object() . django.template.loaders.eggs.Loader will be removed. The current_app parameter to the contrib.auth views will be removed. The callable_obj keyword argument to SimpleTestCase.assertRaisesMessage() will be removed. Support for the allow_tags attribute on ModelAdmin methods will be\nremoved. The enclosure keyword argument to SyndicationFeed.add_item() will be\nremoved. The django.template.loader.LoaderOrigin and django.template.base.StringOrigin aliases for django.template.base.Origin will be removed. See the Django 1.10 release notes for more\ndetails on these changes. The makemigrations --exit option will be removed. Support for direct assignment to a reverse foreign key or many-to-many\nrelation will be removed. The get_srid() and set_srid() methods of django.contrib.gis.geos.GEOSGeometry will be removed. The get_x() , set_x() , get_y() , set_y() , get_z() , and set_z() methods of django.contrib.gis.geos.Point will be removed. The get_coords() and set_coords() methods of django.contrib.gis.geos.Point will be removed. The cascaded_union property of django.contrib.gis.geos.MultiPolygon will be removed. django.utils.functional.allow_lazy() will be removed. The shell --plain option will be removed. The django.core.urlresolvers module will be removed. The model CommaSeparatedIntegerField will be removed. A stub field will\nremain for compatibility with historical migrations. Support for the template Context.has_key() method will be removed. Support for the django.core.files.storage.Storage.accessed_time() , created_time() , and modified_time() methods will be removed. Support for query lookups using the model name when Meta.default_related_name is set will be removed. The __search query lookup and the DatabaseOperations.fulltext_search_sql() method will be removed. The shim for supporting custom related manager classes without a _apply_rel_filters() method will be removed. Using User.is_authenticated() and User.is_anonymous() as methods\nwill no longer be supported. The private attribute virtual_fields of Model._meta will be removed. The private keyword arguments virtual_only in Field.contribute_to_class() and virtual in Model._meta.add_field() will be removed. The javascript_catalog() and json_catalog() views will be removed. The django.contrib.gis.utils.precision_wkt() function will be removed. In multi-table inheritance, implicit promotion of a OneToOneField to a parent_link will be removed. Support for Widget._format_value() will be removed. FileField methods get_directory_name() and get_filename() will be\nremoved. The mark_for_escaping() function and the classes it uses: EscapeData , EscapeBytes , EscapeText , EscapeString , and EscapeUnicode will\nbe removed. The escape filter will change to use django.utils.html.conditional_escape() . Manager.use_for_related_fields will be removed. Model Manager inheritance will follow MRO inheritance rules and the Meta.manager_inheritance_from_future to opt-in to this behavior will be\nremoved. Support for old-style middleware using settings.MIDDLEWARE_CLASSES will\nbe removed. 1.10 ¶ See the Django 1.8 release notes for more\ndetails on these changes. Support for calling a SQLCompiler directly as an alias for calling its quote_name_unless_alias method will be removed. cycle and firstof template tags will be removed from the future template tag library (used during the 1.6/1.7 deprecation period). django.conf.urls.patterns() will be removed. Support for the prefix argument to django.conf.urls.i18n.i18n_patterns() will be removed. SimpleTestCase.urls will be removed. Using an incorrect count of unpacked values in the for template tag\nwill raise an exception rather than fail silently. The ability to reverse URLs using a dotted Python path will be removed. The ability to use a dotted Python path for the LOGIN_URL and LOGIN_REDIRECT_URL settings will be removed. Support for optparse will be dropped for custom management commands\n(replaced by argparse ). The class django.core.management.NoArgsCommand will be removed. Use BaseCommand instead, which takes no arguments\nby default. django.core.context_processors module will be removed. django.db.models.sql.aggregates module will be removed. django.contrib.gis.db.models.sql.aggregates module will be removed. The following methods and properties of django.db.sql.query.Query will\nbe removed: Properties: aggregates and aggregate_select Methods: add_aggregate , set_aggregate_mask , and append_aggregate_mask . django.template.resolve_variable will be removed. The following private APIs will be removed from django.db.models.options.Options ( Model._meta ): get_field_by_name() get_all_field_names() get_fields_with_model() get_concrete_fields_with_model() get_m2m_with_model() get_all_related_objects() get_all_related_objects_with_model() get_all_related_many_to_many_objects() get_all_related_m2m_objects_with_model() The error_message argument of django.forms.RegexField will be removed. The unordered_list filter will no longer support old style lists. Support for string view arguments to url() will be removed. The backward compatible shim  to rename django.forms.Form._has_changed() to has_changed() will be removed. The removetags template filter will be removed. The remove_tags() and strip_entities() functions in django.utils.html will be removed. The is_admin_site argument to django.contrib.auth.views.password_reset() will be removed. django.db.models.field.subclassing.SubfieldBase will be removed. django.utils.checksums will be removed; its functionality is included\nin django-localflavor 1.1+. The original_content_type_id attribute on django.contrib.admin.helpers.InlineAdminForm will be removed. The backwards compatibility shim to allow FormMixin.get_form() to be\ndefined with no default value for its form_class argument will be removed. The following settings will be removed: ALLOWED_INCLUDE_ROOTS TEMPLATE_CONTEXT_PROCESSORS TEMPLATE_DEBUG TEMPLATE_DIRS TEMPLATE_LOADERS TEMPLATE_STRING_IF_INVALID The backwards compatibility alias django.template.loader.BaseLoader will\nbe removed. Django template objects returned by get_template() and select_template() won’t accept a Context in their render() method anymore. Template response APIs will enforce the use\nof dict and backend-dependent template objects instead of Context and Template respectively. The current_app parameter for the following function and classes will be\nremoved: django.shortcuts.render() django.template.Context() django.template.RequestContext() django.template.response.TemplateResponse() The dictionary and context_instance parameters for the following\nfunctions will be removed: django.shortcuts.render() django.shortcuts.render_to_response() django.template.loader.render_to_string() The dirs parameter for the following functions will be removed: django.template.loader.get_template() django.template.loader.select_template() django.shortcuts.render() django.shortcuts.render_to_response() Session verification will be enabled regardless of whether or not 'django.contrib.auth.middleware.SessionAuthenticationMiddleware' is in MIDDLEWARE_CLASSES . Private attribute django.db.models.Field.related will be removed. The --list option of the migrate management command will be removed. The ssi template tag will be removed. Support for the = comparison operator in the if template tag will be\nremoved. The backwards compatibility shims to allow Storage.get_available_name() and Storage.save() to be defined without a max_length argument will\nbe removed. Support for the legacy %(<foo>)s syntax in ModelFormMixin.success_url will be removed. GeoQuerySet aggregate methods collect() , extent() , extent3d() , make_line() , and unionagg() will be removed. Ability to specify ContentType.name when creating a content type instance\nwill be removed. Support for the old signature of allow_migrate will be removed. It changed\nfrom allow_migrate(self, db, model) to allow_migrate(self, db, app_label, model_name=None, **hints) . Support for the syntax of {% cycle %} that uses comma-separated arguments\nwill be removed. The warning that Signer issues when given an\ninvalid separator will become an exception. 1.9 ¶ See the Django 1.7 release notes for more\ndetails on these changes. django.utils.dictconfig will be removed. django.utils.importlib will be removed. django.utils.tzinfo will be removed. django.utils.unittest will be removed. The syncdb command will be removed. django.db.models.signals.pre_syncdb and django.db.models.signals.post_syncdb will be removed. allow_syncdb on database routers will no longer automatically become allow_migrate . Automatic syncing of apps without migrations will be removed. Migrations will\nbecome compulsory for all apps unless you pass the --run-syncdb option to migrate . The SQL management commands for apps without migrations, sql , sqlall , sqlclear , sqldropindexes , and sqlindexes , will be removed. Support for automatic loading of initial_data fixtures and initial SQL\ndata will be removed. All models will need to be defined inside an installed application or\ndeclare an explicit app_label .\nFurthermore, it won’t be possible to import them before their application\nis loaded. In particular, it won’t be possible to import models inside\nthe root package of their application. The model and form IPAddressField will be removed. A stub field will\nremain for compatibility with historical migrations. AppCommand.handle_app() will no longer be supported. RequestSite and get_current_site() will no longer be importable from django.contrib.sites.models . FastCGI support via the runfcgi management command will be\nremoved. Please deploy your project using WSGI. django.utils.datastructures.SortedDict will be removed. Use collections.OrderedDict from the Python standard library instead. ModelAdmin.declared_fieldsets will be removed. Instances of util.py in the Django codebase have been renamed to utils.py in an effort to unify all util and utils references.\nThe modules that provided backwards compatibility will be removed: django.contrib.admin.util django.contrib.gis.db.backends.util django.db.backends.util django.forms.util ModelAdmin.get_formsets will be removed. The backward compatibility shim introduced to rename the BaseMemcachedCache._get_memcache_timeout() method to get_backend_timeout() will be removed. The --natural and -n options for dumpdata will be removed. The use_natural_keys argument for serializers.serialize() will be\nremoved. Private API django.forms.forms.get_declared_fields() will be removed. The ability to use a SplitDateTimeWidget with DateTimeField will be\nremoved. The WSGIRequest.REQUEST property will be removed. The class django.utils.datastructures.MergeDict will be removed. The zh-cn and zh-tw language codes will be removed and have been\nreplaced by the zh-hans and zh-hant language code respectively. The internal django.utils.functional.memoize will be removed. django.core.cache.get_cache will be removed. Add suitable entries\nto CACHES and use django.core.cache.caches instead. django.db.models.loading will be removed. Passing callable arguments to querysets will no longer be possible. BaseCommand.requires_model_validation will be removed in favor of requires_system_checks . Admin validators will be replaced by admin\nchecks. The ModelAdmin.validator_class and default_validator_class attributes\nwill be removed. ModelAdmin.validate() will be removed. django.db.backends.DatabaseValidation.validate_field will be removed in\nfavor of the check_field method. The validate management command will be removed. django.utils.module_loading.import_by_path will be removed in favor of django.utils.module_loading.import_string . ssi and url template tags will be removed from the future template\ntag library (used during the 1.3/1.4 deprecation period). django.utils.text.javascript_quote will be removed. Database test settings as independent entries in the database settings,\nprefixed by TEST_ , will no longer be supported. The cache_choices option to ModelChoiceField and ModelMultipleChoiceField will be removed. The default value of the RedirectView.permanent attribute will change from True to False . django.contrib.sitemaps.FlatPageSitemap will be removed in favor of django.contrib.flatpages.sitemaps.FlatPageSitemap . Private API django.test.utils.TestTemplateLoader will be removed. The django.contrib.contenttypes.generic module will be removed. Private APIs django.db.models.sql.where.WhereNode.make_atom() and django.db.models.sql.where.Constraint will be removed. 1.8 ¶ See the Django 1.6 release notes for more\ndetails on these changes. django.contrib.comments will be removed. The following transaction management APIs will be removed: TransactionMiddleware , the decorators and context managers autocommit , commit_on_success ,\nand commit_manually , defined in django.db.transaction , the functions commit_unless_managed and rollback_unless_managed ,\nalso defined in django.db.transaction , the TRANSACTIONS_MANAGED setting. The cycle and firstof template tags will auto-escape their\narguments. In 1.6 and 1.7, this behavior is provided by the version of these\ntags in the future template tag library. The SEND_BROKEN_LINK_EMAILS setting will be removed. Add the django.middleware.common.BrokenLinkEmailsMiddleware middleware to\nyour MIDDLEWARE_CLASSES setting instead. django.middleware.doc.XViewMiddleware will be removed. Use django.contrib.admindocs.middleware.XViewMiddleware instead. Model._meta.module_name was renamed to model_name . Remove the backward compatible shims introduced to rename get_query_set and similar queryset methods. This affects the following classes: BaseModelAdmin , ChangeList , BaseCommentNode , GenericForeignKey , Manager , SingleRelatedObjectDescriptor and ReverseSingleRelatedObjectDescriptor . Remove the backward compatible shims introduced to rename the attributes ChangeList.root_query_set and ChangeList.query_set . django.views.defaults.shortcut will be removed, as part of the\ngoal of removing all django.contrib references from the core\nDjango codebase. Instead use django.contrib.contenttypes.views.shortcut . django.conf.urls.shortcut will also be removed. Support for the Python Imaging Library (PIL) module will be removed, as it\nno longer appears to be actively maintained & does not work on Python 3. The following private APIs will be removed: django.db.backend django.db.close_connection() django.db.backends.creation.BaseDatabaseCreation.set_autocommit() django.db.transaction.is_managed() django.db.transaction.managed() django.forms.widgets.RadioInput will be removed in favor of django.forms.widgets.RadioChoiceInput . The module django.test.simple and the class django.test.simple.DjangoTestSuiteRunner will be removed. Instead use django.test.runner.DiscoverRunner . The module django.test._doctest will be removed. Instead use the doctest\nmodule from the Python standard library. The CACHE_MIDDLEWARE_ANONYMOUS_ONLY setting will be removed. Usage of the hard-coded Hold down “Control”, or “Command” on a Mac, to select\nmore than one. string to override or append to user-provided help_text in\nforms for ManyToMany model fields will not be performed by Django anymore\neither at the model or forms layer. The Model._meta.get_(add|change|delete)_permission methods will\nbe removed. The session key django_language will no longer be read for backwards\ncompatibility. Geographic Sitemaps will be removed\n( django.contrib.gis.sitemaps.views.index and django.contrib.gis.sitemaps.views.sitemap ). django.utils.html.fix_ampersands , the fix_ampersands template filter and django.utils.html.clean_html will be removed following an accelerated deprecation. 1.7 ¶ See the Django 1.5 release notes for more\ndetails on these changes. The module django.utils.simplejson will be removed. The standard library\nprovides json which should be used instead. The function django.utils.itercompat.product will be removed. The Python\nbuiltin version should be used instead. Auto-correction of INSTALLED_APPS and TEMPLATE_DIRS settings when they are\nspecified as a plain string instead of a tuple will be removed and raise an\nexception. The mimetype argument to the __init__ methods of HttpResponse , SimpleTemplateResponse , and TemplateResponse , will be removed. content_type should be used instead. This also applies to the render_to_response() shortcut and the sitemap views, index() and sitemap() . When HttpResponse is instantiated with an iterator,\nor when content is set to an iterator,\nthat iterator will be immediately consumed. The AUTH_PROFILE_MODULE setting, and the get_profile() method on\nthe User model, will be removed. The cleanup management command will be removed. It’s replaced by clearsessions . The daily_cleanup.py script will be removed. The depth keyword argument will be removed from select_related() . The undocumented get_warnings_state() / restore_warnings_state() functions from django.test.utils and the save_warnings_state() / restore_warnings_state() django.test.*TestCase methods are\ndeprecated. Use the warnings.catch_warnings context manager\navailable starting with Python 2.6 instead. The undocumented check_for_test_cookie method in AuthenticationForm will be removed\nfollowing an accelerated deprecation. Users subclassing this form should\nremove calls to this method, and instead ensure that their auth related views\nare CSRF protected, which ensures that cookies are enabled. The version of django.contrib.auth.views.password_reset_confirm() that\nsupports base36 encoded user IDs\n( django.contrib.auth.views.password_reset_confirm_uidb36 ) will be\nremoved. If your site has been running Django 1.6 for more than PASSWORD_RESET_TIMEOUT_DAYS , this change will have no effect. If not,\nthen any password reset links generated before you upgrade to Django 1.7\nwon’t work after the upgrade. The django.utils.encoding.StrAndUnicode mix-in will be removed. 1.6 ¶ See the Django 1.4 release notes for more\ndetails on these changes. django.contrib.databrowse will be removed. django.contrib.localflavor will be removed following an accelerated\ndeprecation. django.contrib.markup will be removed following an accelerated\ndeprecation. The compatibility modules django.utils.copycompat and django.utils.hashcompat as well as the functions django.utils.itercompat.all and django.utils.itercompat.any will\nbe removed. The Python builtin versions should be used instead. The csrf_response_exempt and csrf_view_exempt decorators will\nbe removed. Since 1.4 csrf_response_exempt has been a no-op (it\nreturns the same function), and csrf_view_exempt has been a\nsynonym for django.views.decorators.csrf.csrf_exempt , which should\nbe used to replace it. The django.core.cache.backends.memcached.CacheClass backend\nwas split into two in Django 1.3 in order to introduce support for\nPyLibMC. The historical CacheClass will be removed in favor of django.core.cache.backends.memcached.MemcachedCache . The UK-prefixed objects of django.contrib.localflavor.uk will only\nbe accessible through their GB-prefixed names (GB is the correct\nISO 3166 code for United Kingdom). The IGNORABLE_404_STARTS and IGNORABLE_404_ENDS settings have been\nsuperseded by IGNORABLE_404_URLS in the 1.4 release. They will be\nremoved. The form wizard has been refactored to use class-based views with pluggable\nbackends in 1.4. The previous implementation will be removed. Legacy ways of calling cache_page() will be removed. The backward-compatibility shim to automatically add a debug-false\nfilter to the 'mail_admins' logging handler will be removed. The LOGGING setting should include this filter explicitly if\nit is desired. The builtin truncation functions django.utils.text.truncate_words() and django.utils.text.truncate_html_words() will be removed in\nfavor of the django.utils.text.Truncator class. The django.contrib.gis.geoip.GeoIP class was moved to django.contrib.gis.geoip in 1.4 – the shortcut in django.contrib.gis.utils will be removed. django.conf.urls.defaults will be removed. The functions include() , patterns() , and url() , plus handler404 and handler500 are now available through django.conf.urls . The functions setup_environ() and execute_manager() will be removed\nfrom django.core.management . This also means that the old (pre-1.4)\nstyle of manage.py file will no longer work. Setting the is_safe and needs_autoescape flags as attributes of\ntemplate filter functions will no longer be supported. The attribute HttpRequest.raw_post_data was renamed to HttpRequest.body in 1.4. The backward compatibility will be removed – HttpRequest.raw_post_data will no longer work. The value for the post_url_continue parameter in ModelAdmin.response_add() will have to be either None (to redirect\nto the newly created object’s edit page) or a pre-formatted url. String\nformats, such as the previous default '../%s/' , will not be accepted any\nmore. 1.5 ¶ See the Django 1.3 release notes for more\ndetails on these changes. Starting Django without a SECRET_KEY will result in an exception\nrather than a DeprecationWarning . (This is accelerated from the usual\ndeprecation path; see the Django 1.4 release notes .) The mod_python request handler will be removed. The mod_wsgi handler should be used instead. The template attribute on django.test.client.Response objects returned by the test client will be removed.\nThe templates attribute should be\nused instead. The django.test.simple.DjangoTestRunner will be removed.\nInstead use a unittest -native class. The features of the django.test.simple.DjangoTestRunner (including fail-fast and\nCtrl-C test termination) can be provided by unittest.TextTestRunner . The undocumented function django.contrib.formtools.utils.security_hash will be removed,\ninstead use django.contrib.formtools.utils.form_hmac The function-based generic view modules will be removed in favor of their\nclass-based equivalents, outlined here . The django.core.servers.basehttp.AdminMediaHandler will be\nremoved.  In its place use django.contrib.staticfiles.handlers.StaticFilesHandler . The template tags library adminmedia and the template tag {% admin_media_prefix %} will be removed in favor of the generic static files\nhandling. (This is faster than the usual deprecation path; see the Django 1.4 release notes .) The url and ssi template tags will be modified so that the first\nargument to each tag is a template variable, not an implied string. In 1.4,\nthis behavior is provided by a version of the tag in the future template\ntag library. The reset and sqlreset management commands will be removed. Authentication backends will need to support an inactive user\nbeing passed to all methods dealing with permissions.\nThe supports_inactive_user attribute will no longer be checked\nand can be removed from custom backends. transform() will raise\na GEOSException when called\non a geometry with no SRID value. django.http.CompatCookie will be removed in favor of django.http.SimpleCookie . django.core.context_processors.PermWrapper and django.core.context_processors.PermLookupDict will be removed in\nfavor of the corresponding django.contrib.auth.context_processors.PermWrapper and django.contrib.auth.context_processors.PermLookupDict , respectively. The MEDIA_URL or STATIC_URL settings will be\nrequired to end with a trailing slash to ensure there is a consistent\nway to combine paths in templates. django.db.models.fields.URLField.verify_exists will be removed. The\nfeature was deprecated in 1.3.1 due to intractable security and\nperformance issues and will follow a slightly accelerated deprecation\ntimeframe. Translations located under the so-called project path will be ignored during\nthe translation building process performed at runtime. The LOCALE_PATHS setting can be used for the same task by including the\nfilesystem path to a locale directory containing non-app-specific\ntranslations in its value. The Markup contrib app will no longer support versions of Python-Markdown\nlibrary earlier than 2.1. An accelerated timeline was used as this was\na security related deprecation. The CACHE_BACKEND setting will be removed. The cache backend(s) should be\nspecified in the CACHES setting. 1.4 ¶ See the Django 1.2 release notes for more\ndetails on these changes. CsrfResponseMiddleware and CsrfMiddleware will be removed.  Use\nthe {% csrf_token %} template tag inside forms to enable CSRF\nprotection. CsrfViewMiddleware remains and is enabled by default. The old imports for CSRF functionality ( django.contrib.csrf.* ),\nwhich moved to core in 1.2, will be removed. The django.contrib.gis.db.backend module will be removed in favor\nof the specific backends. SMTPConnection will be removed in favor of a generic email backend API. The many to many SQL generation functions on the database backends\nwill be removed. The ability to use the DATABASE_* family of top-level settings to\ndefine database connections will be removed. The ability to use shorthand notation to specify a database backend\n(i.e., sqlite3 instead of django.db.backends.sqlite3 ) will be\nremoved. The get_db_prep_save , get_db_prep_value and get_db_prep_lookup methods will have to support multiple databases. The Message model (in django.contrib.auth ), its related\nmanager in the User model ( user.message_set ), and the\nassociated methods ( user.message_set.create() and user.get_and_delete_messages() ), will be removed.  The messages framework should be used\ninstead. The related messages variable returned by the\nauth context processor will also be removed. Note that this\nmeans that the admin application will depend on the messages\ncontext processor. Authentication backends will need to support the obj parameter for\npermission checking. The supports_object_permissions attribute\nwill no longer be checked and can be removed from custom backends. Authentication backends will need to support the AnonymousUser class\nbeing passed to all methods dealing with permissions.  The supports_anonymous_user variable will no longer be checked and can be\nremoved from custom backends. The ability to specify a callable template loader rather than a Loader class will be removed, as will the load_template_source functions that are included with the built in template loaders for\nbackwards compatibility. django.utils.translation.get_date_formats() and django.utils.translation.get_partial_date_formats() . These functions\nwill be removed; use the locale-aware django.utils.formats.get_format() to get the appropriate formats. In django.forms.fields , the constants: DEFAULT_DATE_INPUT_FORMATS , DEFAULT_TIME_INPUT_FORMATS and DEFAULT_DATETIME_INPUT_FORMATS will be removed. Use django.utils.formats.get_format() to get the appropriate\nformats. The ability to use a function-based test runner will be removed,\nalong with the django.test.simple.run_tests() test runner. The views.feed() view and feeds.Feed class in django.contrib.syndication will be removed. The class-based view views.Feed should be used instead. django.core.context_processors.auth .  This release will\nremove the old method in favor of the new method in django.contrib.auth.context_processors.auth . The postgresql database backend will be removed, use the postgresql_psycopg2 backend instead. The no language code will be removed and has been replaced by the nb language code. Authentication backends will need to define the boolean attribute supports_inactive_user until version 1.5 when it will be assumed that\nall backends will handle inactive users. django.db.models.fields.XMLField will be removed. This was\ndeprecated as part of the 1.3 release. An accelerated deprecation\nschedule has been used because the field hasn’t performed any role\nbeyond that of a simple TextField since the removal of oldforms .\nAll uses of XMLField can be replaced with TextField . The undocumented mixin parameter to the open() method of django.core.files.storage.Storage (and subclasses) will be removed. 1.3 ¶ See the Django 1.1 release notes for more\ndetails on these changes. AdminSite.root() .  This method of hooking up the admin URLs will be\nremoved in favor of including admin.site.urls . Authentication backends need to define the boolean attributes supports_object_permissions and supports_anonymous_user until\nversion 1.4, at which point it will be assumed that all backends will\nsupport these options.", "keywords": ["django.utils.text.unescape_entities", "django.db.models.fields.add_lazy_relation", "get_all_related_objects", "default_validator_class", "sha-1", "column", "removal", "sqlclear", "variable", "l", "authenticationform", "hints", "comma", "django.contrib.gis.gdal", "type", "checkconstraint", "url", "ordereddict", "httpresponse", "fallback", "imaging", "rows", "authenticate", "django.core.management", "loader.get_template", "signal", "place", "renderer", "django.core.paginator", "settings", "m", "requestsite", "kingdom", "classes", "truncator", "django.core.signing.loads", "method", "shell", "copy.deepcopy", "form_class", "termination", "csrf_cookie_masked", "django.forms.extras", "secret_key", "verification", "ssi", "django.forms.forms.get_declared_fields", "modeladmin.response_add", "performance", "field.value_from_object", "password_reset_timeout_days", "use", "django.utils.feedgenerator", "django.template.loaders.filesystem", "encoding", "messages", "databaseintrospection.get_indexes", "views", "cookies", "storage.accessed_time", "signer", "strip_entities", "ways", "dumpdata", "timeframe", "user.message_set.create", "project", "opclasses", "django.middleware.doc", "way", "converters", "django.utils.functional.cached_property", "user.get_and_delete_messages", "default", "filters", "pil", "httprequest.raw_post_data", "option", "model.save", "op", "smart_text", "media_url", "simpletestcase.assertformseterror", "ungettext", "django.contrib.gis.admin", "runfcgi", "cleanup", "xmlfield", "effort", "client", "unsaltedsha1passwordhasher", "django.forms", "removetags", "ignorable_404_urls", "descriptors", "django.utils.text.truncate_words", "page", "locale_paths", "package", "contrib", "get_profile", "users", "django.contrib.gis.db.models.sql.aggregates", "content_type", "modeladmin.declared_fieldsets", "django.conf.urls.i18n.i18n_patterns", "backend", "texttestrunner", "staticfiles_storage", "ctrl", "django.forms.fields", "django.contrib.staticfiles.storage", "cacheclass", "django.core.context_processors", "django.contrib.gis.geoip2.geoip2.coords", "argument", "modified_time", "mac", "adminmedia", "trunc", "by", "testcase.setuptestdata", "auto", "openlayerswidget", "version", "filesystem", "building", "tuple", "truncday", "basemodeladmin", "geoip", "app_label", "default_time_input_formats", "truncweek", "django.conf.urls.url", "cx_oracle", "django.conf.urls.patterns", "quote_name_unless_alias", "properties", "default_date_input_formats", "trunchour", "policy", "django.contrib.sitemaps", "django.db.backends.util", "execute_manager", "multipolygon", "django.views.decorators.csrf.csrf_exempt", "name", "get_y", "wsgirequest", "django.core.cache.caches", "django.test.simple", "operator", "django.utils.encoding.force_text", "truncsecond", "unionagg", "admin", "field.rel", "foreignobject.get_reverse_joining_columns", "python", "django.test.client", "escapedata", "instances", "django.db.close_connection", "logging", "handler", "allow_migrate", "loader.cache_key", "supports_inactive_user", "django.test.runner", "django.utils.itercompat.any", "formats", "fixtures", "daily_cleanup.py", "lookup", "datetime.timezone.utc", "orm", "sessions", "host", "storage", "supports_anonymous_user", "get_template", "tag", "django.db.sql.query", "namespace", "contenttype.name", "django.test.runner.setup_databases", "true", "django-admin.py", "foo>)s", "*", "django.utils.copycompat", "framework", "locale", "django.utils.datetime_safe", "repr", "django.contrib.staticfiles.templatetags.static", "requests", "django.db.models.permalink", "search", "model_name", "middleware_classes", "django.utils.encoding", "exclusionconstraint", "baseloader", "fix_ampersands", "processor", "forms", "password_reset", "length", "invalidquery", "meta.manager_inheritance_from_future", "django.utils.timezone", "simpletemplateresponse", "features", "basedatabaseoperations.check_aggregate_support", "djangodivformrenderer", "jinja2divformrenderer", "syncing", "modeladmin", "key", "django.utils.datastructures", "feature", "parameters", ".", "alias", "arrayagg", "issues", "django.contrib.auth.views", "baseform._html_output", "helper", "zone", "gb", "django.core.signing", "permissions", "engine.find_template", "nulls_first", "script", "django.conf.urls", "cascaded_union", "error", "django.contrib.markup", "template", "inline", "debug", "django.contrib.localflavor", "cache", "migrations", "field.from_db_value", "literals", "get_all_related_m2m_objects_with_model", "control", "django.contrib.formtools.utils.form_hmac", "%", "setting", "mergedict", "escapeunicode", "order", "anonymoususer", "field._get_val_from_obj", "-", "deprecation", "sitemaps", "django.utils.checksums", "style", "backend(s", "field_name", "routers", "sessionauthenticationmiddleware", "queryset.datetimes", "application", "django.utils.text.truncate_html_words", "django.contrib.auth.context_processors", "renderers", "--plain", "get_filename", "migrate", "render_to_response", "storage.get_available_name", "manager.use_for_related_fields", "unordered_list", "behavior", "changelist", "model.asave", "aliases", "ids", "ignorable_404_ends", "pylibmc", "modules", "str", "expression.desc", "ipaddressfield", "query", "files", "django.forms.util", "user.is_authenticated", "needs_autoescape", "django.utils.html.clean_html", "runtime", "slash", "truncquarter", "regexfield", "django.template.loader.render_to_string", "extent3d", "paths", "json", "django.core.files.storage", "upgrade", "point", "permlookupdict", "django.db.models.enums", "versions", "authentication", "assertsredirects", "django.contrib.formtools.utils.security_hash", "¶", "meta.default_related_name", "init", "django.contrib.gis.geos", "escapestring", "sqldropindexes", "django.views.i18n.set_language", "django.db.backends.base", "noargscommand", "views.feed", "javascript_catalog", "basecommentnode", "change", "mix", "csrf_view_exempt", "format", "render", "modelchoicefield", "queryset.order_by", "django.db.models", "get_coords", "transactionmiddleware", "session", "get_x", "value", "timezones", "functions", "prefetch_related_objects", "prefetch.get_current_queryset", "loaderorigin", "django.contrib.auth.tests.utils.skipifcustomuser", "smtpconnection", "cache_middleware_anonymous_only", "callable_obj", "django.utils.cache.patch_response_headers", "expression.asc", "basegeometrywidget", "django.contrib.gis.db.backend", "whitelist", "django.utils.text", "allow_tags", "default_content_type", "c", "extra_tests", "django.contrib.localflavor.uk", "errordict", "handler404", "geometry", "1.3/1.4", "django.template.loader", "details", "django.conf.urls.defaults", "request.session", "markdown", "django.utils.itercompat.all", "form", "admin_media_prefix", "simpletestcase.urls", "object", "root", "template_dirs", "etags", "task", "warning", "discoverrunner", "sqlcompiler", "rollback_unless_managed", "django.utils.http.is_safe_url", "attributes", "library", "comparison", "algorithm", "django.contrib.admindocs.middleware", "help_text", "postgresql", "default_app_config", "citext", "queryset.iterator", "stringorigin", "choicesmeta", "pre-1.4", "inlineadminform", "django.dispatch", "context_instance", "post_url_continue", "assignment", "modeladmin.validate", "password", "django.utils.functional.allow_lazy", "assertformseterror", "orderby", "api", "period", "django.contrib.gis.sitemaps.views.index", "extendsnode.find_template", "level", "django", "mixin", "permwrapper", "message", "filesystemstorage", "genericforeignkey", "feeds", "adminmediahandler", "parameter", "sqlite3", "syntax", "fieldcachemixin", "csrf", "geographic", "wizard", "field", "django.db.backends", "django.contrib.csrf", "nb", "promotion", "django.utils.itercompat.product", "pickleserializer", "use_l10n", "queryset.earliest", "u", "relation", "http", "django.contrib.syndication", "requestcontext", "oldforms", "get_concrete_fields_with_model", "formsets", "libraries", "django.db.models.signals.pre_syncdb", "effect", "meta.ordering", "layer", "=", "transactiontestcase.assertquerysetequal", "objects", "model._meta.has_auto_field", "urlfield.verify_exists", "language", "django.utils.timezone.make_aware", "django.db.models.functions", "scheme", "django.contrib.admin.util", "django.utils.tzinfo", "changelist.query_set", "ability", "loader.supports_recursion", "implementation", "truncminute", "django.utils.html.fix_ampersands", "basecommand.requires_system_checks", "lists", "nullbooleanfield", "stub", "django.contrib.gis.sitemaps.views.sitemap", "django.test.utils", "index", "https", "truncation", "urlfield", "utc", "truncyear", "datetimes", "compatcookie", "chunk_size", "django.contrib.auth.context_processors.auth", "staticfiles", "obj", "escapebytes", "cursor.execute", "flatpagesitemap", "translation", "csrfmiddleware", "requires_system_checks", "django.test.*testcase", "logoutview", "handling", "citextfield", "templates", "contrib.auth", "expression.convert_value", "discoverrunner.run_tests", "transactiontestcase.multi_db", "time", "select_template", "exception", "logentrymanager.log_action", "release", "django.contrib.postgres.aggregates", "loader", "count", "brokenlinkemailsmiddleware", "supports_object_permissions", "setup_environ", "property", "middleware", "map_width", "queryset", "geosgeometry", "get_prefetch_queryset", "args", "apply_rel_filters", "builtin", "setter", "escapetext", "ugettext_noop", "assignment_tag", "commands", "modeladmin.log_deletion", "site", "pieces", "testtemplateloader", "extent", "generation", "manager", "sitemapindexitem.__str", "django.db.backends.creation", "subclasses", "original_content_type_id", "basedatabasecreation.set_autocommit", "groups", "json_catalog", "django.core.context_processors.auth", "django.forms.widgets", "timestampsigner", "django.utils.translation", "apis", "fields", "querysetpaginator", "strandunicode", "loader.__call", "signature", "login_url", "model._meta.add_field", "django.utils.dictconfig", "django.core.cache.get_cache", "decorator", "custom", "methods", "safestring", "side", "?", "keyword", "mail_admins", "emailvalidator", "ogrgeometry.coord_dim", "django.utils.translation.get_date_formats", "none", "syncdb", "urls", "load_template_source", "join", "django.contrib.auth.views.logout_then_login", "protocol", "process", "default.html", "set_x", "command", "django.core.urlresolvers", "pylibmccache", "get_query_set", "timeline", "reset", "cachedstaticfilesstorage", "django.utils.hashcompat", "email", "cryptpasswordhasher", "django.utils.text.javascript_quote", "foreignobject", "content", "validators", "radioinput", "cache_page", "django.shortcuts.render_to_response", "django.db.models.signals.post_syncdb", "modeladmin.get_formsets", "makemigrations", "formmixin.get_form", "request", "inheritance", "django.core.validators", "remoteuserbackend.configure_user", "cycle", "cicharfield", "splitdatetimewidget", "get_response", "checking", "django.utils.html.conditional_escape", "django.db.models.query_utils", "httprequest.is_ajax", "current_app", "django.shortcuts.render", "django.utils.functional.memoize", "password_reset_done", "model._meta.get_(add|change|delete)_permission", "django.contrib.sessions.serializers", "protection", "doctest", "django.contrib.gis.geoip", "data", "inlinemodeladmin.has_add_permission", "django.contrib.auth.views.password_reset_confirm", "django.template.loaders.base", "check_field", "constraint", "django.core.servers.basehttp", "lookups", "group", "options", "get_m2m_with_model", "django.conf.urls.include", "tw", "simplecookie", "enclosure", "django.views.defaults.shortcut", "modelformmixin.success_url", "widget._format_value", "truncmonth", "notes", "references", "reversesinglerelatedobjectdescriptor", "patterns", "use_etags", "templateresponse", "django.utils.timezone.utc", "response", "formset", "shortcut", "field.contribute_to_class", "commit_on_success", "s", "kwargs", "serializers.serialize", "floatrangefield", "django.template.loader_tags", "load_template", "get_z", "sql", "use_natural_keys", "admin.site.urls", "path", "transactions_managed", "directory", "model._meta", "osmgeoadmin", "managers", "auth", "django.contrib.flatpages.sitemaps", "baseconstraint", "simpletestcase.allow_database_queries", "dirs", "constants", "cache_choices", "model._meta.module_name", "in", "set_coords", "module", "language_session_key", "arguments", "backends", "apps", "goal", "warnings.catch_warnings", "synonym", "markup", "httprequest.xreadlines", "django.core.cache.backends.memcached", "family", "context", "collections", "decorators", "deprecationwarning", "syndicationfeed.add_item", "auth_profile_module", "db", "sqlindexes", "codebase", "discoverrunner.build_suite", "geomanager", "security", "equivalents", "models", "basecommand.requires_model_validation", "created_time", "shorthand", "django.db.backends.postgresql_psycopg2", "allow_migrate(self", "shims", "user.message_set", "get_joining_columns", "singlerelatedobjectdescriptor", "postgresql_psycopg2", "remove_tags", "check_for_test_cookie", "django.template.engine", "expression.get_group_by_cols", "default_hashing_algorithm", "edit", "sorteddict", "onetoonefield", "django.template.response", "feed", "django.contrib.sites.models", "querysets", "support", "baseusermanager.make_random_password", "correction", "simpletestcase.assertformerror", "add_aggregate", "schedule", "changes", "tokens", "filter", "django.contrib", "rules", "validate", "escape", "legacy", "false", "fastcgi", "filefield", "management", "djangotestrunner", "django.contrib.auth.hashers", "serialize", "_", "password_change", "django.contrib.gis.db.models.functions", "check", "hand", "field.remote_field.to", "django.utils.module_loading.import_string", "meta.index_together", "codes", "memcachedcache", "values", "django.contrib.comments", "geoqueryset", "urlunquote", "get_prefetcher", "cookiestorage", "mro", "runner", "uk", "iterator", "get_fields_with_model", "notation", "caches", "item", "role", "permission", "translations", "get_srid", "compatibility", "test", "zones", "make_line", "django.contrib.auth.views.password_reset_confirm_uidb36", "django.utils.formats.get_format", "format_html", "django.utils.itercompat", "django.utils.baseconv", "django.template", "hans", "django.contrib.contenttypes.views.shortcut", "default_datetime_input_formats", "usage", "transaction", "entries", "handler500", "model", "django.contrib.postgres.constraints", "max_length", "django.urls.register_converter", "iso", "django.contrib.postgres.forms", "origin", "copies", "signatures", "django.utils.crypto.get_random_string", "django.db.backend", "use_tz", "widget.render", "parent_link", "get_cache_name", "storage.save", "django.contrib.admin.helpers", "checks", "calls", "n’t", "clearsessions", "forcerhr", "get_field_by_name", "django.utils.http.cookie_date", "django.contrib.gis.utils.precision_wkt", "changelist.root_query_set", "imports", "class", "django.contrib.postgres.fields", "django.utils.translation.string_concat", "set_z", "virtual_fields", "mimetype", "password_reset_complete", "django.utils.translation.get_partial_date_formats", "geosexception", "connections", "rssfeed", "attribute", "ones", "function", "sqlreset", "string", "django.core.signing.dumps", "set_aggregate_mask", "list", "shim", "django.db.models.options", "django.utils.importlib", "loading", "jsonbagg", "initial_data", "errorlist", "commaseparatedintegerfield", "is_safe", "django.utils.deprecation", "view", "wherenode.make_atom", "app", "uses", "urlquote_plus", "django.utils.simplejson", "i", "datetimefield", "flags", "user", "keytexttransform", "part", "file", "queries", "mime_type", "cn", "jsonfield", "errors", "core", "django.contrib.staticfiles.handlers", "os_open_flags", "get", "favor", "django_language", "password_reset_confirm", "restore_warnings_state", "get_all_related_objects_with_model", "databaseoperations.fulltext_search_sql", "foreignobjectrel", "exceptions", "django.utils.html", "django.db.models.loading", "sitemap", "django.db.models.sql.where", "django.utils.module_loading.import_by_path", "csrf_response_exempt", "names", "pre", "get_all_related_many_to_many_objects", "choicestype", "basememcachedcache._get_memcache_timeout", "expressions", "django.db.models.sql.aggregates", "base36", "mod_python", "django.middleware.common", "aggregates", "separator", "django.db.backends.sqlite3", "document", "tags", "django.contrib.auth", "contrib.auth.views.logout_then_login", "django.template.base", "functionality", "django.test.simple.run_tests", "textfield", "set_srid", "modelmultiplechoicefield", "foreignkey", "database", "django.template.loader.get_template", "databasevalidation.validate_field", "no", "xviewmiddleware", "loaders", "transform", "get_db_prep_value", "databases", "expression", "commonmiddleware", "basecommand", "get_all_field_names", "united", "instance", "save_warnings_state", "geomodeladmin", "subfieldbase", "zh", "code", "fixedoffset", "links", "wsgi", "keytransform", "set_y", "firstof", "get_warnings_state", "entry", "stringagg", "csrfviewmiddleware", "django.contrib.gis.db.backends.util"], "type": "documentation"},
{"title": "Django’s release process", "url": "https://docs.djangoproject.com/en/5.1/internals/release-process/", "content": "Django’s release process ¶ Official releases ¶ Since version 1.0, Django’s release numbering works as follows: Versions are numbered in the form A.B or A.B.C . A.B is the feature release version number. Each version will be mostly\nbackwards compatible with the previous release. Exceptions to this rule will\nbe listed in the release notes. C is the patch release version number, which is incremented for bugfix\nand security releases. These releases will be 100% backwards-compatible with\nthe previous patch release. The only exception is when a security or data\nloss issue can’t be fixed without breaking backwards-compatibility. If this\nhappens, the release notes will provide detailed upgrade instructions. Before a new feature release, we’ll make alpha, beta, and release candidate\nreleases. These are of the form A.B alpha/beta/rc N , which means the Nth alpha/beta/release candidate of version A.B . In git, each Django release will have a tag indicating its version number,\nsigned with the Django release key. Additionally, each release series has its\nown branch, called stable/A.B.x , and bugfix/security releases will be\nissued from those branches. For more information about how the Django project issues new releases for\nsecurity purposes, please see our security policies . Feature release ¶ Feature releases (A.B, A.B+1, etc.) will happen roughly every eight months\n– see release process for details. These releases will contain new\nfeatures, improvements to existing features, and such. Patch release ¶ Patch releases (A.B.C, A.B.C+1, etc.) will be issued as needed, to fix\nbugs and/or security issues. These releases will be 100% compatible with the associated feature release,\nunless this is impossible for security reasons or to prevent data loss.\nSo the answer to “should I upgrade to the latest patch release?” will always\nbe “yes.” Long-term support release ¶ Certain feature releases will be designated as long-term support (LTS)\nreleases. These releases will get security and data loss fixes applied for\na guaranteed period of time, typically three years. See the download page for the releases that have been designated for\nlong-term support. Release cadence ¶ Starting with Django 2.0, version numbers will use a loose form of semantic\nversioning such that each version following an LTS will\nbump to the next “dot zero” version. For example: 2.0, 2.1, 2.2 (LTS), 3.0,\n3.1, 3.2 (LTS), etc. SemVer makes it easier to see at a glance how compatible releases are with each\nother. It also helps to anticipate when compatibility shims will be removed.\nIt’s not a pure form of SemVer as each feature release will continue to have a\nfew documented backwards incompatibilities where a deprecation path isn’t\npossible or not worth the cost. Also, deprecations started in an LTS release\n(X.2) will be dropped in a non-dot-zero release (Y.1) to accommodate our policy\nof keeping deprecation shims for at least two feature releases. Read on to the\nnext section for an example. Deprecation policy ¶ A feature release may deprecate certain features from previous releases. If a\nfeature is deprecated in feature release A.x, it will continue to work in all\nA.x versions (for all versions of x) but raise warnings. Deprecated features\nwill be removed in the B.0 release, or B.1 for features deprecated in the last\nA.x feature release to ensure deprecations are done over at least 2 feature\nreleases. So, for example, if we decided to start the deprecation of a function in\nDjango 4.2: Django 4.2 will contain a backwards-compatible replica of the function which\nwill raise a RemovedInDjango51Warning . Django 5.0 (the version that follows 4.2) will still contain the\nbackwards-compatible replica. Django 5.1 will remove the feature outright. The warnings are silent by default. You can turn on display of these warnings\nwith the python -Wd option. A more generic example: X.0 X.1 X.2 LTS Y.0: Drop deprecation shims added in X.0 and X.1. Y.1: Drop deprecation shims added in X.2. Y.2 LTS: No deprecation shims dropped (while Y.0 is no longer supported,\nthird-party apps need to maintain compatibility back to X.2 LTS to ease\nLTS to LTS upgrades). Z.0: Drop deprecation shims added in Y.0 and Y.1. See also the Deprecating a feature guide. Supported versions ¶ At any moment in time, Django’s developer team will support a set of releases to\nvarying levels. See the supported versions section of the download\npage for the current state of support for each version. The current development branch main will get new features and bug fixes\nrequiring non-trivial refactoring. Patches applied to the main branch must also be applied to the last feature\nrelease branch, to be released in the next patch release of that feature\nseries, when they fix critical problems: Security issues. Data loss bugs. Crashing bugs. Major functionality bugs in new features of the latest stable release. Regressions from older versions of Django introduced in the current release\nseries. The rule of thumb is that fixes will be backported to the last feature\nrelease for bugs that would have prevented a release in the first place\n(release blockers). Security fixes and data loss bugs will be applied to the current main branch,\nthe last two feature release branches, and any other supported long-term\nsupport release branches. Documentation fixes generally will be more freely backported to the last\nrelease branch. That’s because it’s highly advantageous to have the docs for\nthe last release be up-to-date and correct, and the risk of introducing\nregressions is much less of a concern. As a concrete example, consider a moment in time halfway between the release of\nDjango 5.1 and 5.2. At this point in time: Features will be added to the development main branch, to be released as\nDjango 5.2. Critical bug fixes will be applied to the stable/5.1.x branch, and\nreleased as 5.1.1, 5.1.2, etc. Security fixes and bug fixes for data loss issues will be applied to main and to the stable/5.1.x , stable/5.0.x , and stable/4.2.x (LTS) branches. They will trigger the release of 5.1.1 , 5.0.5 , 4.2.8 , etc. Documentation fixes will be applied to main, and, if easily backported, to\nthe latest stable branch, 5.1.x . Release process ¶ Django uses a time-based release schedule, with feature releases every eight\nmonths or so. After each feature release, the release manager will announce a timeline for\nthe next feature release. Release cycle ¶ Each release cycle consists of three parts: Phase one: feature proposal ¶ The first phase of the release process will include figuring out what major\nfeatures to include in the next version. This should include a good deal of\npreliminary work on those features – working code trumps grand design. Major features for an upcoming release will be added to the wiki roadmap page,\ne.g. https://code.djangoproject.com/wiki/Version1.11Roadmap . Phase two: development ¶ The second part of the release schedule is the “heads-down” working period.\nUsing the roadmap produced at the end of phase one, we’ll all work very hard to\nget everything on it done. At the end of phase two, any unfinished features will be postponed until the\nnext release. Phase two will culminate with an alpha release. At this point, the stable/A.B.x branch will be forked from main . Phase three: bugfixes ¶ The last part of a release cycle is spent fixing bugs – no new features will\nbe accepted during this time. We’ll try to release a beta release one month\nafter the alpha and a release candidate one month after the beta. The release candidate marks the string freeze, and it happens at least two\nweeks before the final release. After this point, new translatable strings\nmust not be added. During this phase, mergers will be more and more conservative with backports,\nto avoid introducing regressions. After the release candidate, only release\nblockers and documentation fixes should be backported. In parallel to this phase, main can receive new features, to be released\nin the A.B+1 cycle. Bug-fix releases ¶ After a feature release (e.g. A.B), the previous release will go into bugfix\nmode. The branch for the previous feature release (e.g. stable/A.B-1.x ) will\ninclude bugfixes. Critical bugs fixed on main must also be fixed on the\nbugfix branch; this means that commits need to cleanly separate bug fixes from\nfeature additions. The developer who commits a fix to main will be\nresponsible for also applying the fix to the current bugfix branch.", "keywords": ["state", "x.0", "instructions", "stable/4.2.x", "work", "warnings", "developer", "patches", "design", "branches", "support", "5.1.2", "backports", "a.b", "%", "git", "docs", "schedule", "lts", "documentation", "patch", "deprecation", "development", "problems", "replica", "place", "policies", "works", "time", "exception", "answer", "release", "glance", "additions", "thumb", "party", "https://code.djangoproject.com/wiki/version1.11roadmap", "a.b.x", "bugs", "branch", "blockers", "mode", "risk", "mergers", "weeks", "manager", "releases", "moment", "information", "project", "upgrade", "a.b-1.x", "compatibility", "upgrades", "point", "section", "versions", "freeze", "¶", "default", "option", "main", "x.2", "concern", "page", "process", "purposes", "y.0", "example", "fixes", "timeline", "b.1", "n’t", "guide", "fix", "dot", "y.1", "years", "end", "n", "x.1", "proposal", "number", "heads", "numbers", "version", "months", "cycle", "c", "refactoring", "issues", "alpha", "rc", "function", "a.x", "string", "drop", "series", "bug", "a.b.c", "details", "term", "x", "month", "policy", "cadence", "incompatibilities", "data", "stable/5.1.x", "form", "parts", "team", "removedindjango51warning", "part", "notes", "python", "wiki", "reasons", "issue", "phase", "beta", "working", "exceptions", "period", "numbering", "a.b+1", "path", "rule", "django", "tag", "semver", "candidate", "display", "bugfix", "official", "set", "regressions", "date", "apps", "y.2", "functionality", "loss", "cost", "strings", "nth", "5.1.1", "deal", "roadmap", "security", "features", "download", "deprecations", "feature", "code", "bugfixes", "parallel", "key", "levels", "improvements", "a.b.c+1", "shims"], "type": "documentation"},
{"title": "Django’s security policies", "url": "https://docs.djangoproject.com/en/5.1/internals/security/", "content": "Django’s security policies ¶ Django’s development team is strongly committed to responsible\nreporting and disclosure of security-related issues. As such, we’ve\nadopted and follow a set of policies which conform to that ideal and\nare geared toward allowing us to deliver timely security updates to\nthe official distribution of Django, as well as to third-party\ndistributions. Reporting security issues ¶ Short version: please report security issues by emailing\nsecurity@djangoproject.com . Most normal bugs in Django are reported to our public Trac instance , but\ndue to the sensitive nature of security issues, we ask that they not be\npublicly reported in this fashion. Instead, if you believe you’ve found something in Django which has security\nimplications, please send a description of the issue via email to security@djangoproject.com . Mail sent to that address reaches the security\nteam . Once you’ve submitted an issue via email, you should receive an acknowledgment\nfrom a member of the security team within 48 hours, and depending on the\naction to be taken, you may receive further followup emails. Sending encrypted reports If you want to send an encrypted email ( optional ), the public key ID for security@djangoproject.com is 0xfcb84b8d1d17f80b , and this public\nkey is available from most commonly-used keyservers. How does Django evaluate a report ¶ These are criteria used by the security team when evaluating whether a report\nrequires a security release: The vulnerability is within a supported version of\nDjango. The vulnerability applies to a production-grade Django application. This means\nthe following do not require a security release: Exploits that only affect local development, for example when using runserver . Exploits which fail to follow security best practices, such as failure to\nsanitize user input. For other examples, see our security\ndocumentation . Exploits in AI generated code that do not adhere to security best practices. The security team may conclude that the source of the vulnerability is within\nthe Python standard library, in which case the reporter will be asked to report\nthe vulnerability to the Python core team. For further details see the Python\nsecurity guidelines . On occasion, a security release may be issued to help resolve a security\nvulnerability within a popular third-party package. These reports should come\nfrom the package maintainers. If you are unsure whether your finding meets these criteria, please still report\nit privately by emailing security@djangoproject.com . The security team will review your report and\nrecommend the correct course of action. Supported versions ¶ At any given time, the Django team provides official security support\nfor several versions of Django: The main development branch , hosted on GitHub, which will become the\nnext major release of Django, receives security support. Security issues that\nonly affect the main development branch and not any stable released versions\nare fixed in public without going through the disclosure process . The two most recent Django release series receive security\nsupport. For example, during the development cycle leading to the\nrelease of Django 1.5, support will be provided for Django 1.4 and\nDjango 1.3. Upon the release of Django 1.5, Django 1.3’s security\nsupport will end. Long-term support release s will receive security updates for a\nspecified period. When new releases are issued for security reasons, the accompanying\nnotice will include a list of affected versions. This list is\ncomprised solely of supported versions of Django: older versions may\nalso be affected, but we do not investigate to determine that, and\nwill not issue patches or new releases for those versions. How Django discloses security issues ¶ Our process for taking a security issue from private discussion to\npublic disclosure involves multiple steps. Approximately one week before public disclosure, we send two notifications: First, we notify django-announce of the date and approximate time of the\nupcoming security release, as well as the severity of the issues. This is to\naid organizations that need to ensure they have staff available to handle\ntriaging our announcement and upgrade Django as needed. Severity levels are: High Remote code execution SQL injection Moderate Cross site scripting (XSS) Cross site request forgery (CSRF) Denial-of-service attacks Broken authentication Low Sensitive data exposure Broken session management Unvalidated redirects/forwards Issues requiring an uncommon configuration option Second, we notify a list of people and organizations , primarily composed of operating-system vendors and\nother distributors of Django. This email is signed with the PGP key of someone\nfrom Django’s release team and consists of: A full description of the issue and the affected versions of Django. The steps we will be taking to remedy the issue. The patch(es), if any, that will be applied to Django. The date on which the Django team will apply these patches, issue\nnew releases and publicly disclose the issue. On the day of disclosure, we will take the following steps: Apply the relevant patch(es) to Django’s codebase. Issue the relevant release(s), by placing new packages on the Python\nPackage Index and on the djangoproject.com website , and tagging the new release(s)\nin Django’s git repository. Post a public entry on the official Django development blog ,\ndescribing the issue and its resolution in detail, pointing to the\nrelevant patches and new releases, and crediting the reporter of\nthe issue (if the reporter wishes to be publicly identified). Post a notice to the django-announce and oss-security @ lists . openwall . com mailing lists that links to the blog post. If a reported issue is believed to be particularly time-sensitive –\ndue to a known exploit in the wild, for example – the time between\nadvance notification and public disclosure may be shortened\nconsiderably. Additionally, if we have reason to believe that an issue reported to\nus affects other frameworks or tools in the Python/web ecosystem, we\nmay privately contact and discuss those issues with the appropriate\nmaintainers, and coordinate our own disclosure and resolution with\ntheirs. The Django team also maintains an archive of security issues\ndisclosed in Django . Who receives advance notification ¶ The full list of people and organizations who receive advance\nnotification of security issues is not and will not be made public. We also aim to keep this list as small as effectively possible, in\norder to better manage the flow of confidential information prior to\ndisclosure. As such, our notification list is not simply a list of\nusers of Django, and being a user of Django is not sufficient reason\nto be placed on the notification list. In broad terms, recipients of security notifications fall into three\ngroups: Operating-system vendors and other distributors of Django who\nprovide a suitably-generic (i.e., not an individual’s personal\nemail address) contact address for reporting issues with their\nDjango package, or for general security reporting. In either case,\nsuch addresses must not forward to public mailing lists or bug\ntrackers. Addresses which forward to the private email of an\nindividual maintainer or security-response contact are acceptable,\nalthough private security trackers or security-response groups are\nstrongly preferred. On a case-by-case basis, individual package maintainers who have\ndemonstrated a commitment to responding to and responsibly acting\non these notifications. On a case-by-case basis, other entities who, in the judgment of the\nDjango development team, need to be made aware of a pending\nsecurity issue. Typically, membership in this group will consist of\nsome of the largest and/or most likely to be severely impacted\nknown users or distributors of Django, and will require a\ndemonstrated ability to responsibly receive, keep confidential and\nact on these notifications. Security audit and scanning entities As a policy, we do not add these types of entities to the notification\nlist. Requesting notifications ¶ If you believe that you, or an organization you are authorized to\nrepresent, fall into one of the groups listed above, you can ask to be\nadded to Django’s notification list by emailing security@djangoproject.com . Please use the subject line “Security\nnotification request”. Your request must include the following information: Your full, real name and the name of the organization you represent,\nif applicable, as well as your role within that organization. A detailed explanation of how you or your organization fit at least\none set of criteria listed above. A detailed explanation of why you are requesting security notifications.\nAgain, please keep in mind that this is not simply a list for users of\nDjango, and the overwhelming majority of users should subscribe to django-announce to receive advanced notice of when a security release will\nhappen, without the details of the issues, rather than request detailed\nnotifications. The email address you would like to have added to our notification\nlist. An explanation of who will be receiving/reviewing mail sent to that\naddress, as well as information regarding any automated actions that\nwill be taken (i.e., filing of a confidential issue in a bug\ntracker). For individuals, the ID of a public key associated with your address\nwhich can be used to verify email received from you and encrypt\nemail sent to you, as needed. Once submitted, your request will be considered by the Django\ndevelopment team; you will receive a reply notifying you of the result\nof your request within 30 days. Please also bear in mind that for any individual or organization,\nreceiving security notifications is a privilege granted at the sole\ndiscretion of the Django development team, and that this privilege can\nbe revoked at any time, with or without explanation. Provide all required information A failure to provide the required information in your initial contact\nwill count against you when making the decision on whether or not to\napprove your request.", "keywords": ["fashion", "addresses", "explanation", "index", "website", "lists", "resolution", "frameworks", "patches", "xss", "line", "support", "majority", "announcement", "distributors", "reporter", "nature", "types", "git", "order", "followup", "basis", "documentation", "membership", "distribution", "development", "organizations", "recipients", "id", "policies", "moderate", "reason", "time", "application", "scripting", "management", "release", "day", "act", "party", "occasion", "bugs", "system", "maintainers", "wild", "individual", "branch", "reports", "site", "organization", "notifications", "contact", "following", "releases", "information", "role", "groups", "vendors", "filing", "discretion", "guidelines", "result", "com", "repository", "exploits", "versions", "authentication", "theirs", "¶", "service", "individuals", "distributions", "grade", "option", "forgery", "web", "member", "input", "injection", "terms", "judgment", "package", "process", "mind", "example", "maintainer", "acknowledgment", "runserver", "session", "users", "entities", "email", "production", "trackers", "decision", "reporting", "source", "week", "people", "case", "commitment", "remote", "request", "version", "github", "blog", "redirects", "course", "attacks", "cycle", "announce", "encrypt", "report", "exploit", "finding", "public", "action", "cross", "openwall", "examples", "practices", "series", "list", "exposure", "details", "term", "bug", "actions", "policy", "steps", "data", "staff", "flow", "group", "name", "team", "user", "implications", "library", "security@djangoproject.com", "tracker", "ecosystem", "emails", "python", "core", "notice", "reasons", "optional", "issue", "response", "execution", "description", "audit", "configuration", "sql", "trac", "privilege", "period", "ideal", "ai", "notification", "reply", "post", "severity", "django", "archive", "days", "tools", "oss", "address", "vulnerability", "mail", "failure", "date", "set", "csrf", "criteria", "pgp", "packages", "keyservers", "advance", "mailing", "release(s", "operating", "patch(es", "codebase", "instance", "security", "code", "denial", "disclosure", "detail", "hours", "key", "updates", "discussion", "levels", "entry", "issues", "aid", "ability"], "type": "documentation"},
{"title": "Organization of the Django Project", "url": "https://docs.djangoproject.com/en/5.1/internals/organization/", "content": "Organization of the Django Project ¶ Principles ¶ The Django Project is managed by a team of volunteers pursuing three goals: Driving the development of the Django web framework, Fostering the ecosystem of Django-related software, Leading the Django community in accordance with the values described in the Django Code of Conduct . The Django Project isn’t a legal entity. The Django Software Foundation , a\nnon-profit organization, handles financial and legal matters related to the\nDjango Project. Other than that, the Django Software Foundation lets the\nDjango Project manage the development of the Django framework, its ecosystem\nand its community. Mergers ¶ Role ¶ Mergers are a small set of people who merge pull requests to the Django Git\nrepository . Prerogatives ¶ Mergers hold the following prerogatives: Merging any pull request which constitutes a minor change (small enough\nnot to require the use of the DEP process ). A Merger must not merge a\nchange primarily authored by that Merger, unless the pull request has been\napproved by: another Merger, a steering council member, a member of the triage & review team , or a member of the security team . Initiating discussion of a minor change in the appropriate venue, and request\nthat other Mergers refrain from merging it while discussion proceeds. Requesting a vote of the steering council regarding any minor change if, in\nthe Merger’s opinion, discussion has failed to reach a consensus. Requesting a vote of the steering council when a major change (significant\nenough to require the use of the DEP process ) reaches one of its\nimplementation milestones and is intended to merge. Membership ¶ The steering council selects Mergers as necessary to maintain their number\nat a minimum of three, in order to spread the workload and avoid over-burdening\nor burning out any individual Merger. There is no upper limit to the number of\nMergers. It’s not a requirement that a Merger is also a Django Fellow, but the Django\nSoftware Foundation has the power to use funding of Fellow positions as a way\nto make the role of Merger sustainable. The following restrictions apply to the role of Merger: A person must not simultaneously serve as a member of the steering council. If\na Merger is elected to the steering council, they shall cease to be a Merger\nimmediately upon taking up membership in the steering council. A person may serve in the roles of Releaser and Merger simultaneously. The selection process, when a vacancy occurs or when the steering council deems\nit necessary to select additional persons for such a role, occur as follows: Any member in good standing of an appropriate discussion venue, or the Django\nSoftware Foundation board acting with the input of the DSF’s Fellowship\ncommittee, may suggest a person for consideration. The steering council considers the suggestions put forth, and then any member\nof the steering council formally nominates a candidate for the role. The steering council votes on nominees. Mergers may resign their role at any time, but should endeavor to provide some\nadvance notice in order to allow the selection of a replacement. Termination of\nthe contract of a Django Fellow by the Django Software Foundation temporarily\nsuspends that person’s Merger role until such time as the steering council can\nvote on their nomination. Otherwise, a Merger may be removed by: Becoming disqualified due to election to the steering council. Becoming disqualified due to actions taken by the Code of Conduct committee\nof the Django Software Foundation. A vote of the steering council. Releasers ¶ Role ¶ Releasers are a small set of people who have the authority to upload packaged\nreleases of Django to the Python Package Index and to the djangoproject.com website. Prerogatives ¶ Releasers build Django releases and\nupload them to the Python Package Index and to the djangoproject.com website. Membership ¶ The steering council selects Releasers as necessary to maintain their number\nat a minimum of three, in order to spread the workload and avoid over-burdening\nor burning out any individual Releaser. There is no upper limit to the number\nof Releasers. It’s not a requirement that a Releaser is also a Django Fellow, but the Django\nSoftware Foundation has the power to use funding of Fellow positions as a way\nto make the role of Releaser sustainable. A person may serve in the roles of Releaser and Merger simultaneously. The selection process, when a vacancy occurs or when the steering council deems\nit necessary to select additional persons for such a role, occur as follows: Any member in good standing of an appropriate discussion venue, or the Django\nSoftware Foundation board acting with the input of the DSF’s Fellowship\ncommittee, may suggest a person for consideration. The steering council considers the suggestions put forth, and then any member\nof the steering council formally nominates a candidate for the role. The steering council votes on nominees. Releasers may resign their role at any time, but should endeavor to provide\nsome advance notice in order to allow the selection of a replacement.\nTermination of the contract of a Django Fellow by the Django Software\nFoundation temporarily suspends that person’s Releaser role until such time as\nthe steering council can vote on their nomination. Otherwise, a Releaser may be removed by: Becoming disqualified due to actions taken by the Code of Conduct committee\nof the Django Software Foundation. A vote of the steering council. Steering council ¶ Role ¶ The steering council is a group of experienced contributors who: provide oversight of Django’s development and release process, assist in setting the direction of feature development and releases, select Mergers and Releasers, and have a tie-breaking vote when other decision-making processes fail. Their main concern is to maintain the quality and stability of the Django Web\nFramework. Prerogatives ¶ The steering council holds the following prerogatives: Making a binding decision regarding any question of a technical change to\nDjango. Vetoing the merging of any particular piece of code into Django or ordering\nthe reversion of any particular merge or commit. Announcing calls for proposals and ideas for the future technical direction\nof Django. Selecting and removing mergers and releasers. Participating in the removal of members of the steering council, when deemed\nappropriate. Calling elections of the steering council outside of those which are\nautomatically triggered, at times when the steering council deems an election\nis appropriate. Participating in modifying Django’s governance (see Changing the organization ). Declining to vote on a matter the steering council feels is unripe for a\nbinding decision, or which the steering council feels is outside the scope of\nits powers. Taking charge of the governance of other technical teams within the Django\nopen-source project, and governing those teams accordingly. Membership ¶ The steering council is an elected group of five experienced contributors\nwho demonstrate: A history of substantive contributions to Django or the Django ecosystem.\nThis history must begin at least 18 months prior to the individual’s\ncandidacy for the Steering Council, and include substantive contributions in\nat least two of these bullet points: Code contributions to Django projects or major third-party packages in the\nDjango ecosystem Reviewing pull requests and/or triaging Django project tickets Documentation, tutorials or blog posts Discussions about Django on the django-developers mailing list or the Django\nForum Running Django-related events or user groups A history of engagement with the direction and future of Django. This does\nnot need to be recent, but candidates who have not engaged in the past three\nyears must still demonstrate an understanding of Django’s changes and\ndirection within those three years. A new council is elected after each release cycle of Django. The election process\nworks as follows: The steering council directs one of its members to notify the Secretary of the\nDjango Software Foundation, in writing, of the triggering of the election,\nand the condition which triggered it. The Secretary post to the appropriate\nvenue – the django-developers mailing list and the Django forum to\nannounce the election and its timeline. As soon as the election is announced, the DSF Board begin a period of\nvoter registration. All individual members of the DSF are automatically\nregistered and need not explicitly register. All other persons who believe\nthemselves eligible to vote, but who have not yet registered to vote, may\nmake an application to the DSF Board for voting privileges. The voter\nregistration form and roll of voters is maintained by the DSF Board. The DSF\nBoard may challenge and reject the registration of voters it believes are\nregistering in bad faith or who it believes have falsified their\nqualifications or are otherwise unqualified. Registration of voters close one week after the announcement of the\nelection. At that point, registration of candidates begin. Any qualified\nperson may register as a candidate. The candidate registration form and\nroster of candidates are maintained by the DSF Board, and candidates must\nprovide evidence of their qualifications as part of registration. The DSF\nBoard may challenge and reject the registration of candidates it believes do\nnot meet the qualifications of members of the Steering Council, or who it\nbelieves are registering in bad faith. Registration of candidates close one week after it has opened. One week\nafter registration of candidates closes, the Secretary of the DSF publish\nthe roster of candidates to the django-developers mailing list and the Django forum , and the election begin. The DSF Board provide a voting form\naccessible to registered voters, and is the custodian of the votes. Voting is by secret ballot containing the roster of candidates, and any\nrelevant materials regarding the candidates, in a randomized order. Each\nvoter may vote for up to five candidates on the ballot. The election conclude one week after it begins. The DSF Board then tally the\nvotes and produce a summary, including the total number of votes cast and\nthe number received by each candidate. This summary is ratified by a\nmajority vote of the DSF Board, then posted by the Secretary of the DSF to\nthe django-developers mailing list and the Django Forum. The five\ncandidates with the highest vote totals are immediately become the new\nsteering council. A member of the steering council may be removed by: Becoming disqualified due to actions taken by the Code of Conduct committee\nof the Django Software Foundation. Determining that they did not possess the qualifications of a member of the\nsteering council. This determination must be made jointly by the other members\nof the steering council, and the DSF Board . A valid determination of\nineligibility requires that all other members of the steering council and all\nmembers of the DSF Board vote who can vote on the issue (the affected person,\nif a DSF Board member, must not vote) vote “yes” on a motion that the person\nin question is ineligible. Changing the organization ¶ Changes to this document require the use of the DEP process , with\nmodifications described in DEP 0010 .", "keywords": ["implementation", "releasers", "milestones", "vote", "consideration", "index", "venue", "board", "website", "opinion", "elections", "qualifications", "removal", "software", "bullet", "council", "majority", "announcement", "selection", "fellow", "git", "order", "candidacy", "changes", "voter", "documentation", "membership", "development", "reversion", "entity", "time", "determination", "application", "contract", "release", "party", "merge", "termination", "points", "triggering", "burdening", "requirement", "person", "teams", "values", "organization", "minimum", "mergers", "use", "authority", "times", "prerogatives", "releases", "registration", "candidates", "role", "project", "processes", "charge", "groups", "condition", "consensus", "repository", "point", "way", "¶", "matters", "piece", "dsf", "faith", "materials", "web", "member", "oversight", "input", "evidence", "unripe", "concern", "modifications", "discussions", "suggestions", "change", "totals", "package", "roster", "process", "conduct", "timeline", "roll", "workload", "calls", "n’t", "powers", "steering", "custodian", "years", "decision", "source", "people", "week", "proceeds", "publish", "community", "number", "replacement", "voters", "begin", "persons", "ideas", "dep", "request", "funding", "positions", "tickets", "blog", "months", "writing", "cycle", "ballot", "merging", "restrictions", "developers", "future", "motion", "list", "tie", "question", "volunteers", "actions", "governance", "pull", "fellowship", "form", "group", "team", "voting", "user", "running", "votes", "part", "review", "nomination", "ecosystem", "quality", "goals", "python", "releaser", "direction", "notice", "secretary", "issue", "history", "matter", "committee", "engagement", "nominees", "understanding", "stability", "period", "posts", "events", "post", "principles", "projects", "summary", "django", "foundation", "election", "proposals", "candidate", "scope", "forum", "document", "tutorials", "set", "framework", "contributors", "standing", "packages", "advance", "requests", "mailing", "vacancy", "roles", "limit", "contributions", "accordance", "triage", "security", "code", "feature", "ineligibility", "merger", "discussion", "members", "privileges", "power"], "type": "documentation"},
{"title": "Mailing lists and Forum", "url": "https://docs.djangoproject.com/en/5.1/internals/mailing-lists/", "content": "Mailing lists and Forum ¶ Important Please report security issues only to security @ djangoproject . com .  This is a private list only open to\nlong-time, highly trusted Django developers, and its archives are\nnot public. For further details, please see our security\npolicies . Django Forum ¶ Django has an official Forum where you can input and ask questions. There are several categories of discussion including: Using Django : to ask any question regarding the installation, usage, or\ndebugging of Django. Internals : for discussion of the development of Django itself. In addition, Django has several official mailing lists on Google Groups that\nare open to anyone. django-users ¶ Note The Using Django category of the official Forum is now the preferred\nvenue for asking usage questions. This is the right place if you are looking to ask any question regarding the\ninstallation, usage, or debugging of Django. Note If it’s the first time you send an email to this list, your email must be\naccepted first so don’t worry if your message does not appear instantly. django-users mailing archive django-users subscription email address django-users posting email django-developers ¶ Note The Internals category of the official Forum is now the preferred\nvenue for discussing the development of Django. The discussion about the development of Django itself takes place here. Before asking a question about how to contribute, read Contributing to Django . Many frequently asked questions are\nanswered there. Note Please make use of django-users mailing list if you want\nto ask for tech support, doing so in this list is inappropriate. django-developers mailing archive django-developers subscription email address django-developers posting email django-announce ¶ A (very) low-traffic list for announcing upcoming security releases , new releases of Django, and security advisories. django-announce mailing archive django-announce subscription email address django-announce posting email django-updates ¶ All the ticket updates are mailed automatically to this list, which is tracked\nby developers and interested community members. django-updates mailing archive django-updates subscription email address django-updates posting email", "keywords": ["lists", "google", "venue", "releases", "community", "groups", "note", "tech", "com", "django", "support", "¶", "message", "address", "archives", "forum", "developers", "use", "questions", "list", "-", "development", "details", "place", "question", "usage", "a", "policies", "ticket", "mailing", "time", "debugging", "categories", "subscription", "category", "advisories", "security", "djangoproject", "traffic", "discussion", "users", "updates", "email", "installation", "members", "issues", "addition", "internals"], "type": "documentation"},
{"title": "Contributing to Django", "url": "https://docs.djangoproject.com/en/5.1/internals/contributing/", "content": "Contributing to Django ¶ Django is a community that lives on its volunteers. As it keeps growing, we\nalways need more people to help others. You can contribute in many ways, either\non the framework itself or in the wider ecosystem. Communication channels ¶ We’re passionate about helping Django users make the jump to contributing\nmembers of the community. Communication is key - working on Django is being\npart of a conversation. Join it, to become familiar with what we’re doing and\nhow we talk about it. You’ll be able to form relationships with more\nexperienced contributors who are there to help guide you towards success. Join the Django community ¶ There are several ways you can help the Django community and others to maintain\na great ecosystem to work in: Join the Django forum . This forum is a place for discussing the Django\nframework and applications and projects that use it. This is also a good\nplace to ask and answer any questions related to installing, using, or\ncontributing to Django. Join the django-users mailing list and answer questions. This\nmailing list has a huge audience, and we really want to maintain a\nfriendly and helpful atmosphere. If you’re new to the Django community,\nyou should read the posting guidelines . Join the Django Discord server or the #django IRC channel on\nLibera.Chat to discuss and answer questions. By explaining Django to other\nusers, you’re going to learn a lot about the framework yourself. Blog about Django. We syndicate all the Django blogs we know about on\nthe community page ; if you’d like to see your blog on that page you\ncan register it here . Contribute to open-source Django projects, write some documentation, or\nrelease your own code as an open-source pluggable application. The\necosystem of pluggable applications is a big strength of Django, help us\nbuild it! Getting started ¶ Django encourages and welcomes new contributors, and makes an effort to help\nthem become experienced, confident contributors to Open Source Software (OSS).\nOur documentation contains guidance for first-time contributors, including: An overview of the contributing process and what's involved. Work on the Django framework ¶ If you enjoy working with Django, wait until you start working on it.\nReally, anyone can do something to improve Django, which will improve the\nexperience of lots of people! The work on Django itself falls into three major areas: Contributing code ¶ Fix a bug, or add a new feature. You can make a pull request and see your\ncode in the next version of Django. Contributing code Tutorials How-to guides Related topics Contributing documentation ¶ Django’s documentation is one of its key strengths. It’s informative and\nthorough. You can help to improve the documentation and keep it relevant as the\nframework evolves. Writing documentation The Django documentation process How the documentation is organized How to start contributing documentation Writing style Commonly used terms Django-specific terminology Guidelines for reStructuredText files Django-specific markup Documenting new features Minimizing images An example Translating documentation django-admin man page Localizing Django ¶ Django is translated into over 100 languages - There’s even some translation\nfor Klingon?! The i18n team is always looking for translators to help maintain\nand increase language reach. Localizing Django Translations Formats Documentation Other ways of contributing ¶ Explore additional avenues of contributing to Django beyond coding. Django’s ticket tracker is the central hub for managing issues, improvements, and\ncontributions to Django. It’s a valuable resource where you can report bugs you\nencounter or assist in triaging existing tickets to ensure a smooth development\nworkflow. Explore the ways you can make a difference below, and join us in\nmaking Django better for everyone. Reporting bugs and requesting features Reporting bugs Reporting user interface bugs and features Requesting features Requesting performance optimizations How we make decisions Triaging tickets Triage workflow Triage stages Other triage attributes Closing Tickets How can I help with triaging? Bisecting a regression We’re looking forward to working with you. Welcome aboard!", "keywords": ["experience", "jump", "terminology", "blogs", "interface", "work", "software", "conversation", "audience", "translation", "avenues", "discord", "questions", "documentation", "development", "place", "style", "closing", "lots", "time", "application", "overview", "bugs", "i18n", "irc", "performance", "files", "minimizing", "man", "ways", "difference", "translations", "communication", "guidelines", "¶", "resource", "channels", "klingon", "guidance", "contributing", "effort", "to", "strength", "server", "terms", "page", "workflow", "process", "hub", "example", "users", "channel", "fix", "source", "people", "libera", "community", "regression", "applications", "request", "languages", "version", "tickets", "blog", "writing", "issues", "list", "bug", "areas", "volunteers", "ticket", "optimizations", "open", "decisions", "chat", "relationships", "team", "user", "part", "tracker", "ecosystem", "localizing", "translators", "formats", "others", "projects", "django", "restructuredtext", "oss", "topics", "forum", "explore", "tutorials", "lot", "managing", "framework", "markup", "contributors", "reach", "mailing", "contributions", "triage", "triaging", "strengths", "code", "features", "feature", "atmosphere", "language", "improvements", "members", "success"], "type": "documentation"},
{"title": "Django internals", "url": "https://docs.djangoproject.com/en/5.1/internals/", "content": "Django internals ¶ Documentation for people hacking on Django itself. This is the place to go if\nyou’d like to help improve Django or learn about how Django is managed. Contributing to Django Communication channels Getting started Work on the Django framework Other ways of contributing Mailing lists and Forum Django Forum django-users django-developers django-announce django-updates Organization of the Django Project Principles Mergers Releasers Steering council Changing the organization Django’s security policies Reporting security issues How does Django evaluate a report Supported versions How Django discloses security issues Who receives advance notification Requesting notifications Django’s release process Official releases Release cadence Deprecation policy Supported versions Release process Django Deprecation Timeline 6.0 5.1 5.0 4.1 4.0 3.1 3.0 2.1 2.0 1.10 1.9 1.8 1.7 1.6 1.5 1.4 1.3 The Django source code repository High-level overview The main branch Stable branches Tags How is Django Formed? Overview Prerequisites Pre-release tasks Actually rolling the release Making the release(s) available to the public Post-release New stable branch tasks Notes on setting the VERSION tuple", "keywords": ["source", "people", "releasers", "lists", "releases", "ways", "work", "project", "version", "communication", "notification", "tuple", "post", "principles", "council", "announce", "django", "issues", "versions", "level", "¶", "report", "branches", "channels", "forum", "developers", "tags", "tasks", "documentation", "-", "framework", "deprecation", "place", "policy", "policies", "advance", "cadence", "mailing", "release(s", "release", "overview", "process", "prerequisites", "security", "code", "timeline", "users", "branch", "organization", "notifications", "mergers", "steering"], "type": "documentation"},
{"title": "Release notes", "url": "https://docs.djangoproject.com/en/5.1/releases/", "content": "Release notes ¶ Release notes for the official Django releases. Each release note will tell you\nwhat’s new in each version, and will also describe any backwards-incompatible\nchanges made in that version. For those upgrading to a new version of Django ,\nyou will need to check all the backwards-incompatible changes and deprecated features for each ‘final’ release\nfrom the one after your current Django version, up to and including the new\nversion. Final releases ¶ Below are release notes through Django 5.1 and its patch releases. Newer\nversions of the documentation contain the release notes for any later releases. 5.1 release ¶ Django 5.1.5 release notes Django 5.1.4 release notes Django 5.1.3 release notes Django 5.1.2 release notes Django 5.1.1 release notes Django 5.1 release notes 5.0 release ¶ Django 5.0.10 release notes Django 5.0.9 release notes Django 5.0.8 release notes Django 5.0.7 release notes Django 5.0.6 release notes Django 5.0.5 release notes Django 5.0.4 release notes Django 5.0.3 release notes Django 5.0.2 release notes Django 5.0.1 release notes Django 5.0 release notes 4.2 release ¶ Django 4.2.17 release notes Django 4.2.16 release notes Django 4.2.15 release notes Django 4.2.14 release notes Django 4.2.13 release notes Django 4.2.12 release notes Django 4.2.11 release notes Django 4.2.10 release notes Django 4.2.9 release notes Django 4.2.8 release notes Django 4.2.7 release notes Django 4.2.6 release notes Django 4.2.5 release notes Django 4.2.4 release notes Django 4.2.3 release notes Django 4.2.2 release notes Django 4.2.1 release notes Django 4.2 release notes 4.1 release ¶ Django 4.1.13 release notes Django 4.1.12 release notes Django 4.1.11 release notes Django 4.1.10 release notes Django 4.1.9 release notes Django 4.1.8 release notes Django 4.1.7 release notes Django 4.1.6 release notes Django 4.1.5 release notes Django 4.1.4 release notes Django 4.1.3 release notes Django 4.1.2 release notes Django 4.1.1 release notes Django 4.1 release notes 4.0 release ¶ Django 4.0.10 release notes Django 4.0.9 release notes Django 4.0.8 release notes Django 4.0.7 release notes Django 4.0.6 release notes Django 4.0.5 release notes Django 4.0.4 release notes Django 4.0.3 release notes Django 4.0.2 release notes Django 4.0.1 release notes Django 4.0 release notes 3.2 release ¶ Django 3.2.25 release notes Django 3.2.24 release notes Django 3.2.23 release notes Django 3.2.22 release notes Django 3.2.21 release notes Django 3.2.20 release notes Django 3.2.19 release notes Django 3.2.18 release notes Django 3.2.17 release notes Django 3.2.16 release notes Django 3.2.15 release notes Django 3.2.14 release notes Django 3.2.13 release notes Django 3.2.12 release notes Django 3.2.11 release notes Django 3.2.10 release notes Django 3.2.9 release notes Django 3.2.8 release notes Django 3.2.7 release notes Django 3.2.6 release notes Django 3.2.5 release notes Django 3.2.4 release notes Django 3.2.3 release notes Django 3.2.2 release notes Django 3.2.1 release notes Django 3.2 release notes 3.1 release ¶ Django 3.1.14 release notes Django 3.1.13 release notes Django 3.1.12 release notes Django 3.1.11 release notes Django 3.1.10 release notes Django 3.1.9 release notes Django 3.1.8 release notes Django 3.1.7 release notes Django 3.1.6 release notes Django 3.1.5 release notes Django 3.1.4 release notes Django 3.1.3 release notes Django 3.1.2 release notes Django 3.1.1 release notes Django 3.1 release notes 3.0 release ¶ Django 3.0.14 release notes Django 3.0.13 release notes Django 3.0.12 release notes Django 3.0.11 release notes Django 3.0.10 release notes Django 3.0.9 release notes Django 3.0.8 release notes Django 3.0.7 release notes Django 3.0.6 release notes Django 3.0.5 release notes Django 3.0.4 release notes Django 3.0.3 release notes Django 3.0.2 release notes Django 3.0.1 release notes Django 3.0 release notes 2.2 release ¶ Django 2.2.28 release notes Django 2.2.27 release notes Django 2.2.26 release notes Django 2.2.25 release notes Django 2.2.24 release notes Django 2.2.23 release notes Django 2.2.22 release notes Django 2.2.21 release notes Django 2.2.20 release notes Django 2.2.19 release notes Django 2.2.18 release notes Django 2.2.17 release notes Django 2.2.16 release notes Django 2.2.15 release notes Django 2.2.14 release notes Django 2.2.13 release notes Django 2.2.12 release notes Django 2.2.11 release notes Django 2.2.10 release notes Django 2.2.9 release notes Django 2.2.8 release notes Django 2.2.7 release notes Django 2.2.6 release notes Django 2.2.5 release notes Django 2.2.4 release notes Django 2.2.3 release notes Django 2.2.2 release notes Django 2.2.1 release notes Django 2.2 release notes 2.1 release ¶ Django 2.1.15 release notes Django 2.1.14 release notes Django 2.1.13 release notes Django 2.1.12 release notes Django 2.1.11 release notes Django 2.1.10 release notes Django 2.1.9 release notes Django 2.1.8 release notes Django 2.1.7 release notes Django 2.1.6 release notes Django 2.1.5 release notes Django 2.1.4 release notes Django 2.1.3 release notes Django 2.1.2 release notes Django 2.1.1 release notes Django 2.1 release notes 2.0 release ¶ Django 2.0.13 release notes Django 2.0.12 release notes Django 2.0.11 release notes Django 2.0.10 release notes Django 2.0.9 release notes Django 2.0.8 release notes Django 2.0.7 release notes Django 2.0.6 release notes Django 2.0.5 release notes Django 2.0.4 release notes Django 2.0.3 release notes Django 2.0.2 release notes Django 2.0.1 release notes Django 2.0 release notes 1.11 release ¶ Django 1.11.29 release notes Django 1.11.28 release notes Django 1.11.27 release notes Django 1.11.26 release notes Django 1.11.25 release notes Django 1.11.24 release notes Django 1.11.23 release notes Django 1.11.22 release notes Django 1.11.21 release notes Django 1.11.20 release notes Django 1.11.19 release notes Django 1.11.18 release notes Django 1.11.17 release notes Django 1.11.16 release notes Django 1.11.15 release notes Django 1.11.14 release notes Django 1.11.13 release notes Django 1.11.12 release notes Django 1.11.11 release notes Django 1.11.10 release notes Django 1.11.9 release notes Django 1.11.8 release notes Django 1.11.7 release notes Django 1.11.6 release notes Django 1.11.5 release notes Django 1.11.4 release notes Django 1.11.3 release notes Django 1.11.2 release notes Django 1.11.1 release notes Django 1.11 release notes 1.10 release ¶ Django 1.10.8 release notes Django 1.10.7 release notes Django 1.10.6 release notes Django 1.10.5 release notes Django 1.10.4 release notes Django 1.10.3 release notes Django 1.10.2 release notes Django 1.10.1 release notes Django 1.10 release notes 1.9 release ¶ Django 1.9.13 release notes Django 1.9.12 release notes Django 1.9.11 release notes Django 1.9.10 release notes Django 1.9.9 release notes Django 1.9.8 release notes Django 1.9.7 release notes Django 1.9.6 release notes Django 1.9.5 release notes Django 1.9.4 release notes Django 1.9.3 release notes Django 1.9.2 release notes Django 1.9.1 release notes Django 1.9 release notes 1.8 release ¶ Django 1.8.19 release notes Django 1.8.18 release notes Django 1.8.17 release notes Django 1.8.16 release notes Django 1.8.15 release notes Django 1.8.14 release notes Django 1.8.13 release notes Django 1.8.12 release notes Django 1.8.11 release notes Django 1.8.10 release notes Django 1.8.9 release notes Django 1.8.8 release notes Django 1.8.7 release notes Django 1.8.6 release notes Django 1.8.5 release notes Django 1.8.4 release notes Django 1.8.3 release notes Django 1.8.2 release notes Django 1.8.1 release notes Django 1.8 release notes 1.7 release ¶ Django 1.7.11 release notes Django 1.7.10 release notes Django 1.7.9 release notes Django 1.7.8 release notes Django 1.7.7 release notes Django 1.7.6 release notes Django 1.7.5 release notes Django 1.7.4 release notes Django 1.7.3 release notes Django 1.7.2 release notes Django 1.7.1 release notes Django 1.7 release notes 1.6 release ¶ Django 1.6.11 release notes Django 1.6.10 release notes Django 1.6.9 release notes Django 1.6.8 release notes Django 1.6.7 release notes Django 1.6.6 release notes Django 1.6.5 release notes Django 1.6.4 release notes Django 1.6.3 release notes Django 1.6.2 release notes Django 1.6.1 release notes Django 1.6 release notes 1.5 release ¶ Django 1.5.12 release notes Django 1.5.11 release notes Django 1.5.10 release notes Django 1.5.9 release notes Django 1.5.8 release notes Django 1.5.7 release notes Django 1.5.6 release notes Django 1.5.5 release notes Django 1.5.4 release notes Django 1.5.3 release notes Django 1.5.2 release notes Django 1.5.1 release notes Django 1.5 release notes 1.4 release ¶ Django 1.4.22 release notes Django 1.4.21 release notes Django 1.4.20 release notes Django 1.4.19 release notes Django 1.4.18 release notes Django 1.4.17 release notes Django 1.4.16 release notes Django 1.4.15 release notes Django 1.4.14 release notes Django 1.4.13 release notes Django 1.4.12 release notes Django 1.4.11 release notes Django 1.4.10 release notes Django 1.4.9 release notes Django 1.4.8 release notes Django 1.4.7 release notes Django 1.4.6 release notes Django 1.4.5 release notes Django 1.4.4 release notes Django 1.4.3 release notes Django 1.4.2 release notes Django 1.4.1 release notes Django 1.4 release notes 1.3 release ¶ Django 1.3.7 release notes Django 1.3.6 release notes Django 1.3.5 release notes Django 1.3.4 release notes Django 1.3.3 release notes Django 1.3.2 release notes Django 1.3.1 release notes Django 1.3 release notes 1.2 release ¶ Django 1.2.7 release notes Django 1.2.6 release notes Django 1.2.5 release notes Django 1.2.4 release notes Django 1.2.3 release notes Django 1.2.2 release notes Django 1.2.1 release notes Django 1.2 release notes 1.1 release ¶ Django 1.1.4 release notes Django 1.1.3 release notes Django 1.1.2 release notes Django 1.1 release notes 1.0 release ¶ Django 1.0.2 release notes Django 1.0.1 release notes Django 1.0 release notes Pre-1.0 releases ¶ Django version 0.96 release notes Django version 0.95 release notes Security releases ¶ Whenever a security issue is disclosed via Django’s security\npolicies , appropriate release notes are now\nadded to all affected release series. Additionally, an archive of disclosed security issues is maintained.", "keywords": ["3.2.4", "1.8.2", "1.4.20", "2.2.17", "2.0.3", "2.2.1", "3.2.25", "1.11.28", "4.2.12", "3.2.8", "4.2.5", "changes", "2.2.8", "pre-1.0", "documentation", "patch", "1.5.12", "2.2.23", "policies", "1.6.2", "1.4.16", "release", "1.9.5", "3.1.11", "4.0.1", "2.0.1", "1.5.1", "4.1.2", "1.1.2", "3.1.14", "2.0.6", "1.5.5", "2.1.6", "1.11.13", "2.1.4", "releases", "4.2.7", "1.11.18", "3.1.10", "3.0.14", "upgrading", "1.11.14", "versions", "1.11.20", "2.2.18", "¶", "2.2.11", "4.2.3", "3.1.4", "1.9.11", "4.1.6", "3.2.1", "1.3.7", "3.2.18", "4.0.3", "1.4.2", "2.2.26", "1.11.17", "1.4.10", "2.2.10", "4.2.10", "3.2.23", "3.0.9", "1.0.2", "1.8.15", "1.11.29", "1.5.2", "4.0.10", "1.7.8", "2.2.28", "1.11.25", "1.9.1", "2.0.12", "2.2.9", "version", "5.0.7", "3.0.4", "4.1.10", "1.8.1", "1.11.21", "4.0.9", "4.2.15", "5.0.1", "1.7.9", "2.0.9", "4.1.12", "series", "1.0.1", "2.2.21", "1.3.2", "2.2.14", "1.11.15", "4.2.4", "2.2.27", "3.2.22", "4.1.5", "1.4.15", "3.0.3", "one", "notes", "1.5.10", "1.11.19", "1.4.21", "issue", "1.11.16", "3.1.6", "1.6.5", "3.2.6", "2.1.10", "note", "1.5.3", "3.0.6", "5.0.3", "django", "1.8.8", "archive", "3.2.19", "3.1.5", "4.0.6", "1.2.4", "2.2.22", "1.1.4", "1.4.22", "1.6.6", "1.6.1", "1.11.22", "3.2.9", "4.2.16", "1.11.10", "1.4.8", "1.6.4", "1.5.8", "3.2.21", "3.1.2", "security", "features", "1.9.12", "1.11.23", "4.2.2", "4.1.1", "1.9.2", "3.2.16", "3.1.12", "3.0.1", "1.8.3", "issues", "1.11.27"], "type": "documentation"},
{"title": "Glossary", "url": "https://docs.djangoproject.com/en/5.1/glossary/", "content": "Glossary ¶ concrete model ¶ A non-abstract ( abstract=False ) model. field ¶ An attribute on a model ; a given field usually maps directly to\na single database column. See Models . generic view ¶ A higher-order view function that provides an abstract/generic\nimplementation of a common idiom or pattern found in view development. See Class-based views . model ¶ Models store your application’s data. See Models . MTV ¶ “Model-template-view”; a software pattern, similar in style to MVC, but\na better description of the way Django does things. See the FAQ entry . MVC ¶ Model-view-controller ; a software pattern. Django follows MVC\nto some extent . project ¶ A Python package – i.e. a directory of code – that contains all the\nsettings for an instance of Django. This would include database\nconfiguration, Django-specific options and application-specific\nsettings. property ¶ Also known as “managed attributes”, and a feature of Python since\nversion 2.2. This is a neat way to implement attributes whose usage\nresembles attribute access, but whose implementation uses method calls. See property . queryset ¶ An object representing some set of rows to be fetched from the database. See Making queries . slug ¶ A short label for something, containing only letters, numbers,\nunderscores or hyphens. They’re generally used in URLs. For\nexample, in a typical blog entry URL: https://www.djangoproject.com/weblog/2008/apr/12/ spring / the last bit ( spring ) is the slug. template ¶ A chunk of text that acts as formatting for representing data. A\ntemplate helps to abstract the presentation of data from the data\nitself. See Templates . view ¶ A function responsible for rendering a page.", "keywords": ["implementation", "views", "hyphens", "description", "class", "column", "mvc", "configuration", "project", "software", "chunk", "numbers", "version", "blog", "faq", "template", "python", "way", "django", "url", "¶", "directory", "attribute", "rows", "function", "order", "templates", "things", "set", "text", "development", "field", "bit", "style", "slug", "presentation", "usage", "settings", "data", "model", "database", "mtv", "view", "application", "idiom", "urls", "page", "package", "property", "options", "pattern", "access", "method", "object", "letters", "instance", "=", "models", "glossary", "code", "feature", "queries", "underscores", "attributes", "example", "calls", ".", "entry", "controller", "spring", "extent", "label"], "type": "documentation"},
{"title": "Third-party distributions of Django", "url": "https://docs.djangoproject.com/en/5.1/misc/distributions/", "content": "Third-party distributions of Django ¶ Many third-party distributors are now providing versions of Django integrated\nwith their package-management systems. These can make installation and upgrading\nmuch easier for users of Django since the integration includes the ability to\nautomatically install dependencies (like database adapters) that Django\nrequires. Typically, these packages are based on the latest stable release of Django, so\nif you want to use the development version of Django you’ll need to follow the\ninstructions for installing the development version from our Git repository. If you’re using Linux or a Unix installation, such as OpenSolaris,\ncheck with your distributor to see if they already package Django. If\nyou’re using a Linux distro and don’t know how to find out if a package\nis available, then now is a good time to learn.  The Django Wiki contains\na list of Third Party Distributions to help you out. For distributors ¶ If you’d like to package Django for distribution, we’d be happy to help out!\nPlease join the django-developers mailing list and introduce yourself. We also encourage all distributors to subscribe to the django-announce mailing\nlist, which is a (very) low-traffic list for announcing new releases of Django\nand important bugfixes.", "keywords": ["unix", "releases", "instructions", "opensolaris", "version", "integration", "repository", "upgrading", "django", "versions", "¶", "distributors", "third", "adapters", "distributions", "systems", "git", "developers", "list", "development", "distribution", "packages", "distro", "mailing", "database", "time", "linux", "management", "release", "package", "distributor", "party", "bugfixes", "traffic", "users", "dependencies", "installation", "wiki", "ability"], "type": "documentation"},
{"title": "Design philosophies", "url": "https://docs.djangoproject.com/en/5.1/misc/design-philosophies/", "content": "Design philosophies ¶ This document explains some of the fundamental philosophies Django’s developers\nhave used in creating the framework. Its goal is to explain the past and guide\nthe future. Overall ¶ Loose coupling ¶ A fundamental goal of Django’s stack is loose coupling and tight cohesion .\nThe various layers of the framework shouldn’t “know” about each other unless\nabsolutely necessary. For example, the template system knows nothing about web requests, the database\nlayer knows nothing about data display and the view system doesn’t care which\ntemplate system a programmer uses. Although Django comes with a full stack for convenience, the pieces of the\nstack are independent of another wherever possible. Less code ¶ Django apps should use as little code as possible; they should lack boilerplate.\nDjango should take full advantage of Python’s dynamic capabilities, such as\nintrospection. Quick development ¶ The point of a web framework in the 21st century is to make the tedious aspects\nof web development fast. Django should allow for incredibly quick web\ndevelopment. Don’t repeat yourself (DRY) ¶ Every distinct concept and/or piece of data should live in one, and only one,\nplace. Redundancy is bad. Normalization is good. The framework, within reason, should deduce as much as possible from as little\nas possible. See also The discussion of DRY on the Portland Pattern Repository Explicit is better than implicit ¶ This is a core Python principle listed in PEP 20 , and it means Django\nshouldn’t do too much “magic.” Magic shouldn’t happen unless there’s a really\ngood reason for it. Magic is worth using only if it creates a huge convenience\nunattainable in other ways, and it isn’t implemented in a way that confuses\ndevelopers who are trying to learn how to use the feature. Consistency ¶ The framework should be consistent at all levels. Consistency applies to\neverything from low-level (the Python coding style used) to high-level (the\n“experience” of using Django). Models ¶ Explicit is better than implicit ¶ Fields shouldn’t assume certain behaviors based solely on the name of the\nfield. This requires too much knowledge of the system and is prone to errors.\nInstead, behaviors should be based on keyword arguments and, in some cases, on\nthe type of the field. Include all relevant domain logic ¶ Models should encapsulate every aspect of an “object,” following Martin\nFowler’s Active Record design pattern. This is why both the data represented by a model and information about\nit (its human-readable name, options like default ordering, etc.) are\ndefined in the model class; all the information needed to understand a\ngiven model should be stored in the model. Database API ¶ The core goals of the database API are: SQL efficiency ¶ It should execute SQL statements as few times as possible, and it should\noptimize statements internally. This is why developers need to call save() explicitly, rather than the\nframework saving things behind the scenes silently. This is also why the select_related() QuerySet method exists. It’s an\noptional performance booster for the common case of selecting “every related\nobject.” Terse, powerful syntax ¶ The database API should allow rich, expressive statements in as little syntax\nas possible. It should not rely on importing other modules or helper objects. Joins should be performed automatically, behind the scenes, when necessary. Every object should be able to access every related object, systemwide. This\naccess should work both ways. Option to drop into raw SQL easily, when needed ¶ The database API should realize it’s a shortcut but not necessarily an\nend-all-be-all. The framework should make it easy to write custom SQL – entire\nstatements, or just custom WHERE clauses as custom parameters to API calls. URL design ¶ Loose coupling ¶ URLs in a Django app should not be coupled to the underlying Python code. Tying\nURLs to Python function names is a Bad And Ugly Thing. Along these lines, the Django URL system should allow URLs for the same app to\nbe different in different contexts. For example, one site may put stories at /stories/ , while another may use /news/ . Infinite flexibility ¶ URLs should be as flexible as possible. Any conceivable URL design should be\nallowed. Encourage best practices ¶ The framework should make it just as easy (or even easier) for a developer to\ndesign pretty URLs than ugly ones. File extensions in web-page URLs should be avoided. Vignette-style commas in URLs deserve severe punishment. Definitive URLs ¶ Technically, foo.com/bar and foo.com/bar/ are two different URLs, and\nsearch-engine robots (and some web traffic-analyzing tools) would treat them as\nseparate pages. Django should make an effort to “normalize” URLs so that\nsearch-engine robots don’t get confused. This is the reasoning behind the APPEND_SLASH setting. Template system ¶ Separate logic from presentation ¶ We see a template system as a tool that controls presentation and\npresentation-related logic – and that’s it. The template system shouldn’t\nsupport functionality that goes beyond this basic goal. Discourage redundancy ¶ The majority of dynamic websites use some sort of common sitewide design –\na common header, footer, navigation bar, etc. The Django template system should\nmake it easy to store those elements in a single place, eliminating duplicate\ncode. This is the philosophy behind template inheritance . Be decoupled from HTML ¶ The template system shouldn’t be designed so that it only outputs HTML. It\nshould be equally good at generating other text-based formats, or just plain\ntext. XML should not be used for template languages ¶ Using an XML engine to parse templates introduces a whole new world of human\nerror in editing templates – and incurs an unacceptable level of overhead in\ntemplate processing. Assume designer competence ¶ The template system shouldn’t be designed so that templates necessarily are\ndisplayed nicely in WYSIWYG editors such as Dreamweaver. That is too severe of\na limitation and wouldn’t allow the syntax to be as nice as it is. Django\nexpects template authors are comfortable editing HTML directly. Treat whitespace obviously ¶ The template system shouldn’t do magic things with whitespace. If a template\nincludes whitespace, the system should treat the whitespace as it treats text\n– just display it. Any whitespace that’s not in a template tag should be\ndisplayed. Don’t invent a programming language ¶ The goal is not to invent a programming language. The goal is to offer just\nenough programming-esque functionality, such as branching and looping, that is\nessential for making presentation-related decisions. The Django Template\nLanguage (DTL) aims to avoid advanced logic. Safety and security ¶ The template system, out of the box, should forbid the inclusion of malicious\ncode – such as commands that delete database records. This is another reason the template system doesn’t allow arbitrary Python code. Extensibility ¶ The template system should recognize that advanced template authors may want\nto extend its technology. This is the philosophy behind custom template tags and filters. Views ¶ Simplicity ¶ Writing a view should be as simple as writing a Python function. Developers\nshouldn’t have to instantiate a class when a function will do. Use request objects ¶ Views should have access to a request object – an object that stores metadata\nabout the current request. The object should be passed directly to a view\nfunction, rather than the view function having to access the request data from\na global variable. This makes it light, clean and easy to test views by passing\nin “fake” request objects. Loose coupling ¶ A view shouldn’t care about which template system the developer uses – or even\nwhether a template system is used at all. Differentiate between GET and POST ¶ GET and POST are distinct; developers should explicitly use one or the other.\nThe framework should make it easy to distinguish between GET and POST data. Cache Framework ¶ The core goals of Django’s cache framework are: Less code ¶ A cache should be as fast as possible.  Hence, all framework code surrounding\nthe cache backend should be kept to the absolute minimum, especially for get() operations. Consistency ¶ The cache API should provide a consistent interface across the different\ncache backends. Extensibility ¶ The cache API should be extensible at the application level based on the\ndeveloper’s needs (for example, see Cache key transformation ).", "keywords": ["loose", "experience", "ugly", "interface", "variable", "editors", "statements", "stories", "developer", "error", "type", "vignette", "design", "template", "url", "support", "cache", "majority", "introspection", "programmer", "setting", "templates", "stack", "development", "place", "style", "scenes", "limitation", "assume", "reason", "application", "records", "method", "aspects", "queryset", "convenience", "martin", "system", "metadata", "flexibility", "authors", "concept", "/stories/", "commands", "site", "performance", "modules", "pieces", "minimum", "cases", "navigation", "redundancy", "views", "times", "record", "ways", "principle", "information", "bar", "sort", "security", "cohesion", "philosophy", "point", "repository", "contexts", "fields", "way", "wysiwyg", "safety", "behaviors", "¶", "default", "reasoning", "filters", "option", "piece", "punishment", "custom", "web", "stores", "effort", "domain", "keyword", "model", "magic", "page", "urls", "processing", "access", "technically", "capabilities", "discourage", "booster", "example", "ordering", "calls", "tool", "backend", "end", "active", "knowledge", "dry", "case", "class", "xml", "request", "languages", "inheritance", "advantage", "save", "aspect", "html", "engine", "needs", "definitive", "extensibility", "ones", "footer", "function", "developers", "thing", "transformation", "future", "things", "practices", "century", "data", "simplicity", "decisions", "view", "app", "foo.com/bar/", "lines", "portland", "name", "object", "options", "pattern", "joins", "coupling", "header", "file", "world", "efficiency", "operations", "programming", "errors", "python", "goals", "core", "select_related", "extensions", "get", "shortcut", "foo.com/bar", "formats", "competence", "robots", "dtl", "api", "sql", "box", "explicit", "post", "level", "names", "django", "layers", "tools", "dreamweaver", "tag", "pep", "separate", "display", "document", "elements", "syntax", "normalization", "tags", "text", "framework", "technology", "field", "apps", "arguments", "goal", "fowler", "commas", "presentation", "functionality", "inclusion", "backends", "requests", "database", "search", "consistency", "sitewide", "websites", "whitespace", "quick", "logic", "past", "layer", "designer", "code", "models", "feature", "/news/", "philosophies", "pages", "traffic", "objects", "discussion", "overhead", "levels", "parameters", "language", "helper"], "type": "documentation"},
{"title": "API stability", "url": "https://docs.djangoproject.com/en/5.1/misc/api-stability/", "content": "API stability ¶ Django is committed to API stability and forwards-compatibility. In a nutshell,\nthis means that code you develop against a version of Django will continue to\nwork with future releases. You may need to make minor changes when upgrading\nthe version of Django your project uses: see the “Backwards incompatible\nchanges” section of the release note for the version\nor versions to which you are upgrading. At the same time as making API stability a very high priority, Django is also\ncommitted to continual improvement, along with aiming for “one way to do it”\n(eventually) in the APIs we provide. This means that when we discover clearly\nsuperior ways to do things, we will deprecate and eventually remove the old\nways. Our aim is to provide a modern, dependable web framework of the highest\nquality that encourages best practices in all projects that use it. By using\nincremental improvements, we try to avoid both stagnation and large breaking\nupgrades. What “stable” means ¶ In this context, stable means: All the public APIs (everything in this documentation) will not be moved\nor renamed without providing backwards-compatible aliases. If new features are added to these APIs – which is quite possible –\nthey will not break or change the meaning of existing methods. In other\nwords, “stable” does not (necessarily) mean “complete.” If, for some reason, an API declared stable must be removed or replaced, it\nwill be declared deprecated but will remain in the API for at least two\nfeature releases. Warnings will be issued when the deprecated method is\ncalled. See Official releases for more details on how Django’s version\nnumbering scheme works, and how features will be deprecated. We’ll only break backwards compatibility of these APIs without a deprecation\nprocess if a bug or security hole makes it completely unavoidable. Stable APIs ¶ In general, everything covered in the documentation – with the exception of\nanything in the internals area is considered stable. Exceptions ¶ There are a few exceptions to this stability and backwards-compatibility\npromise. Security fixes ¶ If we become aware of a security problem – hopefully by someone following our security reporting policy – we’ll do\neverything necessary to fix it. This might mean breaking backwards\ncompatibility; security trumps the compatibility guarantee. APIs marked as internal ¶ Certain APIs are explicitly marked as “internal” in a couple of ways: Some documentation refers to internals and mentions them as such. If the\ndocumentation says that something is internal, we reserve the right to\nchange it. Functions, methods, and other objects prefixed by a leading underscore\n( _ ). This is the standard Python way of indicating that something is\nprivate; if any method starts with a single _ , it’s an internal API.", "keywords": ["reporting", "problem", "right", "releases", "ways", "meaning", "aim", "project", "means", "forwards", "api", "words", "note", "version", "warnings", "stability", "numbering", "exceptions", "breaking", "compatibility", "upgrades", "apis", "projects", "section", "django", "versions", "way", "hole", "¶", "promise", "underscore", "changes", "things", "web", "framework", "practices", "documentation", "methods", "details", "deprecation", "bug", "policy", "couple", "reason", "works", "time", "improvement", "exception", "context", "release", "nutshell", "process", "guarantee", "method", "_", "priority", "stagnation", "security", "features", "code", "feature", "objects", "aliases", "quality", "improvements", "functions", "scheme", "python", "internals", "area"], "type": "documentation"},
{"title": "Meta-documentation and miscellany", "url": "https://docs.djangoproject.com/en/5.1/misc/", "content": "Meta-documentation and miscellany ¶ Documentation that we can’t find a more organized place for. Like that drawer in\nyour kitchen with the scissors, batteries, duct tape, and other junk. API stability What “stable” means Stable APIs Exceptions Design philosophies Overall Models Database API URL design Template system Views Cache Framework Third-party distributions of Django For distributors", "keywords": ["drawer", "batteries", "exceptions", "api", "stability", "overall", "design", "apis", "template", "url", "django", "cache", "¶", "distributors", "duct", "distributions", "documentation", "framework", "place", "miscellany", "scissors", "database", "kitchen", "party", "tape", "models", "junk", "system"], "type": "documentation"},
{"title": "Built-in Views", "url": "https://docs.djangoproject.com/en/5.1/ref/views/", "content": "Built-in Views ¶ Several of Django’s built-in views are documented in Writing views as well as elsewhere in the documentation. Serving files in development ¶ static. serve ( request , path , document_root , show_indexes = False ) ¶ There may be files other than your project’s static assets that, for\nconvenience, you’d like to have Django serve for you in local development.\nThe serve() view can be used to serve any directory\nyou give it. (This view is not hardened for production use and should be\nused only as a development aid; you should serve these files in production\nusing a real front-end web server). The most likely example is user-uploaded content in MEDIA_ROOT . django.contrib.staticfiles is intended for static assets and has no\nbuilt-in handling for user-uploaded files, but you can have Django serve your MEDIA_ROOT by appending something like this to your URLconf: from django.conf import settings from django.urls import re_path from django.views.static import serve # ... the rest of your URLconf goes here ... if settings . DEBUG : urlpatterns += [ re_path ( r \"^media/(?P<path>.*)$\" , serve , { \"document_root\" : settings . MEDIA_ROOT , }, ), ] Note, the snippet assumes your MEDIA_URL has a value of 'media/' . This will call the serve() view,\npassing in the path from the URLconf and the (required) document_root parameter. Since it can become a bit cumbersome to define this URL pattern, Django\nships with a small URL helper function static() that takes as parameters the prefix such as MEDIA_URL and a dotted\npath to a view, such as 'django.views.static.serve' . Any other function\nparameter will be transparently passed to the view. Error views ¶ Django comes with a few views by default for handling HTTP errors. To override\nthese with your own custom views, see Customizing error views . The 404 (page not found) view ¶ defaults. page_not_found ( request , exception , template_name = '404.html' ) ¶ When you raise Http404 from within a view, Django loads a\nspecial view devoted to handling 404 errors. By default, it’s the view django.views.defaults.page_not_found() , which either produces a “Not\nFound” message or loads and renders the template 404.html if you created it\nin your root template directory. The default 404 view will pass two variables to the template: request_path ,\nwhich is the URL that resulted in the error, and exception , which is a\nuseful representation of the exception that triggered the view (e.g. containing\nany message passed to a specific Http404 instance). Three things to note about 404 views: The 404 view is also called if Django doesn’t find a match after\nchecking every regular expression in the URLconf. The 404 view is passed a RequestContext and\nwill have access to variables supplied by your template context\nprocessors (e.g. MEDIA_URL ). If DEBUG is set to True (in your settings module), then\nyour 404 view will never be used, and your URLconf will be displayed\ninstead, with some debug information. The 500 (server error) view ¶ defaults. server_error ( request , template_name = '500.html' ) ¶ Similarly, Django executes special-case behavior in the case of runtime errors\nin view code. If a view results in an exception, Django will, by default, call\nthe view django.views.defaults.server_error , which either produces a\n“Server Error” message or loads and renders the template 500.html if you\ncreated it in your root template directory. The default 500 view passes no variables to the 500.html template and is\nrendered with an empty Context to lessen the chance of additional errors. If DEBUG is set to True (in your settings module), then\nyour 500 view will never be used, and the traceback will be displayed\ninstead, with some debug information. The 403 (HTTP Forbidden) view ¶ defaults. permission_denied ( request , exception , template_name = '403.html' ) ¶ In the same vein as the 404 and 500 views, Django has a view to handle 403\nForbidden errors. If a view results in a 403 exception then Django will, by\ndefault, call the view django.views.defaults.permission_denied . This view loads and renders the template 403.html in your root template\ndirectory, or if this file does not exist, instead serves the text\n“403 Forbidden”, as per RFC 9110 Section 15.5.4 (the HTTP 1.1\nSpecification). The template context contains exception , which is the\nstring representation of the exception that triggered the view. django.views.defaults.permission_denied is triggered by a PermissionDenied exception. To deny access in a\nview you can use code like this: from django.core.exceptions import PermissionDenied def edit ( request , pk ): if not request . user . is_staff : raise PermissionDenied # ... The 400 (bad request) view ¶ defaults. bad_request ( request , exception , template_name = '400.html' ) ¶ When a SuspiciousOperation is raised in Django,\nit may be handled by a component of Django (for example resetting the session\ndata). If not specifically handled, Django will consider the current request a\n‘bad request’ instead of a server error. django.views.defaults.bad_request , is otherwise very similar to the server_error view, but returns with the status code 400 indicating that\nthe error condition was the result of a client operation. By default, nothing\nrelated to the exception that triggered the view is passed to the template\ncontext, as the exception message might contain sensitive information like\nfilesystem paths. bad_request views are also only used when DEBUG is False .", "keywords": ["urlconf", "django.core.exceptions", "edit", "assets", "match", "error", "template", "url", "debug", "forbidden", "static", "handling", "bad_request", "suspiciousoperation", "documentation", "development", "settings", "false", "pk", "serve", "exception", "400.html", "prefix", "document_root", "ships", "server_error", "customizing", "convenience", "behavior", "^media/(?p", "rest", "files", "media_root", "use", "status", "views", "import", "runtime", "urlpatterns", "information", "condition", "project", "paths", "specification", "#", "result", "section", "¶", "vein", "default", "re_path", "media_url", "custom", "web", "path>.*)$", "client", "show_indexes", "server", "page", "snippet", "variables", "500.html", "django.views.defaults.server_error", "access", "example", "session", "component", "value", "production", "content", "loads", "end", "case", "request", "django.contrib.staticfiles", "filesystem", "function", "string", "things", "django.views.defaults.page_not_found", "bit", "page_not_found", "data", "several", "view", "rfc", "pattern", "root", "user", "file", "permissiondenied", "returns", "errors", "http404", "404.html", "django.views.static.serve", "traceback", "template_name", "chance", "path", "403.html", "django", "directory", "message", "parameter", "true", "representation", "text", "module", "http", "requestcontext", "context", "expression", "django.urls", "operation", "instance", "=", "code", "parameters", "defaults", "helper", "aid", "processors"], "type": "documentation"},
{"title": "Validators", "url": "https://docs.djangoproject.com/en/5.1/ref/validators/", "content": "Validators ¶ Writing validators ¶ A validator is a callable that takes a value and raises a ValidationError if it doesn’t meet some\ncriteria. Validators can be useful for reusing validation logic between\ndifferent types of fields. For example, here’s a validator that only allows even numbers: from django.core.exceptions import ValidationError from django.utils.translation import gettext_lazy as _ def validate_even ( value ): if value % 2 != 0 : raise ValidationError ( _ ( \" %(value)s is not an even number\" ), params = { \"value\" : value }, ) You can add this to a model field via the field’s validators argument: from django.db import models class MyModel ( models . Model ): even_field = models . IntegerField ( validators = [ validate_even ]) Because values are converted to Python before validators are run, you can even\nuse the same validator with forms: from django import forms class MyForm ( forms . Form ): even_field = forms . IntegerField ( validators = [ validate_even ]) You can also use a class with a __call__() method for more complex or\nconfigurable validators. RegexValidator , for example, uses this\ntechnique. If a class-based validator is used in the validators model field option, you should make\nsure it is serializable by the migration framework by adding deconstruct() and __eq__() methods. How validators are run ¶ See the form validation for more information on\nhow validators are run in forms, and Validating objects for how they’re run in models. Note that validators will\nnot be run automatically when you save a model, but if you are using a ModelForm , it will run your validators on any fields\nthat are included in your form. See the ModelForm documentation for information on\nhow model validation interacts with forms. Built-in validators ¶ The django.core.validators module contains a collection of callable\nvalidators for use with model and form fields. They’re used internally but\nare available for use with your own fields, too. They can be used in addition\nto, or in lieu of custom field.clean() methods. RegexValidator ¶ class RegexValidator ( regex = None , message = None , code = None , inverse_match = None , flags = 0 ) [source] ¶ Parameters : regex – If not None , overrides regex . Can be a regular\nexpression string or a pre-compiled regular expression. message – If not None , overrides message . code – If not None , overrides code . inverse_match – If not None , overrides inverse_match . flags – If not None , overrides flags . In that case, regex must be a regular expression string, or TypeError is raised. A RegexValidator searches the provided value for a given\nregular expression with re.search() . By default, raises a ValidationError with message and code if a match is not found. Its behavior can be inverted by\nsetting inverse_match to True , in which case the ValidationError is raised when a match is found. regex ¶ The regular expression pattern to search for within the provided value , using re.search() . This may be a string or a\npre-compiled regular expression created with re.compile() .\nDefaults to the empty string, which will be found in every possible value . message ¶ The error message used by ValidationError if validation fails.\nDefaults to \"Enter a valid value\" . code ¶ The error code used by ValidationError if validation fails. Defaults to \"invalid\" . inverse_match ¶ The match mode for regex . Defaults to False . flags ¶ The regex flags used when\ncompiling the regular expression string regex . If regex is a pre-compiled regular expression, and flags is overridden, TypeError is raised. Defaults to 0 . EmailValidator ¶ class EmailValidator ( message = None , code = None , allowlist = None ) [source] ¶ Parameters : message – If not None , overrides message . code – If not None , overrides code . allowlist – If not None , overrides allowlist . An EmailValidator ensures that a value looks like an email, and\nraises a ValidationError with message and code if it doesn’t. Values longer than 320\ncharacters are always considered invalid. message ¶ The error message used by ValidationError if validation fails.\nDefaults to \"Enter a valid email address\" . code ¶ The error code used by ValidationError if validation fails. Defaults to \"invalid\" . allowlist ¶ Allowlist of email domains. By default, a regular expression (the domain_regex attribute) is used to validate whatever appears after\nthe @ sign. However, if that string appears in the allowlist ,\nthis validation is bypassed. If not provided, the default allowlist is ['localhost'] . Other domains that don’t contain a dot won’t pass\nvalidation, so you’d need to add them to the allowlist as\nnecessary. DomainNameValidator ¶ New in Django 5.1. class DomainNameValidator ( accept_idna = True , message = None , code = None ) [source] ¶ A RegexValidator subclass that ensures a value looks like a domain\nname. Values longer than 255 characters are always considered invalid. IP\naddresses are not accepted as valid domain names. In addition to the optional arguments of its parent RegexValidator class, DomainNameValidator accepts an extra optional attribute: accept_idna ¶ Determines whether to accept internationalized domain names, that is,\ndomain names that contain non-ASCII characters. Defaults to True . URLValidator ¶ class URLValidator ( schemes = None , regex = None , message = None , code = None ) [source] ¶ A RegexValidator subclass that ensures a value looks like a URL,\nand raises an error code of 'invalid' if it doesn’t. Values longer than max_length characters are always considered invalid. Loopback addresses and reserved IP spaces are considered valid. Literal\nIPv6 addresses ( RFC 3986 Section 3.2.2 ) and Unicode domains are both\nsupported. In addition to the optional arguments of its parent RegexValidator class, URLValidator accepts an extra optional attribute: schemes ¶ URL/URI scheme list to validate against. If not provided, the default\nlist is ['http', 'https', 'ftp', 'ftps'] . As a reference, the IANA\nwebsite provides a full list of valid URI schemes . Warning Values starting with file:/// will not pass validation even\nwhen the file scheme is provided. Valid values must contain a\nhost. max_length ¶ The maximum length of values that could be considered valid. Defaults\nto 2048 characters. validate_email ¶ validate_email ¶ An EmailValidator instance without any customizations. validate_domain_name ¶ New in Django 5.1. validate_domain_name ¶ A DomainNameValidator instance without any customizations. validate_slug ¶ validate_slug ¶ A RegexValidator instance that ensures a value consists of only\nletters, numbers, underscores or hyphens. validate_unicode_slug ¶ validate_unicode_slug ¶ A RegexValidator instance that ensures a value consists of only\nUnicode letters, numbers, underscores, or hyphens. validate_ipv4_address ¶ validate_ipv4_address [source] ¶ A RegexValidator instance that ensures a value looks like an IPv4\naddress. validate_ipv6_address ¶ validate_ipv6_address [source] ¶ Uses django.utils.ipv6 to check the validity of an IPv6 address. validate_ipv46_address ¶ validate_ipv46_address [source] ¶ Uses both validate_ipv4_address and validate_ipv6_address to\nensure a value is either a valid IPv4 or IPv6 address. validate_comma_separated_integer_list ¶ validate_comma_separated_integer_list ¶ A RegexValidator instance that ensures a value is a\ncomma-separated list of integers. int_list_validator ¶ int_list_validator ( sep = ',' , message = None , code = 'invalid' , allow_negative = False ) [source] ¶ Returns a RegexValidator instance that ensures a string consists\nof integers separated by sep . It allows negative integers when allow_negative is True . MaxValueValidator ¶ class MaxValueValidator ( limit_value , message = None ) [source] ¶ Raises a ValidationError with a code of 'max_value' if value is greater than limit_value , which may be\na callable. MinValueValidator ¶ class MinValueValidator ( limit_value , message = None ) [source] ¶ Raises a ValidationError with a code of 'min_value' if value is less than limit_value , which may be a\ncallable. MaxLengthValidator ¶ class MaxLengthValidator ( limit_value , message = None ) [source] ¶ Raises a ValidationError with a code of 'max_length' if the length of value is greater than limit_value , which may be a callable. MinLengthValidator ¶ class MinLengthValidator ( limit_value , message = None ) [source] ¶ Raises a ValidationError with a code of 'min_length' if the length of value is less than limit_value ,\nwhich may be a callable. DecimalValidator ¶ class DecimalValidator ( max_digits , decimal_places ) [source] ¶ Raises ValidationError with the following\ncodes: 'max_digits' if the number of digits is larger than max_digits . 'max_decimal_places' if the number of decimals is larger than decimal_places . 'max_whole_digits' if the number of whole digits is larger than\nthe difference between max_digits and decimal_places . FileExtensionValidator ¶ class FileExtensionValidator ( allowed_extensions , message , code ) [source] ¶ Raises a ValidationError with a code of 'invalid_extension' if the extension of value.name ( value is\na File ) isn’t found in allowed_extensions .\nThe extension is compared case-insensitively with allowed_extensions . Warning Don’t rely on validation of the file extension to determine a file’s\ntype. Files can be renamed to have any extension no matter what data\nthey contain. validate_image_file_extension ¶ validate_image_file_extension [source] ¶ Uses Pillow to ensure that value.name ( value is a File ) has a valid image extension . ProhibitNullCharactersValidator ¶ class ProhibitNullCharactersValidator ( message = None , code = None ) [source] ¶ Raises a ValidationError if str(value) contains one or more null characters ( '\\x00' ). Parameters : message – If not None , overrides message . code – If not None , overrides code . message ¶ The error message used by ValidationError if validation fails.\nDefaults to \"Null characters are not allowed.\" . code ¶ The error code used by ValidationError if validation fails. Defaults to \"null_characters_not_allowed\" . StepValueValidator ¶ class StepValueValidator ( limit_value , message = None , offset = None ) [source] ¶ Raises a ValidationError with a code of 'step_size' if value is not an integral multiple of limit_value , which can be a float, integer or decimal value or a\ncallable. When offset is set, the validation occurs against limit_value plus offset . For example, for StepValueValidator(3, offset=1.4) valid values include 1.4 , 4.4 , 7.4 , 10.4 , and so on. Changed in Django 5.0: The offset argument was added.", "keywords": ["addresses", "django.core.exceptions", "website", "characters", "match", "int_list_validator", "limit_value", "callable", "error", "comma", "max_decimal_places", "type", "url", "minvaluevalidator", "allow_negative", "image", "types", "%", "iana", "documentation", "max_digits", "validate_ipv6_address", "stepvaluevalidator", "false", "validate_unicode_slug", "uri", "ftp", "fileextensionvalidator", "_", "method", "lieu", "validate_image_file_extension", "behavior", "codes", "integers", "values", "mode", "allowlist", "even_field", "files", "use", "import", "new", "localhost", "hyphens", "'", "validator", "information", "max_whole_digits", "difference", "customizations", "ipv4", "django.utils.translation", "fields", "section", "¶", "spaces", "default", "min_value", "option", "ip", "custom", "maxvaluevalidator", "gettext_lazy", "methods", "domain", "domain_regex", "emailvalidator", "allowed_extensions", "model", "max_length", "none", "validationerror", "letters", "example", "invalid", "email", "value", "re.compile", "mymodel", "dot", "validators", "sep", "re.search", "value)s", "source", "validate_slug", "case", "argument", "minlengthvalidator", "validate_ipv46_address", "class", "number", "invalid_extension", "loopback", "django.utils.ipv6", "numbers", "django.core.validators", "decimal_places", "domainnamevalidator", "integer", "validate_domain_name", "attribute", "django.db", "string", "list", "file:///", "pillow", "validate_even", "ipv6", "data", "stepvaluevalidator(3", "min_length", "rfc", "form", "field.clean", "uses", "max_value", "maxlengthvalidator", "validity", "name", "pattern", "extension", "inverse_match", "flags", "value.name", "file", "prohibitnullcharactersvalidator", "validate_comma_separated_integer_list", "params", "python", "parent", "regexvalidator", "addition", "regex", "sign", "multiple", "domains", "subclass", "validate_email", "migration", "host", "decimalvalidator", "names", "technique", "django", "message", "typeerror", "address", "myform", "float", "validation", "true", "urlvalidator", "framework", "criteria", "field", "module", "arguments", "http", "integerfield", "modelform", "unicode", "expression", "schemes", "logic", "forms", "reference", "instance", "length", "validate_ipv4_address", "=", "models", "code", "digits", "underscores", "objects", "deconstruct", "overrides", "decimals", "collection", "parameters", "defaults", "scheme"], "type": "documentation"},
{"title": "Django Utils", "url": "https://docs.djangoproject.com/en/5.1/ref/utils/", "content": "Django Utils ¶ This document covers all stable modules in django.utils . Most of the\nmodules in django.utils are designed for internal use and only the\nfollowing parts can be considered stable and thus backwards compatible as per\nthe internal release deprecation policy . django.utils.cache ¶ This module contains helper functions for controlling HTTP caching. It does so\nby managing the Vary header of responses. It includes functions to patch\nthe header of response objects directly and decorators that change functions to\ndo that header-patching themselves. For information on the Vary header, see RFC 9110 Section 12.5.5 . Essentially, the Vary HTTP header defines which headers a cache should take\ninto account when building its cache key. Requests with the same path but\ndifferent header content for headers named in Vary need to get different\ncache keys to prevent delivery of wrong content. For example, internationalization middleware would\nneed to distinguish caches by the Accept-language header. patch_cache_control ( response , ** kwargs ) [source] ¶ This function patches the Cache-Control header by adding all keyword\narguments to it. The transformation is as follows: All keyword parameter names are turned to lowercase, and underscores\nare converted to hyphens. If the value of a parameter is True (exactly True , not just a\ntrue value), only the parameter name is added to the header. All other parameters are added with their value, after applying str() to it. get_max_age ( response ) [source] ¶ Returns the max-age from the response Cache-Control header as an integer\n(or None if it wasn’t found or wasn’t an integer). patch_response_headers ( response , cache_timeout = None ) [source] ¶ Adds some useful headers to the given HttpResponse object: Expires Cache-Control Each header is only added if it isn’t already set. cache_timeout is in seconds. The CACHE_MIDDLEWARE_SECONDS setting is used by default. add_never_cache_headers ( response ) [source] ¶ Adds an Expires header to the current date/time. Adds a Cache-Control: max-age=0, no-cache, no-store, must-revalidate, private header to a response to indicate that a page should never be\ncached. Each header is only added if it isn’t already set. patch_vary_headers ( response , newheaders ) [source] ¶ Adds (or updates) the Vary header in the given HttpResponse object. newheaders is a list of header names that should be in Vary . If\nheaders contains an asterisk, then Vary header will consist of a single\nasterisk '*' , according to RFC 9110 Section 12.5.5 . Otherwise,\nexisting headers in Vary aren’t removed. get_cache_key ( request , key_prefix = None , method = 'GET' , cache = None ) [source] ¶ Returns a cache key based on the request path. It can be used in the\nrequest phase because it pulls the list of headers to take into account\nfrom the global path registry and uses those to build a cache key to\ncheck against. If there is no headerlist stored, the page needs to be rebuilt, so this\nfunction returns None . learn_cache_key ( request , response , cache_timeout = None , key_prefix = None , cache = None ) [source] ¶ Learns what headers to take into account for some request path from the\nresponse object. It stores those headers in a global path registry so that\nlater access to that path will know what headers to take into account\nwithout building the response object itself. The headers are named in\nthe Vary header of the response, but we want to prevent response\ngeneration. The list of headers to use for cache key generation is stored in the same\ncache as the pages themselves. If the cache ages some data out of the\ncache, this means that we have to build the response once to get at the\nVary header and so at the list of headers to use for the cache key. django.utils.dateparse ¶ The functions defined in this module share the following properties: They accept strings in ISO 8601 date/time formats (or some close\nalternatives) and return objects from the corresponding classes in Python’s datetime module. They raise ValueError if their input is well formatted but isn’t a\nvalid date or time. They return None if it isn’t well formatted at all. They accept up to picosecond resolution in input, but they truncate it to\nmicroseconds, since that’s what Python supports. parse_date ( value ) [source] ¶ Parses a string and returns a datetime.date . parse_time ( value ) [source] ¶ Parses a string and returns a datetime.time . UTC offsets aren’t supported; if value describes one, the result is None . parse_datetime ( value ) [source] ¶ Parses a string and returns a datetime.datetime . UTC offsets are supported; if value describes one, the result’s tzinfo attribute is a datetime.timezone instance. parse_duration ( value ) [source] ¶ Parses a string and returns a datetime.timedelta . Expects data in the format \"DD HH:MM:SS.uuuuuu\" , \"DD HH:MM:SS,uuuuuu\" ,  or as specified by ISO 8601 (e.g. P4DT1H15M20S which is equivalent to 4 1:15:20 ) or PostgreSQL’s\nday-time interval format (e.g. 3 days 04:05:06 ). django.utils.decorators ¶ method_decorator ( decorator , name = '' ) [source] ¶ Converts a function decorator into a method decorator. It can be used to\ndecorate methods or classes; in the latter case, name is the name\nof the method to be decorated and is required. decorator may also be a list or tuple of functions. They are wrapped\nin reverse order so that the call order is the order in which the functions\nappear in the list/tuple. See decorating class based views for\nexample usage. decorator_from_middleware ( middleware_class ) [source] ¶ Given a middleware class, returns a view decorator. This lets you use\nmiddleware functionality on a per-view basis. The middleware is created\nwith no params passed. It assumes middleware that’s compatible with the old style of Django 1.9\nand earlier (having methods like process_request() , process_exception() , and process_response() ). decorator_from_middleware_with_args ( middleware_class ) [source] ¶ Like decorator_from_middleware , but returns a function\nthat accepts the arguments to be passed to the middleware_class.\nFor example, the cache_page() decorator is created from the CacheMiddleware like this: cache_page = decorator_from_middleware_with_args ( CacheMiddleware ) @cache_page ( 3600 ) def my_view ( request ): pass sync_only_middleware ( middleware ) [source] ¶ Marks a middleware as synchronous-only . (The\ndefault in Django, but this allows you to future-proof if the default ever\nchanges in a future release.) async_only_middleware ( middleware ) [source] ¶ Marks a middleware as asynchronous-only . Django\nwill wrap it in an asynchronous event loop when it is called from the WSGI\nrequest path. sync_and_async_middleware ( middleware ) [source] ¶ Marks a middleware as sync and async compatible ,\nthis allows to avoid converting requests. You must implement detection of\nthe current request type to use this decorator. See asynchronous\nmiddleware documentation for details. django.utils.encoding ¶ smart_str ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) [source] ¶ Returns a str object representing arbitrary object s . Treats\nbytestrings using the encoding codec. If strings_only is True , don’t convert (some) non-string-like\nobjects. is_protected_type ( obj ) [source] ¶ Determine if the object instance is of a protected type. Objects of protected types are preserved as-is when passed to force_str(strings_only=True) . force_str ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) [source] ¶ Similar to smart_str() , except that lazy instances are resolved to\nstrings, rather than kept as lazy objects. If strings_only is True , don’t convert (some) non-string-like\nobjects. smart_bytes ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) [source] ¶ Returns a bytestring version of arbitrary object s , encoded as\nspecified in encoding . If strings_only is True , don’t convert (some) non-string-like\nobjects. force_bytes ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) [source] ¶ Similar to smart_bytes , except that lazy instances are resolved to\nbytestrings, rather than kept as lazy objects. If strings_only is True , don’t convert (some) non-string-like\nobjects. iri_to_uri ( iri ) [source] ¶ Convert an Internationalized Resource Identifier (IRI) portion to a URI\nportion that is suitable for inclusion in a URL. This is the algorithm from section 3.1 of RFC 3987 Section 3.1 , slightly\nsimplified since the input is assumed to be a string rather than an\narbitrary byte stream. Takes an IRI (string or UTF-8 bytes) and returns a string containing the\nencoded result. uri_to_iri ( uri ) [source] ¶ Converts a Uniform Resource Identifier into an Internationalized Resource\nIdentifier. This is an algorithm from section 3.2 of RFC 3987 Section 3.2 . Takes a URI in ASCII bytes and returns a string containing the encoded\nresult. filepath_to_uri ( path ) [source] ¶ Convert a file system path to a URI portion that is suitable for inclusion\nin a URL. The path is assumed to be either UTF-8 bytes, string, or a Path . This method will encode certain characters that would normally be\nrecognized as special characters for URIs.  Note that this method does not\nencode the ‘ character, as it is a valid character within URIs. See encodeURIComponent() JavaScript function for more details. Returns an ASCII string containing the encoded result. escape_uri_path ( path ) [source] ¶ Escapes the unsafe characters from the path portion of a Uniform Resource\nIdentifier (URI). django.utils.feedgenerator ¶ Sample usage: >>> from django.utils import feedgenerator >>> feed = feedgenerator . Rss201rev2Feed ( ... title = \"Poynter E-Media Tidbits\" , ... link = \"https://www.poynter.org/tag/e-media-tidbits/\" , ... description = \"A group blog by the sharpest minds in online media/journalism/publishing.\" , ... language = \"en\" , ... ) >>> feed . add_item ( ... title = \"Hello\" , ... link = \"https://www.holovaty.com/test/\" , ... description = \"Testing.\" , ... ) >>> with open ( \"test.rss\" , \"w\" ) as fp : ... feed . write ( fp , \"utf-8\" ) ... For simplifying the selection of a generator use feedgenerator.DefaultFeed which is currently Rss201rev2Feed For definitions of the different versions of RSS, see: https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss get_tag_uri ( url , date ) [source] ¶ Creates a TagURI. See https://web.archive.org/web/20110514113830/http://diveintomark.org/archives/2004/05/28/howto-atom-id SyndicationFeed ¶ class SyndicationFeed [source] ¶ Base class for all syndication feeds. Subclasses should provide write() . __init__ ( title , link , description , language = None , author_email = None , author_name = None , author_link = None , subtitle = None , categories = None , feed_url = None , feed_copyright = None , feed_guid = None , ttl = None , ** kwargs ) [source] ¶ Initialize the feed with the given dictionary of metadata, which applies\nto the entire feed. Any extra keyword arguments you pass to __init__ will be stored in self.feed . All parameters should be strings, except categories , which should\nbe a sequence of strings. add_item ( title , link , description , author_email = None , author_name = None , author_link = None , pubdate = None , comments = None , unique_id = None , categories = () , item_copyright = None , ttl = None , updateddate = None , enclosures = None , ** kwargs ) [source] ¶ Adds an item to the feed. All args are expected to be strings except pubdate and updateddate , which are datetime.datetime objects, and enclosures , which is a list of Enclosure instances. num_items () [source] ¶ root_attributes () [source] ¶ Return extra attributes to place on the root (i.e. feed/channel)\nelement. Called from write() . add_root_elements ( handler ) [source] ¶ Add elements in the root (i.e. feed/channel) element.\nCalled from write() . item_attributes ( item ) [source] ¶ Return extra attributes to place on each item (i.e. item/entry)\nelement. add_item_elements ( handler , item ) [source] ¶ Add elements on each item (i.e. item/entry) element. write ( outfile , encoding ) [source] ¶ Outputs the feed in the given encoding to outfile , which is a\nfile-like object. Subclasses should override this. writeString ( encoding ) [source] ¶ Returns the feed in the given encoding as a string. latest_post_date () [source] ¶ Returns the latest pubdate or updateddate for all items in the\nfeed. If no items have either of these attributes this returns the\ncurrent UTC date/time. Enclosure ¶ class Enclosure [source] ¶ Represents an RSS enclosure RssFeed ¶ class RssFeed ( SyndicationFeed ) [source] ¶ Rss201rev2Feed ¶ class Rss201rev2Feed ( RssFeed ) [source] ¶ Spec: https://cyber.harvard.edu/rss/rss.html RssUserland091Feed ¶ class RssUserland091Feed ( RssFeed ) [source] ¶ Spec: http://backend.userland.com/rss091 Atom1Feed ¶ class Atom1Feed ( SyndicationFeed ) [source] ¶ Spec: RFC 4287 django.utils.functional ¶ class cached_property ( func ) [source] ¶ The @cached_property decorator caches the result of a method with a\nsingle self argument as a property. The cached result will persist\nas long as the instance does, so if the instance is passed around and the\nfunction subsequently invoked, the cached result will be returned. Consider a typical case, where a view might need to call a model’s method\nto perform some computation, before placing the model instance into the\ncontext, where the template might invoke the method once more: # the model class Person ( models . Model ): def friends ( self ): # expensive computation ... return friends # in the view: if person . friends (): ... And in the template you would have: {% for friend in person.friends %} Here, friends() will be called twice. Since the instance person in\nthe view and the template are the same, decorating the friends() method\nwith @cached_property can avoid that: from django.utils.functional import cached_property class Person ( models . Model ): @cached_property def friends ( self ): ... Note that as the method is now a property, in Python code it will need to\nbe accessed appropriately: # in the view: if person . friends : ... The cached value can be treated like an ordinary attribute of the instance: # clear it, requiring re-computation next time it's called del person . friends # or delattr(person, \"friends\") # set a value manually, that will persist on the instance until cleared person . friends = [ \"Huckleberry Finn\" , \"Tom Sawyer\" ] Because of the way the descriptor protocol works, using del (or delattr ) on a cached_property that hasn’t been accessed raises AttributeError . As well as offering potential performance advantages, @cached_property can ensure that an attribute’s value does not change unexpectedly over the\nlife of an instance. This could occur with a method whose computation is\nbased on datetime.now() , or if a change were saved to the database by\nsome other process in the brief interval between subsequent invocations of\na method on the same instance. You can make cached properties of methods. For example, if you had an\nexpensive get_friends() method and wanted to allow calling it without\nretrieving the cached value, you could write: friends = cached_property ( get_friends ) While person.get_friends() will recompute the friends on each call, the\nvalue of the cached property will persist until you delete it as described\nabove: x = person . friends # calls first time y = person . get_friends () # calls again z = person . friends # does not call x is z # is True class classproperty ( method = None ) [source] ¶ Similar to @classmethod , the @classproperty decorator converts the result of a method with a single cls argument\ninto a property that can be accessed directly from the class. keep_lazy ( func , * resultclasses ) [source] ¶ Django offers many utility functions (particularly in django.utils )\nthat take a string as their first argument and do something to that string.\nThese functions are used by template filters as well as directly in other\ncode. If you write your own similar functions and deal with translations, you’ll\nface the problem of what to do when the first argument is a lazy\ntranslation object. You don’t want to convert it to a string immediately,\nbecause you might be using this function outside of a view (and hence the\ncurrent thread’s locale setting will not be correct). For cases like this, use the django.utils.functional.keep_lazy() decorator. It modifies the function so that if it’s called with a lazy\ntranslation as one of its arguments, the function evaluation is delayed\nuntil it needs to be converted to a string. For example: from django.utils.functional import keep_lazy , keep_lazy_text def fancy_utility_function ( s , * args , ** kwargs ): # Do some conversion on string 's' ... fancy_utility_function = keep_lazy ( str )( fancy_utility_function ) # Or more succinctly: @keep_lazy ( str ) def fancy_utility_function ( s , * args , ** kwargs ): ... The keep_lazy() decorator takes a number of extra arguments ( *args )\nspecifying the type(s) that the original function can return. A common\nuse case is to have functions that return text. For these, you can pass the str type to keep_lazy (or use the keep_lazy_text() decorator\ndescribed in the next section). Using this decorator means you can write your function and assume that the\ninput is a proper string, then add support for lazy translation objects at\nthe end. keep_lazy_text ( func ) [source] ¶ A shortcut for keep_lazy(str)(func) . If you have a function that returns text and you want to be able to take\nlazy arguments while delaying their evaluation, you can use this\ndecorator: from django.utils.functional import keep_lazy , keep_lazy_text # Our previous example was: @keep_lazy ( str ) def fancy_utility_function ( s , * args , ** kwargs ): ... # Which can be rewritten as: @keep_lazy_text def fancy_utility_function ( s , * args , ** kwargs ): ... django.utils.html ¶ Usually you should build up HTML using Django’s templates to make use of its\nautoescape mechanism, using the utilities in django.utils.safestring where appropriate. This module provides some additional low level utilities for\nescaping HTML. escape ( text ) [source] ¶ Returns the given text with ampersands, quotes and angle brackets encoded\nfor use in HTML. The input is first coerced to a string and the output has mark_safe() applied. conditional_escape ( text ) [source] ¶ Similar to escape() , except that it doesn’t operate on preescaped\nstrings, so it will not double escape. format_html ( format_string , * args , ** kwargs ) [source] ¶ This is similar to str.format() , except that it is appropriate for\nbuilding up HTML fragments. The first argument format_string is not\nescaped but all other args and kwargs are passed through conditional_escape() before being passed to str.format() .\nFinally, the output has mark_safe() applied. For the case of building up small HTML fragments, this function is to be\npreferred over string interpolation using % or str.format() directly, because it applies escaping to all arguments - just like the\ntemplate system applies escaping by default. So, instead of writing: mark_safe ( \" %s <b> %s </b> %s \" % ( some_html , escape ( some_text ), escape ( some_other_text ), ) ) You should instead use: format_html ( \" {} <b> {} </b> {} \" , mark_safe ( some_html ), some_text , some_other_text , ) This has the advantage that you don’t need to apply escape() to each\nargument and risk a bug and an XSS vulnerability if you forget one. Note that although this function uses str.format() to do the\ninterpolation, some of the formatting options provided by str.format() (e.g. number formatting) will not work, since all arguments are passed\nthrough conditional_escape() which (ultimately) calls force_str() on the values. Deprecated since version 5.0: Support for calling format_html() without passing args or kwargs is\ndeprecated. format_html_join ( sep , format_string , args_generator ) [source] ¶ A wrapper of format_html() , for the common case of a group of\narguments that need to be formatted using the same format string, and then\njoined using sep . sep is also passed through conditional_escape() . args_generator should be an iterator that returns the sequence of args that will be passed to format_html() . For example: format_html_join ( \" \\n \" , \"<li> {} {} </li>\" , (( u . first_name , u . last_name ) for u in users )) json_script ( value , element_id = None , encoder = None ) [source] ¶ Escapes all HTML/XML special characters with their Unicode escapes, so\nvalue is safe for use with JavaScript. Also wraps the escaped JSON in a <script> tag. If the element_id parameter is not None , the <script> tag is given the passed id. For example: >>> json_script ({ \"hello\" : \"world\" }, element_id = \"hello-data\" ) '<script id=\"hello-data\" type=\"application/json\">{\"hello\": \"world\"}</script>' The encoder , which defaults to django.core.serializers.json.DjangoJSONEncoder , will be used to\nserialize the data. See JSON serialization for more details about this serializer. strip_tags ( value ) [source] ¶ Tries to remove anything that looks like an HTML tag from the string, that\nis anything contained within <> . Absolutely NO guarantee is provided about the resulting string being\nHTML safe. So NEVER mark safe the result of a strip_tag call without\nescaping it first, for example with escape() . For example: strip_tags ( value ) If value is \"<b>Joel</b> <button>is</button> a <span>slug</span>\" the return value will be \"Joel is a slug\" . If you are looking for a more robust solution, consider using a third-party\nHTML sanitizing tool. html_safe () [source] ¶ The __html__() method on a class helps non-Django templates detect\nclasses whose output doesn’t require HTML escaping. This decorator defines the __html__() method on the decorated class\nby wrapping __str__() in mark_safe() .\nEnsure the __str__() method does indeed return text that doesn’t\nrequire HTML escaping. django.utils.http ¶ urlencode ( query , doseq = False ) [source] ¶ A version of Python’s urllib.parse.urlencode() function that can\noperate on MultiValueDict and non-string values. http_date ( epoch_seconds = None ) [source] ¶ Formats the time to match the RFC 1123 Section 5.2.14 date format as\nspecified by HTTP RFC 9110 Section 5.6.7 . Accepts a floating point number expressed in seconds since the epoch in\nUTC–such as that outputted by time.time() . If set to None ,\ndefaults to the current time. Outputs a string in the format Wdy, DD Mon YYYY HH:MM:SS GMT . content_disposition_header ( as_attachment , filename ) [source] ¶ Constructs a Content-Disposition HTTP header value from the given filename as specified by RFC 6266 . Returns None if as_attachment is False and filename is None , otherwise\nreturns a string suitable for the Content-Disposition HTTP header. base36_to_int ( s ) [source] ¶ Converts a base 36 string to an integer. int_to_base36 ( i ) [source] ¶ Converts a positive integer to a base 36 string. urlsafe_base64_encode ( s ) [source] ¶ Encodes a bytestring to a base64 string for use in URLs, stripping any\ntrailing equal signs. urlsafe_base64_decode ( s ) [source] ¶ Decodes a base64 encoded string, adding back any trailing equal signs that\nmight have been stripped. django.utils.module_loading ¶ Functions for working with Python modules. import_string ( dotted_path ) [source] ¶ Imports a dotted module path and returns the attribute/class designated by\nthe last name in the path. Raises ImportError if the import failed. For\nexample: from django.utils.module_loading import import_string ValidationError = import_string ( \"django.core.exceptions.ValidationError\" ) is equivalent to: from django.core.exceptions import ValidationError django.utils.safestring ¶ Functions and classes for working with “safe strings”: strings that can be\ndisplayed safely without further escaping in HTML. Marking something as a “safe\nstring” means that the producer of the string has already turned characters\nthat should not be interpreted by the HTML engine (e.g. ‘<’) into the\nappropriate entities. class SafeString [source] ¶ A str subclass that has been specifically marked as “safe” (requires no\nfurther escaping) for HTML output purposes. mark_safe ( s ) [source] ¶ Explicitly mark a string as safe for (HTML) output purposes. The returned\nobject can be used everywhere a string is appropriate. Can be called multiple times on a single string. Can also be used as a decorator. For building up fragments of HTML, you should normally be using django.utils.html.format_html() instead. String marked safe will become unsafe again if modified. For example: >>> mystr = \"<b>Hello World</b>   \" >>> mystr = mark_safe ( mystr ) >>> type ( mystr ) <class 'django.utils.safestring.SafeString'> >>> mystr = mystr . strip () # removing whitespace >>> type ( mystr ) <type 'str'> django.utils.text ¶ format_lazy ( format_string , * args , ** kwargs ) ¶ A version of str.format() for when format_string , args ,\nand/or kwargs contain lazy objects. The first argument is the string to\nbe formatted. For example: from django.utils.text import format_lazy from django.utils.translation import pgettext_lazy urlpatterns = [ path ( format_lazy ( \" {person} /<int:pk>/\" , person = pgettext_lazy ( \"URL\" , \"person\" )), PersonDetailView . as_view (), ), ] This example allows translators to translate part of the URL. If “person”\nis translated to “persona”, the regular expression will match persona/(?P<pk>\\d+)/$ , e.g. persona/5/ . slugify ( value , allow_unicode = False ) [source] ¶ Converts a string to a URL slug by: Converting to ASCII if allow_unicode is False (the default). Converting to lowercase. Removing characters that aren’t alphanumerics, underscores, hyphens, or\nwhitespace. Replacing any whitespace or repeated dashes with single dashes. Removing leading and trailing whitespace, dashes, and underscores. For example: >>> slugify ( \" Joel is a slug \" ) 'joel-is-a-slug' If you want to allow Unicode characters, pass allow_unicode=True . For\nexample: >>> slugify ( \"你好 World\" , allow_unicode = True ) '你好-world' django.utils.timezone ¶ get_fixed_timezone ( offset ) [source] ¶ Returns a tzinfo instance that represents a time zone\nwith a fixed offset from UTC. offset is a datetime.timedelta or an integer number of\nminutes. Use positive values for time zones east of UTC and negative\nvalues for west of UTC. get_default_timezone () [source] ¶ Returns a tzinfo instance that represents the default time zone . get_default_timezone_name () [source] ¶ Returns the name of the default time zone . get_current_timezone () [source] ¶ Returns a tzinfo instance that represents the current time zone . get_current_timezone_name () [source] ¶ Returns the name of the current time zone . activate ( timezone ) [source] ¶ Sets the current time zone . The timezone argument must be an instance of a tzinfo subclass or a time zone name. deactivate () [source] ¶ Unsets the current time zone . override ( timezone ) [source] ¶ This is a Python context manager that sets the current time zone on entry with activate() , and restores\nthe previously active time zone on exit. If the timezone argument is None , the current time zone is unset\non entry with deactivate() instead. override is also usable as a function decorator. localtime ( value = None , timezone = None ) [source] ¶ Converts an aware datetime to a different time zone,\nby default the current time zone . When value is omitted, it defaults to now() . This function doesn’t work on naive datetimes; use make_aware() instead. localdate ( value = None , timezone = None ) [source] ¶ Uses localtime() to convert an aware datetime to a date() in a different time zone, by default the current time zone . When value is omitted, it defaults to now() . This function doesn’t work on naive datetimes. now () [source] ¶ Returns a datetime that represents the\ncurrent point in time. Exactly what’s returned depends on the value of USE_TZ : If USE_TZ is False , this will be a naive datetime (i.e. a datetime\nwithout an associated timezone) that represents the current time\nin the system’s local timezone. If USE_TZ is True , this will be an aware datetime representing the\ncurrent time in UTC. Note that now() will always return\ntimes in UTC regardless of the value of TIME_ZONE ;\nyou can use localtime() to get the time in the current time zone. is_aware ( value ) [source] ¶ Returns True if value is aware, False if it is naive. This\nfunction assumes that value is a datetime . is_naive ( value ) [source] ¶ Returns True if value is naive, False if it is aware. This\nfunction assumes that value is a datetime . make_aware ( value , timezone = None ) [source] ¶ Returns an aware datetime that represents the same\npoint in time as value in timezone , value being a naive datetime . If timezone is set to None , it\ndefaults to the current time zone . make_naive ( value , timezone = None ) [source] ¶ Returns a naive datetime that represents in timezone the same point in time as value , value being an\naware datetime . If timezone is set to None , it\ndefaults to the current time zone . django.utils.translation ¶ For a complete discussion on the usage of the following see the translation documentation . gettext ( message ) [source] ¶ Translates message and returns it as a string. pgettext ( context , message ) [source] ¶ Translates message given the context and returns it as a string. For more information, see Contextual markers . gettext_lazy ( message ) ¶ pgettext_lazy ( context , message ) ¶ Same as the non-lazy versions above, but using lazy execution. See lazy translations documentation . gettext_noop ( message ) [source] ¶ Marks strings for translation but doesn’t translate them now. This can be\nused to store strings in global variables that should stay in the base\nlanguage (because they might be used externally) and will be translated\nlater. ngettext ( singular , plural , number ) [source] ¶ Translates singular and plural and returns the appropriate string\nbased on number . npgettext ( context , singular , plural , number ) [source] ¶ Translates singular and plural and returns the appropriate string\nbased on number and the context . ngettext_lazy ( singular , plural , number ) [source] ¶ npgettext_lazy ( context , singular , plural , number ) [source] ¶ Same as the non-lazy versions above, but using lazy execution. See lazy translations documentation . activate ( language ) [source] ¶ Fetches the translation object for a given language and activates it as\nthe current translation object for the current thread. deactivate () [source] ¶ Deactivates the currently active translation object so that further _ calls\nwill resolve against the default translation object, again. deactivate_all () [source] ¶ Makes the active translation object a NullTranslations() instance.\nThis is useful when we want delayed translations to appear as the original\nstring for some reason. override ( language , deactivate = False ) [source] ¶ A Python context manager that uses django.utils.translation.activate() to fetch the translation object\nfor a given language, activates it as the translation object for the\ncurrent thread and reactivates the previous active language on exit.\nOptionally, it can deactivate the temporary translation on exit with django.utils.translation.deactivate() if the deactivate argument\nis True . If you pass None as the language argument, a NullTranslations() instance is activated within the context. override is also usable as a function decorator. check_for_language ( lang_code ) [source] ¶ Checks whether there is a global language file for the given language\ncode (e.g. ‘fr’, ‘pt_BR’). This is used to decide whether a user-provided\nlanguage is available. get_language () [source] ¶ Returns the currently selected language code. Returns None if\ntranslations are temporarily deactivated (by deactivate_all() or\nwhen None is passed to override() ). get_language_bidi () [source] ¶ Returns selected language’s BiDi layout: False = left-to-right layout True = right-to-left layout get_language_from_request ( request , check_path = False ) [source] ¶ Analyzes the request to find what language the user wants the system to\nshow. Only languages listed in settings.LANGUAGES are taken into account.\nIf the user requests a sublanguage where we have a main language, we send\nout the main language. If check_path is True , the function first checks the requested URL\nfor whether its path begins with a language code listed in the LANGUAGES setting. get_supported_language_variant ( lang_code , strict = False ) [source] ¶ Returns lang_code if it’s in the LANGUAGES setting, possibly\nselecting a more generic variant. For example, 'es' is returned if lang_code is 'es-ar' and 'es' is in LANGUAGES but 'es-ar' isn’t. lang_code has a maximum accepted length of 500 characters. A LookupError is raised if lang_code exceeds this limit and strict is True , or if there is no generic variant and strict is False . If strict is False (the default), a country-specific variant may\nbe returned when neither the language code nor its generic variant is found.\nFor example, if only 'es-co' is in LANGUAGES , that’s\nreturned for lang_code s like 'es' and 'es-ar' . Those matches\naren’t returned if strict=True . Raises LookupError if nothing is found. Changed in Django 4.2.15: In older versions, lang_code values over 500 characters were\nprocessed without raising a LookupError . to_locale ( language ) [source] ¶ Turns a language name (en-us) into a locale name (en_US). templatize ( src ) [source] ¶ Turns a Django template into something that is understood by xgettext .\nIt does so by translating the Django translation tags into standard gettext function invocations.", "keywords": ["friend", "django.core.exceptions", "comments", "accept", "urlsafe_base64_encode", "type", "httpresponse", "parse_date", "url", "some_text", "mystr", "def", "place", "some_other_text", "django.utils.safestring", "settings", "reason", "uri", "classes", "day", "method", "party", "testing", "person", "performance", "responses", "use", "django.utils.feedgenerator", "wdy", "django.utils.html.format_html", "utility", "views", "encoding", "escaping", "int_to_base36", "right", "us", "items", "sample", "minutes", "person.friends", "way", "uris", "en", "default", "filters", "disposition", "src", "format_lazy", "pk>\\d+)/$", "gettext_lazy", "page", "vary", "age", "users", "feed_copyright", "tool", "event", "bytestrings", "slug</span", "self", "sep", "pass", "treats", "argument", "converts", "version", "cache_timeout", "@classmethod", "tuple", "autoescape", "django.utils.translation.activate", "integer", "minds", "transformation", "keep_lazy", "properties", "generator", "x", "e", "gettext", "policy", "gmt", "element", "add_item_elements", "name", "strip_tags", "header", "json_script", "world", "add_root_elements", "first_name", "allow_unicode", "deactivate", "pk>/", "python", "link", "instances", "urlsafe_base64_decode", "xgettext", "handler", "formats", "uniform", "guarantee", "subclass", "defines", "descriptor", "d.", "poynter", "tag", "evaluation", "pt_br", "self.feed", "cache_middleware_seconds", "true", "*", "get_current_timezone", "locale", "requests", "datetime.timedelta", "ss", "headers", "unicode", "write", "filepath_to_uri", "utilities", "length", "django.utils.timezone", "updates", "key", "parameters", "producer", "tidbits", "resultclasses", "helper", "datetime.datetime", "zone", "num_items", "dictionary", "characters", "resolution", "uuuuuu", "script", "django.utils.decorators", "fp", "xss", "cachemiddleware", "dd", "template", "nulltranslations", "cache", "control", "datetime", "selection", "%", "setting", "order", "co", "basis", "documentation", "-", "deprecation", "get_tag_uri", "style", "person.get_friends", "author_name", "iri_to_uri", "huckleberry", "markers", "categories", "system", "es", "modules", "str", "query", "following", "import", "hyphens", "w", "'", "information", "json", "interval", "encodes", "en_us", "result", "#", "point", "section", "versions", "¶", "enclosures", "alternatives", "init", "@cached_property", "keep_lazy_text", "feed_guid", "hello", "make_aware", "rss", "marks", "@cache_page", "layout", "change", "atom1feed", "expires", "format", "subtitle", "example", "importerror", "identifier", "functions", "value", "get_supported_language_variant", "definitions", "source", "feedgenerator", "force_bytes", "offset", "stream", "keep_lazy(str)(func", "lookuperror", "languages", "django.utils.text", "blog", "converting", "writing", "html", "persondetailview", "encodeuricomponent", "details", "slug", "advantages", "override", "as_view", "rfc", "patch_response_headers", "my_view", "object", "rss201rev2feed", "root", "decorator_from_middleware", "exit", "postgresql", "force_str", "attributes", "algorithm", "returns", "sync", "phase", "conversion", "str.format", "tzinfo", "alphanumerics", "store", "sequence", "delattr", "pubdate", "singular", "joel", "valueerror", "http://backend.userland.com/rss091", "level", "django", "days", "unique_id", "fragments", "message", "thread", "vulnerability", "feeds", "base36_to_int", "parameter", "text", "smart_bytes", "inclusion", "strings", "microseconds", "u", "http", "whitespace", "process_response", "iri", "escape_uri_path", "=", "objects", "get_friends", "localtime", "discussion", "language", "rssuserland091feed", "defaults", "ttl", "epoch_seconds", "matches", "decorator_from_middleware_with_args", "wrapper", "utc", "some_html", "root_attributes", "datetimes", "plural", "button", "translation", "serialization", "templates", "multivaluedict", "get_current_timezone_name", "time", "time.time", "key_prefix", "release", "west", "django.core.serializers.json", "property", "middleware", "cached_property", "classproperty", "args", "outfile", "method_decorator", "lowercase", "feed_url", "learns", "generation", "manager", "adds", "bytes", "problem", "subclasses", "invocations", "django.utils.translation", "output", "delattr(person", "headerlist", "conditional_escape", "decorator", "get_default_timezone_name", "methods", "safestring", "unsets", "npgettext", "keyword", "add_item", "journalism", "same", "offsets", "deactivate_all", "none", "tom", "django.utils.functional.keep_lazy", "urls", "variables", "loop", "base", "protocol", "process", "access", "javascript", ">", "asterisk", "syndicationfeed", "content", "seconds", "cache_page", "smart_str", "end", "request", "check_path", "internationalization", "advantage", "https://www.poynter.org/tag/e-media-tidbits/", "engine", "args_generator", "convert", "determine", "fancy_utility_function", "world</b", "data", "brackets", "group", "options", "https://web.archive.org/web/20110514113830/http://diveintomark.org/archives/2004/05/28/howto-atom-id", "codec", "enclosure", "is</button", "sawyer", "’s", "params", "life", "response", "doseq", "execution", "description", "s", "kwargs", "dashes", "keys", "ngettext", "你好", "path", "decodes", "django.utils", "elements", "max", "mark_safe", "world\"}</script", "module", "arguments", "last_name", "decorators", "context", "friends", "mm", "django.utils.cache", "get_default_timezone", "proof", "models", "underscores", "pages", "epoch", "lang_code", "content_disposition_header", "registry", "re", "title", "patch_vary_headers", "call", "defaultfeed", "5.2.14", "similar", "feed", "@classproperty", "support", "types", "country", "changes", "internationalized", "publishing", "utf-8", "escape", "taguri", "sublanguage", "portion", "false", "process_exception", "_", "ascii", "check_for_language", "variant", "metadata", "utils", "https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss", "values", "quotes", "cases", "solution", "encoder", "delivery", "get_fixed_timezone", "iterator", "times", "caches", "item", "id=\"hello", "async", "translations", "media", "attributeerror", "zones", "bidi", "resource", "dotted_path", "signs", "format_html", "sync_only_middleware", "timezone", "outputs", "input", "usage", "computation", "z", "element_id", "model", "y", "datetime.time", "character", "validationerror", "iso", "datetime.date", "fr", "detection", "serializer", "format_string", "purposes", "age=0", "span", "django.utils.translation.deactivate", "djangojsonencoder", "use_tz", "checks", "entities", "calls", "n’t", "channel", "syndication", "newheaders", "case", "class", "number", "xml", "add_never_cache_headers", "django.utils.dateparse", "return", "type=\"application", "rssfeed", "attribute", "as_attachment", "function", "li", "string", "interpolation", "list", "bug", "filename", "view", "urlencode", "uses", "parts", "i", "middleware_class", "user", "spec", "part", "file", "activate", "yyyy", "patch_cache_control", "translators", "errors", "get", "account", "strip", "mechanism", "escapes", "type(s", "django.utils.html", "https://cyber.harvard.edu/rss/rss.html", "json\">{\"hello", "names", "ampersands", "parse_datetime", "document", "tags", "date", "mon", "functionality", "database", "get_max_age", "func", "limit", "expression", "instance", "finn", "code", "cls", "gettext_noop", "del", "ar", "wsgi", "hh", "author_link", "entry", "get_language"], "type": "documentation"},
{"title": " functions for use in URLconfs", "url": "https://docs.djangoproject.com/en/5.1/ref/urls/", "content": "django.urls functions for use in URLconfs ¶ path() ¶ path ( route , view , kwargs = None , name = None ) ¶ Returns an element for inclusion in urlpatterns . For example: from django.urls import include , path urlpatterns = [ path ( \"index/\" , views . index , name = \"main-view\" ), path ( \"bio/<username>/\" , views . bio , name = \"bio\" ), path ( \"articles/<slug:title>/\" , views . article , name = \"article-detail\" ), path ( \"articles/<slug:title>/<int:section>/\" , views . section , name = \"article-section\" ), path ( \"blog/\" , include ( \"blog.urls\" )), ... , ] route ¶ The route argument should be a string or gettext_lazy() (see Translating URL patterns ) that contains a URL pattern. The string\nmay contain angle brackets (like <username> above) to capture part of the\nURL and send it as a keyword argument to the view. The angle brackets may\ninclude a converter specification (like the int part of <int:section> )\nwhich limits the characters matched and may also change the type of the\nvariable passed to the view. For example, <int:section> matches a string\nof decimal digits and converts the value to an int . When processing a request, Django starts at the first pattern in urlpatterns and makes its way down the list, comparing the requested URL\nagainst each pattern until it finds one that matches. See How Django processes a request for more details. Patterns don’t match GET and POST parameters, or the domain name. For example,\nin a request to https://www.example.com/myapp/ , the URLconf will look for myapp/ . In a request to https://www.example.com/myapp/?page=3 , the\nURLconf will also look for myapp/ . view ¶ The view argument is a view function or the result of as_view() for class-based views. It can\nalso be a django.urls.include() . When Django finds a matching pattern, it calls the specified view function with\nan HttpRequest object as the first argument and any\n“captured” values from the route as keyword arguments. kwargs ¶ The kwargs argument allows you to pass additional arguments to the view\nfunction or method. See Passing extra options to view functions for an example. name ¶ Naming your URL lets you refer to it unambiguously from elsewhere in Django,\nespecially from within templates. This powerful feature allows you to make\nglobal changes to the URL patterns of your project while only touching a single\nfile. See Naming URL patterns for why the name argument is useful. re_path() ¶ re_path ( route , view , kwargs = None , name = None ) ¶ Returns an element for inclusion in urlpatterns . For example: from django.urls import include , re_path urlpatterns = [ re_path ( r \"^index/$\" , views . index , name = \"index\" ), re_path ( r \"^bio/(?P<username>\\w+)/$\" , views . bio , name = \"bio\" ), re_path ( r \"^blog/\" , include ( \"blog.urls\" )), ... , ] The route argument should be a string or gettext_lazy() (see Translating URL patterns ) that contains a regular expression compatible\nwith Python’s re module. Strings typically use raw string syntax\n( r'' ) so that they can contain sequences like \\d without the need to\nescape the backslash with another backslash. When a match is made, captured\ngroups from the regular expression are passed to the view – as named arguments\nif the groups are named, and as positional arguments otherwise. The values are\npassed as strings, without any type conversion. When a route ends with $ the whole requested URL, matching against path_info , must match the regular expression\npattern ( re.fullmatch() is used). The view , kwargs and name arguments are the same as for path() . include() ¶ include ( module , namespace = None ) [source] ¶ include ( pattern_list ) include ( (pattern_list , app_namespace) , namespace=None ) A function that takes a full Python import path to another URLconf module\nthat should be “included” in this place. Optionally, the application\nnamespace and instance namespace where the entries will be included\ninto can also be specified. Usually, the application namespace should be specified by the included\nmodule. If an application namespace is set, the namespace argument\ncan be used to set a different instance namespace. include() also accepts as an argument either an iterable that returns\nURL patterns or a 2-tuple containing such iterable plus the names of the\napplication namespaces. Parameters : module – URLconf module (or module name) namespace ( str ) – Instance namespace for the URL entries being included pattern_list – Iterable of path() and/or re_path() instances. app_namespace ( str ) – Application namespace for the URL entries being included See Including other URLconfs and URL namespaces and included URLconfs . register_converter() ¶ register_converter ( converter , type_name ) [source] ¶ The function for registering a converter for use in path() route s. The converter argument is a converter class, and type_name is the\nconverter name to use in path patterns. See Registering custom path converters for an example. Deprecated since version 5.1: Overriding existing converters is deprecated. django.conf.urls functions for use in URLconfs ¶ static() ¶ static. static ( prefix , view = django.views.static.serve , ** kwargs ) ¶ Helper function to return a URL pattern for serving files in debug mode: from django.conf import settings from django.conf.urls.static import static urlpatterns = [ # ... the rest of your URLconf goes here ... ] + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) handler400 ¶ handler400 ¶ A callable, or a string representing the full Python import path to the view\nthat should be called if the HTTP client has sent a request that caused an error\ncondition and a response with a status code of 400. By default, this is django.views.defaults.bad_request() . If you\nimplement a custom view, be sure it accepts request and exception arguments and returns an HttpResponseBadRequest . handler403 ¶ handler403 ¶ A callable, or a string representing the full Python import path to the view\nthat should be called if the user doesn’t have the permissions required to\naccess a resource. By default, this is django.views.defaults.permission_denied() . If you\nimplement a custom view, be sure it accepts request and exception arguments and returns an HttpResponseForbidden . handler404 ¶ handler404 ¶ A callable, or a string representing the full Python import path to the view\nthat should be called if none of the URL patterns match. By default, this is django.views.defaults.page_not_found() . If you\nimplement a custom view, be sure it accepts request and exception arguments and returns an HttpResponseNotFound . handler500 ¶ handler500 ¶ A callable, or a string representing the full Python import path to the view\nthat should be called in case of server errors. Server errors happen when you\nhave runtime errors in view code. By default, this is django.views.defaults.server_error() . If you\nimplement a custom view, be sure it accepts a request argument and returns\nan HttpResponseServerError .", "keywords": ["urlconf", "iterable", "index", "permissions", "characters", "path_info", "match", "django.conf.urls", "variable", "error", "type", "url", "debug", "^index/$", "static", "changes", "templates", "title>/", "place", "username", "settings", "type_name", "application", "exception", "method", "values", "rest", "mode", "str", "files", "use", "status", "import", "views", "runtime", "urlpatterns", "condition", "section>/", "project", "article", "specification", "groups", "httpresponsebadrequest", "^blog/", "result", "#", "section", "way", "converters", "¶", "articles/<slug", "default", "resource", "re_path", "media_url", "custom", "gettext_lazy", "naming", "client", "domain", "keyword", "need", "entries", "handler500", "server", "none", "django.views.defaults.server_error", "^bio/(?p", "blog.urls", "converter", "example", "n’t", "httpresponsenotfound", "handler400", "functions", "value", "int", "bio", "source", "case", "argument", "route", "class", "title>/<int", "request", "version", "tuple", "handler404", "function", "string", "list", "details", "django.views.defaults.page_not_found", "bio/<username>/", "element", "view", "matching", "as_view", "angle", "brackets", "register_converter", "name", "object", "options", "pattern", "user", "httprequest", "part", "file", "patterns", "python", "errors", "backslash", "\\d", "app_namespace", "get", "r", "conversion", "namespaces", "instances", "response", "django.views.static.serve", "kwargs", "sequences", "path", "post", "names", "django", "namespace", "s.", "syntax", "*", "module", "arguments", "urlconfs", "inclusion", "strings", "http", "httpresponseforbidden", "expression", "django.urls", "instance", "digits", "=", "code", "feature", "detail", "re.fullmatch", "django.urls.include", "handler403", "parameters", "re", "pattern_list", "helper"], "type": "documentation"},
{"title": " utility functions", "url": "https://docs.djangoproject.com/en/5.1/ref/urlresolvers/", "content": "django.urls utility functions ¶ reverse() ¶ If you need to use something similar to the url template tag in\nyour code, Django provides the following function: reverse ( viewname , urlconf = None , args = None , kwargs = None , current_app = None ) [source] ¶ viewname can be a URL pattern name or the\ncallable view object. For example, given the following url : from news import views path ( \"archive/\" , views . archive , name = \"news-archive\" ) you can use any of the following to reverse the URL: # using the named URL reverse ( \"news-archive\" ) # passing a callable object # (This is discouraged because you can't reverse namespaced views this way.) from news import views reverse ( views . archive ) If the URL accepts arguments, you may pass them in args . For example: from django.urls import reverse def myview ( request ): return HttpResponseRedirect ( reverse ( \"arch-summary\" , args = [ 1945 ])) You can also pass kwargs instead of args . For example: >>> reverse ( \"admin:app_list\" , kwargs = { \"app_label\" : \"auth\" }) '/admin/auth/' args and kwargs cannot be passed to reverse() at the same time. If no match can be made, reverse() raises a NoReverseMatch exception. The reverse() function can reverse a large variety of regular expression\npatterns for URLs, but not every possible one. The main restriction at the\nmoment is that the pattern cannot contain alternative choices using the\nvertical bar ( \"|\" ) character. You can quite happily use such patterns for\nmatching against incoming URLs and sending them off to views, but you cannot\nreverse such patterns. The current_app argument allows you to provide a hint to the resolver\nindicating the application to which the currently executing view belongs.\nThis current_app argument is used as a hint to resolve application\nnamespaces into URLs on specific application instances, according to the namespaced URL resolution strategy . The urlconf argument is the URLconf module containing the URL patterns to\nuse for reversing. By default, the root URLconf for the current thread is used. Note The string returned by reverse() is already urlquoted . For example: >>> reverse ( \"cities\" , args = [ \"Orléans\" ]) '.../Orl%C3%A9ans/' Applying further encoding (such as urllib.parse.quote() ) to the output\nof reverse() may produce undesirable results. reverse_lazy() ¶ A lazily evaluated version of reverse() . reverse_lazy ( viewname , urlconf = None , args = None , kwargs = None , current_app = None ) ¶ It is useful for when you need to use a URL reversal before your project’s\nURLConf is loaded. Some common cases where this function is necessary are: providing a reversed URL as the url attribute of a generic class-based\nview. providing a reversed URL to a decorator (such as the login_url argument\nfor the django.contrib.auth.decorators.permission_required() decorator). providing a reversed URL as a default value for a parameter in a function’s\nsignature. resolve() ¶ The resolve() function can be used for resolving URL paths to the\ncorresponding view functions. It has the following signature: resolve ( path , urlconf = None ) [source] ¶ path is the URL path you want to resolve. As with reverse() , you don’t need to worry about the urlconf parameter. The function returns a ResolverMatch object that allows you\nto access various metadata about the resolved URL. If the URL does not resolve, the function raises a Resolver404 exception (a subclass of Http404 ) . class ResolverMatch [source] ¶ func ¶ The view function that would be used to serve the URL args ¶ The arguments that would be passed to the view function, as\nparsed from the URL. kwargs ¶ All keyword arguments that would be passed to the view function, i.e. captured_kwargs and extra_kwargs . captured_kwargs ¶ The captured keyword arguments that would be passed to the view\nfunction, as parsed from the URL. extra_kwargs ¶ The additional keyword arguments that would be passed to the view\nfunction. url_name ¶ The name of the URL pattern that matches the URL. route ¶ The route of the matching URL pattern. For example, if path('users/<id>/', ...) is the matching pattern, route will contain 'users/<id>/' . tried ¶ The list of URL patterns tried before the URL either matched one or\nexhausted available patterns. app_name ¶ The application namespace for the URL pattern that matches the\nURL. app_names ¶ The list of individual namespace components in the full\napplication namespace for the URL pattern that matches the URL.\nFor example, if the app_name is 'foo:bar' , then app_names will be ['foo', 'bar'] . namespace ¶ The instance namespace for the URL pattern that matches the\nURL. namespaces ¶ The list of individual namespace components in the full\ninstance namespace for the URL pattern that matches the URL.\ni.e., if the namespace is foo:bar , then namespaces will be ['foo', 'bar'] . view_name ¶ The name of the view that matches the URL, including the namespace if\nthere is one. A ResolverMatch object can then be interrogated to provide\ninformation about the URL pattern that matches a URL: # Resolve a URL match = resolve ( \"/some/path/\" ) # Print the URL pattern that matches the URL print ( match . url_name ) A ResolverMatch object can also be assigned to a triple: func , args , kwargs = resolve ( \"/some/path/\" ) One possible use of resolve() would be to test whether a\nview would raise a Http404 error before redirecting to it: from urllib.parse import urlparse from django.urls import resolve from django.http import Http404 , HttpResponseRedirect def myview ( request ): next = request . META . get ( \"HTTP_REFERER\" , None ) or \"/\" response = HttpResponseRedirect ( next ) # modify the request and response as required, e.g. change locale # and set corresponding locale cookie view , args , kwargs = resolve ( urlparse ( next )[ 2 ]) kwargs [ \"request\" ] = request try : view ( * args , ** kwargs ) except Http404 : return HttpResponseRedirect ( \"/\" ) return response get_script_prefix() ¶ get_script_prefix () [source] ¶ Normally, you should always use reverse() to define URLs\nwithin your application. However, if your application constructs part of the\nURL hierarchy itself, you may occasionally need to generate URLs. In that\ncase, you need to be able to find the base URL of the Django project within\nits web server (normally, reverse() takes care of this for\nyou). In that case, you can call get_script_prefix() , which will return\nthe script prefix portion of the URL for your Django project. If your Django\nproject is at the root of its web server, this is always \"/\" . Warning This function cannot be used outside of the request-response cycle\nsince it relies on values initialized during that cycle.", "keywords": ["urlconf", "normally", "resolvermatch", "match", "resolution", "script", "http_referer", "restriction", "error", "app_list", "template", "url", "users/<id>/", "viewname", "captured_kwargs", "urlparse", "resolve", "extra_kwargs", "portion", "time", "application", "exception", "prefix", "args", "metadata", "values", "app_name", "cases", "use", "following", "get_script_prefix", "utility", "import", "views", "encoding", "bar", "moment", "information", "project", "paths", "noreversematch", "#", "orléans", "output", "variety", "way", "¶", "login_url", "default", "signature", "resolver", "decorator", "web", "keyword", "server", "none", "urls", "character", "results", "urllib.parse.quote", "example", "functions", "value", "source", "case", "argument", "route", "class", "components", "choices", "cities", "print", "request", "version", "return", "cycle", "app_label", "attribute", "function", "current_app", "meta", "string", "care", "list", "myview", "view", "matching", "name", "object", "cookie", "pattern", "root", "triple", "part", "admin", "hierarchy", "patterns", "http404", "instances", "namespaces", "response", "kwargs", "subclass", "hint", "app_names", "path", "summary", "django", "archive", "tag", "|", "thread", "namespace", "parameter", "*", "module", "arguments", "foo", "reverse", "func", "expression", "django.urls", "instance", "code", "=", "news", "path('users/<id>/", "strategy", "reversal"], "type": "documentation"},
{"title": "Unicode data", "url": "https://docs.djangoproject.com/en/5.1/ref/unicode/", "content": "Unicode data ¶ Django supports Unicode data everywhere. This document tells you what you need to know if you’re writing applications\nthat use data or templates that are encoded in something other than ASCII. Creating the database ¶ Make sure your database is configured to be able to store arbitrary string\ndata. Normally, this means giving it an encoding of UTF-8 or UTF-16. If you use\na more restrictive encoding – for example, latin1 (iso8859-1) – you won’t be\nable to store certain characters in the database, and information will be lost. MySQL users, refer to the MySQL manual for details on how to set or alter\nthe database character set encoding. PostgreSQL users, refer to the PostgreSQL manual for details on creating\ndatabases with the correct encoding. Oracle users, refer to the Oracle manual for details on how to set\n( section 2 ) or alter ( section 11 ) the database character set encoding. SQLite users, there is nothing you need to do. SQLite always uses UTF-8\nfor internal encoding. All of Django’s database backends automatically convert strings into\nthe appropriate encoding for talking to the database. They also automatically\nconvert strings retrieved from the database into strings. You don’t even need\nto tell Django what encoding your database uses: that is handled transparently. For more, see the section “The database API” below. General string handling ¶ Whenever you use strings with Django – e.g., in database lookups, template\nrendering or anywhere else – you have two choices for encoding those strings.\nYou can use normal strings or bytestrings (starting with a ‘b’). Warning A bytestring does not carry any information with it about its encoding.\nFor that reason, we have to make an assumption, and Django assumes that all\nbytestrings are in UTF-8. If you pass a string to Django that has been encoded in some other format,\nthings will go wrong in interesting ways. Usually, Django will raise a UnicodeDecodeError at some point. If your code only uses ASCII data, it’s safe to use your normal strings,\npassing them around at will, because ASCII is a subset of UTF-8. Don’t be fooled into thinking that if your DEFAULT_CHARSET setting is set\nto something other than 'utf-8' you can use that other encoding in your\nbytestrings! DEFAULT_CHARSET only applies to the strings generated as\nthe result of template rendering (and email). Django will always assume UTF-8\nencoding for internal bytestrings. The reason for this is that the DEFAULT_CHARSET setting is not actually under your control (if you are the\napplication developer). It’s under the control of the person installing and\nusing your application – and if that person chooses a different setting, your\ncode must still continue to work. Ergo, it cannot rely on that setting. In most cases when Django is dealing with strings, it will convert them to\nstrings before doing anything else. So, as a general rule, if you pass\nin a bytestring, be prepared to receive a string back in the result. Translated strings ¶ Aside from strings and bytestrings, there’s a third type of string-like\nobject you may encounter when using Django. The framework’s\ninternationalization features introduce the concept of a “lazy translation” –\na string that has been marked as translated but whose actual translation result\nisn’t determined until the object is used in a string. This feature is useful\nin cases where the translation locale is unknown until the string is used, even\nthough the string might have originally been created when the code was first\nimported. Normally, you won’t have to worry about lazy translations. Just be aware that\nif you examine an object and it claims to be a django.utils.functional.__proxy__ object, it is a lazy translation.\nCalling str() with the lazy translation as the argument will generate a\nstring in the current locale. For more details about lazy translation objects, refer to the internationalization documentation. Useful utility functions ¶ Because some string operations come up again and again, Django ships with a few\nuseful functions that should make working with string and bytestring objects\na bit easier. Conversion functions ¶ The django.utils.encoding module contains a few functions that are handy\nfor converting back and forth between strings and bytestrings. smart_str(s, encoding='utf-8', strings_only=False, errors='strict') converts its input to a string. The encoding parameter\nspecifies the input encoding. (For example, Django uses this internally\nwhen processing form input data, which might not be UTF-8 encoded.) The strings_only parameter, if set to True, will result in Python\nnumbers, booleans and None not being converted to a string (they keep\ntheir original types). The errors parameter takes any of the values\nthat are accepted by Python’s str() function for its error\nhandling. force_str(s, encoding='utf-8', strings_only=False, errors='strict') is\nidentical to smart_str() in almost all cases. The difference is when the\nfirst argument is a lazy translation instance.\nWhile smart_str() preserves lazy translations, force_str() forces\nthose objects to a string (causing the translation to occur). Normally,\nyou’ll want to use smart_str() . However, force_str() is useful in\ntemplate tags and filters that absolutely must have a string to work with,\nnot just something that can be converted to a string. smart_bytes(s, encoding='utf-8', strings_only=False, errors='strict') is essentially the opposite of smart_str() . It forces the first\nargument to a bytestring. The strings_only parameter has the same\nbehavior as for smart_str() and force_str() . This is\nslightly different semantics from Python’s builtin str() function,\nbut the difference is needed in a few places within Django’s internals. Normally, you’ll only need to use force_str() . Call it as early as\npossible on any input data that might be either a string or a bytestring, and\nfrom then on, you can treat the result as always being a string. URI and IRI handling ¶ Web frameworks have to deal with URLs (which are a type of IRI). One\nrequirement of URLs is that they are encoded using only ASCII characters.\nHowever, in an international environment, you might need to construct a\nURL from an IRI – very loosely speaking, a URI that can contain Unicode characters. Use these functions for quoting and\nconverting an IRI to a URI: The django.utils.encoding.iri_to_uri() function, which implements the\nconversion from IRI to URI as required by RFC 3987 Section 3.1 . The urllib.parse.quote() and urllib.parse.quote_plus() functions from Python’s standard library. These two groups of functions have slightly different purposes, and it’s\nimportant to keep them straight. Normally, you would use quote() on the\nindividual portions of the IRI or URI path so that any reserved characters\nsuch as ‘&’ or ‘%’ are correctly encoded. Then, you apply iri_to_uri() to\nthe full IRI and it converts any non-ASCII characters to the correct encoded\nvalues. Note Technically, it isn’t correct to say that iri_to_uri() implements the\nfull algorithm in the IRI specification. It doesn’t (yet) perform the\ninternational domain name encoding portion of the algorithm. The iri_to_uri() function will not change ASCII characters that are\notherwise permitted in a URL. So, for example, the character ‘%’ is not\nfurther encoded when passed to iri_to_uri() . This means you can pass a\nfull URL to this function and it will not mess up the query string or anything\nlike that. An example might clarify things here: >>> from urllib.parse import quote >>> from django.utils.encoding import iri_to_uri >>> quote ( \"Paris & Orléans\" ) 'Paris%20%26%20Orl%C3%A9ans' >>> iri_to_uri ( \"/favorites/François/ %s \" % quote ( \"Paris & Orléans\" )) '/favorites/Fran%C3%A7ois/Paris%20%26%20Orl%C3%A9ans' If you look carefully, you can see that the portion that was generated by quote() in the second example was not double-quoted when passed to iri_to_uri() . This is a very important and useful feature. It means that\nyou can construct your IRI without worrying about whether it contains\nnon-ASCII characters and then, right at the end, call iri_to_uri() on the\nresult. Similarly, Django provides django.utils.encoding.uri_to_iri() which\nimplements the conversion from URI to IRI as per RFC 3987 Section 3.2 . An example to demonstrate: >>> from django.utils.encoding import uri_to_iri >>> uri_to_iri ( \"/ %E 2 %99% A5 %E 2 %99% A5/?utf8= %E 2%9C%93\" ) '/♥♥/?utf8=✓' >>> uri_to_iri ( \"%A9hello %3F world\" ) '%A9hello%3Fworld' In the first example, the UTF-8 characters are unquoted. In the second, the\npercent-encodings remain unchanged because they lie outside the valid UTF-8\nrange or represent a reserved character. Both iri_to_uri() and uri_to_iri() functions are idempotent, which means the\nfollowing is always true: iri_to_uri ( iri_to_uri ( some_string )) == iri_to_uri ( some_string ) uri_to_iri ( uri_to_iri ( some_string )) == uri_to_iri ( some_string ) So you can safely call it multiple times on the same URI/IRI without risking\ndouble-quoting problems. Models ¶ Because all strings are returned from the database as str objects, model\nfields that are character based (CharField, TextField, URLField, etc.) will\ncontain Unicode values when Django retrieves data from the database. This\nis always the case, even if the data could fit into an ASCII bytestring. You can pass in bytestrings when creating a model or populating a field, and\nDjango will convert it to strings when it needs to. Taking care in get_absolute_url() ¶ URLs can only contain ASCII characters. If you’re constructing a URL from\npieces of data that might be non-ASCII, be careful to encode the results in a\nway that is suitable for a URL. The reverse() function\nhandles this for you automatically. If you’re constructing a URL manually (i.e., not using the reverse() function), you’ll need to take care of the encoding yourself. In this case,\nuse the iri_to_uri() and quote() functions that were documented above . For example: from urllib.parse import quote from django.utils.encoding import iri_to_uri def get_absolute_url ( self ): url = \"/person/ %s /?x=0&y=0\" % quote ( self . location ) return iri_to_uri ( url ) This function returns a correctly encoded URL even if self.location is\nsomething like “Jack visited Paris & Orléans”. (In fact, the iri_to_uri() call isn’t strictly necessary in the above example, because all the\nnon-ASCII characters would have been removed in quoting in the first line.) Templates ¶ Use strings when creating templates manually: from django.template import Template t2 = Template ( \"This is a string template.\" ) But the common case is to read templates from the filesystem. If your template\nfiles are not stored with a UTF-8 encoding, adjust the TEMPLATES setting. The built-in django backend\nprovides the 'file_charset' option to change the encoding used to read\nfiles from disk. The DEFAULT_CHARSET setting controls the encoding of rendered templates.\nThis is set to UTF-8 by default. Template tags and filters ¶ A couple of tips to remember when writing your own template tags and filters: Always return strings from a template tag’s render() method\nand from template filters. Use force_str() in preference to smart_str() in these\nplaces. Tag rendering and filter calls occur as the template is being\nrendered, so there is no advantage to postponing the conversion of lazy\ntranslation objects into strings. It’s easier to work solely with\nstrings at that point. Files ¶ If you intend to allow users to upload files, you must ensure that the\nenvironment used to run Django is configured to work with non-ASCII file names.\nIf your environment isn’t configured correctly, you’ll encounter UnicodeEncodeError exceptions when saving files with file names or content\nthat contains non-ASCII characters. Filesystem support for UTF-8 file names varies and might depend on the\nenvironment. Check your current configuration in an interactive Python shell by\nrunning: import sys sys . getfilesystemencoding () This should output “UTF-8”. The LANG environment variable is responsible for setting the expected\nencoding on Unix platforms. Consult the documentation for your operating system\nand application server for the appropriate syntax and location to set this\nvariable. See the How to use Django with Apache and mod_wsgi for examples. In your development environment, you might need to add a setting to your ~.bashrc analogous to: export LANG = \"en_US.UTF-8\" Form submission ¶ HTML form submission is a tricky area. There’s no guarantee that the\nsubmission will include encoding information, which means the framework might\nhave to guess at the encoding of submitted data. Django adopts a “lazy” approach to decoding form data. The data in an HttpRequest object is only decoded when you access it. In fact, most of\nthe data is not decoded at all. Only the HttpRequest.GET and HttpRequest.POST data structures have any decoding applied to them. Those\ntwo fields will return their members as Unicode data. All other attributes and\nmethods of HttpRequest return data exactly as it was submitted by the\nclient. By default, the DEFAULT_CHARSET setting is used as the assumed encoding\nfor form data. If you need to change this for a particular form, you can set\nthe encoding attribute on an HttpRequest instance. For example: def some_view ( request ): # We know that the data must be encoded as KOI8-R (for some reason). request . encoding = \"koi8-r\" ... You can even change the encoding after having accessed request.GET or request.POST , and all subsequent accesses will use the new encoding. Most developers won’t need to worry about changing form encoding, but this is\na useful feature for applications that talk to legacy systems whose encoding\nyou cannot control. Django does not decode the data of file uploads, because that data is normally\ntreated as collections of bytes, rather than strings. Any automatic decoding\nthere would alter the meaning of the stream of bytes.", "keywords": ["disk", "structures", "characters", "paris%20%26%20orl%c3%a9ans", "frameworks", "urlfield", "variable", "mysql", "error", "developer", "type", "range", "forces", "line", "template", "url", "support", "control", "types", "translation", "systems", "rendering", "setting", "%", "handling", "templates", "documentation", "def", "filter", "problems", "uri_to_iri", "t2", "a9hello%3fworld", "getfilesystemencoding", "mod_wsgi", "utf-8", "specifies", "development", "quote", "encodings", "places", "portion", "reason", "legacy", "iri_to_uri", "file_charset", "uploads", "application", "uri", "a5", "oracle", "ships", "_", "method", "ascii", "shell", "django.utils.encoding.uri_to_iri", "requirement", "person", "behavior", "semantics", "latin1", "unicodeencodeerror", "system", "concept", "values", "bytestring", "str", "pieces", "files", "cases", "query", "preference", "use", "3f", "following", "area", "utility", "encoding", "import", "times", "bytes", "ways", "information", "difference", "meaning", "groups", "translations", "specification", "thinking", "result", "#", "get_absolute_url", "point", "orléans", "fields", "section", "a9hello", "urllib.parse.quote_plus", "way", "self.location", "¶", "decoding", "utf-16", "filters", "default", "option", "manual", "web", "location", "methods", "client", "input", "domain", "accesses", "couple", "sys", "model", "server", "apache", "none", "character", "urls", "django.utils.encoding.iri_to_uri", "format", "render", "purposes", "technically", "results", "urllib.parse.quote", "/person/", "example", "a5/?utf8=", "users", "calls", "n’t", "♥", "email", "bytestrings", "functions", "sqlite", "content", "backend", "internals", "self", "smart_str", "end", "unix", "opposite", "booleans", "case", "argument", "some_string", "stream", "choices", "applications", "fran%c3%a7ois", "numbers", "request", "filesystem", "internationalization", "advantage", "b", "html", "✓", "/?x=0&y=0", "tips", "function", "examples", "smart_bytes(s", "paris", "attribute", "care", "string", "things", "developers", "details", "bit", "e", "data", "encoding='utf-8", "rfc", "françois/", "form", "lookups", "object", "name", "environment", "httprequest", "file", "world", "postgresql", "force_str", "library", "algorithm", "idempotent", "attributes", "submission", "operations", "percent", "errors", "python", "charfield", "get", "conversion", "export", "/?utf8=", "r", "default_charset", "koi8", "configuration", "guarantee", "jack", "exceptions", "api", "unicodedecodeerror", "platforms", "path", "post", "names", "rule", "django", "ergo", "tag", "lang", "fact", "parameter", "document", "tags", "syntax", "set", "assumption", "framework", "approach", "backends", "module", "field", "locale", "textfield", "strings", "database", "django.utils.encoding", "operating", "reverse", "collections", "databases", "unicode", "iri", "instance", "features", "code", "=", "feature", "models", "objects", "members", "call", "will", "errors='strict", "subset", "portions"], "type": "documentation"},
{"title": " and ", "url": "https://docs.djangoproject.com/en/5.1/ref/template-response/", "content": "TemplateResponse and SimpleTemplateResponse ¶ Standard HttpResponse objects are static structures.\nThey are provided with a block of pre-rendered content at time of\nconstruction, and while that content can be modified, it isn’t in a form that\nmakes it easy to perform modifications. However, it can sometimes be beneficial to allow decorators or\nmiddleware to modify a response after it has been constructed by the\nview. For example, you may want to change the template that is used,\nor put additional data into the context. TemplateResponse provides a way to do just that. Unlike basic HttpResponse objects, TemplateResponse objects retain\nthe details of the template and context that was provided by the view to\ncompute the response. The final output of the response is not computed until\nit is needed, later in the response process. SimpleTemplateResponse objects ¶ class SimpleTemplateResponse [source] ¶ Attributes ¶ SimpleTemplateResponse. template_name ¶ The name of the template to be rendered. Accepts a backend-dependent\ntemplate object (such as those returned by get_template() ), the name of a template,\nor a list of template names. Example: ['foo.html', 'path/to/bar.html'] SimpleTemplateResponse. context_data ¶ The context data to be used when rendering the template. It must be a dict . Example: {'foo': 123} SimpleTemplateResponse. rendered_content [source] ¶ The current rendered value of the response content, using the current\ntemplate and context data. SimpleTemplateResponse. is_rendered [source] ¶ A boolean indicating whether the response content has been rendered. Methods ¶ SimpleTemplateResponse. __init__ ( template , context = None , content_type = None , status = None , charset = None , using = None , headers = None ) [source] ¶ Instantiates a SimpleTemplateResponse object with the given template, context, content type, HTTP status, and\ncharset. template A backend-dependent template object (such as those returned by get_template() ), the name of a template,\nor a list of template names. context A dict of values to add to the template context. By default,\nthis is an empty dictionary. content_type The value included in the HTTP Content-Type header, including the\nMIME type specification and the character set encoding. If content_type is specified, then its value is used. Otherwise, 'text/html' is used. status The HTTP status code for the response. charset The charset in which the response will be encoded. If not given it will\nbe extracted from content_type , and if that is unsuccessful, the DEFAULT_CHARSET setting will be used. using The NAME of a template engine to use for\nloading the template. headers A dict of HTTP headers to add to the response. SimpleTemplateResponse. resolve_context ( context ) [source] ¶ Preprocesses context data that will be used for rendering a template.\nAccepts a dict of context data. By default, returns the same dict . Override this method in order to customize the context. SimpleTemplateResponse. resolve_template ( template ) [source] ¶ Resolves the template instance to use for rendering. Accepts a\nbackend-dependent template object (such as those returned by get_template() ), the name of a template,\nor a list of template names. Returns the backend-dependent template object instance to be rendered. Override this method in order to customize template loading. SimpleTemplateResponse. add_post_render_callback () [source] ¶ Add a callback that will be invoked after rendering has taken\nplace. This hook can be used to defer certain processing\noperations (such as caching) until after rendering has occurred. If the SimpleTemplateResponse has already been rendered, the callback will be invoked\nimmediately. When called, callbacks will be passed a single argument – the\nrendered SimpleTemplateResponse instance. If the callback returns a value that is not None , this will be\nused as the response instead of the original response object (and\nwill be passed to the next post rendering callback etc.) SimpleTemplateResponse. render () [source] ¶ Sets response.content to the result obtained by SimpleTemplateResponse.rendered_content , runs all post-rendering\ncallbacks, and returns the resulting response object. render() will only have an effect the first time it is called. On\nsubsequent calls, it will return the result obtained from the first call. TemplateResponse objects ¶ class TemplateResponse [source] ¶ TemplateResponse is a subclass of SimpleTemplateResponse that knows about\nthe current HttpRequest . Methods ¶ TemplateResponse. __init__ ( request , template , context = None , content_type = None , status = None , charset = None , using = None , headers = None ) [source] ¶ Instantiates a TemplateResponse object\nwith the given request, template, context, content type, HTTP status, and\ncharset. request An HttpRequest instance. template A backend-dependent template object (such as those returned by get_template() ), the name of a template,\nor a list of template names. context A dict of values to add to the template context. By default,\nthis is an empty dictionary. content_type The value included in the HTTP Content-Type header, including the\nMIME type specification and the character set encoding. If content_type is specified, then its value is used. Otherwise, 'text/html' is used. status The HTTP status code for the response. charset The charset in which the response will be encoded. If not given it will\nbe extracted from content_type , and if that is unsuccessful, the DEFAULT_CHARSET setting will be used. using The NAME of a template engine to use for\nloading the template. headers A dict of HTTP headers to add to the response. The rendering process ¶ Before a TemplateResponse instance can be\nreturned to the client, it must be rendered. The rendering process takes the\nintermediate representation of template and context, and turns it into the\nfinal byte stream that can be served to the client. There are three circumstances under which a TemplateResponse will be\nrendered: When the TemplateResponse instance is explicitly rendered, using\nthe SimpleTemplateResponse.render() method. When the content of the response is explicitly set by assigning response.content . After passing through template response middleware, but before\npassing through response middleware. A TemplateResponse can only be rendered once. The first call to SimpleTemplateResponse.render() sets the content of the response;\nsubsequent rendering calls do not change the response content. However, when response.content is explicitly assigned, the\nchange is always applied. If you want to force the content to be\nre-rendered, you can reevaluate the rendered content, and assign\nthe content of the response manually: # Set up a rendered TemplateResponse >>> from django.template.response import TemplateResponse >>> t = TemplateResponse ( request , \"original.html\" , {}) >>> t . render () >>> print ( t . content ) Original content # Re-rendering doesn't change content >>> t . template_name = \"new.html\" >>> t . render () >>> print ( t . content ) Original content # Assigning content does change, no render() call required >>> t . content = t . rendered_content >>> print ( t . content ) New content Post-render callbacks ¶ Some operations – such as caching – cannot be performed on an\nunrendered template. They must be performed on a fully complete and\nrendered response. If you’re using middleware, you can do that. Middleware provides\nmultiple opportunities to process a response on exit from a view. If\nyou put behavior in the response middleware, it’s guaranteed to execute\nafter template rendering has taken place. However, if you’re using a decorator, the same opportunities do not\nexist. Any behavior defined in a decorator is handled immediately. To compensate for this (and any other analogous use cases), TemplateResponse allows you to register callbacks that will\nbe invoked when rendering has completed. Using this callback, you can\ndefer critical processing until a point where you can guarantee that\nrendered content will be available. To define a post-render callback, define a function that takes\na single argument – response – and register that function with\nthe template response: from django.template.response import TemplateResponse def my_render_callback ( response ): # Do content-sensitive processing do_post_processing () def my_view ( request ): # Create a response response = TemplateResponse ( request , \"mytemplate.html\" , {}) # Register the callback response . add_post_render_callback ( my_render_callback ) # Return the response return response my_render_callback() will be invoked after the mytemplate.html has been rendered, and will be provided the fully rendered TemplateResponse instance as an argument. If the template has already been rendered, the callback will be\ninvoked immediately. Using TemplateResponse and SimpleTemplateResponse ¶ A TemplateResponse object can be used anywhere that a normal django.http.HttpResponse can be used. It can also be used as an\nalternative to calling render() . For example, the following view returns a TemplateResponse with a\ntemplate and a context containing a queryset: from django.template.response import TemplateResponse def blog_index ( request ): return TemplateResponse ( request , \"entry_list.html\" , { \"entries\" : Entry . objects . all ()} )", "keywords": ["blog_index", "dictionary", "structures", "hook", "type", "template", "opportunities", "httpresponse", "bar.html", "rendering", "setting", "order", "-", "def", "place", "time", "context_data", "middleware", "method", "queryset", "behavior", "values", "cases", "use", "status", "import", "specification", "result", "preprocesses", "#", "point", "standard", "output", "way", "¶", "default", "init", "mime", "decorator", "methods", "client", "original.html", "entries", "modifications", "none", "character", "processing", "change", "block", "callback", "simpletemplateresponse.render", "process", "render", "instantiates", "example", "calls", "n’t", "content_type", "value", "mytemplate.html", "content", "source", "circumstances", "argument", "class", "t", "foo.html", "stream", "alternative", "print", "request", "return", "entry_list.html", "html", "engine", "charset", "dict", "function", "list", "details", "loading", "data", "view", "form", "my_view", "name", "object", "response.content", "httprequest", "header", "exit", "attributes", "operations", "returns", "templateresponse", "response", "rendered_content", "default_charset", "subclass", "callbacks", "get_template", "path", "post", "names", "representation", "text", "foo", "http", "construction", "decorators", "context", "django.http", "resolve_context", "headers", "effect", "instance", "simpletemplateresponse", "=", "code", "objects", "my_render_callback", "entry", "call"], "type": "documentation"},
{"title": "The Django template language: for Python programmers", "url": "https://docs.djangoproject.com/en/5.1/ref/templates/api/", "content": "The Django template language: for Python programmers ¶ This document explains the Django template system from a technical\nperspective – how it works and how to extend it. If you’re looking for\nreference on the language syntax, see The Django template language . It assumes an understanding of templates, contexts, variables, tags, and\nrendering. Start with the introduction to the Django template language if you aren’t familiar with these concepts. Overview ¶ Using the template system in Python is a three-step process: You configure an Engine . You compile template code into a Template . You render the template with a Context . Django projects generally rely on the high level, backend agnostic APIs for each of these steps instead of the template system’s\nlower level APIs: For each DjangoTemplates backend\nin the TEMPLATES setting, Django instantiates an Engine . DjangoTemplates wraps Engine and adapts it to the common template backend API. The django.template.loader module provides functions such as get_template() for loading templates. They\nreturn a django.template.backends.django.Template which wraps the\nactual django.template.Template . The Template obtained in the previous step has a render() method which\nmarshals a context and possibly a request into a Context and\ndelegates the rendering to the underlying Template . Configuring an engine ¶ If you are using the DjangoTemplates backend, this probably isn’t the documentation you’re looking for. An instance\nof the Engine class described below is accessible using the engine attribute of that backend and any attribute defaults mentioned below are\noverridden by what’s passed by DjangoTemplates . class Engine ( dirs = None , app_dirs = False , context_processors = None , debug = False , loaders = None , string_if_invalid = '' , file_charset = 'utf-8' , libraries = None , builtins = None , autoescape = True ) [source] ¶ When instantiating an Engine all arguments must be passed as keyword\narguments: dirs is a list of directories where the engine should look for\ntemplate source files. It is used to configure filesystem.Loader . It defaults to an empty list. app_dirs only affects the default value of loaders . See below. It defaults to False . autoescape controls whether HTML autoescaping is enabled. It defaults to True . Warning Only set it to False if you’re rendering non-HTML templates! context_processors is a list of dotted Python paths to callables\nthat are used to populate the context when a template is rendered with a\nrequest. These callables take a request object as their argument and\nreturn a dict of items to be merged into the context. It defaults to an empty list. See RequestContext for more information. debug is a boolean that turns on/off template debug mode. If it is True , the template engine will store additional debug information\nwhich can be used to display a detailed report for any exception raised\nduring template rendering. It defaults to False . loaders is a list of template loader classes, specified as strings.\nEach Loader class knows how to import templates from a particular\nsource. Optionally, a tuple can be used instead of a string. The first\nitem in the tuple should be the Loader class name, subsequent items\nare passed to the Loader during initialization. It defaults to a list containing: 'django.template.loaders.filesystem.Loader' 'django.template.loaders.app_directories.Loader' if and only if app_dirs is True . These loaders are then wrapped in django.template.loaders.cached.Loader . See Loader types for details. string_if_invalid is the output, as a string, that the template\nsystem should use for invalid (e.g. misspelled) variables. It defaults to the empty string. See How invalid variables are handled for details. file_charset is the charset used to read template files on disk. It defaults to 'utf-8' . 'libraries' : A dictionary of labels and dotted Python paths of template\ntag modules to register with the template engine. This is used to add new\nlibraries or provide alternate labels for existing ones. For example: Engine ( libraries = { \"myapp_tags\" : \"path.to.myapp.tags\" , \"admin.urls\" : \"django.contrib.admin.templatetags.admin_urls\" , }, ) Libraries can be loaded by passing the corresponding dictionary key to\nthe {% load %} tag. 'builtins' : A list of dotted Python paths of template tag modules to\nadd to built-ins . For example: Engine ( builtins = [ \"myapp.builtins\" ], ) Tags and filters from built-in libraries can be used without first calling\nthe {% load %} tag. static Engine. get_default () [source] ¶ Returns the underlying Engine from the first configured DjangoTemplates engine. Raises ImproperlyConfigured if no engines are\nconfigured. It’s required for preserving APIs that rely on a globally available,\nimplicitly configured engine. Any other use is strongly discouraged. Engine. from_string ( template_code ) [source] ¶ Compiles the given template code and returns a Template object. Engine. get_template ( template_name ) [source] ¶ Loads a template with the given name, compiles it and returns a Template object. Engine. select_template ( template_name_list ) [source] ¶ Like get_template() , except it takes a list of names\nand returns the first template that was found. Loading a template ¶ The recommended way to create a Template is by calling the factory\nmethods of the Engine : get_template() , select_template() and from_string() . In a Django project where the TEMPLATES setting defines a DjangoTemplates engine, it’s\npossible to instantiate a Template directly. If more than one DjangoTemplates engine is defined,\nthe first one will be used. class Template [source] ¶ This class lives at django.template.Template . The constructor takes\none argument — the raw template code: from django.template import Template template = Template ( \"My name is {{ my_name }}.\" ) Behind the scenes The system only parses your raw template code once – when you create the Template object. From then on, it’s stored internally as a tree\nstructure for performance. Even the parsing itself is quite fast. Most of the parsing happens via a\nsingle call to a single, short, regular expression. Rendering a context ¶ Once you have a compiled Template object, you can render a context\nwith it. You can reuse the same template to render it several times with\ndifferent contexts. class Context ( dict_ = None , autoescape = True , use_l10n = None , use_tz = None ) [source] ¶ The constructor of django.template.Context takes an optional argument —\na dictionary mapping variable names to variable values. Three optional keyword arguments can also be specified: autoescape controls whether HTML autoescaping is enabled. It defaults to True . Warning Only set it to False if you’re rendering non-HTML templates! use_l10n overrides whether values will be localized by default. If\nset to True numbers and dates will be formatted based on locale. It defaults to None . See Controlling localization in templates for details. use_tz overrides whether dates are converted to the local time when\nrendered in a template. If set to True all dates will be rendered\nusing the local timezone. This takes precedence over USE_TZ . It defaults to None . See Time zone aware output in templates for details. For example usage, see Playing with Context objects below. Template. render ( context ) [source] ¶ Call the Template object’s render() method with a Context to “fill” the template: >>> from django.template import Context , Template >>> template = Template ( \"My name is {{ my_name }}.\" ) >>> context = Context ({ \"my_name\" : \"Adrian\" }) >>> template . render ( context ) \"My name is Adrian.\" >>> context = Context ({ \"my_name\" : \"Dolores\" }) >>> template . render ( context ) \"My name is Dolores.\" Variables and lookups ¶ Variable names must consist of any letter (A-Z), any digit (0-9), an underscore\n(but they must not start with an underscore) or a dot. Dots have a special meaning in template rendering. A dot in a variable name\nsignifies a lookup . Specifically, when the template system encounters a\ndot in a variable name, it tries the following lookups, in this order: Dictionary lookup. Example: foo[\"bar\"] Attribute lookup. Example: foo.bar List-index lookup. Example: foo[bar] Note that “bar” in a template expression like {{ foo.bar }} will be\ninterpreted as a literal string and not using the value of the variable “bar”,\nif one exists in the template context. The template system uses the first lookup type that works. It’s short-circuit\nlogic. Here are a few examples: >>> from django.template import Context , Template >>> t = Template ( \"My name is {{ person.first_name }}.\" ) >>> d = { \"person\" : { \"first_name\" : \"Joe\" , \"last_name\" : \"Johnson\" }} >>> t . render ( Context ( d )) \"My name is Joe.\" >>> class PersonClass : ... pass ... >>> p = PersonClass () >>> p . first_name = \"Ron\" >>> p . last_name = \"Nasty\" >>> t . render ( Context ({ \"person\" : p })) \"My name is Ron.\" >>> t = Template ( \"The first stooge in the list is {{ stooges.0 }}.\" ) >>> c = Context ({ \"stooges\" : [ \"Larry\" , \"Curly\" , \"Moe\" ]}) >>> t . render ( c ) \"The first stooge in the list is Larry.\" If any part of the variable is callable, the template system will try calling\nit. Example: >>> class PersonClass2 : ... def name ( self ): ... return \"Samantha\" ... >>> t = Template ( \"My name is {{ person.name }}.\" ) >>> t . render ( Context ({ \"person\" : PersonClass2 })) \"My name is Samantha.\" Callable variables are slightly more complex than variables which only require\nstraight lookups. Here are some things to keep in mind: If the variable raises an exception when called, the exception will be\npropagated, unless the exception has an attribute silent_variable_failure whose value is True . If the exception does have a silent_variable_failure attribute whose value is True , the variable will render as the value of the engine’s string_if_invalid configuration option (an empty string, by default).\nExample: >>> t = Template ( \"My name is {{ person.first_name }}.\" ) >>> class PersonClass3 : ... def first_name ( self ): ... raise AssertionError ( \"foo\" ) ... >>> p = PersonClass3 () >>> t . render ( Context ({ \"person\" : p })) Traceback (most recent call last): ... AssertionError : foo >>> class SilentAssertionError ( Exception ): ... silent_variable_failure = True ... >>> class PersonClass4 : ... def first_name ( self ): ... raise SilentAssertionError ... >>> p = PersonClass4 () >>> t . render ( Context ({ \"person\" : p })) \"My name is .\" Note that django.core.exceptions.ObjectDoesNotExist , which is the\nbase class for all Django database API DoesNotExist exceptions, has silent_variable_failure = True . So if you’re using Django templates\nwith Django model objects, any DoesNotExist exception will fail\nsilently. A variable can only be called if it has no required arguments. Otherwise,\nthe system will return the value of the engine’s string_if_invalid option. There can be side effects when calling some variables, and it’d be either\nfoolish or a security hole to allow the template system to access them. A good example is the delete() method on\neach Django model object. The template system shouldn’t be allowed to do\nsomething like this: I will now delete this valuable data. {{ data.delete }} To prevent this, set an alters_data attribute on the callable\nvariable. The template system won’t call a variable if it has alters_data=True set, and will instead replace the variable with string_if_invalid , unconditionally.  The\ndynamically-generated delete() and save() methods on Django model objects get alters_data=True automatically. Example: def sensitive_function ( self ): self . database_record . delete () sensitive_function . alters_data = True Occasionally you may want to turn off this feature for other reasons,\nand tell the template system to leave a variable uncalled no matter\nwhat.  To do so, set a do_not_call_in_templates attribute on the\ncallable with the value True .  The template system then will act as\nif your variable is not callable (allowing you to access attributes of\nthe callable, for example). How invalid variables are handled ¶ Generally, if a variable doesn’t exist, the template system inserts the value\nof the engine’s string_if_invalid configuration option, which is set to '' (the empty string) by default. Filters that are applied to an invalid variable will only be applied if string_if_invalid is set to '' (the empty string). If string_if_invalid is set to any other value, variable filters will be\nignored. This behavior is slightly different for the if , for and regroup template tags. If an invalid variable is provided to one of these template\ntags, the variable will be interpreted as None . Filters are always\napplied to invalid variables within these template tags. If string_if_invalid contains a '%s' , the format marker will be\nreplaced with the name of the invalid variable. For debug purposes only! While string_if_invalid can be a useful debugging tool, it is a bad\nidea to turn it on as a ‘development default’. Many templates, including some of Django’s, rely upon the silence of the\ntemplate system when a nonexistent variable is encountered. If you assign a\nvalue other than '' to string_if_invalid , you will experience\nrendering problems with these templates and sites. Generally, string_if_invalid should only be enabled in order to debug\na specific template problem, then cleared once debugging is complete. Built-in variables ¶ Every context contains True , False and None . As you would expect,\nthese variables resolve to the corresponding Python objects. Limitations with string literals ¶ Django’s template language has no way to escape the characters used for its own\nsyntax. For example, the templatetag tag is required if you need to\noutput character sequences like {% and %} . A similar issue exists if you want to include these sequences in template filter\nor tag arguments. For example, when parsing a block tag, Django’s template\nparser looks for the first occurrence of %} after a {% . This prevents\nthe use of \"%}\" as a string literal. For example, a TemplateSyntaxError will be raised for the following expressions: {% include \"template.html\" tvar = \"Some string literal with %} in it.\" %} {% with tvar = \"Some string literal with %} in it.\" %}{% endwith %} The same issue can be triggered by using a reserved sequence in filter\narguments: {{ some.variable | default :\"}}\" }} If you need to use strings with these sequences, store them in template\nvariables or use a custom template tag or filter to workaround the limitation. Playing with Context objects ¶ Most of the time, you’ll instantiate Context objects by passing in a\nfully-populated dictionary to Context() . But you can add and delete items\nfrom a Context object once it’s been instantiated, too, using standard\ndictionary syntax: >>> from django.template import Context >>> c = Context ({ \"foo\" : \"bar\" }) >>> c [ \"foo\" ] 'bar' >>> del c [ \"foo\" ] >>> c [ \"foo\" ] Traceback (most recent call last): ... KeyError : 'foo' >>> c [ \"newvariable\" ] = \"hello\" >>> c [ \"newvariable\" ] 'hello' Context. get ( key , otherwise = None ) ¶ Returns the value for key if key is in the context, else returns otherwise . Context. setdefault ( key , default = None ) ¶ If key is in the context, returns its value. Otherwise inserts key with a value of default and returns default . Context. pop () ¶ Context. push () ¶ exception ContextPopException [source] ¶ A Context object is a stack. That is, you can push() and pop() it.\nIf you pop() too much, it’ll raise django.template.ContextPopException : >>> c = Context () >>> c [ \"foo\" ] = \"first level\" >>> c . push () {} >>> c [ \"foo\" ] = \"second level\" >>> c [ \"foo\" ] 'second level' >>> c . pop () {'foo': 'second level'} >>> c [ \"foo\" ] 'first level' >>> c [ \"foo\" ] = \"overwritten\" >>> c [ \"foo\" ] 'overwritten' >>> c . pop () Traceback (most recent call last): ... ContextPopException You can also use push() as a context manager to ensure a matching pop() is called. >>> c = Context () >>> c [ \"foo\" ] = \"first level\" >>> with c . push (): ... c [ \"foo\" ] = \"second level\" ... c [ \"foo\" ] ... 'second level' >>> c [ \"foo\" ] 'first level' All arguments passed to push() will be passed to the dict constructor\nused to build the new context level. >>> c = Context () >>> c [ \"foo\" ] = \"first level\" >>> with c . push ( foo = \"second level\" ): ... c [ \"foo\" ] ... 'second level' >>> c [ \"foo\" ] 'first level' Context. update ( other_dict ) [source] ¶ In addition to push() and pop() , the Context object also defines an update() method. This works like push() but takes a dictionary as an argument and pushes that dictionary onto\nthe stack instead of an empty one. >>> c = Context () >>> c [ \"foo\" ] = \"first level\" >>> c . update ({ \"foo\" : \"updated\" }) {'foo': 'updated'} >>> c [ \"foo\" ] 'updated' >>> c . pop () {'foo': 'updated'} >>> c [ \"foo\" ] 'first level' Like push() , you can use update() as a context manager to ensure a\nmatching pop() is called. >>> c = Context () >>> c [ \"foo\" ] = \"first level\" >>> with c . update ({ \"foo\" : \"second level\" }): ... c [ \"foo\" ] ... 'second level' >>> c [ \"foo\" ] 'first level' Using a Context as a stack comes in handy in some custom template\ntags . Context. flatten () ¶ Using flatten() method you can get whole Context stack as one dictionary\nincluding builtin variables. >>> c = Context () >>> c [ \"foo\" ] = \"first level\" >>> c . update ({ \"bar\" : \"second level\" }) {'bar': 'second level'} >>> c . flatten () {'True': True, 'None': None, 'foo': 'first level', 'False': False, 'bar': 'second level'} A flatten() method is also internally used to make Context objects comparable. >>> c1 = Context () >>> c1 [ \"foo\" ] = \"first level\" >>> c1 [ \"bar\" ] = \"second level\" >>> c2 = Context () >>> c2 . update ({ \"bar\" : \"second level\" , \"foo\" : \"first level\" }) {'foo': 'first level', 'bar': 'second level'} >>> c1 == c2 True Result from flatten() can be useful in unit tests to compare Context against dict : class ContextTest ( unittest . TestCase ): def test_against_dictionary ( self ): c1 = Context () c1 [ \"update\" ] = \"value\" self . assertEqual ( c1 . flatten (), { \"True\" : True , \"None\" : None , \"False\" : False , \"update\" : \"value\" , }, ) Using RequestContext ¶ class RequestContext ( request , dict_ = None , processors = None , use_l10n = None , use_tz = None , autoescape = True ) [source] ¶ Django comes with a special Context class, django.template.RequestContext , that acts slightly differently from the\nnormal django.template.Context . The first difference is that it takes an HttpRequest as its first argument. For example: c = RequestContext ( request , { \"foo\" : \"bar\" , }, ) The second difference is that it automatically populates the context with a\nfew variables, according to the engine’s context_processors configuration\noption. The context_processors option is a list of callables – called context\nprocessors – that take a request object as their argument and return a\ndictionary of items to be merged into the context. In the default generated\nsettings file, the default template engine contains the following context\nprocessors: [ \"django.template.context_processors.debug\" , \"django.template.context_processors.request\" , \"django.contrib.auth.context_processors.auth\" , \"django.contrib.messages.context_processors.messages\" , ] In addition to these, RequestContext always enables 'django.template.context_processors.csrf' .  This is a security related\ncontext processor required by the admin and other contrib apps, and, in case\nof accidental misconfiguration, it is deliberately hardcoded in and cannot be\nturned off in the context_processors option. Each processor is applied in order. That means, if one processor adds a\nvariable to the context and a second processor adds a variable with the same\nname, the second will override the first. The default processors are explained\nbelow. When context processors are applied Context processors are applied on top of context data. This means that a\ncontext processor may overwrite variables you’ve supplied to your Context or RequestContext , so take care to avoid\nvariable names that overlap with those supplied by your context\nprocessors. If you want context data to take priority over context processors, use the\nfollowing pattern: from django.template import RequestContext request_context = RequestContext ( request ) request_context . push ({ \"my_name\" : \"Adrian\" }) Django does this to allow context data to override context processors in\nAPIs such as render() and TemplateResponse . Also, you can give RequestContext a list of additional processors,\nusing the optional, third positional argument, processors . In this\nexample, the RequestContext instance gets an ip_address variable: from django.http import HttpResponse from django.template import RequestContext , Template def ip_address_processor ( request ): return { \"ip_address\" : request . META [ \"REMOTE_ADDR\" ]} def client_ip_view ( request ): template = Template ( \"{{ title }}: {{ ip_address }}\" ) context = RequestContext ( request , { \"title\" : \"Your IP Address\" , }, [ ip_address_processor ], ) return HttpResponse ( template . render ( context )) Built-in template context processors ¶ Here’s what each of the built-in processors does: django.contrib.auth.context_processors.auth ¶ auth ( request ) [source] ¶ If this processor is enabled, every RequestContext will contain these\nvariables: user – An auth.User instance representing the currently\nlogged-in user (or an AnonymousUser instance, if the client isn’t\nlogged in). perms – An instance of django.contrib.auth.context_processors.PermWrapper , representing the\npermissions that the currently logged-in user has. django.template.context_processors.debug ¶ debug ( request ) [source] ¶ If this processor is enabled, every RequestContext will contain these two\nvariables – but only if your DEBUG setting is set to True and\nthe request’s IP address ( request.META['REMOTE_ADDR'] ) is in the INTERNAL_IPS setting: debug – True . You can use this in templates to test whether\nyou’re in DEBUG mode. sql_queries – A list of {'sql': ..., 'time': ...} dictionaries,\nrepresenting every SQL query that has happened so far during the request\nand how long it took. The list is in order by database alias and then by\nquery. It’s lazily generated on access. django.template.context_processors.i18n ¶ i18n ( request ) [source] ¶ If this processor is enabled, every RequestContext will contain these\nvariables: LANGUAGES – The value of the LANGUAGES setting. LANGUAGE_BIDI – True if the current language is a right-to-left\nlanguage, e.g. Hebrew, Arabic. False if it’s a left-to-right language,\ne.g. English, French, German. LANGUAGE_CODE – request.LANGUAGE_CODE , if it exists. Otherwise,\nthe value of the LANGUAGE_CODE setting. See i18n template tags for template tags that\ngenerate the same values. django.template.context_processors.media ¶ If this processor is enabled, every RequestContext will contain a variable MEDIA_URL , providing the value of the MEDIA_URL setting. django.template.context_processors.static ¶ static ( request ) [source] ¶ If this processor is enabled, every RequestContext will contain a variable STATIC_URL , providing the value of the STATIC_URL setting. django.template.context_processors.csrf ¶ This processor adds a token that is needed by the csrf_token template\ntag for protection against Cross Site Request Forgeries . django.template.context_processors.request ¶ If this processor is enabled, every RequestContext will contain a variable request , which is the current HttpRequest . django.template.context_processors.tz ¶ tz ( request ) [source] ¶ If this processor is enabled, every RequestContext will contain a variable TIME_ZONE , providing the name of the currently active time zone. django.contrib.messages.context_processors.messages ¶ If this processor is enabled, every RequestContext will contain these two\nvariables: messages – A list of messages (as strings) that have been set\nvia the messages framework . DEFAULT_MESSAGE_LEVELS – A mapping of the message level names to their numeric value . Writing your own context processors ¶ A context processor has a simple interface: It’s a Python function that takes\none argument, an HttpRequest object, and returns a\ndictionary that gets added to the template context. For example, to add the DEFAULT_FROM_EMAIL setting to every\ncontext: from django.conf import settings def from_email ( request ): return { \"DEFAULT_FROM_EMAIL\" : settings . DEFAULT_FROM_EMAIL , } Custom context processors can live anywhere in your code base. All Django\ncares about is that your custom context processors are pointed to by the 'context_processors' option in your TEMPLATES setting — or the context_processors argument of Engine if you’re\nusing it directly. Loading templates ¶ Generally, you’ll store templates in files on your filesystem rather than\nusing the low-level Template API yourself. Save\ntemplates in a directory specified as a template directory . Django searches for template directories in a number of places, depending on\nyour template loading settings (see “Loader types” below), but the most basic\nway of specifying template directories is by using the DIRS option. The DIRS option ¶ Tell Django what your template directories are by using the DIRS option in the TEMPLATES setting in your settings\nfile — or the dirs argument of Engine . This\nshould be set to a list of strings that contain full paths to your template\ndirectories: TEMPLATES = [ { \"BACKEND\" : \"django.template.backends.django.DjangoTemplates\" , \"DIRS\" : [ \"/home/html/templates/lawrence.com\" , \"/home/html/templates/default\" , ], }, ] Your templates can go anywhere you want, as long as the directories and\ntemplates are readable by the web server. They can have any extension you want,\nsuch as .html or .txt , or they can have no extension at all. Note that these paths should use Unix-style forward slashes, even on Windows. Loader types ¶ By default, Django uses a filesystem-based template loader, but Django comes\nwith a few other template loaders, which know how to load templates from other\nsources. Some of these other loaders are disabled by default, but you can activate them\nby adding a 'loaders' option to your DjangoTemplates backend in the TEMPLATES setting or passing a loaders argument to Engine . loaders should be a list of strings or\ntuples, where each represents a template loader class. Here are the template\nloaders that come with Django: django.template.loaders.filesystem.Loader class filesystem. Loader ¶ Loads templates from the filesystem, according to DIRS . This loader is enabled by default. However it won’t find any templates\nuntil you set DIRS to a non-empty list: TEMPLATES = [ { \"BACKEND\" : \"django.template.backends.django.DjangoTemplates\" , \"DIRS\" : [ BASE_DIR / \"templates\" ], } ] You can also override 'DIRS' and specify specific directories for a\nparticular filesystem loader: TEMPLATES = [ { \"BACKEND\" : \"django.template.backends.django.DjangoTemplates\" , \"OPTIONS\" : { \"loaders\" : [ ( \"django.template.loaders.filesystem.Loader\" , [ BASE_DIR / \"templates\" ], ), ], }, } ] django.template.loaders.app_directories.Loader class app_directories. Loader ¶ Loads templates from Django apps on the filesystem. For each app in INSTALLED_APPS , the loader looks for a templates subdirectory. If the directory exists, Django looks for templates in there. This means you can store templates with your individual apps. This also\nhelps to distribute Django apps with default templates. For example, for this setting: INSTALLED_APPS = [ \"myproject.polls\" , \"myproject.music\" ] …then get_template('foo.html') will look for foo.html in these\ndirectories, in this order: /path/to/myproject/polls/templates/ /path/to/myproject/music/templates/ … and will use the one it finds first. The order of INSTALLED_APPS is significant! For example, if you\nwant to customize the Django admin, you might choose to override the\nstandard admin/base_site.html template, from django.contrib.admin ,\nwith your own admin/base_site.html in myproject.polls . You must\nthen make sure that your myproject.polls comes before django.contrib.admin in INSTALLED_APPS , otherwise django.contrib.admin ’s will be loaded first and yours will be ignored. Note that the loader performs an optimization when it first runs:\nit caches a list of which INSTALLED_APPS packages have a templates subdirectory. You can enable this loader by setting APP_DIRS to True : TEMPLATES = [ { \"BACKEND\" : \"django.template.backends.django.DjangoTemplates\" , \"APP_DIRS\" : True , } ] django.template.loaders.cached.Loader class cached. Loader ¶ While the Django template system is quite fast, if it needs to read and\ncompile your templates every time they’re rendered, the overhead from that\ncan add up. You configure the cached template loader with a list of other loaders that\nit should wrap. The wrapped loaders are used to locate unknown templates\nwhen they’re first encountered. The cached loader then stores the compiled Template in memory. The cached Template instance is returned for\nsubsequent requests to load the same template. This loader is automatically enabled if OPTIONS['loaders'] isn’t specified. You can manually specify template caching with some custom template loaders\nusing settings like this: TEMPLATES = [ { \"BACKEND\" : \"django.template.backends.django.DjangoTemplates\" , \"DIRS\" : [ BASE_DIR / \"templates\" ], \"OPTIONS\" : { \"loaders\" : [ ( \"django.template.loaders.cached.Loader\" , [ \"django.template.loaders.filesystem.Loader\" , \"django.template.loaders.app_directories.Loader\" , \"path.to.custom.Loader\" , ], ), ], }, } ] Note All of the built-in Django template tags are safe to use with the\ncached loader, but if you’re using custom template tags that come from\nthird party packages, or that you wrote yourself, you should ensure\nthat the Node implementation for each tag is thread-safe. For more\ninformation, see template tag thread safety considerations . django.template.loaders.locmem.Loader class locmem. Loader ¶ Loads templates from a Python dictionary. This is useful for testing. This loader takes a dictionary of templates as its first argument: TEMPLATES = [ { \"BACKEND\" : \"django.template.backends.django.DjangoTemplates\" , \"OPTIONS\" : { \"loaders\" : [ ( \"django.template.loaders.locmem.Loader\" , { \"index.html\" : \"content here\" , }, ), ], }, } ] This loader is disabled by default. Django uses the template loaders in order according to the 'loaders' option. It uses each loader until a loader finds a match. Custom loaders ¶ It’s possible to load templates from additional sources using custom template\nloaders. Custom Loader classes should inherit from django.template.loaders.base.Loader and define the get_contents() and get_template_sources() methods. Loader methods ¶ class Loader [source] ¶ Loads templates from a given source, such as the filesystem or a database. get_template_sources ( template_name ) [source] ¶ A method that takes a template_name and yields Origin instances for each possible\nsource. For example, the filesystem loader may receive 'index.html' as a template_name argument.  This method would yield origins for the\nfull path of index.html as it appears in each template directory\nthe loader looks at. The method doesn’t need to verify that the template exists at a given\npath, but it should ensure the path is valid. For instance, the\nfilesystem loader makes sure the path lies under a valid template\ndirectory. get_contents ( origin ) ¶ Returns the contents for a template given a Origin instance. This is where a filesystem loader would read contents from the\nfilesystem, or a database loader would read from the database. If a\nmatching template doesn’t exist, this should raise a TemplateDoesNotExist error. get_template ( template_name , skip = None ) [source] ¶ Returns a Template object for a given template_name by looping\nthrough results from get_template_sources() and calling get_contents() . This returns the first matching template. If no\ntemplate is found, TemplateDoesNotExist is\nraised. The optional skip argument is a list of origins to ignore when\nextending templates. This allow templates to extend other templates of\nthe same name. It also used to avoid recursion errors. In general, it is enough to define get_template_sources() and get_contents() for custom template loaders. get_template() will usually not need to be overridden. Building your own For examples, read the source code for Django’s built-in loaders . Template origin ¶ Templates have an origin containing attributes depending on the source\nthey are loaded from. class Origin ( name , template_name = None , loader = None ) [source] ¶ name ¶ The path to the template as returned by the template loader.\nFor loaders that read from the file system, this is the full\npath to the template. If the template is instantiated directly rather than through a\ntemplate loader, this is a string value of <unknown_source> . template_name ¶ The relative path to the template as passed into the\ntemplate loader. If the template is instantiated directly rather than through a\ntemplate loader, this is None . loader ¶ The template loader instance that constructed this Origin . If the template is instantiated directly rather than through a\ntemplate loader, this is None . django.template.loaders.cached.Loader requires all of its\nwrapped loaders to set this attribute, typically by instantiating\nthe Origin with loader=self .", "keywords": ["django.template.context_processors.static", "django.template.context_processors.request", "default_from_email", "variable", "path.to.myapp.tags", "type", "httpresponse", "marker", "def", "scenes", "limitation", ".html", "settings", "moe", "perspective", "overview", "classes", "tell", "music", "options['loaders", "myapp.builtins", "method", "party", "default_message_levels", "testing", "person", "directories", "recursion", "performance", "django.template.loaders.cached", "boolean", "labels", "use", "django.template.loaders.filesystem", "messages", "right", "callables", "difference", "items", "project", "c2", "way", "yields", "default", "filters", "template_name_list", "sql_queries", "option", "keyerror", "media_url", "client", "dolores", "block", "contrib", "top", "mind", "hebrew", "base_site.html", "silent_variable_failure", "tool", "parser", "tree", "backend", "autoescaping", "self", "argument", "t", "localization", "setdefault", "filesystem", "autoescape", "tuple", "windows", "dict", "cross", "forgeries", "templatesyntaxerror", "pop", "steps", "nasty", "django.contrib.messages.context_processors.messages", "name", "pattern", "ron", "first_name", "admin", "python", "addition", "instances", "constructor", "johnson", "django.template.context_processors.media", "lookup", "defines", "understanding", "get_template", "get_template_sources", "tag", "|", "address", "token", "ip_address_processor", "index.html", "true", "test_against_dictionary", "framework", "structure", "joe", "locale", "requests", "processor", "logic", "feature", "get_default", "key", "internal_ips", "alias", "english", "zone", "dictionary", "permissions", "characters", "template.html", "doesnotexist", "error", "template", "improperlyconfigured", "django.template.context_processors.debug", "debug", "literals", "request_context", "/home", "rendering", "%", "setting", "static", "order", "anonymoususer", "documentation", "development", "style", "get_contents", "django.contrib.auth.context_processors", "behavior", "system", "mode", "modules", "files", "query", "import", "delegates", "bar", "django.template.context_processors.tz", "information", "paths", "personclass", "result", "dots", "idea", "limitations", "¶", "my_name", "web", "path.to.custom", "server", "sites", "precedence", "format", "render", "example", "parsing", "unit", "djangotemplates", "functions", "value", "source", "person.name", "languages", "introduction", "optimization", "c", "html", "from_string", "foo[\"bar", "examples", "contexttest", "things", "django.template.loader", "locmem", "details", "silence", "foo.bar", "object", "httprequest", "templatedoesnotexist", "foo[bar", "one", "attributes", "from_email", "sources", "returns", "/path", "issue", "matter", "initialization", "sequence", "api", "dates", "projects", "level", "alters_data", "django", "permwrapper", "message", "thread", "syntax", "compiles", "contents", "strings", "use_l10n", "requestcontext", "libraries", "arabic", "personclass4", "=", "factory", "objects", "language", "defaults", "implementation", "index", "match", "interface", "myapp_tags", "django.contrib.auth.context_processors.auth", "do_not_call_in_templates", "templates", "places", "select_template", "file_charset", "controls", "time", "exception", "letter", "loader", "delete", "i18n", "app_directories", "site", "d", "larry", "manager", "stooge", "problem", "circuit", "meaning", "occurrence", "load", "ins", "apis", "output", "hole", "static_url", "testcase", "custom", "methods", "keyword", "update", "none", "variables", "base", "process", "access", "string_if_invalid", "considerations", "dot", "content", "misconfiguration", "unix", "foo.html", "request", "controlling", "engine", "mapping", "admin.urls", "tvar", "protection", "a", "data", "polls", "matching", "effects", "django.template.loaders.base", "lookups", "options", "django.contrib.admin.templatetags.admin_urls", "node", "some.variable", "’s", "context_processors", "templateresponse", "reasons", "s", "configuration", "sql", "sequences", "path", "c1", "directory", "push", "auth", "dirs", "module", "apps", "arguments", "packages", "last_name", "context", "memory", "get_template('foo.html", "myproject", "security", "django.template.context_processors.csrf", "template_code", "title", "call", "processors", "django.contrib.admin", "disk", "perms", "slashes", "app_dirs", "types", "p", "filter", "problems", "stack", "client_ip_view", "utf-8", "false", "_", "tests", "ip_address", "values", "times", "item", "stooges.0", "assertionerror", "contexts", "safety", "underscore", "sensitive_function", "ip", "django.template", "timezone", "builtins", "usage", "z", "model", "character", "origin", "purposes", "results", "use_tz", "n’t", "samantha", "templatetag", "overwritten", "installed_apps", "loads", "case", "class", "skip", "number", "numbers", "return", "tuples", "digit", "report", "charset", "attribute", "ones", "function", "care", "string", "list", "stooges", "concepts", "loading", "app", "tz", "extension", "priority", "user", "part", "file", "errors", "dictionaries", "traceback", "template_name", "person.first_name", "exceptions", "origins", "names", "expressions", "django.template.loaders.app_directories", "contextpopexception", "document", "tags", "personclass3", "set", "curly", "other_dict", "foo", "database", "loaders", "expression", "myproject.polls", "reference", "instance", "engines", "code", "overhead", "del", "flatten", "objectdoesnotexist", "step", "silentassertionerror"], "type": "documentation"},
{"title": "Built-in template tags and filters", "url": "https://docs.djangoproject.com/en/5.1/ref/templates/builtins/", "content": "Built-in template tags and filters ¶ This document describes Django’s built-in template tags and filters. It is\nrecommended that you use the automatic documentation , if available, as this will also include\ndocumentation for any custom tags or filters installed. Built-in tag reference ¶ autoescape ¶ Controls the current auto-escaping behavior. This tag takes either on or off as an argument and that determines whether auto-escaping is in effect\ninside the block. The block is closed with an endautoescape ending tag. Sample usage: {% autoescape on %} {{ body }} {% endautoescape %} When auto-escaping is in effect, all content derived from variables has HTML\nescaping applied before placing the result into the output (but after any\nfilters are applied). This is equivalent to manually applying the escape filter to each variable. The only exceptions are variables already marked as “safe” from escaping.\nVariables could be marked as “safe” by the code which populated the variable,\nby applying the safe or escape filters, or because it’s\nthe result of a previous filter that marked the string as “safe”. Within the scope of disabled auto-escaping, chaining filters, including escape , may cause unexpected (but documented) results such as the\nfollowing: {% autoescape off %} {{ my_list | join :\", \" | escape }} {% endautoescape %} The above code will output the joined elements of my_list unescaped. This\nis because the filter chaining sequence executes first join on my_list (without applying escaping to each item since autoescape is off ), marking the result as safe. Subsequently, this safe result will be\nfed to escape filter, which does not apply a second round of\nescaping. In order to properly escape every element in a sequence, use the escapeseq filter: {% autoescape off %} {{ my_list | escapeseq | join :\", \" }} {% endautoescape %} block ¶ Defines a block that can be overridden by child templates. See Template inheritance for more information. comment ¶ Ignores everything between {% comment %} and {% endcomment %} .\nAn optional note may be inserted in the first tag. For example, this is\nuseful when commenting out code for documenting why the code was disabled. Sample usage: < p > Rendered text with {{ pub_date | date :\"c\" }} </ p > {% comment \"Optional note\" %} < p > Commented out text with {{ create_date | date :\"c\" }} </ p > {% endcomment %} comment tags cannot be nested. csrf_token ¶ This tag is used for CSRF protection, as described in the documentation for Cross Site Request Forgeries . cycle ¶ Produces one of its arguments each time this tag is encountered. The first\nargument is produced on the first encounter, the second argument on the second\nencounter, and so forth. Once all arguments are exhausted, the tag cycles to\nthe first argument and produces it again. This tag is particularly useful in a loop: {% for o in some_list %} < tr class = \" {% cycle 'row1' 'row2' %} \" > ... </ tr > {% endfor %} The first iteration produces HTML that refers to class row1 , the second to row2 , the third to row1 again, and so on for each iteration of the\nloop. You can use variables, too. For example, if you have two template variables, rowvalue1 and rowvalue2 , you can alternate between their values like\nthis: {% for o in some_list %} < tr class = \" {% cycle rowvalue1 rowvalue2 %} \" > ... </ tr > {% endfor %} Variables included in the cycle will be escaped.  You can disable auto-escaping\nwith: {% for o in some_list %} < tr class = \" {% autoescape off %}{% cycle rowvalue1 rowvalue2 %}{% endautoescape %} \" > ... </ tr > {% endfor %} You can mix variables and strings: {% for o in some_list %} < tr class = \" {% cycle 'row1' rowvalue2 'row3' %} \" > ... </ tr > {% endfor %} In some cases you might want to refer to the current value of a cycle\nwithout advancing to the next value. To do this,\ngive the {% cycle %} tag a name, using “as”, like this: {% cycle 'row1' 'row2' as rowcolors %} From then on, you can insert the current value of the cycle wherever you’d like\nin your template by referencing the cycle name as a context variable. If you\nwant to move the cycle to the next value independently of the original cycle tag, you can use another cycle tag and specify the name of the\nvariable. So, the following template: < tr > < td class = \" {% cycle 'row1' 'row2' as rowcolors %} \" > ... </ td > < td class = \" {{ rowcolors }} \" > ... </ td > </ tr > < tr > < td class = \" {% cycle rowcolors %} \" > ... </ td > < td class = \" {{ rowcolors }} \" > ... </ td > </ tr > would output: < tr > < td class = \"row1\" > ... </ td > < td class = \"row1\" > ... </ td > </ tr > < tr > < td class = \"row2\" > ... </ td > < td class = \"row2\" > ... </ td > </ tr > You can use any number of values in a cycle tag, separated by spaces.\nValues enclosed in single quotes ( ' ) or double quotes ( \" ) are treated\nas string literals, while values without quotes are treated as template\nvariables. By default, when you use the as keyword with the cycle tag, the\nusage of {% cycle %} that initiates the cycle will itself produce\nthe first value in the cycle. This could be a problem if you want to\nuse the value in a nested loop or an included template. If you only want\nto declare the cycle but not produce the first value, you can add a silent keyword as the last keyword in the tag. For example: {% for obj in some_list %} {% cycle 'row1' 'row2' as rowcolors silent %} < tr class = \" {{ rowcolors }} \" > {% include \"subtemplate.html\" %} </ tr > {% endfor %} This will output a list of <tr> elements with class alternating between row1 and row2 . The subtemplate will have\naccess to rowcolors in its context and the value will match the class\nof the <tr> that encloses it. If the silent keyword were to be\nomitted, row1 and row2 would be emitted as normal text, outside the <tr> element. When the silent keyword is used on a cycle definition, the silence\nautomatically applies to all subsequent uses of that specific cycle tag.\nThe following template would output nothing , even though the second\ncall to {% cycle %} doesn’t specify silent : {% cycle 'row1' 'row2' as rowcolors silent %} {% cycle rowcolors %} You can use the resetcycle tag to make a {% cycle %} tag restart\nfrom its first value when it’s next encountered. debug ¶ Outputs a whole load of debugging information, including the current context\nand imported modules. {% debug %} outputs nothing when the DEBUG setting is False . extends ¶ Signals that this template extends a parent template. This tag can be used in two ways: {% extends \"base.html\" %} (with quotes) uses the literal value \"base.html\" as the name of the parent template to extend. {% extends variable %} uses the value of variable . If the variable\nevaluates to a string, Django will use that string as the name of the\nparent template. If the variable evaluates to a Template object,\nDjango will use that object as the parent template. See Template inheritance for more information. Normally the template name is relative to the template loader’s root directory.\nA string argument may also be a relative path starting with ./ or ../ .\nFor example, assume the following directory structure: dir1/\n    template.html\n    base2.html\n    my/\n        base3.html\nbase1.html In template.html , the following paths would be valid: {% extends \"./base2.html\" %} {% extends \"../base1.html\" %} {% extends \"./my/base3.html\" %} filter ¶ Filters the contents of the block through one or more filters. Multiple\nfilters can be specified with pipes and filters can have arguments, just as\nin variable syntax. Note that the block includes all the text between the filter and endfilter tags. Sample usage: {% filter force_escape | lower %} This text will be HTML-escaped, and will appear in all lowercase. {% endfilter %} Note The escape and safe filters are not acceptable\narguments. Instead, use the autoescape tag to manage autoescaping\nfor blocks of template code. firstof ¶ Outputs the first argument variable that is not “false” (i.e. exists, is not\nempty, is not a false boolean value, and is not a zero numeric value). Outputs\nnothing if all the passed variables are “false”. Sample usage: {% firstof var1 var2 var3 %} This is equivalent to: {% if var1 %} {{ var1 }} {% elif var2 %} {{ var2 }} {% elif var3 %} {{ var3 }} {% endif %} You can also use a literal string as a fallback value in case all\npassed variables are False: {% firstof var1 var2 var3 \"fallback value\" %} This tag auto-escapes variable values. You can disable auto-escaping with: {% autoescape off %} {% firstof var1 var2 var3 \"<strong>fallback value</strong>\" %} {% endautoescape %} Or if only some variables should be escaped, you can use: {% firstof var1 var2 | safe var3 \"<strong>fallback value</strong>\" | safe %} You can use the syntax {% firstof var1 var2 var3 as value %} to store the\noutput inside a variable. for ¶ Loops over each item in an array, making the item available in a context\nvariable. For example, to display a list of athletes provided in athlete_list : < ul > {% for athlete in athlete_list %} < li > {{ athlete.name }} </ li > {% endfor %} </ ul > You can loop over a list in reverse by using {% for obj in list reversed %} . If you need to loop over a list of lists, you can unpack the values\nin each sublist into individual variables. For example, if your context\ncontains a list of (x,y) coordinates called points , you could use the\nfollowing to output the list of points: {% for x , y in points %} There is a point at {{ x }} , {{ y }} {% endfor %} This can also be useful if you need to access the items in a dictionary.\nFor example, if your context contained a dictionary data , the following\nwould display the keys and values of the dictionary: {% for key , value in data.items %} {{ key }} : {{ value }} {% endfor %} Keep in mind that for the dot operator, dictionary key lookup takes precedence\nover method lookup. Therefore if the data dictionary contains a key named 'items' , data.items will return data['items'] instead of data.items() . Avoid adding keys that are named like dictionary methods if\nyou want to use those methods in a template ( items , values , keys ,\netc.). Read more about the lookup order of the dot operator in the documentation of template variables . The for loop sets a number of variables available within the loop: Variable Description forloop.counter The current iteration of the loop (1-indexed) forloop.counter0 The current iteration of the loop (0-indexed) forloop.revcounter The number of iterations from the end of the\nloop (1-indexed) forloop.revcounter0 The number of iterations from the end of the\nloop (0-indexed) forloop.first True if this is the first time through the loop forloop.last True if this is the last time through the loop forloop.parentloop For nested loops, this is the loop surrounding\nthe current one for … empty ¶ The for tag can take an optional {% empty %} clause whose text is\ndisplayed if the given array is empty or could not be found: < ul > {% for athlete in athlete_list %} < li > {{ athlete.name }} </ li > {% empty %} < li > Sorry, no athletes in this list. </ li > {% endfor %} </ ul > The above is equivalent to – but shorter, cleaner, and possibly faster\nthan – the following: < ul > {% if athlete_list %} {% for athlete in athlete_list %} < li > {{ athlete.name }} </ li > {% endfor %} {% else %} < li > Sorry, no athletes in this list. </ li > {% endif %} </ ul > if ¶ The {% if %} tag evaluates a variable, and if that variable is “true” (i.e.\nexists, is not empty, and is not a false boolean value) the contents of the\nblock are output: {% if athlete_list %} Number of athletes: {{ athlete_list | length }} {% elif athlete_in_locker_room_list %} Athletes should be out of the locker room soon! {% else %} No athletes. {% endif %} In the above, if athlete_list is not empty, the number of athletes will be\ndisplayed by the {{ athlete_list|length }} variable. As you can see, the if tag may take one or several {% elif %} clauses, as well as an {% else %} clause that will be displayed if all\nprevious conditions fail. These clauses are optional. Boolean operators ¶ if tags may use and , or or not to test a number of\nvariables or to negate a given variable: {% if athlete_list and coach_list %} Both athletes and coaches are available. {% endif %} {% if not athlete_list %} There are no athletes. {% endif %} {% if athlete_list or coach_list %} There are some athletes or some coaches. {% endif %} {% if not athlete_list or coach_list %} There are no athletes or there are some coaches. {% endif %} {% if athlete_list and not coach_list %} There are some athletes and absolutely no coaches. {% endif %} Use of both and and or clauses within the same tag is allowed, with and having higher precedence than or e.g.: {% if athlete_list and coach_list or cheerleader_list %} will be interpreted like: if ( athlete_list and coach_list ) or cheerleader_list : ... Use of actual parentheses in the if tag is invalid syntax. If you need\nthem to indicate precedence, you should use nested if tags. if tags may also use the operators == , != , < , > , <= , >= , in , not in , is , and is not which work as\nfollows: == operator ¶ Equality. Example: {% if somevar == \"x\" %} This appears if variable somevar equals the string \"x\" {% endif %} != operator ¶ Inequality. Example: {% if somevar != \"x\" %} This appears if variable somevar does not equal the string \"x\",\n  or if somevar is not found in the context {% endif %} < operator ¶ Less than. Example: {% if somevar < 100 %} This appears if variable somevar is less than 100. {% endif %} > operator ¶ Greater than. Example: {% if somevar > 0 %} This appears if variable somevar is greater than 0. {% endif %} <= operator ¶ Less than or equal to. Example: {% if somevar <= 100 %} This appears if variable somevar is less than 100 or equal to 100. {% endif %} >= operator ¶ Greater than or equal to. Example: {% if somevar >= 1 %} This appears if variable somevar is greater than 1 or equal to 1. {% endif %} in operator ¶ Contained within. This operator is supported by many Python containers to test\nwhether the given value is in the container. The following are some examples\nof how x in y will be interpreted: {% if \"bc\" in \"abcdef\" %} This appears since \"bc\" is a substring of \"abcdef\" {% endif %} {% if \"hello\" in greetings %} If greetings is a list or set, one element of which is the string\n  \"hello\", this will appear. {% endif %} {% if user in users %} If users is a QuerySet, this will appear if user is an\n  instance that belongs to the QuerySet. {% endif %} not in operator ¶ Not contained within. This is the negation of the in operator. is operator ¶ Object identity. Tests if two values are the same object. Example: {% if somevar is True %} This appears if and only if somevar is True. {% endif %} {% if somevar is None %} This appears if somevar is None, or if somevar is not found in the context. {% endif %} is not operator ¶ Negated object identity. Tests if two values are not the same object. This is\nthe negation of the is operator. Example: {% if somevar is not True %} This appears if somevar is not True, or if somevar is not found in the\n  context. {% endif %} {% if somevar is not None %} This appears if and only if somevar is not None. {% endif %} Filters ¶ You can also use filters in the if expression. For example: {% if messages | length >= 100 %} You have lots of messages today! {% endif %} Complex expressions ¶ All of the above can be combined to form complex expressions. For such\nexpressions, it can be important to know how the operators are grouped when the\nexpression is evaluated - that is, the precedence rules. The precedence of the\noperators, from lowest to highest, is as follows: or and not in == , != , < , > , <= , >= (This follows Python exactly). So, for example, the following complex if tag: {% if a == b or c == d and e %} …will be interpreted as: ( a == b ) or (( c == d ) and e ) If you need different precedence, you will need to use nested if tags.\nSometimes that is better for clarity anyway, for the sake of those who do not\nknow the precedence rules. The comparison operators cannot be ‘chained’ like in Python or in mathematical\nnotation. For example, instead of using: {% if a > b > c %} (WRONG) you should use: {% if a > b and b > c %} ifchanged ¶ Check if a value has changed from the last iteration of a loop. The {% ifchanged %} block tag is used within a loop. It has two possible\nuses. Checks its own rendered contents against its previous state and only\ndisplays the content if it has changed. For example, this displays a list of\ndays, only displaying the month if it changes: < h1 > Archive for {{ year }} </ h1 > {% for date in days %} {% ifchanged %} < h3 > {{ date | date :\"F\" }} </ h3 > {% endifchanged %} < a href = \" {{ date | date :\"M/d\" | lower }} /\" > {{ date | date :\"j\" }} </ a > {% endfor %} If given one or more variables, check whether any variable has changed.\nFor example, the following shows the date every time it changes, while\nshowing the hour if either the hour or the date has changed: {% for date in days %} {% ifchanged date.date %} {{ date.date }} {% endifchanged %} {% ifchanged date.hour date.date %} {{ date.hour }} {% endifchanged %} {% endfor %} The ifchanged tag can also take an optional {% else %} clause that\nwill be displayed if the value has not changed: {% for match in matches %} < div style = \"background-color: {% ifchanged match.ballot_id %} {% cycle \"red\" \"blue\" %} {% else %} gray {% endifchanged %} \" > {{ match }} </ div > {% endfor %} include ¶ Loads a template and renders it with the current context. This is a way of\n“including” other templates within a template. The template name can either be a variable or a hard-coded (quoted) string,\nin either single or double quotes. This example includes the contents of the template \"foo/bar.html\" : {% include \"foo/bar.html\" %} Normally the template name is relative to the template loader’s root directory.\nA string argument may also be a relative path starting with ./ or ../ as described in the extends tag. This example includes the contents of the template whose name is contained in\nthe variable template_name : {% include template_name %} The variable may also be any object with a render() method that accepts a\ncontext. This allows you to reference a compiled Template in your context. Additionally, the variable may be an iterable of template names, in which case\nthe first that can be loaded will be used, as per select_template() . An included template is rendered within the context of the template that\nincludes it. This example produces the output \"Hello, John!\" : Context: variable person is set to \"John\" and variable greeting is set to \"Hello\" . Template: {% include \"name_snippet.html\" %} The name_snippet.html template: {{ greeting }} , {{ person | default :\"friend\" }} ! You can pass additional context to the template using keyword arguments: {% include \"name_snippet.html\" with person = \"Jane\" greeting = \"Hello\" %} If you want to render the context only with the variables provided (or even\nno variables at all), use the only option. No other variables are\navailable to the included template: {% include \"name_snippet.html\" with greeting = \"Hi\" only %} Note The include tag should be considered as an implementation of\n“render this subtemplate and include the HTML”, not as “parse this\nsubtemplate and include its contents as if it were part of the parent”.\nThis means that there is no shared state between included templates –\neach include is a completely independent rendering process. Blocks are evaluated before they are included. This means that a template\nthat includes blocks from another will contain blocks that have already\nbeen evaluated and rendered - not blocks that can be overridden by, for\nexample, an extending template. load ¶ Loads a custom template tag set. For example, the following template would load all the tags and filters\nregistered in somelibrary and otherlibrary located in package package : {% load somelibrary package.otherlibrary %} You can also selectively load individual filters or tags from a library, using\nthe from argument. In this example, the template tags/filters named foo and bar will be loaded from somelibrary : {% load foo bar from somelibrary %} See Custom tag and filter libraries for\nmore information. lorem ¶ Displays random “lorem ipsum” Latin text. This is useful for providing sample\ndata in templates. Usage: {% lorem [ count ] [ method ] [ random ] %} The {% lorem %} tag can be used with zero, one, two or three arguments.\nThe arguments are: Argument Description count A number (or variable) containing the number of paragraphs or\nwords to generate (default is 1). method Either w for words, p for HTML paragraphs or b for plain-text paragraph blocks (default is b ). random The word random , which if given, does not use the common\nparagraph (“Lorem ipsum dolor sit amet…”) when generating\ntext. Examples: {% lorem %} will output the common “lorem ipsum” paragraph. {% lorem 3 p %} will output the common “lorem ipsum” paragraph\nand two random paragraphs each wrapped in HTML <p> tags. {% lorem 2 w random %} will output two random Latin words. now ¶ Displays the current date and/or time, using a format according to the given\nstring. Such string can contain format specifiers characters as described\nin the date filter section. Example: It is {% now \"jS F Y H:i\" %} Note that you can backslash-escape a format string if you want to use the\n“raw” value. In this example, both “o” and “f” are backslash-escaped, because\notherwise each is a format string that displays the year and the time,\nrespectively: It is the {% now \"jS \\o\\f F\" %} This would display as “It is the 4th of September”. Note The format passed can also be one of the predefined ones DATE_FORMAT , DATETIME_FORMAT , SHORT_DATE_FORMAT or SHORT_DATETIME_FORMAT .\nThe predefined formats may vary depending on the current locale and\nif Format localization is enabled, e.g.: It is {% now \"SHORT_DATETIME_FORMAT\" %} You can also use the syntax {% now \"Y\" as current_year %} to store the\noutput (as a string) inside a variable. This is useful if you want to use {% now %} inside a template tag like blocktranslate for example: {% now \"Y\" as current_year %} {% blocktranslate %} Copyright {{ current_year }}{% endblocktranslate %} querystring ¶ New in Django 5.1. Outputs a URL-encoded formatted query string based on the provided parameters. This tag requires a QueryDict instance, which defaults to request.GET if none is provided. If the QueryDict is empty and no additional parameters\nare provided, an empty string is returned. A non-empty result includes a\nleading \"?\" . Using request.GET as default To use request.GET as the default QueryDict instance, the django.template.context_processors.request context processor should be\nenabled. If it’s not enabled, you must either explicitly pass the request object into the template context, or provide a QueryDict instance to this tag. Basic usage ¶ {% querystring %} Outputs the current query string verbatim. So if the query string is ?color=green , the output would be ?color=green . {% querystring size = \"M\" %} Outputs the current query string with the addition of the size parameter.\nFollowing the previous example, the output would be ?color=green&size=M . Custom QueryDict ¶ {% querystring my_query_dict %} You can provide a custom QueryDict to be used instead of request.GET .\nSo if my_query_dict is <QueryDict: {'color': ['blue']}> , this outputs ?color=blue . Setting items ¶ {% querystring color = \"red\" size = \"S\" %} Adds or modifies parameters in the query string. Each keyword argument will be\nadded to the query string, replacing any existing value for that key. For\ninstance, if the current query string is ?color=green , the output will be ?color=red&size=S . Removing items ¶ {% querystring color = None %} Passing None as the value removes the parameter from the query string. For\nexample, if the current query string is ?color=green&size=M , the output\nwill be ?size=M . Handling lists ¶ {% querystring color = my_list %} If my_list is [\"red\", \"blue\"] , the output will be ?color=red&color=blue , preserving the list structure in the query string. Dynamic usage ¶ A common example of using this tag is to preserve the current query string when\ndisplaying a page of results, while adding a link to the next and previous\npages of results. For example, if the paginator is currently on page 3, and the\ncurrent query string is ?color=blue&size=M&page=3 , the following code would\noutput ?color=blue&size=M&page=4 : {% querystring page = page.next_page_number %} You can also store the value in a variable. For example, if you need multiple\nlinks to the same page, define it as: {% querystring page = page.next_page_number as next_page %} regroup ¶ Regroups a list of alike objects by a common attribute. This complex tag is best illustrated by way of an example: say that cities is a list of cities represented by dictionaries containing \"name\" , \"population\" , and \"country\" keys: cities = [ { \"name\" : \"Mumbai\" , \"population\" : \"19,000,000\" , \"country\" : \"India\" }, { \"name\" : \"Calcutta\" , \"population\" : \"15,000,000\" , \"country\" : \"India\" }, { \"name\" : \"New York\" , \"population\" : \"20,000,000\" , \"country\" : \"USA\" }, { \"name\" : \"Chicago\" , \"population\" : \"7,000,000\" , \"country\" : \"USA\" }, { \"name\" : \"Tokyo\" , \"population\" : \"33,000,000\" , \"country\" : \"Japan\" }, ] …and you’d like to display a hierarchical list that is ordered by country,\nlike this: India Mumbai: 19,000,000 Calcutta: 15,000,000 USA New York: 20,000,000 Chicago: 7,000,000 Japan Tokyo: 33,000,000 You can use the {% regroup %} tag to group the list of cities by country.\nThe following snippet of template code would accomplish this: {% regroup cities by country as country_list %} < ul > {% for country in country_list %} < li > {{ country.grouper }} < ul > {% for city in country.list %} < li > {{ city.name }} : {{ city.population }} </ li > {% endfor %} </ ul > </ li > {% endfor %} </ ul > Let’s walk through this example. {% regroup %} takes three arguments: the\nlist you want to regroup, the attribute to group by, and the name of the\nresulting list. Here, we’re regrouping the cities list by the country attribute and calling the result country_list . {% regroup %} produces a list (in this case, country_list ) of group objects . Group objects are instances of namedtuple() with two fields: grouper – the item that was grouped by (e.g., the string “India” or\n“Japan”). list – a list of all items in this group (e.g., a list of all cities\nwith country=’India’). Because {% regroup %} produces namedtuple() objects,\nyou can also write the previous example as: {% regroup cities by country as country_list %} < ul > {% for country , local_cities in country_list %} < li > {{ country }} < ul > {% for city in local_cities %} < li > {{ city.name }} : {{ city.population }} </ li > {% endfor %} </ ul > </ li > {% endfor %} </ ul > Note that {% regroup %} does not order its input! Our example relies on\nthe fact that the cities list was ordered by country in the first place.\nIf the cities list did not order its members by country , the\nregrouping would naively display more than one group for a single country. For\nexample, say the cities list was set to this (note that the countries are not\ngrouped together): cities = [ { \"name\" : \"Mumbai\" , \"population\" : \"19,000,000\" , \"country\" : \"India\" }, { \"name\" : \"New York\" , \"population\" : \"20,000,000\" , \"country\" : \"USA\" }, { \"name\" : \"Calcutta\" , \"population\" : \"15,000,000\" , \"country\" : \"India\" }, { \"name\" : \"Chicago\" , \"population\" : \"7,000,000\" , \"country\" : \"USA\" }, { \"name\" : \"Tokyo\" , \"population\" : \"33,000,000\" , \"country\" : \"Japan\" }, ] With this input for cities , the example {% regroup %} template code\nabove would result in the following output: India Mumbai: 19,000,000 USA New York: 20,000,000 India Calcutta: 15,000,000 USA Chicago: 7,000,000 Japan Tokyo: 33,000,000 The easiest solution to this gotcha is to make sure in your view code that the\ndata is ordered according to how you want to display it. Another solution is to sort the data in the template using the dictsort filter, if your data is in a list of dictionaries: {% regroup cities | dictsort :\"country\" by country as country_list %} Grouping on other properties ¶ Any valid template lookup is a legal grouping attribute for the regroup\ntag, including methods, attributes, dictionary keys and list items. For\nexample, if the “country” field is a foreign key to a class with\nan attribute “description,” you could use: {% regroup cities by country.description as country_list %} Or, if country is a field with choices , it will have a get_FOO_display() method available as an\nattribute, allowing  you to group on the display string rather than the choices key: {% regroup cities by get_country_display as country_list %} {{ country.grouper }} will now display the value fields from the choices set rather than the keys. resetcycle ¶ Resets a previous cycle so that it restarts from its first item at its next\nencounter. Without arguments, {% resetcycle %} will reset the last {% cycle %} defined in the template. Example usage: {% for coach in coach_list %} < h1 > {{ coach.name }} </ h1 > {% for athlete in coach.athlete_set.all %} < p class = \" {% cycle 'odd' 'even' %} \" > {{ athlete.name }} </ p > {% endfor %} {% resetcycle %} {% endfor %} This example would return this HTML: < h1 > Gareth </ h1 > < p class = \"odd\" > Harry </ p > < p class = \"even\" > John </ p > < p class = \"odd\" > Nick </ p > < h1 > John </ h1 > < p class = \"odd\" > Andrea </ p > < p class = \"even\" > Melissa </ p > Notice how the first block ends with class=\"odd\" and the new one starts\nwith class=\"odd\" . Without the {% resetcycle %} tag, the second block\nwould start with class=\"even\" . You can also reset named cycle tags: {% for item in list %} < p class = \" {% cycle 'odd' 'even' as stripe %} {% cycle 'major' 'minor' 'minor' 'minor' 'minor' as tick %} \" > {{ item.data }} </ p > {% ifchanged item.category %} < h1 > {{ item.category }} </ h1 > {% if not forloop .first %}{% resetcycle tick %}{% endif %} {% endifchanged %} {% endfor %} In this example, we have both the alternating odd/even rows and a “major” row\nevery fifth row. Only the five-row cycle is reset when a category changes. spaceless ¶ Removes whitespace between HTML tags. This includes tab\ncharacters and newlines. Example usage: {% spaceless %} < p > < a href = \"foo/\" > Foo </ a > </ p > {% endspaceless %} This example would return this HTML: < p >< a href = \"foo/\" > Foo </ a ></ p > Only space between tags is removed – not space between tags and text. In\nthis example, the space around Hello won’t be stripped: {% spaceless %} < strong > Hello </ strong > {% endspaceless %} templatetag ¶ Outputs one of the syntax characters used to compose template tags. The template system has no concept of “escaping” individual characters.\nHowever, you can use the {% templatetag %} tag to display one of the\ntemplate tag character combinations. The argument tells which template bit to output: Argument Outputs openblock {% closeblock %} openvariable {{ closevariable }} openbrace { closebrace } opencomment {# closecomment #} Sample usage: The {% templatetag openblock %} characters open a block. See also the verbatim tag for another way of including these\ncharacters. url ¶ Returns an absolute path reference (a URL without the domain name) matching a\ngiven view and optional parameters. Any special characters in the resulting\npath will be encoded using iri_to_uri() . This is a way to output links without violating the DRY principle by having to\nhard-code URLs in your templates: {% url 'some-url-name' v1 v2 %} The first argument is a URL pattern name . It can\nbe a quoted literal or any other context variable. Additional arguments are\noptional and should be space-separated values that will be used as arguments in\nthe URL. The example above shows passing positional arguments. Alternatively\nyou may use keyword syntax: {% url 'some-url-name' arg1 = v1 arg2 = v2 %} Do not mix both positional and keyword syntax in a single call. All arguments\nrequired by the URLconf should be present. For example, suppose you have a view, app_views.client , whose URLconf\ntakes a client ID (here, client() is a method inside the views file app_views.py ). The URLconf line might look like this: path ( \"client/<int:id>/\" , app_views . client , name = \"app-views-client\" ) If this app’s URLconf is included into the project’s URLconf under a path\nsuch as this: path ( \"clients/\" , include ( \"project_name.app_name.urls\" )) …then, in a template, you can create a link to this view like this: {% url 'app-views-client' client.id %} The template tag will output the string /clients/client/123/ . Note that if the URL you’re reversing doesn’t exist, you’ll get an NoReverseMatch exception raised, which will cause your\nsite to display an error page. If you’d like to retrieve a URL without displaying it, you can use a slightly\ndifferent call: {% url 'some-url-name' arg arg2 as the_url %} < a href = \" {{ the_url }} \" > I'm linking to {{ the_url }} </ a > The scope of the variable created by the as var syntax is the {% block %} in which the {% url %} tag appears. This {% url ... as var %} syntax will not cause an error if the view is\nmissing. In practice you’ll use this to link to views that are optional: {% url 'some-url-name' as the_url %} {% if the_url %} < a href = \" {{ the_url }} \" > Link to optional stuff </ a > {% endif %} If you’d like to retrieve a namespaced URL, specify the fully qualified name: {% url 'myapp:view-name' %} This will follow the normal namespaced URL resolution strategy , including using any hints provided\nby the context as to the current application. Warning Don’t forget to put quotes around the URL pattern name , otherwise the\nvalue will be interpreted as a context variable! verbatim ¶ Stops the template engine from rendering the contents of this block tag. A common use is to allow a JavaScript template layer that collides with\nDjango’s syntax. For example: {% verbatim %} {{ if dying }} Still alive. {{ / if }} {% endverbatim %} You can also designate a specific closing tag, allowing the use of {% endverbatim %} as part of the unrendered contents: {% verbatim myblock %} Avoid template rendering via the {% verbatim %}{% endverbatim %} block. {% endverbatim myblock %} widthratio ¶ For creating bar charts and such, this tag calculates the ratio of a given\nvalue to a maximum value, and then applies that ratio to a constant. For example: < img src = \"bar.png\" alt = \"Bar\" height = \"10\" width = \" {% widthratio this_value max_value max_width %} \" > If this_value is 175, max_value is 200, and max_width is 100, the\nimage in the above example will be 88 pixels wide\n(because 175/200 = .875; .875 * 100 = 87.5 which is rounded up to 88). In some cases you might want to capture the result of widthratio in a\nvariable. It can be useful, for instance, in a blocktranslate like this: {% widthratio this_value max_value max_width as width %} {% blocktranslate %} The width is: {{ width }}{% endblocktranslate %} with ¶ Caches a complex variable under a simpler name. This is useful when accessing\nan “expensive” method (e.g., one that hits the database) multiple times. For example: {% with total = business.employees.count %} {{ total }} employee {{ total | pluralize }} {% endwith %} The populated variable (in the example above, total ) is only available\nbetween the {% with %} and {% endwith %} tags. You can assign more than one context variable: {% with alpha = 1 beta = 2 %} ... {% endwith %} Note The previous more verbose format is still supported: {% with business.employees.count as total %} Built-in filter reference ¶ add ¶ Adds the argument to the value. For example: {{ value | add :\"2\" }} If value is 4 , then the output will be 6 . This filter will first try to coerce both values to integers. If this fails,\nit’ll attempt to add the values together anyway. This will work on some data\ntypes (strings, list, etc.) and fail on others. If it fails, the result will\nbe an empty string. For example, if we have: {{ first | add : second }} and first is [1, 2, 3] and second is [4, 5, 6] , then the\noutput will be [1, 2, 3, 4, 5, 6] . Warning Strings that can be coerced to integers will be summed , not\nconcatenated, as in the first example above. addslashes ¶ Adds slashes before quotes. Useful for escaping strings in CSV, for example. For example: {{ value | addslashes }} If value is \"I'm using Django\" , the output will be \"I\\'m using Django\" . capfirst ¶ Capitalizes the first character of the value. If the first character is not\na letter, this filter has no effect. For example: {{ value | capfirst }} If value is \"django\" , the output will be \"Django\" . center ¶ Centers the value in a field of a given width. For example: \" {{ value | center :\"15\" }} \" If value is \"Django\" , the output will be \" Django \" . cut ¶ Removes all values of arg from the given string. For example: {{ value | cut :\" \" }} If value is \"String with spaces\" , the output will be \"Stringwithspaces\" . date ¶ Formats a date according to the given format. Uses a similar format to PHP’s date() function with some\ndifferences. Note These format characters are not used in Django outside of templates. They\nwere designed to be compatible with PHP to ease transitioning for designers. Available format strings: Format character Description Example output Day d Day of the month, 2 digits with\nleading zeros. '01' to '31' j Day of the month without leading\nzeros. '1' to '31' D Day of the week, textual, 3 letters. 'Fri' l Day of the week, textual, long. 'Friday' S English ordinal suffix for day of the\nmonth, 2 characters. 'st' , 'nd' , 'rd' or 'th' w Day of the week, digits without\nleading zeros. '0' (Sunday) to '6' (Saturday) z Day of the year. 1 to 366 Week W ISO-8601 week number of year, with\nweeks starting on Monday. 1 , 53 Month m Month, 2 digits with leading zeros. '01' to '12' n Month without leading zeros. '1' to '12' M Month, textual, 3 letters. 'Jan' b Month, textual, 3 letters, lowercase. 'jan' E Month, locale specific alternative\nrepresentation usually used for long\ndate representation. 'listopada' (for Polish locale, as opposed to 'Listopad' ) F Month, textual, long. 'January' N Month abbreviation in Associated Press\nstyle. Proprietary extension. 'Jan.' , 'Feb.' , 'March' , 'May' t Number of days in the given month. 28 to 31 Year y Year, 2 digits with leading zeros. '00' to '99' Y Year, 4 digits with leading zeros. '0001' , …, '1999' , …, '9999' L Boolean for whether it’s a leap year. True or False o ISO-8601 week-numbering year,\ncorresponding to the ISO-8601 week\nnumber (W) which uses leap weeks. See Y\nfor the more common year format. '1999' Time g Hour, 12-hour format without leading\nzeros. '1' to '12' G Hour, 24-hour format without leading\nzeros. '0' to '23' h Hour, 12-hour format. '01' to '12' H Hour, 24-hour format. '00' to '23' i Minutes. '00' to '59' s Seconds, 2 digits with leading zeros. '00' to '59' u Microseconds. 000000 to 999999 a 'a.m.' or 'p.m.' (Note that\nthis is slightly different than PHP’s\noutput, because this includes periods\nto match Associated Press style.) 'a.m.' A 'AM' or 'PM' . 'AM' f Time, in 12-hour hours and minutes,\nwith minutes left off if they’re zero.\nProprietary extension. '1' , '1:30' P Time, in 12-hour hours, minutes and\n‘a.m.’/’p.m.’, with minutes left off\nif they’re zero and the special-case\nstrings ‘midnight’ and ‘noon’ if\nappropriate. Proprietary extension. '1 a.m.' , '1:30 p.m.' , 'midnight' , 'noon' , '12:30 p.m.' Timezone e Timezone name. Could be in any format,\nor might return an empty string,\ndepending on the datetime. '' , 'GMT' , '-500' , 'US/Eastern' , etc. I Daylight saving time, whether it’s in\neffect or not. '1' or '0' O Difference to Greenwich time in hours. '+0200' T Time zone of this machine. 'EST' , 'MDT' Z Time zone offset in seconds. The\noffset for timezones west of UTC is\nalways negative, and for those east of\nUTC is always positive. -43200 to 43200 Date/Time c ISO 8601 format. (Note: unlike other\nformatters, such as “Z”, “O” or “r”,\nthe “c” formatter will not add timezone\noffset if value is a naive datetime\n(see datetime.tzinfo ). 2008-01-02T10:30:00.000123+02:00 ,\nor 2008-01-02T10:30:00.000123 if the datetime is naive r RFC 5322 formatted date. 'Thu, 21 Dec 2000 16:01:07 +0200' U Seconds since the Unix Epoch\n(January 1 1970 00:00:00 UTC). For example: {{ value | date :\"D d M Y\" }} If value is a datetime object (e.g., the result of datetime.datetime.now() ), the output will be the string 'Wed 09 Jan 2008' . The format passed can be one of the predefined ones DATE_FORMAT , DATETIME_FORMAT , SHORT_DATE_FORMAT or SHORT_DATETIME_FORMAT , or a custom format that uses the format\nspecifiers shown in the table above. Note that predefined formats may vary\ndepending on the current locale. Assuming that LANGUAGE_CODE is, for example, \"es\" , then for: {{ value | date :\"SHORT_DATE_FORMAT\" }} the output would be the string \"09/01/2008\" (the \"SHORT_DATE_FORMAT\" format specifier for the es locale as shipped with Django is \"d/m/Y\" ). When used without a format string, the DATE_FORMAT format specifier is\nused. Assuming the same settings as the previous example: {{ value | date }} outputs 9 de Enero de 2008 (the DATE_FORMAT format specifier for the es locale is r'j \\d\\e F \\d\\e Y' ). Both “d” and “e” are\nbackslash-escaped, because otherwise each is a format string that displays the\nday and the timezone name, respectively. You can combine date with the time filter to render a full\nrepresentation of a datetime value. E.g.: {{ value | date :\"D d M Y\" }} {{ value | time :\"H:i\" }} default ¶ If value evaluates to False , uses the given default. Otherwise, uses the\nvalue. For example: {{ value | default :\"nothing\" }} If value is \"\" (the empty string), the output will be nothing . default_if_none ¶ If (and only if) value is None , uses the given default. Otherwise, uses the\nvalue. Note that if an empty string is given, the default value will not be used.\nUse the default filter if you want to fallback for empty strings. For example: {{ value | default_if_none :\"nothing\" }} If value is None , the output will be nothing . dictsort ¶ Takes a list of dictionaries and returns that list sorted by the key given in\nthe argument. For example: {{ value | dictsort :\"name\" }} If value is: [ { \"name\" : \"zed\" , \"age\" : 19 }, { \"name\" : \"amy\" , \"age\" : 22 }, { \"name\" : \"joe\" , \"age\" : 31 }, ] then the output would be: [ { \"name\" : \"amy\" , \"age\" : 22 }, { \"name\" : \"joe\" , \"age\" : 31 }, { \"name\" : \"zed\" , \"age\" : 19 }, ] You can also do more complicated things like: {% for book in books | dictsort :\"author.age\" %} * {{ book.title }} ( {{ book.author.name }} ) {% endfor %} If books is: [ { \"title\" : \"1984\" , \"author\" : { \"name\" : \"George\" , \"age\" : 45 }}, { \"title\" : \"Timequake\" , \"author\" : { \"name\" : \"Kurt\" , \"age\" : 75 }}, { \"title\" : \"Alice\" , \"author\" : { \"name\" : \"Lewis\" , \"age\" : 33 }}, ] then the output would be: * Alice (Lewis)\n* 1984 (George)\n* Timequake (Kurt) dictsort can also order a list of lists (or any other object implementing __getitem__() ) by elements at specified index. For example: {{ value | dictsort : 0 }} If value is: [ ( \"a\" , \"42\" ), ( \"c\" , \"string\" ), ( \"b\" , \"foo\" ), ] then the output would be: [ ( \"a\" , \"42\" ), ( \"b\" , \"foo\" ), ( \"c\" , \"string\" ), ] You must pass the index as an integer rather than a string. The following\nproduce empty output: {{ values | dictsort :\"0\" }} Ordering by elements at specified index is not supported on dictionaries. dictsortreversed ¶ Takes a list of dictionaries and returns that list sorted in reverse order by\nthe key given in the argument. This works exactly the same as the above filter,\nbut the returned value will be in reverse order. divisibleby ¶ Returns True if the value is divisible by the argument. For example: {{ value | divisibleby :\"3\" }} If value is 21 , the output would be True . escape ¶ Escapes a string’s HTML. Specifically, it makes these replacements: < is converted to &lt; > is converted to &gt; ' (single quote) is converted to &#x27; \" (double quote) is converted to &quot; & is converted to &amp; Applying escape to a variable that would normally have auto-escaping\napplied to the result will only result in one round of escaping being done. So\nit is safe to use this function even in auto-escaping environments. If you want\nmultiple escaping passes to be applied, use the force_escape filter. For example, you can apply escape to fields when autoescape is off: {% autoescape off %} {{ title | escape }} {% endautoescape %} Chaining escape with other filters As mentioned in the autoescape section, when filters including escape are chained together, it can result in unexpected outcomes if\npreceding filters mark a potentially unsafe string as safe due to the lack\nof escaping caused by autoescape being off . In such cases, chaining escape would not reescape strings that have\nalready been marked as safe. This is especially important when using filters that operate on sequences,\nfor example join . If you need to escape each element in a\nsequence, use the dedicated escapeseq filter. escapejs ¶ Escapes characters for use as a whole JavaScript string literal, within single\nor double quotes, as below. This filter does not make the string safe for use\nin “JavaScript template literals” (the JavaScript backtick syntax). Any other\nuses not listed above are not supported. It is generally recommended that data\nshould be passed using HTML data- attributes, or the json_script filter, rather than in embedded JavaScript. For example: < script > let myValue = ' {{ value | escapejs }} ' escapeseq ¶ New in Django 5.0. Applies the escape filter to each element of a sequence. Useful in\nconjunction with other filters that operate on sequences, such as join . For example: {% autoescape off %} {{ my_list | escapeseq | join :\", \" }} {% endautoescape %} filesizeformat ¶ Formats the value like a ‘human-readable’ file size (i.e. '13 KB' , '4.1 MB' , '102 bytes' , etc.). For example: {{ value | filesizeformat }} If value is 123456789, the output would be 117.7 MB . File sizes and SI units Strictly speaking, filesizeformat does not conform to the International\nSystem of Units which recommends using KiB, MiB, GiB, etc. when byte sizes\nare calculated in powers of 1024 (which is the case here). Instead, Django\nuses traditional unit names (KB, MB, GB, etc.) corresponding to names that\nare more commonly used. first ¶ Returns the first item in a list. For example: {{ value | first }} If value is the list ['a', 'b', 'c'] , the output will be 'a' . floatformat ¶ When used without an argument, rounds a floating-point number to one decimal\nplace – but only if there’s a decimal part to be displayed. For example: value Template Output 34.23234 {{ value|floatformat }} 34.2 34.00000 {{ value|floatformat }} 34 34.26000 {{ value|floatformat }} 34.3 If used with a numeric integer argument, floatformat rounds a number to\nthat many decimal places. For example: value Template Output 34.23234 {{ value|floatformat:3 }} 34.232 34.00000 {{ value|floatformat:3 }} 34.000 34.26000 {{ value|floatformat:3 }} 34.260 Particularly useful is passing 0 (zero) as the argument which will round the\nfloat to the nearest integer. value Template Output 34.23234 {{ value|floatformat:\"0\" }} 34 34.00000 {{ value|floatformat:\"0\" }} 34 39.56000 {{ value|floatformat:\"0\" }} 40 If the argument passed to floatformat is negative, it will round a number\nto that many decimal places – but only if there’s a decimal part to be\ndisplayed. For example: value Template Output 34.23234 {{ value|floatformat:\"-3\" }} 34.232 34.00000 {{ value|floatformat:\"-3\" }} 34 34.26000 {{ value|floatformat:\"-3\" }} 34.260 If the argument passed to floatformat has the g suffix, it will force\ngrouping by the THOUSAND_SEPARATOR for the active locale. For\nexample, when the active locale is en (English): value Template Output 34232.34 {{ value|floatformat:\"2g\" }} 34,232.34 34232.06 {{ value|floatformat:\"g\" }} 34,232.1 34232.00 {{ value|floatformat:\"-3g\" }} 34,232 Output is always localized (independently of the {% localize off %} tag) unless the argument passed to floatformat has the u suffix, which will force disabling localization. For example, when the active\nlocale is pl (Polish): value Template Output 34.23234 {{ value|floatformat:\"3\" }} 34,232 34.23234 {{ value|floatformat:\"3u\" }} 34.232 Using floatformat with no argument is equivalent to using floatformat with an argument of -1 . force_escape ¶ Applies HTML escaping to a string (see the escape filter for\ndetails). This filter is applied immediately and returns a new, escaped\nstring. This is useful in the rare cases where you need multiple escaping or\nwant to apply other filters to the escaped results. Normally, you want to use\nthe escape filter. For example, if you want to catch the <p> HTML elements created by\nthe linebreaks filter: {% autoescape off %} {{ body | linebreaks | force_escape }} {% endautoescape %} get_digit ¶ Given a whole number, returns the requested digit, where 1 is the right-most\ndigit, 2 is the second-right-most digit, etc. Returns the original value for\ninvalid input (if input or argument is not an integer, or if argument is less\nthan 1). Otherwise, output is always an integer. For example: {{ value | get_digit :\"2\" }} If value is 123456789 , the output will be 8 . iriencode ¶ Converts an IRI (Internationalized Resource Identifier) to a string that is\nsuitable for including in a URL. This is necessary if you’re trying to use\nstrings containing non-ASCII characters in a URL. It’s safe to use this filter on a string that has already gone through the urlencode filter. For example: {{ value | iriencode }} If value is \"?test=I ♥ Django\" , the output will be \"?test=I%20%E2%99%A5%20Django\" . join ¶ Joins a list with a string, like Python’s str.join(list) For example: {{ value | join :\" // \" }} If value is the list ['a', 'b', 'c'] , the output will be the string \"a // b // c\" . json_script ¶ Safely outputs a Python object as JSON, wrapped in a <script> tag, ready\nfor use with JavaScript. Argument: The optional HTML “id” of the <script> tag. For example: {{ value | json_script :\"hello-data\" }} If value is the dictionary {'hello': 'world'} , the output will be: < script id = \"hello-data\" type = \"application/json\" >{ \"hello\" : \"world\" }</ script > The resulting data can be accessed in JavaScript like this: const value = JSON . parse ( document . getElementById ( 'hello-data' ). textContent ); XSS attacks are mitigated by escaping the characters “<”, “>” and “&”. For\nexample if value is {'hello': 'world</script>&amp;'} , the output is: < script id = \"hello-data\" type = \"application/json\" >{ \"hello\" : \"world\\\\u003C/script\\\\u003E\\\\u0026amp;\" }</ script > This is compatible with a strict Content Security Policy that prohibits in-page\nscript execution. It also maintains a clean separation between passive data and\nexecutable code. last ¶ Returns the last item in a list. For example: {{ value | last }} If value is the list ['a', 'b', 'c', 'd'] , the output will be the\nstring \"d\" . length ¶ Returns the length of the value. This works for both strings and lists. For example: {{ value | length }} If value is ['a', 'b', 'c', 'd'] or \"abcd\" , the output will be 4 . The filter returns 0 for an undefined variable. linebreaks ¶ Replaces line breaks in plain text with appropriate HTML; a single\nnewline becomes an HTML line break ( <br> ) and a new line\nfollowed by a blank line becomes a paragraph break ( </p> ). For example: {{ value | linebreaks }} If value is Joel\\nis a slug , the output will be <p>Joel<br>is a slug</p> . linebreaksbr ¶ Converts all newlines in a piece of plain text to HTML line breaks\n( <br> ). For example: {{ value | linebreaksbr }} If value is Joel\\nis a slug , the output will be Joel<br>is a slug . linenumbers ¶ Displays text with line numbers. For example: {{ value | linenumbers }} If value is: one\ntwo\nthree the output will be: 1. one\n2. two\n3. three ljust ¶ Left-aligns the value in a field of a given width. Argument: field size For example: \" {{ value | ljust :\"10\" }} \" If value is Django , the output will be \"Django \" . lower ¶ Converts a string into all lowercase. For example: {{ value | lower }} If value is Totally LOVING this Album! , the output will be totally loving this album! . make_list ¶ Returns the value turned into a list. For a string, it’s a list of characters.\nFor an integer, the argument is cast to a string before creating a list. For example: {{ value | make_list }} If value is the string \"Joel\" , the output would be the list ['J', 'o', 'e', 'l'] . If value is 123 , the output will be the\nlist ['1', '2', '3'] . phone2numeric ¶ Converts a phone number (possibly containing letters) to its numerical\nequivalent. The input doesn’t have to be a valid phone number. This will happily convert\nany string. For example: {{ value | phone2numeric }} If value is 800-COLLECT , the output will be 800-2655328 . pluralize ¶ Returns a plural suffix if the value is not 1 , '1' , or an object of\nlength 1. By default, this suffix is 's' . Example: You have {{ num_messages }} message {{ num_messages | pluralize }} . If num_messages is 1 , the output will be You have 1 message. If num_messages is 2 the output will be You have 2 messages. For words that require a suffix other than 's' , you can provide an alternate\nsuffix as a parameter to the filter. Example: You have {{ num_walruses }} walrus {{ num_walruses | pluralize :\"es\" }} . For words that don’t pluralize by simple suffix, you can specify both a\nsingular and plural suffix, separated by a comma. Example: You have {{ num_cherries }} cherr {{ num_cherries | pluralize :\"y,ies\" }} . Note Use blocktranslate to pluralize translated strings. pprint ¶ A wrapper around pprint.pprint() – for debugging, really. random ¶ Returns a random item from the given list. For example: {{ value | random }} If value is the list ['a', 'b', 'c', 'd'] , the output could be \"b\" . rjust ¶ Right-aligns the value in a field of a given width. Argument: field size For example: \" {{ value | rjust :\"10\" }} \" If value is Django , the output will be \" Django\" . safe ¶ Marks a string as not requiring further HTML escaping prior to output. When\nautoescaping is off, this filter has no effect. Note If you are chaining filters, a filter applied after safe can\nmake the contents unsafe again. For example, the following code\nprints the variable as is, unescaped: {{ var | safe | escape }} safeseq ¶ Applies the safe filter to each element of a sequence. Useful in\nconjunction with other filters that operate on sequences, such as join . For example: {{ some_list | safeseq | join :\", \" }} You couldn’t use the safe filter directly in this case, as it would\nfirst convert the variable into a string, rather than working with the\nindividual elements of the sequence. slice ¶ Returns a slice of the list. Uses the same syntax as Python’s list slicing. See the Python documentation for an\nintroduction. Example: {{ some_list | slice :\":2\" }} If some_list is ['a', 'b', 'c'] , the output will be ['a', 'b'] . slugify ¶ Converts to ASCII. Converts spaces to hyphens. Removes characters that aren’t\nalphanumerics, underscores, or hyphens. Converts to lowercase. Also strips\nleading and trailing whitespace. For example: {{ value | slugify }} If value is \"Joel is a slug\" , the output will be \"joel-is-a-slug\" . stringformat ¶ Formats the variable according to the argument, a string formatting specifier.\nThis specifier uses the printf-style String Formatting syntax, with the exception\nthat the leading “%” is dropped. For example: {{ value | stringformat :\"E\" }} If value is 10 , the output will be 1.000000E+01 . striptags ¶ Makes all possible efforts to strip all [X]HTML tags. For example: {{ value | striptags }} If value is \"<b>Joel</b> <button>is</button> a <span>slug</span>\" , the\noutput will be \"Joel is a slug\" . No safety guarantee Note that striptags doesn’t give any guarantee about its output being\nHTML safe, particularly with non valid HTML input. So NEVER apply the safe filter to a striptags output. If you are looking for something\nmore robust, consider using a third-party HTML sanitizing tool. time ¶ Formats a time according to the given format. Given format can be the predefined one TIME_FORMAT , or a custom\nformat, same as the date filter. Note that the predefined format\nis locale-dependent. For example: {{ value | time :\"H:i\" }} If value is equivalent to datetime.datetime.now() , the output will be\nthe string \"01:23\" . Note that you can backslash-escape a format string if you want to use the\n“raw” value. In this example, both “h” and “m” are backslash-escaped, because\notherwise each is a format string that displays the hour and the month,\nrespectively: {{ value | time :\"H\\h i\\m\" }} This would display as “01h 23m”. Another example: Assuming that LANGUAGE_CODE is, for example, \"de\" , then for: {{ value | time :\"TIME_FORMAT\" }} the output will be the string \"01:23\" (The \"TIME_FORMAT\" format\nspecifier for the de locale as shipped with Django is \"H:i\" ). The time filter will only accept parameters in the format string that\nrelate to the time of day, not the date. If you need to format a date value, use the date filter instead (or along with time if\nyou need to render a full datetime value). There is one exception the above rule: When passed a datetime value with\nattached timezone information (a time-zone-aware datetime instance) the time filter will\naccept the timezone-related format specifiers 'e' , 'O' , 'T' and 'Z' . When used without a format string, the TIME_FORMAT format specifier is\nused: {{ value | time }} is the same as: {{ value | time :\"TIME_FORMAT\" }} timesince ¶ Formats a date as the time since that date (e.g., “4 days, 6 hours”). Takes an optional argument that is a variable containing the date to use as\nthe comparison point (without the argument, the comparison point is now ).\nFor example, if blog_date is a date instance representing midnight on 1\nJune 2006, and comment_date is a date instance for 08:00 on 1 June 2006,\nthen the following would return “8 hours”: {{ blog_date | timesince : comment_date }} Comparing offset-naive and offset-aware datetimes will return an empty string. Minutes is the smallest unit used, and “0 minutes” will be returned for any\ndate that is in the future relative to the comparison point. timeuntil ¶ Similar to timesince , except that it measures the time from now until the\ngiven date or datetime. For example, if today is 1 June 2006 and conference_date is a date instance holding 29 June 2006, then {{ conference_date|timeuntil }} will return “4 weeks”. Takes an optional argument that is a variable containing the date to use as\nthe comparison point (instead of now ). If from_date contains 22 June\n2006, then the following will return “1 week”: {{ conference_date | timeuntil : from_date }} Comparing offset-naive and offset-aware datetimes will return an empty string. Minutes is the smallest unit used, and “0 minutes” will be returned for any\ndate that is in the past relative to the comparison point. title ¶ Converts a string into titlecase by making words start with an uppercase\ncharacter and the remaining characters lowercase. This tag makes no effort to\nkeep “trivial words” in lowercase. For example: {{ value | title }} If value is \"my FIRST post\" , the output will be \"My First Post\" . truncatechars ¶ Truncates a string if it is longer than the specified number of characters.\nTruncated strings will end with a translatable ellipsis character (”…”). Argument: Number of characters to truncate to For example: {{ value | truncatechars : 7 }} If value is \"Joel is a slug\" , the output will be \"Joel i…\" . truncatechars_html ¶ Similar to truncatechars , except that it is aware of HTML tags. Any\ntags that are opened in the string and not closed before the truncation point\nare closed immediately after the truncation. For example: {{ value | truncatechars_html : 7 }} If value is \"<p>Joel is a slug</p>\" , the output will be \"<p>Joel i…</p>\" . Newlines in the HTML content will be preserved. Size of input string Processing large, potentially malformed HTML strings can be\nresource-intensive and impact service performance. truncatechars_html limits input to the first five million characters. Changed in Django 3.2.22: In older versions, strings over five million characters were processed. truncatewords ¶ Truncates a string after a certain number of words. Argument: Number of words to truncate after For example: {{ value | truncatewords : 2 }} If value is \"Joel is a slug\" , the output will be \"Joel is …\" . Newlines within the string will be removed. truncatewords_html ¶ Similar to truncatewords , except that it is aware of HTML tags. Any\ntags that are opened in the string and not closed before the truncation point,\nare closed immediately after the truncation. This is less efficient than truncatewords , so should only be used\nwhen it is being passed HTML text. For example: {{ value | truncatewords_html : 2 }} If value is \"<p>Joel is a slug</p>\" , the output will be \"<p>Joel is …</p>\" . Newlines in the HTML content will be preserved. Size of input string Processing large, potentially malformed HTML strings can be\nresource-intensive and impact service performance. truncatewords_html limits input to the first five million characters. Changed in Django 3.2.22: In older versions, strings over five million characters were processed. unordered_list ¶ Recursively takes a self-nested list and returns an HTML unordered list –\nWITHOUT opening and closing <ul> tags. The list is assumed to be in the proper format. For example, if var contains ['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']] , then {{ var|unordered_list }} would return: < li > States < ul > < li > Kansas < ul > < li > Lawrence </ li > < li > Topeka </ li > </ ul > </ li > < li > Illinois </ li > </ ul > </ li > upper ¶ Converts a string into all uppercase. For example: {{ value | upper }} If value is \"Joel is a slug\" , the output will be \"JOEL IS A SLUG\" . urlencode ¶ Escapes a value for use in a URL. For example: {{ value | urlencode }} If value is \"https://www.example.org/foo?a=b&c=d\" , the output will be \"https%3A//www.example.org/foo%3Fa%3Db%26c%3Dd\" . An optional argument containing the characters which should not be escaped can\nbe provided. If not provided, the ‘/’ character is assumed safe. An empty string can be\nprovided when all characters should be escaped. For example: {{ value | urlencode :\"\" }} If value is \"https://www.example.org/\" , the output will be \"https%3A%2F%2Fwww.example.org%2F\" . urlize ¶ Converts URLs and email addresses in text into clickable links. This template tag works on links prefixed with http:// , https:// , or www. . For example, https://djangocon.eu will get converted but djangocon.eu won’t. It also supports domain-only links ending in one of the original top level\ndomains ( .com , .edu , .gov , .int , .mil , .net , and .org ). For example, djangoproject.com gets converted. Links can have trailing punctuation (periods, commas, close-parens) and leading\npunctuation (opening parens), and urlize will still do the right thing. Links generated by urlize have a rel=\"nofollow\" attribute added\nto them. For example: {{ value | urlize }} If value is \"Check out www.djangoproject.com\" , the output will be \"Check out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www.djangoproject.com</a>\" . In addition to web links, urlize also converts email addresses into mailto: links. If value is \"Send questions to foo@example.com\" , the output will be \"Send questions to <a href=\"mailto:foo@example.com\">foo@example.com</a>\" . The urlize filter also takes an optional parameter autoescape . If autoescape is True , the link text and URLs will be escaped using\nDjango’s built-in escape filter. The default value for autoescape is True . Note If urlize is applied to text that already contains HTML markup, or to\nemail addresses that contain single quotes ( ' ), things won’t work as\nexpected. Apply this filter only to plain text. Warning Using urlize or urlizetrunc can incur a performance penalty, which\ncan become severe when applied to user controlled values such as content\nstored in a TextField . You can use truncatechars to add a limit to such inputs: {{ value | truncatechars : 500 | urlize }} urlizetrunc ¶ Converts URLs and email addresses into clickable links just like urlize , but\ntruncates URLs longer than the given character limit. Argument: Number of characters that link text should be truncated to,\nincluding the ellipsis that’s added if truncation is necessary. For example: {{ value | urlizetrunc : 15 }} If value is \"Check out www.djangoproject.com\" , the output would be 'Check out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www.djangoproj…</a>' . As with urlize , this filter should only be applied to plain text. wordcount ¶ Returns the number of words. For example: {{ value | wordcount }} If value is \"Joel is a slug\" , the output will be 4 . wordwrap ¶ Wraps words at specified line length. Argument: number of characters at which to wrap the text For example: {{ value | wordwrap : 5 }} If value is Joel is a slug , the output would be: Joel\nis a\nslug yesno ¶ Maps values for True , False , and (optionally) None , to the strings\n“yes”, “no”, “maybe”, or a custom mapping passed as a comma-separated list, and\nreturns one of those strings according to the value: For example: {{ value | yesno :\"yeah,no,maybe\" }} Value Argument Outputs True yes True \"yeah,no,maybe\" yeah False \"yeah,no,maybe\" no None \"yeah,no,maybe\" maybe None \"yeah,no\" no (converts None to False if no mapping for None is given) Internationalization tags and filters ¶ Django provides template tags and filters to control each aspect of internationalization in templates. They allow for\ngranular control of translations, formatting, and time zone conversions. i18n ¶ This library allows specifying translatable text in templates.\nTo enable it, set USE_I18N to True , then load it with {% load i18n %} . See Internationalization: in template code . l10n ¶ This library provides control over the localization of values in templates.\nYou only need to load the library using {% load l10n %} . See Controlling localization in templates . tz ¶ This library provides control over time zone conversions in templates.\nLike l10n , you only need to load the library using {% load tz %} ,\nbut you’ll usually also set USE_TZ to True so that conversion\nto local time happens by default. See Time zone aware output in templates . Other tags and filters libraries ¶ Django comes with a couple of other template-tag libraries that you have to\nenable explicitly in your INSTALLED_APPS setting and enable in your\ntemplate with the {% load %} tag. django.contrib.humanize ¶ A set of Django template filters useful for adding a “human touch” to data. See django.contrib.humanize . static ¶ static ¶ To link to static files that are saved in STATIC_ROOT Django ships\nwith a static template tag. If the django.contrib.staticfiles app is installed, the tag will serve files using url() method of the\nstorage specified by staticfiles in STORAGES . For example: {% load static %} < img src = \" {% static 'images/hi.jpg' %} \" alt = \"Hi!\" > It is also able to consume standard context variables, e.g. assuming a user_stylesheet variable is passed to the template: {% load static %} < link rel = \"stylesheet\" href = \" {% static user_stylesheet %} \" media = \"screen\" > If you’d like to retrieve a static URL without displaying it, you can use a\nslightly different call: {% load static %} {% static \"images/hi.jpg\" as myphoto %} < img src = \" {{ myphoto }} \" alt = \"Hi!\" > Using Jinja2 templates? See Jinja2 for information on\nusing the static tag with Jinja2. get_static_prefix ¶ You should prefer the static template tag, but if you need more control\nover exactly where and how STATIC_URL is injected into the template,\nyou can use the get_static_prefix template tag: {% load static %} < img src = \" {% get_static_prefix %} images/hi.jpg\" alt = \"Hi!\" > There’s also a second form you can use to avoid extra processing if you need\nthe value multiple times: {% load static %} {% get_static_prefix as STATIC_PREFIX %} < img src = \" {{ STATIC_PREFIX }} images/hi.jpg\" alt = \"Hi!\" > < img src = \" {{ STATIC_PREFIX }} images/hi2.jpg\" alt = \"Hello!\" > get_media_prefix ¶ Similar to the get_static_prefix , get_media_prefix populates a\ntemplate variable with the media prefix MEDIA_URL , e.g.: {% load static %} < body data-media-url = \" {% get_media_prefix %} \" > By storing the value in a data attribute, we ensure it’s escaped appropriately\nif we want to use it in a JavaScript context.", "keywords": ["iterable", "friend", "base.html", "work", "lt", "breaks", "data.items", "variable", "l", "timeuntil", "punctuation", "h3", "hints", "comma", "type", "line", "https://", "www.djangoproject.com", "round", "url", "thu", "we", "thousand_separator", "fallback", "book", "center", "bc", "rows", "namedtuple", "urlizetrunc", "place", "id", "settings", "…", "m", "bar.png", "day", "greater", "getitem", "ships", "break", "method", "mumbai", "party", "timequake", "points", "value|floatformat:\"0", "person", "o", "abcdef", "max_width", "wrong", "author.age", "divisibleby", "performance", "boolean", "alice", "foo/", "use", "extends", "eastern", "views", "messages", "escaping", "us", "ies", "ways", "principle", "difference", "items", "right", "sample", "var2", "project", "tab", "minutes", "default_if_none", "yesno", "equivalent", "way", "filters", "default", "option", "formatter", "iteration", "src", "piece", "kansas", "media_url", "penalty", "client", "effort", "domain", "make_list", "rowvalue2", "v1", "closebrace", "page", "east", "block", "kib", "package", "base1.html", "myblock", "zeros", "combinations", "mind", "age", "timesince", "value|floatformat:\"g", "users", "tool", "iterations", "slug</span", "<", "stylesheet", "forloop.parentloop", "autoescaping", "self", "base2.html", "argument", "resetcycle", "greenwich", "converts", "prints", "t", "words", "paginator", "localization", "auto", "django.contrib.staticfiles", "dir1/", "est", "autoescape", "comment_date", "urlize", "images", "integer", "alpha", "conjunction", "script\\\\u003e\\\\u0026amp", "cross", "environments", "str.join(list", "forloop.first", "forgeries", "outcomes", "slug</p", "future", "month", "querydict", "properties", "x", "cheerleader_list", "comment", "alt", "e", "policy", "gmt", "element", "printf", "datetime.tzinfo", "regrouping", "walrus", "name", "centers", "pattern", "4th", "monday", "json_script", "world", "operator", "stops", "size", "space", "escapeseq", "python", "link", "above", "containers", "backslash", "addition", "instances", "id>/", "sunday", "value|floatformat:\"3", "formats", "wordwrap", "titlecase", "guarantee", "lookup", "defines", "storage", "sublist", "others", "class=\"even", "rule", "tag", "|", "\\d\\e", "h1", "class=\"odd", "display", "arg2", "true", "*", "periods", "structure", "cycles", "locale", "joe", "https://www.example.org/foo?a=b&c=d", "djangocon.eu", "capitalizes", "sizes", "am", ".first", "amp", "business.employees.count", "processor", "opening", "item.data", "blog_date", "date.date", "past", "length", "blocktranslate", "march", "hours", "key", "truncates", "parameters", "blocks", "japan", "members", "rel", ".", "english", "gb", "container", "zone", "state", "dictionary", "urlconf", "suffix", "red&color", "characters", "template.html", "odd", "encounter", "operators", "resolution", "script", "separation", "pprint.pprint", "error", "175/200", "differences", "identity", "coach.name", "xss", "template", "debug", "bar.html", "gt", "m&page=3", "literals", "control", "charts", "datetime", "endautoescape", "january", "%", "restart", "rendering", "01h", "static", "order", "specifiers", "documentation", "replacements", "style", "user_stylesheet", "negated", "openblock", "quote", "iri_to_uri", "application", "datetime.datetime.now", "foo@example.com", "listopad", "table", "athlete_list", "unordered_list", "behavior", "php", "system", "es", "grouping", "mib", "concept", "maps", "forloop.revcounter", "modules", "files", "query", "weeks", "var", "following", "coaches", "some_list", "h", "hyphens", "athlete", "bar", "w", "'", "information", "local_cities", "conference_date", "ellipsis", "paths", "json", "result", "#", "point", "newline", "noon", "section", "versions", "¶", "service", "inequality", "may", "web", "definition", "paragraphs", "hello", "iso-8601", "date_format", "marks", "couple", "wordcount", "-500", "george", "-1", "regroups", "precedence", "format", "stringwithspaces", "render", "dec", "word", "client/123/", "example", "athlete_list|length", "book.author.name", "units", ".mil", "listopada", "row2", "unit", "year", "-43200", "identifier", "♥", "powers", "value", "timezones", "var1", "endfilter", "dry", "n", "room", "offset", "rowvalue1", "cities", "https://djangocon.eu", "introduction", "touch", "django.contrib.humanize", "c", "html", "value</strong", "stringformat", "album", "efforts", "cherr", "gotcha", "examples", "city", "v2", "foo@example.com\">foo@example.com</a", "things", "forloop.counter", "details", "slug", "amy", "enero", "num_messages", "silence", "rfc", "truncatewords_html", "form", "object", "root", "quot", "warning", "andrea", "coach_list", "library", "attributes", "comparison", "one", "returns", "joel\\nis", "athletes", "parent", "verbose", "conversion", "regroup", "div", "myapp", "array", "alphanumerics", "domains", "sequence", "get_static_prefix", "paragraph", "my_list", "note", "city.population", "singular", "wraps", "numbering", "joel", "conditions", "post", "level", "django", "days", "fri", ".net", "message", "fact", "rd", "verbatim", "parameter", "syntax", "stuff", "csrf", "text", "slice", "melissa", "field", "commas", "contents", "+0200", "strings", "var3", "microseconds", "u", "opencomment", "debugging", "whitespace", "libraries", "safeseq", "iri", "row3", "effect", "layer", "digits", "=", "leap", "objects", "june", "chicago", "truncatewords", "relative", "implementation", "matches", "athlete.name", "lists", "index", "pprint", "wrapper", "match", "https%3a%2f%2fwww.example.org%2f", "data['items", "gareth", "+", "truncation", "utc", "populates", "datetimes", "plural", "button", "country.grouper", "obj", "staticfiles", "./base2.html", "red&size", "openbrace", "total", "handling", "templates", "lots", "backtick", "places", "time", "select_template", "exception", "count", "base3.html", "newlines", "loader", "letter", "http://", "category", "slicing", "queryset", "i18n", "employee", "lowercase", "september", "site", "d", "problem", "bytes", "saturday", "static_prefix", "john", "my/", "load", "output", "fields", "jinja2", "datetime_format", "static_url", "m&page=4", "x27", "height", "custom", "literal", "f", "locker", "books", "methods", "machine", "keyword", "i\\'m", "truncatechars", "harry", "coordinates", "none", "urls", "variables", "join", "loop", "process", "access", "abcd", "javascript", ">", "js", "email", "first", "dot", "content", "color", "num_walruses", "upper", "seconds", "end", "tick", "week", "unix", "lewis", "forloop.revcounter0", "strips", "request", "09/01/2008", "inheritance", "attacks", "internationalization", "controlling", "cycle", "b", "negation", "engine", "floatformat", "linebreaks", "mapping", "copyright", "thing", "hi2.jpg", "escapejs", "href=\"http://www.djangoproject.com", "href", "screen", "protection", "short_date_format", "data", "rjust", "group", "pub_date", "get_digit", "ratio", "complex", "clarity", "sake", "is</button", "city.name", "friday", "states", "alternating", "storages", "nick", "optional", "feb.", "aligns", "child", "countries", "</p", "execution", "description", "s", "keys", "beta", "india", "sequences", "author", "path", "const", "archive", "endif", "directory", "st", "widthratio", "somevar", "spaceless", "topeka", "elements", "lorem", "markup", "e.g.", "arguments", "practice", "parse", "endverbatim", "press", "sorry", "context", "this_value", "endcomment", "rowcolors", "si", "security", "kurt", "phone", "pages", "underscores", "epoch", "arg1", "row", "coach.athlete_set.all", "call", "title", "pixels", "width", "addresses", "slashes", "kb", "similar", "substring", "associated", "image", "types", "truncatechars_html", "current_year", "country", "linenumbers", "country.list", "p", "background", "short_datetime_format", "changes", "internationalized", "filter", "questions", "myphoto", "rules", "international", "closing", "escape", "getelementbyid", "forloop.counter0", "false", "jan.", "name_snippet.html", "midnight", "ul", "tests", "g", "check", "linebreaksbr", "inputs", "pipes", "integers", "values", "quotes", "otherlibrary", "cases", "solution", "conference_date|timeuntil", "time_format", "new", "notation", "times", "left", "j", "caches", "item", "l10n", "row1", "lawrence", "translations", "conversions", "media", "today", "safety", "test", "querystring", "spaces", "subtemplate", "resource", "value|floatformat", "arg", "img", "timezone", "outputs", "input", "usage", "greetings", "applies", "z", "hi.jpg", "y", "character", "processing", "snippet", "iso", "york", "equality", "app_views.client", "calcutta", "letters", "results", "jane", "x]html", "formatters", "span", "displays", "use_tz", "pm", "n’t", "templatetag", "formatting", "rel=\"nofollow\">www.djangoproject.com</a", "installed_apps", "parentheses", "parens", "loads", "case", "designers", "book.title", "class", "number", "my_query_dict", "closecomment", "choices", "project_name.app_name.urls", "numbers", "ipsum", "myvalue", "polish", "constant", "illinois", "digit", "rel=\"nofollow\">www.djangoproj", "aspect", "a.m.", "executes", "abbreviation", "ones", "attribute", "function", "p.m.", "br", "li", "string", "get_country_display", "list", "uppercase", "bit", "href=\"mailto", "country=’india", "replaces", "view", "app", "www", "tz", "max_value", "urlencode", "uses", "i", "body", "joins", "mb", "dolor", "blue", "extension", "user", "part", "file", "usa", "somelibrary", "mdt", "value|floatformat:\"-3", "value|floatformat:\"3u", "phone2numeric", "mailto", "grouper", "endfor", "dictionaries", "notice", "./", "r", "escapes", "pluralize", "filesizeformat", "random", "template_name", "tr", "lack", "./my", "de", "exceptions", "client/<int", "force_escape", "app_views", "population", "country.description", "from_date", ".edu", "dictsort", "names", "signals", "amet", "clause", "tokyo", "num_cherries", "clauses", "expressions", "pl", "scope", "float", "tags", "document", "minor", "date", "closevariable", "csv", "jan", "representation", "collect", "set", "textfield", "foo", "database", "get_foo_display", "reverse", "gib", "limit", "expression", "hour", "reference", "instance", "striptags", "code", "links", "firstof", "strategy", "greeting", "coach", "loops"], "type": "documentation"},
{"title": "The Django template language", "url": "https://docs.djangoproject.com/en/5.1/ref/templates/language/", "content": "The Django template language ¶ This document explains the language syntax of the Django template system. If\nyou’re looking for a more technical perspective on how it works and how to\nextend it, see The Django template language: for Python programmers . Django’s template language is designed to strike a balance between power and\nease. It’s designed to feel comfortable to those used to working with HTML. If\nyou have any exposure to other text-based template languages, such as Smarty or Jinja2 , you should feel right at home with Django’s templates. Philosophy If you have a background in programming, or if you’re used to languages\nwhich mix programming code directly into HTML, you’ll want to bear in\nmind that the Django template system is not simply Python embedded into\nHTML. This is by design: the template system is meant to express\npresentation, not program logic. The Django template system provides tags which function similarly to some\nprogramming constructs – an if tag for boolean tests, a for tag for looping, etc. – but these are not simply executed as the\ncorresponding Python code, and the template system will not execute\narbitrary Python expressions. Only the tags, filters and syntax listed below\nare supported by default (although you can add your own extensions to the template language as needed). Templates ¶ A template is a text file. It can generate any text-based format (HTML, XML,\nCSV, etc.). A template contains variables , which get replaced with values when the\ntemplate is evaluated, and tags , which control the logic of the template. Below is a minimal template that illustrates a few basics. Each element will be\nexplained later in this document. {% extends \"base_generic.html\" %} {% block title %}{{ section.title }}{% endblock %} {% block content %} < h1 > {{ section.title }} </ h1 > {% for story in story_list %} < h2 > < a href = \" {{ story.get_absolute_url }} \" > {{ story.headline | upper }} </ a > </ h2 > < p > {{ story.tease | truncatewords :\"100\" }} </ p > {% endfor %} {% endblock %} Philosophy Why use a text-based template instead of an XML-based one (like Zope’s\nTAL)? We wanted Django’s template language to be usable for more than\njust XML/HTML templates. You can use the template language for any\ntext-based format such as emails, JavaScript and CSV. Variables ¶ Variables look like this: {{ variable }} . When the template engine\nencounters a variable, it evaluates that variable and replaces it with the\nresult. Variable names consist of any combination of alphanumeric characters\nand the underscore ( \"_\" ) but may not start with an underscore, and may not\nbe a number. The dot ( \".\" ) also appears in variable sections, although that\nhas a special meaning, as indicated below. Importantly, you cannot have spaces\nor punctuation characters in variable names. Use a dot ( . ) to access attributes of a variable. Behind the scenes Technically, when the template system encounters a dot, it tries the\nfollowing lookups, in this order: Dictionary lookup Attribute or method lookup Numeric index lookup If the resulting value is callable, it is called with no arguments. The\nresult of the call becomes the template value. This lookup order can cause some unexpected behavior with objects that\noverride dictionary lookup. For example, consider the following code snippet\nthat attempts to loop over a collections.defaultdict : {% for k , v in defaultdict.items %} Do something with k and v here... {% endfor %} Because dictionary lookup happens first, that behavior kicks in and provides\na default value instead of using the intended .items() method. In this\ncase, consider converting to a dictionary first. In the above example, {{ section.title }} will be replaced with the title attribute of the section object. If you use a variable that doesn’t exist, the template system will insert the\nvalue of the string_if_invalid option, which is set to '' (the empty\nstring) by default. Note that “bar” in a template expression like {{ foo.bar }} will be\ninterpreted as a literal string and not using the value of the variable “bar”,\nif one exists in the template context. Variable attributes that begin with an underscore may not be accessed as\nthey’re generally considered private. Filters ¶ You can modify variables for display by using filters . Filters look like this: {{ name|lower }} . This displays the value of the {{ name }} variable after being filtered through the lower filter, which converts text to lowercase. Use a pipe ( | ) to apply a filter. Filters can be “chained.” The output of one filter is applied to the next. {{ text|escape|linebreaks }} is a common idiom for escaping text contents,\nthen converting line breaks to <p> tags. Some filters take arguments. A filter argument looks like this: {{ bio|truncatewords:30 }} . This will display the first 30 words of the bio variable. Filter arguments that contain spaces must be quoted; for example, to join a\nlist with commas and spaces you’d use {{ list|join:\", \" }} . Django provides about sixty built-in template filters. You can read all about\nthem in the built-in filter reference .\nTo give you a taste of what’s available, here are some of the more commonly\nused template filters: default If a variable is false or empty, use given default. Otherwise, use the\nvalue of the variable. For example: {{ value | default :\"nothing\" }} If value isn’t provided or is empty, the above will display\n“ nothing ”. length Returns the length of the value. This works for both strings and lists.\nFor example: {{ value | length }} If value is ['a', 'b', 'c', 'd'] , the output will be 4 . filesizeformat Formats the value like a “human-readable” file size (i.e. '13 KB' , '4.1 MB' , '102 bytes' , etc.). For example: {{ value | filesizeformat }} If value is 123456789, the output would be 117.7 MB . Again, these are just a few examples; see the built-in filter reference for the complete list. You can also create your own custom template filters; see How to create custom template tags and filters . See also Django’s admin interface can include a complete reference of all template\ntags and filters available for a given site. See The Django admin documentation generator . Tags ¶ Tags look like this: {% tag %} . Tags are more complex than variables: Some\ncreate text in the output, some control flow by performing loops or logic, and\nsome load external information into the template to be used by later variables. Some tags require beginning and ending tags (i.e. {% tag %} ... tag contents ... {% endtag %} ). Django ships with about two dozen built-in template tags. You can read all about\nthem in the built-in tag reference . To give\nyou a taste of what’s available, here are some of the more commonly used\ntags: for Loop over each item in an array.  For example, to display a list of athletes\nprovided in athlete_list : < ul > {% for athlete in athlete_list %} < li > {{ athlete.name }} </ li > {% endfor %} </ ul > if , elif , and else Evaluates a variable, and if that variable is “true” the contents of the\nblock are displayed: {% if athlete_list %} Number of athletes: {{ athlete_list | length }} {% elif athlete_in_locker_room_list %} Athletes should be out of the locker room soon! {% else %} No athletes. {% endif %} In the above, if athlete_list is not empty, the number of athletes\nwill be displayed by the {{ athlete_list|length }} variable. Otherwise,\nif athlete_in_locker_room_list is not empty, the message “Athletes\nshould be out…” will be displayed. If both lists are empty,\n“No athletes.” will be displayed. You can also use filters and various operators in the if tag: {% if athlete_list | length > 1 %} Team: {% for athlete in athlete_list %} ... {% endfor %} {% else %} Athlete: {{ athlete_list.0.name }} {% endif %} While the above example works, be aware that most template filters return\nstrings, so mathematical comparisons using filters will generally not work\nas you expect. length is an exception. block and extends Set up template inheritance (see below), a powerful way\nof cutting down on “boilerplate” in templates. Again, the above is only a selection of the whole list; see the built-in\ntag reference for the complete list. You can also create your own custom template tags; see How to create custom template tags and filters . See also Django’s admin interface can include a complete reference of all template\ntags and filters available for a given site. See The Django admin documentation generator . Comments ¶ To comment-out part of a line in a template, use the comment syntax: {# #} . For example, this template would render as 'hello' : {# greeting #} hello A comment can contain any template code, invalid or not. For example: {# {% if foo %}bar{% else %} #} This syntax can only be used for single-line comments (no newlines are permitted\nbetween the {# and #} delimiters). If you need to comment out a\nmultiline portion of the template, see the comment tag. Template inheritance ¶ The most powerful – and thus the most complex – part of Django’s template\nengine is template inheritance. Template inheritance allows you to build a base\n“skeleton” template that contains all the common elements of your site and\ndefines blocks that child templates can override. Let’s look at template inheritance by starting with an example: <!DOCTYPE html> < html lang = \"en\" > < head > < link rel = \"stylesheet\" href = \"style.css\" > < title > {% block title %} My amazing site {% endblock %} </ title > </ head > < body > < div id = \"sidebar\" > {% block sidebar %} < ul > < li >< a href = \"/\" > Home </ a ></ li > < li >< a href = \"/blog/\" > Blog </ a ></ li > </ ul > {% endblock %} </ div > < div id = \"content\" > {% block content %}{% endblock %} </ div > </ body > </ html > This template, which we’ll call base.html , defines an HTML skeleton\ndocument that you might use for a two-column page. It’s the job of “child”\ntemplates to fill the empty blocks with content. In this example, the block tag defines three blocks that child\ntemplates can fill in. All the block tag does is to tell the template\nengine that a child template may override those portions of the template. A child template might look like this: {% extends \"base.html\" %} {% block title %} My amazing blog {% endblock %} {% block content %} {% for entry in blog_entries %} < h2 > {{ entry.title }} </ h2 > < p > {{ entry.body }} </ p > {% endfor %} {% endblock %} The extends tag is the key here. It tells the template engine that\nthis template “extends” another template. When the template system evaluates\nthis template, first it locates the parent – in this case, “base.html”. At that point, the template engine will notice the three block tags\nin base.html and replace those blocks with the contents of the child\ntemplate. Depending on the value of blog_entries , the output might look\nlike: <!DOCTYPE html> < html lang = \"en\" > < head > < link rel = \"stylesheet\" href = \"style.css\" > < title > My amazing blog </ title > </ head > < body > < div id = \"sidebar\" > < ul > < li >< a href = \"/\" > Home </ a ></ li > < li >< a href = \"/blog/\" > Blog </ a ></ li > </ ul > </ div > < div id = \"content\" > < h2 > Entry one </ h2 > < p > This is my first entry. </ p > < h2 > Entry two </ h2 > < p > This is my second entry. </ p > </ div > </ body > </ html > Note that since the child template didn’t define the sidebar block, the\nvalue from the parent template is used instead. Content within a {% block %} tag in a parent template is always used as a fallback. You can use as many levels of inheritance as needed. One common way of using\ninheritance is the following three-level approach: Create a base.html template that holds the main look-and-feel of your\nsite. Create a base_SECTIONNAME.html template for each “section” of your\nsite. For example, base_news.html , base_sports.html . These\ntemplates all extend base.html and include section-specific\nstyles/design. Create individual templates for each type of page, such as a news\narticle or blog entry. These templates extend the appropriate section\ntemplate. This approach maximizes code reuse and helps to add items to shared content\nareas, such as section-wide navigation. Here are some tips for working with inheritance: If you use {% extends %} in a template, it must be the first template\ntag in that template. Template inheritance won’t work, otherwise. More {% block %} tags in your base templates are better. Remember,\nchild templates don’t have to define all parent blocks, so you can fill\nin reasonable defaults in a number of blocks, then only define the ones\nyou need later. It’s better to have more hooks than fewer hooks. If you find yourself duplicating content in a number of templates, it\nprobably means you should move that content to a {% block %} in a\nparent template. If you need to get the content of the block from the parent template,\nthe {{ block.super }} variable will do the trick. This is useful\nif you want to add to the contents of a parent block instead of\ncompletely overriding it. Data inserted using {{ block.super }} will\nnot be automatically escaped (see the next section ), since it was\nalready escaped, if necessary, in the parent template. By using the same template name as you are inheriting from, {% extends %} can be used to inherit a template at the same\ntime as overriding it. Combined with {{ block.super }} , this can be a\npowerful way to make small customizations. See Extending an overridden template in the Overriding templates How-to\nfor a full example. Variables created outside of a {% block %} using the template\ntag as syntax can’t be used inside the block. For example, this template\ndoesn’t render anything: {% translate \"Title\" as title %} {% block content %}{{ title }}{% endblock %} For extra readability, you can optionally give a name to your {% endblock %} tag. For example: {% block content %} ... {% endblock content %} In larger templates, this technique helps you see which {% block %} tags are being closed. {% block %} tags are evaluated first. That’s why the content\nof a block is always overridden, regardless of the truthiness of surrounding\ntags. For example, this template will always override the content of the title block: {% if change_title %} {% block title %} Hello! {% endblock title %} {% endif %} Finally, note that you can’t define multiple block tags with the same\nname in the same template. This limitation exists because a block tag works in\n“both” directions. That is, a block tag doesn’t just provide a hole to fill –\nit also defines the content that fills the hole in the parent . If there were\ntwo similarly-named block tags in a template, that template’s parent\nwouldn’t know which one of the blocks’ content to use. Automatic HTML escaping ¶ When generating HTML from templates, there’s always a risk that a variable will\ninclude characters that affect the resulting HTML. For example, consider this\ntemplate fragment: Hello, {{ name }} At first, this seems like a harmless way to display a user’s name, but consider\nwhat would happen if the user entered their name as this: < script > alert ( 'hello' )</ script > With this name value, the template would be rendered as: Hello, < script > alert ( 'hello' )</ script > …which means the browser would pop-up a JavaScript alert box! Similarly, what if the name contained a '<' symbol, like this? < b > username That would result in a rendered template like this: Hello, < b > username …which, in turn, would result in the remainder of the web page being in bold! Clearly, user-submitted data shouldn’t be trusted blindly and inserted directly\ninto your web pages, because a malicious user could use this kind of hole to\ndo potentially bad things. This type of security exploit is called a Cross Site Scripting (XSS) attack. To avoid this problem, you have two options: One, you can make sure to run each untrusted variable through the escape filter (documented below), which converts potentially\nharmful HTML characters to unharmful ones. This was the default solution\nin Django for its first few years, but the problem is that it puts the\nonus on you , the developer / template author, to ensure you’re escaping\neverything. It’s easy to forget to escape data. Two, you can take advantage of Django’s automatic HTML escaping. The\nremainder of this section describes how auto-escaping works. By default in Django, every template automatically escapes the output\nof every variable tag. Specifically, these five characters are\nescaped: < is converted to &lt; > is converted to &gt; ' (single quote) is converted to &#x27; \" (double quote) is converted to &quot; & is converted to &amp; Again, we stress that this behavior is on by default. If you’re using Django’s\ntemplate system, you’re protected. How to turn it off ¶ If you don’t want data to be auto-escaped, on a per-site, per-template level or\nper-variable level, you can turn it off in several ways. Why would you want to turn it off? Because sometimes, template variables\ncontain data that you intend to be rendered as raw HTML, in which case you\ndon’t want their contents to be escaped. For example, you might store a blob of\nHTML in your database and want to embed that directly into your template. Or,\nyou might be using Django’s template system to produce text that is not HTML\n– like an email message, for instance. For individual variables ¶ To disable auto-escaping for an individual variable, use the safe filter: This will be escaped: {{ data }} This will not be escaped: {{ data | safe }} Think of safe as shorthand for safe from further escaping or can be\nsafely interpreted as HTML . In this example, if data contains '<b>' ,\nthe output will be: This will be escaped: &lt; b &gt; This will not be escaped: < b > For template blocks ¶ To control auto-escaping for a template, wrap the template (or a particular\nsection of the template) in the autoescape tag, like so: {% autoescape off %} Hello {{ name }} {% endautoescape %} The autoescape tag takes either on or off as its argument. At\ntimes, you might want to force auto-escaping when it would otherwise be\ndisabled. Here is an example template: Auto-escaping is on by default. Hello {{ name }} {% autoescape off %} This will not be auto-escaped: {{ data }} .\n\n    Nor this: {{ other_data }} {% autoescape on %} Auto-escaping applies again: {{ name }} {% endautoescape %} {% endautoescape %} The auto-escaping tag passes its effect onto templates that extend the\ncurrent one as well as templates included via the include tag,\njust like all block tags. For example: base.html ¶ {% autoescape off %} < h1 > {% block title %}{% endblock %} </ h1 > {% block content %} {% endblock %} {% endautoescape %} child.html ¶ {% extends \"base.html\" %} {% block title %} This &amp; that {% endblock %} {% block content %}{{ greeting }}{% endblock %} Because auto-escaping is turned off in the base template, it will also be\nturned off in the child template, resulting in the following rendered\nHTML when the greeting variable contains the string <b>Hello!</b> : < h1 > This &amp; that </ h1 > < b > Hello! </ b > Notes ¶ Generally, template authors don’t need to worry about auto-escaping very much.\nDevelopers on the Python side (people writing views and custom filters) need to\nthink about the cases in which data shouldn’t be escaped, and mark data\nappropriately, so things Just Work in the template. If you’re creating a template that might be used in situations where you’re\nnot sure whether auto-escaping is enabled, then add an escape filter\nto any variable that needs escaping. When auto-escaping is on, there’s no\ndanger of the escape filter double-escaping data – the escape filter does not affect auto-escaped variables. String literals and automatic escaping ¶ As we mentioned earlier, filter arguments can be strings: {{ data | default :\"This is a string literal.\" }} All string literals are inserted without any automatic escaping into the\ntemplate – they act as if they were all passed through the safe filter. The reasoning behind this is that the template author is in control of\nwhat goes into the string literal, so they can make sure the text is correctly\nescaped when the template is written. This means you would write : {{ data | default :\"3 &lt; 2\" }} …rather than: {{ data | default :\"3 < 2\" }} {# Bad! Don't do this. #} This doesn’t affect what happens to data coming from the variable itself.\nThe variable’s contents are still automatically escaped, if necessary, because\nthey’re beyond the control of the template author. Accessing method calls ¶ Most method calls attached to objects are also available from within templates.\nThis means that templates have access to much more than just class attributes\n(like field names) and variables passed in from views. For example, the Django\nORM provides the “entry_set” syntax for\nfinding a collection of objects related on a foreign key. Therefore, given\na model called “comment” with a foreign key relationship to a model called\n“task” you can loop through all comments attached to a given task like this: {% for comment in task.comment_set.all %} {{ comment }} {% endfor %} Similarly, QuerySets provide a count() method\nto count the number of objects they contain. Therefore, you can obtain a count\nof all comments related to the current task with: {{ task.comment_set.all.count }} You can also access methods you’ve explicitly defined on your own models: models.py ¶ class Task ( models . Model ): def foo ( self ): return \"bar\" template.html ¶ {{ task.foo }} Because Django intentionally limits the amount of logic processing available\nin the template language, it is not possible to pass arguments to method calls\naccessed from within templates. Data should be calculated in views, then passed\nto templates for display. Custom tag and filter libraries ¶ Certain applications provide custom tag and filter libraries. To access them in\na template, ensure the application is in INSTALLED_APPS (we’d add 'django.contrib.humanize' for this example), and then use the load tag in a template: {% load humanize %} {{ 45000 | intcomma }} In the above, the load tag loads the humanize tag library, which then\nmakes the intcomma filter available for use. If you’ve enabled django.contrib.admindocs , you can consult the documentation area in your\nadmin to find the list of custom libraries in your installation. The load tag can take multiple library names, separated by spaces.\nExample: {% load humanize i18n %} See How to create custom template tags and filters for information on writing your own custom\ntemplate libraries. Custom libraries and template inheritance ¶ When you load a custom tag or filter library, the tags/filters are only made\navailable to the current template – not any parent or child templates along\nthe template-inheritance path. For example, if a template foo.html has {% load humanize %} , a child\ntemplate (e.g., one that has {% extends \"foo.html\" %} ) will not have\naccess to the humanize template tags and filters. The child template is\nresponsible for its own {% load humanize %} . This is a feature for the sake of maintainability and sanity. See also The Templates Reference Covers built-in tags, built-in filters, using an alternative template\nlanguage, and more.", "keywords": ["base.html", "column", "comments", "punctuation", "breaks", "section.title", "lt", "variable", "type", "line", "fallback", "truthiness", "athlete_list.0.name", "tal", "scenes", "limitation", "username", "perspective", "method", "zope", "authors", "use", "extends", "views", "escaping", "ways", "items", "way", "filters", "default", "reasoning", "blob", "option", "page", "block", "kind", "mind", "defaultdict.items", "child.html", "<", "stylesheet", "self", "people", "argument", "words", "text|escape|linebreaks", "auto", "autoescape", "story.get_absolute_url", "exploit", "cross", "generator", "comment", "element", "name", "team", "admin", "size", "programming", "python", "link", "above", "amount", "taste", "formats", "sections", "lookup", "defines", "orm", "maintainability", "tag", "|", "h1", "collections.defaultdict", "display", "presentation", "covers", "head", "h2", "turn", "amp", "logic", "length", "feature", "key", "levels", "collection", "blocks", "rel", "characters", "template.html", "operators", "script", "browser", "xss", "design", "template", "alert", "control", "gt", "story", "literals", "selection", "endautoescape", "%", "order", "documentation", "smarty", "comparisons", "quote", "remainder", "application", "scripting", "entry_set", "athlete_list", "reuse", "behavior", "system", "risk", "navigation", "area", "athlete", "bar", "'", "information", "article", "result", "#", "change_title", "point", "section", "¶", "web", "format", "technically", "beginning", "example", "athlete_list|length", "entry.body", "value", "bio", "room", "languages", "blog", "django.contrib.humanize", "c", "html", "tips", "examples", "things", "exposure", "areas", "foo.bar", "block.super", "object", "home", "quot", "task", "symbol", "one", "attributes", "library", "returns", "athletes", "parent", "multiline", "div", "array", "box", "level", "django", "message", "lang", "syntax", "text", "approach", "field", "commas", "contents", "strings", "athlete_in_locker_room_list", "libraries", "effect", "=", "objects", "news", "language", "defaults", "truncatewords", "athlete.name", "index", "lists", "interface", "intcomma", "sanity", "templates", "trick", "works", "time", "exception", "count", "newlines", "doctype", "pipe", "i18n", "site", "d", "problem", "bytes", "feel", "meaning", "customizations", "philosophy", "load", "output", "base_sports.html", "hole", "jinja2", "/blog/", "x27", "custom", "locker", "bio|truncatewords:30", "methods", "side", "task.comment_set.all", "idiom", "variables", "loop", "base", "access", "string_if_invalid", "javascript", "email", "dot", "content", "delimiters", "foo.html", "applications", "inheritance", "advantage", "b", "engine", "attack", "blog_entries", "href", "data", "skeleton", "lookups", "sidebar", "options", "sake", "notes", "readability", "’s", "task.comment_set.all.count", "combination", "job", "child", "bar{%", "base_news.html", "author", "path", "elements", "arguments", "program", "balance", "context", "humanize", "hooks", "endtag", "security", "models", "pages", "other_data", "shorthand", "title", "call", "ease", "kb", "v", "k", "developer", "querysets", "directions", "p", "background", ".items", "filter", "escape", "portion", "story.headline", "name|lower", "base_generic.html", "ul", "_", "tests", "values", "list|join", "cases", "solution", "boilerplate", "times", "item", "underscore", "spaces", "fragment", "model", "processing", "snippet", "calls", "n’t", "basics", "years", "case", "class", "number", "xml", "programmers", "return", "constructs", "danger", "attribute", "ones", "developers", "li", "string", "list", "styles", "flow", "body", "mb", "user", "part", "file", "installation", "emails", "endfor", "extensions", "filesizeformat", "numeric", "situations", "names", "technique", "expressions", "document", "tags", "csv", "foo", "database", "relationship", "base_sectionname.html", "expression", "reference", "instance", "code", "endblock", "per", "loops", "entry", "greeting", "power", "dozen", "onus", "portions"], "type": "documentation"},
{"title": "Templates", "url": "https://docs.djangoproject.com/en/5.1/ref/templates/", "content": "Templates ¶ Django’s template engine provides a powerful mini-language for defining the\nuser-facing layer of your application, encouraging a clean separation of\napplication and presentation logic. Templates can be maintained by anyone with\nan understanding of HTML; no knowledge of Python is required. For introductory\nmaterial, see Templates topic guide. The Django template language Templates Variables Filters Tags Comments Template inheritance Automatic HTML escaping Accessing method calls Custom tag and filter libraries Built-in template tags and filters Built-in tag reference Built-in filter reference Internationalization tags and filters Other tags and filters libraries The Django template language: for Python programmers Overview Configuring an engine Loading a template Rendering a context Playing with Context objects Loading templates Custom loaders Template origin See also For information on writing your own custom tags and filters, see How to create custom template tags and filters . To learn how to override templates in other Django applications, see How to override templates .", "keywords": ["automatic", "knowledge", "accessing", "information", "comments", "material", "applications", "separation", "understanding", "inheritance", "topic", "internationalization", "template", "django", "html", "tag", "¶", "engine", "mini", "filters", "tags", "templates", "custom", "-", "filter", "presentation", "loading", "application", "context", "overview", "variables", "libraries", "origin", "method", "logic", "user", "layer", "reference", "objects", "guide", "language", "python"], "type": "documentation"},
{"title": "Signals", "url": "https://docs.djangoproject.com/en/5.1/ref/signals/", "content": "Signals ¶ A list of all the signals that Django sends. All built-in signals are sent\nusing the send() method. See also See the documentation on the signal dispatcher for\ninformation regarding how to register for and receive signals. The authentication framework sends signals when\na user is logged in / out . Model signals ¶ The django.db.models.signals module defines a set of signals sent by the\nmodel system. Warning Signals can make your code harder to maintain. Consider implementing a\nhelper method on a custom manager , to\nboth update your models and perform additional logic, or else overriding model methods before using\nmodel signals. Warning Many of these signals are sent by various model methods like __init__() or save() that you can\noverride in your own code. If you override these methods on your model, you must call the parent class’\nmethods for these signals to be sent. Note also that Django stores signal handlers as weak references by default,\nso if your handler is a local function, it may be garbage collected.  To\nprevent this, pass weak=False when you call the signal’s connect() . Note Model signals sender model can be lazily referenced when connecting a\nreceiver by specifying its full application label. For example, an Question model defined in the polls application could be referenced\nas 'polls.Question' . This sort of reference can be quite handy when\ndealing with circular import dependencies and swappable models. pre_init ¶ django.db.models.signals. pre_init ¶ Whenever you instantiate a Django model, this signal is sent at the beginning\nof the model’s __init__() method. Arguments sent with this signal: sender The model class that just had an instance created. args A list of positional arguments passed to __init__() . kwargs A dictionary of keyword arguments passed to __init__() . For example, the tutorial has this line: q = Question ( question_text = \"What's new?\" , pub_date = timezone . now ()) The arguments sent to a pre_init handler would be: Argument Value sender Question (the class itself) args [] (an empty list because there were no positional\narguments passed to __init__() ) kwargs {'question_text': \"What's new?\", 'pub_date': datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=datetime.timezone.utc)} post_init ¶ django.db.models.signals. post_init ¶ Like pre_init, but this one is sent when the __init__() method finishes. Arguments sent with this signal: sender As above: the model class that just had an instance created. instance The actual instance of the model that’s just been created. Note instance._state isn’t set\nbefore sending the post_init signal, so _state attributes\nalways have their default values. For example, _state.db is None . Warning For performance reasons, you shouldn’t perform queries in receivers of pre_init or post_init signals because they would be executed for\neach instance returned during queryset iteration. pre_save ¶ django.db.models.signals. pre_save ¶ This is sent at the beginning of a model’s save() method. Arguments sent with this signal: sender The model class. instance The actual instance being saved. raw A boolean; True if the model is saved exactly as presented\n(i.e. when loading a fixture ). One should not\nquery/modify other records in the database as the database might not be in\na consistent state yet. using The database alias being used. update_fields The set of fields to update as passed to Model.save() , or None if update_fields wasn’t passed to save() . post_save ¶ django.db.models.signals. post_save ¶ Like pre_save , but sent at the end of the save() method. Arguments sent with this signal: sender The model class. instance The actual instance being saved. created A boolean; True if a new record was created. raw A boolean; True if the model is saved exactly as presented\n(i.e. when loading a fixture ). One should not\nquery/modify other records in the database as the database might not be in\na consistent state yet. using The database alias being used. update_fields The set of fields to update as passed to Model.save() , or None if update_fields wasn’t passed to save() . pre_delete ¶ django.db.models.signals. pre_delete ¶ Sent at the beginning of a model’s delete() method and a queryset’s delete() method. Arguments sent with this signal: sender The model class. instance The actual instance being deleted. using The database alias being used. origin The origin of the deletion being the instance of a Model or QuerySet class. post_delete ¶ django.db.models.signals. post_delete ¶ Like pre_delete , but sent at the end of a model’s delete() method and a queryset’s delete() method. Arguments sent with this signal: sender The model class. instance The actual instance being deleted. Note that the object will no longer be in the database, so be very\ncareful what you do with this instance. using The database alias being used. origin The origin of the deletion being the instance of a Model or QuerySet class. m2m_changed ¶ django.db.models.signals. m2m_changed ¶ Sent when a ManyToManyField is changed on a model\ninstance. Strictly speaking, this is not a model signal since it is sent by the ManyToManyField , but since it complements the pre_save / post_save and pre_delete / post_delete when it comes to tracking changes to models, it is included here. Arguments sent with this signal: sender The intermediate model class describing the ManyToManyField . This class is automatically\ncreated when a many-to-many field is defined; you can access it using the through attribute on the many-to-many field. instance The instance whose many-to-many relation is updated. This can be an\ninstance of the sender , or of the class the ManyToManyField is related to. action A string indicating the type of update that is done on the relation.\nThis can be one of the following: \"pre_add\" Sent before one or more objects are added to the relation. \"post_add\" Sent after one or more objects are added to the relation. \"pre_remove\" Sent before one or more objects are removed from the relation. \"post_remove\" Sent after one or more objects are removed from the relation. \"pre_clear\" Sent before the relation is cleared. \"post_clear\" Sent after the relation is cleared. reverse Indicates which side of the relation is updated (i.e., if it is the\nforward or reverse relation that is being modified). model The class of the objects that are added to, removed from or cleared\nfrom the relation. pk_set For the pre_add and post_add actions, this is a set of primary key\nvalues that will be, or have been, added to the relation. This may be a\nsubset of the values submitted to be added, since inserts must filter\nexisting values in order to avoid a database IntegrityError . For the pre_remove and post_remove actions, this is a set of\nprimary key values that was submitted to be removed from the relation. This\nis not dependent on whether the values actually will be, or have been,\nremoved. In particular, non-existent values may be submitted, and will\nappear in pk_set , even though they have no effect on the database. For the pre_clear and post_clear actions, this is None . using The database alias being used. For example, if a Pizza can have multiple Topping objects, modeled\nlike this: class Topping ( models . Model ): # ... pass class Pizza ( models . Model ): # ... toppings = models . ManyToManyField ( Topping ) If we connected a handler like this: from django.db.models.signals import m2m_changed def toppings_changed ( sender , ** kwargs ): # Do something pass m2m_changed . connect ( toppings_changed , sender = Pizza . toppings . through ) and then did something like this: >>> p = Pizza . objects . create ( ... ) >>> t = Topping . objects . create ( ... ) >>> p . toppings . add ( t ) the arguments sent to a m2m_changed handler ( toppings_changed in\nthe example above) would be: Argument Value sender Pizza.toppings.through (the intermediate m2m class) instance p (the Pizza instance being modified) action \"pre_add\" (followed by a separate signal with \"post_add\" ) reverse False ( Pizza contains the ManyToManyField , so this call\nmodifies the forward relation) model Topping (the class of the objects added to the Pizza ) pk_set {t.id} (since only Topping t was added to the relation) using \"default\" (since the default router sends writes here) And if we would then do something like this: >>> t . pizza_set . remove ( p ) the arguments sent to a m2m_changed handler would be: Argument Value sender Pizza.toppings.through (the intermediate m2m class) instance t (the Topping instance being modified) action \"pre_remove\" (followed by a separate signal with \"post_remove\" ) reverse True ( Pizza contains the ManyToManyField , so this call\nmodifies the reverse relation) model Pizza (the class of the objects removed from the Topping ) pk_set {p.id} (since only Pizza p was removed from the\nrelation) using \"default\" (since the default router sends writes here) class_prepared ¶ django.db.models.signals. class_prepared ¶ Sent whenever a model class has been “prepared” – that is, once a model has\nbeen defined and registered with Django’s model system. Django uses this\nsignal internally; it’s not generally used in third-party applications. Since this signal is sent during the app registry population process, and AppConfig.ready() runs after the app\nregistry is fully populated, receivers cannot be connected in that method.\nOne possibility is to connect them AppConfig.__init__() instead, taking\ncare not to import models or trigger calls to the app registry. Arguments that are sent with this signal: sender The model class which was just prepared. Management signals ¶ Signals sent by django-admin . pre_migrate ¶ django.db.models.signals. pre_migrate ¶ Sent by the migrate command before it starts to install an\napplication. It’s not emitted for applications that lack a models module. Arguments sent with this signal: sender An AppConfig instance for the application about to\nbe migrated/synced. app_config Same as sender . verbosity Indicates how much information manage.py is printing on screen. See\nthe --verbosity flag for details. Functions which listen for pre_migrate should adjust what they\noutput to the screen based on the value of this argument. interactive If interactive is True , it’s safe to prompt the user to input\nthings on the command line. If interactive is False , functions\nwhich listen for this signal should not try to prompt for anything. For example, the django.contrib.auth app only prompts to create a\nsuperuser when interactive is True . stdout A stream-like object where verbose output should be redirected. using The alias of database on which a command will operate. plan The migration plan that is going to be used for the migration run. While\nthe plan is not public API, this allows for the rare cases when it is\nnecessary to know the plan. A plan is a list of 2-tuples with the first\nitem being the instance of a migration class and the second item showing\nif the migration was rolled back ( True ) or applied ( False ). apps An instance of Apps containing the state of the\nproject before the migration run. It should be used instead of the global apps registry to retrieve the models you\nwant to perform operations on. post_migrate ¶ django.db.models.signals. post_migrate ¶ Sent at the end of the migrate (even if no migrations are run) and flush commands. It’s not emitted for applications that lack a models module. Handlers of this signal must not perform database schema alterations as doing\nso may cause the flush command to fail if it runs during the migrate command. Arguments sent with this signal: sender An AppConfig instance for the application that was\njust installed. app_config Same as sender . verbosity Indicates how much information manage.py is printing on screen. See\nthe --verbosity flag for details. Functions which listen for post_migrate should adjust what they\noutput to the screen based on the value of this argument. interactive If interactive is True , it’s safe to prompt the user to input\nthings on the command line. If interactive is False , functions\nwhich listen for this signal should not try to prompt for anything. For example, the django.contrib.auth app only prompts to create a\nsuperuser when interactive is True . stdout A stream-like object where verbose output should be redirected. using The database alias used for synchronization. Defaults to the default database. plan The migration plan that was used for the migration run. While the plan is\nnot public API, this allows for the rare cases when it is necessary to\nknow the plan. A plan is a list of 2-tuples with the first item being\nthe instance of a migration class and the second item showing if the\nmigration was rolled back ( True ) or applied ( False ). apps An instance of Apps containing the state of the\nproject after the migration run. It should be used instead of the global apps registry to retrieve the models you\nwant to perform operations on. For example, you could register a callback in an AppConfig like this: from django.apps import AppConfig from django.db.models.signals import post_migrate def my_callback ( sender , ** kwargs ): # Your specific logic here pass class MyAppConfig ( AppConfig ): ... def ready ( self ): post_migrate . connect ( my_callback , sender = self ) Note If you provide an AppConfig instance as the sender\nargument, please ensure that the signal is registered in ready() . AppConfig s are recreated for\ntests that run with a modified set of INSTALLED_APPS (such as\nwhen settings are overridden) and such signals should be connected for each\nnew AppConfig instance. Request/response signals ¶ Signals sent by the core framework when processing a request. Warning Signals can make your code harder to maintain. Consider using a\nmiddleware before using request/response\nsignals. request_started ¶ django.core.signals. request_started ¶ Sent when Django begins processing an HTTP request. Arguments sent with this signal: sender The handler class – e.g. django.core.handlers.wsgi.WsgiHandler – that\nhandled the request. environ The environ dictionary provided to the request. request_finished ¶ django.core.signals. request_finished ¶ Sent when Django finishes delivering an HTTP response to the client. Arguments sent with this signal: sender The handler class, as above. got_request_exception ¶ django.core.signals. got_request_exception ¶ This signal is sent whenever Django encounters an exception while processing an incoming HTTP request. Arguments sent with this signal: sender Unused (always None ). request The HttpRequest object. Test signals ¶ Signals only sent when running tests . setting_changed ¶ django.test.signals. setting_changed ¶ This signal is sent when the value of a setting is changed through the django.test.TestCase.settings() context manager or the django.test.override_settings() decorator/context manager. It’s actually sent twice: when the new value is applied (“setup”) and when the\noriginal value is restored (“teardown”). Use the enter argument to\ndistinguish between the two. You can also import this signal from django.core.signals to avoid importing\nfrom django.test in non-test situations. Arguments sent with this signal: sender The settings handler. setting The name of the setting. value The value of the setting after the change. For settings that initially\ndon’t exist, in the “teardown” phase, value is None . enter A boolean; True if the setting is applied, False if restored. template_rendered ¶ django.test.signals. template_rendered ¶ Sent when the test system renders a template. This signal is not emitted during\nnormal operation of a Django server – it is only available during testing. Arguments sent with this signal: sender The Template object which was rendered. template Same as sender context The Context with which the template was\nrendered. Database Wrappers ¶ Signals sent by the database wrapper when a database connection is\ninitiated. connection_created ¶ django.db.backends.signals. connection_created ¶ Sent when the database wrapper makes the initial connection to the\ndatabase.  This is particularly useful if you’d like to send any post\nconnection commands to the SQL backend. Arguments sent with this signal: sender The database wrapper class – i.e. django.db.backends.postgresql.DatabaseWrapper or django.db.backends.mysql.DatabaseWrapper , etc. connection The database connection that was opened. This can be used in a\nmultiple-database configuration to differentiate connection signals\nfrom different databases.", "keywords": ["state", "dictionary", "connection", "wrapper", "inserts", "pre_remove", "run", "update_fields", "type", "line", "plan", "template", "my_callback", "migrations", "manytomanyfield", "pk_set", "writes", "django.db.models.signals", "p", "setting", "order", "changes", "documentation", "signal", "def", "-", "question_text", "receivers", "settings", "integrityerror", "pizza", "m", "t.id", "false", "application", "exception", "management", "django.test.override_settings", "teardown", "_", "method", "records", "party", "delete", "queryset", "migrate", "tests", "middleware", "args", "testing", "system", "commands", "values", "performance", "boolean", "query", "cases", "wsgihandler", "manager", "django.db.backends.postgresql", "import", "post_delete", "'", "record", "post_remove", "information", "item", "sort", "project", "m2", "#", "output", "fields", "test", "authentication", "¶", "default", "init", "model.save", "iteration", "custom", "stores", "decorator", "pre_save", "methods", "timezone", "client", "sender", "side", "keyword", "update", "fixture", "appconfig.__init", "model", "tutorial", "environ", "server", "none", "change", "finishes", "callback", "process", "origin", "toppings", "beginning", "command", "example", "sent", "calls", "n’t", "django.test.testcase.settings", "value", "functions", "installed_apps", "pre_add", "backend", "self", "label", "router", "handlers", "end", "post_add", "argument", "pre_clear", "class", "t", "stream", "flag", "applications", "out", "request", "receiver", "deletion", "wrappers", "django.core.signals", "tuples", "save", "action", "django.test.signals", "attribute", "function", "care", "string", "things", "list", "django.db.backends.mysql", "details", "question", "screen", "actions", "call", "polls", "runs", "setup", "app", "pizza_set", "django.apps", "post_migrate", "name", "pub_date", "object", "pre_delete", "user", "dispatcher", "datetime.datetime(2012", "warning", "httprequest", "connection_created", "alterations", "queries", "one", "attributes", "dependencies", "admin", "databasewrapper", "references", "operations", "synchronization", "parent", "core", "reasons", "verbose", "pizza.toppings.through", "post_init", "trigger", "response", "tzinfo", "handler", "phase", "superuser", "kwargs", "configuration", "toppings_changed", "api", "note", "migration", "situations", "sql", "population", "possibility", "signals", "django", "django.db.backends.signals", "set", "django.contrib.auth", "framework", "module", "field", "arguments", "topping", "connect", "apps", "relation", "got_request_exception", "database", "http", "prompts", "reverse", "post_save", "verbosity", "context", "databases", "pre_migrate", "unused", "operation", "logic", "reference", "instance", "effect", "schema", "code", "models", "=", "pre_init", "send", "objects", "registry", "appconfig", "app_config", "defaults", "alias", "garbage", "helper", "subset"], "type": "documentation"},
{"title": "Settings", "url": "https://docs.djangoproject.com/en/5.1/ref/settings/", "content": "Settings ¶ Core Settings Auth Messages Sessions Sites Static Files Core Settings Topical Index Warning Be careful when you override settings, especially when the default value\nis a non-empty list or dictionary, such as STATICFILES_FINDERS .\nMake sure you keep the components required by the features of Django you\nwish to use. Core Settings ¶ Here’s a list of settings available in Django core and their default values.\nSettings provided by contrib apps are listed below, followed by a topical index\nof the core settings. For introductory material, see the settings topic\nguide . ABSOLUTE_URL_OVERRIDES ¶ Default: {} (Empty dictionary) A dictionary mapping \"app_label.model_name\" strings to functions that take\na model object and return its URL. This is a way of inserting or overriding get_absolute_url() methods on a per-installation basis. Example: ABSOLUTE_URL_OVERRIDES = { \"blogs.blog\" : lambda o : \"/blogs/ %s /\" % o . slug , \"news.story\" : lambda o : \"/stories/ %s / %s /\" % ( o . pub_year , o . slug ), } The model name used in this setting should be all lowercase, regardless of the\ncase of the actual model class name. ADMINS ¶ Default: [] (Empty list) A list of all the people who get code error notifications. When DEBUG=False and AdminEmailHandler is configured in LOGGING (done by default), Django emails these\npeople the details of exceptions raised in the request/response cycle. Each item in the list should be a tuple of (Full name, email address). Example: [( \"John\" , \"john@example.com\" ), ( \"Mary\" , \"mary@example.com\" )] ALLOWED_HOSTS ¶ Default: [] (Empty list) A list of strings representing the host/domain names that this Django site can\nserve. This is a security measure to prevent HTTP Host header attacks , which are possible even under many\nseemingly-safe web server configurations. Values in this list can be fully qualified names (e.g. 'www.example.com' ),\nin which case they will be matched against the request’s Host header\nexactly (case-insensitive, not including port). A value beginning with a period\ncan be used as a subdomain wildcard: '.example.com' will match example.com , www.example.com , and any other subdomain of example.com . A value of '*' will match anything; in this case you are\nresponsible to provide your own validation of the Host header (perhaps in a\nmiddleware; if so this middleware must be listed first in MIDDLEWARE ). Django also allows the fully qualified domain name (FQDN) of any entries.\nSome browsers include a trailing dot in the Host header which Django\nstrips when performing host validation. If the Host header (or X-Forwarded-Host if USE_X_FORWARDED_HOST is enabled) does not match any value in this\nlist, the django.http.HttpRequest.get_host() method will raise SuspiciousOperation . When DEBUG is True and ALLOWED_HOSTS is empty, the host\nis validated against ['.localhost', '127.0.0.1', '[::1]'] . ALLOWED_HOSTS is also checked when running tests . This validation only applies via get_host() ;\nif your code accesses the Host header directly from request.META you\nare bypassing this security protection. APPEND_SLASH ¶ Default: True When set to True , if the request URL does not match any of the patterns\nin the URLconf and it doesn’t end in a slash, an HTTP redirect is issued to the\nsame URL with a slash appended. Note that the redirect may cause any data\nsubmitted in a POST request to be lost. The APPEND_SLASH setting is only used if CommonMiddleware is installed\n(see Middleware ). See also PREPEND_WWW . CACHES ¶ Default: { \"default\" : { \"BACKEND\" : \"django.core.cache.backends.locmem.LocMemCache\" , } } A dictionary containing the settings for all caches to be used with\nDjango. It is a nested dictionary whose contents maps cache aliases\nto a dictionary containing the options for an individual cache. The CACHES setting must configure a default cache;\nany number of additional caches may also be specified. If you\nare using a cache backend other than the local memory cache, or\nyou need to define multiple caches, other options will be required.\nThe following cache options are available. BACKEND ¶ Default: '' (Empty string) The cache backend to use. The built-in cache backends are: 'django.core.cache.backends.db.DatabaseCache' 'django.core.cache.backends.dummy.DummyCache' 'django.core.cache.backends.filebased.FileBasedCache' 'django.core.cache.backends.locmem.LocMemCache' 'django.core.cache.backends.memcached.PyMemcacheCache' 'django.core.cache.backends.memcached.PyLibMCCache' 'django.core.cache.backends.redis.RedisCache' You can use a cache backend that doesn’t ship with Django by setting BACKEND to a fully-qualified path of a cache\nbackend class (i.e. mypackage.backends.whatever.WhateverCache ). KEY_FUNCTION ¶ A string containing a dotted path to a function (or any callable) that defines how to\ncompose a prefix, version and key into a final cache key. The default\nimplementation is equivalent to the function: def make_key ( key , key_prefix , version ): return \":\" . join ([ key_prefix , str ( version ), key ]) You may use any key function you want, as long as it has the same\nargument signature. See the cache documentation for more\ninformation. KEY_PREFIX ¶ Default: '' (Empty string) A string that will be automatically included (prepended by default) to\nall cache keys used by the Django server. See the cache documentation for more information. LOCATION ¶ Default: '' (Empty string) The location of the cache to use. This might be the directory for a\nfile system cache, a host and port for a memcache server, or an identifying\nname for a local memory cache. e.g.: CACHES = { \"default\" : { \"BACKEND\" : \"django.core.cache.backends.filebased.FileBasedCache\" , \"LOCATION\" : \"/var/tmp/django_cache\" , } } OPTIONS ¶ Default: None Extra parameters to pass to the cache backend. Available parameters\nvary depending on your cache backend. Some information on available parameters can be found in the cache arguments documentation. For more information,\nconsult your backend module’s own documentation. TIMEOUT ¶ Default: 300 The number of seconds before a cache entry is considered stale. If the value of\nthis setting is None , cache entries will not expire. A value of 0 causes keys to immediately expire (effectively “don’t cache”). VERSION ¶ Default: 1 The default version number for cache keys generated by the Django server. See the cache documentation for more information. CACHE_MIDDLEWARE_ALIAS ¶ Default: 'default' The cache connection to use for the cache middleware . CACHE_MIDDLEWARE_KEY_PREFIX ¶ Default: '' (Empty string) A string which will be prefixed to the cache keys generated by the cache\nmiddleware . This prefix is combined with the KEY_PREFIX setting; it does not replace it. See Django’s cache framework . CACHE_MIDDLEWARE_SECONDS ¶ Default: 600 The default integer number of seconds to cache a page for the cache middleware . See Django’s cache framework . CSRF_COOKIE_AGE ¶ Default: 31449600 (approximately 1 year, in seconds) The age of CSRF cookies, in seconds. The reason for setting a long-lived expiration time is to avoid problems in\nthe case of a user closing a browser or bookmarking a page and then loading\nthat page from a browser cache. Without persistent cookies, the form submission\nwould fail in this case. Some browsers (specifically Internet Explorer) can disallow the use of\npersistent cookies or can have the indexes to the cookie jar corrupted on disk,\nthereby causing CSRF protection checks to (sometimes intermittently) fail.\nChange this setting to None to use session-based CSRF cookies, which\nkeep the cookies in-memory instead of on persistent storage. CSRF_COOKIE_DOMAIN ¶ Default: None The domain to be used when setting the CSRF cookie.  This can be useful for\neasily allowing cross-subdomain requests to be excluded from the normal cross\nsite request forgery protection.  It should be set to a string such as \".example.com\" to allow a POST request from a form on one subdomain to be\naccepted by a view served from another subdomain. Please note that the presence of this setting does not imply that Django’s CSRF\nprotection is safe from cross-subdomain attacks by default - please see the CSRF limitations section. CSRF_COOKIE_HTTPONLY ¶ Default: False Whether to use HttpOnly flag on the CSRF cookie. If this is set to True , client-side JavaScript will not be able to access the CSRF cookie. Designating the CSRF cookie as HttpOnly doesn’t offer any practical\nprotection because CSRF is only to protect against cross-domain attacks. If an\nattacker can read the cookie via JavaScript, they’re already on the same domain\nas far as the browser knows, so they can do anything they like anyway. (XSS is\na much bigger hole than CSRF.) Although the setting offers little practical benefit, it’s sometimes required\nby security auditors. If you enable this and need to send the value of the CSRF token with an AJAX\nrequest, your JavaScript must pull the value from a hidden CSRF token\nform input instead of from the cookie . See SESSION_COOKIE_HTTPONLY for details on HttpOnly . CSRF_COOKIE_NAME ¶ Default: 'csrftoken' The name of the cookie to use for the CSRF authentication token. This can be\nwhatever you want (as long as it’s different from the other cookie names in\nyour application). See Cross Site Request Forgery protection . CSRF_COOKIE_PATH ¶ Default: '/' The path set on the CSRF cookie. This should either match the URL path of your\nDjango installation or be a parent of that path. This is useful if you have multiple Django instances running under the same\nhostname. They can use different cookie paths, and each instance will only see\nits own CSRF cookie. CSRF_COOKIE_SAMESITE ¶ Default: 'Lax' The value of the SameSite flag on the CSRF cookie. This flag prevents the\ncookie from being sent in cross-site requests. See SESSION_COOKIE_SAMESITE for details about SameSite . CSRF_COOKIE_SECURE ¶ Default: False Whether to use a secure cookie for the CSRF cookie. If this is set to True ,\nthe cookie will be marked as “secure”, which means browsers may ensure that the\ncookie is only sent with an HTTPS connection. CSRF_USE_SESSIONS ¶ Default: False Whether to store the CSRF token in the user’s session instead of in a cookie.\nIt requires the use of django.contrib.sessions . Storing the CSRF token in a cookie (Django’s default) is safe, but storing it\nin the session is common practice in other web frameworks and therefore\nsometimes demanded by security auditors. Since the default error views require the CSRF token, SessionMiddleware must appear in MIDDLEWARE before any middleware that may raise an exception to\ntrigger an error view (such as PermissionDenied )\nif you’re using CSRF_USE_SESSIONS . See Middleware ordering . CSRF_FAILURE_VIEW ¶ Default: 'django.views.csrf.csrf_failure' A dotted path to the view function to be used when an incoming request is\nrejected by the CSRF protection . The function should have\nthis signature: def csrf_failure ( request , reason = \"\" ): ... where reason is a short message (intended for developers or logging, not\nfor end users) indicating the reason the request was rejected. It should return\nan HttpResponseForbidden . django.views.csrf.csrf_failure() accepts an additional template_name parameter that defaults to '403_csrf.html' . If a template with that name\nexists, it will be used to render the page. CSRF_HEADER_NAME ¶ Default: 'HTTP_X_CSRFTOKEN' The name of the request header used for CSRF authentication. As with other HTTP headers in request.META , the header name received from\nthe server is normalized by converting all characters to uppercase, replacing\nany hyphens with underscores, and adding an 'HTTP_' prefix to the name.\nFor example, if your client sends a 'X-XSRF-TOKEN' header, the setting\nshould be 'HTTP_X_XSRF_TOKEN' . CSRF_TRUSTED_ORIGINS ¶ Default: [] (Empty list) A list of trusted origins for unsafe requests (e.g. POST ). For requests that include the Origin header, Django’s CSRF protection\nrequires that header match the origin present in the Host header. For a secure unsafe\nrequest that doesn’t include the Origin header, the request must have a Referer header that matches the origin present in the Host header. These checks prevent, for example, a POST request from subdomain.example.com from succeeding against api.example.com . If you\nneed cross-origin unsafe requests, continuing the example, add 'https://subdomain.example.com' to this list (and/or http://... if\nrequests originate from an insecure page). The setting also supports subdomains, so you could add 'https://*.example.com' , for example, to allow access from all subdomains\nof example.com . DATABASES ¶ Default: {} (Empty dictionary) A dictionary containing the settings for all databases to be used with\nDjango. It is a nested dictionary whose contents map a database alias\nto a dictionary containing the options for an individual database. The DATABASES setting must configure a default database;\nany number of additional databases may also be specified. The simplest possible settings file is for a single-database setup using\nSQLite. This can be configured using the following: DATABASES = { \"default\" : { \"ENGINE\" : \"django.db.backends.sqlite3\" , \"NAME\" : \"mydatabase\" , } } When connecting to other database backends, such as MariaDB, MySQL, Oracle, or\nPostgreSQL, additional connection parameters will be required. See\nthe ENGINE setting below on how to specify\nother database types. This example is for PostgreSQL: DATABASES = { \"default\" : { \"ENGINE\" : \"django.db.backends.postgresql\" , \"NAME\" : \"mydatabase\" , \"USER\" : \"mydatabaseuser\" , \"PASSWORD\" : \"mypassword\" , \"HOST\" : \"127.0.0.1\" , \"PORT\" : \"5432\" , } } The following inner options that may be required for more complex\nconfigurations are available: ATOMIC_REQUESTS ¶ Default: False Set this to True to wrap each view in a transaction on this database. See Tying transactions to HTTP requests . AUTOCOMMIT ¶ Default: True Set this to False if you want to disable Django’s transaction\nmanagement and implement your own. ENGINE ¶ Default: '' (Empty string) The database backend to use. The built-in database backends are: 'django.db.backends.postgresql' 'django.db.backends.mysql' 'django.db.backends.sqlite3' 'django.db.backends.oracle' You can use a database backend that doesn’t ship with Django by setting ENGINE to a fully-qualified path (i.e. mypackage.backends.whatever ). HOST ¶ Default: '' (Empty string) Which host to use when connecting to the database. An empty string means\nlocalhost. Not used with SQLite. If this value starts with a forward slash ( '/' ) and you’re using MySQL,\nMySQL will connect via a Unix socket to the specified socket. For example: \"HOST\" : \"/var/run/mysql\" If you’re using MySQL and this value doesn’t start with a forward slash, then\nthis value is assumed to be the host. If you’re using PostgreSQL, by default (empty HOST ), the connection\nto the database is done through UNIX domain sockets (‘local’ lines in pg_hba.conf ). If your UNIX domain socket is not in the standard location,\nuse the same value of unix_socket_directory from postgresql.conf .\nIf you want to connect through TCP sockets, set HOST to ‘localhost’\nor ‘127.0.0.1’ (‘host’ lines in pg_hba.conf ).\nOn Windows, you should always define HOST , as UNIX domain sockets\nare not available. NAME ¶ Default: '' (Empty string) The name of the database to use. For SQLite, it’s the full path to the database\nfile. When specifying the path, always use forward slashes, even on Windows\n(e.g. C:/homes/user/mysite/sqlite3.db ). CONN_MAX_AGE ¶ Default: 0 The lifetime of a database connection, as an integer of seconds. Use 0 to\nclose database connections at the end of each request — Django’s historical\nbehavior — and None for unlimited persistent database connections . CONN_HEALTH_CHECKS ¶ Default: False If set to True , existing persistent database connections will be health checked before they are\nreused in each request performing database access. If the health check fails,\nthe connection will be reestablished without failing the request when the\nconnection is no longer usable but the database server is ready to accept and\nserve new connections (e.g. after database server restart closing existing\nconnections). OPTIONS ¶ Default: {} (Empty dictionary) Extra parameters to use when connecting to the database. Available parameters\nvary depending on your database backend. Some information on available parameters can be found in the Database Backends documentation. For more information,\nconsult your backend module’s own documentation. PASSWORD ¶ Default: '' (Empty string) The password to use when connecting to the database. Not used with SQLite. PORT ¶ Default: '' (Empty string) The port to use when connecting to the database. An empty string means the\ndefault port. Not used with SQLite. TIME_ZONE ¶ Default: None A string representing the time zone for this database connection or None .\nThis inner option of the DATABASES setting accepts the same values\nas the general TIME_ZONE setting. When USE_TZ is True , reading datetimes from the database\nreturns aware datetimes with the timezone set to this option’s value if not None , or to UTC otherwise. When USE_TZ is False , it is an error to set this option. If the database backend doesn’t support time zones (e.g. SQLite, MySQL,\nOracle), Django reads and writes datetimes in local time according to this\noption if it is set and in UTC if it isn’t. Changing the connection time zone changes how datetimes are read from and\nwritten to the database. If Django manages the database and you don’t have a strong reason to do\notherwise, you should leave this option unset. It’s best to store datetimes\nin UTC because it avoids ambiguous or nonexistent datetimes during daylight\nsaving time changes. Also, receiving datetimes in UTC keeps datetime\narithmetic simple — there’s no need to consider potential offset changes\nover a DST transition. If you’re connecting to a third-party database that stores datetimes in a\nlocal time rather than UTC, then you must set this option to the\nappropriate time zone. Likewise, if Django manages the database but\nthird-party systems connect to the same database and expect to find\ndatetimes in local time, then you must set this option. If the database backend supports time zones (e.g., PostgreSQL), then the\ndatabase connection’s time zone is set to this value. Although setting the TIME_ZONE option is very rarely needed, there are\nsituations where it becomes necessary. Specifically, it’s recommended to\nmatch the general TIME_ZONE setting when dealing with raw queries\ninvolving date/time functions like PostgreSQL’s date_trunc() or generate_series() , especially when generating time-based series that\ntransition daylight savings. This value can be changed at any time, the database will handle the\nconversion of datetimes to the configured time zone. However, this has a downside: receiving all datetimes in local time makes\ndatetime arithmetic more tricky — you must account for possible offset\nchanges over DST transitions. Consider converting to local time explicitly with AT TIME ZONE in raw SQL\nqueries instead of setting the TIME_ZONE option. DISABLE_SERVER_SIDE_CURSORS ¶ Default: False Set this to True if you want to disable the use of server-side cursors with QuerySet.iterator() . Transaction pooling and server-side cursors describes the use case. This is a PostgreSQL-specific setting. USER ¶ Default: '' (Empty string) The username to use when connecting to the database. Not used with SQLite. TEST ¶ Default: {} (Empty dictionary) A dictionary of settings for test databases; for more details about the\ncreation and use of test databases, see The test database . Here’s an example with a test database configuration: DATABASES = { \"default\" : { \"ENGINE\" : \"django.db.backends.postgresql\" , \"USER\" : \"mydatabaseuser\" , \"NAME\" : \"mydatabase\" , \"TEST\" : { \"NAME\" : \"mytestdatabase\" , }, }, } The following keys in the TEST dictionary are available: CHARSET ¶ Default: None The character set encoding used to create the test database. The value of this\nstring is passed directly through to the database, so its format is\nbackend-specific. Supported by the PostgreSQL ( postgresql ) and MySQL ( mysql ) backends. COLLATION ¶ Default: None The collation order to use when creating the test database. This value is\npassed directly to the backend, so its format is backend-specific. Only supported for the mysql backend (see the MySQL manual for details). DEPENDENCIES ¶ Default: ['default'] , for all databases other than default ,\nwhich has no dependencies. The creation-order dependencies of the database. See the documentation\non controlling the creation order of test databases for details. MIGRATE ¶ Default: True When set to False , migrations won’t run when creating the test database.\nThis is similar to setting None as a value in MIGRATION_MODULES ,\nbut for all apps. MIRROR ¶ Default: None The alias of the database that this database should mirror during\ntesting. It depends on transactions and therefore must be used within TransactionTestCase instead of TestCase . This setting exists to allow for testing of primary/replica\n(referred to as master/slave by some databases)\nconfigurations of multiple databases. See the documentation on testing primary/replica configurations for details. NAME ¶ Default: None The name of database to use when running the test suite. If the default value ( None ) is used with the SQLite database engine, the\ntests will use a memory resident database. For all other database engines the\ntest database will use the name 'test_' + DATABASE_NAME . See The test database . TEMPLATE ¶ This is a PostgreSQL-specific setting. The name of a template (e.g. 'template0' ) from which to create the test\ndatabase. CREATE_DB ¶ Default: True This is an Oracle-specific setting. If it is set to False , the test tablespaces won’t be automatically created\nat the beginning of the tests or dropped at the end. CREATE_USER ¶ Default: True This is an Oracle-specific setting. If it is set to False , the test user won’t be automatically created at the\nbeginning of the tests and dropped at the end. USER ¶ Default: None This is an Oracle-specific setting. The username to use when connecting to the Oracle database that will be used\nwhen running tests. If not provided, Django will use 'test_' + USER . PASSWORD ¶ Default: None This is an Oracle-specific setting. The password to use when connecting to the Oracle database that will be used\nwhen running tests. If not provided, Django will generate a random password. ORACLE_MANAGED_FILES ¶ Default: False This is an Oracle-specific setting. If set to True , Oracle Managed Files (OMF) tablespaces will be used. DATAFILE and DATAFILE_TMP will be ignored. TBLSPACE ¶ Default: None This is an Oracle-specific setting. The name of the tablespace that will be used when running tests. If not\nprovided, Django will use 'test_' + USER . TBLSPACE_TMP ¶ Default: None This is an Oracle-specific setting. The name of the temporary tablespace that will be used when running tests. If\nnot provided, Django will use 'test_' + USER + '_temp' . DATAFILE ¶ Default: None This is an Oracle-specific setting. The name of the datafile to use for the TBLSPACE. If not provided, Django will\nuse TBLSPACE + '.dbf' . DATAFILE_TMP ¶ Default: None This is an Oracle-specific setting. The name of the datafile to use for the TBLSPACE_TMP. If not provided, Django\nwill use TBLSPACE_TMP + '.dbf' . DATAFILE_MAXSIZE ¶ Default: '500M' This is an Oracle-specific setting. The maximum size that the DATAFILE is allowed to grow to. DATAFILE_TMP_MAXSIZE ¶ Default: '500M' This is an Oracle-specific setting. The maximum size that the DATAFILE_TMP is allowed to grow to. DATAFILE_SIZE ¶ Default: '50M' This is an Oracle-specific setting. The initial size of the DATAFILE. DATAFILE_TMP_SIZE ¶ Default: '50M' This is an Oracle-specific setting. The initial size of the DATAFILE_TMP. DATAFILE_EXTSIZE ¶ Default: '25M' This is an Oracle-specific setting. The amount by which the DATAFILE is extended when more space is required. DATAFILE_TMP_EXTSIZE ¶ Default: '25M' This is an Oracle-specific setting. The amount by which the DATAFILE_TMP is extended when more space is required. DATA_UPLOAD_MAX_MEMORY_SIZE ¶ Default: 2621440 (i.e. 2.5 MB). The maximum size in bytes that a request body may be before a SuspiciousOperation ( RequestDataTooBig ) is\nraised. The check is done when accessing request.body or request.POST and is calculated against the total request size excluding any file upload\ndata. You can set this to None to disable the check. Applications that are\nexpected to receive unusually large form posts should tune this setting. The amount of request data is correlated to the amount of memory needed to\nprocess the request and populate the GET and POST dictionaries. Large requests\ncould be used as a denial-of-service attack vector if left unchecked. Since web\nservers don’t typically perform deep request inspection, it’s not possible to\nperform a similar check at that level. See also FILE_UPLOAD_MAX_MEMORY_SIZE . DATA_UPLOAD_MAX_NUMBER_FIELDS ¶ Default: 1000 The maximum number of parameters that may be received via GET or POST before a SuspiciousOperation ( TooManyFields ) is\nraised. You can set this to None to disable the check. Applications that\nare expected to receive an unusually large number of form fields should tune\nthis setting. The number of request parameters is correlated to the amount of time needed to\nprocess the request and populate the GET and POST dictionaries. Large requests\ncould be used as a denial-of-service attack vector if left unchecked. Since web\nservers don’t typically perform deep request inspection, it’s not possible to\nperform a similar check at that level. DATA_UPLOAD_MAX_NUMBER_FILES ¶ Default: 100 The maximum number of files that may be received via POST in a multipart/form-data encoded request before a SuspiciousOperation ( TooManyFiles ) is\nraised. You can set this to None to disable the check. Applications that\nare expected to receive an unusually large number of file fields should tune\nthis setting. The number of accepted files is correlated to the amount of time and memory\nneeded to process the request. Large requests could be used as a\ndenial-of-service attack vector if left unchecked. Since web servers don’t\ntypically perform deep request inspection, it’s not possible to perform a\nsimilar check at that level. DATABASE_ROUTERS ¶ Default: [] (Empty list) The list of routers that will be used to determine which database\nto use when performing a database query. See the documentation on automatic database routing in multi\ndatabase configurations . DATE_FORMAT ¶ Default: 'N j, Y' (e.g. Feb. 4, 2003 ) The default formatting to use for displaying date fields in any part of the\nsystem. Note that the locale-dictated format has higher precedence and will be\napplied instead. See allowed date format strings . See also DATETIME_FORMAT , TIME_FORMAT and SHORT_DATE_FORMAT . DATE_INPUT_FORMATS ¶ Default: [ \"%Y-%m- %d \" , # '2006-10-25' \"%m/ %d /%Y\" , # '10/25/2006' \"%m/ %d /%y\" , # '10/25/06' \"%b %d %Y\" , # 'Oct 25 2006' \"%b %d , %Y\" , # 'Oct 25, 2006' \" %d %b %Y\" , # '25 Oct 2006' \" %d %b, %Y\" , # '25 Oct, 2006' \"%B %d %Y\" , # 'October 25 2006' \"%B %d , %Y\" , # 'October 25, 2006' \" %d %B %Y\" , # '25 October 2006' \" %d %B, %Y\" , # '25 October, 2006' ] A list of formats that will be accepted when inputting data on a date field.\nFormats will be tried in order, using the first valid one. Note that these\nformat strings use Python’s datetime module syntax , not the format strings from the date template filter. The locale-dictated format has higher precedence and will be applied instead. See also DATETIME_INPUT_FORMATS and TIME_INPUT_FORMATS . DATETIME_FORMAT ¶ Default: 'N j, Y, P' (e.g. Feb. 4, 2003, 4 p.m. ) The default formatting to use for displaying datetime fields in any part of the\nsystem. Note that the locale-dictated format has higher precedence and will be\napplied instead. See allowed date format strings . See also DATE_FORMAT , TIME_FORMAT and SHORT_DATETIME_FORMAT . DATETIME_INPUT_FORMATS ¶ Default: [ \"%Y-%m- %d %H:%M:%S\" , # '2006-10-25 14:30:59' \"%Y-%m- %d %H:%M:%S. %f \" , # '2006-10-25 14:30:59.000200' \"%Y-%m- %d %H:%M\" , # '2006-10-25 14:30' \"%m/ %d /%Y %H:%M:%S\" , # '10/25/2006 14:30:59' \"%m/ %d /%Y %H:%M:%S. %f \" , # '10/25/2006 14:30:59.000200' \"%m/ %d /%Y %H:%M\" , # '10/25/2006 14:30' \"%m/ %d /%y %H:%M:%S\" , # '10/25/06 14:30:59' \"%m/ %d /%y %H:%M:%S. %f \" , # '10/25/06 14:30:59.000200' \"%m/ %d /%y %H:%M\" , # '10/25/06 14:30' ] A list of formats that will be accepted when inputting data on a datetime\nfield. Formats will be tried in order, using the first valid one. Note that\nthese format strings use Python’s datetime module syntax , not the format strings from the date template filter. Date-only formats are not included as datetime fields will\nautomatically try DATE_INPUT_FORMATS in last resort. The locale-dictated format has higher precedence and will be applied instead. See also DATE_INPUT_FORMATS and TIME_INPUT_FORMATS . DEBUG ¶ Default: False A boolean that turns on/off debug mode. Never deploy a site into production with DEBUG turned on. One of the main features of debug mode is the display of detailed error pages.\nIf your app raises an exception when DEBUG is True , Django will\ndisplay a detailed traceback, including a lot of metadata about your\nenvironment, such as all the currently defined Django settings (from settings.py ). As a security measure, Django will not include settings that might be\nsensitive, such as SECRET_KEY . Specifically, it will exclude any\nsetting whose name includes any of the following: 'API' 'KEY' 'PASS' 'SECRET' 'SIGNATURE' 'TOKEN' Note that these are partial matches. 'PASS' will also match PASSWORD,\njust as 'TOKEN' will also match TOKENIZED and so on. Still, note that there are always going to be sections of your debug output\nthat are inappropriate for public consumption. File paths, configuration\noptions and the like all give attackers extra information about your server. It is also important to remember that when running with DEBUG turned on, Django will remember every SQL query it executes. This is useful\nwhen you’re debugging, but it’ll rapidly consume memory on a production server. Finally, if DEBUG is False , you also need to properly set\nthe ALLOWED_HOSTS setting. Failing to do so will result in all\nrequests being returned as “Bad Request (400)”. Note The default settings.py file created by django-admin startproject sets DEBUG = True for convenience. DEBUG_PROPAGATE_EXCEPTIONS ¶ Default: False If set to True , Django’s exception handling of view functions\n( handler500 , or the debug view if DEBUG is True ) and logging of 500 responses ( django.request ) is\nskipped and exceptions propagate upward. This can be useful for some test setups. It shouldn’t be used on a live site\nunless you want your web server (instead of Django) to generate “Internal\nServer Error” responses. In that case, make sure your server doesn’t show the\nstack trace or other sensitive information in the response. DECIMAL_SEPARATOR ¶ Default: '.' (Dot) Default decimal separator used when formatting decimal numbers. Note that the locale-dictated format has higher precedence and will be applied\ninstead. See also NUMBER_GROUPING , THOUSAND_SEPARATOR and USE_THOUSAND_SEPARATOR . DEFAULT_AUTO_FIELD ¶ Default: ' django.db.models.AutoField ' Default primary key field type to use for models that don’t have a field with primary_key=True . Migrating auto-created through tables The value of DEFAULT_AUTO_FIELD will be respected when creating new\nauto-created through tables for many-to-many relationships. Unfortunately, the primary keys of existing auto-created through tables\ncannot currently be updated by the migrations framework. This means that if you switch the value of DEFAULT_AUTO_FIELD and then\ngenerate migrations, the primary keys of the related models will be\nupdated, as will the foreign keys from the through table, but the primary\nkey of the auto-created through table will not be migrated. In order to address this, you should add a RunSQL operation to your\nmigrations to perform the required ALTER TABLE step. You can check the\nexisting table name through sqlmigrate , dbshell , or with the\nfield’s remote_field.through._meta.db_table property. Explicitly defined through models are already handled by the migrations\nsystem. Allowing automatic migrations for the primary key of existing auto-created\nthrough tables may be implemented at a later date . DEFAULT_CHARSET ¶ Default: 'utf-8' Default charset to use for all HttpResponse objects, if a MIME type isn’t\nmanually specified. Used when constructing the Content-Type header. DEFAULT_EXCEPTION_REPORTER ¶ Default: ' django.views.debug.ExceptionReporter ' Default exception reporter class to be used if none has been assigned to the HttpRequest instance yet. See Custom error reports . DEFAULT_EXCEPTION_REPORTER_FILTER ¶ Default: ' django.views.debug.SafeExceptionReporterFilter ' Default exception reporter filter class to be used if none has been assigned to\nthe HttpRequest instance yet.\nSee Filtering error reports . DEFAULT_FROM_EMAIL ¶ Default: 'webmaster@localhost' Default email address for automated correspondence from the site manager(s).\nThis address is used in the From: header of outgoing emails and can take\nany format valid in the chosen email sending protocol. This doesn’t affect error messages sent to ADMINS and MANAGERS . See SERVER_EMAIL for that. DEFAULT_INDEX_TABLESPACE ¶ Default: '' (Empty string) Default tablespace to use for indexes on fields that don’t specify\none, if the backend supports it (see Tablespaces ). DEFAULT_TABLESPACE ¶ Default: '' (Empty string) Default tablespace to use for models that don’t specify one, if the\nbackend supports it (see Tablespaces ). DISALLOWED_USER_AGENTS ¶ Default: [] (Empty list) List of compiled regular expression objects representing User-Agent strings\nthat are not allowed to visit any page, systemwide. Use this for bots/crawlers.\nThis is only used if CommonMiddleware is installed (see Middleware ). EMAIL_BACKEND ¶ Default: ' django.core.mail.backends.smtp.EmailBackend ' The backend to use for sending emails. For the list of available backends see Email backends . EMAIL_FILE_PATH ¶ Default: Not defined The directory used by the file email backend to store output files. EMAIL_HOST ¶ Default: 'localhost' The host to use for sending email. See also EMAIL_PORT . EMAIL_HOST_PASSWORD ¶ Default: '' (Empty string) Password to use for the SMTP server defined in EMAIL_HOST . This\nsetting is used in conjunction with EMAIL_HOST_USER when\nauthenticating to the SMTP server. If either of these settings is empty,\nDjango won’t attempt authentication. See also EMAIL_HOST_USER . EMAIL_HOST_USER ¶ Default: '' (Empty string) Username to use for the SMTP server defined in EMAIL_HOST .\nIf empty, Django won’t attempt authentication. See also EMAIL_HOST_PASSWORD . EMAIL_PORT ¶ Default: 25 Port to use for the SMTP server defined in EMAIL_HOST . EMAIL_SUBJECT_PREFIX ¶ Default: '[Django] ' Subject-line prefix for email messages sent with django.core.mail.mail_admins or django.core.mail.mail_managers . You’ll probably want to include the\ntrailing space. EMAIL_USE_LOCALTIME ¶ Default: False Whether to send the SMTP Date header of email messages in the local time\nzone ( True ) or in UTC ( False ). EMAIL_USE_TLS ¶ Default: False Whether to use a TLS (secure) connection when talking to the SMTP server.\nThis is used for explicit TLS connections, generally on port 587. If you are\nexperiencing hanging connections, see the implicit TLS setting EMAIL_USE_SSL . EMAIL_USE_SSL ¶ Default: False Whether to use an implicit TLS (secure) connection when talking to the SMTP\nserver. In most email documentation this type of TLS connection is referred\nto as SSL. It is generally used on port 465. If you are experiencing problems,\nsee the explicit TLS setting EMAIL_USE_TLS . Note that EMAIL_USE_TLS / EMAIL_USE_SSL are mutually\nexclusive, so only set one of those settings to True . EMAIL_SSL_CERTFILE ¶ Default: None If EMAIL_USE_SSL or EMAIL_USE_TLS is True , you can\noptionally specify the path to a PEM-formatted certificate chain file to use\nfor the SSL connection. EMAIL_SSL_KEYFILE ¶ Default: None If EMAIL_USE_SSL or EMAIL_USE_TLS is True , you can\noptionally specify the path to a PEM-formatted private key file to use for the\nSSL connection. Note that setting EMAIL_SSL_CERTFILE and EMAIL_SSL_KEYFILE doesn’t result in any certificate checking. They’re passed to the underlying SSL\nconnection. Please refer to the documentation of Python’s ssl.SSLContext.wrap_socket() function for details on how the\ncertificate chain file and private key file are handled. EMAIL_TIMEOUT ¶ Default: None Specifies a timeout in seconds for blocking operations like the connection\nattempt. FILE_UPLOAD_HANDLERS ¶ Default: [ \"django.core.files.uploadhandler.MemoryFileUploadHandler\" , \"django.core.files.uploadhandler.TemporaryFileUploadHandler\" , ] A list of handlers to use for uploading. Changing this setting allows complete\ncustomization – even replacement – of Django’s upload process. See Managing files for details. FILE_UPLOAD_MAX_MEMORY_SIZE ¶ Default: 2621440 (i.e. 2.5 MB). The maximum size (in bytes) that an upload will be before it gets streamed to\nthe file system. See Managing files for details. See also DATA_UPLOAD_MAX_MEMORY_SIZE . FILE_UPLOAD_DIRECTORY_PERMISSIONS ¶ Default: None The numeric mode to apply to directories created in the process of uploading\nfiles. This setting also determines the default permissions for collected static\ndirectories when using the collectstatic management command. See collectstatic for details on overriding it. This value mirrors the functionality and caveats of the FILE_UPLOAD_PERMISSIONS setting. FILE_UPLOAD_PERMISSIONS ¶ Default: 0o644 The numeric mode (i.e. 0o644 ) to set newly uploaded files to. For\nmore information about what these modes mean, see the documentation for os.chmod() . If None , you’ll get operating-system dependent behavior. On most platforms,\ntemporary files will have a mode of 0o600 , and files saved from memory will\nbe saved using the system’s standard umask. For security reasons, these permissions aren’t applied to the temporary files\nthat are stored in FILE_UPLOAD_TEMP_DIR . This setting also determines the default permissions for collected static files\nwhen using the collectstatic management command. See collectstatic for details on overriding it. Warning Always prefix the mode with 0o . If you’re not familiar with file modes, please note that the 0o prefix\nis very important: it indicates an octal number, which is the way that\nmodes must be specified. If you try to use 644 , you’ll get totally\nincorrect behavior. FILE_UPLOAD_TEMP_DIR ¶ Default: None The directory to store data to (typically files larger than FILE_UPLOAD_MAX_MEMORY_SIZE ) temporarily while uploading files.\nIf None , Django will use the standard temporary directory for the operating\nsystem. For example, this will default to /tmp on *nix-style operating\nsystems. See Managing files for details. FIRST_DAY_OF_WEEK ¶ Default: 0 (Sunday) A number representing the first day of the week. This is especially useful\nwhen displaying a calendar. This value is only used when not using\nformat internationalization, or when a format cannot be found for the\ncurrent locale. The value must be an integer from 0 to 6, where 0 means Sunday, 1 means\nMonday and so on. FIXTURE_DIRS ¶ Default: [] (Empty list) List of directories searched for fixture files,\nin addition to the fixtures directory of each application, in search order. Note that these paths should use Unix-style forward slashes, even on Windows. See Provide data with fixtures and Fixture loading . FORCE_SCRIPT_NAME ¶ Default: None If not None , this will be used as the value of the SCRIPT_NAME environment variable in any HTTP request. This setting can be used to override\nthe server-provided value of SCRIPT_NAME , which may be a rewritten version\nof the preferred value or not supplied at all. It is also used by django.setup() to set the URL resolver script prefix outside of the\nrequest/response cycle (e.g. in management commands and standalone scripts) to\ngenerate correct URLs when FORCE_SCRIPT_NAME is provided. FORM_RENDERER ¶ Default: ' django.forms.renderers.DjangoTemplates ' The class that renders forms and form widgets. It must implement the low-level render API . Included form\nrenderers are: ' django.forms.renderers.DjangoTemplates ' ' django.forms.renderers.Jinja2 ' ' django.forms.renderers.TemplatesSetting ' FORMS_URLFIELD_ASSUME_HTTPS ¶ New in Django 5.0. Deprecated since version 5.0. Default: False Set this transitional setting to True to opt into using \"https\" as the\nnew default value of URLField.assume_scheme during the Django 5.x release cycle. FORMAT_MODULE_PATH ¶ Default: None A full Python path to a Python package that contains custom format definitions\nfor project locales. If not None , Django will check for a formats.py file, under the directory named as the current locale, and will use the\nformats defined in this file. The name of the directory containing the format definitions is expected to be\nnamed using locale name notation, for example de , pt_BR , en_US , etc. For example, if FORMAT_MODULE_PATH is set to mysite.formats ,\nand current language is en (English), Django will expect a directory tree\nlike: mysite/\n    formats/\n        __init__.py\n        en/\n            __init__.py\n            formats.py You can also set this setting to a list of Python paths, for example: FORMAT_MODULE_PATH = [ \"mysite.formats\" , \"some_app.formats\" , ] When Django searches for a certain format, it will go through all given Python\npaths until it finds a module that actually defines the given format. This\nmeans that formats defined in packages farther up in the list will take\nprecedence over the same formats in packages farther down. Available formats are: DATE_FORMAT DATE_INPUT_FORMATS DATETIME_FORMAT , DATETIME_INPUT_FORMATS DECIMAL_SEPARATOR FIRST_DAY_OF_WEEK MONTH_DAY_FORMAT NUMBER_GROUPING SHORT_DATE_FORMAT SHORT_DATETIME_FORMAT THOUSAND_SEPARATOR TIME_FORMAT TIME_INPUT_FORMATS YEAR_MONTH_FORMAT IGNORABLE_404_URLS ¶ Default: [] (Empty list) List of compiled regular expression objects describing URLs that should be\nignored when reporting HTTP 404 errors via email (see How to manage error reporting ). Regular expressions are matched against request's full paths (including\nquery string, if any). Use this if your site does not provide a commonly\nrequested file such as favicon.ico or robots.txt . This is only used if BrokenLinkEmailsMiddleware is enabled (see Middleware ). INSTALLED_APPS ¶ Default: [] (Empty list) A list of strings designating all applications that are enabled in this\nDjango installation. Each string should be a dotted Python path to: an application configuration class (preferred), or a package containing an application. Learn more about application configurations . Use the application registry for introspection Your code should never access INSTALLED_APPS directly. Use django.apps.apps instead. Application names and labels must be unique in INSTALLED_APPS Application names — the dotted Python\npath to the application package — must be unique. There is no way to\ninclude the same application twice, short of duplicating its code under\nanother name. Application labels — by default the\nfinal part of the name — must be unique too. For example, you can’t\ninclude both django.contrib.auth and myproject.auth . However, you\ncan relabel an application with a custom configuration that defines a\ndifferent label . These rules apply regardless of whether INSTALLED_APPS references application configuration classes or application packages. When several applications provide different versions of the same resource\n(template, static file, management command, translation), the application\nlisted first in INSTALLED_APPS has precedence. INTERNAL_IPS ¶ Default: [] (Empty list) A list of IP addresses, as strings, that: Allow the debug() context processor\nto add some variables to the template context. Can use the admindocs bookmarklets even if\nnot logged in as a staff user. Are marked as “internal” (as opposed to “EXTERNAL”) in AdminEmailHandler emails. LANGUAGE_CODE ¶ Default: 'en-us' A string representing the language code for this installation. This should be in\nstandard language ID format . For example, U.S. English\nis \"en-us\" . See also the list of language identifiers and Internationalization and localization . It serves three purposes: If the locale middleware isn’t in use, it decides which translation is served\nto all users. If the locale middleware is active, it provides a fallback language in case the\nuser’s preferred language can’t be determined or is not supported by the\nwebsite. It also provides the fallback translation when a translation for a\ngiven literal doesn’t exist for the user’s preferred language. If localization is explicitly disabled via the unlocalize filter\nor the {% localize off %} tag, it provides fallback\nlocalization formats which will be applied instead. See controlling localization in templates for\ndetails. See How Django discovers language preference for more details. LANGUAGE_COOKIE_AGE ¶ Default: None (expires at browser close) The age of the language cookie, in seconds. LANGUAGE_COOKIE_DOMAIN ¶ Default: None The domain to use for the language cookie. Set this to a string such as \"example.com\" for cross-domain cookies, or use None for a standard\ndomain cookie. Be cautious when updating this setting on a production site. If you update\nthis setting to enable cross-domain cookies on a site that previously used\nstandard domain cookies, existing user cookies that have the old domain\nwill not be updated. This will result in site users being unable to switch\nthe language as long as these cookies persist. The only safe and reliable\noption to perform the switch is to change the language cookie name\npermanently (via the LANGUAGE_COOKIE_NAME setting) and to add\na middleware that copies the value from the old cookie to a new one and then\ndeletes the old one. LANGUAGE_COOKIE_HTTPONLY ¶ Default: False Whether to use HttpOnly flag on the language cookie. If this is set to True , client-side JavaScript will not be able to access the language\ncookie. See SESSION_COOKIE_HTTPONLY for details on HttpOnly . LANGUAGE_COOKIE_NAME ¶ Default: 'django_language' The name of the cookie to use for the language cookie. This can be whatever\nyou want (as long as it’s different from the other cookie names in your\napplication). See Internationalization and localization . LANGUAGE_COOKIE_PATH ¶ Default: '/' The path set on the language cookie. This should either match the URL path of your\nDjango installation or be a parent of that path. This is useful if you have multiple Django instances running under the same\nhostname. They can use different cookie paths and each instance will only see\nits own language cookie. Be cautious when updating this setting on a production site. If you update this\nsetting to use a deeper path than it previously used, existing user cookies that\nhave the old path will not be updated. This will result in site users being\nunable to switch the language as long as these cookies persist. The only safe\nand reliable option to perform the switch is to change the language cookie name\npermanently (via the LANGUAGE_COOKIE_NAME setting), and to add\na middleware that copies the value from the old cookie to a new one and then\ndeletes the one. LANGUAGE_COOKIE_SAMESITE ¶ Default: None The value of the SameSite flag on the language cookie. This flag prevents the\ncookie from being sent in cross-site requests. See SESSION_COOKIE_SAMESITE for details about SameSite . LANGUAGE_COOKIE_SECURE ¶ Default: False Whether to use a secure cookie for the language cookie. If this is set to True , the cookie will be marked as “secure”, which means browsers may\nensure that the cookie is only sent under an HTTPS connection. LANGUAGES ¶ Default: A list of all available languages. This list is continually growing\nand including a copy here would inevitably become rapidly out of date. You can\nsee the current list of translated languages by looking in django/conf/global_settings.py . The list is a list of 2-tuples in the format\n( language code , language name ) – for example, ('ja', 'Japanese') .\nThis specifies which languages are available for language selection. See Internationalization and localization . Generally, the default value should suffice. Only set this setting if you want\nto restrict language selection to a subset of the Django-provided languages. If you define a custom LANGUAGES setting, you can mark the\nlanguage names as translation strings using the gettext_lazy() function. Here’s a sample settings file: from django.utils.translation import gettext_lazy as _ LANGUAGES = [ ( \"de\" , _ ( \"German\" )), ( \"en\" , _ ( \"English\" )), ] LANGUAGES_BIDI ¶ Default: A list of all language codes that are written right-to-left. You can\nsee the current list of these languages by looking in django/conf/global_settings.py . The list contains language codes for languages that are\nwritten right-to-left. Generally, the default value should suffice. Only set this setting if you want\nto restrict language selection to a subset of the Django-provided languages.\nIf you define a custom LANGUAGES setting, the list of bidirectional\nlanguages may contain language codes which are not enabled on a given site. LOCALE_PATHS ¶ Default: [] (Empty list) A list of directories where Django looks for translation files.\nSee How Django discovers translations . Example: LOCALE_PATHS = [ \"/home/www/project/common_files/locale\" , \"/var/local/translations/locale\" , ] Django will look within each of these paths for the <locale_code>/LC_MESSAGES directories containing the actual translation files. LOGGING ¶ Default: A logging configuration dictionary. A data structure containing configuration information. When not-empty, the\ncontents of this data structure will be passed as the argument to the\nconfiguration method described in LOGGING_CONFIG . Among other things, the default logging configuration passes HTTP 500 server\nerrors to an email log handler when DEBUG is False . See also Configuring logging . You can see the default logging configuration by looking in django/utils/log.py . LOGGING_CONFIG ¶ Default: 'logging.config.dictConfig' A path to a callable that will be used to configure logging in the\nDjango project. Points at an instance of Python’s dictConfig configuration method by default. If you set LOGGING_CONFIG to None , the logging\nconfiguration process will be skipped. MANAGERS ¶ Default: [] (Empty list) A list in the same format as ADMINS that specifies who should get\nbroken link notifications when BrokenLinkEmailsMiddleware is enabled. MEDIA_ROOT ¶ Default: '' (Empty string) Absolute filesystem path to the directory that will hold user-uploaded\nfiles . Example: \"/var/www/example.com/media/\" See also MEDIA_URL . Warning MEDIA_ROOT and STATIC_ROOT must have different\nvalues. Before STATIC_ROOT was introduced, it was common to\nrely or fallback on MEDIA_ROOT to also serve static files;\nhowever, since this can have serious security implications, there is a\nvalidation check to prevent it. MEDIA_URL ¶ Default: '' (Empty string) URL that handles the media served from MEDIA_ROOT , used\nfor managing stored files . It must end in a slash if set\nto a non-empty value. You will need to configure these files to be served in both development and production\nenvironments. If you want to use {{ MEDIA_URL }} in your templates, add 'django.template.context_processors.media' in the 'context_processors' option of TEMPLATES . Example: \"https://media.example.com/\" Warning There are security risks if you are accepting uploaded content from\nuntrusted users! See the security guide’s topic on User-uploaded content for mitigation details. Warning MEDIA_URL and STATIC_URL must have different\nvalues. See MEDIA_ROOT for more details. Note If MEDIA_URL is a relative path, then it will be prefixed by the\nserver-provided value of SCRIPT_NAME (or / if not set). This makes\nit easier to serve a Django application in a subpath without adding an\nextra configuration to the settings. MIDDLEWARE ¶ Default: None A list of middleware to use. See Middleware . MIGRATION_MODULES ¶ Default: {} (Empty dictionary) A dictionary specifying the package where migration modules can be found on a\nper-app basis. The default value of this setting is an empty dictionary, but\nthe default package name for migration modules is migrations . Example: { \"blog\" : \"blog.db_migrations\" } In this case, migrations pertaining to the blog app will be contained in\nthe blog.db_migrations package. If you provide the app_label argument, makemigrations will\nautomatically create the package if it doesn’t already exist. When you supply None as a value for an app, Django will consider the app as\nan app without migrations regardless of an existing migrations submodule.\nThis can be used, for example, in a test settings file to skip migrations while\ntesting (tables will still be created for the apps’ models). To disable\nmigrations for all apps during tests, you can set the MIGRATE to False instead. If MIGRATION_MODULES is used in your general project settings, remember to use\nthe migrate --run-syncdb option if you want to create tables for the\napp. MONTH_DAY_FORMAT ¶ Default: 'F j' The default formatting to use for date fields on Django admin change-list\npages – and, possibly, by other parts of the system – in cases when only the\nmonth and day are displayed. For example, when a Django admin change-list page is being filtered by a date\ndrilldown, the header for a given day displays the day and month. Different\nlocales have different formats. For example, U.S. English would say\n“January 1,” whereas Spanish might say “1 Enero.” Note that the corresponding locale-dictated format has higher precedence and\nwill be applied instead. See allowed date format strings . See also DATE_FORMAT , DATETIME_FORMAT , TIME_FORMAT and YEAR_MONTH_FORMAT . NUMBER_GROUPING ¶ Default: 0 Number of digits grouped together on the integer part of a number. Common use is to display a thousand separator. If this setting is 0 , then\nno grouping will be applied to the number. If this setting is greater than 0 , then THOUSAND_SEPARATOR will be used as the separator between\nthose groups. Some locales use non-uniform digit grouping, e.g. 10,00,00,000 in en_IN . For this case, you can provide a sequence with the number of digit\ngroup sizes to be applied. The first number defines the size of the group\npreceding the decimal delimiter, and each number that follows defines the size\nof preceding groups. If the sequence is terminated with -1 , no further\ngrouping is performed. If the sequence terminates with a 0 , the last group\nsize is used for the remainder of the number. Example tuple for en_IN : NUMBER_GROUPING = ( 3 , 2 , 0 ) Note that the locale-dictated format has higher precedence and will be applied\ninstead. See also DECIMAL_SEPARATOR , THOUSAND_SEPARATOR and USE_THOUSAND_SEPARATOR . PREPEND_WWW ¶ Default: False Whether to prepend the “www.” subdomain to URLs that don’t have it. This is only\nused if CommonMiddleware is installed\n(see Middleware ). See also APPEND_SLASH . ROOT_URLCONF ¶ Default: Not defined A string representing the full Python import path to your root URLconf, for\nexample \"mydjangoapps.urls\" . Can be overridden on a per-request basis by\nsetting the attribute urlconf on the incoming HttpRequest object. See How Django processes a request for details. SECRET_KEY ¶ Default: '' (Empty string) A secret key for a particular Django installation. This is used to provide cryptographic signing , and should be set to a unique,\nunpredictable value. django-admin startproject automatically adds a\nrandomly-generated SECRET_KEY to each new project. Uses of the key shouldn’t assume that it’s text or bytes. Every use should go\nthrough force_str() or force_bytes() to convert it to the desired type. Django will refuse to start if SECRET_KEY is not set. Warning Keep this value secret. Running Django with a known SECRET_KEY defeats many of Django’s\nsecurity protections, and can lead to privilege escalation and remote code\nexecution vulnerabilities. The secret key is used for: All sessions if you are using\nany other session backend than django.contrib.sessions.backends.cache ,\nor are using the default get_session_auth_hash() . All messages if you are using CookieStorage or FallbackStorage . All PasswordResetView tokens. Any usage of cryptographic signing , unless a\ndifferent key is provided. When a secret key is no longer set as SECRET_KEY or contained within SECRET_KEY_FALLBACKS all of the above will be invalidated. When\nrotating your secret key, you should move the old key to SECRET_KEY_FALLBACKS temporarily. Secret keys are not used for\npasswords of users and key rotation will not affect them. Note The default settings.py file created by django-admin startproject creates a unique SECRET_KEY for\nconvenience. SECRET_KEY_FALLBACKS ¶ Default: [] A list of fallback secret keys for a particular Django installation. These are\nused to allow rotation of the SECRET_KEY . In order to rotate your secret keys, set a new SECRET_KEY and move the\nprevious value to the beginning of SECRET_KEY_FALLBACKS . Then remove the\nold values from the end of the SECRET_KEY_FALLBACKS when you are ready to\nexpire the sessions, password reset tokens, and so on, that make use of them. Note Signing operations are computationally expensive. Having multiple old key\nvalues in SECRET_KEY_FALLBACKS adds additional overhead to all checks\nthat don’t match an earlier key. As such, fallback values should be removed after an appropriate period,\nallowing for key rotation. Uses of the secret key values shouldn’t assume that they are text or bytes.\nEvery use should go through force_str() or force_bytes() to convert it to the desired type. SECURE_CONTENT_TYPE_NOSNIFF ¶ Default: True If True , the SecurityMiddleware sets the X-Content-Type-Options: nosniff header on all responses that do not\nalready have it. SECURE_CROSS_ORIGIN_OPENER_POLICY ¶ Default: 'same-origin' Unless set to None , the SecurityMiddleware sets the Cross-Origin Opener Policy header on all responses that do not already\nhave it to the value provided. SECURE_HSTS_INCLUDE_SUBDOMAINS ¶ Default: False If True , the SecurityMiddleware adds\nthe includeSubDomains directive to the HTTP Strict Transport Security header. It has no effect unless SECURE_HSTS_SECONDS is set to a\nnon-zero value. Warning Setting this incorrectly can irreversibly (for the value of SECURE_HSTS_SECONDS ) break your site. Read the HTTP Strict Transport Security documentation first. SECURE_HSTS_PRELOAD ¶ Default: False If True , the SecurityMiddleware adds\nthe preload directive to the HTTP Strict Transport Security header. It has no effect unless SECURE_HSTS_SECONDS is set to a\nnon-zero value. SECURE_HSTS_SECONDS ¶ Default: 0 If set to a non-zero integer value, the SecurityMiddleware sets the HTTP Strict Transport Security header on all responses that do not\nalready have it. Warning Setting this incorrectly can irreversibly (for some time) break your site.\nRead the HTTP Strict Transport Security documentation first. SECURE_PROXY_SSL_HEADER ¶ Default: None A tuple representing an HTTP header/value combination that signifies a request\nis secure. This controls the behavior of the request object’s is_secure() method. By default, is_secure() determines if a request is secure by confirming\nthat a requested URL uses https:// . This method is important for Django’s\nCSRF protection, and it may be used by your own code or third-party apps. If your Django app is behind a proxy, though, the proxy may be “swallowing”\nwhether the original request uses HTTPS or not. If there is a non-HTTPS\nconnection between the proxy and Django then is_secure() would always\nreturn False – even for requests that were made via HTTPS by the end user.\nIn contrast, if there is an HTTPS connection between the proxy and Django then is_secure() would always return True – even for requests that were\nmade originally via HTTP. In this situation, configure your proxy to set a custom HTTP header that tells\nDjango whether the request came in via HTTPS, and set SECURE_PROXY_SSL_HEADER so that Django knows what header to look for. Set a tuple with two elements – the name of the header to look for and the\nrequired value. For example: SECURE_PROXY_SSL_HEADER = ( \"HTTP_X_FORWARDED_PROTO\" , \"https\" ) This tells Django to trust the X-Forwarded-Proto header that comes from our\nproxy and that the request is guaranteed to be secure (i.e., it originally came\nin via HTTPS) when: the header value is 'https' , or its initial, leftmost value is 'https' in the case of a comma-separated\nlist of protocols (e.g. 'https,http,http' ). You should only set this setting if you control your proxy or have some other\nguarantee that it sets/strips this header appropriately. Note that the header needs to be in the format as used by request.META –\nall caps and likely starting with HTTP_ . (Remember, Django automatically\nadds 'HTTP_' to the start of x-header names before making the header\navailable in request.META .) Warning Modifying this setting can compromise your site’s security. Ensure you\nfully understand your setup before changing it. Make sure ALL of the following are true before setting this (assuming the\nvalues from the example above): Your Django app is behind a proxy. Your proxy strips the X-Forwarded-Proto header from all incoming\nrequests, even when it contains a comma-separated list of protocols. In\nother words, if end users include that header in their requests, the\nproxy will discard it. Your proxy sets the X-Forwarded-Proto header and sends it to Django,\nbut only for requests that originally come in via HTTPS. If any of those are not true, you should keep this setting set to None and find another way of determining HTTPS, perhaps via custom middleware. SECURE_REDIRECT_EXEMPT ¶ Default: [] (Empty list) If a URL path matches a regular expression in this list, the request will not be\nredirected to HTTPS. The SecurityMiddleware strips leading slashes\nfrom URL paths, so patterns shouldn’t include them, e.g. SECURE_REDIRECT_EXEMPT = [r'^no-ssl/$', …] . If SECURE_SSL_REDIRECT is False , this setting has no effect. SECURE_REFERRER_POLICY ¶ Default: 'same-origin' If configured, the SecurityMiddleware sets\nthe Referrer Policy header on all responses that do not already have it\nto the value provided. SECURE_SSL_HOST ¶ Default: None If a string (e.g. secure.example.com ), all SSL redirects will be directed\nto this host rather than the originally-requested host\n(e.g. www.example.com ). If SECURE_SSL_REDIRECT is False , this\nsetting has no effect. SECURE_SSL_REDIRECT ¶ Default: False If True , the SecurityMiddleware redirects all non-HTTPS requests to HTTPS (except for\nthose URLs matching a regular expression listed in SECURE_REDIRECT_EXEMPT ). Note If turning this to True causes infinite redirects, it probably means\nyour site is running behind a proxy and can’t tell which requests are secure\nand which are not. Your proxy likely sets a header to indicate secure\nrequests; you can correct the problem by finding out what that header is and\nconfiguring the SECURE_PROXY_SSL_HEADER setting accordingly. SERIALIZATION_MODULES ¶ Default: Not defined A dictionary of modules containing serializer definitions (provided as\nstrings), keyed by a string identifier for that serialization type. For\nexample, to define a YAML serializer, use: SERIALIZATION_MODULES = { \"yaml\" : \"path.to.yaml_serializer\" } SERVER_EMAIL ¶ Default: 'root@localhost' The email address that error messages come from, such as those sent to ADMINS and MANAGERS . This address is used in the From: header and can take any format valid in the chosen email sending\nprotocol. Why are my emails sent from a different address? This address is used only for error messages. It is not the address that\nregular email messages sent with send_mail() come from; for that, see DEFAULT_FROM_EMAIL . SHORT_DATE_FORMAT ¶ Default: 'm/d/Y' (e.g. 12/31/2003 ) An available formatting that can be used for displaying date fields on\ntemplates. Note that the corresponding locale-dictated format has higher\nprecedence and will be applied instead. See allowed date format strings . See also DATE_FORMAT and SHORT_DATETIME_FORMAT . SHORT_DATETIME_FORMAT ¶ Default: 'm/d/Y P' (e.g. 12/31/2003 4 p.m. ) An available formatting that can be used for displaying datetime fields on\ntemplates. Note that the corresponding locale-dictated format has higher\nprecedence and will be applied instead. See allowed date format strings . See also DATE_FORMAT and SHORT_DATE_FORMAT . SIGNING_BACKEND ¶ Default: 'django.core.signing.TimestampSigner' The backend used for signing cookies and other data. See also the Cryptographic signing documentation. SILENCED_SYSTEM_CHECKS ¶ Default: [] (Empty list) A list of identifiers of messages generated by the system check framework\n(i.e. [\"models.W001\"] ) that you wish to permanently acknowledge and ignore.\nSilenced checks will not be output to the console. See also the System check framework documentation. STORAGES ¶ Default: { \"default\" : { \"BACKEND\" : \"django.core.files.storage.FileSystemStorage\" , }, \"staticfiles\" : { \"BACKEND\" : \"django.contrib.staticfiles.storage.StaticFilesStorage\" , }, } A dictionary containing the settings for all storages to be used with Django.\nIt is a nested dictionary whose contents map a storage alias to a dictionary\ncontaining the options for an individual storage. Storages can have any alias you choose. However, there are two aliases with\nspecial significance: default for managing files . ' django.core.files.storage.FileSystemStorage ' is the\ndefault storage engine. staticfiles for managing static files . ' django.contrib.staticfiles.storage.StaticFilesStorage ' is\nthe default storage engine. The following is an example settings.py snippet defining a custom file\nstorage called example : STORAGES = { # ... \"example\" : { \"BACKEND\" : \"django.core.files.storage.FileSystemStorage\" , \"OPTIONS\" : { \"location\" : \"/example\" , \"base_url\" : \"/example/\" , }, }, } OPTIONS are passed to the BACKEND on initialization in **kwargs . A ready-to-use instance of the storage backends can be retrieved from django.core.files.storage.storages . Use a key corresponding to the\nbackend definition in STORAGES . Is my value merged with the default value? Defining this setting overrides the default value and is not merged with\nit. TEMPLATES ¶ Default: [] (Empty list) A list containing the settings for all template engines to be used with\nDjango. Each item of the list is a dictionary containing the options for an\nindividual engine. Here’s a setup that tells the Django template engine to load templates from the templates subdirectory inside each installed application: TEMPLATES = [ { \"BACKEND\" : \"django.template.backends.django.DjangoTemplates\" , \"APP_DIRS\" : True , }, ] The following options are available for all backends. BACKEND ¶ Default: Not defined The template backend to use. The built-in template backends are: 'django.template.backends.django.DjangoTemplates' 'django.template.backends.jinja2.Jinja2' You can use a template backend that doesn’t ship with Django by setting BACKEND to a fully-qualified path (i.e. 'mypackage.whatever.Backend' ). NAME ¶ Default: see below The alias for this particular template engine. It’s an identifier that allows\nselecting an engine for rendering. Aliases must be unique across all\nconfigured template engines. It defaults to the name of the module defining the engine class, i.e. the\nnext to last piece of BACKEND , when it isn’t\nprovided. For example if the backend is 'mypackage.whatever.Backend' then\nits default name is 'whatever' . DIRS ¶ Default: [] (Empty list) Directories where the engine should look for template source files, in search\norder. APP_DIRS ¶ Default: False Whether the engine should look for template source files inside installed\napplications. Note The default settings.py file created by django-admin startproject sets 'APP_DIRS': True . OPTIONS ¶ Default: {} (Empty dict) Extra parameters to pass to the template backend. Available parameters vary\ndepending on the template backend. See DjangoTemplates and Jinja2 for the options of the\nbuilt-in backends. TEST_RUNNER ¶ Default: 'django.test.runner.DiscoverRunner' The name of the class to use for starting the test suite. See Using different testing frameworks . TEST_NON_SERIALIZED_APPS ¶ Default: [] (Empty list) In order to restore the database state between tests for TransactionTestCase s and database backends without transactions, Django\nwill serialize the contents of all apps when it starts the test run so it can then reload from that copy before running\ntests that need it. This slows down the startup time of the test runner; if you have apps that\nyou know don’t need this feature, you can add their full names in here (e.g. 'django.contrib.contenttypes' ) to exclude them from this serialization\nprocess. THOUSAND_SEPARATOR ¶ Default: ',' (Comma) Default thousand separator used when formatting numbers. This setting is\nused only when USE_THOUSAND_SEPARATOR is True and NUMBER_GROUPING is greater than 0 . Note that the locale-dictated format has higher precedence and will be applied\ninstead. See also NUMBER_GROUPING , DECIMAL_SEPARATOR and USE_THOUSAND_SEPARATOR . TIME_FORMAT ¶ Default: 'P' (e.g. 4 p.m. ) The default formatting to use for displaying time fields in any part of the\nsystem. Note that the locale-dictated format has higher precedence and will be\napplied instead. See allowed date format strings . See also DATE_FORMAT and DATETIME_FORMAT . TIME_INPUT_FORMATS ¶ Default: [ \"%H:%M:%S\" , # '14:30:59' \"%H:%M:%S. %f \" , # '14:30:59.000200' \"%H:%M\" , # '14:30' ] A list of formats that will be accepted when inputting data on a time field.\nFormats will be tried in order, using the first valid one. Note that these\nformat strings use Python’s datetime module syntax , not the format strings from the date template filter. The locale-dictated format has higher precedence and will be applied instead. See also DATE_INPUT_FORMATS and DATETIME_INPUT_FORMATS . TIME_ZONE ¶ Default: 'America/Chicago' A string representing the time zone for this installation. See the list of\ntime zones . Note Since Django was first released with the TIME_ZONE set to 'America/Chicago' , the global setting (used if nothing is defined in\nyour project’s settings.py ) remains 'America/Chicago' for backwards\ncompatibility. New project templates default to 'UTC' . Note that this isn’t necessarily the time zone of the server. For example, one\nserver may serve multiple Django-powered sites, each with a separate time zone\nsetting. When USE_TZ is False , this is the time zone in which Django\nwill store all datetimes. When USE_TZ is True , this is the\ndefault time zone that Django will use to display datetimes in templates and\nto interpret datetimes entered in forms. On Unix environments (where time.tzset() is implemented), Django sets the os.environ['TZ'] variable to the time zone you specify in the TIME_ZONE setting. Thus, all your views and models will\nautomatically operate in this time zone. However, Django won’t set the TZ environment variable if you’re using the manual configuration option as\ndescribed in manually configuring settings . If Django doesn’t set the TZ environment variable, it’s up to you to ensure your processes are running in\nthe correct environment. Note Django cannot reliably use alternate time zones in a Windows environment.\nIf you’re running Django on Windows, TIME_ZONE must be set to\nmatch the system time zone. USE_I18N ¶ Default: True A boolean that specifies whether Django’s translation system should be enabled.\nThis provides a way to turn it off, for performance. If this is set to False , Django will make some optimizations so as not to load the\ntranslation machinery. See also LANGUAGE_CODE and USE_TZ . Note The default settings.py file created by django-admin startproject includes USE_I18N = True for convenience. USE_THOUSAND_SEPARATOR ¶ Default: False A boolean that specifies whether to display numbers using a thousand separator.\nWhen set to True , Django will format numbers using the NUMBER_GROUPING and THOUSAND_SEPARATOR settings. The\nlatter two settings may also be dictated by the locale, which takes precedence. See also DECIMAL_SEPARATOR , NUMBER_GROUPING and THOUSAND_SEPARATOR . USE_TZ ¶ Default: True A boolean that specifies if datetimes will be timezone-aware by default or not.\nIf this is set to True , Django will use timezone-aware datetimes internally. When USE_TZ is False, Django will use naive datetimes in local time, except\nwhen parsing ISO 8601 formatted strings, where timezone information will always\nbe retained if present. See also TIME_ZONE and USE_I18N . Changed in Django 5.0: In older versions, the default value is False . USE_X_FORWARDED_HOST ¶ Default: False A boolean that specifies whether to use the X-Forwarded-Host header in\npreference to the Host header. This should only be enabled if a proxy\nwhich sets this header is in use. This setting takes priority over USE_X_FORWARDED_PORT . Per RFC 7239 Section 5.3 , the X-Forwarded-Host header can include the port\nnumber, in which case you shouldn’t use USE_X_FORWARDED_PORT . USE_X_FORWARDED_PORT ¶ Default: False A boolean that specifies whether to use the X-Forwarded-Port header in\npreference to the SERVER_PORT META variable. This should only be\nenabled if a proxy which sets this header is in use. USE_X_FORWARDED_HOST takes priority over this setting. WSGI_APPLICATION ¶ Default: None The full Python path of the WSGI application object that Django’s built-in\nservers (e.g. runserver ) will use. The django-admin startproject management command will create a standard wsgi.py file with an application callable in it, and point this setting\nto that application . If not set, the return value of django.core.wsgi.get_wsgi_application() will be used. In this case, the behavior of runserver will be\nidentical to previous Django versions. YEAR_MONTH_FORMAT ¶ Default: 'F Y' The default formatting to use for date fields on Django admin change-list\npages – and, possibly, by other parts of the system – in cases when only the\nyear and month are displayed. For example, when a Django admin change-list page is being filtered by a date\ndrilldown, the header for a given month displays the month and the year.\nDifferent locales have different formats. For example, U.S. English would say\n“January 2006,” whereas another locale might say “2006/January.” Note that the corresponding locale-dictated format has higher precedence and\nwill be applied instead. See allowed date format strings . See also DATE_FORMAT , DATETIME_FORMAT , TIME_FORMAT and MONTH_DAY_FORMAT . X_FRAME_OPTIONS ¶ Default: 'DENY' The default value for the X-Frame-Options header used by XFrameOptionsMiddleware . See the clickjacking protection documentation. Auth ¶ Settings for django.contrib.auth . AUTHENTICATION_BACKENDS ¶ Default: ['django.contrib.auth.backends.ModelBackend'] A list of authentication backend classes (as strings) to use when attempting to\nauthenticate a user. See the authentication backends documentation for details. AUTH_USER_MODEL ¶ Default: 'auth.User' The model to use to represent a User. See Substituting a custom User model . Warning You cannot change the AUTH_USER_MODEL setting during the lifetime of\na project (i.e. once you have made and migrated models that depend on it)\nwithout serious effort. It is intended to be set at the project start,\nand the model it refers to must be available in the first migration of\nthe app that it lives in.\nSee Substituting a custom User model for more details. LOGIN_REDIRECT_URL ¶ Default: '/accounts/profile/' The URL or named URL pattern where requests are\nredirected after login when the LoginView doesn’t get a next GET parameter. LOGIN_URL ¶ Default: '/accounts/login/' The URL or named URL pattern where requests are\nredirected for login when using the login_required() decorator, LoginRequiredMixin , AccessMixin , or when LoginRequiredMiddleware is installed. LOGOUT_REDIRECT_URL ¶ Default: None The URL or named URL pattern where requests are\nredirected after logout if LogoutView doesn’t have a next_page attribute. If None , no redirect will be performed and the logout view will be\nrendered. PASSWORD_RESET_TIMEOUT ¶ Default: 259200 (3 days, in seconds) The number of seconds a password reset link is valid for. Used by the PasswordResetConfirmView . Note Reducing the value of this timeout doesn’t make any difference to the\nability of an attacker to brute-force a password reset token. Tokens are\ndesigned to be safe from brute-forcing without any timeout. This timeout exists to protect against some unlikely attack scenarios, such\nas someone gaining access to email archives that may contain old, unused\npassword reset tokens. PASSWORD_HASHERS ¶ See How Django stores passwords . Default: [ \"django.contrib.auth.hashers.PBKDF2PasswordHasher\" , \"django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher\" , \"django.contrib.auth.hashers.Argon2PasswordHasher\" , \"django.contrib.auth.hashers.BCryptSHA256PasswordHasher\" , \"django.contrib.auth.hashers.ScryptPasswordHasher\" , ] AUTH_PASSWORD_VALIDATORS ¶ Default: [] (Empty list) The list of validators that are used to check the strength of user’s passwords.\nSee Password validation for more details. By default, no validation is\nperformed and all passwords are accepted. Messages ¶ Settings for django.contrib.messages . MESSAGE_LEVEL ¶ Default: messages.INFO Sets the minimum message level that will be recorded by the messages\nframework. See message levels for more details. Avoiding circular imports If you override MESSAGE_LEVEL in your settings file and rely on any of\nthe built-in constants, you must import the constants module directly to\navoid the potential for circular imports, e.g.: from django.contrib.messages import constants as message_constants MESSAGE_LEVEL = message_constants . DEBUG If desired, you may specify the numeric values for the constants directly\naccording to the values in the above constants table . MESSAGE_STORAGE ¶ Default: 'django.contrib.messages.storage.fallback.FallbackStorage' Controls where Django stores message data. Valid values are: 'django.contrib.messages.storage.fallback.FallbackStorage' 'django.contrib.messages.storage.session.SessionStorage' 'django.contrib.messages.storage.cookie.CookieStorage' See message storage backends for more details. The backends that use cookies – CookieStorage and FallbackStorage –\nuse the value of SESSION_COOKIE_DOMAIN , SESSION_COOKIE_SECURE and SESSION_COOKIE_HTTPONLY when setting their cookies. MESSAGE_TAGS ¶ Default: { messages . DEBUG : \"debug\" , messages . INFO : \"info\" , messages . SUCCESS : \"success\" , messages . WARNING : \"warning\" , messages . ERROR : \"error\" , } This sets the mapping of message level to message tag, which is typically\nrendered as a CSS class in HTML. If you specify a value, it will extend\nthe default. This means you only have to specify those values which you need\nto override. See Displaying messages above for more details. Avoiding circular imports If you override MESSAGE_TAGS in your settings file and rely on any of\nthe built-in constants, you must import the constants module directly to\navoid the potential for circular imports, e.g.: from django.contrib.messages import constants as message_constants MESSAGE_TAGS = { message_constants . INFO : \"\" } If desired, you may specify the numeric values for the constants directly\naccording to the values in the above constants table . Sessions ¶ Settings for django.contrib.sessions . SESSION_CACHE_ALIAS ¶ Default: 'default' If you’re using cache-based session storage ,\nthis selects the cache to use. SESSION_COOKIE_AGE ¶ Default: 1209600 (2 weeks, in seconds) The age of session cookies, in seconds. SESSION_COOKIE_DOMAIN ¶ Default: None The domain to use for session cookies. Set this to a string such as \"example.com\" for cross-domain cookies, or use None for a standard\ndomain cookie. To use cross-domain cookies with CSRF_USE_SESSIONS , you must include\na leading dot (e.g. \".example.com\" ) to accommodate the CSRF middleware’s\nreferer checking. Be cautious when updating this setting on a production site. If you update\nthis setting to enable cross-domain cookies on a site that previously used\nstandard domain cookies, existing user cookies will be set to the old\ndomain. This may result in them being unable to log in as long as these cookies\npersist. This setting also affects cookies set by django.contrib.messages . SESSION_COOKIE_HTTPONLY ¶ Default: True Whether to use HttpOnly flag on the session cookie. If this is set to True , client-side JavaScript will not be able to access the session\ncookie. HttpOnly is a flag included in a Set-Cookie HTTP response header. It’s part of\nthe RFC 6265 Section 4.1.2.6 standard for cookies and can be a useful way to\nmitigate the risk of a client-side script accessing the protected cookie data. This makes it less trivial for an attacker to escalate a cross-site scripting\nvulnerability into full hijacking of a user’s session. There aren’t many good\nreasons for turning this off. Your code shouldn’t read session cookies from\nJavaScript. SESSION_COOKIE_NAME ¶ Default: 'sessionid' The name of the cookie to use for sessions. This can be whatever you want\n(as long as it’s different from the other cookie names in your application). SESSION_COOKIE_PATH ¶ Default: '/' The path set on the session cookie. This should either match the URL path of your\nDjango installation or be parent of that path. This is useful if you have multiple Django instances running under the same\nhostname. They can use different cookie paths, and each instance will only see\nits own session cookie. SESSION_COOKIE_SAMESITE ¶ Default: 'Lax' The value of the SameSite flag on the session cookie. This flag prevents the\ncookie from being sent in cross-site requests thus preventing CSRF attacks and\nmaking some methods of stealing session cookie impossible. Possible values for the setting are: 'Strict' : prevents the cookie from being sent by the browser to the\ntarget site in all cross-site browsing context, even when following a regular\nlink. For example, for a GitHub-like website this would mean that if a logged-in\nuser follows a link to a private GitHub project posted on a corporate\ndiscussion forum or email, GitHub will not receive the session cookie and the\nuser won’t be able to access the project. A bank website, however, most\nlikely doesn’t want to allow any transactional pages to be linked from\nexternal sites so the 'Strict' flag would be appropriate. 'Lax' (default): provides a balance between security and usability for\nwebsites that want to maintain user’s logged-in session after the user\narrives from an external link. In the GitHub scenario, the session cookie would be allowed when following a\nregular link from an external website and be blocked in CSRF-prone request\nmethods (e.g. POST ). 'None' (string): the session cookie will be sent with all same-site and\ncross-site requests. False : disables the flag. Note Modern browsers provide a more secure default policy for the SameSite flag and will assume Lax for cookies without an explicit value set. SESSION_COOKIE_SECURE ¶ Default: False Whether to use a secure cookie for the session cookie. If this is set to True , the cookie will be marked as “secure”, which means browsers may\nensure that the cookie is only sent under an HTTPS connection. Leaving this setting off isn’t a good idea because an attacker could capture an\nunencrypted session cookie with a packet sniffer and use the cookie to hijack\nthe user’s session. SESSION_ENGINE ¶ Default: 'django.contrib.sessions.backends.db' Controls where Django stores session data. Included engines are: 'django.contrib.sessions.backends.db' 'django.contrib.sessions.backends.file' 'django.contrib.sessions.backends.cache' 'django.contrib.sessions.backends.cached_db' 'django.contrib.sessions.backends.signed_cookies' See Configuring the session engine for more details. SESSION_EXPIRE_AT_BROWSER_CLOSE ¶ Default: False Whether to expire the session when the user closes their browser. See Browser-length sessions vs. persistent sessions . SESSION_FILE_PATH ¶ Default: None If you’re using file-based session storage, this sets the directory in\nwhich Django will store session data. When the default value ( None ) is\nused, Django will use the standard temporary directory for the system. SESSION_SAVE_EVERY_REQUEST ¶ Default: False Whether to save the session data on every request. If this is False (default), then the session data will only be saved if it has been modified –\nthat is, if any of its dictionary values have been assigned or deleted. Empty\nsessions won’t be created, even if this setting is active. SESSION_SERIALIZER ¶ Default: 'django.contrib.sessions.serializers.JSONSerializer' Full import path of a serializer class to use for serializing session data.\nIncluded serializer is: 'django.contrib.sessions.serializers.JSONSerializer' See Session serialization for details. Sites ¶ Settings for django.contrib.sites . SITE_ID ¶ Default: Not defined The ID, as an integer, of the current site in the django_site database\ntable. This is used so that application data can hook into specific sites\nand a single database can manage content for multiple sites. Static Files ¶ Settings for django.contrib.staticfiles . STATIC_ROOT ¶ Default: None The absolute path to the directory where collectstatic will collect\nstatic files for deployment. Example: \"/var/www/example.com/static/\" If the staticfiles contrib app is enabled\n(as in the default project template), the collectstatic management\ncommand will collect static files into this directory. See the how-to on managing static files for more details about\nusage. Warning This should be an initially empty destination directory for collecting\nyour static files from their permanent locations into one directory for\nease of deployment; it is not a place to store your static files\npermanently. You should do that in directories that will be found by staticfiles ’s finders , which by default, are 'static/' app sub-directories and any directories you include in STATICFILES_DIRS ). STATIC_URL ¶ Default: None URL to use when referring to static files located in STATIC_ROOT . Example: \"static/\" or \"https://static.example.com/\" If not None , this will be used as the base path for asset definitions (the Media class) and the staticfiles app . It must end in a slash if set to a non-empty value. You may need to configure these files to be served in development and will definitely need to do so in production . Note If STATIC_URL is a relative path, then it will be prefixed by\nthe server-provided value of SCRIPT_NAME (or / if not set). This\nmakes it easier to serve a Django application in a subpath without adding\nan extra configuration to the settings. STATICFILES_DIRS ¶ Default: [] (Empty list) This setting defines the additional locations the staticfiles app will traverse\nif the FileSystemFinder finder is enabled, e.g. if you use the collectstatic or findstatic management command or use the\nstatic file serving view. This should be set to a list of strings that contain full paths to\nyour additional files directory(ies) e.g.: STATICFILES_DIRS = [ \"/home/special.polls.com/polls/static\" , \"/home/polls.com/polls/static\" , \"/opt/webfiles/common\" , ] Note that these paths should use Unix-style forward slashes, even on Windows\n(e.g. \"C:/Users/user/mysite/extra_static_content\" ). Prefixes (optional) ¶ In case you want to refer to files in one of the locations with an additional\nnamespace, you can optionally provide a prefix as (prefix, path) tuples, e.g.: STATICFILES_DIRS = [ # ... ( \"downloads\" , \"/opt/webfiles/stats\" ), ] For example, assuming you have STATIC_URL set to 'static/' , the collectstatic management command would collect the “stats” files\nin a 'downloads' subdirectory of STATIC_ROOT . This would allow you to refer to the local file '/opt/webfiles/stats/polls_20101022.tar.gz' with '/static/downloads/polls_20101022.tar.gz' in your templates, e.g.: < a href = \" {% static 'downloads/polls_20101022.tar.gz' %} \" > STATICFILES_FINDERS ¶ Default: [ \"django.contrib.staticfiles.finders.FileSystemFinder\" , \"django.contrib.staticfiles.finders.AppDirectoriesFinder\" , ] The list of finder backends that know how to find static files in\nvarious locations. The default will find files stored in the STATICFILES_DIRS setting\n(using django.contrib.staticfiles.finders.FileSystemFinder ) and in a static subdirectory of each app (using django.contrib.staticfiles.finders.AppDirectoriesFinder ). If multiple\nfiles with the same name are present, the first file that is found will be\nused. One finder is disabled by default: django.contrib.staticfiles.finders.DefaultStorageFinder . If added to\nyour STATICFILES_FINDERS setting, it will look for static files in\nthe default file storage as defined by the default key in the STORAGES setting. Note When using the AppDirectoriesFinder finder, make sure your apps\ncan be found by staticfiles by adding the app to the INSTALLED_APPS setting of your site. Static file finders are currently considered a private interface, and this\ninterface is thus undocumented. Core Settings Topical Index ¶ Cache ¶ CACHES CACHE_MIDDLEWARE_ALIAS CACHE_MIDDLEWARE_KEY_PREFIX CACHE_MIDDLEWARE_SECONDS Database ¶ DATABASES DATABASE_ROUTERS DEFAULT_INDEX_TABLESPACE DEFAULT_TABLESPACE Debugging ¶ DEBUG DEBUG_PROPAGATE_EXCEPTIONS Email ¶ ADMINS DEFAULT_CHARSET DEFAULT_FROM_EMAIL EMAIL_BACKEND EMAIL_FILE_PATH EMAIL_HOST EMAIL_HOST_PASSWORD EMAIL_HOST_USER EMAIL_PORT EMAIL_SSL_CERTFILE EMAIL_SSL_KEYFILE EMAIL_SUBJECT_PREFIX EMAIL_TIMEOUT EMAIL_USE_LOCALTIME EMAIL_USE_TLS MANAGERS SERVER_EMAIL Error reporting ¶ DEFAULT_EXCEPTION_REPORTER DEFAULT_EXCEPTION_REPORTER_FILTER IGNORABLE_404_URLS MANAGERS SILENCED_SYSTEM_CHECKS File uploads ¶ FILE_UPLOAD_HANDLERS FILE_UPLOAD_MAX_MEMORY_SIZE FILE_UPLOAD_PERMISSIONS FILE_UPLOAD_TEMP_DIR MEDIA_ROOT MEDIA_URL STORAGES Forms ¶ FORM_RENDERER FORMS_URLFIELD_ASSUME_HTTPS Globalization ( i18n / l10n ) ¶ Internationalization ( i18n ) ¶ FIRST_DAY_OF_WEEK FORMAT_MODULE_PATH LANGUAGE_COOKIE_AGE LANGUAGE_COOKIE_DOMAIN LANGUAGE_COOKIE_HTTPONLY LANGUAGE_COOKIE_NAME LANGUAGE_COOKIE_PATH LANGUAGE_COOKIE_SAMESITE LANGUAGE_COOKIE_SECURE LANGUAGES LANGUAGES_BIDI LOCALE_PATHS TIME_ZONE USE_I18N USE_TZ Localization ( l10n ) ¶ DATE_FORMAT DATE_INPUT_FORMATS DATETIME_FORMAT DATETIME_INPUT_FORMATS DECIMAL_SEPARATOR LANGUAGE_CODE MONTH_DAY_FORMAT NUMBER_GROUPING SHORT_DATE_FORMAT SHORT_DATETIME_FORMAT THOUSAND_SEPARATOR TIME_FORMAT TIME_INPUT_FORMATS USE_THOUSAND_SEPARATOR YEAR_MONTH_FORMAT HTTP ¶ DATA_UPLOAD_MAX_MEMORY_SIZE DATA_UPLOAD_MAX_NUMBER_FIELDS DATA_UPLOAD_MAX_NUMBER_FILES DEFAULT_CHARSET DISALLOWED_USER_AGENTS FORCE_SCRIPT_NAME INTERNAL_IPS MIDDLEWARE Security SECURE_CONTENT_TYPE_NOSNIFF SECURE_CROSS_ORIGIN_OPENER_POLICY SECURE_HSTS_INCLUDE_SUBDOMAINS SECURE_HSTS_PRELOAD SECURE_HSTS_SECONDS SECURE_PROXY_SSL_HEADER SECURE_REDIRECT_EXEMPT SECURE_REFERRER_POLICY SECURE_SSL_HOST SECURE_SSL_REDIRECT SIGNING_BACKEND USE_X_FORWARDED_HOST USE_X_FORWARDED_PORT WSGI_APPLICATION Logging ¶ LOGGING LOGGING_CONFIG Models ¶ ABSOLUTE_URL_OVERRIDES FIXTURE_DIRS INSTALLED_APPS Security ¶ Cross Site Request Forgery Protection CSRF_COOKIE_DOMAIN CSRF_COOKIE_NAME CSRF_COOKIE_PATH CSRF_COOKIE_SAMESITE CSRF_COOKIE_SECURE CSRF_FAILURE_VIEW CSRF_HEADER_NAME CSRF_TRUSTED_ORIGINS CSRF_USE_SESSIONS SECRET_KEY SECRET_KEY_FALLBACKS X_FRAME_OPTIONS Serialization ¶ DEFAULT_CHARSET SERIALIZATION_MODULES Templates ¶ TEMPLATES Testing ¶ Database: TEST TEST_NON_SERIALIZED_APPS TEST_RUNNER URLs ¶ APPEND_SLASH PREPEND_WWW ROOT_URLCONF", "keywords": ["contrast", "sockets", "alter", "time.tzset", "default_from_email", "mydjangoapps.urls", "transactions", "setups", "signing", "variable", "comma", "tmp", "october", "type", "line", "en_in", "https://", "subdomain", "url", "httpresponse", "force_script_name", "django.core.files.storage.storages", "fallback", "finder", "introspection", "y-%m-", "def", "get_host", "place", "username", "octal", "id", "settings", "secure_ssl_redirect", "reason", "m", "submodule", "logout", "4.1.2.6", "locmemcache", "day", "classes", "mysite", "omf", "default_auto_field", "method", "django.core.cache.backends.locmem", "party", "info", "email_host_user", "points", "configurations", "testing", "secret_key", "django.contrib.messages", "usability", "csrf_failure_view", "upload", "directories", "django.contrib.messages.storage.cookie", "transactiontestcase", "csrf_failure", "corresponding", "performance", "responses", "boolean", "labels", "session_cookie_path", "use", "conn_max_age", "views", "messages", "encoding", "en/", "cookies", "csrf_cookie_path", "us", "right", "secure_ssl_host", "django_cache", "language_cookie_domain", "difference", "sample", "scripts", "project", ".example.com", "special.polls.com", "topic", "login", "mysite.formats", "modelbackend", "consumption", "standard", "way", "default", "wildcard", "suite", "option", "referer", "piece", "fqdn", "media_url", "make_key", "bank", "django.core.mail.mail_admins", "gettext_lazy", "client", "calendar", "domain", "referrer", "effort", "session_cookie_domain", "need", "downloads", "ignorable_404_urls", "page", "mypackage.whatever", "sqlite3.db", "csrf_cookie_domain", "locale_paths", "package", "contrib", "leftmost", "age", "users", "databasecache", "guide", "django.template.backends.jinja2.jinja2", "tree", "backend", "label", "django.contrib.staticfiles.storage", "people", "argument", "year_month_format", "words", "app_label.model_name", "localization", "create_db", "auto", "django.contrib.staticfiles", "version", "filesystem", "tuple", "subdirectory", "windows", "integer", "app_label", "/blogs/", "chain", "protections", "language_cookie_path", "conjunction", "django.contrib.staticfiles.finders", "cross", "samesite", "environments", "meta", "month", "x", "django.contrib.sessions.backends.db", "tablespaces", "start", "send_mail", "policy", "staff", "potential", "secret_key_fallbacks", "lines", "name", "pattern", "relationships", "securitymiddleware", "email_use_tls", "header", "monday", "implications", "date_input_formats", "transition", "size", "admin", "data_upload_max_number_files", "django.contrib.messages.storage.session", "dst", "space", "python", "link", "above", "u.s.", "addition", "amount", "logging", "sunday", "secure_hsts_seconds", "downside", "loginview", "handler", "file_upload_directory_permissions", "django.test.runner", "dummycache", "formats", "fixtures", "default_index_tablespace", "django.template.context_processors.media", "guarantee", "force", "indexes", "sections", "defines", "migration", "sessions", "host", "exceptionreporter", "storage", "includesubdomains", "savings", "django.core.wsgi.get_wsgi_application", "tag", "address", "tblspace", "namespace", "token", "use_x_forwarded_port", "display", "cache_middleware_seconds", "true", "*", "framework", "structure", "inserting", "locale", "month_day_format", "requests", "tokenized", "search", "nosniff", "sizes", "headers", "processor", "language_cookie_httponly", "dbshell", "key_function", "operation", "forms", "decimal_separator", "length", "features", "feature", "/tmp", "modes", "benefit", "significance", "key", "toomanyfields", "parameters", "mypassword", "template0", "internal_ips", "situation", "levels", ".", "alias", "english", "mary", "zone", "state", "dictionary", "urlconf", "django.core.signing", "permissions", "characters", "script", "material", "browser", "session_expire_at_browser_close", "sniffer", "login_required", "session_save_every_request", "error", "xss", "template", "debug", "xsrf", "cache", "django.contrib.auth.backends", "migrations", "/home", "archives", "measure", "systems", "selection", "%", "setting", "restart", "static", "agent", "order", "january", "django.contrib.sessions", "basis", "documentation", "-", "/example/", "socket", "development", "style", "path.to.yaml_serializer", "creation", "specifies", "insecure", "transport", "sslcontext.wrap_socket", "remainder", "routers", "yaml", "whatevercache", "application", "scripting", "umask", "pg_hba.conf", "cache_middleware_alias", "renderers", "port", "migrate", "table", "customization", "risk", "https://static.example.com/", "convenience", "behavior", "system", "grouping", "preload", "aliases", "requestdatatoobig", "mode", "notifications", "str", "files", "query", "preference", "log.py", "modules", "number_grouping", "weeks", "following", "email_use_localtime", "resident", "django.db.backends.postgresql", "import", "machinery", "request.body", "hyphens", "slash", "'", "information", "paths", "csrf_cookie_age", "django.core.files.storage", "r'^no", "transitions", "en_us", "#", "get_absolute_url", "mydatabaseuser", "america", "section", "authentication", "versions", "limitations", "idea", "¶", "service", "oct", "locales", "django.setup", "tls", "web", "admins", "definition", "password_reset_timeout", "date_format", "fallbackstorage", "extra_static_content", "strength", "server", "change", "c:/homes", "-1", "sites", "precedence", "format", "trace", "render", "beginning", "https://*.example.com", "datafile_tmp_extsize", "example", "django.db.models", "session", "mitigation", "403_csrf.html", "session_cache_alias", "djangotemplates", "year", "identifier", "value", "functions", "definitions", "source", "force_bytes", "replacement", "offset", "session_cookie_age", "languages", "uploading", "append_slash", "tcp", "blog", "primary", "silenced_system_checks", "subdomains", "email_ssl_keyfile", "html", "ssl", "http_x_forwarded_proto", "secure_content_type_nosniff", "base_url", "accessmixin", "things", "is_secure", "details", "slug", "debug_propagate_exceptions", "proxy", "enero", "scenarios", "setup", "locations", "rfc", "authenticating", "form", "forms_urlfield_assume_https", "datafile", "object", "cookie", "root", "httprequest", "warning", "toomanyfiles", "discoverrunner", "asset", "postgresql", "one", "force_str", "blogs.blog", "returns", "queryset.iterator", "parent", "use_thousand_separator", "conversion", "django.core.cache.backends.db", "email_ssl_certfile", "initialization", "managed", "password", "datafile_tmp_maxsize", "sequence", "api", "note", "locale_code>/lc_messages", "mypackage.backends.whatever", "period", "post", "timeout", "level", "django", "admindocs", "days", "message", "filesystemstorage", "vulnerability", "delimiter", "parameter", "validation", "csrf_cookie_httponly", "syntax", "csrf", "lot", "text", "https://media.example.com/", "destination", "field", "daylight", "contents", "strings", "0o", "http", "operating", "debugging", "defaultstoragefinder", "httpresponseforbidden", "myproject.auth", "bcryptsha256passwordhasher", "smtp", "effect", "generate_series", "=", "nix", "digits", "console", "manager(s", "objects", "discussion", "email_timeout", "language", "session_file_path", "subdomain.example.com", "chicago", "django.contrib.messages.storage.fallback", "secure_proxy_ssl_header", "ability", "implementation", "matches", "strict", "index", "email_use_ssl", "connection", "at", "callable", "run", "interface", "https", "utc", "mysql", "datetimes", "expiration", "staticfiles", "see", "hijacking", "reporter", "translation", "logoutview", "widgets", "handling", "serialization", "templates", "replica", "loginrequiredmixin", "mytestdatabase", "lax", "django.core.files.uploadhandler", "time", "sets", "controls", "key_prefix", "exception", "brokenlinkemailsmiddleware", "release", "external", "http://", "oracle", "auditors", "property", "middleware", "oracle_managed_files", "httprequest.get_host", "i18n", "lowercase", "commands", "site", "x_frame_options", "d", "css", "webfiles", "polls_20101022.tar.gz", "server_port", "templatessetting", "sub", "problem", "bytes", "slave", "create_user", "processes", "collectstatic", "groups", "postgresql.conf", "john", "appdirectoriesfinder", "timestampsigner", "file_upload_temp_dir", "output", "fields", "startproject", "hole", "django.core.mail.backends.smtp", "jinja2", "django.utils.translation", "login_url", "signature", "datetime_format", "static_url", "testcase", "mime", "custom", "resolver", "collation", "copy", "static_root", "methods", "conf", "f", "decorator", "browsers", "side", "some_app.formats", "django.contrib.sites", "to", "datafile_size", "passwords", "none", "syncdb", "urls", "prepend_www", "mydatabase", "default_exception_reporter", "default_tablespace", "variables", "base", "protocol", "rediscache", "access", "process", "command", "memcache", "m/", "pylibmccache", "javascript", "reset", "blog.db_migrations", "email", "production", "dot", "content", "validators", "protocols", "seconds", "john@example.com", "end", "unix", "use_x_forwarded_host", "handlers", "week", "reporting", "deployment", "prefixes", "makemigrations", "flag", "conn_health_checks", "applications", "request", "redirects", "attacks", "internationalization", "simple", "cycle", "b", "controlling", "proto", "c:/users", "tables", "engine", "mapping", "attack", "/opt", "urlfield.assume_scheme", "session_cookie_secure", "series", "href", "protection", "django.contrib.sessions.serializers", "optimizations", "a", "short_date_format", "data", "polls", "language_cookie_secure", "passwordresetconfirmview", "runsql", "resort", "group", "options", "environment", "emailbackend", "dependencies", "filtering", "tablespace", "submission", "references", "spanish", "storages", "stats", "patterns", "combination", "crawlers", "context_processors", "drilldown", "reasons", "optional", "feb.", "response", "default_charset", "message_constants", "execution", "s", "kwargs", "keys", "configuration", "staticfilesstorage", "switch", "login/", "sql", "privilege", "platforms", "django.contrib.sessions.backends.signed_cookies", "directive", "internal", "csrf_trusted_origins", "data_upload_max_memory_size", "path", "directory", "managers", "auth", "django.forms.renderers", "login_redirect_url", "dirs", "forum", "elements", "constants", "opener", "language_cookie_name", "news.story", "apps", "backends", "arguments", "module", "practice", "packages", "subpath", "vulnerabilities", "secure_redirect_exempt", "balance", "common_files", "http_x_csrftoken", "memory", "context", "bookmarklets", "inspection", "absolute", "get_session_auth_hash", "security", "denial", "models", "jsonserializer", "session_cookie_samesite", "underscores", "pages", "caveats", "logging.config.dictconfig", "attackers", "registry", "server_email", "tying", "success", "subset", "/%y", "disk", "addresses", "ease", "website", "log", "temp", "slashes", "attempt", "frameworks", "django.core.cache.backends.dummy", "django.core.cache.backends.redis", "secret", "vector", "app_dirs", "date_trunc", "django.core.mail.mail_managers", "types", "p", "brute", "short_datetime_format", "changes", "suspiciousoperation", "tokens", "file_upload_max_memory_size", "filter", "problems", "stack", "servers", "subject", "jar", "rules", "utf-8", "language_cookie_samesite", "http_x_xsrf_token", "scenario", "false", "globalization", "wsgi_application", "datafile_extsize", "csrf_use_sessions", "prefix", "management", "django.contrib.auth.hashers", "_", "django.db.backends.oracle", "tests", "check", "allowed_hosts", "default_exception_reporter_filter", "time_input_formats", "metadata", "5.x", "codes", "utils", "values", "reports", "database_routers", "email_host_password", "cases", "cookiestorage", "runner", "time_format", "rotation", "new", "notation", "form_renderer", "localhost", "h:%m:%s.", "j", "secure.example.com", "caches", "item", "l10n", "translations", "media", "lambda", "h:%m:%s", "attacker", "sqlmigrate", "compatibility", "10/25/06", "test", "zones", "lifetime", "staticfiles_dirs", "sessionstorage", "resource", "ip", "forgery", "auth_user_model", "manual", "disallowed_user_agents", "location", "timezone", "httponly", "input", "hostname", "usage", "transaction", "www.example.com", "entries", "handler500", "model", "fixture", "fixture_dirs", "target", "y", "character", "certificate", "snippet", "iso", "sessionmiddleware", "finders", "os.chmod", "serializer", "origin", "purposes", "use_tz", "displays", "runserver", "checks", "n’t", "formatting", "unix_socket_directory", "installed_apps", "sqlite", "escalation", "case", "imports", "class", "django.contrib.sessions.backends.cache", "number", "datafile_tmp_size", "components", "language_cookie_age", "numbers", "redirect", "explorer", "github", "return", "filebasedcache", "tuples", "digit", "secure_hsts_preload", "csrf_cookie_secure", "cache_middleware_key_prefix", "charset", "connections", "attribute", "absolute_url_overrides", "function", "developers", "p.m.", "string", "health", "list", "django.db.backends.mysql", "internet", "correspondence", "bots", "loading", "pub_year", "view", "app", "www", "tz", "format_module_path", "uses", "parts", "pem", "presence", "body", "mb", "identifiers", "priority", "user", "secure_hsts_include_subdomains", "part", "file", "queries", "global_settings.py", "filesystemfinder", "csrf_cookie_name", "data_upload_max_number_fields", "operations", "permissiondenied", "installation", "risks", "emails", "errors", "django.contrib.sessions.backends.cached_db", "core", "datetime_input_formats", "get", "loginrequiredmiddleware", "datafile_tmp", "traceback", "template_name", "mirror", "exceptions", "from", "situations", "posts", "staticfiles_finders", "origins", "auth_password_validators", "names", "os.environ['tz", "csrf_cookie_samesite", "topical", "expressions", "master", "ssl/$", "django.db.backends.sqlite3", "separator", "cursors", "date", "set", "django.contrib.auth", "autofield", "functionality", "csrf_header_name", "database", "/var", "forcing", "databases", "websites", "commonmiddleware", "expression", "adminemailhandler", "caps", "instance", "engines", "code", "overhead", "primary_key", "file_upload_handlers", "tblspace_tmp", "wsgi", "session_cookie_httponly", "entry", "step", "directory(ies", "file_upload_permissions", "django.contrib.contenttypes"], "type": "documentation"},
{"title": "Additional Information", "url": "https://docs.djangoproject.com/en/5.1/ref/schema-editor/", "content": "SchemaEditor ¶ class BaseDatabaseSchemaEditor [source] ¶ Django’s migration system is split into two parts; the logic for calculating\nand storing what operations should be run ( django.db.migrations ), and the\ndatabase abstraction layer that turns things like “create a model” or\n“delete a field” into SQL - which is the job of the SchemaEditor . It’s unlikely that you will want to interact directly with SchemaEditor as\na normal developer using Django, but if you want to write your own migration\nsystem, or have more advanced needs, it’s a lot nicer than writing SQL. Each database backend in Django supplies its own version of SchemaEditor ,\nand it’s always accessible via the connection.schema_editor() context\nmanager: with connection . schema_editor () as schema_editor : schema_editor . delete_model ( MyModel ) It must be used via the context manager as this allows it to manage things\nlike transactions and deferred SQL (like creating ForeignKey constraints). It exposes all possible operations as methods, that should be called in\nthe order you wish changes to be applied. Some possible operations or types\nof change are not possible on all databases - for example, MyISAM does not\nsupport foreign key constraints. If you are writing or maintaining a third-party database backend for Django,\nyou will need to provide a SchemaEditor implementation in order to work with\nDjango’s migration functionality - however, as long as your database is\nrelatively standard in its use of SQL and relational design, you should be able\nto subclass one of the built-in Django SchemaEditor classes and tweak the\nsyntax a little. Methods ¶ execute() ¶ BaseDatabaseSchemaEditor. execute ( sql , params = () ) [source] ¶ Executes the SQL statement passed in, with parameters if supplied. This\nis a wrapper around the normal database cursors that allows capture of the SQL\nto a .sql file if the user wishes. create_model() ¶ BaseDatabaseSchemaEditor. create_model ( model ) [source] ¶ Creates a new table in the database for the provided model, along with any\nunique constraints or indexes it requires. delete_model() ¶ BaseDatabaseSchemaEditor. delete_model ( model ) [source] ¶ Drops the model’s table in the database along with any unique constraints\nor indexes it has. add_index() ¶ BaseDatabaseSchemaEditor. add_index ( model , index ) [source] ¶ Adds index to model ’s table. remove_index() ¶ BaseDatabaseSchemaEditor. remove_index ( model , index ) [source] ¶ Removes index from model ’s table. rename_index() ¶ BaseDatabaseSchemaEditor. rename_index ( model , old_index , new_index ) [source] ¶ Renames old_index from model ’s table to new_index . add_constraint() ¶ BaseDatabaseSchemaEditor. add_constraint ( model , constraint ) [source] ¶ Adds constraint to model ’s table. remove_constraint() ¶ BaseDatabaseSchemaEditor. remove_constraint ( model , constraint ) [source] ¶ Removes constraint from model ’s table. alter_unique_together() ¶ BaseDatabaseSchemaEditor. alter_unique_together ( model , old_unique_together , new_unique_together ) [source] ¶ Changes a model’s unique_together value; this\nwill add or remove unique constraints from the model’s table until they match\nthe new value. alter_index_together() ¶ BaseDatabaseSchemaEditor. alter_index_together ( model , old_index_together , new_index_together ) [source] ¶ Changes a model’s index_together value; this will add or remove indexes\nfrom the model’s table until they match the new value. alter_db_table() ¶ BaseDatabaseSchemaEditor. alter_db_table ( model , old_db_table , new_db_table ) [source] ¶ Renames the model’s table from old_db_table to new_db_table . alter_db_table_comment() ¶ BaseDatabaseSchemaEditor. alter_db_table_comment ( model , old_db_table_comment , new_db_table_comment ) [source] ¶ Change the model ’s table comment to new_db_table_comment . alter_db_tablespace() ¶ BaseDatabaseSchemaEditor. alter_db_tablespace ( model , old_db_tablespace , new_db_tablespace ) [source] ¶ Moves the model’s table from one tablespace to another. add_field() ¶ BaseDatabaseSchemaEditor. add_field ( model , field ) [source] ¶ Adds a column (or sometimes multiple) to the model’s table to represent the\nfield. This will also add indexes or a unique constraint\nif the field has db_index=True or unique=True . If the field is a ManyToManyField without a value for through , instead\nof creating a column, it will make a table to represent the relationship. If through is provided, it is a no-op. If the field is a ForeignKey , this will also add the foreign key\nconstraint to the column. remove_field() ¶ BaseDatabaseSchemaEditor. remove_field ( model , field ) [source] ¶ Removes the column(s) representing the field from the model’s table, along\nwith any unique constraints, foreign key constraints, or indexes caused by\nthat field. If the field is a ManyToManyField without a value for through , it will\nremove the table created to track the relationship. If through is provided, it is a no-op. alter_field() ¶ BaseDatabaseSchemaEditor. alter_field ( model , old_field , new_field , strict = False ) [source] ¶ This transforms the field on the model from the old field to the new one. This\nincludes changing the name of the column (the db_column attribute), changing the type of the\nfield (if the field class changes), changing the NULL status of the field,\nadding or removing field-only unique constraints and indexes, changing primary\nkey, and changing the destination of ForeignKey constraints. The most common transformation this cannot do is transforming a ManyToManyField into a normal Field or vice-versa; Django cannot do this\nwithout losing data, and so it will refuse to do it. Instead, remove_field() and add_field() should be called separately. If the database has the supports_combined_alters , Django will try and\ndo as many of these in a single database call as possible; otherwise, it will\nissue a separate ALTER statement for each change, but will not issue ALTERs\nwhere no change is required. Attributes ¶ All attributes should be considered read-only unless stated otherwise. connection ¶ SchemaEditor. connection ¶ A connection object to the database. A useful attribute of the connection is alias which can be used to determine the name of the database being\naccessed. This is useful when doing data migrations for migrations with multiple\ndatabases .", "keywords": ["alter_db_tablespace", "implementation", "alter", "index", "connection", "wrapper", "column", "transactions", "renames", "developer", "type", "moves", "design", "schemaeditor", "migrations", "manytomanyfield", "types", "new_db_tablespace", "destination", "connection.schema_editor", "statement", "order", "changes", "remove_index", "classes", "null", "myisam", "party", "table", "new_db_table", "system", "django.db.migrations", "use", "manager", "status", "alter_field", "¶", "removes", "old_db_tablespace", "op", "old_db_table_comment", "methods", "schema_editor", "model", "change", "column(s", "execute", ".sql", "alter_index_together", "example", "vice", "constraints", "abstraction", "value", "mymodel", "backend", "source", "create_model", "old_index", "remove_constraint", "class", "version", "db_column", "supports_combined_alters", "needs", "attribute", "new_index_together", "remove_field", "transformation", "things", "comment", "add_field", "data", "relational", "constraint", "new_unique_together", "capture", "parts", "name", "object", "user", "file", "attributes", "tablespace", "operations", "params", "job", "add_constraint", "alter_db_table_comment", "rename_index", "alters", "indexes", "sql", "migration", "django", "delete_model", "cursors", "syntax", "lot", "field", "functionality", "new_index", "foreignkey", "database", "relationship", "no", "context", "databases", "basedatabaseschemaeditor", "add_index", "logic", "db_index", "layer", "=", "key", "parameters", "alias", "call"], "type": "documentation"},
{"title": "Request and response objects", "url": "https://docs.djangoproject.com/en/5.1/ref/request-response/", "content": "Request and response objects ¶ Quick overview ¶ Django uses request and response objects to pass state through the system. When a page is requested, Django creates an HttpRequest object that\ncontains metadata about the request. Then Django loads the appropriate view,\npassing the HttpRequest as the first argument to the view function.\nEach view is responsible for returning an HttpResponse object. This document explains the APIs for HttpRequest and HttpResponse objects, which are defined in the django.http module. HttpRequest objects ¶ class HttpRequest [source] ¶ Attributes ¶ All attributes should be considered read-only, unless stated otherwise. HttpRequest. scheme [source] ¶ A string representing the scheme of the request ( http or https usually). HttpRequest. body [source] ¶ The raw HTTP request body as a bytestring. This is useful for processing\ndata in different ways than conventional HTML forms: binary images,\nXML payload etc. For processing conventional form data, use HttpRequest.POST . You can also read from an HttpRequest using a file-like interface with HttpRequest.read() or HttpRequest.readline() . Accessing\nthe body attribute after reading the request with either of these I/O\nstream methods will produce a RawPostDataException . HttpRequest. path ¶ A string representing the full path to the requested page, not including\nthe scheme, domain, or query string. Example: \"/music/bands/the_beatles/\" HttpRequest. path_info ¶ Under some web server configurations, the portion of the URL after the\nhost name is split up into a script prefix portion and a path info\nportion. The path_info attribute always contains the path info portion\nof the path, no matter what web server is being used. Using this instead\nof path can make your code easier to move between\ntest and deployment servers. For example, if the WSGIScriptAlias for your application is set to \"/minfo\" , then path might be \"/minfo/music/bands/the_beatles/\" and path_info would be \"/music/bands/the_beatles/\" . HttpRequest. method ¶ A string representing the HTTP method used in the request. This is\nguaranteed to be uppercase. For example: if request . method == \"GET\" : do_something () elif request . method == \"POST\" : do_something_else () HttpRequest. encoding [source] ¶ A string representing the current encoding used to decode form submission\ndata (or None , which means the DEFAULT_CHARSET setting is\nused). You can write to this attribute to change the encoding used when\naccessing the form data. Any subsequent attribute accesses (such as reading\nfrom GET or POST ) will use the new encoding value.\nUseful if you know the form data is not in the DEFAULT_CHARSET encoding. HttpRequest. content_type ¶ A string representing the MIME type of the request, parsed from the CONTENT_TYPE header. HttpRequest. content_params ¶ A dictionary of key/value parameters included in the CONTENT_TYPE header. HttpRequest. GET ¶ A dictionary-like object containing all given HTTP GET parameters. See the QueryDict documentation below. HttpRequest. POST ¶ A dictionary-like object containing all given HTTP POST parameters,\nproviding that the request contains form data. See the QueryDict documentation below. If you need to access raw or\nnon-form data posted in the request, access this through the HttpRequest.body attribute instead. It’s possible that a request can come in via POST with an empty POST dictionary – if, say, a form is requested via the POST HTTP method but\ndoes not include form data. Therefore, you shouldn’t use if request.POST to check for use of the POST method; instead, use if request.method == \"POST\" (see HttpRequest.method ). POST does not include file-upload information. See FILES . HttpRequest. COOKIES ¶ A dictionary containing all cookies. Keys and values are strings. HttpRequest. FILES ¶ A dictionary-like object containing all uploaded files. Each key in FILES is the name from the <input type=\"file\" name=\"\"> . Each\nvalue in FILES is an UploadedFile . See Managing files for more information. FILES will only contain data if the request method was POST and the <form> that posted to the request had enctype=\"multipart/form-data\" .\nOtherwise, FILES will be a blank dictionary-like object. HttpRequest. META ¶ A dictionary containing all available HTTP headers. Available headers\ndepend on the client and server, but here are some examples: CONTENT_LENGTH – The length of the request body (as a string). CONTENT_TYPE – The MIME type of the request body. HTTP_ACCEPT – Acceptable content types for the response. HTTP_ACCEPT_ENCODING – Acceptable encodings for the response. HTTP_ACCEPT_LANGUAGE – Acceptable languages for the response. HTTP_HOST – The HTTP Host header sent by the client. HTTP_REFERER – The referring page, if any. HTTP_USER_AGENT – The client’s user-agent string. QUERY_STRING – The query string, as a single (unparsed) string. REMOTE_ADDR – The IP address of the client. REMOTE_HOST – The hostname of the client. REMOTE_USER – The user authenticated by the web server, if any. REQUEST_METHOD – A string such as \"GET\" or \"POST\" . SERVER_NAME – The hostname of the server. SERVER_PORT – The port of the server (as a string). With the exception of CONTENT_LENGTH and CONTENT_TYPE , as given\nabove, any HTTP headers in the request are converted to META keys by\nconverting all characters to uppercase, replacing any hyphens with\nunderscores and adding an HTTP_ prefix to the name. So, for example, a\nheader called X-Bender would be mapped to the META key HTTP_X_BENDER . Note that runserver strips all headers with underscores in the\nname, so you won’t see them in META . This prevents header-spoofing\nbased on ambiguity between underscores and dashes both being normalizing to\nunderscores in WSGI environment variables. It matches the behavior of\nweb servers like Nginx and Apache 2.4+. HttpRequest.headers is a simpler way to access all HTTP-prefixed\nheaders, plus CONTENT_LENGTH and CONTENT_TYPE . HttpRequest. headers [source] ¶ A case insensitive, dict-like object that provides access to all\nHTTP-prefixed headers (plus Content-Length and Content-Type ) from\nthe request. The name of each header is stylized with title-casing (e.g. User-Agent )\nwhen it’s displayed. You can access headers case-insensitively: >>> request . headers {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6', ...} >>> \"User-Agent\" in request . headers True >>> \"user-agent\" in request . headers True >>> request . headers [ \"User-Agent\" ] Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) >>> request . headers [ \"user-agent\" ] Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) >>> request . headers . get ( \"User-Agent\" ) Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) >>> request . headers . get ( \"user-agent\" ) Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) For use in, for example, Django templates, headers can also be looked up\nusing underscores in place of hyphens: {{ request.headers.user_agent }} HttpRequest. resolver_match ¶ An instance of ResolverMatch representing the\nresolved URL. This attribute is only set after URL resolving took place,\nwhich means it’s available in all views but not in middleware which are\nexecuted before URL resolving takes place (you can use it in process_view() though). Attributes set by application code ¶ Django doesn’t set these attributes itself but makes use of them if set by your\napplication. HttpRequest. current_app ¶ The url template tag will use its value as the current_app argument to reverse() . HttpRequest. urlconf ¶ This will be used as the root URLconf for the current request, overriding\nthe ROOT_URLCONF setting. See How Django processes a request for details. urlconf can be set to None to revert any changes made by previous\nmiddleware and return to using the ROOT_URLCONF . HttpRequest. exception_reporter_filter ¶ This will be used instead of DEFAULT_EXCEPTION_REPORTER_FILTER for the current request. See Custom error reports for details. HttpRequest. exception_reporter_class ¶ This will be used instead of DEFAULT_EXCEPTION_REPORTER for the\ncurrent request. See Custom error reports for details. Attributes set by middleware ¶ Some of the middleware included in Django’s contrib apps set attributes on the\nrequest. If you don’t see the attribute on a request, be sure the appropriate\nmiddleware class is listed in MIDDLEWARE . HttpRequest. session ¶ From the SessionMiddleware : A\nreadable and writable, dictionary-like object that represents the current\nsession. HttpRequest. site ¶ From the CurrentSiteMiddleware :\nAn instance of Site or RequestSite as returned by get_current_site() representing the current site. HttpRequest. user ¶ From the AuthenticationMiddleware :\nAn instance of AUTH_USER_MODEL representing the currently\nlogged-in user. If the user isn’t currently logged in, user will be set\nto an instance of AnonymousUser . You\ncan tell them apart with is_authenticated , like so: if request . user . is_authenticated : ... # Do something for logged-in users. else : ... # Do something for anonymous users. The auser() method does the same thing but can be used from async\ncontexts. Methods ¶ HttpRequest. auser () ¶ New in Django 5.0. From the AuthenticationMiddleware :\nCoroutine. Returns an instance of AUTH_USER_MODEL representing\nthe currently logged-in user. If the user isn’t currently logged in, auser will return an instance of AnonymousUser . This is similar to the user attribute but it works in async contexts. HttpRequest. get_host () [source] ¶ Returns the originating host of the request using information from the HTTP_X_FORWARDED_HOST (if USE_X_FORWARDED_HOST is enabled)\nand HTTP_HOST headers, in that order. If they don’t provide a value,\nthe method uses a combination of SERVER_NAME and SERVER_PORT as\ndetailed in PEP 3333 . Example: \"127.0.0.1:8000\" Raises django.core.exceptions.DisallowedHost if the host is not in ALLOWED_HOSTS or the domain name is invalid according to RFC 1034 / 1035 . Note The get_host() method fails when the host is\nbehind multiple proxies. One solution is to use middleware to rewrite\nthe proxy headers, as in the following example: class MultipleProxyMiddleware : FORWARDED_FOR_FIELDS = [ \"HTTP_X_FORWARDED_FOR\" , \"HTTP_X_FORWARDED_HOST\" , \"HTTP_X_FORWARDED_SERVER\" , ] def __init__ ( self , get_response ): self . get_response = get_response def __call__ ( self , request ): \"\"\" Rewrites the proxy headers so that only the most recent proxy is used. \"\"\" for field in self . FORWARDED_FOR_FIELDS : if field in request . META : if \",\" in request . META [ field ]: parts = request . META [ field ] . split ( \",\" ) request . META [ field ] = parts [ - 1 ] . strip () return self . get_response ( request ) This middleware should be positioned before any other middleware that\nrelies on the value of get_host() – for instance, CommonMiddleware or CsrfViewMiddleware . HttpRequest. get_port () [source] ¶ Returns the originating port of the request using information from the HTTP_X_FORWARDED_PORT (if USE_X_FORWARDED_PORT is enabled)\nand SERVER_PORT META variables, in that order. HttpRequest. get_full_path () [source] ¶ Returns the path , plus an appended query string, if applicable. Example: \"/music/bands/the_beatles/?print=true\" HttpRequest. get_full_path_info () [source] ¶ Like get_full_path() , but uses path_info instead of path . Example: \"/minfo/music/bands/the_beatles/?print=true\" HttpRequest. build_absolute_uri ( location = None ) [source] ¶ Returns the absolute URI form of location . If no location is provided,\nthe location will be set to request.get_full_path() . If the location is already an absolute URI, it will not be altered.\nOtherwise the absolute URI is built using the server variables available in\nthis request. For example: >>> request . build_absolute_uri () 'https://example.com/music/bands/the_beatles/?print=true' >>> request . build_absolute_uri ( \"/bands/\" ) 'https://example.com/bands/' >>> request . build_absolute_uri ( \"https://example2.com/bands/\" ) 'https://example2.com/bands/' Note Mixing HTTP and HTTPS on the same site is discouraged, therefore build_absolute_uri() will always generate an\nabsolute URI with the same scheme the current request has. If you need\nto redirect users to HTTPS, it’s best to let your web server redirect\nall HTTP traffic to HTTPS. HttpRequest. get_signed_cookie ( key , default = RAISE_ERROR , salt = '' , max_age = None ) [source] ¶ Returns a cookie value for a signed cookie, or raises a django.core.signing.BadSignature exception if the signature is\nno longer valid. If you provide the default argument the exception\nwill be suppressed and that default value will be returned instead. The optional salt argument can be used to provide extra protection\nagainst brute force attacks on your secret key. If supplied, the max_age argument will be checked against the signed timestamp\nattached to the cookie value to ensure the cookie is not older than max_age seconds. For example: >>> request . get_signed_cookie ( \"name\" ) 'Tony' >>> request . get_signed_cookie ( \"name\" , salt = \"name-salt\" ) 'Tony' # assuming cookie was set using the same salt >>> request . get_signed_cookie ( \"nonexistent-cookie\" ) KeyError: 'nonexistent-cookie' >>> request . get_signed_cookie ( \"nonexistent-cookie\" , False ) False >>> request . get_signed_cookie ( \"cookie-that-was-tampered-with\" ) BadSignature: ... >>> request . get_signed_cookie ( \"name\" , max_age = 60 ) SignatureExpired: Signature age 1677.3839159 > 60 seconds >>> request . get_signed_cookie ( \"name\" , False , max_age = 60 ) False See cryptographic signing for more information. HttpRequest. is_secure () [source] ¶ Returns True if the request is secure; that is, if it was made with\nHTTPS. HttpRequest. accepts ( mime_type ) [source] ¶ Returns True if the request Accept header matches the mime_type argument: >>> request . accepts ( \"text/html\" ) True Most browsers send Accept: */* by default, so this would return True for all content types. Setting an explicit Accept header in\nAPI requests can be useful for returning a different content type for those\nconsumers only. See Content negotiation example of using accepts() to return different content to API consumers. If a response varies depending on the content of the Accept header and\nyou are using some form of caching like Django’s cache middleware , you should decorate the view with vary_on_headers('Accept') so that the responses are\nproperly cached. HttpRequest. read ( size = None ) [source] ¶ HttpRequest. readline () [source] ¶ HttpRequest. readlines () [source] ¶ HttpRequest. __iter__ () [source] ¶ Methods implementing a file-like interface for reading from an HttpRequest instance. This makes it possible to consume an incoming\nrequest in a streaming fashion. A common use-case would be to process a\nbig XML payload with an iterative parser without constructing a whole\nXML tree in memory. Given this standard interface, an HttpRequest instance can be\npassed directly to an XML parser such as ElementTree : import xml.etree.ElementTree as ET for element in ET . iterparse ( request ): process ( element ) QueryDict objects ¶ class QueryDict [source] ¶ In an HttpRequest object, the GET and POST attributes are instances of django.http.QueryDict ,\na dictionary-like class customized to deal with multiple values for the same\nkey. This is necessary because some HTML form elements, notably <select multiple> , pass multiple values for the same key. The QueryDict s at request.POST and request.GET will be immutable\nwhen accessed in a normal request/response cycle. To get a mutable version you\nneed to use QueryDict.copy() . Methods ¶ QueryDict implements all the standard dictionary methods because it’s\na subclass of dictionary. Exceptions are outlined here: QueryDict. __init__ ( query_string = None , mutable = False , encoding = None ) [source] ¶ Instantiates a QueryDict object based on query_string . >>> QueryDict ( \"a=1&a=2&c=3\" ) <QueryDict: {'a': ['1', '2'], 'c': ['3']}> If query_string is not passed in, the resulting QueryDict will be\nempty (it will have no keys or values). Most QueryDict s you encounter, and in particular those at request.POST and request.GET , will be immutable. If you are\ninstantiating one yourself, you can make it mutable by passing mutable=True to its __init__() . Strings for setting both keys and values will be converted from encoding to str . If encoding is not set, it defaults to DEFAULT_CHARSET . classmethod QueryDict. fromkeys ( iterable , value = '' , mutable = False , encoding = None ) [source] ¶ Creates a new QueryDict with keys from iterable and each value\nequal to value . For example: >>> QueryDict . fromkeys ([ \"a\" , \"a\" , \"b\" ], value = \"val\" ) <QueryDict: {'a': ['val', 'val'], 'b': ['val']}> QueryDict. __getitem__ ( key ) ¶ Returns the value for the given key. If the key has more than one value,\nit returns the last value. Raises django.utils.datastructures.MultiValueDictKeyError if the key does not\nexist. (This is a subclass of Python’s standard KeyError , so you can\nstick to catching KeyError .) QueryDict. __setitem__ ( key , value ) [source] ¶ Sets the given key to [value] (a list whose single element is value ). Note that this, as other dictionary functions that have side\neffects, can only be called on a mutable QueryDict (such as one that\nwas created via QueryDict.copy() ). QueryDict. __contains__ ( key ) ¶ Returns True if the given key is set. This lets you do, e.g., if \"foo\" in request.GET . QueryDict. get ( key , default = None ) ¶ Uses the same logic as __getitem__() , with a hook for returning a\ndefault value if the key doesn’t exist. QueryDict. setdefault ( key , default = None ) [source] ¶ Like dict.setdefault() , except it uses __setitem__() internally. QueryDict. update ( other_dict ) ¶ Takes either a QueryDict or a dictionary. Like dict.update() ,\nexcept it appends to the current dictionary items rather than replacing\nthem. For example: >>> q = QueryDict ( \"a=1\" , mutable = True ) >>> q . update ({ \"a\" : \"2\" }) >>> q . getlist ( \"a\" ) ['1', '2'] >>> q [ \"a\" ] # returns the last '2' QueryDict. items () ¶ Like dict.items() , except this uses the same last-value logic as __getitem__() and returns an iterator object instead of a view object.\nFor example: >>> q = QueryDict ( \"a=1&a=2&a=3\" ) >>> list ( q . items ()) [('a', '3')] QueryDict. values () ¶ Like dict.values() , except this uses the same last-value logic as __getitem__() and returns an iterator instead of a view object. For\nexample: >>> q = QueryDict ( \"a=1&a=2&a=3\" ) >>> list ( q . values ()) ['3'] In addition, QueryDict has the following methods: QueryDict. copy () [source] ¶ Returns a copy of the object using copy.deepcopy() . This copy will\nbe mutable even if the original was not. QueryDict. getlist ( key , default = None ) ¶ Returns a list of the data with the requested key. Returns an empty list if\nthe key doesn’t exist and default is None . It’s guaranteed to\nreturn a list unless the default value provided isn’t a list. QueryDict. setlist ( key , list_ ) [source] ¶ Sets the given key to list_ (unlike __setitem__() ). QueryDict. appendlist ( key , item ) [source] ¶ Appends an item to the internal list associated with key. QueryDict. setlistdefault ( key , default_list = None ) [source] ¶ Like setdefault() , except it takes a list of values instead of a\nsingle value. QueryDict. lists () ¶ Like items() , except it includes all values, as a list, for each\nmember of the dictionary. For example: >>> q = QueryDict ( \"a=1&a=2&a=3\" ) >>> q . lists () [('a', ['1', '2', '3'])] QueryDict. pop ( key ) [source] ¶ Returns a list of values for the given key and removes them from the\ndictionary. Raises KeyError if the key does not exist. For example: >>> q = QueryDict ( \"a=1&a=2&a=3\" , mutable = True ) >>> q . pop ( \"a\" ) ['1', '2', '3'] QueryDict. popitem () [source] ¶ Removes an arbitrary member of the dictionary (since there’s no concept\nof ordering), and returns a two value tuple containing the key and a list\nof all values for the key. Raises KeyError when called on an empty\ndictionary. For example: >>> q = QueryDict ( \"a=1&a=2&a=3\" , mutable = True ) >>> q . popitem () ('a', ['1', '2', '3']) QueryDict. dict () ¶ Returns a dict representation of QueryDict . For every (key, list)\npair in QueryDict , dict will have (key, item), where item is one\nelement of the list, using the same logic as QueryDict.__getitem__() : >>> q = QueryDict ( \"a=1&a=3&a=5\" ) >>> q . dict () {'a': '5'} QueryDict. urlencode ( safe = None ) [source] ¶ Returns a string of the data in query string format. For example: >>> q = QueryDict ( \"a=2&b=3&b=5\" ) >>> q . urlencode () 'a=2&b=3&b=5' Use the safe parameter to pass characters which don’t require encoding.\nFor example: >>> q = QueryDict ( mutable = True ) >>> q [ \"next\" ] = \"/a&b/\" >>> q . urlencode ( safe = \"/\" ) 'next=/a%26b/' HttpResponse objects ¶ class HttpResponse [source] ¶ In contrast to HttpRequest objects, which are created automatically by\nDjango, HttpResponse objects are your responsibility. Each view you\nwrite is responsible for instantiating, populating, and returning an HttpResponse . The HttpResponse class lives in the django.http module. Usage ¶ Passing strings ¶ Typical usage is to pass the contents of the page, as a string, bytestring,\nor memoryview , to the HttpResponse constructor: >>> from django.http import HttpResponse >>> response = HttpResponse ( \"Here's the text of the web page.\" ) >>> response = HttpResponse ( \"Text only, please.\" , content_type = \"text/plain\" ) >>> response = HttpResponse ( b \"Bytestrings are also accepted.\" ) >>> response = HttpResponse ( memoryview ( b \"Memoryview as well.\" )) But if you want to add content incrementally, you can use response as a\nfile-like object: >>> response = HttpResponse () >>> response . write ( \"<p>Here's the text of the web page.</p>\" ) >>> response . write ( \"<p>Here's another paragraph.</p>\" ) Passing iterators ¶ Finally, you can pass HttpResponse an iterator rather than strings. HttpResponse will consume the iterator immediately, store its content as a\nstring, and discard it. Objects with a close() method such as files and\ngenerators are immediately closed. If you need the response to be streamed from the iterator to the client, you\nmust use the StreamingHttpResponse class instead. Setting header fields ¶ To set or remove a header field in your response, use HttpResponse.headers : >>> response = HttpResponse () >>> response . headers [ \"Age\" ] = 120 >>> del response . headers [ \"Age\" ] You can also manipulate headers by treating your response like a dictionary: >>> response = HttpResponse () >>> response [ \"Age\" ] = 120 >>> del response [ \"Age\" ] This proxies to HttpResponse.headers , and is the original interface offered\nby HttpResponse . When using this interface, unlike a dictionary, del doesn’t raise KeyError if the header field doesn’t exist. You can also set headers on instantiation: >>> response = HttpResponse ( headers = { \"Age\" : 120 }) For setting the Cache-Control and Vary header fields, it is recommended\nto use the patch_cache_control() and patch_vary_headers() methods from django.utils.cache , since these fields can have multiple, comma-separated\nvalues. The “patch” methods ensure that other values, e.g. added by a\nmiddleware, are not removed. HTTP header fields cannot contain newlines. An attempt to set a header field\ncontaining a newline character (CR or LF) will raise BadHeaderError Telling the browser to treat the response as a file attachment ¶ To tell the browser to treat the response as a file attachment, set the Content-Type and Content-Disposition headers. For example, this is how\nyou might return a Microsoft Excel spreadsheet: >>> response = HttpResponse ( ... my_data , ... headers = { ... \"Content-Type\" : \"application/vnd.ms-excel\" , ... \"Content-Disposition\" : 'attachment; filename=\"foo.xls\"' , ... }, ... ) There’s nothing Django-specific about the Content-Disposition header, but\nit’s easy to forget the syntax, so we’ve included it here. Attributes ¶ HttpResponse. content [source] ¶ A bytestring representing the content, encoded from a string if necessary. HttpResponse. cookies ¶ A http.cookies.SimpleCookie object holding the cookies included\nin the response. HttpResponse. headers ¶ A case insensitive, dict-like object that provides an interface to all\nHTTP headers on the response, except a Set-Cookie header. See Setting header fields and HttpResponse.cookies . HttpResponse. charset ¶ A string denoting the charset in which the response will be encoded. If not\ngiven at HttpResponse instantiation time, it will be extracted from content_type and if that is unsuccessful, the DEFAULT_CHARSET setting will be used. HttpResponse. status_code ¶ The HTTP status code for the response. Unless reason_phrase is explicitly set, modifying the value of status_code outside the constructor will also modify the value of reason_phrase . HttpResponse. reason_phrase ¶ The HTTP reason phrase for the response. It uses the HTTP standard’s default reason phrases. Unless explicitly set, reason_phrase is determined by the value of status_code . HttpResponse. streaming ¶ This is always False . This attribute exists so middleware can treat streaming responses\ndifferently from regular responses. HttpResponse. closed ¶ True if the response has been closed. Methods ¶ HttpResponse. __init__ ( content = b'' , content_type = None , status = 200 , reason = None , charset = None , headers = None ) [source] ¶ Instantiates an HttpResponse object with the given page content,\ncontent type, and headers. content is most commonly an iterator, bytestring, memoryview ,\nor string. Other types will be converted to a bytestring by encoding their\nstring representation. Iterators should return strings or bytestrings and\nthose will be joined together to form the content of the response. content_type is the MIME type optionally completed by a character set\nencoding and is used to fill the HTTP Content-Type header. If not\nspecified, it is formed by 'text/html' and the DEFAULT_CHARSET settings, by default: \"text/html; charset=utf-8\" . status is the HTTP status code for the\nresponse. You can use Python’s http.HTTPStatus for meaningful\naliases, such as HTTPStatus.NO_CONTENT . reason is the HTTP response phrase. If not provided, a default phrase\nwill be used. charset is the charset in which the response will be encoded. If not\ngiven it will be extracted from content_type , and if that\nis unsuccessful, the DEFAULT_CHARSET setting will be used. headers is a dict of HTTP headers for the response. HttpResponse. __setitem__ ( header , value ) ¶ Sets the given header name to the given value. Both header and value should be strings. HttpResponse. __delitem__ ( header ) ¶ Deletes the header with the given name. Fails silently if the header\ndoesn’t exist. Case-insensitive. HttpResponse. __getitem__ ( header ) ¶ Returns the value for the given header name. Case-insensitive. HttpResponse. get ( header , alternate = None ) ¶ Returns the value for the given header, or an alternate if the header\ndoesn’t exist. HttpResponse. has_header ( header ) ¶ Returns True or False based on a case-insensitive check for a\nheader with the given name. HttpResponse. items () ¶ Acts like dict.items() for HTTP headers on the response. HttpResponse. setdefault ( header , value ) ¶ Sets a header unless it has already been set. HttpResponse. set_cookie ( key , value = '' , max_age = None , expires = None , path = '/' , domain = None , secure = False , httponly = False , samesite = None ) ¶ Sets a cookie. The parameters are the same as in the Morsel cookie object in the Python standard library. max_age should be a timedelta object, an integer\nnumber of seconds, or None (default) if the cookie should last only\nas long as the client’s browser session. If expires is not specified,\nit will be calculated. expires should either be a string in the format \"Wdy, DD-Mon-YY HH:MM:SS GMT\" or a datetime.datetime object\nin UTC. If expires is a datetime object, the max_age will be calculated. Use domain if you want to set a cross-domain cookie. For example, domain=\"example.com\" will set a cookie that is readable by the\ndomains www.example.com, blog.example.com, etc. Otherwise, a cookie will\nonly be readable by the domain that set it. Use secure=True if you want the cookie to be only sent to the server\nwhen a request is made with the https scheme. Use httponly=True if you want to prevent client-side\nJavaScript from having access to the cookie. HttpOnly is a flag included in a Set-Cookie HTTP response header. It’s\npart of the RFC 6265 standard for cookies\nand can be a useful way to mitigate the risk of a client-side script\naccessing the protected cookie data. Use samesite='Strict' or samesite='Lax' to tell the browser not\nto send this cookie when performing a cross-origin request. SameSite isn’t supported by all browsers, so it’s not a replacement for Django’s\nCSRF protection, but rather a defense in depth measure. Use samesite='None' (string) to explicitly state that this cookie is\nsent with all same-site and cross-site requests. Warning RFC 6265 states that user agents should\nsupport cookies of at least 4096 bytes. For many browsers this is also\nthe maximum size. Django will not raise an exception if there’s an\nattempt to store a cookie of more than 4096 bytes, but many browsers\nwill not set the cookie correctly. HttpResponse. set_signed_cookie ( key , value , salt = '' , max_age = None , expires = None , path = '/' , domain = None , secure = False , httponly = False , samesite = None ) ¶ Like set_cookie() , but cryptographic signing the cookie before setting\nit. Use in conjunction with HttpRequest.get_signed_cookie() .\nYou can use the optional salt argument for added key strength, but\nyou will need to remember to pass it to the corresponding HttpRequest.get_signed_cookie() call. HttpResponse. delete_cookie ( key , path = '/' , domain = None , samesite = None ) ¶ Deletes the cookie with the given key. Fails silently if the key doesn’t\nexist. Due to the way cookies work, path and domain should be the same\nvalues you used in set_cookie() – otherwise the cookie may not be\ndeleted. HttpResponse. close () ¶ This method is called at the end of the request directly by the WSGI\nserver. HttpResponse. write ( content ) [source] ¶ This method makes an HttpResponse instance a file-like object. HttpResponse. flush () ¶ This method makes an HttpResponse instance a file-like object. HttpResponse. tell () [source] ¶ This method makes an HttpResponse instance a file-like object. HttpResponse. getvalue () [source] ¶ Returns the value of HttpResponse.content . This method makes\nan HttpResponse instance a stream-like object. HttpResponse. readable () ¶ Always False . This method makes an HttpResponse instance a\nstream-like object. HttpResponse. seekable () ¶ Always False . This method makes an HttpResponse instance a\nstream-like object. HttpResponse. writable () [source] ¶ Always True . This method makes an HttpResponse instance a\nstream-like object. HttpResponse. writelines ( lines ) [source] ¶ Writes a list of lines to the response. Line separators are not added. This\nmethod makes an HttpResponse instance a stream-like object. HttpResponse subclasses ¶ Django includes a number of HttpResponse subclasses that handle different\ntypes of HTTP responses. Like HttpResponse , these subclasses live in django.http . class HttpResponseRedirect [source] ¶ The first argument to the constructor is required – the path to redirect\nto. This can be a fully qualified URL\n(e.g. 'https://www.yahoo.com/search/' ), an absolute path with no domain\n(e.g. '/search/' ), or even a relative path (e.g. 'search/' ). In that\nlast case, the client browser will reconstruct the full URL itself\naccording to the current path. See HttpResponse for other optional\nconstructor arguments. Note that this returns an HTTP status code 302. url ¶ This read-only attribute represents the URL the response will redirect\nto (equivalent to the Location response header). class HttpResponsePermanentRedirect [source] ¶ Like HttpResponseRedirect , but it returns a permanent redirect\n(HTTP status code 301) instead of a “found” redirect (status code 302). class HttpResponseNotModified [source] ¶ The constructor doesn’t take any arguments and no content should be added\nto this response. Use this to designate that a page hasn’t been modified\nsince the user’s last request (status code 304). class HttpResponseBadRequest [source] ¶ Acts just like HttpResponse but uses a 400 status code. class HttpResponseNotFound [source] ¶ Acts just like HttpResponse but uses a 404 status code. class HttpResponseForbidden [source] ¶ Acts just like HttpResponse but uses a 403 status code. class HttpResponseNotAllowed [source] ¶ Like HttpResponse , but uses a 405 status code. The first argument\nto the constructor is required: a list of permitted methods (e.g. ['GET', 'POST'] ). class HttpResponseGone [source] ¶ Acts just like HttpResponse but uses a 410 status code. class HttpResponseServerError [source] ¶ Acts just like HttpResponse but uses a 500 status code. Note If a custom subclass of HttpResponse implements a render method, Django will treat it as emulating a SimpleTemplateResponse , and the render method must itself return a valid response object. Custom response classes ¶ If you find yourself needing a response class that Django doesn’t provide, you\ncan create it with the help of http.HTTPStatus . For example: from http import HTTPStatus from django.http import HttpResponse class HttpResponseNoContent ( HttpResponse ): status_code = HTTPStatus . NO_CONTENT JsonResponse objects ¶ class JsonResponse ( data , encoder = DjangoJSONEncoder , safe = True , json_dumps_params = None , ** kwargs ) [source] ¶ An HttpResponse subclass that helps to create a JSON-encoded\nresponse. It inherits most behavior from its superclass with a couple\ndifferences: Its default Content-Type header is set to application/json . The first parameter, data , should be a dict instance. If the safe parameter is set to False (see below) it can be any\nJSON-serializable object. The encoder , which defaults to django.core.serializers.json.DjangoJSONEncoder , will be used to\nserialize the data. See JSON serialization for more details about this serializer. The safe boolean parameter defaults to True . If it’s set to False , any object can be passed for serialization (otherwise only dict instances are allowed). If safe is True and a non- dict object is passed as the first argument, a TypeError will be raised. The json_dumps_params parameter is a dictionary of keyword arguments\nto pass to the json.dumps() call used to generate the response. Usage ¶ Typical usage could look like: >>> from django.http import JsonResponse >>> response = JsonResponse ({ \"foo\" : \"bar\" }) >>> response . content b'{\"foo\": \"bar\"}' Serializing non-dictionary objects ¶ In order to serialize objects other than dict you must set the safe parameter to False : >>> response = JsonResponse ([ 1 , 2 , 3 ], safe = False ) Without passing safe=False , a TypeError will be raised. Note that an API based on dict objects is more extensible, flexible, and\nmakes it easier to maintain forwards compatibility. Therefore, you should avoid\nusing non-dict objects in JSON-encoded response. Warning Before the 5th edition of ECMAScript it was possible to\npoison the JavaScript Array constructor. For this reason, Django does\nnot allow passing non-dict objects to the JsonResponse constructor by default.  However, most\nmodern browsers implement ECMAScript 5 which removes this attack vector.\nTherefore it is possible to disable this security precaution. Changing the default JSON encoder ¶ If you need to use a different JSON encoder class you can pass the encoder parameter to the constructor method: >>> response = JsonResponse ( data , encoder = MyJSONEncoder ) StreamingHttpResponse objects ¶ class StreamingHttpResponse [source] ¶ The StreamingHttpResponse class is used to stream a response from\nDjango to the browser. Advanced usage StreamingHttpResponse is somewhat advanced, in that it is\nimportant to know whether you’ll be serving your application synchronously\nunder WSGI or asynchronously under ASGI, and adjust your usage\nappropriately. Please read these notes with care. An example usage of StreamingHttpResponse under WSGI is streaming\ncontent when generating the response would take too long or uses too much\nmemory. For instance, it’s useful for generating large CSV files . There are performance considerations when doing this, though. Django, under\nWSGI, is designed for short-lived requests. Streaming responses will tie a\nworker process for the entire duration of the response. This may result in poor\nperformance. Generally speaking, you would perform expensive tasks outside of the\nrequest-response cycle, rather than resorting to a streamed response. When serving under ASGI, however, a StreamingHttpResponse need not\nstop other requests from being served whilst waiting for I/O. This opens up\nthe possibility of long-lived requests for streaming content and implementing\npatterns such as long-polling, and server-sent events. Even under ASGI note, StreamingHttpResponse should only be used in\nsituations where it is absolutely required that the whole content isn’t\niterated before transferring the data to the client. Because the content can’t\nbe accessed, many middleware can’t function normally. For example the ETag and Content-Length headers can’t be generated for streaming responses. The StreamingHttpResponse is not a subclass of HttpResponse ,\nbecause it features a slightly different API. However, it is almost identical,\nwith the following notable differences: It should be given an iterator that yields bytestrings, memoryview ,\nor strings as content. When serving under WSGI, this should be a sync\niterator. When serving under ASGI, then it should be an async iterator. You cannot access its content, except by iterating the response object\nitself. This should only occur when the response is returned to the client:\nyou should not iterate the response yourself. Under WSGI the response will be iterated synchronously. Under ASGI the\nresponse will be iterated asynchronously. (This is why the iterator type must\nmatch the protocol you’re using.) To avoid a crash, an incorrect iterator type will be mapped to the correct\ntype during iteration, and a warning will be raised, but in order to do this\nthe iterator must be fully-consumed, which defeats the purpose of using a StreamingHttpResponse at all. It has no content attribute. Instead, it has a streaming_content attribute. This can be used\nin middleware to wrap the response iterable, but should not be consumed. You cannot use the file-like object tell() or write() methods.\nDoing so will raise an exception. The HttpResponseBase base class is common between HttpResponse and StreamingHttpResponse . Attributes ¶ StreamingHttpResponse. streaming_content [source] ¶ An iterator of the response content, bytestring encoded according to HttpResponse.charset . StreamingHttpResponse. status_code ¶ The HTTP status code for the response. Unless reason_phrase is explicitly set, modifying the value of status_code outside the constructor will also modify the value of reason_phrase . StreamingHttpResponse. reason_phrase ¶ The HTTP reason phrase for the response. It uses the HTTP standard’s default reason phrases. Unless explicitly set, reason_phrase is determined by the value of status_code . StreamingHttpResponse. streaming ¶ This is always True . StreamingHttpResponse. is_async ¶ Boolean indicating whether StreamingHttpResponse.streaming_content is an asynchronous iterator or not. This is useful for middleware needing to wrap StreamingHttpResponse.streaming_content . Handling disconnects ¶ New in Django 5.0. If the client disconnects during a streaming response, Django will cancel the\ncoroutine that is handling the response. If you want to clean up resources\nmanually, you can do so by catching the asyncio.CancelledError : async def streaming_response (): try : # Do some work here async for chunk in my_streaming_iterator (): yield chunk except asyncio . CancelledError : # Handle disconnect ... raise async def my_streaming_view ( request ): return StreamingHttpResponse ( streaming_response ()) This example only shows how to handle client disconnection while the response\nis streaming. If you perform long-running operations in your view before\nreturning the StreamingHttpResponse object, then you may also want to handle disconnections in the view itself. FileResponse objects ¶ class FileResponse ( open_file , as_attachment = False , filename = '' , ** kwargs ) [source] ¶ FileResponse is a subclass of StreamingHttpResponse optimized for binary files. It uses wsgi.file_wrapper if provided by the wsgi\nserver, otherwise it streams the file out in small chunks. If as_attachment=True , the Content-Disposition header is set to attachment , which asks the browser to offer the file to the user as a\ndownload. Otherwise, a Content-Disposition header with a value of inline (the browser default) will be set only if a filename is\navailable. If open_file doesn’t have a name or if the name of open_file isn’t\nappropriate, provide a custom file name using the filename parameter.\nNote that if you pass a file-like object like io.BytesIO , it’s your\ntask to seek() it before passing it to FileResponse . The Content-Length header is automatically set when it can be guessed\nfrom the content of open_file . The Content-Type header is automatically set when it can be guessed\nfrom the filename , or the name of open_file . FileResponse accepts any file-like object with binary content, for example\na file open in binary mode like so: >>> from django.http import FileResponse >>> response = FileResponse ( open ( \"myfile.png\" , \"rb\" )) The file will be closed automatically, so don’t open it with a context manager. Use under ASGI Python’s file API is synchronous. This means that the file must be fully\nconsumed in order to be served under ASGI. In order to stream a file asynchronously you need to use a third-party\npackage that provides an asynchronous file API, such as aiofiles . Methods ¶ FileResponse. set_headers ( open_file ) [source] ¶ This method is automatically called during the response initialization and\nset various headers ( Content-Length , Content-Type , and Content-Disposition ) depending on open_file . HttpResponseBase class ¶ class HttpResponseBase [source] ¶ The HttpResponseBase class is common to all Django responses.\nIt should not be used to create responses directly, but it can be\nuseful for type-checking.", "keywords": ["contrast", "popitem", "django.core.exceptions", "no_content", "val", "work", "accept", "signing", "comma", "type", "line", "httpresponse", "url", "signatureexpired", "httpresponsenocontent", "place", "get_host", "encodings", "settings", "reason", "requestsite", "uri", "overview", "tell", "writelines", "music", "getitem", "info", "method", "yield", "party", "copy.deepcopy", "multipleproxymiddleware", "configurations", "o", "set_cookie", "upload", "performance", "responses", "boolean", "proxies", "use", "status", "wdy", "encoding", "views", "cookies", "ways", "mozilla/5.0", "dict.values", "items", "ecmascript", "standard", "way", "default", "disposition", "keyerror", "iteration", "http_x_forwarded_port", "writable", "client", "domain", "search/", "generators", "page", "etag", "vary", "server_name", "package", "contrib", "instantiates", "payload", "age", "enctype=\"multipart", "users", "os", "content_type", "parser", "tree", "bytestrings", "self", "argument", "separators", "mac", "reason_phrase", "setdefault", "version", "a=2&b=3&b=5", "images", "getlist", "tuple", "integer", "precaution", "casing", "conjunction", "dict", "samesite", "authenticationmiddleware", "meta", "querydict", "request.get_full_path", "pop", "x", "gmt", "element", "wsgiscriptalias", "dict.update", "delitem", "lines", "excel", "name", "header", "size", "python", "addition", "instances", "currentsitemiddleware", "request.headers.user_agent", "constructor", "subclass", "force", "host", "jsonresponse", "phrase", "tag", "coroutine", "http_x_forwarded_host", "address", "httpresponse.headers", "pep", "use_x_forwarded_port", "depth", "httprequest.method", "true", "*", "requests", "django.http", "ss", "headers", "quick", "logic", "forms", "length", "simpletemplateresponse", "download", "resolving", "io", "traffic", "instantiation", "key", "django.utils.datastructures", "readlines", "parameters", ".", "chunks", "datetime.datetime", "state", "dictionary", "fashion", "urlconf", "django.core.signing", "alternate", "samesite='lax", "characters", "elementtree", "script", "encounter", "macintosh", "browser", "error", "differences", "template", "dd", "inline", "cache", "control", "measure", "default_list", "populating", "setting", "agent", "tasks", "order", "anonymoususer", "documentation", "-", "patch", "request.method", "flush", "application", "port", "behavior", "system", "concept", "aliases", "bytestring", "str", "risk", "files", "query", "et", "phrases", "mode", "import", "b'{\"foo", "hyphens", "'", "bar", "get_full_path", "information", "json", "consumers", "#", "rawpostdataexception", "¶", "set_headers", "init", "plain", "web", "member", "couple", "strength", "server", "dict.items", "format", "page.</p", "render", "example", "the_beatles/", "session", "ordering", "value", "functions", "source", "replacement", "stream", "languages", "c", "html", "examples", "negotiation", "is_secure", "details", "proxy", "duration", "rfc", "attachment", "form", "object", "cookie", "root", "cancellederror", "httprequest", "task", "warning", "attributes", "one", "library", "httpresponsenotallowed", "returns", "httpresponseredirect", "has_header", "sync", "querydict.copy", "initialization", "array", "multiple", "domains", "3", "api", "note", "content_params", "post", "django", "max_age", "badheadererror", "parameter", "syntax", "csrf", "text", "field", "contents", "httprequest.readline", "strings", "streaminghttpresponse.streaming_content", "http", "json_dumps_params", "httpresponseforbidden", "spreadsheet", "superclass", "=", "http_x_forwarded_server", "objects", "https://www.yahoo.com/search/", "crash", "bands", "defaults", "scheme", "o.", "httpstatus", "streaming_content", "lists", "hook", "uploadedfile", "query_string", "setitem", "interface", "asyncio", "https", "utc", "open_file", "memoryview", "acts", "getvalue", "https://example.com/bands/", "handling", "serialization", "ambiguity", "help", "time", "exception", "newlines", "get_current_site", "q", "django.core.serializers.json", "streaming_response", "middleware", "tony", "site", "manager", "server_port", "httpresponse.content", "badsignature", "appends", "bytes", "accessing", "subclasses", "edition", "agents", "apis", "fields", "handle", "signature", "my_streaming_iterator", "httprequest.body", "copy", "mime", "custom", "methods", "myjsonencoder", "browsers", "is_authenticated", "side", "update", "keyword", "apache", "none", "get_port", "default_exception_reporter", "iterators", "variables", "original", "process", "protocol", "access", "base", "httpresponse.charset", "responsibility", "javascript", "httpresponsenotfound", "considerations", "timedelta", "streaminghttpresponse", "process_view", "content", "seconds", "end", "deployment", "readline", "use_x_forwarded_host", "microsoft", "classmethod", "flag", "request", "attacks", "disconnection", "cycle", "b", "get_response", "attack", "checking", "disconnections", "thing", "current_app", "protection", "/search/", "data", "effects", "environment", "next=/a%26b/", "simplecookie", "states", "notes", "submission", "patterns", "combination", "response", "default_charset", "dashes", "kwargs", "keys", "setlistdefault", "json.dumps", "events", "path", "morsel", "elements", "asgi", "module", "apps", "samesite='none", "arguments", "aiofiles", "http.cookies", "memory", "context", "mm", "django.utils.cache", "purpose", "fileresponse", "security", "underscores", "httprequest.read", "do_something_else", "title", "patch_vary_headers", "call", "http_x_bender", "httprequest.headers", "resolvermatch", "path_info", "attempt", "wsgi.file_wrapper", "chunk", "lf", "paragraph.</p", "blog.example.com", "vector", "types", "changes", "servers", "utf-8", "portion", "false", "prefix", "_", "appendlist", "with", "default_exception_reporter_filter", "a=1&a=2&c=3", "10_12_6", "check", "metadata", "values", "reports", "yy", "worker", "httpresponsepermanentredirect", "solution", "encoder", "new", "iterator", "item", "async", "httpresponsebadrequest", "nginx", "compatibility", "contexts", "test", "disconnect", "the_beatles/?print", "ip", "auth_user_model", "intel", "pair", "location", "hostname", "input", "usage", "www.example.com", "setlist", "processing", "character", "my_streaming_view", "sessionmiddleware", "serializer", "djangojsonencoder", "httpresponsebase", "runserver", "n’t", "case", "class", "number", "xml", "accepts", "redirect", "defense", "auser", "return", "my_data", "charset", "attribute", "as_attachment", "function", "build_absolute_uri", "care", "string", "list", "dict.setdefault", "filename", "view", "raise_error", "urlencode", "parts", "i", "body", "user", "part", "file", "read", "patch_cache_control", "mime_type", "operations", "/bands/", "get", "strip", "querydict.__getitem", "http_x_forwarded_for", "vary_on_headers('accept", "exceptions", "situations", "possibility", "salt", "multivaluedictkeyerror", "typeerror", "document", "representation", "csv", "set", "samesite='strict", "mon", "httpresponsegone", "other_dict", "cr", "polling", "foo", "bender", "get_signed_cookie", "fromkeys", "set_signed_cookie", "httpresponse.cookies", "commonmiddleware", "http_accept_language", "streaming", "instance", "status_code", "code", "resources", "del", "wsgi", "hh", "is_async", "root_urlconf", "timestamp", "csrfviewmiddleware"], "type": "documentation"},
{"title": "Paginator", "url": "https://docs.djangoproject.com/en/5.1/ref/paginator/", "content": "Paginator ¶ Django provides a few classes that help you manage paginated data – that is,\ndata that’s split across several pages, with “Previous/Next” links. These\nclasses live in django/core/paginator.py . For examples, see the Pagination topic guide . Paginator class ¶ class Paginator ( object_list , per_page , orphans = 0 , allow_empty_first_page = True , error_messages = None ) [source] ¶ A paginator acts like a sequence of Page when using len() or\niterating it directly. Paginator. object_list ¶ Required. A list, tuple, QuerySet , or other sliceable object with a count() or __len__() method. For consistent pagination, QuerySet s should be ordered, e.g. with an order_by() clause or with a default ordering on the model. Performance issues paginating large QuerySet s If you’re using a QuerySet with a very large number of items,\nrequesting high page numbers might be slow on some databases, because\nthe resulting LIMIT / OFFSET query needs to count the number of OFFSET records which takes longer as the page number gets higher. Paginator. per_page ¶ Required. The maximum number of items to include on a page, not including\norphans (see the orphans optional argument below). Paginator. orphans ¶ Optional. Use this when you don’t want to have a last page with very few\nitems. If the last page would normally have a number of items less than or\nequal to orphans , then those items will be added to the previous page\n(which becomes the last page) instead of leaving the items on a page by\nthemselves. For example, with 23 items, per_page=10 , and orphans=3 ,\nthere will be two pages; the first page with 10 items and the second\n(and last) page with 13 items. orphans defaults to zero, which means\npages are never combined and the last page may have one item. Paginator. allow_empty_first_page ¶ Optional. Whether or not the first page is allowed to be empty.  If False and object_list is  empty, then an EmptyPage error will\nbe raised. Paginator. error_messages ¶ New in Django 5.0. The error_messages argument lets you override the default messages that\nthe paginator will raise. Pass in a dictionary with keys matching the error\nmessages you want to override. Available error message keys are: invalid_page , min_page , and no_results . For example, here is the default error message: >>> from django.core.paginator import Paginator >>> paginator = Paginator ([ 1 , 2 , 3 ], 2 ) >>> paginator . page ( 5 ) Traceback (most recent call last): ... EmptyPage : That page contains no results And here is a custom error message: >>> paginator = Paginator ( ... [ 1 , 2 , 3 ], ... 2 , ... error_messages = { \"no_results\" : \"Page does not exist\" }, ... ) >>> paginator . page ( 5 ) Traceback (most recent call last): ... EmptyPage : Page does not exist Methods ¶ Paginator. get_page ( number ) [source] ¶ Returns a Page object with the given 1-based index, while also\nhandling out of range and invalid page numbers. If the page isn’t a number, it returns the first page. If the page number\nis negative or greater than the number of pages, it returns the last page. Raises an EmptyPage exception only if you specify Paginator(..., allow_empty_first_page=False) and the object_list is\nempty. Paginator. page ( number ) [source] ¶ Returns a Page object with the given 1-based index. Raises PageNotAnInteger if the number cannot be converted to an integer\nby calling int() . Raises EmptyPage if the given page number\ndoesn’t exist. Paginator. get_elided_page_range ( number , * , on_each_side = 3 , on_ends = 2 ) [source] ¶ Returns a 1-based list of page numbers similar to Paginator.page_range , but may add an ellipsis to either or both\nsides of the current page number when Paginator.num_pages is large. The number of pages to include on each side of the current page number is\ndetermined by the on_each_side argument which defaults to 3. The number of pages to include at the beginning and end of page range is\ndetermined by the on_ends argument which defaults to 2. For example, with the default values for on_each_side and on_ends ,\nif the current page is 10 and there are 50 pages, the page range will be [1, 2, '…', 7, 8, 9, 10, 11, 12, 13, '…', 49, 50] . This will result in\npages 7, 8, and 9 to the left of and 11, 12, and 13 to the right of the\ncurrent page as well as pages 1 and 2 at the start and 49 and 50 at the\nend. Raises InvalidPage if the given page number doesn’t exist. Attributes ¶ Paginator. ELLIPSIS ¶ A translatable string used as a substitute for elided page numbers in the\npage range returned by get_elided_page_range() . Default is '…' . Paginator. count [source] ¶ The total number of objects, across all pages. Note When determining the number of objects contained in object_list , Paginator will first try calling object_list.count() . If object_list has no count() method, then Paginator will\nfall back to using len(object_list) . This allows objects, such as QuerySet , to use a more efficient count() method when\navailable. Paginator. num_pages [source] ¶ The total number of pages. Paginator. page_range [source] ¶ A 1-based range iterator of page numbers, e.g. yielding [1, 2, 3, 4] . Page class ¶ You usually won’t construct Page objects by hand – you’ll get them by\niterating Paginator , or by using Paginator.page() . class Page ( object_list , number , paginator ) [source] ¶ A page acts like a sequence of Page.object_list when using len() or iterating it directly. Methods ¶ Page. has_next () [source] ¶ Returns True if there’s a next page. Page. has_previous () [source] ¶ Returns True if there’s a previous page. Page. has_other_pages () [source] ¶ Returns True if there’s a next or previous page. Page. next_page_number () [source] ¶ Returns the next page number. Raises InvalidPage if next page\ndoesn’t exist. Page. previous_page_number () [source] ¶ Returns the previous page number. Raises InvalidPage if previous\npage doesn’t exist. Page. start_index () [source] ¶ Returns the 1-based index of the first object on the page, relative to all\nof the objects in the paginator’s list. For example, when paginating a list\nof 5 objects with 2 objects per page, the second page’s start_index() would return 3 . Page. end_index () [source] ¶ Returns the 1-based index of the last object on the page, relative to all\nof the objects in the paginator’s list. For example, when paginating a list\nof 5 objects with 2 objects per page, the second page’s end_index() would return 4 . Attributes ¶ Page. object_list ¶ The list of objects on this page. Page. number ¶ The 1-based page number for this page. Page. paginator ¶ The associated Paginator object. Exceptions ¶ exception InvalidPage [source] ¶ A base class for exceptions raised when a paginator is passed an invalid\npage number. The Paginator.page() method raises an exception if the requested page is\ninvalid (i.e. not an integer) or contains no objects. Generally, it’s enough\nto catch the InvalidPage exception, but if you’d like more granularity,\nyou can catch either of the following exceptions: exception PageNotAnInteger [source] ¶ Raised when page() is given a value that isn’t an integer. exception EmptyPage [source] ¶ Raised when page() is given a valid value but no objects\nexist on that page. Both of the exceptions are subclasses of InvalidPage , so you can handle\nthem both with except InvalidPage .", "keywords": ["dictionary", "index", "end_index", "page.object_list", "error", "range", "django.core.paginator", "false", "has_previous", "exception", "count", "classes", "order_by", "substitute", "_", "method", "records", "queryset", "hand", "len(object_list", "values", "required", "performance", "query", "page_range", "new", "messages", "import", "iterator", "left", "right", "subclasses", "has_other_pages", "items", "item", "ellipsis", "topic", "len", "¶", "default", "paginator.page", "min_page", "custom", "methods", "side", "pagination", "model", "invalid_page", "none", "page", "base", "beginning", "allow_empty_first_page", "results", "example", "paginator.num_pages", "per_page", "guide", "n’t", "on_each_side", "value", "int", "end", "source", "no_results", "argument", "class", "number", "offset", "paginator", "numbers", "tuple", "paginator.page_range", "integer", "object_list", "examples", "string", "list", "get_elided_page_range", "start", "data", "get_page", "object", "sides", "attributes", "returns", "core", "optional", "error_messages", "traceback", "sequence", "keys", "exceptions", "granularity", "django", "clause", "message", "start_index", "num_pages", "*", "emptypage", "per_page=10", "has_next", "databases", "limit", "pagenotaninteger", "=", "orphans", "pages", "objects", "links", "issues", "call", "invalidpage"], "type": "documentation"},
{"title": "Database Functions", "url": "https://docs.djangoproject.com/en/5.1/ref/models/database-functions/", "content": "Database Functions ¶ The classes documented below provide a way for users to use functions provided\nby the underlying database as annotations, aggregations, or filters in Django.\nFunctions are also expressions , so they can be used and\ncombined with other expressions like aggregate functions . We’ll be using the following model in examples of each function: class Author ( models . Model ): name = models . CharField ( max_length = 50 ) age = models . PositiveIntegerField ( null = True , blank = True ) alias = models . CharField ( max_length = 50 , null = True , blank = True ) goes_by = models . CharField ( max_length = 50 , null = True , blank = True ) We don’t usually recommend allowing null=True for CharField since this\nallows the field to have two “empty values”, but it’s important for the Coalesce example below. Comparison and conversion functions ¶ Cast ¶ class Cast ( expression , output_field ) [source] ¶ Forces the result type of expression to be the one from output_field . Usage example: >>> from django.db.models import FloatField >>> from django.db.models.functions import Cast >>> Author . objects . create ( age = 25 , name = \"Margaret Smith\" ) >>> author = Author . objects . annotate ( ... age_as_float = Cast ( \"age\" , output_field = FloatField ()), ... ) . get () >>> print ( author . age_as_float ) 25.0 Coalesce ¶ class Coalesce ( * expressions , ** extra ) [source] ¶ Accepts a list of at least two field names or expressions and returns the\nfirst non-null value (note that an empty string is not considered a null\nvalue). Each argument must be of a similar type, so mixing text and numbers\nwill result in a database error. Usage examples: >>> # Get a screen name from least to most public >>> from django.db.models import Sum >>> from django.db.models.functions import Coalesce >>> Author . objects . create ( name = \"Margaret Smith\" , goes_by = \"Maggie\" ) >>> author = Author . objects . annotate ( screen_name = Coalesce ( \"alias\" , \"goes_by\" , \"name\" )) . get () >>> print ( author . screen_name ) Maggie >>> # Prevent an aggregate Sum() from returning None >>> # The aggregate default argument uses Coalesce() under the hood. >>> aggregated = Author . objects . aggregate ( ... combined_age = Sum ( \"age\" ), ... combined_age_default = Sum ( \"age\" , default = 0 ), ... combined_age_coalesce = Coalesce ( Sum ( \"age\" ), 0 ), ... ) >>> print ( aggregated [ \"combined_age\" ]) None >>> print ( aggregated [ \"combined_age_default\" ]) 0 >>> print ( aggregated [ \"combined_age_coalesce\" ]) 0 Warning A Python value passed to Coalesce on MySQL may be converted to an\nincorrect type unless explicitly cast to the correct database type: >>> from django.db.models import DateTimeField >>> from django.db.models.functions import Cast , Coalesce >>> from django.utils import timezone >>> now = timezone . now () >>> Coalesce ( \"updated\" , Cast ( now , DateTimeField ())) Collate ¶ class Collate ( expression , collation ) [source] ¶ Takes an expression and a collation name to query against. For example, to filter case-insensitively in SQLite: >>> Author . objects . filter ( name = Collate ( Value ( \"john\" ), \"nocase\" )) <QuerySet [<Author: John>, <Author: john>]> It can also be used when ordering, for example with PostgreSQL: >>> Author . objects . order_by ( Collate ( \"name\" , \"et-x-icu\" )) <QuerySet [<Author: Ursula>, <Author: Veronika>, <Author: Ülle>]> Greatest ¶ class Greatest ( * expressions , ** extra ) [source] ¶ Accepts a list of at least two field names or expressions and returns the\ngreatest value. Each argument must be of a similar type, so mixing text and\nnumbers will result in a database error. Usage example: class Blog ( models . Model ): body = models . TextField () modified = models . DateTimeField ( auto_now = True ) class Comment ( models . Model ): body = models . TextField () modified = models . DateTimeField ( auto_now = True ) blog = models . ForeignKey ( Blog , on_delete = models . CASCADE ) >>> from django.db.models.functions import Greatest >>> blog = Blog . objects . create ( body = \"Greatest is the best.\" ) >>> comment = Comment . objects . create ( body = \"No, Least is better.\" , blog = blog ) >>> comments = Comment . objects . annotate ( last_updated = Greatest ( \"modified\" , \"blog__modified\" )) >>> annotated_comment = comments . get () annotated_comment.last_updated will be the most recent of blog.modified and comment.modified . Warning The behavior of Greatest when one or more expression may be null varies between databases: PostgreSQL: Greatest will return the largest non-null expression,\nor null if all expressions are null . SQLite, Oracle, and MySQL: If any expression is null , Greatest will return null . The PostgreSQL behavior can be emulated using Coalesce if you know\na sensible minimum value to provide as a default. JSONObject ¶ class JSONObject ( ** fields ) [source] ¶ Takes a list of key-value pairs and returns a JSON object containing those\npairs. Usage example: >>> from django.db.models import F >>> from django.db.models.functions import JSONObject , Lower >>> Author . objects . create ( name = \"Margaret Smith\" , alias = \"msmith\" , age = 25 ) >>> author = Author . objects . annotate ( ... json_object = JSONObject ( ... name = Lower ( \"name\" ), ... alias = \"alias\" , ... age = F ( \"age\" ) * 2 , ... ) ... ) . get () >>> author . json_object {'name': 'margaret smith', 'alias': 'msmith', 'age': 50} Least ¶ class Least ( * expressions , ** extra ) [source] ¶ Accepts a list of at least two field names or expressions and returns the\nleast value. Each argument must be of a similar type, so mixing text and numbers\nwill result in a database error. Warning The behavior of Least when one or more expression may be null varies between databases: PostgreSQL: Least will return the smallest non-null expression,\nor null if all expressions are null . SQLite, Oracle, and MySQL: If any expression is null , Least will return null . The PostgreSQL behavior can be emulated using Coalesce if you know\na sensible maximum value to provide as a default. NullIf ¶ class NullIf ( expression1 , expression2 ) [source] ¶ Accepts two expressions and returns None if they are equal, otherwise\nreturns expression1 . Caveats on Oracle Due to an Oracle convention , this\nfunction returns the empty string instead of None when the expressions\nare of type CharField . Passing Value(None) to expression1 is prohibited on Oracle since\nOracle doesn’t accept NULL as the first argument. Date functions ¶ We’ll be using the following model in examples of each function: class Experiment ( models . Model ): start_datetime = models . DateTimeField () start_date = models . DateField ( null = True , blank = True ) start_time = models . TimeField ( null = True , blank = True ) end_datetime = models . DateTimeField ( null = True , blank = True ) end_date = models . DateField ( null = True , blank = True ) end_time = models . TimeField ( null = True , blank = True ) Extract ¶ class Extract ( expression , lookup_name = None , tzinfo = None , ** extra ) [source] ¶ Extracts a component of a date as a number. Takes an expression representing a DateField , DateTimeField , TimeField , or DurationField and a lookup_name , and returns the part\nof the date referenced by lookup_name as an IntegerField .\nDjango usually uses the databases’ extract function, so you may use any lookup_name that your database supports. A tzinfo subclass, usually\nprovided by zoneinfo , can be passed to extract a value in a specific\ntimezone. Given the datetime 2015-06-15 23:30:01.000321+00:00 , the built-in lookup_name s return: “year”: 2015 “iso_year”: 2015 “quarter”: 2 “month”: 6 “day”: 15 “week”: 25 “week_day”: 2 “iso_week_day”: 1 “hour”: 23 “minute”: 30 “second”: 1 If a different timezone like Australia/Melbourne is active in Django, then\nthe datetime is converted to the timezone before the value is extracted. The\ntimezone offset for Melbourne in the example date above is +10:00. The values\nreturned when this timezone is active will be the same as above except for: “day”: 16 “week_day”: 3 “iso_week_day”: 2 “hour”: 9 week_day values The week_day lookup_type is calculated differently from most\ndatabases and from Python’s standard functions. This function will return 1 for Sunday, 2 for Monday, through 7 for Saturday. The equivalent calculation in Python is: >>> from datetime import datetime >>> dt = datetime ( 2015 , 6 , 15 ) >>> ( dt . isoweekday () % 7 ) + 1 2 week values The week lookup_type is calculated based on ISO-8601 , i.e.,\na week starts on a Monday. The first week of a year is the one that\ncontains the year’s first Thursday, i.e. the first week has the majority\n(four or more) of its days in the year. The value returned is in the range\n1 to 52 or 53. Each lookup_name above has a corresponding Extract subclass (listed\nbelow) that should typically be used instead of the more verbose equivalent,\ne.g. use ExtractYear(...) rather than Extract(..., lookup_name='year') . Usage example: >>> from datetime import datetime >>> from django.db.models.functions import Extract >>> start = datetime ( 2015 , 6 , 15 ) >>> end = datetime ( 2015 , 7 , 2 ) >>> Experiment . objects . create ( ... start_datetime = start , start_date = start . date (), end_datetime = end , end_date = end . date () ... ) >>> # Add the experiment start year as a field in the QuerySet. >>> experiment = Experiment . objects . annotate ( ... start_year = Extract ( \"start_datetime\" , \"year\" ) ... ) . get () >>> experiment . start_year 2015 >>> # How many experiments completed in the same year in which they started? >>> Experiment . objects . filter ( start_datetime__year = Extract ( \"end_datetime\" , \"year\" )) . count () 1 DateField extracts ¶ class ExtractYear ( expression , tzinfo = None , ** extra ) [source] ¶ lookup_name = 'year' class ExtractIsoYear ( expression , tzinfo = None , ** extra ) [source] ¶ Returns the ISO-8601 week-numbering year. lookup_name = 'iso_year' class ExtractMonth ( expression , tzinfo = None , ** extra ) [source] ¶ lookup_name = 'month' class ExtractDay ( expression , tzinfo = None , ** extra ) [source] ¶ lookup_name = 'day' class ExtractWeekDay ( expression , tzinfo = None , ** extra ) [source] ¶ lookup_name = 'week_day' class ExtractIsoWeekDay ( expression , tzinfo = None , ** extra ) [source] ¶ Returns the ISO-8601 week day with day 1 being Monday and day 7 being\nSunday. lookup_name = 'iso_week_day' class ExtractWeek ( expression , tzinfo = None , ** extra ) [source] ¶ lookup_name = 'week' class ExtractQuarter ( expression , tzinfo = None , ** extra ) [source] ¶ lookup_name = 'quarter' These are logically equivalent to Extract('date_field', lookup_name) . Each\nclass is also a Transform registered on DateField and DateTimeField as __(lookup_name) , e.g. __year . Since DateField s don’t have a time component, only Extract subclasses\nthat deal with date-parts can be used with DateField : >>> from datetime import datetime , timezone >>> from django.db.models.functions import ( ... ExtractDay , ... ExtractMonth , ... ExtractQuarter , ... ExtractWeek , ... ExtractIsoWeekDay , ... ExtractWeekDay , ... ExtractIsoYear , ... ExtractYear , ... ) >>> start_2015 = datetime ( 2015 , 6 , 15 , 23 , 30 , 1 , tzinfo = timezone . utc ) >>> end_2015 = datetime ( 2015 , 6 , 16 , 13 , 11 , 27 , tzinfo = timezone . utc ) >>> Experiment . objects . create ( ... start_datetime = start_2015 , ... start_date = start_2015 . date (), ... end_datetime = end_2015 , ... end_date = end_2015 . date (), ... ) >>> Experiment . objects . annotate ( ... year = ExtractYear ( \"start_date\" ), ... isoyear = ExtractIsoYear ( \"start_date\" ), ... quarter = ExtractQuarter ( \"start_date\" ), ... month = ExtractMonth ( \"start_date\" ), ... week = ExtractWeek ( \"start_date\" ), ... day = ExtractDay ( \"start_date\" ), ... weekday = ExtractWeekDay ( \"start_date\" ), ... isoweekday = ExtractIsoWeekDay ( \"start_date\" ), ... ) . values ( ... \"year\" , ... \"isoyear\" , ... \"quarter\" , ... \"month\" , ... \"week\" , ... \"day\" , ... \"weekday\" , ... \"isoweekday\" , ... ) . get ( ... end_date__year = ExtractYear ( \"start_date\" ) ... ) {'year': 2015, 'isoyear': 2015, 'quarter': 2, 'month': 6, 'week': 25, 'day': 15, 'weekday': 2, 'isoweekday': 1} DateTimeField extracts ¶ In addition to the following, all extracts for DateField listed above may\nalso be used on DateTimeField s . class ExtractHour ( expression , tzinfo = None , ** extra ) [source] ¶ lookup_name = 'hour' class ExtractMinute ( expression , tzinfo = None , ** extra ) [source] ¶ lookup_name = 'minute' class ExtractSecond ( expression , tzinfo = None , ** extra ) [source] ¶ lookup_name = 'second' These are logically equivalent to Extract('datetime_field', lookup_name) .\nEach class is also a Transform registered on DateTimeField as __(lookup_name) , e.g. __minute . DateTimeField examples: >>> from datetime import datetime , timezone >>> from django.db.models.functions import ( ... ExtractDay , ... ExtractHour , ... ExtractMinute , ... ExtractMonth , ... ExtractQuarter , ... ExtractSecond , ... ExtractWeek , ... ExtractIsoWeekDay , ... ExtractWeekDay , ... ExtractIsoYear , ... ExtractYear , ... ) >>> start_2015 = datetime ( 2015 , 6 , 15 , 23 , 30 , 1 , tzinfo = timezone . utc ) >>> end_2015 = datetime ( 2015 , 6 , 16 , 13 , 11 , 27 , tzinfo = timezone . utc ) >>> Experiment . objects . create ( ... start_datetime = start_2015 , ... start_date = start_2015 . date (), ... end_datetime = end_2015 , ... end_date = end_2015 . date (), ... ) >>> Experiment . objects . annotate ( ... year = ExtractYear ( \"start_datetime\" ), ... isoyear = ExtractIsoYear ( \"start_datetime\" ), ... quarter = ExtractQuarter ( \"start_datetime\" ), ... month = ExtractMonth ( \"start_datetime\" ), ... week = ExtractWeek ( \"start_datetime\" ), ... day = ExtractDay ( \"start_datetime\" ), ... weekday = ExtractWeekDay ( \"start_datetime\" ), ... isoweekday = ExtractIsoWeekDay ( \"start_datetime\" ), ... hour = ExtractHour ( \"start_datetime\" ), ... minute = ExtractMinute ( \"start_datetime\" ), ... second = ExtractSecond ( \"start_datetime\" ), ... ) . values ( ... \"year\" , ... \"isoyear\" , ... \"month\" , ... \"week\" , ... \"day\" , ... \"weekday\" , ... \"isoweekday\" , ... \"hour\" , ... \"minute\" , ... \"second\" , ... ) . get ( ... end_datetime__year = ExtractYear ( \"start_datetime\" ) ... ) {'year': 2015, 'isoyear': 2015, 'quarter': 2, 'month': 6, 'week': 25, 'day': 15, 'weekday': 2, 'isoweekday': 1, 'hour': 23, 'minute': 30, 'second': 1} When USE_TZ is True then datetimes are stored in the database\nin UTC. If a different timezone is active in Django, the datetime is converted\nto that timezone before the value is extracted. The example below converts to\nthe Melbourne timezone (UTC +10:00), which changes the day, weekday, and hour\nvalues that are returned: >>> from django.utils import timezone >>> import zoneinfo >>> melb = zoneinfo . ZoneInfo ( \"Australia/Melbourne\" ) # UTC+10:00 >>> with timezone . override ( melb ): ... Experiment . objects . annotate ( ... day = ExtractDay ( \"start_datetime\" ), ... weekday = ExtractWeekDay ( \"start_datetime\" ), ... isoweekday = ExtractIsoWeekDay ( \"start_datetime\" ), ... hour = ExtractHour ( \"start_datetime\" ), ... ) . values ( \"day\" , \"weekday\" , \"isoweekday\" , \"hour\" ) . get ( ... end_datetime__year = ExtractYear ( \"start_datetime\" ), ... ) ... {'day': 16, 'weekday': 3, 'isoweekday': 2, 'hour': 9} Explicitly passing the timezone to the Extract function behaves in the same\nway, and takes priority over an active timezone: >>> import zoneinfo >>> melb = zoneinfo . ZoneInfo ( \"Australia/Melbourne\" ) >>> Experiment . objects . annotate ( ... day = ExtractDay ( \"start_datetime\" , tzinfo = melb ), ... weekday = ExtractWeekDay ( \"start_datetime\" , tzinfo = melb ), ... isoweekday = ExtractIsoWeekDay ( \"start_datetime\" , tzinfo = melb ), ... hour = ExtractHour ( \"start_datetime\" , tzinfo = melb ), ... ) . values ( \"day\" , \"weekday\" , \"isoweekday\" , \"hour\" ) . get ( ... end_datetime__year = ExtractYear ( \"start_datetime\" ), ... ) {'day': 16, 'weekday': 3, 'isoweekday': 2, 'hour': 9} Now ¶ class Now [source] ¶ Returns the database server’s current date and time when the query is executed,\ntypically using the SQL CURRENT_TIMESTAMP . Usage example: >>> from django.db.models.functions import Now >>> Article . objects . filter ( published__lte = Now ()) <QuerySet [<Article: How to Django>]> PostgreSQL considerations On PostgreSQL, the SQL CURRENT_TIMESTAMP returns the time that the\ncurrent transaction started. Therefore for cross-database compatibility, Now() uses STATEMENT_TIMESTAMP instead. If you need the transaction\ntimestamp, use django.contrib.postgres.functions.TransactionNow . Oracle On Oracle, the SQL LOCALTIMESTAMP is used to avoid issues with casting CURRENT_TIMESTAMP to DateTimeField . Changed in Django 5.0: In older versions, the SQL CURRENT_TIMESTAMP was used on Oracle instead\nof LOCALTIMESTAMP . Trunc ¶ class Trunc ( expression , kind , output_field = None , tzinfo = None , ** extra ) [source] ¶ Truncates a date up to a significant component. When you only care if something happened in a particular year, hour, or day,\nbut not the exact second, then Trunc (and its subclasses) can be useful to\nfilter or aggregate your data. For example, you can use Trunc to calculate\nthe number of sales per day. Trunc takes a single expression , representing a DateField , TimeField , or DateTimeField , a kind representing a date or time\npart, and an output_field that’s either DateTimeField() , TimeField() , or DateField() . It returns a datetime, date, or time\ndepending on output_field , with fields up to kind set to their minimum\nvalue. If output_field is omitted, it will default to the output_field of expression . A tzinfo subclass, usually provided by zoneinfo ,\ncan be passed to truncate a value in a specific timezone. Given the datetime 2015-06-15 14:30:50.000321+00:00 , the built-in kind s\nreturn: “year”: 2015-01-01 00:00:00+00:00 “quarter”: 2015-04-01 00:00:00+00:00 “month”: 2015-06-01 00:00:00+00:00 “week”: 2015-06-15 00:00:00+00:00 “day”: 2015-06-15 00:00:00+00:00 “hour”: 2015-06-15 14:00:00+00:00 “minute”: 2015-06-15 14:30:00+00:00 “second”: 2015-06-15 14:30:50+00:00 If a different timezone like Australia/Melbourne is active in Django, then\nthe datetime is converted to the new timezone before the value is truncated.\nThe timezone offset for Melbourne in the example date above is +10:00. The\nvalues returned when this timezone is active will be: “year”: 2015-01-01 00:00:00+11:00 “quarter”: 2015-04-01 00:00:00+10:00 “month”: 2015-06-01 00:00:00+10:00 “week”: 2015-06-16 00:00:00+10:00 “day”: 2015-06-16 00:00:00+10:00 “hour”: 2015-06-16 00:00:00+10:00 “minute”: 2015-06-16 00:30:00+10:00 “second”: 2015-06-16 00:30:50+10:00 The year has an offset of +11:00 because the result transitioned into daylight\nsaving time. Each kind above has a corresponding Trunc subclass (listed below) that\nshould typically be used instead of the more verbose equivalent,\ne.g. use TruncYear(...) rather than Trunc(..., kind='year') . The subclasses are all defined as transforms, but they aren’t registered with\nany fields, because the lookup names are already reserved by the Extract subclasses. Usage example: >>> from datetime import datetime >>> from django.db.models import Count , DateTimeField >>> from django.db.models.functions import Trunc >>> Experiment . objects . create ( start_datetime = datetime ( 2015 , 6 , 15 , 14 , 30 , 50 , 321 )) >>> Experiment . objects . create ( start_datetime = datetime ( 2015 , 6 , 15 , 14 , 40 , 2 , 123 )) >>> Experiment . objects . create ( start_datetime = datetime ( 2015 , 12 , 25 , 10 , 5 , 27 , 999 )) >>> experiments_per_day = ( ... Experiment . objects . annotate ( ... start_day = Trunc ( \"start_datetime\" , \"day\" , output_field = DateTimeField ()) ... ) ... . values ( \"start_day\" ) ... . annotate ( experiments = Count ( \"id\" )) ... ) >>> for exp in experiments_per_day : ... print ( exp [ \"start_day\" ], exp [ \"experiments\" ]) ... 2015-06-15 00:00:00 2 2015-12-25 00:00:00 1 >>> experiments = Experiment . objects . annotate ( ... start_day = Trunc ( \"start_datetime\" , \"day\" , output_field = DateTimeField ()) ... ) . filter ( start_day = datetime ( 2015 , 6 , 15 )) >>> for exp in experiments : ... print ( exp . start_datetime ) ... 2015-06-15 14:30:50.000321 2015-06-15 14:40:02.000123 DateField truncation ¶ class TruncYear ( expression , output_field = None , tzinfo = None , ** extra ) [source] ¶ kind = 'year' class TruncMonth ( expression , output_field = None , tzinfo = None , ** extra ) [source] ¶ kind = 'month' class TruncWeek ( expression , output_field = None , tzinfo = None , ** extra ) [source] ¶ Truncates to midnight on the Monday of the week. kind = 'week' class TruncQuarter ( expression , output_field = None , tzinfo = None , ** extra ) [source] ¶ kind = 'quarter' These are logically equivalent to Trunc('date_field', kind) . They truncate\nall parts of the date up to kind which allows grouping or filtering dates\nwith less precision. expression can have an output_field of either DateField or DateTimeField . Since DateField s don’t have a time component, only Trunc subclasses\nthat deal with date-parts can be used with DateField : >>> from datetime import datetime , timezone >>> from django.db.models import Count >>> from django.db.models.functions import TruncMonth , TruncYear >>> start1 = datetime ( 2014 , 6 , 15 , 14 , 30 , 50 , 321 , tzinfo = timezone . utc ) >>> start2 = datetime ( 2015 , 6 , 15 , 14 , 40 , 2 , 123 , tzinfo = timezone . utc ) >>> start3 = datetime ( 2015 , 12 , 31 , 17 , 5 , 27 , 999 , tzinfo = timezone . utc ) >>> Experiment . objects . create ( start_datetime = start1 , start_date = start1 . date ()) >>> Experiment . objects . create ( start_datetime = start2 , start_date = start2 . date ()) >>> Experiment . objects . create ( start_datetime = start3 , start_date = start3 . date ()) >>> experiments_per_year = ( ... Experiment . objects . annotate ( year = TruncYear ( \"start_date\" )) ... . values ( \"year\" ) ... . annotate ( experiments = Count ( \"id\" )) ... ) >>> for exp in experiments_per_year : ... print ( exp [ \"year\" ], exp [ \"experiments\" ]) ... 2014-01-01 1 2015-01-01 2 >>> import zoneinfo >>> melb = zoneinfo . ZoneInfo ( \"Australia/Melbourne\" ) >>> experiments_per_month = ( ... Experiment . objects . annotate ( month = TruncMonth ( \"start_datetime\" , tzinfo = melb )) ... . values ( \"month\" ) ... . annotate ( experiments = Count ( \"id\" )) ... ) >>> for exp in experiments_per_month : ... print ( exp [ \"month\" ], exp [ \"experiments\" ]) ... 2015-06-01 00:00:00+10:00 1 2016-01-01 00:00:00+11:00 1 2014-06-01 00:00:00+10:00 1 DateTimeField truncation ¶ class TruncDate ( expression , tzinfo = None , ** extra ) [source] ¶ lookup_name = 'date' output_field = DateField() TruncDate casts expression to a date rather than using the built-in SQL\ntruncate function. It’s also registered as a transform on DateTimeField as __date . class TruncTime ( expression , tzinfo = None , ** extra ) [source] ¶ lookup_name = 'time' output_field = TimeField() TruncTime casts expression to a time rather than using the built-in SQL\ntruncate function. It’s also registered as a transform on DateTimeField as __time . class TruncDay ( expression , output_field = None , tzinfo = None , ** extra ) [source] ¶ kind = 'day' class TruncHour ( expression , output_field = None , tzinfo = None , ** extra ) [source] ¶ kind = 'hour' class TruncMinute ( expression , output_field = None , tzinfo = None , ** extra ) [source] ¶ kind = 'minute' class TruncSecond ( expression , output_field = None , tzinfo = None , ** extra ) [source] ¶ kind = 'second' These are logically equivalent to Trunc('datetime_field', kind) . They\ntruncate all parts of the date up to kind and allow grouping or filtering\ndatetimes with less precision. expression must have an output_field of DateTimeField . Usage example: >>> from datetime import date , datetime , timezone >>> from django.db.models import Count >>> from django.db.models.functions import ( ... TruncDate , ... TruncDay , ... TruncHour , ... TruncMinute , ... TruncSecond , ... ) >>> import zoneinfo >>> start1 = datetime ( 2014 , 6 , 15 , 14 , 30 , 50 , 321 , tzinfo = timezone . utc ) >>> Experiment . objects . create ( start_datetime = start1 , start_date = start1 . date ()) >>> melb = zoneinfo . ZoneInfo ( \"Australia/Melbourne\" ) >>> Experiment . objects . annotate ( ... date = TruncDate ( \"start_datetime\" ), ... day = TruncDay ( \"start_datetime\" , tzinfo = melb ), ... hour = TruncHour ( \"start_datetime\" , tzinfo = melb ), ... minute = TruncMinute ( \"start_datetime\" ), ... second = TruncSecond ( \"start_datetime\" ), ... ) . values ( \"date\" , \"day\" , \"hour\" , \"minute\" , \"second\" ) . get () {'date': datetime.date(2014, 6, 15), 'day': datetime.datetime(2014, 6, 16, 0, 0, tzinfo=zoneinfo.ZoneInfo('Australia/Melbourne')), 'hour': datetime.datetime(2014, 6, 16, 0, 0, tzinfo=zoneinfo.ZoneInfo('Australia/Melbourne')), 'minute': 'minute': datetime.datetime(2014, 6, 15, 14, 30, tzinfo=timezone.utc), 'second': datetime.datetime(2014, 6, 15, 14, 30, 50, tzinfo=timezone.utc) } TimeField truncation ¶ class TruncHour ( expression , output_field = None , tzinfo = None , ** extra ) [source] kind = 'hour' class TruncMinute ( expression , output_field = None , tzinfo = None , ** extra ) [source] kind = 'minute' class TruncSecond ( expression , output_field = None , tzinfo = None , ** extra ) [source] kind = 'second' These are logically equivalent to Trunc('time_field', kind) . They truncate\nall parts of the time up to kind which allows grouping or filtering times\nwith less precision. expression can have an output_field of either TimeField or DateTimeField . Since TimeField s don’t have a date component, only Trunc subclasses\nthat deal with time-parts can be used with TimeField : >>> from datetime import datetime , timezone >>> from django.db.models import Count , TimeField >>> from django.db.models.functions import TruncHour >>> start1 = datetime ( 2014 , 6 , 15 , 14 , 30 , 50 , 321 , tzinfo = timezone . utc ) >>> start2 = datetime ( 2014 , 6 , 15 , 14 , 40 , 2 , 123 , tzinfo = timezone . utc ) >>> start3 = datetime ( 2015 , 12 , 31 , 17 , 5 , 27 , 999 , tzinfo = timezone . utc ) >>> Experiment . objects . create ( start_datetime = start1 , start_time = start1 . time ()) >>> Experiment . objects . create ( start_datetime = start2 , start_time = start2 . time ()) >>> Experiment . objects . create ( start_datetime = start3 , start_time = start3 . time ()) >>> experiments_per_hour = ( ... Experiment . objects . annotate ( ... hour = TruncHour ( \"start_datetime\" , output_field = TimeField ()), ... ) ... . values ( \"hour\" ) ... . annotate ( experiments = Count ( \"id\" )) ... ) >>> for exp in experiments_per_hour : ... print ( exp [ \"hour\" ], exp [ \"experiments\" ]) ... 14:00:00 2 17:00:00 1 >>> import zoneinfo >>> melb = zoneinfo . ZoneInfo ( \"Australia/Melbourne\" ) >>> experiments_per_hour = ( ... Experiment . objects . annotate ( ... hour = TruncHour ( \"start_datetime\" , tzinfo = melb ), ... ) ... . values ( \"hour\" ) ... . annotate ( experiments = Count ( \"id\" )) ... ) >>> for exp in experiments_per_hour : ... print ( exp [ \"hour\" ], exp [ \"experiments\" ]) ... 2014-06-16 00:00:00+10:00 2 2016-01-01 04:00:00+11:00 1 Math Functions ¶ We’ll be using the following model in math function examples: class Vector ( models . Model ): x = models . FloatField () y = models . FloatField () Abs ¶ class Abs ( expression , ** extra ) [source] ¶ Returns the absolute value of a numeric field or expression. Usage example: >>> from django.db.models.functions import Abs >>> Vector . objects . create ( x =- 0.5 , y = 1.1 ) >>> vector = Vector . objects . annotate ( x_abs = Abs ( \"x\" ), y_abs = Abs ( \"y\" )) . get () >>> vector . x_abs , vector . y_abs (0.5, 1.1) It can also be registered as a transform. For example: >>> from django.db.models import FloatField >>> from django.db.models.functions import Abs >>> FloatField . register_lookup ( Abs ) >>> # Get vectors inside the unit cube >>> vectors = Vector . objects . filter ( x__abs__lt = 1 , y__abs__lt = 1 ) ACos ¶ class ACos ( expression , ** extra ) [source] ¶ Returns the arccosine of a numeric field or expression. The expression value\nmust be within the range -1 to 1. Usage example: >>> from django.db.models.functions import ACos >>> Vector . objects . create ( x = 0.5 , y =- 0.9 ) >>> vector = Vector . objects . annotate ( x_acos = ACos ( \"x\" ), y_acos = ACos ( \"y\" )) . get () >>> vector . x_acos , vector . y_acos (1.0471975511965979, 2.6905658417935308) It can also be registered as a transform. For example: >>> from django.db.models import FloatField >>> from django.db.models.functions import ACos >>> FloatField . register_lookup ( ACos ) >>> # Get vectors whose arccosine is less than 1 >>> vectors = Vector . objects . filter ( x__acos__lt = 1 , y__acos__lt = 1 ) ASin ¶ class ASin ( expression , ** extra ) [source] ¶ Returns the arcsine of a numeric field or expression. The expression value must\nbe in the range -1 to 1. Usage example: >>> from django.db.models.functions import ASin >>> Vector . objects . create ( x = 0 , y = 1 ) >>> vector = Vector . objects . annotate ( x_asin = ASin ( \"x\" ), y_asin = ASin ( \"y\" )) . get () >>> vector . x_asin , vector . y_asin (0.0, 1.5707963267948966) It can also be registered as a transform. For example: >>> from django.db.models import FloatField >>> from django.db.models.functions import ASin >>> FloatField . register_lookup ( ASin ) >>> # Get vectors whose arcsine is less than 1 >>> vectors = Vector . objects . filter ( x__asin__lt = 1 , y__asin__lt = 1 ) ATan ¶ class ATan ( expression , ** extra ) [source] ¶ Returns the arctangent of a numeric field or expression. Usage example: >>> from django.db.models.functions import ATan >>> Vector . objects . create ( x = 3.12 , y = 6.987 ) >>> vector = Vector . objects . annotate ( x_atan = ATan ( \"x\" ), y_atan = ATan ( \"y\" )) . get () >>> vector . x_atan , vector . y_atan (1.2606282660069106, 1.428638798133829) It can also be registered as a transform. For example: >>> from django.db.models import FloatField >>> from django.db.models.functions import ATan >>> FloatField . register_lookup ( ATan ) >>> # Get vectors whose arctangent is less than 2 >>> vectors = Vector . objects . filter ( x__atan__lt = 2 , y__atan__lt = 2 ) ATan2 ¶ class ATan2 ( expression1 , expression2 , ** extra ) [source] ¶ Returns the arctangent of expression1 / expression2 . Usage example: >>> from django.db.models.functions import ATan2 >>> Vector . objects . create ( x = 2.5 , y = 1.9 ) >>> vector = Vector . objects . annotate ( atan2 = ATan2 ( \"x\" , \"y\" )) . get () >>> vector . atan2 0.9209258773829491 Ceil ¶ class Ceil ( expression , ** extra ) [source] ¶ Returns the smallest integer greater than or equal to a numeric field or\nexpression. Usage example: >>> from django.db.models.functions import Ceil >>> Vector . objects . create ( x = 3.12 , y = 7.0 ) >>> vector = Vector . objects . annotate ( x_ceil = Ceil ( \"x\" ), y_ceil = Ceil ( \"y\" )) . get () >>> vector . x_ceil , vector . y_ceil (4.0, 7.0) It can also be registered as a transform. For example: >>> from django.db.models import FloatField >>> from django.db.models.functions import Ceil >>> FloatField . register_lookup ( Ceil ) >>> # Get vectors whose ceil is less than 10 >>> vectors = Vector . objects . filter ( x__ceil__lt = 10 , y__ceil__lt = 10 ) Cos ¶ class Cos ( expression , ** extra ) [source] ¶ Returns the cosine  of a numeric field or expression. Usage example: >>> from django.db.models.functions import Cos >>> Vector . objects . create ( x =- 8.0 , y = 3.1415926 ) >>> vector = Vector . objects . annotate ( x_cos = Cos ( \"x\" ), y_cos = Cos ( \"y\" )) . get () >>> vector . x_cos , vector . y_cos (-0.14550003380861354, -0.9999999999999986) It can also be registered as a transform. For example: >>> from django.db.models import FloatField >>> from django.db.models.functions import Cos >>> FloatField . register_lookup ( Cos ) >>> # Get vectors whose cosine is less than 0.5 >>> vectors = Vector . objects . filter ( x__cos__lt = 0.5 , y__cos__lt = 0.5 ) Cot ¶ class Cot ( expression , ** extra ) [source] ¶ Returns the cotangent of a numeric field or expression. Usage example: >>> from django.db.models.functions import Cot >>> Vector . objects . create ( x = 12.0 , y = 1.0 ) >>> vector = Vector . objects . annotate ( x_cot = Cot ( \"x\" ), y_cot = Cot ( \"y\" )) . get () >>> vector . x_cot , vector . y_cot (-1.5726734063976826, 0.642092615934331) It can also be registered as a transform. For example: >>> from django.db.models import FloatField >>> from django.db.models.functions import Cot >>> FloatField . register_lookup ( Cot ) >>> # Get vectors whose cotangent is less than 1 >>> vectors = Vector . objects . filter ( x__cot__lt = 1 , y__cot__lt = 1 ) Degrees ¶ class Degrees ( expression , ** extra ) [source] ¶ Converts a numeric field or expression from radians to degrees. Usage example: >>> from django.db.models.functions import Degrees >>> Vector . objects . create ( x =- 1.57 , y = 3.14 ) >>> vector = Vector . objects . annotate ( x_d = Degrees ( \"x\" ), y_d = Degrees ( \"y\" )) . get () >>> vector . x_d , vector . y_d (-89.95437383553924, 179.9087476710785) It can also be registered as a transform. For example: >>> from django.db.models import FloatField >>> from django.db.models.functions import Degrees >>> FloatField . register_lookup ( Degrees ) >>> # Get vectors whose degrees are less than 360 >>> vectors = Vector . objects . filter ( x__degrees__lt = 360 , y__degrees__lt = 360 ) Exp ¶ class Exp ( expression , ** extra ) [source] ¶ Returns the value of e (the natural logarithm base) raised to the power of\na numeric field or expression. Usage example: >>> from django.db.models.functions import Exp >>> Vector . objects . create ( x = 5.4 , y =- 2.0 ) >>> vector = Vector . objects . annotate ( x_exp = Exp ( \"x\" ), y_exp = Exp ( \"y\" )) . get () >>> vector . x_exp , vector . y_exp (221.40641620418717, 0.1353352832366127) It can also be registered as a transform. For example: >>> from django.db.models import FloatField >>> from django.db.models.functions import Exp >>> FloatField . register_lookup ( Exp ) >>> # Get vectors whose exp() is greater than 10 >>> vectors = Vector . objects . filter ( x__exp__gt = 10 , y__exp__gt = 10 ) Floor ¶ class Floor ( expression , ** extra ) [source] ¶ Returns the largest integer value not greater than a numeric field or\nexpression. Usage example: >>> from django.db.models.functions import Floor >>> Vector . objects . create ( x = 5.4 , y =- 2.3 ) >>> vector = Vector . objects . annotate ( x_floor = Floor ( \"x\" ), y_floor = Floor ( \"y\" )) . get () >>> vector . x_floor , vector . y_floor (5.0, -3.0) It can also be registered as a transform. For example: >>> from django.db.models import FloatField >>> from django.db.models.functions import Floor >>> FloatField . register_lookup ( Floor ) >>> # Get vectors whose floor() is greater than 10 >>> vectors = Vector . objects . filter ( x__floor__gt = 10 , y__floor__gt = 10 ) Ln ¶ class Ln ( expression , ** extra ) [source] ¶ Returns the natural logarithm a numeric field or expression. Usage example: >>> from django.db.models.functions import Ln >>> Vector . objects . create ( x = 5.4 , y = 233.0 ) >>> vector = Vector . objects . annotate ( x_ln = Ln ( \"x\" ), y_ln = Ln ( \"y\" )) . get () >>> vector . x_ln , vector . y_ln (1.6863989535702288, 5.4510384535657) It can also be registered as a transform. For example: >>> from django.db.models import FloatField >>> from django.db.models.functions import Ln >>> FloatField . register_lookup ( Ln ) >>> # Get vectors whose value greater than e >>> vectors = Vector . objects . filter ( x__ln__gt = 1 , y__ln__gt = 1 ) Log ¶ class Log ( expression1 , expression2 , ** extra ) [source] ¶ Accepts two numeric fields or expressions and returns the logarithm of\nthe second to base of the first. Usage example: >>> from django.db.models.functions import Log >>> Vector . objects . create ( x = 2.0 , y = 4.0 ) >>> vector = Vector . objects . annotate ( log = Log ( \"x\" , \"y\" )) . get () >>> vector . log 2.0 Mod ¶ class Mod ( expression1 , expression2 , ** extra ) [source] ¶ Accepts two numeric fields or expressions and returns the remainder of\nthe first divided by the second (modulo operation). Usage example: >>> from django.db.models.functions import Mod >>> Vector . objects . create ( x = 5.4 , y = 2.3 ) >>> vector = Vector . objects . annotate ( mod = Mod ( \"x\" , \"y\" )) . get () >>> vector . mod 0.8 Pi ¶ class Pi ( ** extra ) [source] ¶ Returns the value of the mathematical constant π . Power ¶ class Power ( expression1 , expression2 , ** extra ) [source] ¶ Accepts two numeric fields or expressions and returns the value of the first\nraised to the power of the second. Usage example: >>> from django.db.models.functions import Power >>> Vector . objects . create ( x = 2 , y =- 2 ) >>> vector = Vector . objects . annotate ( power = Power ( \"x\" , \"y\" )) . get () >>> vector . power 0.25 Radians ¶ class Radians ( expression , ** extra ) [source] ¶ Converts a numeric field or expression from degrees to radians. Usage example: >>> from django.db.models.functions import Radians >>> Vector . objects . create ( x =- 90 , y = 180 ) >>> vector = Vector . objects . annotate ( x_r = Radians ( \"x\" ), y_r = Radians ( \"y\" )) . get () >>> vector . x_r , vector . y_r (-1.5707963267948966, 3.141592653589793) It can also be registered as a transform. For example: >>> from django.db.models import FloatField >>> from django.db.models.functions import Radians >>> FloatField . register_lookup ( Radians ) >>> # Get vectors whose radians are less than 1 >>> vectors = Vector . objects . filter ( x__radians__lt = 1 , y__radians__lt = 1 ) Random ¶ class Random ( ** extra ) [source] ¶ Returns a random value in the range 0.0 ≤ x < 1.0 . Round ¶ class Round ( expression , precision = 0 , ** extra ) [source] ¶ Rounds a numeric field or expression to precision (must be an integer)\ndecimal places. By default, it rounds to the nearest integer. Whether half\nvalues are rounded up or down depends on the database. Usage example: >>> from django.db.models.functions import Round >>> Vector . objects . create ( x = 5.4 , y =- 2.37 ) >>> vector = Vector . objects . annotate ( x_r = Round ( \"x\" ), y_r = Round ( \"y\" , precision = 1 )) . get () >>> vector . x_r , vector . y_r (5.0, -2.4) It can also be registered as a transform. For example: >>> from django.db.models import FloatField >>> from django.db.models.functions import Round >>> FloatField . register_lookup ( Round ) >>> # Get vectors whose round() is less than 20 >>> vectors = Vector . objects . filter ( x__round__lt = 20 , y__round__lt = 20 ) Sign ¶ class Sign ( expression , ** extra ) [source] ¶ Returns the sign (-1, 0, 1) of a numeric field or expression. Usage example: >>> from django.db.models.functions import Sign >>> Vector . objects . create ( x = 5.4 , y =- 2.3 ) >>> vector = Vector . objects . annotate ( x_sign = Sign ( \"x\" ), y_sign = Sign ( \"y\" )) . get () >>> vector . x_sign , vector . y_sign (1, -1) It can also be registered as a transform. For example: >>> from django.db.models import FloatField >>> from django.db.models.functions import Sign >>> FloatField . register_lookup ( Sign ) >>> # Get vectors whose signs of components are less than 0. >>> vectors = Vector . objects . filter ( x__sign__lt = 0 , y__sign__lt = 0 ) Sin ¶ class Sin ( expression , ** extra ) [source] ¶ Returns the sine of a numeric field or expression. Usage example: >>> from django.db.models.functions import Sin >>> Vector . objects . create ( x = 5.4 , y =- 2.3 ) >>> vector = Vector . objects . annotate ( x_sin = Sin ( \"x\" ), y_sin = Sin ( \"y\" )) . get () >>> vector . x_sin , vector . y_sin (-0.7727644875559871, -0.7457052121767203) It can also be registered as a transform. For example: >>> from django.db.models import FloatField >>> from django.db.models.functions import Sin >>> FloatField . register_lookup ( Sin ) >>> # Get vectors whose sin() is less than 0 >>> vectors = Vector . objects . filter ( x__sin__lt = 0 , y__sin__lt = 0 ) Sqrt ¶ class Sqrt ( expression , ** extra ) [source] ¶ Returns the square root of a nonnegative numeric field or expression. Usage example: >>> from django.db.models.functions import Sqrt >>> Vector . objects . create ( x = 4.0 , y = 12.0 ) >>> vector = Vector . objects . annotate ( x_sqrt = Sqrt ( \"x\" ), y_sqrt = Sqrt ( \"y\" )) . get () >>> vector . x_sqrt , vector . y_sqrt (2.0, 3.46410) It can also be registered as a transform. For example: >>> from django.db.models import FloatField >>> from django.db.models.functions import Sqrt >>> FloatField . register_lookup ( Sqrt ) >>> # Get vectors whose sqrt() is less than 5 >>> vectors = Vector . objects . filter ( x__sqrt__lt = 5 , y__sqrt__lt = 5 ) Tan ¶ class Tan ( expression , ** extra ) [source] ¶ Returns the tangent of a numeric field or expression. Usage example: >>> from django.db.models.functions import Tan >>> Vector . objects . create ( x = 0 , y = 12 ) >>> vector = Vector . objects . annotate ( x_tan = Tan ( \"x\" ), y_tan = Tan ( \"y\" )) . get () >>> vector . x_tan , vector . y_tan (0.0, -0.6358599286615808) It can also be registered as a transform. For example: >>> from django.db.models import FloatField >>> from django.db.models.functions import Tan >>> FloatField . register_lookup ( Tan ) >>> # Get vectors whose tangent is less than 0 >>> vectors = Vector . objects . filter ( x__tan__lt = 0 , y__tan__lt = 0 ) Text functions ¶ Chr ¶ class Chr ( expression , ** extra ) [source] ¶ Accepts a numeric field or expression and returns the text representation of\nthe expression as a single character. It works the same as Python’s chr() function. Like Length , it can be registered as a transform on IntegerField .\nThe default lookup name is chr . Usage example: >>> from django.db.models.functions import Chr >>> Author . objects . create ( name = \"Margaret Smith\" ) >>> author = Author . objects . filter ( name__startswith = Chr ( ord ( \"M\" ))) . get () >>> print ( author . name ) Margaret Smith Concat ¶ class Concat ( * expressions , ** extra ) [source] ¶ Accepts a list of at least two text fields or expressions and returns the\nconcatenated text. Each argument must be of a text or char type. If you want\nto concatenate a TextField() with a CharField() , then be sure to tell\nDjango that the output_field should be a TextField() . Specifying an output_field is also required when concatenating a Value as in the\nexample below. This function will never have a null result. On backends where a null argument\nresults in the entire expression being null, Django will ensure that each null\npart is converted to an empty string first. Usage example: >>> # Get the display name as \"name (goes_by)\" >>> from django.db.models import CharField , Value as V >>> from django.db.models.functions import Concat >>> Author . objects . create ( name = \"Margaret Smith\" , goes_by = \"Maggie\" ) >>> author = Author . objects . annotate ( ... screen_name = Concat ( \"name\" , V ( \" (\" ), \"goes_by\" , V ( \")\" ), output_field = CharField ()) ... ) . get () >>> print ( author . screen_name ) Margaret Smith (Maggie) Left ¶ class Left ( expression , length , ** extra ) [source] ¶ Returns the first length characters of the given text field or expression. Usage example: >>> from django.db.models.functions import Left >>> Author . objects . create ( name = \"Margaret Smith\" ) >>> author = Author . objects . annotate ( first_initial = Left ( \"name\" , 1 )) . get () >>> print ( author . first_initial ) M Length ¶ class Length ( expression , ** extra ) [source] ¶ Accepts a single text field or expression and returns the number of characters\nthe value has. If the expression is null, then the length will also be null. Usage example: >>> # Get the length of the name and goes_by fields >>> from django.db.models.functions import Length >>> Author . objects . create ( name = \"Margaret Smith\" ) >>> author = Author . objects . annotate ( ... name_length = Length ( \"name\" ), goes_by_length = Length ( \"goes_by\" ) ... ) . get () >>> print ( author . name_length , author . goes_by_length ) (14, None) It can also be registered as a transform. For example: >>> from django.db.models import CharField >>> from django.db.models.functions import Length >>> CharField . register_lookup ( Length ) >>> # Get authors whose name is longer than 7 characters >>> authors = Author . objects . filter ( name__length__gt = 7 ) Lower ¶ class Lower ( expression , ** extra ) [source] ¶ Accepts a single text field or expression and returns the lowercase\nrepresentation. It can also be registered as a transform as described in Length . Usage example: >>> from django.db.models.functions import Lower >>> Author . objects . create ( name = \"Margaret Smith\" ) >>> author = Author . objects . annotate ( name_lower = Lower ( \"name\" )) . get () >>> print ( author . name_lower ) margaret smith LPad ¶ class LPad ( expression , length , fill_text = Value(' ') , ** extra ) [source] ¶ Returns the value of the given text field or expression padded on the left side\nwith fill_text so that the resulting value is length characters long.\nThe default fill_text is a space. Usage example: >>> from django.db.models import Value >>> from django.db.models.functions import LPad >>> Author . objects . create ( name = \"John\" , alias = \"j\" ) >>> Author . objects . update ( name = LPad ( \"name\" , 8 , Value ( \"abc\" ))) 1 >>> print ( Author . objects . get ( alias = \"j\" ) . name ) abcaJohn LTrim ¶ class LTrim ( expression , ** extra ) [source] ¶ Similar to Trim , but removes only leading\nspaces. MD5 ¶ class MD5 ( expression , ** extra ) [source] ¶ Accepts a single text field or expression and returns the MD5 hash of the\nstring. It can also be registered as a transform as described in Length . Usage example: >>> from django.db.models.functions import MD5 >>> Author . objects . create ( name = \"Margaret Smith\" ) >>> author = Author . objects . annotate ( name_md5 = MD5 ( \"name\" )) . get () >>> print ( author . name_md5 ) 749fb689816b2db85f5b169c2055b247 Ord ¶ class Ord ( expression , ** extra ) [source] ¶ Accepts a single text field or expression and returns the Unicode code point\nvalue for the first character of that expression. It works similar to Python’s ord() function, but an exception isn’t raised if the expression is more\nthan one character long. It can also be registered as a transform as described in Length .\nThe default lookup name is ord . Usage example: >>> from django.db.models.functions import Ord >>> Author . objects . create ( name = \"Margaret Smith\" ) >>> author = Author . objects . annotate ( name_code_point = Ord ( \"name\" )) . get () >>> print ( author . name_code_point ) 77 Repeat ¶ class Repeat ( expression , number , ** extra ) [source] ¶ Returns the value of the given text field or expression repeated number times. Usage example: >>> from django.db.models.functions import Repeat >>> Author . objects . create ( name = \"John\" , alias = \"j\" ) >>> Author . objects . update ( name = Repeat ( \"name\" , 3 )) 1 >>> print ( Author . objects . get ( alias = \"j\" ) . name ) JohnJohnJohn Replace ¶ class Replace ( expression , text , replacement = Value('') , ** extra ) [source] ¶ Replaces all occurrences of text with replacement in expression .\nThe default replacement text is the empty string. The arguments to the function\nare case-sensitive. Usage example: >>> from django.db.models import Value >>> from django.db.models.functions import Replace >>> Author . objects . create ( name = \"Margaret Johnson\" ) >>> Author . objects . create ( name = \"Margaret Smith\" ) >>> Author . objects . update ( name = Replace ( \"name\" , Value ( \"Margaret\" ), Value ( \"Margareth\" ))) 2 >>> Author . objects . values ( \"name\" ) <QuerySet [{'name': 'Margareth Johnson'}, {'name': 'Margareth Smith'}]> Reverse ¶ class Reverse ( expression , ** extra ) [source] ¶ Accepts a single text field or expression and returns the characters of that\nexpression in reverse order. It can also be registered as a transform as described in Length . The\ndefault lookup name is reverse . Usage example: >>> from django.db.models.functions import Reverse >>> Author . objects . create ( name = \"Margaret Smith\" ) >>> author = Author . objects . annotate ( backward = Reverse ( \"name\" )) . get () >>> print ( author . backward ) htimS teragraM Right ¶ class Right ( expression , length , ** extra ) [source] ¶ Returns the last length characters of the given text field or expression. Usage example: >>> from django.db.models.functions import Right >>> Author . objects . create ( name = \"Margaret Smith\" ) >>> author = Author . objects . annotate ( last_letter = Right ( \"name\" , 1 )) . get () >>> print ( author . last_letter ) h RPad ¶ class RPad ( expression , length , fill_text = Value(' ') , ** extra ) [source] ¶ Similar to LPad , but pads on the right\nside. RTrim ¶ class RTrim ( expression , ** extra ) [source] ¶ Similar to Trim , but removes only trailing\nspaces. SHA1 , SHA224 , SHA256 , SHA384 , and SHA512 ¶ class SHA1 ( expression , ** extra ) [source] ¶ class SHA224 ( expression , ** extra ) [source] ¶ class SHA256 ( expression , ** extra ) [source] ¶ class SHA384 ( expression , ** extra ) [source] ¶ class SHA512 ( expression , ** extra ) [source] ¶ Accepts a single text field or expression and returns the particular hash of\nthe string. They can also be registered as transforms as described in Length . Usage example: >>> from django.db.models.functions import SHA1 >>> Author . objects . create ( name = \"Margaret Smith\" ) >>> author = Author . objects . annotate ( name_sha1 = SHA1 ( \"name\" )) . get () >>> print ( author . name_sha1 ) b87efd8a6c991c390be5a68e8a7945a7851c7e5c PostgreSQL The pgcrypto extension must be installed. You can use the CryptoExtension migration\noperation to install it. Oracle Oracle doesn’t support the SHA224 function. StrIndex ¶ class StrIndex ( string , substring , ** extra ) [source] ¶ Returns a positive integer corresponding to the 1-indexed position of the first\noccurrence of substring inside string , or 0 if substring is not\nfound. Usage example: >>> from django.db.models import Value as V >>> from django.db.models.functions import StrIndex >>> Author . objects . create ( name = \"Margaret Smith\" ) >>> Author . objects . create ( name = \"Smith, Margaret\" ) >>> Author . objects . create ( name = \"Margaret Jackson\" ) >>> Author . objects . filter ( name = \"Margaret Jackson\" ) . annotate ( ... smith_index = StrIndex ( \"name\" , V ( \"Smith\" )) ... ) . get () . smith_index 0 >>> authors = Author . objects . annotate ( smith_index = StrIndex ( \"name\" , V ( \"Smith\" ))) . filter ( ... smith_index__gt = 0 ... ) <QuerySet [<Author: Margaret Smith>, <Author: Smith, Margaret>]> Warning In MySQL, a database table’s collation determines\nwhether string comparisons (such as the expression and substring of\nthis function) are case-sensitive. Comparisons are case-insensitive by\ndefault. Substr ¶ class Substr ( expression , pos , length = None , ** extra ) [source] ¶ Returns a substring of length length from the field or expression starting\nat position pos . The position is 1-indexed, so the position must be greater\nthan 0. If length is None , then the rest of the string will be returned. Usage example: >>> # Set the alias to the first 5 characters of the name as lowercase >>> from django.db.models.functions import Lower , Substr >>> Author . objects . create ( name = \"Margaret Smith\" ) >>> Author . objects . update ( alias = Lower ( Substr ( \"name\" , 1 , 5 ))) 1 >>> print ( Author . objects . get ( name = \"Margaret Smith\" ) . alias ) marga Trim ¶ class Trim ( expression , ** extra ) [source] ¶ Returns the value of the given text field or expression with leading and\ntrailing spaces removed. Usage example: >>> from django.db.models.functions import Trim >>> Author . objects . create ( name = \"  John  \" , alias = \"j\" ) >>> Author . objects . update ( name = Trim ( \"name\" )) 1 >>> print ( Author . objects . get ( alias = \"j\" ) . name ) John Upper ¶ class Upper ( expression , ** extra ) [source] ¶ Accepts a single text field or expression and returns the uppercase\nrepresentation. It can also be registered as a transform as described in Length . Usage example: >>> from django.db.models.functions import Upper >>> Author . objects . create ( name = \"Margaret Smith\" ) >>> author = Author . objects . annotate ( name_upper = Upper ( \"name\" )) . get () >>> print ( author . name_upper ) MARGARET SMITH Window functions ¶ There are a number of functions to use in a Window expression for computing the rank\nof elements or the Ntile of some rows. CumeDist ¶ class CumeDist ( * expressions , ** extra ) [source] ¶ Calculates the cumulative distribution of a value within a window or partition.\nThe cumulative distribution is defined as the number of rows preceding or\npeered with the current row divided by the total number of rows in the frame. DenseRank ¶ class DenseRank ( * expressions , ** extra ) [source] ¶ Equivalent to Rank but does not have gaps. FirstValue ¶ class FirstValue ( expression , ** extra ) [source] ¶ Returns the value evaluated at the row that’s the first row of the window\nframe, or None if no such value exists. Lag ¶ class Lag ( expression , offset = 1 , default = None , ** extra ) [source] ¶ Calculates the value offset by offset , and if no row exists there, returns default . default must have the same type as the expression , however, this is\nonly validated by the database and not in Python. MariaDB and default MariaDB doesn’t support the default parameter. LastValue ¶ class LastValue ( expression , ** extra ) [source] ¶ Comparable to FirstValue , it calculates the last value in a given\nframe clause. Lead ¶ class Lead ( expression , offset = 1 , default = None , ** extra ) [source] ¶ Calculates the leading value in a given frame . Both offset and default are evaluated with respect to the current row. default must have the same type as the expression , however, this is\nonly validated by the database and not in Python. MariaDB and default MariaDB doesn’t support the default parameter. NthValue ¶ class NthValue ( expression , nth = 1 , ** extra ) [source] ¶ Computes the row relative to the offset nth (must be a positive value)\nwithin the window. Returns None if no row exists. Some databases may handle a nonexistent nth-value differently. For example,\nOracle returns an empty string rather than None for character-based\nexpressions. Django doesn’t do any conversions in these cases. Ntile ¶ class Ntile ( num_buckets = 1 , ** extra ) [source] ¶ Calculates a partition for each of the rows in the frame clause, distributing\nnumbers as evenly as possible between 1 and num_buckets . If the rows don’t\ndivide evenly into a number of buckets, one or more buckets will be represented\nmore frequently. PercentRank ¶ class PercentRank ( * expressions , ** extra ) [source] ¶ Computes the relative rank of the rows in the frame clause. This computation is\nequivalent to evaluating: (rank - 1) / (total rows - 1) The following table explains the calculation for the relative rank of a row: Row # Value Rank Calculation Relative Rank 1 15 1 (1-1)/(7-1) 0.0000 2 20 2 (2-1)/(7-1) 0.1666 3 20 2 (2-1)/(7-1) 0.1666 4 20 2 (2-1)/(7-1) 0.1666 5 30 5 (5-1)/(7-1) 0.6666 6 30 5 (5-1)/(7-1) 0.6666 7 40 7 (7-1)/(7-1) 1.0000 Rank ¶ class Rank ( * expressions , ** extra ) [source] ¶ Comparable to RowNumber , this function ranks rows in the window. The\ncomputed rank contains gaps. Use DenseRank to compute rank without\ngaps. RowNumber ¶ class RowNumber ( * expressions , ** extra ) [source] ¶ Computes the row number according to the ordering of either the frame clause\nor the ordering of the whole query if there is no partitioning of the window frame .", "keywords": ["lower", "comments", "maggie", "y__sin__lt", "type", "asin", "179.9087476710785", "start1", "round", "majority", "timefield", "rows", "logarithm", "x_asin", "distribution", "arcsine", "x__cos__lt", "pgcrypto", "x__ceil__lt", "m", "classes", "null", "day", "sha384", "authors", "use", "right", "lastvalue", "cot", "equivalent", "+10:00", "-3.0", "teragram", "way", "experiments_per_hour", "filters", "default", "-0.6358599286615808", "least", "x__asin__lt", "substr", "name_lower", "y_abs", "abs", "kind", "age", "experiments_per_month", "y_atan", "users", "char", "nthvalue", "radians", "concat", "argument", "converts", "jsonobject", "trunc", "strindex", "truncday", "sine", "integer", "truncweek", "start_day", "cumedist", "month", "x", "extractday", "comment", "start", "trunchour", "cosine", "cotangent", "e", "b87efd8a6c991c390be5a68e8a7945a7851c7e5c", "name", "experiments", "monday", "trunc('time_field", "start_date", "chr", "truncsecond", "space", "weekday", "python", "charfield", "addition", "sunday", "transactionnow", "johnson", "trunc('date_field", "y_sin", "atan2", "subclass", "zoneinfo", "lookup", "migration", "occurrences", "partitioning", "smith", "isoweekday", "display", "y__exp__gt", "smith_index", "*", "end_date", "x__sin__lt", "lookup_name", "minute", "nth", "mod", "isoyear", "annotate", "sales", "unicode", "goes_by", "operation", "register_lookup", "repeat", "length", "end_datetime", "exp", "truncates", "frame", "alias", "issues", "y__abs__lt", "modulo", "y__tan__lt", "extractminute", "characters", "tan", "error", "sha1", "margareth", "forces", "datetime", "zoneinfo('australia", "%", "x__round__lt", "order", "-", "lookup_name='year", "+11:00", "comparisons", "pairs", "remainder", "order_by", "π", "australia", "table", "thursday", "behavior", "grouping", "rest", "abc", "et", "query", "mariadb", "following", "import", "jackson", "h", "respect", "'", "truncquarter", "datefield", "veronika", "trunc('datetime_field", "x_exp", "json", "article", "result", "#", "point", "collate", "versions", "¶", "start3", "end_time", "varies", "iso-8601", "server", "auto_now", "extractsecond", "example", "ordering", "unit", "year", "functions", "value", "source", "firstvalue", "backward", "transforms", "replacement", "offset", "behaves", "print", "start_datetime", "position", "blog", "math", "melb", "y_tan", "examples", "experiments_per_year", "749fb689816b2db85f5b169c2055b247", "johnjohnjohn", "override", "sqrt", "hood", "object", "root", "warning", "hash", "postgresql", "one", "comparison", "durationfield", "returns", "window", "verbose", "conversion", "x__exp__gt", "tzinfo", "x_tan", "x__floor__gt", "django.contrib.postgres.functions", "truncdate", "y__floor__gt", "dates", "pi", "acos", "numbering", "ceil", "rtrim", "django", "days", "parameter", "start2", "y__ln__gt", "text", "x_acos", "rpad", "field", "daylight", "aggregations", "integerfield", "x__ln__gt", "ntile", "coalesce", "extracthour", "=", "lead", "objects", "pos", "django.db.models.functions", "cryptoextension", "value(none", "arccosine", "-89.95437383553924", "relative", "truncminute", "expression2", "+", "name__length__gt", "truncation", "utc", "mysql", "datetimes", "utc+10:00", "truncyear", "quarter", "age_as_float", "range", "total", "y__sign__lt", "nullif", "degrees", "sha224", "places", "json_object", "-0.14550003380861354", "time", "-2.4", "exception", "count", "name_md5", "oracle", "queryset", "lowercase", "d", "calculates", "tangent", "y_sqrt", "icu", "saturday", "extractquarter", "subclasses", "week_day", "john", "expression1", "occurrence", "abcajohn", "cube", "atan", "fields", "y_ln", "x__acos__lt", "collation", "f", "side", "x_cos", "update", "floatfield", "none", "y__cot__lt", "base", "percentrank", ">", "x__abs__lt", "considerations", "component", "convention", "upper", "end", "week", "y_asin", "lpad", "y__ceil__lt", "screen", "data", "-0.9999999999999986", "goes_by_length", "truncmonth", "filtering", "y_exp", "extractyear", "y__radians__lt", "s", "sql", "author", "extractmonth", "extractweekday", "x__degrees__lt", "cast", "django.utils", "extractweek", "x_sign", "cos", "elements", "experiment", "in", "pads", "backends", "arguments", "x__radians__lt", "lookup_type", "screen_name", "models", "start_time", "ord", "caveats", "extractisoweekday", "arctangent", "row", "fill_text", "x__cot__lt", "log", "replace", "v", "ln", "similar", "sum", "substring", "vector", "combined_age_default", "x_sin", "filter", "y__round__lt", "rownumber", "combined_age_coalesce", "md5", "midnight", "_", "floor", "values", "x_ln", "cases", "y_cos", "rank", "times", "left", "j", "extractisoyear", "sha512", "conversions", "gaps", "annotations", "localtimestamp", "compatibility", "vectors", "spaces", "published__lte", "signs", "timezone", "precision", "usage", "output_field", "transaction", "sin", "x__sqrt__lt", "model", "computation", "x_cot", "max_length", "trim", "y", "character", "lag", "experiments_per_day", "x__atan__lt", "results", "name_length", "msmith", "use_tz", "end_datetime__year", "second", "n’t", "sqlite", "case", "class", "number", "components", "x__tan__lt", "numbers", "trunctime", "x_abs", "return", "ülle", "y__cos__lt", "function", "string", "list", "uppercase", "replaces", "start_2015", "parts", "i", "body", "datetimefield", "≤", "extension", "priority", "part", "sha256", "smith_index__gt", "melbourne", "num_buckets", "calculation", "random", "sign", "margaret", "name_sha1", "saving", "denserank", "ursula", "y__atan__lt", "greatest", "names", "truncate", "start_datetime__year", "first_initial", "clause", "iso_week_day", "expressions", "extract", "extracts", "representation", "buckets", "date", "combined_age", "ltrim", "textfield", "foreignkey", "database", "reverse", "transform", "databases", "expression", "hour", "code", "y_ceil", "name_code_point", "partition", "-0.7457052121767203", "timestamp", "power"], "type": "documentation"},
{"title": "Conditional Expressions", "url": "https://docs.djangoproject.com/en/5.1/ref/models/conditional-expressions/", "content": "Conditional Expressions ¶ Conditional expressions let you use if … elif … else logic within filters, annotations, aggregations, and updates. A\nconditional expression evaluates a series of conditions for each row of a\ntable and returns the matching result expression. Conditional expressions can\nalso be combined and nested like other expressions . The conditional expression classes ¶ We’ll be using the following model in the subsequent examples: from django.db import models class Client ( models . Model ): REGULAR = \"R\" GOLD = \"G\" PLATINUM = \"P\" ACCOUNT_TYPE_CHOICES = { REGULAR : \"Regular\" , GOLD : \"Gold\" , PLATINUM : \"Platinum\" , } name = models . CharField ( max_length = 50 ) registered_on = models . DateField () account_type = models . CharField ( max_length = 1 , choices = ACCOUNT_TYPE_CHOICES , default = REGULAR , ) When ¶ class When ( condition = None , then = None , ** lookups ) [source] ¶ A When() object is used to encapsulate a condition and its result for use\nin the conditional expression. Using a When() object is similar to using\nthe filter() method. The condition can\nbe specified using field lookups , Q objects, or Expression objects that have an output_field that is a BooleanField . The result is provided using the then keyword. Some examples: >>> from django.db.models import F , Q , When >>> # String arguments refer to fields; the following two examples are equivalent: >>> When ( account_type = Client . GOLD , then = \"name\" ) >>> When ( account_type = Client . GOLD , then = F ( \"name\" )) >>> # You can use field lookups in the condition >>> from datetime import date >>> When ( ... registered_on__gt = date ( 2014 , 1 , 1 ), ... registered_on__lt = date ( 2015 , 1 , 1 ), ... then = \"account_type\" , ... ) >>> # Complex conditions can be created using Q objects >>> When ( Q ( name__startswith = \"John\" ) | Q ( name__startswith = \"Paul\" ), then = \"name\" ) >>> # Condition can be created using boolean expressions. >>> from django.db.models import Exists , OuterRef >>> non_unique_account_type = ( ... Client . objects . filter ( ... account_type = OuterRef ( \"account_type\" ), ... ) ... . exclude ( pk = OuterRef ( \"pk\" )) ... . values ( \"pk\" ) ... ) >>> When ( Exists ( non_unique_account_type ), then = Value ( \"non unique\" )) >>> # Condition can be created using lookup expressions. >>> from django.db.models.lookups import GreaterThan , LessThan >>> When ( ... GreaterThan ( F ( \"registered_on\" ), date ( 2014 , 1 , 1 )) ... & LessThan ( F ( \"registered_on\" ), date ( 2015 , 1 , 1 )), ... then = \"account_type\" , ... ) Keep in mind that each of these values can be an expression. Note Since the then keyword argument is reserved for the result of the When() , there is a potential conflict if a Model has a field named then . This can be\nresolved in two ways: >>> When ( then__exact = 0 , then = 1 ) >>> When ( Q ( then = 0 ), then = 1 ) Case ¶ class Case ( * cases , ** extra ) [source] ¶ A Case() expression is like the if … elif … else statement in Python . Each condition in the provided When() objects is evaluated in order, until one evaluates to a\ntruthful value. The result expression from the matching When() object\nis returned. An example: >>> >>> from datetime import date , timedelta >>> from django.db.models import Case , Value , When >>> Client . objects . create ( ... name = \"Jane Doe\" , ... account_type = Client . REGULAR , ... registered_on = date . today () - timedelta ( days = 36 ), ... ) >>> Client . objects . create ( ... name = \"James Smith\" , ... account_type = Client . GOLD , ... registered_on = date . today () - timedelta ( days = 5 ), ... ) >>> Client . objects . create ( ... name = \"Jack Black\" , ... account_type = Client . PLATINUM , ... registered_on = date . today () - timedelta ( days = 10 * 365 ), ... ) >>> # Get the discount for each Client based on the account type >>> Client . objects . annotate ( ... discount = Case ( ... When ( account_type = Client . GOLD , then = Value ( \"5%\" )), ... When ( account_type = Client . PLATINUM , then = Value ( \"10%\" )), ... default = Value ( \"0%\" ), ... ), ... ) . values_list ( \"name\" , \"discount\" ) <QuerySet [('Jane Doe', '0%'), ('James Smith', '5%'), ('Jack Black', '10%')]> Case() accepts any number of When() objects as individual arguments.\nOther options are provided using keyword arguments. If none of the conditions\nevaluate to TRUE , then the expression given with the default keyword\nargument is returned. If a default argument isn’t provided, None is\nused. If we wanted to change our previous query to get the discount based on how long\nthe Client has been with us, we could do so using lookups: >>> a_month_ago = date . today () - timedelta ( days = 30 ) >>> a_year_ago = date . today () - timedelta ( days = 365 ) >>> # Get the discount for each Client based on the registration date >>> Client . objects . annotate ( ... discount = Case ( ... When ( registered_on__lte = a_year_ago , then = Value ( \"10%\" )), ... When ( registered_on__lte = a_month_ago , then = Value ( \"5%\" )), ... default = Value ( \"0%\" ), ... ) ... ) . values_list ( \"name\" , \"discount\" ) <QuerySet [('Jane Doe', '5%'), ('James Smith', '0%'), ('Jack Black', '10%')]> Note Remember that the conditions are evaluated in order, so in the above\nexample we get the correct result even though the second condition matches\nboth Jane Doe and Jack Black. This works just like an if … elif … else statement in Python . Case() also works in a filter() clause. For example, to find gold\nclients that registered more than a month ago and platinum clients that\nregistered more than a year ago: >>> a_month_ago = date . today () - timedelta ( days = 30 ) >>> a_year_ago = date . today () - timedelta ( days = 365 ) >>> Client . objects . filter ( ... registered_on__lte = Case ( ... When ( account_type = Client . GOLD , then = a_month_ago ), ... When ( account_type = Client . PLATINUM , then = a_year_ago ), ... ), ... ) . values_list ( \"name\" , \"account_type\" ) <QuerySet [('Jack Black', 'P')]> Advanced queries ¶ Conditional expressions can be used in annotations, aggregations, filters,\nlookups, and updates. They can also be combined and nested with other\nexpressions. This allows you to make powerful conditional queries. Conditional update ¶ Let’s say we want to change the account_type for our clients to match\ntheir registration dates. We can do this using a conditional expression and the update() method: >>> a_month_ago = date . today () - timedelta ( days = 30 ) >>> a_year_ago = date . today () - timedelta ( days = 365 ) >>> # Update the account_type for each Client from the registration date >>> Client . objects . update ( ... account_type = Case ( ... When ( registered_on__lte = a_year_ago , then = Value ( Client . PLATINUM )), ... When ( registered_on__lte = a_month_ago , then = Value ( Client . GOLD )), ... default = Value ( Client . REGULAR ), ... ), ... ) >>> Client . objects . values_list ( \"name\" , \"account_type\" ) <QuerySet [('Jane Doe', 'G'), ('James Smith', 'R'), ('Jack Black', 'P')]> Conditional aggregation ¶ What if we want to find out how many clients there are for each account_type ? We can use the filter argument of aggregate\nfunctions to achieve this: >>> # Create some more Clients first so we can have something to count >>> Client . objects . create ( ... name = \"Jean Grey\" , account_type = Client . REGULAR , registered_on = date . today () ... ) >>> Client . objects . create ( ... name = \"James Bond\" , account_type = Client . PLATINUM , registered_on = date . today () ... ) >>> Client . objects . create ( ... name = \"Jane Porter\" , account_type = Client . PLATINUM , registered_on = date . today () ... ) >>> # Get counts for each value of account_type >>> from django.db.models import Count >>> Client . objects . aggregate ( ... regular = Count ( \"pk\" , filter = Q ( account_type = Client . REGULAR )), ... gold = Count ( \"pk\" , filter = Q ( account_type = Client . GOLD )), ... platinum = Count ( \"pk\" , filter = Q ( account_type = Client . PLATINUM )), ... ) {'regular': 2, 'gold': 1, 'platinum': 3} This aggregate produces a query with the SQL 2003 FILTER WHERE syntax\non databases that support it: SELECT count ( 'id' ) FILTER ( WHERE account_type = 1 ) as regular , count ( 'id' ) FILTER ( WHERE account_type = 2 ) as gold , count ( 'id' ) FILTER ( WHERE account_type = 3 ) as platinum FROM clients ; On other databases, this is emulated using a CASE statement: SELECT count ( CASE WHEN account_type = 1 THEN id ELSE null ) as regular , count ( CASE WHEN account_type = 2 THEN id ELSE null ) as gold , count ( CASE WHEN account_type = 3 THEN id ELSE null ) as platinum FROM clients ; The two SQL statements are functionally equivalent but the more explicit FILTER may perform better. Conditional filter ¶ When a conditional expression returns a boolean value, it is possible to use it\ndirectly in filters. This means that it will not be added to the SELECT columns, but you can still use it to filter results: >>> non_unique_account_type = ( ... Client . objects . filter ( ... account_type = OuterRef ( \"account_type\" ), ... ) ... . exclude ( pk = OuterRef ( \"pk\" )) ... . values ( \"pk\" ) ... ) >>> Client . objects . filter ( ~ Exists ( non_unique_account_type )) In SQL terms, that evaluates to: SELECT ... FROM client c0 WHERE NOT EXISTS ( SELECT c1 . id FROM client c1 WHERE c1 . account_type = c0 . account_type AND NOT c1 . id = c0 . id )", "keywords": ["counts", "non_unique_account_type", "statements", "gold", "type", "paul", "clients", "advanced", "statement", "p", "%", "order", "grey", "account_type_choices", "filter", "booleanfield", "pk", "regular", "aggregation", "count", "jean", "null", "q", "method", "queryset", "table", "g", "values", "d", "cases", "query", "use", "import", "james", "django.db.models.lookups", "registration", "ways", "datefield", "registered_on", "condition", "john", "today", "result", "annotations", "#", "fields", "c0", "¶", "filters", "default", "f", "client", "bond", "keyword", "update", "output_field", "then__exact", "model", "max_length", "none", "terms", "platinum", "when", "select", "registered_on__lte", "results", "jane", "mind", "example", "n’t", "year", "timedelta", "value", "functions", "conditional", "source", "case", "argument", "class", "number", "choices", "values_list", "columns", "outerref", "examples", "aggregate", "registered_on__lt", "django.db", "string", "series", "month", "a", "greaterthan", "lessthan", "matching", "exists", "registered_on__gt", "account_type", "name", "lookups", "object", "options", "i", "conflict", "queries", "python", "charfield", "r", "discount", "account", "jack", "lookup", "dates", "note", "sql", "conditions", "c1", "days", "clause", "|", "smith", "expressions", "else", "true", "syntax", "date", "*", "field", "arguments", "aggregations", "annotate", "databases", "expression", "porter", "logic", "black", "=", "models", "objects", "updates", "row", "doe"], "type": "documentation"},
{"title": "Query Expressions", "url": "https://docs.djangoproject.com/en/5.1/ref/models/expressions/", "content": "Query Expressions ¶ Query expressions describe a value or a computation that can be used as part of\nan update, create, filter, order by, annotation, or aggregate. When an\nexpression outputs a boolean value, it may be used directly in filters. There\nare a number of built-in expressions (documented below) that can be used to\nhelp you write queries. Expressions can be combined, or in some cases nested,\nto form more complex computations. Supported arithmetic ¶ Django supports negation, addition, subtraction, multiplication, division,\nmodulo arithmetic, and the power operator on query expressions, using Python\nconstants, variables, and even other expressions. Output field ¶ Many of the expressions documented in this section support an optional output_field parameter. If given, Django will load the value into that\nfield after retrieving it from the database. output_field takes a model field instance, like IntegerField() or BooleanField() . Usually, the field doesn’t need any arguments, like max_length , since field arguments relate to data validation which will not\nbe performed on the expression’s output value. output_field is only required when Django is unable to automatically\ndetermine the result’s field type, such as complex expressions that mix field\ntypes. For example, adding a DecimalField() and a FloatField() requires\nan output field, like output_field=FloatField() . Some examples ¶ >>> from django.db.models import Count , F , Value >>> from django.db.models.functions import Length , Upper >>> from django.db.models.lookups import GreaterThan # Find companies that have more employees than chairs. >>> Company . objects . filter ( num_employees__gt = F ( \"num_chairs\" )) # Find companies that have at least twice as many employees # as chairs. Both the querysets below are equivalent. >>> Company . objects . filter ( num_employees__gt = F ( \"num_chairs\" ) * 2 ) >>> Company . objects . filter ( num_employees__gt = F ( \"num_chairs\" ) + F ( \"num_chairs\" )) # How many chairs are needed for each company to seat all employees? >>> company = ( ... Company . objects . filter ( num_employees__gt = F ( \"num_chairs\" )) ... . annotate ( chairs_needed = F ( \"num_employees\" ) - F ( \"num_chairs\" )) ... . first () ... ) >>> company . num_employees 120 >>> company . num_chairs 50 >>> company . chairs_needed 70 # Create a new company using expressions. >>> company = Company . objects . create ( name = \"Google\" , ticker = Upper ( Value ( \"goog\" ))) # Be sure to refresh it if you need to access the field. >>> company . refresh_from_db () >>> company . ticker 'GOOG' # Annotate models with an aggregated value. Both forms # below are equivalent. >>> Company . objects . annotate ( num_products = Count ( \"products\" )) >>> Company . objects . annotate ( num_products = Count ( F ( \"products\" ))) # Aggregates can contain complex computations also >>> Company . objects . annotate ( num_offerings = Count ( F ( \"products\" ) + F ( \"services\" ))) # Expressions can also be used in order_by(), either directly >>> Company . objects . order_by ( Length ( \"name\" ) . asc ()) >>> Company . objects . order_by ( Length ( \"name\" ) . desc ()) # or using the double underscore lookup syntax. >>> from django.db.models import CharField >>> from django.db.models.functions import Length >>> CharField . register_lookup ( Length ) >>> Company . objects . order_by ( \"name__length\" ) # Boolean expression can be used directly in filters. >>> from django.db.models import Exists , OuterRef >>> Company . objects . filter ( ... Exists ( Employee . objects . filter ( company = OuterRef ( \"pk\" ), salary__gt = 10 )) ... ) # Lookup expressions can also be used directly in filters >>> Company . objects . filter ( GreaterThan ( F ( \"num_employees\" ), F ( \"num_chairs\" ))) # or annotations. >>> Company . objects . annotate ( ... need_chairs = GreaterThan ( F ( \"num_employees\" ), F ( \"num_chairs\" )), ... ) Built-in Expressions ¶ Note These expressions are defined in django.db.models.expressions and django.db.models.aggregates , but for convenience they’re available and\nusually imported from django.db.models . F() expressions ¶ class F [source] ¶ An F() object represents the value of a model field, transformed value of a\nmodel field, or annotated column. It makes it possible to refer to model field\nvalues and perform database operations using them without actually having to\npull them out of the database into Python memory. Instead, Django uses the F() object to generate an SQL expression that\ndescribes the required operation at the database level. Let’s try this with an example. Normally, one might do something like this: # Tintin filed a news story! reporter = Reporters . objects . get ( name = \"Tintin\" ) reporter . stories_filed += 1 reporter . save () Here, we have pulled the value of reporter.stories_filed from the database\ninto memory and manipulated it using familiar Python operators, and then saved\nthe object back to the database. But instead we could also have done: from django.db.models import F reporter = Reporters . objects . get ( name = \"Tintin\" ) reporter . stories_filed = F ( \"stories_filed\" ) + 1 reporter . save () Although reporter.stories_filed = F('stories_filed') + 1 looks like a\nnormal Python assignment of value to an instance attribute, in fact it’s an SQL\nconstruct describing an operation on the database. When Django encounters an instance of F() , it overrides the standard Python\noperators to create an encapsulated SQL expression; in this case, one which\ninstructs the database to increment the database field represented by reporter.stories_filed . Whatever value is or was on reporter.stories_filed , Python never gets to\nknow about it - it is dealt with entirely by the database. All Python does,\nthrough Django’s F() class, is create the SQL syntax to refer to the field\nand describe the operation. To access the new value saved this way, the object must be reloaded: reporter = Reporters . objects . get ( pk = reporter . pk ) # Or, more succinctly: reporter . refresh_from_db () As well as being used in operations on single instances as above, F() can\nbe used on QuerySets of object instances, with update() . This reduces\nthe two queries we were using above - the get() and the save() - to just one: reporter = Reporters . objects . filter ( name = \"Tintin\" ) reporter . update ( stories_filed = F ( \"stories_filed\" ) + 1 ) We can also use update() to increment\nthe field value on multiple objects - which could be very much faster than\npulling them all into Python from the database, looping over them, incrementing\nthe field value of each one, and saving each one back to the database: Reporter . objects . update ( stories_filed = F ( \"stories_filed\" ) + 1 ) F() therefore can offer performance advantages by: getting the database, rather than Python, to do work reducing the number of queries some operations require Slicing F() expressions ¶ New in Django 5.1. For string-based fields, text-based fields, and ArrayField , you can use Python’s\narray-slicing syntax. The indices are 0-based and the step argument to slice is not supported. For example: >>> # Replacing a name with a substring of itself. >>> writer = Writers . objects . get ( name = \"Priyansh\" ) >>> writer . name = F ( \"name\" )[ 1 : 5 ] >>> writer . save () >>> writer . refresh_from_db () >>> writer . name 'riya' Avoiding race conditions using F() ¶ Another useful benefit of F() is that having the database - rather than\nPython - update a field’s value avoids a race condition . If two Python threads execute the code in the first example above, one thread\ncould retrieve, increment, and save a field’s value after the other has\nretrieved it from the database. The value that the second thread saves will be\nbased on the original value; the work of the first thread will be lost. If the database is responsible for updating the field, the process is more\nrobust: it will only ever update the field based on the value of the field in\nthe database when the save() or update() is executed, rather\nthan based on its value when the instance was retrieved. F() assignments persist after Model.save() ¶ F() objects assigned to model fields persist after saving the model\ninstance and will be applied on each save() . For example: reporter = Reporters . objects . get ( name = \"Tintin\" ) reporter . stories_filed = F ( \"stories_filed\" ) + 1 reporter . save () reporter . name = \"Tintin Jr.\" reporter . save () stories_filed will be updated twice in this case. If it’s initially 1 ,\nthe final value will be 3 . This persistence can be avoided by reloading the\nmodel object after saving it, for example, by using refresh_from_db() . Using F() in filters ¶ F() is also very useful in QuerySet filters, where they make it\npossible to filter a set of objects against criteria based on their field\nvalues, rather than on Python values. This is documented in using F() expressions in queries . Using F() with annotations ¶ F() can be used to create dynamic fields on your models by combining\ndifferent fields with arithmetic: company = Company . objects . annotate ( chairs_needed = F ( \"num_employees\" ) - F ( \"num_chairs\" )) If the fields that you’re combining are of different types you’ll need to tell\nDjango what kind of field will be returned. Most expressions support output_field for this case, but since F() does not, you\nwill need to wrap the expression with ExpressionWrapper : from django.db.models import DateTimeField , ExpressionWrapper , F Ticket . objects . annotate ( expires = ExpressionWrapper ( F ( \"active_at\" ) + F ( \"duration\" ), output_field = DateTimeField () ) ) When referencing relational fields such as ForeignKey , F() returns the\nprimary key value rather than a model instance: >>> car = Company . objects . annotate ( built_by = F ( \"manufacturer\" ))[ 0 ] >>> car . manufacturer <Manufacturer: Toyota> >>> car . built_by 3 Using F() to sort null values ¶ Use F() and the nulls_first or nulls_last keyword argument to Expression.asc() or desc() to control the ordering of\na field’s null values. By default, the ordering depends on your database. For example, to sort companies that haven’t been contacted ( last_contacted is null) after companies that have been contacted: from django.db.models import F Company . objects . order_by ( F ( \"last_contacted\" ) . desc ( nulls_last = True )) Using F() with logical operations ¶ F() expressions that output BooleanField can be logically negated with\nthe inversion operator ~F() . For example, to swap the activation status of\ncompanies: from django.db.models import F Company . objects . update ( is_active =~ F ( \"is_active\" )) Func() expressions ¶ Func() expressions are the base type of all expressions that involve\ndatabase functions like COALESCE and LOWER , or aggregates like SUM .\nThey can be used directly: from django.db.models import F , Func queryset . annotate ( field_lower = Func ( F ( \"field\" ), function = \"LOWER\" )) or they can be used to build a library of database functions: class Lower ( Func ): function = \"LOWER\" queryset . annotate ( field_lower = Lower ( \"field\" )) But both cases will result in a queryset where each model is annotated with an\nextra attribute field_lower produced, roughly, from the following SQL: SELECT ... LOWER ( \"db_table\" . \"field\" ) as \"field_lower\" See Database Functions for a list of built-in database functions. The Func API is as follows: class Func ( * expressions , ** extra ) [source] ¶ function ¶ A class attribute describing the function that will be generated.\nSpecifically, the function will be interpolated as the function placeholder within template . Defaults to None . template ¶ A class attribute, as a format string, that describes the SQL that is\ngenerated for this function. Defaults to '%(function)s(%(expressions)s)' . If you’re constructing SQL like strftime('%W', 'date') and need a\nliteral % character in the query, quadruple it ( %%%% ) in the template attribute because the string is interpolated twice: once\nduring the template interpolation in as_sql() and once in the SQL\ninterpolation with the query parameters in the database cursor. arg_joiner ¶ A class attribute that denotes the character used to join the list of expressions together. Defaults to ', ' . arity ¶ A class attribute that denotes the number of arguments the function\naccepts. If this attribute is set and the function is called with a\ndifferent number of expressions, TypeError will be raised. Defaults\nto None . as_sql ( compiler , connection , function = None , template = None , arg_joiner = None , ** extra_context ) [source] ¶ Generates the SQL fragment for the database function. Returns a tuple (sql, params) , where sql is the SQL string, and params is\nthe list or tuple of query parameters. The as_vendor() methods should use the function , template , arg_joiner , and any other **extra_context parameters to\ncustomize the SQL as needed. For example: django/db/models/functions.py ¶ class ConcatPair ( Func ): ... function = \"CONCAT\" ... def as_mysql ( self , compiler , connection , ** extra_context ): return super () . as_sql ( compiler , connection , function = \"CONCAT_WS\" , template = \" %(function)s ('', %(expressions)s )\" , ** extra_context ) To avoid an SQL injection vulnerability, extra_context must\nnot contain untrusted user input as these values are interpolated into the SQL string rather than passed\nas query parameters, where the database driver would escape them. The *expressions argument is a list of positional expressions that the\nfunction will be applied to. The expressions will be converted to strings,\njoined together with arg_joiner , and then interpolated into the template as the expressions placeholder. Positional arguments can be expressions or Python values. Strings are\nassumed to be column references and will be wrapped in F() expressions\nwhile other values will be wrapped in Value() expressions. The **extra kwargs are key=value pairs that can be interpolated\ninto the template attribute. To avoid an SQL injection vulnerability, extra must not contain untrusted user input as these values are interpolated\ninto the SQL string rather than passed as query parameters, where the database\ndriver would escape them. The function , template , and arg_joiner keywords can be used to\nreplace the attributes of the same name without having to define your own\nclass. output_field can be used to define the expected\nreturn type. Aggregate() expressions ¶ An aggregate expression is a special case of a Func() expression that informs the query that a GROUP BY clause\nis required. All of the aggregate functions ,\nlike Sum() and Count() , inherit from Aggregate() . Since Aggregate s are expressions and wrap expressions, you can represent\nsome complex computations: from django.db.models import Count Company . objects . annotate ( managers_required = ( Count ( \"num_employees\" ) / 4 ) + Count ( \"num_managers\" ) ) The Aggregate API is as follows: class Aggregate ( * expressions , output_field = None , distinct = False , filter = None , default = None , ** extra ) [source] ¶ template ¶ A class attribute, as a format string, that describes the SQL that is\ngenerated for this aggregate. Defaults to '%(function)s(%(distinct)s%(expressions)s)' . function ¶ A class attribute describing the aggregate function that will be\ngenerated. Specifically, the function will be interpolated as the function placeholder within template . Defaults to None . window_compatible ¶ Defaults to True since most aggregate functions can be used as the\nsource expression in Window . allow_distinct ¶ A class attribute determining whether or not this aggregate function\nallows passing a distinct keyword argument. If set to False (default), TypeError is raised if distinct=True is passed. empty_result_set_value ¶ Defaults to None since most aggregate functions result in NULL when applied to an empty result set. The expressions positional arguments can include expressions, transforms of\nthe model field, or the names of model fields. They will be converted to a\nstring and used as the expressions placeholder within the template . The distinct argument determines whether or not the aggregate function\nshould be invoked for each distinct value of expressions (or set of\nvalues, for multiple expressions ). The argument is only supported on\naggregates that have allow_distinct set to True . The filter argument takes a Q object that’s\nused to filter the rows that are aggregated. See Conditional aggregation and Filtering on annotations for example usage. The default argument takes a value that will be passed along with the\naggregate to Coalesce . This is useful for\nspecifying a value to be returned other than None when the queryset (or\ngrouping) contains no entries. The **extra kwargs are key=value pairs that can be interpolated\ninto the template attribute. Creating your own Aggregate Functions ¶ You can create your own aggregate functions, too. At a minimum, you need to\ndefine function , but you can also completely customize the SQL that is\ngenerated. Here’s a brief example: from django.db.models import Aggregate class Sum ( Aggregate ): # Supports SUM(ALL field). function = \"SUM\" template = \" %(function)s ( %(all_values)s%(expressions)s )\" allow_distinct = False def __init__ ( self , expression , all_values = False , ** extra ): super () . __init__ ( expression , all_values = \"ALL \" if all_values else \"\" , ** extra ) Value() expressions ¶ class Value ( value , output_field = None ) [source] ¶ A Value() object represents the smallest possible component of an\nexpression: a simple value. When you need to represent the value of an integer,\nboolean, or string within an expression, you can wrap that value within a Value() . You will rarely need to use Value() directly. When you write the expression F('field') + 1 , Django implicitly wraps the 1 in a Value() ,\nallowing simple values to be used in more complex expressions. You will need to\nuse Value() when you want to pass a string to an expression. Most\nexpressions interpret a string argument as the name of a field, like Lower('name') . The value argument describes the value to be included in the expression,\nsuch as 1 , True , or None . Django knows how to convert these Python\nvalues into their corresponding database type. If no output_field is specified, it will be inferred from\nthe type of the provided value for many common types. For example, passing\nan instance of datetime.datetime as value defaults output_field to DateTimeField . ExpressionWrapper() expressions ¶ class ExpressionWrapper ( expression , output_field ) [source] ¶ ExpressionWrapper surrounds another expression and provides access to\nproperties, such as output_field , that may not be\navailable on other expressions. ExpressionWrapper is necessary when using\narithmetic on F() expressions with different types as described in Using F() with annotations . Conditional expressions ¶ Conditional expressions allow you to use if … elif … else logic in queries. Django natively supports SQL CASE expressions. For more details see Conditional Expressions . Subquery() expressions ¶ class Subquery ( queryset , output_field = None ) [source] ¶ You can add an explicit subquery to a QuerySet using the Subquery expression. For example, to annotate each post with the email address of the author of the\nnewest comment on that post: >>> from django.db.models import OuterRef , Subquery >>> newest = Comment . objects . filter ( post = OuterRef ( \"pk\" )) . order_by ( \"-created_at\" ) >>> Post . objects . annotate ( newest_commenter_email = Subquery ( newest . values ( \"email\" )[: 1 ])) On PostgreSQL, the SQL looks like: SELECT \"post\" . \"id\" , ( SELECT U0 . \"email\" FROM \"comment\" U0 WHERE U0 . \"post_id\" = ( \"post\" . \"id\" ) ORDER BY U0 . \"created_at\" DESC LIMIT 1 ) AS \"newest_commenter_email\" FROM \"post\" Note The examples in this section are designed to show how to force\nDjango to execute a subquery. In some cases it may be possible to\nwrite an equivalent queryset that performs the same task more\nclearly or efficiently. Referencing columns from the outer queryset ¶ class OuterRef ( field ) [source] ¶ Use OuterRef when a queryset in a Subquery needs to refer to a field\nfrom the outer query or its transform. It acts like an F expression\nexcept that the check to see if it refers to a valid field isn’t made until the\nouter queryset is resolved. Instances of OuterRef may be used in conjunction with nested instances\nof Subquery to refer to a containing queryset that isn’t the immediate\nparent. For example, this queryset would need to be within a nested pair of Subquery instances to resolve correctly: >>> Book . objects . filter ( author = OuterRef ( OuterRef ( \"pk\" ))) Limiting a subquery to a single column ¶ There are times when a single column must be returned from a Subquery , for\ninstance, to use a Subquery as the target of an __in lookup. To return\nall comments for posts published within the last day: >>> from datetime import timedelta >>> from django.utils import timezone >>> one_day_ago = timezone . now () - timedelta ( days = 1 ) >>> posts = Post . objects . filter ( published_at__gte = one_day_ago ) >>> Comment . objects . filter ( post__in = Subquery ( posts . values ( \"pk\" ))) In this case, the subquery must use values() to return only a single column: the primary key of the post. Limiting the subquery to a single row ¶ To prevent a subquery from returning multiple rows, a slice ( [:1] ) of the\nqueryset is used: >>> subquery = Subquery ( newest . values ( \"email\" )[: 1 ]) >>> Post . objects . annotate ( newest_commenter_email = subquery ) In this case, the subquery must only return a single column and a single\nrow: the email address of the most recently created comment. (Using get() instead of a slice would fail because the OuterRef cannot be resolved until the queryset is used within a Subquery .) Exists() subqueries ¶ class Exists ( queryset ) [source] ¶ Exists is a Subquery subclass that uses an SQL EXISTS statement. In\nmany cases it will perform better than a subquery since the database is able to\nstop evaluation of the subquery when a first matching row is found. For example, to annotate each post with whether or not it has a comment from\nwithin the last day: >>> from django.db.models import Exists , OuterRef >>> from datetime import timedelta >>> from django.utils import timezone >>> one_day_ago = timezone . now () - timedelta ( days = 1 ) >>> recent_comments = Comment . objects . filter ( ... post = OuterRef ( \"pk\" ), ... created_at__gte = one_day_ago , ... ) >>> Post . objects . annotate ( recent_comment = Exists ( recent_comments )) On PostgreSQL, the SQL looks like: SELECT \"post\" . \"id\" , \"post\" . \"published_at\" , EXISTS ( SELECT ( 1 ) as \"a\" FROM \"comment\" U0 WHERE ( U0 . \"created_at\" >= YYYY - MM - DD HH : MM : SS AND U0 . \"post_id\" = \"post\" . \"id\" ) LIMIT 1 ) AS \"recent_comment\" FROM \"post\" It’s unnecessary to force Exists to refer to a single column, since the\ncolumns are discarded and a boolean result is returned. Similarly, since\nordering is unimportant within an SQL EXISTS subquery and would only\ndegrade performance, it’s automatically removed. You can query using NOT EXISTS with ~Exists() . Filtering on a Subquery() or Exists() expressions ¶ Subquery() that returns a boolean value and Exists() may be used as a condition in When expressions, or to\ndirectly filter a queryset: >>> recent_comments = Comment . objects . filter ( ... ) # From above >>> Post . objects . filter ( Exists ( recent_comments )) This will ensure that the subquery will not be added to the SELECT columns,\nwhich may result in a better performance. Using aggregates within a Subquery expression ¶ Aggregates may be used within a Subquery , but they require a specific\ncombination of filter() , values() , and annotate() to get the subquery grouping correct. Assuming both models have a length field, to find posts where the post\nlength is greater than the total length of all combined comments: >>> from django.db.models import OuterRef , Subquery , Sum >>> comments = Comment . objects . filter ( post = OuterRef ( \"pk\" )) . order_by () . values ( \"post\" ) >>> total_comments = comments . annotate ( total = Sum ( \"length\" )) . values ( \"total\" ) >>> Post . objects . filter ( length__gt = Subquery ( total_comments )) The initial filter(...) limits the subquery to the relevant parameters. order_by() removes the default ordering (if any) on the Comment model. values('post') aggregates comments by Post . Finally, annotate(...) performs the aggregation. The order in\nwhich these queryset methods are applied is important. In this case, since the\nsubquery must be limited to a single column, values('total') is required. This is the only way to perform an aggregation within a Subquery , as\nusing aggregate() attempts to evaluate the queryset (and if\nthere is an OuterRef , this will not be possible to resolve). Raw SQL expressions ¶ class RawSQL ( sql , params , output_field = None ) [source] ¶ Sometimes database expressions can’t easily express a complex WHERE clause.\nIn these edge cases, use the RawSQL expression. For example: >>> from django.db.models.expressions import RawSQL >>> queryset . annotate ( val = RawSQL ( \"select col from sometable where othercol = %s \" , ( param ,))) These extra lookups may not be portable to different database engines (because\nyou’re explicitly writing SQL code) and violate the DRY principle, so you\nshould avoid them if possible. RawSQL expressions can also be used as the target of __in filters: >>> queryset . filter ( id__in = RawSQL ( \"select id from sometable where col = %s \" , ( param ,))) Warning To protect against SQL injection attacks , you must escape any\nparameters that the user can control by using params . params is a\nrequired argument to force you to acknowledge that you’re not interpolating\nyour SQL with user-provided data. You also must not quote placeholders in the SQL string. This example is\nvulnerable to SQL injection because of the quotes around %s : RawSQL ( \"select col from sometable where othercol = ' %s '\" ) # unsafe! You can read more about how Django’s SQL injection protection works. Window functions ¶ Window functions provide a way to apply functions on partitions. Unlike a\nnormal aggregation function which computes a final result for each set defined\nby the group by, window functions operate on frames and\npartitions, and compute the result for each row. You can specify multiple windows in the same query which in Django ORM would be\nequivalent to including multiple expressions in a QuerySet.annotate() call. The ORM doesn’t make use of named windows,\ninstead they are part of the selected columns. class Window ( expression , partition_by = None , order_by = None , frame = None , output_field = None ) [source] ¶ template ¶ Defaults to %(expression)s OVER (%(window)s) . If only the expression argument is provided, the window clause will be blank. The Window class is the main expression for an OVER clause. The expression argument is either a window function , an aggregate function , or\nan expression that’s compatible in a window clause. The partition_by argument accepts an expression or a sequence of\nexpressions (column names should be wrapped in an F -object) that control\nthe partitioning of the rows.  Partitioning narrows which rows are used to\ncompute the result set. The output_field is specified either as an argument or by\nthe expression. The order_by argument accepts an expression on which you can call asc() and desc() , a string of a field name (with an\noptional \"-\" prefix which indicates descending order), or a tuple or list\nof strings and/or expressions. The ordering controls the order in which the\nexpression is applied. For example, if you sum over the rows in a partition,\nthe first result is the value of the first row, the second is the sum of first\nand second row. The frame parameter specifies which other rows that should be used in the\ncomputation. See Frames for details. For example, to annotate each movie with the average rating for the movies by\nthe same studio in the same genre and release year: >>> from django.db.models import Avg , F , Window >>> Movie . objects . annotate ( ... avg_rating = Window ( ... expression = Avg ( \"rating\" ), ... partition_by = [ F ( \"studio\" ), F ( \"genre\" )], ... order_by = \"released__year\" , ... ), ... ) This allows you to check if a movie is rated better or worse than its peers. You may want to apply multiple expressions over the same window, i.e., the\nsame partition and frame. For example, you could modify the previous example\nto also include the best and worst rating in each movie’s group (same studio,\ngenre, and release year) by using three window functions in the same query. The\npartition and ordering from the previous example is extracted into a dictionary\nto reduce repetition: >>> from django.db.models import Avg , F , Max , Min , Window >>> window = { ... \"partition_by\" : [ F ( \"studio\" ), F ( \"genre\" )], ... \"order_by\" : \"released__year\" , ... } >>> Movie . objects . annotate ( ... avg_rating = Window ( ... expression = Avg ( \"rating\" ), ... ** window , ... ), ... best = Window ( ... expression = Max ( \"rating\" ), ... ** window , ... ), ... worst = Window ( ... expression = Min ( \"rating\" ), ... ** window , ... ), ... ) Filtering against window functions is supported as long as lookups are not\ndisjunctive (not using OR or XOR as a connector) and against a queryset\nperforming aggregation. For example, a query that relies on aggregation and has an OR -ed filter\nagainst a window function and a field is not supported. Applying combined\npredicates post-aggregation could cause rows that would normally be excluded\nfrom groups to be included: >>> qs = Movie . objects . annotate ( ... category_rank = Window ( Rank (), partition_by = \"category\" , order_by = \"-rating\" ), ... scenes_count = Count ( \"actors\" ), ... ) . filter ( Q ( category_rank__lte = 3 ) | Q ( title__contains = \"Batman\" )) >>> list ( qs ) NotImplementedError: Heterogeneous disjunctive predicates against window functions are not implemented when performing conditional aggregation. Among Django’s built-in database backends, MySQL, PostgreSQL, and Oracle\nsupport window expressions. Support for different window expression features\nvaries among the different databases. For example, the options in asc() and desc() may not be supported. Consult the\ndocumentation for your database as needed. Frames ¶ For a window frame, you can choose either a range-based sequence of rows or an\nordinary sequence of rows. class ValueRange ( start = None , end = None , exclusion = None ) [source] ¶ frame_type ¶ This attribute is set to 'RANGE' . PostgreSQL has limited support for ValueRange and only supports use of\nthe standard start and end points, such as CURRENT ROW and UNBOUNDED FOLLOWING . Changed in Django 5.1: The exclusion argument was added. class RowRange ( start = None , end = None , exclusion = None ) [source] ¶ frame_type ¶ This attribute is set to 'ROWS' . Changed in Django 5.1: The exclusion argument was added. Both classes return SQL with the template: % ( frame_type ) s BETWEEN % ( start ) s AND % ( end ) s class WindowFrameExclusion [source] ¶ New in Django 5.1. CURRENT_ROW ¶ GROUP ¶ TIES ¶ NO_OTHERS ¶ The exclusion argument allows excluding rows\n( CURRENT_ROW ), groups\n( GROUP ), and ties\n( TIES ) from the window frames on supported\ndatabases: % ( frame_type ) s BETWEEN % ( start ) s AND % ( end ) s EXCLUDE % ( exclusion ) s Frames narrow the rows that are used for computing the result. They shift from\nsome start point to some specified end point. Frames can be used with and\nwithout partitions, but it’s often a good idea to specify an ordering of the\nwindow to ensure a deterministic result. In a frame, a peer in a frame is a row\nwith an equivalent value, or all rows if an ordering clause isn’t present. The default starting point for a frame is UNBOUNDED PRECEDING which is the\nfirst row of the partition. The end point is always explicitly included in the\nSQL generated by the ORM and is by default UNBOUNDED FOLLOWING . The default\nframe includes all rows from the partition to the last row in the set. The accepted values for the start and end arguments are None , an\ninteger, or zero. A negative integer for start results in N PRECEDING ,\nwhile None yields UNBOUNDED PRECEDING . In ROWS mode, a positive\ninteger can be used for start resulting in N FOLLOWING . Positive\nintegers are accepted for end and results in N FOLLOWING . In ROWS mode, a negative integer can be used for end resulting in N PRECEDING .\nFor both start and end , zero will return CURRENT ROW . There’s a difference in what CURRENT ROW includes. When specified in ROWS mode, the frame starts or ends with the current row. When specified in RANGE mode, the frame starts or ends at the first or last peer according to\nthe ordering clause. Thus, RANGE CURRENT ROW evaluates the expression for\nrows which have the same value specified by the ordering. Because the template\nincludes both the start and end points, this may be expressed with: ValueRange ( start = 0 , end = 0 ) If a movie’s “peers” are described as movies released by the same studio in the\nsame genre in the same year, this RowRange example annotates each movie\nwith the average rating of a movie’s two prior and two following peers: >>> from django.db.models import Avg , F , RowRange , Window >>> Movie . objects . annotate ( ... avg_rating = Window ( ... expression = Avg ( \"rating\" ), ... partition_by = [ F ( \"studio\" ), F ( \"genre\" )], ... order_by = \"released__year\" , ... frame = RowRange ( start =- 2 , end = 2 ), ... ), ... ) If the database supports it, you can specify the start and end points based on\nvalues of an expression in the partition. If the released field of the Movie model stores the release month of each movie, this ValueRange example annotates each movie with the average rating of a movie’s peers\nreleased between twelve months before and twelve months after each movie: >>> from django.db.models import Avg , F , ValueRange , Window >>> Movie . objects . annotate ( ... avg_rating = Window ( ... expression = Avg ( \"rating\" ), ... partition_by = [ F ( \"studio\" ), F ( \"genre\" )], ... order_by = \"released__year\" , ... frame = ValueRange ( start =- 12 , end = 12 ), ... ), ... ) Changed in Django 5.1: Support for positive integer start and negative integer end was\nadded for RowRange . Technical Information ¶ Below you’ll find technical implementation details that may be useful to\nlibrary authors. The technical API and examples below will help with\ncreating generic query expressions that can extend the built-in functionality\nthat Django provides. Expression API ¶ Query expressions implement the query expression API ,\nbut also expose a number of extra methods and attributes listed below. All\nquery expressions must inherit from Expression() or a relevant\nsubclass. When a query expression wraps another expression, it is responsible for\ncalling the appropriate methods on the wrapped expression. class Expression [source] ¶ allowed_default ¶ New in Django 5.0. Tells Django that this expression can be used in Field.db_default . Defaults to False . constraint_validation_compatible ¶ New in Django 5.1. Tells Django that this expression can be used during a constraint\nvalidation. Expressions with constraint_validation_compatible set\nto False must have only one source expression. Defaults to True . contains_aggregate ¶ Tells Django that this expression contains an aggregate and that a GROUP BY clause needs to be added to the query. contains_over_clause ¶ Tells Django that this expression contains a Window expression. It’s used,\nfor example, to disallow window function expressions in queries that\nmodify data. filterable ¶ Tells Django that this expression can be referenced in QuerySet.filter() . Defaults to True . window_compatible ¶ Tells Django that this expression can be used as the source expression\nin Window . Defaults to False . empty_result_set_value ¶ Tells Django which value should be returned when the expression is used\nto apply a function over an empty result set. Defaults to NotImplemented which forces the expression to be computed on\nthe database. resolve_expression ( query = None , allow_joins = True , reuse = None , summarize = False , for_save = False ) ¶ Provides the chance to do any preprocessing or validation of\nthe expression before it’s added to the query. resolve_expression() must also be called on any nested expressions. A copy() of self should be returned with any necessary transformations. query is the backend query implementation. allow_joins is a boolean that allows or denies the use of\njoins in the query. reuse is a set of reusable joins for multi-join scenarios. summarize is a boolean that, when True , signals that the\nquery being computed is a terminal aggregate query. for_save is a boolean that, when True , signals that the query\nbeing executed is performing a create or update. get_source_expressions () ¶ Returns an ordered list of inner expressions. For example: >>> Sum ( F ( \"foo\" )) . get_source_expressions () [F('foo')] set_source_expressions ( expressions ) ¶ Takes a list of expressions and stores them such that get_source_expressions() can return them. relabeled_clone ( change_map ) ¶ Returns a clone (copy) of self , with any column aliases relabeled.\nColumn aliases are renamed when subqueries are created. relabeled_clone() should also be called on any nested expressions\nand assigned to the clone. change_map is a dictionary mapping old aliases to new aliases. Example: def relabeled_clone ( self , change_map ): clone = copy . copy ( self ) clone . expression = self . expression . relabeled_clone ( change_map ) return clone convert_value ( value , expression , connection ) ¶ A hook allowing the expression to coerce value into a more\nappropriate type. expression is the same as self . get_group_by_cols () ¶ Responsible for returning the list of columns references by\nthis expression. get_group_by_cols() should be called on any\nnested expressions. F() objects, in particular, hold a reference\nto a column. asc ( nulls_first = None , nulls_last = None ) ¶ Returns the expression ready to be sorted in ascending order. nulls_first and nulls_last define how null values are sorted.\nSee Using F() to sort null values for example usage. desc ( nulls_first = None , nulls_last = None ) ¶ Returns the expression ready to be sorted in descending order. nulls_first and nulls_last define how null values are sorted.\nSee Using F() to sort null values for example usage. reverse_ordering () ¶ Returns self with any modifications required to reverse the sort\norder within an order_by call. As an example, an expression\nimplementing NULLS LAST would change its value to be NULLS FIRST . Modifications are only required for expressions that\nimplement sort order like OrderBy . This method is called when reverse() is called on a\nqueryset. Writing your own Query Expressions ¶ You can write your own query expression classes that use, and can integrate\nwith, other query expressions. Let’s step through an example by writing an\nimplementation of the COALESCE SQL function, without using the built-in Func() expressions . The COALESCE SQL function is defined as taking a list of columns or\nvalues. It will return the first column or value that isn’t NULL . We’ll start by defining the template to be used for SQL generation and\nan __init__() method to set some attributes: import copy from django.db.models import Expression class Coalesce ( Expression ): template = \"COALESCE( %(expressions)s )\" def __init__ ( self , expressions , output_field ): super () . __init__ ( output_field = output_field ) if len ( expressions ) < 2 : raise ValueError ( \"expressions must have at least 2 elements\" ) for expression in expressions : if not hasattr ( expression , \"resolve_expression\" ): raise TypeError ( \" %r is not an Expression\" % expression ) self . expressions = expressions We do some basic validation on the parameters, including requiring at least 2\ncolumns or values, and ensuring they are expressions. We are requiring output_field here so that Django knows what kind of model\nfield to assign the eventual result to. Now we implement the preprocessing and validation. Since we do not have\nany of our own validation at this point, we delegate to the nested\nexpressions: def resolve_expression ( self , query = None , allow_joins = True , reuse = None , summarize = False , for_save = False ): c = self . copy () c . is_summary = summarize for pos , expression in enumerate ( self . expressions ): c . expressions [ pos ] = expression . resolve_expression ( query , allow_joins , reuse , summarize , for_save ) return c Next, we write the method responsible for generating the SQL: def as_sql ( self , compiler , connection , template = None ): sql_expressions , sql_params = [], [] for expression in self . expressions : sql , params = compiler . compile ( expression ) sql_expressions . append ( sql ) sql_params . extend ( params ) template = template or self . template data = { \"expressions\" : \",\" . join ( sql_expressions )} return template % data , sql_params def as_oracle ( self , compiler , connection ): \"\"\" Example of vendor specific handling (Oracle in this case). Let's make the function name lowercase. \"\"\" return self . as_sql ( compiler , connection , template = \"coalesce( %(expressions)s )\" ) as_sql() methods can support custom keyword arguments, allowing as_vendorname() methods to override data used to generate the SQL string.\nUsing as_sql() keyword arguments for customization is preferable to\nmutating self within as_vendorname() methods as the latter can lead to\nerrors when running on different database backends. If your class relies on\nclass attributes to define data, consider allowing overrides in your as_sql() method. We generate the SQL for each of the expressions by using the compiler.compile() method, and join the result together with commas.\nThen the template is filled out with our data and the SQL and parameters\nare returned. We’ve also defined a custom implementation that is specific to the Oracle\nbackend. The as_oracle() function will be called instead of as_sql() if the Oracle backend is in use. Finally, we implement the rest of the methods that allow our query expression\nto play nice with other query expressions: def get_source_expressions ( self ): return self . expressions def set_source_expressions ( self , expressions ): self . expressions = expressions Let’s see how it works: >>> from django.db.models import F , Value , CharField >>> qs = Company . objects . annotate ( ... tagline = Coalesce ( ... [ F ( \"motto\" ), F ( \"ticker_name\" ), F ( \"description\" ), Value ( \"No Tagline\" )], ... output_field = CharField (), ... ) ... ) >>> for c in qs : ... print ( \" %s : %s \" % ( c . name , c . tagline )) ... Google: Do No Evil Apple: AAPL Yahoo: Internet Company Django Software Foundation: No Tagline Avoiding SQL injection ¶ Since a Func ’s keyword arguments for __init__() ( **extra ) and as_sql() ( **extra_context ) are interpolated into the SQL string rather\nthan passed as query parameters (where the database driver would escape them),\nthey must not contain untrusted user input. For example, if substring is user-provided, this function is vulnerable to\nSQL injection: from django.db.models import Func class Position ( Func ): function = \"POSITION\" template = \" %(function)s (' %(substring)s ' in %(expressions)s )\" def __init__ ( self , expression , substring ): # substring=substring is an SQL injection vulnerability! super () . __init__ ( expression , substring = substring ) This function generates an SQL string without any parameters. Since substring is passed to super().__init__() as a keyword argument, it’s\ninterpolated into the SQL string before the query is sent to the database. Here’s a corrected rewrite: class Position ( Func ): function = \"POSITION\" arg_joiner = \" IN \" def __init__ ( self , expression , substring ): super () . __init__ ( substring , expression ) With substring instead passed as a positional argument, it’ll be passed as\na parameter in the database query. Adding support in third-party database backends ¶ If you’re using a database backend that uses a different SQL syntax for a\ncertain function, you can add support for it by monkey patching a new method\nonto the function’s class. Let’s say we’re writing a backend for Microsoft’s SQL Server which uses the SQL LEN instead of LENGTH for the Length function.\nWe’ll monkey patch a new method called as_sqlserver() onto the Length class: from django.db.models.functions import Length def sqlserver_length ( self , compiler , connection ): return self . as_sql ( compiler , connection , function = \"LEN\" ) Length . as_sqlserver = sqlserver_length You can also customize the SQL using the template parameter of as_sql() . We use as_sqlserver() because django.db.connection.vendor returns sqlserver for the backend. Third-party backends can register their functions in the top level __init__.py file of the backend package or in a top level expressions.py file (or package) that is imported from the top level __init__.py . For user projects wishing to patch the backend that they’re using, this code\nshould live in an AppConfig.ready() method.", "keywords": ["lower", "column", "comments", "val", "work", "type", "preprocessing", "book", "rows", "statement", "def", "qs", "aggregation", "classes", "null", "day", "method", "party", "as_mysql", "points", "expressionwrapper", "authors", "jr.", "no_others", "performance", "boolean", "ties", "repetition", "use", "status", "principle", "difference", "technical", "condition", "sort", "cursor", "scenes_count", "way", "filters", "default", "model.save", "exclusion", "subquery", "toyota", "injection", "wrap", "function)s(%(distinct)s%(expressions)s", "select", "package", "kind", "movies", "reporters", "total_comments", "backend", "self", "concat", "computations", "argument", "inversion", "is_summary", "nulls", "super().__init", "tuple", "months", "windows", "integer", "conjunction", "outerref", "newest_commenter_email", "queryset.filter", "month", "properties", "comment", "start", "name", "name__length", "django.db.models.aggregates", "operator", "python", "supports", "charfield", "addition", "instances", "edge", "-object", "subclass", "lookup", "expression)s", "orm", "extra_context", "chance", "partitioning", "yahoo", "-created_at", "evaluation", "|", "address", "concatpair", "true", "*", "aapl", "u0", "num_chairs", "all_values", "decimalfield", "annotate", "ss", "register_lookup", "operation", "logic", "allow_joins", "sqlserver_length", "length", "transformations", "evil", "benefit", "key", "frame", "parameters", ".", "datetime.datetime", "modulo", "dictionary", "unbounded", "nulls_first", "operators", "driver", "monkey", "template", "dd", "story", "connector", "%", "batman", "order", "notimplementederror", "documentation", "-", "specifies", "apple", "published_at__gte", "pairs", "pk", "saves", "order_by", "othercol", "customization", "convenience", "reuse", "grouping", "aliases", "rest", "arity", "minimum", "mode", "query", "following", "need_chairs", "import", "django.db.models.lookups", "num_employees__gt", "'", "information", "empty_result_set_value", "result", "#", "point", "section", "idea", "¶", "init", "as_vendorname", "title__contains", "get_group_by_cols", "division", "modifications", "server", "resolve_expression", "persistence", "format", "predicates", "partition_by", "example", "ordering", "year", "value", "functions", "products", "conditional", "field.db_default", "compile", "source", "manufacturer", "dry", "n", "transforms", "expression.asc", "exclude", "print", "position", "save", "c", "peer", "create", "examples", "aggregate", "details", "col", "advantages", "scenarios", "duration", "subqueries", "values('total", "object", "task", "init__.py", "id__in", "library", "attributes", "postgresql", "hasattr", "returns", "window", "car", "vendor", "parent", "set_source_expressions", "writer", "num_offerings", "queryset.annotate", "assignment", "array", "created_at__gte", "sequence", "orderby", "api", "note", "keywords", "post", "conditions", "level", "valueerror", "django", "days", "foundation", "projects", "fact", "thread", "expressions)s", "vulnerability", "parameter", "validation", "syntax", "slice", "text", "field", "commas", "studio", "strings", "employees", "sql_params", "integerfield", "change_map", "coalesce", "=", "objects", "overrides", "news", "tagline", "pos", "django.db.models.functions", "defaults", "strftime('%w", "implementation", "recent_comment", "actors", "google", "connection", "hook", "convert_value", "software", "mysql", "range", "reporter", "total", "handling", "count", "release", "relabeled_clone", "goog", "recent_comments", "q", "oracle", "category", "slicing", "queryset", "employee", "chairs", "lowercase", "concat_ws", "d", "generation", "created_at", "arrayfield", "active_at", "movie", "compiler.compile", "groups", "subtraction", "-ed", "output", "fields", "arithmetic", "window)s", "inherit", "copy", "custom", "f", "methods", "keyword", "update", "floatfield", "frames", "none", "variables", "peers", "base", "process", "sometable", "access", "as_oracle", "post_id", "built_by", "preceding", ">", "timedelta", "component", "email", "company", "last", "upper", "end", "microsoft", "valuerange", "placeholder", "attacks", "negation", "mapping", "ticker", "refresh_from_db", "rating", "post__in", "protection", "data", "avg", "windowframeexclusion", "rowrange", "matching", "num_products", "constraint", "sql_expressions", "group", "lookups", "options", "one_day_ago", "filtering", "references", "riya", "param", "enumerate", "params", "combination", "rewrite", "f('foo", "description", "s", "kwargs", "append", "sql", "author", "lower('name", "compiler", "as_vendor", "django.utils", "constants", "placeholders", "elements", "rawsql", "max", "criteria", "backends", "arguments", "memory", "mm", "tintin", "db", "django.db.models.expressions", "models", "as_sqlserver", "notimplemented", "published_at", "row", "call", "category_rank", "num_employees", "category_rank__lte", "ticker_name", "all_values)s%(expressions)s", "arg_joiner", "sum", "substring", "tells", "annotation", "querysets", "writers", "support", "types", "multiplication", "for_save", "filter", "booleanfield", "false", "length__gt", "prefix", "check", "integers", "values", "function)s", "quotes", "cases", "asc", "rank", "new", "times", "motto", "clone", "super", "django.db.connection.vendor", "annotations", "current_row", "underscore", "len", "fragment", "companies", "priyansh", "field_lower", "avg_rating", "assignments", "services", "activation", "pair", "stores", "timezone", "input", "num_managers", "usage", "output_field", "computation", "entries", "target", "model", "max_length", "character", "results", "starting", "n’t", "as_sql", "~exists", "or", "allowed_default", "case", "avoiding", "race", "class", "substring)s", "number", "return", "columns", "attribute", "function", "string", "interpolation", "list", "degrade", "internet", "chairs_needed", "ticket", "greaterthan", "exists", "i", "joins", "datetimefield", "user", "part", "file", "queries", "yyyy", "operations", "errors", "threads", "get", "r", "partitions", "posts", "names", "clause", "frame_type", "typeerror", "expressions", "get_source_expressions", "aggregates", "desc", "date", "set", "functionality", "function)s(%(expressions)s", "genre", "min", "foo", "foreignkey", "database", "func", "transform", "databases", "allow_distinct", "no", "limit", "expression", "increment", "reference", "instance", "engines", "code", "indices", "partition", "hh", "step", "power", "salary__gt"], "type": "documentation"},
{"title": "Lookup API reference", "url": "https://docs.djangoproject.com/en/5.1/ref/models/lookups/", "content": "Lookup API reference ¶ This document has the API references of lookups, the Django API for building\nthe WHERE clause of a database query. To learn how to use lookups, see Making queries ; to learn how to create new lookups, see How to write custom lookups . The lookup API has two components: a RegisterLookupMixin class\nthat registers lookups, and the Query Expression API , a\nset of methods that a class has to implement to be registrable as a lookup. Django has two base classes that follow the query expression API and from where\nall Django builtin lookups are derived: Lookup : to lookup a field (e.g. the exact of field_name__exact ) Transform : to transform a field A lookup expression consists of three parts: Fields part (e.g. Book.objects.filter(author__best_friends__first_name... ); Transforms part (may be omitted) (e.g. __lower__first3chars__reversed ); A lookup (e.g. __icontains ) that, if omitted, defaults to __exact . Registration API ¶ Django uses RegisterLookupMixin to give a class the interface to\nregister lookups on itself or its instances. The two prominent examples are Field , the base class of all model fields, and Transform , the base class of all Django transforms. class lookups. RegisterLookupMixin ¶ A mixin that implements the lookup API on a class. classmethod register_lookup ( lookup , lookup_name = None ) ¶ Registers a new lookup in the class or class instance. For example: DateField . register_lookup ( YearExact ) User . _meta . get_field ( \"date_joined\" ) . register_lookup ( MonthExact ) will register YearExact lookup on DateField and MonthExact lookup on the User.date_joined (you can use Field Access API to retrieve a single field instance). It\noverrides a lookup that already exists with the same name. Lookups\nregistered on field instances take precedence over the lookups\nregistered on classes. lookup_name will be used for this lookup if\nprovided, otherwise lookup.lookup_name will be used. get_lookup ( lookup_name ) ¶ Returns the Lookup named lookup_name registered in the\nclass or class instance depending on what calls it. The default\nimplementation looks recursively on all parent classes and checks if\nany has a registered lookup named lookup_name , returning the first\nmatch. Instance lookups would override any class lookups with the same lookup_name . get_lookups () ¶ Returns a dictionary of each lookup name registered in the class or\nclass instance mapped to the Lookup class. get_transform ( transform_name ) ¶ Returns a Transform named transform_name registered in the\nclass or class instance. The default implementation looks recursively\non all parent classes to check if any has the registered transform\nnamed transform_name , returning the first match. For a class to be a lookup, it must follow the Query Expression API . Lookup and Transform naturally\nfollow this API. The Query Expression API ¶ The query expression API is a common set of methods that classes define to be\nusable in query expressions to translate themselves into SQL expressions. Direct\nfield references, aggregates, and Transform are examples that follow this\nAPI. A class is said to follow the query expression API when it implements the\nfollowing methods: as_sql ( compiler , connection ) ¶ Generates the SQL fragment for the expression. Returns a tuple (sql, params) , where sql is the SQL string, and params is the\nlist or tuple of query parameters. The compiler is an SQLCompiler object, which has a compile() method that can be used to compile other\nexpressions. The connection is the connection used to execute the\nquery. Calling expression.as_sql() is usually incorrect - instead compiler.compile(expression) should be used. The compiler.compile() method will take care of calling vendor-specific methods of the expression. Custom keyword arguments may be defined on this method if it’s likely that as_vendorname() methods or subclasses will need to supply data to\noverride the generation of the SQL string. See Func.as_sql() for\nexample usage. as_vendorname ( compiler , connection ) ¶ Works like as_sql() method. When an expression is compiled by compiler.compile() , Django will first try to call as_vendorname() ,\nwhere vendorname is the vendor name of the backend used for executing\nthe query. The vendorname is one of postgresql , oracle , sqlite , or mysql for Django’s built-in backends. get_lookup ( lookup_name ) ¶ Must return the lookup named lookup_name . For instance, by returning self.output_field.get_lookup(lookup_name) . get_transform ( transform_name ) ¶ Must return the lookup named transform_name . For instance, by returning self.output_field.get_transform(transform_name) . output_field ¶ Defines the type of class returned by the get_lookup() method. It must\nbe a Field instance. Transform reference ¶ class Transform [source] ¶ A Transform is a generic class to implement field transformations. A\nprominent example is __year that transforms a DateField into a IntegerField . The notation to use a Transform in a lookup expression is <expression>__<transformation> (e.g. date__year ). This class follows the Query Expression API , which\nimplies that you can use <expression>__<transform1>__<transform2> . It’s\na specialized Func() expression that only accepts\none argument.  It can also be used on the right hand side of a filter or\ndirectly as an annotation. bilateral ¶ A boolean indicating whether this transformation should apply to both lhs and rhs . Bilateral transformations will be applied to rhs in\nthe same order as they appear in the lookup expression. By default it is set\nto False . For example usage, see How to write custom lookups . lhs [source] ¶ The left-hand side - what is being transformed. It must follow the Query Expression API . lookup_name ¶ The name of the lookup, used for identifying it on parsing query\nexpressions. It cannot contain the string \"__\" . output_field ¶ Defines the class this transformation outputs. It must be a Field instance. By default is the same as\nits lhs.output_field . Lookup reference ¶ class Lookup [source] ¶ A Lookup is a generic class to implement lookups. A lookup is a query\nexpression with a left-hand side, lhs ; a right-hand side, rhs ; and a lookup_name that is used to produce a boolean\ncomparison between lhs and rhs such as lhs in rhs or lhs > rhs . The primary notation to use a lookup in an expression is <lhs>__<lookup_name>=<rhs> . Lookups can also be used directly in QuerySet filters: Book . objects . filter ( LessThan ( F ( \"word_count\" ), 7500 )) …or annotations: Book . objects . annotate ( is_short_story = LessThan ( F ( \"word_count\" ), 7500 )) lhs ¶ The left-hand side - what is being looked up. The object typically\nfollows the Query Expression API . It may also\nbe a plain value. rhs ¶ The right-hand side - what lhs is being compared against. It can be\na plain value, or something that compiles into SQL, typically an F() object or a QuerySet . lookup_name ¶ The name of this lookup, used to identify it on parsing query\nexpressions. It cannot contain the string \"__\" . prepare_rhs ¶ Defaults to True . When rhs is a plain value, prepare_rhs determines whether it should be prepared for use as\na parameter in a query. In order to do so, lhs.output_field.get_prep_value() is called if defined, or rhs is wrapped in Value() otherwise. process_lhs ( compiler , connection , lhs = None ) [source] ¶ Returns a tuple (lhs_string, lhs_params) , as returned by compiler.compile(lhs) . This method can be overridden to tune how\nthe lhs is processed. compiler is an SQLCompiler object, to be used like compiler.compile(lhs) for compiling lhs . The connection can be used for compiling vendor specific SQL. If lhs is not None , use it as the processed lhs instead of self.lhs . process_rhs ( compiler , connection ) [source] ¶ Behaves the same way as process_lhs() , for the right-hand side.", "keywords": ["dictionary", "implementation", "connection", "match", "interface", "mysql", "type", "annotation", "book", "lhs_string", "order", "filter", "false", "expression>__<transform1>__<transform2", "classes", "oracle", "method", "yearexact", "lhs.output_field", "queryset", "hand", "builtin", "self.output_field.get_transform(transform_name", "query", "lhs_params", "func.as_sql", "field_name__exact", "generation", "use", "notation", "is_short_story", "registration", "subclasses", "datefield", "monthexact", "compiler.compile", "transform_name", "annotations", "fields", "way", "¶", "fragment", "default", "filters", "as_vendorname", "icontains", "custom", "f", "methods", "outputs", "side", "keyword", "usage", "output_field", "process_lhs", "model", "none", "precedence", "base", "access", "example", "checks", "year", "value", "compile", "user.date_joined", "as_sql", "backend", "source", "exact", "classmethod", "argument", "class", "prepare_rhs", "components", "behaves", "tuple", "lhs.output_field.get_prep_value", "get_field", "registers", "examples", "transformation", "meta", "care", "string", "list", "a", "lhs", "data", "get_lookup", "lessthan", "compiler.compile(lhs", "rhs", "vendorname", "parts", "lookups", "name", "object", "registerlookupmixin", "user", "part", "sqlcompiler", "queries", "postgresql", "comparison", "lhs>__<lookup_name>=<rhs", "references", "returns", "word_count", "params", "vendor", "get_lookups", "parent", "instances", "lookup.lookup_name", "lookup", "api", "sql", "book.objects.filter(author__best_friends__first_name", "defines", "expression.as_sql", "django", "mixin", "clause", "compiler", "expressions", "aggregates", "parameter", "true", "document", "set", "field", "backends", "arguments", "lookup_name", "database", "integerfield", "transform", "func", "annotate", "expression", "get_transform", "register_lookup", "reference", "instance", "=", "self.output_field.get_lookup(lookup_name", "transformations", "compiler.compile(expression", "parameters", "defaults", "expression>__<transformation"], "type": "documentation"},
{"title": " API reference", "url": "https://docs.djangoproject.com/en/5.1/ref/models/querysets/", "content": "QuerySet API reference ¶ This document describes the details of the QuerySet API. It builds on the\nmaterial presented in the model and database\nquery guides, so you’ll probably want to read and\nunderstand those documents before reading this one. Throughout this reference we’ll use the example blog models presented in the database query guide . When QuerySet s are evaluated ¶ Internally, a QuerySet can be constructed, filtered, sliced, and generally\npassed around without actually hitting the database. No database activity\nactually occurs until you do something to evaluate the queryset. You can evaluate a QuerySet in the following ways: Iteration. A QuerySet is iterable, and it executes its database\nquery the first time you iterate over it. For example, this will print\nthe headline of all entries in the database: for e in Entry . objects . all (): print ( e . headline ) Note: Don’t use this if all you want to do is determine if at least one\nresult exists. It’s more efficient to use exists() . Asynchronous iteration. A QuerySet can also be iterated over using async for : async for e in Entry . objects . all (): results . append ( e ) Both synchronous and asynchronous iterators of QuerySets share the same\nunderlying cache. Slicing. As explained in Limiting QuerySets , a QuerySet can\nbe sliced, using Python’s array-slicing syntax. Slicing an unevaluated QuerySet usually returns another unevaluated QuerySet , but Django\nwill execute the database query if you use the “step” parameter of slice\nsyntax, and will return a list. Slicing a QuerySet that has been\nevaluated also returns a list. Also note that even though slicing an unevaluated QuerySet returns\nanother unevaluated QuerySet , modifying it further (e.g., adding\nmore filters, or modifying ordering) is not allowed, since that does not\ntranslate well into SQL and it would not have a clear meaning either. Pickling/Caching. See the following section for details of what\nis involved when pickling QuerySets . The important thing for the\npurposes of this section is that the results are read from the database. repr(). A QuerySet is evaluated when you call repr() on it.\nThis is for convenience in the Python interactive interpreter, so you can\nimmediately see your results when using the API interactively. len(). A QuerySet is evaluated when you call len() on it.\nThis, as you might expect, returns the length of the result list. Note: If you only need to determine the number of records in the set (and\ndon’t need the actual objects), it’s much more efficient to handle a count\nat the database level using SQL’s SELECT COUNT(*) . Django provides a count() method for precisely this reason. list(). Force evaluation of a QuerySet by calling list() on\nit. For example: entry_list = list ( Entry . objects . all ()) bool(). Testing a QuerySet in a boolean context, such as using bool() , or , and or an if statement, will cause the query\nto be executed. If there is at least one result, the QuerySet is True , otherwise False . For example: if Entry . objects . filter ( headline = \"Test\" ): print ( \"There is at least one Entry with the headline Test\" ) Note: If you only want to determine if at least one result exists (and don’t\nneed the actual objects), it’s more efficient to use exists() . Pickling QuerySet s ¶ If you pickle a QuerySet , this will force all the results to be loaded\ninto memory prior to pickling. Pickling is usually used as a precursor to\ncaching and when the cached queryset is reloaded, you want the results to\nalready be present and ready for use (reading from the database can take some\ntime, defeating the purpose of caching). This means that when you unpickle a QuerySet , it contains the results at the moment it was pickled, rather\nthan the results that are currently in the database. If you only want to pickle the necessary information to recreate the QuerySet from the database at a later time, pickle the query attribute\nof the QuerySet . You can then recreate the original QuerySet (without\nany results loaded) using some code like this: >>> import pickle >>> query = pickle . loads ( s ) # Assuming 's' is the pickled string. >>> qs = MyModel . objects . all () >>> qs . query = query # Restore the original 'query'. The query attribute is an opaque object. It represents the internals of\nthe query construction and is not part of the public API. However, it is safe\n(and fully supported) to pickle and unpickle the attribute’s contents as\ndescribed here. Restrictions on QuerySet.values_list() If you recreate QuerySet.values_list() using the pickled query attribute, it will be converted to QuerySet.values() : >>> import pickle >>> qs = Blog . objects . values_list ( \"id\" , \"name\" ) >>> qs <QuerySet [(1, 'Beatles Blog')]> >>> reloaded_qs = Blog . objects . all () >>> reloaded_qs . query = pickle . loads ( pickle . dumps ( qs . query )) >>> reloaded_qs <QuerySet [{'id': 1, 'name': 'Beatles Blog'}]> You can’t share pickles between versions Pickles of QuerySets are only valid for the version of Django that\nwas used to generate them. If you generate a pickle using Django\nversion N, there is no guarantee that pickle will be readable with\nDjango version N+1. Pickles should not be used as part of a long-term\narchival strategy. Since pickle compatibility errors can be difficult to diagnose, such as\nsilently corrupted objects, a RuntimeWarning is raised when you try to\nunpickle a queryset in a Django version that is different than the one in\nwhich it was pickled. QuerySet API ¶ Here’s the formal declaration of a QuerySet : class QuerySet ( model = None , query = None , using = None , hints = None ) [source] ¶ Usually when you’ll interact with a QuerySet you’ll use it by chaining filters . To make this work, most QuerySet methods return new querysets. These methods are covered in\ndetail later in this section. The QuerySet class has the following public attributes you can use for\nintrospection: ordered [source] ¶ True if the QuerySet is ordered — i.e. has an order_by() clause or a default ordering on the model. False otherwise. db [source] ¶ The database that will be used if this query is executed now. Note The query parameter to QuerySet exists so that specialized\nquery subclasses can reconstruct internal query state. The value of the\nparameter is an opaque representation of that query state and is not\npart of a public API. Methods that return new QuerySet s ¶ Django provides a range of QuerySet refinement methods that modify either\nthe types of results returned by the QuerySet or the way its SQL query is\nexecuted. Note These methods do not run database queries, therefore they are safe to run in asynchronous code , and do not have separate asynchronous\nversions. filter() ¶ filter ( * args , ** kwargs ) ¶ Returns a new QuerySet containing objects that match the given lookup\nparameters. The lookup parameters ( **kwargs ) should be in the format described in Field lookups below. Multiple parameters are joined via AND in the\nunderlying SQL statement. If you need to execute more complex queries (for example, queries with OR statements),\nyou can use Q objects ( *args ). exclude() ¶ exclude ( * args , ** kwargs ) ¶ Returns a new QuerySet containing objects that do not match the given\nlookup parameters. The lookup parameters ( **kwargs ) should be in the format described in Field lookups below. Multiple parameters are joined via AND in the\nunderlying SQL statement, and the whole thing is enclosed in a NOT() . This example excludes all entries whose pub_date is later than 2005-1-3\nAND whose headline is “Hello”: Entry . objects . exclude ( pub_date__gt = datetime . date ( 2005 , 1 , 3 ), headline = \"Hello\" ) In SQL terms, that evaluates to: SELECT ... WHERE NOT ( pub_date > '2005-1-3' AND headline = 'Hello' ) This example excludes all entries whose pub_date is later than 2005-1-3\nOR whose headline is “Hello”: Entry . objects . exclude ( pub_date__gt = datetime . date ( 2005 , 1 , 3 )) . exclude ( headline = \"Hello\" ) In SQL terms, that evaluates to: SELECT ... WHERE NOT pub_date > '2005-1-3' AND NOT headline = 'Hello' Note the second example is more restrictive. If you need to execute more complex queries (for example, queries with OR statements),\nyou can use Q objects ( *args ). annotate() ¶ annotate ( * args , ** kwargs ) ¶ Annotates each object in the QuerySet with the provided list of query\nexpressions . An expression may be a simple value, a\nreference to a field on the model (or any related models), or an aggregate\nexpression (averages, sums, etc.) that has been computed over the objects that\nare related to the objects in the QuerySet . Each argument to annotate() is an annotation that will be added\nto each object in the QuerySet that is returned. The aggregation functions that are provided by Django are described\nin Aggregation Functions below. Annotations specified using keyword arguments will use the keyword as\nthe alias for the annotation. Anonymous arguments will have an alias\ngenerated for them based upon the name of the aggregate function and\nthe model field that is being aggregated. Only aggregate expressions\nthat reference a single field can be anonymous arguments. Everything\nelse must be a keyword argument. For example, if you were manipulating a list of blogs, you may want\nto determine how many entries have been made in each blog: >>> from django.db.models import Count >>> q = Blog . objects . annotate ( Count ( \"entry\" )) # The name of the first blog >>> q [ 0 ] . name 'Blogasaurus' # The number of entries on the first blog >>> q [ 0 ] . entry__count 42 The Blog model doesn’t define an entry__count attribute by itself,\nbut by using a keyword argument to specify the aggregate function, you can\ncontrol the name of the annotation: >>> q = Blog . objects . annotate ( number_of_entries = Count ( \"entry\" )) # The number of entries on the first blog, using the name provided >>> q [ 0 ] . number_of_entries 42 For an in-depth discussion of aggregation, see the topic guide on\nAggregation . alias() ¶ alias ( * args , ** kwargs ) ¶ Same as annotate() , but instead of annotating objects in the QuerySet , saves the expression for later reuse with other QuerySet methods. This is useful when the result of the expression itself is not needed\nbut it is used for filtering, ordering, or as a part of a complex expression.\nNot selecting the unused value removes redundant work from the database which\nshould result in better performance. For example, if you want to find blogs with more than 5 entries, but are not\ninterested in the exact number of entries, you could do this: >>> from django.db.models import Count >>> blogs = Blog . objects . alias ( entries = Count ( \"entry\" )) . filter ( entries__gt = 5 ) alias() can be used in conjunction with annotate() , exclude() , filter() , order_by() , and update() . To use aliased expression\nwith other methods (e.g. aggregate() ), you must promote it to an\nannotation: Blog . objects . alias ( entries = Count ( \"entry\" )) . annotate ( entries = F ( \"entries\" ), ) . aggregate ( Sum ( \"entries\" )) filter() and order_by() can take expressions directly, but\nexpression construction and usage often does not happen in the same place (for\nexample, QuerySet method creates expressions, for later use in views). alias() allows building complex expressions incrementally, possibly\nspanning multiple methods and modules, refer to the expression parts by their\naliases and only use annotate() for the final result. order_by() ¶ order_by ( * fields ) ¶ By default, results returned by a QuerySet are ordered by the ordering\ntuple given by the ordering option in the model’s Meta . You can\noverride this on a per- QuerySet basis by using the order_by method. Example: Entry . objects . filter ( pub_date__year = 2005 ) . order_by ( \"-pub_date\" , \"headline\" ) The result above will be ordered by pub_date descending, then by headline ascending. The negative sign in front of \"-pub_date\" indicates descending order. Ascending order is implied. To order randomly, use \"?\" ,\nlike so: Entry . objects . order_by ( \"?\" ) Note: order_by('?') queries may be expensive and slow, depending on the\ndatabase backend you’re using. To order by a field in a different model, use the same syntax as when you are\nquerying across model relations. That is, the name of the field, followed by a\ndouble underscore ( __ ), followed by the name of the field in the new model,\nand so on for as many models as you want to join. For example: Entry . objects . order_by ( \"blog__name\" , \"headline\" ) If you try to order by a field that is a relation to another model, Django will\nuse the default ordering on the related model, or order by the related model’s\nprimary key if there is no Meta.ordering specified. For example, since the Blog model has no default ordering specified: Entry . objects . order_by ( \"blog\" ) …is identical to: Entry . objects . order_by ( \"blog__id\" ) If Blog had ordering = ['name'] , then the first queryset would be\nidentical to: Entry . objects . order_by ( \"blog__name\" ) You can also order by query expressions by\ncalling asc() or desc() on the\nexpression: Entry . objects . order_by ( Coalesce ( \"summary\" , \"headline\" ) . desc ()) asc() and desc() have arguments\n( nulls_first and nulls_last ) that control how null values are sorted. Be cautious when ordering by fields in related models if you are also using distinct() . See the note in distinct() for an explanation of how\nrelated model ordering can change the expected results. Note It is permissible to specify a multi-valued field to order the results by\n(for example, a ManyToManyField field, or the\nreverse relation of a ForeignKey field). Consider this case: class Event ( Model ): parent = models . ForeignKey ( \"self\" , on_delete = models . CASCADE , related_name = \"children\" , ) date = models . DateField () Event . objects . order_by ( \"children__date\" ) Here, there could potentially be multiple ordering data for each Event ;\neach Event with multiple children will be returned multiple times\ninto the new QuerySet that order_by() creates. In other words,\nusing order_by() on the QuerySet could return more items than you\nwere working on to begin with - which is probably neither expected nor\nuseful. Thus, take care when using multi-valued field to order the results. If you can be sure that there will only be one ordering piece of data for each\nof the items you’re ordering, this approach should not present problems. If\nnot, make sure the results are what you expect. There’s no way to specify whether ordering should be case sensitive. With\nrespect to case-sensitivity, Django will order results however your database\nbackend normally orders them. You can order by a field converted to lowercase with Lower which will achieve case-consistent\nordering: Entry . objects . order_by ( Lower ( \"headline\" ) . desc ()) If you don’t want any ordering to be applied to a query, not even the default\nordering, call order_by() with no parameters. You can tell if a query is ordered or not by checking the QuerySet.ordered attribute, which will be True if the QuerySet has been ordered in any way. Each order_by() call will clear any previous ordering. For example, this\nquery will be ordered by pub_date and not headline : Entry . objects . order_by ( \"headline\" ) . order_by ( \"pub_date\" ) Warning Ordering is not a free operation. Each field you add to the ordering\nincurs a cost to your database. Each foreign key you add will\nimplicitly include all of its default orderings as well. If a query doesn’t have an ordering specified, results are returned from\nthe database in an unspecified order. A particular ordering is guaranteed\nonly when ordering by a set of fields that uniquely identify each object in\nthe results. For example, if a name field isn’t unique, ordering by it\nwon’t guarantee objects with the same name always appear in the same order. reverse() ¶ reverse () ¶ Use the reverse() method to reverse the order in which a queryset’s\nelements are returned. Calling reverse() a second time restores the\nordering back to the normal direction. To retrieve the “last” five items in a queryset, you could do this: my_queryset . reverse ()[: 5 ] Note that this is not quite the same as slicing from the end of a sequence in\nPython. The above example will return the last item first, then the\npenultimate item and so on. If we had a Python sequence and looked at seq[-5:] , we would see the fifth-last item first. Django doesn’t support\nthat mode of access (slicing from the end), because it’s not possible to do it\nefficiently in SQL. Also, note that reverse() should generally only be called on a QuerySet which has a defined ordering (e.g., when querying against a model which defines\na default ordering, or when using order_by() ). If no such ordering is\ndefined for a given QuerySet , calling reverse() on it has no real\neffect (the ordering was undefined prior to calling reverse() , and will\nremain undefined afterward). distinct() ¶ distinct ( * fields ) ¶ Returns a new QuerySet that uses SELECT DISTINCT in its SQL query. This\neliminates duplicate rows from the query results. By default, a QuerySet will not eliminate duplicate rows. In practice, this\nis rarely a problem, because simple queries such as Blog.objects.all() don’t introduce the possibility of duplicate result rows. However, if your\nquery spans multiple tables, it’s possible to get duplicate results when a QuerySet is evaluated. That’s when you’d use distinct() . Note Any fields used in an order_by() call are included in the SQL SELECT columns. This can sometimes lead to unexpected results when used\nin conjunction with distinct() . If you order by fields from a related\nmodel, those fields will be added to the selected columns and they may make\notherwise duplicate rows appear to be distinct. Since the extra columns\ndon’t appear in the returned results (they are only there to support\nordering), it sometimes looks like non-distinct results are being returned. Similarly, if you use a values() query to restrict the columns\nselected, the columns used in any order_by() (or default model\nordering) will still be involved and may affect uniqueness of the results. The moral here is that if you are using distinct() be careful about\nordering by related models. Similarly, when using distinct() and values() together, be careful when ordering by fields not in the values() call. On PostgreSQL only, you can pass positional arguments ( *fields ) in order to\nspecify the names of fields to which the DISTINCT should apply. This\ntranslates to a SELECT DISTINCT ON SQL query. Here’s the difference. For a\nnormal distinct() call, the database compares each field in each row when\ndetermining which rows are distinct. For a distinct() call with specified\nfield names, the database will only compare the specified field names. Note When you specify field names, you must provide an order_by() in the QuerySet , and the fields in order_by() must start with the fields in distinct() , in the same order. For example, SELECT DISTINCT ON (a) gives you the first row for each\nvalue in column a . If you don’t specify an order, you’ll get some\narbitrary row. Examples (those after the first will only work on PostgreSQL): >>> Author . objects . distinct () [...] >>> Entry . objects . order_by ( \"pub_date\" ) . distinct ( \"pub_date\" ) [...] >>> Entry . objects . order_by ( \"blog\" ) . distinct ( \"blog\" ) [...] >>> Entry . objects . order_by ( \"author\" , \"pub_date\" ) . distinct ( \"author\" , \"pub_date\" ) [...] >>> Entry . objects . order_by ( \"blog__name\" , \"mod_date\" ) . distinct ( \"blog__name\" , \"mod_date\" ) [...] >>> Entry . objects . order_by ( \"author\" , \"pub_date\" ) . distinct ( \"author\" ) [...] Note Keep in mind that order_by() uses any default related model ordering\nthat has been defined. You might have to explicitly order by the relation _id or referenced field to make sure the DISTINCT ON expressions\nmatch those at the beginning of the ORDER BY clause. For example, if\nthe Blog model defined an ordering by name : Entry . objects . order_by ( \"blog\" ) . distinct ( \"blog\" ) …wouldn’t work because the query would be ordered by blog__name thus\nmismatching the DISTINCT ON expression. You’d have to explicitly order\nby the relation _id field ( blog_id in this case) or the referenced\none ( blog__pk ) to make sure both expressions match. values() ¶ values ( * fields , ** expressions ) ¶ Returns a QuerySet that returns dictionaries, rather than model instances,\nwhen used as an iterable. Each of those dictionaries represents an object, with the keys corresponding to\nthe attribute names of model objects. This example compares the dictionaries of values() with the normal model\nobjects: # This list contains a Blog object. >>> Blog . objects . filter ( name__startswith = \"Beatles\" ) <QuerySet [<Blog: Beatles Blog>]> # This list contains a dictionary. >>> Blog . objects . filter ( name__startswith = \"Beatles\" ) . values () <QuerySet [{'id': 1, 'name': 'Beatles Blog', 'tagline': 'All the latest Beatles news.'}]> The values() method takes optional positional arguments, *fields , which\nspecify field names to which the SELECT should be limited. If you specify\nthe fields, each dictionary will contain only the field keys/values for the\nfields you specify. If you don’t specify the fields, each dictionary will\ncontain a key and value for every field in the database table. Example: >>> Blog . objects . values () <QuerySet [{'id': 1, 'name': 'Beatles Blog', 'tagline': 'All the latest Beatles news.'}]> >>> Blog . objects . values ( \"id\" , \"name\" ) <QuerySet [{'id': 1, 'name': 'Beatles Blog'}]> The values() method also takes optional keyword arguments, **expressions , which are passed through to annotate() : >>> from django.db.models.functions import Lower >>> Blog . objects . values ( lower_name = Lower ( \"name\" )) <QuerySet [{'lower_name': 'beatles blog'}]> You can use built-in and custom lookups in\nordering. For example: >>> from django.db.models import CharField >>> from django.db.models.functions import Lower >>> CharField . register_lookup ( Lower ) >>> Blog . objects . values ( \"name__lower\" ) <QuerySet [{'name__lower': 'beatles blog'}]> An aggregate within a values() clause is applied before other arguments\nwithin the same values() clause. If you need to group by another value,\nadd it to an earlier values() clause instead. For example: >>> from django.db.models import Count >>> Blog . objects . values ( \"entry__authors\" , entries = Count ( \"entry\" )) <QuerySet [{'entry__authors': 1, 'entries': 20}, {'entry__authors': 1, 'entries': 13}]> >>> Blog . objects . values ( \"entry__authors\" ) . annotate ( entries = Count ( \"entry\" )) <QuerySet [{'entry__authors': 1, 'entries': 33}]> A few subtleties that are worth mentioning: If you have a field called foo that is a ForeignKey , the default values() call\nwill return a dictionary key called foo_id , since this is the name\nof the hidden model attribute that stores the actual value (the foo attribute refers to the related model). When you are calling values() and passing in field names, you can pass in either foo or foo_id and you will get back the same thing (the dictionary key\nwill match the field name you passed in). For example: >>> Entry . objects . values () <QuerySet [{'blog_id': 1, 'headline': 'First Entry', ...}, ...]> >>> Entry . objects . values ( \"blog\" ) <QuerySet [{'blog': 1}, ...]> >>> Entry . objects . values ( \"blog_id\" ) <QuerySet [{'blog_id': 1}, ...]> When using values() together with distinct() , be aware that\nordering can affect the results. See the note in distinct() for\ndetails. If you use a values() clause after an extra() call,\nany fields defined by a select argument in the extra() must\nbe explicitly included in the values() call. Any extra() call\nmade after a values() call will have its extra selected fields\nignored. Calling only() and defer() after values() doesn’t make\nsense, so doing so will raise a TypeError . Combining transforms and aggregates requires the use of two annotate() calls, either explicitly or as keyword arguments to values() . As above,\nif the transform has been registered on the relevant field type the first annotate() can be omitted, thus the following examples are equivalent: >>> from django.db.models import CharField , Count >>> from django.db.models.functions import Lower >>> CharField . register_lookup ( Lower ) >>> Blog . objects . values ( \"entry__authors__name__lower\" ) . annotate ( entries = Count ( \"entry\" )) <QuerySet [{'entry__authors__name__lower': 'test author', 'entries': 33}]> >>> Blog . objects . values ( entry__authors__name__lower = Lower ( \"entry__authors__name\" )) . annotate ( ... entries = Count ( \"entry\" ) ... ) <QuerySet [{'entry__authors__name__lower': 'test author', 'entries': 33}]> >>> Blog . objects . annotate ( entry__authors__name__lower = Lower ( \"entry__authors__name\" )) . values ( ... \"entry__authors__name__lower\" ... ) . annotate ( entries = Count ( \"entry\" )) <QuerySet [{'entry__authors__name__lower': 'test author', 'entries': 33}]> It is useful when you know you’re only going to need values from a small number\nof the available fields and you won’t need the functionality of a model\ninstance object. It’s more efficient to select only the fields you need to use. Finally, note that you can call filter() , order_by() , etc. after the values() call, that means that these two calls are identical: Blog . objects . values () . order_by ( \"id\" ) Blog . objects . order_by ( \"id\" ) . values () The people who made Django prefer to put all the SQL-affecting methods first,\nfollowed (optionally) by any output-affecting methods (such as values() ),\nbut it doesn’t really matter. This is your chance to really flaunt your\nindividualism. You can also refer to fields on related models with reverse relations through OneToOneField , ForeignKey and ManyToManyField attributes: >>> Blog . objects . values ( \"name\" , \"entry__headline\" ) <QuerySet [{'name': 'My blog', 'entry__headline': 'An entry'}, {'name': 'My blog', 'entry__headline': 'Another entry'}, ...]> Warning Because ManyToManyField attributes and reverse\nrelations can have multiple related rows, including these can have a\nmultiplier effect on the size of your result set. This will be especially\npronounced if you include multiple such fields in your values() query,\nin which case all possible combinations will be returned. Special values for JSONField on SQLite Due to the way the JSON_EXTRACT and JSON_TYPE SQL functions are\nimplemented on SQLite, and lack of the BOOLEAN data type, values() will return True , False , and None instead of \"true\" , \"false\" , and \"null\" strings for JSONField key transforms. values_list() ¶ values_list ( * fields , flat = False , named = False ) ¶ This is similar to values() except that instead of returning dictionaries,\nit returns tuples when iterated over. Each tuple contains the value from the\nrespective field or expression passed into the values_list() call — so the\nfirst item is the first field, etc. For example: >>> Entry . objects . values_list ( \"id\" , \"headline\" ) <QuerySet [(1, 'First entry'), ...]> >>> from django.db.models.functions import Lower >>> Entry . objects . values_list ( \"id\" , Lower ( \"headline\" )) <QuerySet [(1, 'first entry'), ...]> If you only pass in a single field, you can also pass in the flat parameter. If True , this will mean the returned results are single values,\nrather than 1-tuples. An example should make the difference clearer: >>> Entry . objects . values_list ( \"id\" ) . order_by ( \"id\" ) <QuerySet[(1,), (2,), (3,), ...]> >>> Entry . objects . values_list ( \"id\" , flat = True ) . order_by ( \"id\" ) <QuerySet [1, 2, 3, ...]> It is an error to pass in flat when there is more than one field. You can pass named=True to get results as a namedtuple() : >>> Entry . objects . values_list ( \"id\" , \"headline\" , named = True ) <QuerySet [Row(id=1, headline='First entry'), ...]> Using a named tuple may make use of the results more readable, at the expense\nof a small performance penalty for transforming the results into a named tuple. If you don’t pass any values to values_list() , it will return all the\nfields in the model, in the order they were declared. A common need is to get a specific field value of a certain model instance. To\nachieve that, use values_list() followed by a get() call: >>> Entry . objects . values_list ( \"headline\" , flat = True ) . get ( pk = 1 ) 'First entry' values() and values_list() are both intended as optimizations for a\nspecific use case: retrieving a subset of data without the overhead of creating\na model instance. This metaphor falls apart when dealing with many-to-many and\nother multivalued relations (such as the one-to-many relation of a reverse\nforeign key) because the “one row, one object” assumption doesn’t hold. For example, notice the behavior when querying across a ManyToManyField : >>> Author . objects . values_list ( \"name\" , \"entry__headline\" ) <QuerySet [('Noam Chomsky', 'Impressions of Gaza'), ('George Orwell', 'Why Socialists Do Not Believe in Fun'), ('George Orwell', 'In Defence of English Cooking'), ('Don Quixote', None)]> Authors with multiple entries appear multiple times and authors without any\nentries have None for the entry headline. Similarly, when querying a reverse foreign key, None appears for entries\nnot having any author: >>> Entry . objects . values_list ( \"authors\" ) <QuerySet [('Noam Chomsky',), ('George Orwell',), (None,)]> Special values for JSONField on SQLite Due to the way the JSON_EXTRACT and JSON_TYPE SQL functions are\nimplemented on SQLite, and lack of the BOOLEAN data type, values_list() will return True , False , and None instead of \"true\" , \"false\" , and \"null\" strings for JSONField key transforms. dates() ¶ dates ( field , kind , order = 'ASC' ) ¶ Returns a QuerySet that evaluates to a list of datetime.date objects representing all available dates of a particular kind within the\ncontents of the QuerySet . field should be the name of a DateField of your model. kind should be either \"year\" , \"month\" , \"week\" , or \"day\" .\nEach datetime.date object in the result list is “truncated” to the\ngiven type . \"year\" returns a list of all distinct year values for the field. \"month\" returns a list of all distinct year/month values for the\nfield. \"week\" returns a list of all distinct year/week values for the field. All\ndates will be a Monday. \"day\" returns a list of all distinct year/month/day values for the\nfield. order , which defaults to 'ASC' , should be either 'ASC' or 'DESC' . This specifies how to order the results. Examples: >>> Entry . objects . dates ( \"pub_date\" , \"year\" ) [datetime.date(2005, 1, 1)] >>> Entry . objects . dates ( \"pub_date\" , \"month\" ) [datetime.date(2005, 2, 1), datetime.date(2005, 3, 1)] >>> Entry . objects . dates ( \"pub_date\" , \"week\" ) [datetime.date(2005, 2, 14), datetime.date(2005, 3, 14)] >>> Entry . objects . dates ( \"pub_date\" , \"day\" ) [datetime.date(2005, 2, 20), datetime.date(2005, 3, 20)] >>> Entry . objects . dates ( \"pub_date\" , \"day\" , order = \"DESC\" ) [datetime.date(2005, 3, 20), datetime.date(2005, 2, 20)] >>> Entry . objects . filter ( headline__contains = \"Lennon\" ) . dates ( \"pub_date\" , \"day\" ) [datetime.date(2005, 3, 20)] datetimes() ¶ datetimes ( field_name , kind , order = 'ASC' , tzinfo = None ) ¶ Returns a QuerySet that evaluates to a list of datetime.datetime objects representing all available dates of a particular kind within the\ncontents of the QuerySet . field_name should be the name of a DateTimeField of your model. kind should be either \"year\" , \"month\" , \"week\" , \"day\" , \"hour\" , \"minute\" , or \"second\" . Each datetime.datetime object in the result list is “truncated” to the given type . order , which defaults to 'ASC' , should be either 'ASC' or 'DESC' . This specifies how to order the results. tzinfo defines the time zone to which datetimes are converted prior to\ntruncation. Indeed, a given datetime has different representations depending\non the time zone in use. This parameter must be a datetime.tzinfo object. If it’s None , Django uses the current time zone . It has no effect when USE_TZ is False . Note This function performs time zone conversions directly in the database.\nAs a consequence, your database must be able to interpret the value of tzinfo.tzname(None) . This translates into the following requirements: SQLite: no requirements. Conversions are performed in Python. PostgreSQL: no requirements (see Time Zones ). Oracle: no requirements (see Choosing a Time Zone File ). MySQL: load the time zone tables with mysql_tzinfo_to_sql . none() ¶ none () ¶ Calling none() will create a queryset that never returns any objects and no\nquery will be executed when accessing the results. A qs.none() queryset\nis an instance of EmptyQuerySet . Examples: >>> Entry . objects . none () <QuerySet []> >>> from django.db.models.query import EmptyQuerySet >>> isinstance ( Entry . objects . none (), EmptyQuerySet ) True all() ¶ all () ¶ Returns a copy of the current QuerySet (or QuerySet subclass).  This\ncan be useful in situations where you might want to pass in either a model\nmanager or a QuerySet and do further filtering on the result. After calling all() on either object, you’ll definitely have a QuerySet to work with. When a QuerySet is evaluated , it\ntypically caches its results. If the data in the database might have changed\nsince a QuerySet was evaluated, you can get updated results for the same\nquery by calling all() on a previously evaluated QuerySet . union() ¶ union ( * other_qs , all = False ) ¶ Uses SQL’s UNION operator to combine the results of two or more QuerySet s. For example: >>> qs1 . union ( qs2 , qs3 ) The UNION operator selects only distinct values by default. To allow\nduplicate values, use the all=True argument. union() , intersection() , and difference() return model instances\nof the type of the first QuerySet even if the arguments are QuerySet s\nof other models. Passing different models works as long as the SELECT list\nis the same in all QuerySet s (at least the types, the names don’t matter\nas long as the types are in the same order). In such cases, you must use the\ncolumn names from the first QuerySet in QuerySet methods applied to the\nresulting QuerySet . For example: >>> qs1 = Author . objects . values_list ( \"name\" ) >>> qs2 = Entry . objects . values_list ( \"headline\" ) >>> qs1 . union ( qs2 ) . order_by ( \"name\" ) In addition, only LIMIT , OFFSET , COUNT(*) , ORDER BY , and\nspecifying columns (i.e. slicing, count() , exists() , order_by() , and values() / values_list() ) are allowed\non the resulting QuerySet . Further, databases place restrictions on\nwhat operations are allowed in the combined queries. For example, most\ndatabases don’t allow LIMIT or OFFSET in the combined queries. intersection() ¶ intersection ( * other_qs ) ¶ Uses SQL’s INTERSECT operator to return the shared elements of two or more QuerySet s. For example: >>> qs1 . intersection ( qs2 , qs3 ) See union() for some restrictions. difference() ¶ difference ( * other_qs ) ¶ Uses SQL’s EXCEPT operator to keep only elements present in the QuerySet but not in some other QuerySet s. For example: >>> qs1 . difference ( qs2 , qs3 ) See union() for some restrictions. select_related() ¶ select_related ( * fields ) ¶ Returns a QuerySet that will “follow” foreign-key relationships, selecting\nadditional related-object data when it executes its query. This is a\nperformance booster which results in a single more complex query but means\nlater use of foreign-key relationships won’t require database queries. The following examples illustrate the difference between plain lookups and select_related() lookups. Here’s standard lookup: # Hits the database. e = Entry . objects . get ( id = 5 ) # Hits the database again to get the related Blog object. b = e . blog And here’s select_related lookup: # Hits the database. e = Entry . objects . select_related ( \"blog\" ) . get ( id = 5 ) # Doesn't hit the database, because e.blog has been prepopulated # in the previous query. b = e . blog You can use select_related() with any queryset of objects: from django.utils import timezone # Find all the blogs with entries scheduled to be published in the future. blogs = set () for e in Entry . objects . filter ( pub_date__gt = timezone . now ()) . select_related ( \"blog\" ): # Without select_related(), this would make a database query for each # loop iteration in order to fetch the related blog for each entry. blogs . add ( e . blog ) The order of filter() and select_related() chaining isn’t important.\nThese querysets are equivalent: Entry . objects . filter ( pub_date__gt = timezone . now ()) . select_related ( \"blog\" ) Entry . objects . select_related ( \"blog\" ) . filter ( pub_date__gt = timezone . now ()) You can follow foreign keys in a similar way to querying them. If you have the\nfollowing models: from django.db import models class City ( models . Model ): # ... pass class Person ( models . Model ): # ... hometown = models . ForeignKey ( City , on_delete = models . SET_NULL , blank = True , null = True , ) class Book ( models . Model ): # ... author = models . ForeignKey ( Person , on_delete = models . CASCADE ) … then a call to Book.objects.select_related('author__hometown').get(id=4) will cache the related Person and the related City : # Hits the database with joins to the author and hometown tables. b = Book . objects . select_related ( \"author__hometown\" ) . get ( id = 4 ) p = b . author # Doesn't hit the database. c = p . hometown # Doesn't hit the database. # Without select_related()... b = Book . objects . get ( id = 4 ) # Hits the database. p = b . author # Hits the database. c = p . hometown # Hits the database. You can refer to any ForeignKey or OneToOneField relation in the list of fields\npassed to select_related() . You can also refer to the reverse direction of a OneToOneField in the list of fields passed to select_related — that is, you can traverse a OneToOneField back to the object on which the field\nis defined. Instead of specifying the field name, use the related_name for the field on the related object. There may be some situations where you wish to call select_related() with a\nlot of related objects, or where you don’t know all of the relations. In these\ncases it is possible to call select_related() with no arguments. This will\nfollow all non-null foreign keys it can find - nullable foreign keys must be\nspecified. This is not recommended in most cases as it is likely to make the\nunderlying query more complex, and return more data, than is actually needed. If you need to clear the list of related fields added by past calls of select_related on a QuerySet , you can pass None as a parameter: >>> without_relations = queryset . select_related ( None ) Chaining select_related calls works in a similar way to other methods -\nthat is that select_related('foo', 'bar') is equivalent to select_related('foo').select_related('bar') . prefetch_related() ¶ prefetch_related ( * lookups ) ¶ Returns a QuerySet that will automatically retrieve, in a single batch,\nrelated objects for each of the specified lookups. This has a similar purpose to select_related , in that both are designed to\nstop the deluge of database queries that is caused by accessing related objects,\nbut the strategy is quite different. select_related works by creating an SQL join and including the fields of the\nrelated object in the SELECT statement. For this reason, select_related gets the related objects in the same database query. However, to avoid the much\nlarger result set that would result from joining across a ‘many’ relationship, select_related is limited to single-valued relationships - foreign key and\none-to-one. prefetch_related , on the other hand, does a separate lookup for each\nrelationship, and does the ‘joining’ in Python. This allows it to prefetch\nmany-to-many, many-to-one, and GenericRelation objects which\ncannot be done using select_related , in addition to the foreign key and\none-to-one relationships that are supported by select_related . It also\nsupports prefetching of GenericForeignKey , however, the\nqueryset for each ContentType must be provided in the querysets parameter of GenericPrefetch . Changed in Django 5.0: Support for prefetching GenericForeignKey with\nnon-homogeneous set of results was added. For example, suppose you have these models: from django.db import models class Topping ( models . Model ): name = models . CharField ( max_length = 30 ) class Pizza ( models . Model ): name = models . CharField ( max_length = 50 ) toppings = models . ManyToManyField ( Topping ) def __str__ ( self ): return \" %s ( %s )\" % ( self . name , \", \" . join ( topping . name for topping in self . toppings . all ()), ) and run: >>> Pizza . objects . all () [\"Hawaiian (ham, pineapple)\", \"Seafood (prawns, smoked salmon)\"... The problem with this is that every time Pizza.__str__() asks for self.toppings.all() it has to query the database, so Pizza.objects.all() will run a query on the Toppings table for every item in the Pizza QuerySet . We can reduce to just two queries using prefetch_related : >>> Pizza . objects . prefetch_related ( \"toppings\" ) This implies a self.toppings.all() for each Pizza ; now each time self.toppings.all() is called, instead of having to go to the database for\nthe items, it will find them in a prefetched QuerySet cache that was\npopulated in a single query. That is, all the relevant toppings will have been fetched in a single query,\nand used to make QuerySets that have a pre-filled cache of the relevant\nresults; these QuerySets are then used in the self.toppings.all() calls. The additional queries in prefetch_related() are executed after the QuerySet has begun to be evaluated and the primary query has been executed. Note that there is no mechanism to prevent another database query from altering\nthe items in between the execution of the primary query and the additional\nqueries, which could produce an inconsistent result. For example, if a Pizza is deleted after the primary query has executed, its toppings will\nnot be returned in the additional query, and it will seem like the pizza has no\ntoppings: >>> Pizza . objects . prefetch_related ( \"toppings\" ) #  \"Hawaiian\" Pizza was deleted in another shell. <QuerySet [<Pizza: Hawaiian ()>, <Pizza: Seafood (prawns, smoked salmon)>]> If you have an iterable of model instances, you can prefetch related attributes\non those instances using the prefetch_related_objects() function. Note that the result cache of the primary QuerySet and all specified related\nobjects will then be fully loaded into memory. This changes the typical\nbehavior of QuerySets , which normally try to avoid loading all objects into\nmemory before they are needed, even after a query has been executed in the\ndatabase. Note Remember that, as always with QuerySets , any subsequent chained methods\nwhich imply a different database query will ignore previously cached\nresults, and retrieve data using a fresh database query. So, if you write\nthe following: >>> pizzas = Pizza . objects . prefetch_related ( \"toppings\" ) >>> [ list ( pizza . toppings . filter ( spicy = True )) for pizza in pizzas ] …then the fact that pizza.toppings.all() has been prefetched will not\nhelp you. The prefetch_related('toppings') implied pizza.toppings.all() , but pizza.toppings.filter() is a new and\ndifferent query. The prefetched cache can’t help here; in fact it hurts\nperformance, since you have done a database query that you haven’t used. So\nuse this feature with caution! Also, if you call the database-altering methods add() , create() , remove() , clear() or set() , on related managers ,\nany prefetched cache for the relation will be cleared. You can also use the normal join syntax to do related fields of related\nfields. Suppose we have an additional model to the example above: class Restaurant ( models . Model ): pizzas = models . ManyToManyField ( Pizza , related_name = \"restaurants\" ) best_pizza = models . ForeignKey ( Pizza , related_name = \"championed_by\" , on_delete = models . CASCADE ) The following are all legal: >>> Restaurant . objects . prefetch_related ( \"pizzas__toppings\" ) This will prefetch all pizzas belonging to restaurants, and all toppings\nbelonging to those pizzas. This will result in a total of 3 database queries -\none for the restaurants, one for the pizzas, and one for the toppings. >>> Restaurant . objects . prefetch_related ( \"best_pizza__toppings\" ) This will fetch the best pizza and all the toppings for the best pizza for each\nrestaurant. This will be done in 3 database queries - one for the restaurants,\none for the ‘best pizzas’, and one for the toppings. The best_pizza relationship could also be fetched using select_related to reduce the query count to 2: >>> Restaurant . objects . select_related ( \"best_pizza\" ) . prefetch_related ( \"best_pizza__toppings\" ) Since the prefetch is executed after the main query (which includes the joins\nneeded by select_related ), it is able to detect that the best_pizza objects have already been fetched, and it will skip fetching them again. Chaining prefetch_related calls will accumulate the lookups that are\nprefetched. To clear any prefetch_related behavior, pass None as a\nparameter: >>> non_prefetched = qs . prefetch_related ( None ) One difference to note when using prefetch_related is that objects created\nby a query can be shared between the different objects that they are related to\ni.e. a single Python model instance can appear at more than one point in the\ntree of objects that are returned. This will normally happen with foreign key\nrelationships. Typically this behavior will not be a problem, and will in fact\nsave both memory and CPU time. While prefetch_related supports prefetching GenericForeignKey relationships, the number of queries will depend on the data. Since a GenericForeignKey can reference data in multiple tables, one query per table\nreferenced is needed, rather than one query for all the items. There could be\nadditional queries on the ContentType table if the relevant rows have not\nalready been fetched. prefetch_related in most cases will be implemented using an SQL query that\nuses the ‘IN’ operator. This means that for a large QuerySet a large ‘IN’ clause\ncould be generated, which, depending on the database, might have performance\nproblems of its own when it comes to parsing or executing the SQL query. Always\nprofile for your use case! If you use iterator() to run the query, prefetch_related() calls will\nonly be observed if a value for chunk_size is provided. You can use the Prefetch object to further control\nthe prefetch operation. In its simplest form Prefetch is equivalent to the traditional string based\nlookups: >>> from django.db.models import Prefetch >>> Restaurant . objects . prefetch_related ( Prefetch ( \"pizzas__toppings\" )) You can provide a custom queryset with the optional queryset argument.\nThis can be used to change the default ordering of the queryset: >>> Restaurant . objects . prefetch_related ( ... Prefetch ( \"pizzas__toppings\" , queryset = Toppings . objects . order_by ( \"name\" )) ... ) Or to call select_related() when\napplicable to reduce the number of queries even further: >>> Pizza . objects . prefetch_related ( ... Prefetch ( \"restaurants\" , queryset = Restaurant . objects . select_related ( \"best_pizza\" )) ... ) You can also assign the prefetched result to a custom attribute with the optional to_attr argument. The result will be stored directly in a list. This allows prefetching the same relation multiple times with a different QuerySet ; for instance: >>> vegetarian_pizzas = Pizza . objects . filter ( vegetarian = True ) >>> Restaurant . objects . prefetch_related ( ... Prefetch ( \"pizzas\" , to_attr = \"menu\" ), ... Prefetch ( \"pizzas\" , queryset = vegetarian_pizzas , to_attr = \"vegetarian_menu\" ), ... ) Lookups created with custom to_attr can still be traversed as usual by other\nlookups: >>> vegetarian_pizzas = Pizza . objects . filter ( vegetarian = True ) >>> Restaurant . objects . prefetch_related ( ... Prefetch ( \"pizzas\" , queryset = vegetarian_pizzas , to_attr = \"vegetarian_menu\" ), ... \"vegetarian_menu__toppings\" , ... ) Using to_attr is recommended when filtering down the prefetch result as it is\nless ambiguous than storing a filtered result in the related manager’s cache: >>> queryset = Pizza . objects . filter ( vegetarian = True ) >>> >>> # Recommended: >>> restaurants = Restaurant . objects . prefetch_related ( ... Prefetch ( \"pizzas\" , queryset = queryset , to_attr = \"vegetarian_pizzas\" ) ... ) >>> vegetarian_pizzas = restaurants [ 0 ] . vegetarian_pizzas >>> >>> # Not recommended: >>> restaurants = Restaurant . objects . prefetch_related ( ... Prefetch ( \"pizzas\" , queryset = queryset ), ... ) >>> vegetarian_pizzas = restaurants [ 0 ] . pizzas . all () Custom prefetching also works with single related relations like\nforward ForeignKey or OneToOneField . Generally you’ll want to use select_related() for these relations, but there are a number of cases\nwhere prefetching with a custom QuerySet is useful: You want to use a QuerySet that performs further prefetching\non related models. You want to prefetch only a subset of the related objects. You want to use performance optimization techniques like deferred fields : >>> queryset = Pizza . objects . only ( \"name\" ) >>> >>> restaurants = Restaurant . objects . prefetch_related ( ... Prefetch ( \"best_pizza\" , queryset = queryset ) ... ) When using multiple databases, Prefetch will respect your choice of\ndatabase. If the inner query does not specify a database, it will use the\ndatabase selected by the outer query. All of the following are valid: >>> # Both inner and outer queries will use the 'replica' database >>> Restaurant . objects . prefetch_related ( \"pizzas__toppings\" ) . using ( \"replica\" ) >>> Restaurant . objects . prefetch_related ( ... Prefetch ( \"pizzas__toppings\" ), ... ) . using ( \"replica\" ) >>> >>> # Inner will use the 'replica' database; outer will use 'default' database >>> Restaurant . objects . prefetch_related ( ... Prefetch ( \"pizzas__toppings\" , queryset = Toppings . objects . using ( \"replica\" )), ... ) >>> >>> # Inner will use 'replica' database; outer will use 'cold-storage' database >>> Restaurant . objects . prefetch_related ( ... Prefetch ( \"pizzas__toppings\" , queryset = Toppings . objects . using ( \"replica\" )), ... ) . using ( \"cold-storage\" ) Note The ordering of lookups matters. Take the following examples: >>> prefetch_related ( \"pizzas__toppings\" , \"pizzas\" ) This works even though it’s unordered because 'pizzas__toppings' already contains all the needed information, therefore the second argument 'pizzas' is actually redundant. >>> prefetch_related ( \"pizzas__toppings\" , Prefetch ( \"pizzas\" , queryset = Pizza . objects . all ())) This will raise a ValueError because of the attempt to redefine the\nqueryset of a previously seen lookup. Note that an implicit queryset was\ncreated to traverse 'pizzas' as part of the 'pizzas__toppings' lookup. >>> prefetch_related ( \"pizza_list__toppings\" , Prefetch ( \"pizzas\" , to_attr = \"pizza_list\" )) This will trigger an AttributeError because 'pizza_list' doesn’t exist yet\nwhen 'pizza_list__toppings' is being processed. This consideration is not limited to the use of Prefetch objects. Some\nadvanced techniques may require that the lookups be performed in a\nspecific order to avoid creating extra queries; therefore it’s recommended\nto always carefully order prefetch_related arguments. extra() ¶ extra ( select = None , where = None , params = None , tables = None , order_by = None , select_params = None ) ¶ Sometimes, the Django query syntax by itself can’t easily express a complex WHERE clause. For these edge cases, Django provides the extra() QuerySet modifier — a hook for injecting specific clauses into the SQL\ngenerated by a QuerySet . Use this method as a last resort This is an old API that we aim to deprecate at some point in the future.\nUse it only if you cannot express your query using other queryset methods.\nIf you do need to use it, please file a ticket using the QuerySet.extra\nkeyword with your use case (please check the list of existing tickets first) so\nthat we can enhance the QuerySet API to allow removing extra() . We are\nno longer improving or fixing bugs for this method. For example, this use of extra() : >>> qs . extra ( ... select = { \"val\" : \"select col from sometable where othercol = %s \" }, ... select_params = ( someparam ,), ... ) is equivalent to: >>> qs . annotate ( val = RawSQL ( \"select col from sometable where othercol = %s \" , ( someparam ,))) The main benefit of using RawSQL is\nthat you can set output_field if needed. The main downside is that if\nyou refer to some table alias of the queryset in the raw SQL, then it is\npossible that Django might change that alias (for example, when the\nqueryset is used as a subquery in yet another query). Warning You should be very careful whenever you use extra() . Every time you use\nit, you should escape any parameters that the user can control by using params in order to protect against SQL injection attacks. You also must not quote placeholders in the SQL string. This example is\nvulnerable to SQL injection because of the quotes around %s : SELECT col FROM sometable WHERE othercol = '%s' # unsafe ! You can read more about how Django’s SQL injection protection works. By definition, these extra lookups may not be portable to different database\nengines (because you’re explicitly writing SQL code) and violate the DRY\nprinciple, so you should avoid them if possible. Specify one or more of params , select , where or tables . None\nof the arguments is required, but you should use at least one of them. select The select argument lets you put extra fields in the SELECT clause.  It should be a dictionary mapping attribute names to SQL\nclauses to use to calculate that attribute. Example: Entry . objects . extra ( select = { \"is_recent\" : \"pub_date > '2006-01-01'\" }) As a result, each Entry object will have an extra attribute, is_recent , a boolean representing whether the entry’s pub_date is greater than Jan. 1, 2006. Django inserts the given SQL snippet directly into the SELECT statement, so the resulting SQL of the above example would be something like: SELECT blog_entry . * , ( pub_date > '2006-01-01' ) AS is_recent FROM blog_entry ; The next example is more advanced; it does a subquery to give each\nresulting Blog object an entry_count attribute, an integer count\nof associated Entry objects: Blog . objects . extra ( select = { \"entry_count\" : \"SELECT COUNT(*) FROM blog_entry WHERE blog_entry.blog_id = blog_blog.id\" }, ) In this particular case, we’re exploiting the fact that the query will\nalready contain the blog_blog table in its FROM clause. The resulting SQL of the above example would be: SELECT blog_blog . * , ( SELECT COUNT ( * ) FROM blog_entry WHERE blog_entry . blog_id = blog_blog . id ) AS entry_count FROM blog_blog ; Note that the parentheses required by most database engines around\nsubqueries are not required in Django’s select clauses. In some rare cases, you might wish to pass parameters to the SQL\nfragments in extra(select=...) . For this purpose, use the select_params parameter. This will work, for example: Blog . objects . extra ( select = { \"a\" : \" %s \" , \"b\" : \" %s \" }, select_params = ( \"one\" , \"two\" ), ) If you need to use a literal %s inside your select string, use\nthe sequence %%s . where / tables You can define explicit SQL WHERE clauses — perhaps to perform\nnon-explicit joins — by using where . You can manually add tables to\nthe SQL FROM clause by using tables . where and tables both take a list of strings. All where parameters are “AND”ed to any other search criteria. Example: Entry . objects . extra ( where = [ \"foo='a' OR bar = 'a'\" , \"baz = 'a'\" ]) …translates (roughly) into the following SQL: SELECT * FROM blog_entry WHERE ( foo = 'a' OR bar = 'a' ) AND ( baz = 'a' ) Be careful when using the tables parameter if you’re specifying\ntables that are already used in the query. When you add extra tables\nvia the tables parameter, Django assumes you want that table\nincluded an extra time, if it is already included. That creates a\nproblem, since the table name will then be given an alias. If a table\nappears multiple times in an SQL statement, the second and subsequent\noccurrences must use aliases so the database can tell them apart. If\nyou’re referring to the extra table you added in the extra where parameter this is going to cause errors. Normally you’ll only be adding extra tables that don’t already appear\nin the query. However, if the case outlined above does occur, there are\na few solutions. First, see if you can get by without including the\nextra table and use the one already in the query. If that isn’t\npossible, put your extra() call at the front of the queryset\nconstruction so that your table is the first use of that table.\nFinally, if all else fails, look at the query produced and rewrite your where addition to use the alias given to your extra table. The\nalias will be the same each time you construct the queryset in the same\nway, so you can rely upon the alias name to not change. order_by If you need to order the resulting queryset using some of the new\nfields or tables you have included via extra() use the order_by parameter to extra() and pass in a sequence of strings. These\nstrings should either be model fields (as in the normal order_by() method on querysets), of the form table_name.column_name or an alias for a column that you specified\nin the select parameter to extra() . For example: q = Entry . objects . extra ( select = { \"is_recent\" : \"pub_date > '2006-01-01'\" }) q = q . extra ( order_by = [ \"-is_recent\" ]) This would sort all the items for which is_recent is true to the\nfront of the result set ( True sorts before False in a\ndescending ordering). This shows, by the way, that you can make multiple calls to extra() and it will behave as you expect (adding new constraints each time). params The where parameter described above may use standard Python\ndatabase string placeholders — '%s' to indicate parameters the\ndatabase engine should automatically quote. The params argument is\na list of any extra parameters to be substituted. Example: Entry . objects . extra ( where = [ \"headline= %s \" ], params = [ \"Lennon\" ]) Always use params instead of embedding values directly into where because params will ensure values are quoted correctly\naccording to your particular backend. For example, quotes will be\nescaped correctly. Bad: Entry . objects . extra ( where = [ \"headline='Lennon'\" ]) Good: Entry . objects . extra ( where = [ \"headline= %s \" ], params = [ \"Lennon\" ]) Warning If you are performing queries on MySQL, note that MySQL’s silent type coercion\nmay cause unexpected results when mixing types. If you query on a string\ntype column, but with an integer value, MySQL will coerce the types of all values\nin the table to an integer before performing the comparison. For example, if your\ntable contains the values 'abc' , 'def' and you query for WHERE mycolumn=0 ,\nboth rows will match. To prevent this, perform the correct typecasting\nbefore using the value in a query. defer() ¶ defer ( * fields ) ¶ In some complex data-modeling situations, your models might contain a lot of\nfields, some of which could contain a lot of data (for example, text fields),\nor require expensive processing to convert them to Python objects. If you are\nusing the results of a queryset in some situation where you don’t know\nif you need those particular fields when you initially fetch the data, you can\ntell Django not to retrieve them from the database. This is done by passing the names of the fields to not load to defer() : Entry . objects . defer ( \"headline\" , \"body\" ) A queryset that has deferred fields will still return model instances. Each\ndeferred field will be retrieved from the database if you access that field\n(one at a time, not all the deferred fields at once). Note Deferred fields will not lazy-load like this from asynchronous code.\nInstead, you will get a SynchronousOnlyOperation exception. If you are\nwriting asynchronous code, you should not try to access any fields that you defer() . You can make multiple calls to defer() . Each call adds new fields to the\ndeferred set: # Defers both the body and headline fields. Entry . objects . defer ( \"body\" ) . filter ( rating = 5 ) . defer ( \"headline\" ) The order in which fields are added to the deferred set does not matter.\nCalling defer() with a field name that has already been deferred is\nharmless (the field will still be deferred). You can defer loading of fields in related models (if the related models are\nloading via select_related() ) by using the standard double-underscore\nnotation to separate related fields: Blog . objects . select_related () . defer ( \"entry__headline\" , \"entry__body\" ) If you want to clear the set of deferred fields, pass None as a parameter\nto defer() : # Load all fields immediately. my_queryset . defer ( None ) Some fields in a model won’t be deferred, even if you ask for them. You can\nnever defer the loading of the primary key. If you are using select_related() to retrieve related models, you shouldn’t defer the\nloading of the field that connects from the primary model to the related\none, doing so will result in an error. Similarly, calling defer() (or its counterpart only() ) including an\nargument from an aggregation (e.g. using the result of annotate() )\ndoesn’t make sense: doing so will raise an exception. The aggregated values\nwill always be fetched into the resulting queryset. Note The defer() method (and its cousin, only() , below) are only for\nadvanced use-cases. They provide an optimization for when you have analyzed\nyour queries closely and understand exactly what information you need and\nhave measured that the difference between returning the fields you need and\nthe full set of fields for the model will be significant. Even if you think you are in the advanced use-case situation, only use defer() when you cannot, at queryset load time, determine if you will\nneed the extra fields or not . If you are frequently loading and using a\nparticular subset of your data, the best choice you can make is to\nnormalize your models and put the non-loaded data into a separate model\n(and database table). If the columns must stay in the one table for some\nreason, create a model with Meta.managed = False (see the managed attribute documentation)\ncontaining just the fields you normally need to load and use that where you\nmight otherwise call defer() . This makes your code more explicit to the\nreader, is slightly faster and consumes a little less memory in the Python\nprocess. For example, both of these models use the same underlying database table: class CommonlyUsedModel ( models . Model ): f1 = models . CharField ( max_length = 10 ) class Meta : managed = False db_table = \"app_largetable\" class ManagedModel ( models . Model ): f1 = models . CharField ( max_length = 10 ) f2 = models . CharField ( max_length = 10 ) class Meta : db_table = \"app_largetable\" # Two equivalent QuerySets: CommonlyUsedModel . objects . all () ManagedModel . objects . defer ( \"f2\" ) If many fields need to be duplicated in the unmanaged model, it may be best\nto create an abstract model with the shared fields and then have the\nunmanaged and managed models inherit from the abstract model. Note When calling save() for instances with\ndeferred fields, only the loaded fields will be saved. See save() for more details. only() ¶ only ( * fields ) ¶ The only() method is essentially the opposite of defer() . Only the\nfields passed into this method and that are not already specified as deferred\nare loaded immediately when the queryset is evaluated. If you have a model where almost all the fields need to be deferred, using only() to specify the complementary set of fields can result in simpler\ncode. Suppose you have a model with fields name , age and biography . The\nfollowing two querysets are the same, in terms of deferred fields: Person . objects . defer ( \"age\" , \"biography\" ) Person . objects . only ( \"name\" ) Whenever you call only() it replaces the set of fields to load\nimmediately. The method’s name is mnemonic: only those fields are loaded\nimmediately; the remainder are deferred. Thus, successive calls to only() result in only the final fields being considered: # This will defer all fields except the headline. Entry . objects . only ( \"body\" , \"rating\" ) . only ( \"headline\" ) Since defer() acts incrementally (adding fields to the deferred list), you\ncan combine calls to only() and defer() and things will behave\nlogically: # Final result is that everything except \"headline\" is deferred. Entry . objects . only ( \"headline\" , \"body\" ) . defer ( \"body\" ) # Final result loads headline immediately. Entry . objects . defer ( \"body\" ) . only ( \"headline\" , \"body\" ) All of the cautions in the note for the defer() documentation apply to only() as well. Use it cautiously and only after exhausting your other\noptions. Using only() and omitting a field requested using select_related() is\nan error as well. On the other hand, invoking only() without any arguments,\nwill return every field (including annotations) fetched by the queryset. As with defer() , you cannot access the non-loaded fields from asynchronous\ncode and expect them to load. Instead, you will get a SynchronousOnlyOperation exception. Ensure that all fields you might access\nare in your only() call. Note When calling save() for instances with\ndeferred fields, only the loaded fields will be saved. See save() for more details. Note When using defer() after only() the fields in defer() will\noverride only() for fields that are listed in both. using() ¶ using ( alias ) ¶ This method is for controlling which database the QuerySet will be\nevaluated against if you are using more than one database.  The only argument\nthis method takes is the alias of a database, as defined in DATABASES . For example: # queries the database with the 'default' alias. >>> Entry . objects . all () # queries the database with the 'backup' alias >>> Entry . objects . using ( \"backup\" ) select_for_update() ¶ select_for_update ( nowait = False , skip_locked = False , of = () , no_key = False ) ¶ Returns a queryset that will lock rows until the end of the transaction,\ngenerating a SELECT ... FOR UPDATE SQL statement on supported databases. For example: from django.db import transaction entries = Entry . objects . select_for_update () . filter ( author = request . user ) with transaction . atomic (): for entry in entries : ... When the queryset is evaluated ( for entry in entries in this case), all\nmatched entries will be locked until the end of the transaction block, meaning\nthat other transactions will be prevented from changing or acquiring locks on\nthem. Usually, if another transaction has already acquired a lock on one of the\nselected rows, the query will block until the lock is released. If this is\nnot the behavior you want, call select_for_update(nowait=True) . This will\nmake the call non-blocking. If a conflicting lock is already acquired by\nanother transaction, DatabaseError will be raised when the\nqueryset is evaluated. You can also ignore locked rows by using select_for_update(skip_locked=True) instead. The nowait and skip_locked are mutually exclusive and attempts to call select_for_update() with both options enabled will result in a ValueError . By default, select_for_update() locks all rows that are selected by the\nquery. For example, rows of related objects specified in select_related() are locked in addition to rows of the queryset’s model. If this isn’t desired,\nspecify the related objects you want to lock in select_for_update(of=(...)) using the same fields syntax as select_related() . Use the value 'self' to refer to the queryset’s model. Lock parents models in select_for_update(of=(...)) If you want to lock parents models when using multi-table inheritance , you must specify parent link fields (by default <parent_model_name>_ptr ) in the of argument. For example: Restaurant . objects . select_for_update ( of = ( \"self\" , \"place_ptr\" )) Using select_for_update(of=(...)) with specified fields If you want to lock models and specify selected fields, e.g. using values() , you must select at least one field from each model in the of argument. Models without selected fields will not be locked. On PostgreSQL only, you can pass no_key=True in order to acquire a weaker\nlock, that still allows creating rows that merely reference locked rows\n(through a foreign key, for example) while the lock is in place. The\nPostgreSQL documentation has more details about row-level lock modes . You can’t use select_for_update() on nullable relations: >>> Person . objects . select_related ( \"hometown\" ) . select_for_update () Traceback (most recent call last): ... django.db.utils.NotSupportedError : FOR UPDATE cannot be applied to the nullable side of an outer join To avoid that restriction, you can exclude null objects if you don’t care about\nthem: >>> Person . objects . select_related ( \"hometown\" ) . select_for_update () . exclude ( hometown = None ) <QuerySet [<Person: ...)>, ...]> The postgresql , oracle , and mysql database backends support select_for_update() . However, MariaDB only supports the nowait argument, MariaDB 10.6+ also supports the skip_locked argument, and MySQL\nsupports the nowait , skip_locked , and of arguments. The no_key argument is only supported on PostgreSQL. Passing nowait=True , skip_locked=True , no_key=True , or of to select_for_update() using database backends that do not support these\noptions, such as MySQL, raises a NotSupportedError . This\nprevents code from unexpectedly blocking. Evaluating a queryset with select_for_update() in autocommit mode on\nbackends which support SELECT ... FOR UPDATE is a TransactionManagementError error because the\nrows are not locked in that case. If allowed, this would facilitate data\ncorruption and could easily be caused by calling code that expects to be run in\na transaction outside of one. Using select_for_update() on backends which do not support SELECT ... FOR UPDATE (such as SQLite) will have no effect. SELECT ... FOR UPDATE will not be added to the query, and an error isn’t\nraised if select_for_update() is used in autocommit mode. Warning Although select_for_update() normally fails in autocommit mode, since TestCase automatically wraps each test in a\ntransaction, calling select_for_update() in a TestCase even outside\nan atomic() block will (perhaps unexpectedly)\npass without raising a TransactionManagementError . To properly test select_for_update() you should use TransactionTestCase . Certain expressions may not be supported PostgreSQL doesn’t support select_for_update() with Window expressions. raw() ¶ raw ( raw_query , params = () , translations = None , using = None ) ¶ Takes a raw SQL query, executes it, and returns a django.db.models.query.RawQuerySet instance. This RawQuerySet instance\ncan be iterated over just like a normal QuerySet to provide object\ninstances. See the Performing raw SQL queries for more information. Warning raw() always triggers a new query and doesn’t account for previous\nfiltering. As such, it should generally be called from the Manager or\nfrom a fresh QuerySet instance. Operators that return new QuerySet s ¶ Combined querysets must use the same model. AND ( & ) ¶ Combines two QuerySet s using the SQL AND operator in a manner similar\nto chaining filters. The following are equivalent: Model . objects . filter ( x = 1 ) & Model . objects . filter ( y = 2 ) Model . objects . filter ( x = 1 ) . filter ( y = 2 ) SQL equivalent: SELECT ... WHERE x = 1 AND y = 2 OR ( | ) ¶ Combines two QuerySet s using the SQL OR operator. The following are equivalent: Model . objects . filter ( x = 1 ) | Model . objects . filter ( y = 2 ) from django.db.models import Q Model . objects . filter ( Q ( x = 1 ) | Q ( y = 2 )) SQL equivalent: SELECT ... WHERE x = 1 OR y = 2 | is not a commutative operation, as different (though equivalent) queries\nmay be generated. XOR ( ^ ) ¶ Combines two QuerySet s using the SQL XOR operator. A XOR expression matches rows that are matched by an odd number of operands. The following are equivalent: Model . objects . filter ( x = 1 ) ^ Model . objects . filter ( y = 2 ) from django.db.models import Q Model . objects . filter ( Q ( x = 1 ) ^ Q ( y = 2 )) SQL equivalent: SELECT ... WHERE x = 1 XOR y = 2 Note XOR is natively supported on MariaDB and MySQL. On other databases, x ^ y ^ ... ^ z is converted to an equivalent: ( x OR y OR ... OR z ) AND 1 = MOD ( ( CASE WHEN x THEN 1 ELSE 0 END ) + ( CASE WHEN y THEN 1 ELSE 0 END ) + ... ( CASE WHEN z THEN 1 ELSE 0 END ), 2 ) Changed in Django 5.0: In older versions, on databases without native support for the SQL XOR operator, XOR returned rows that were matched by exactly\none operand. The previous behavior was not consistent with MySQL,\nMariaDB, and Python behavior. Methods that do not return QuerySet s ¶ The following QuerySet methods evaluate the QuerySet and return\nsomething other than a QuerySet . These methods do not use a cache (see Caching and QuerySets ). Rather,\nthey query the database each time they’re called. Because these methods evaluate the QuerySet, they are blocking calls, and so\ntheir main (synchronous) versions cannot be called from asynchronous code. For\nthis reason, each has a corresponding asynchronous version with an a prefix\n- for example, rather than get(…) you can await aget(…) . There is usually no difference in behavior apart from their asynchronous\nnature, but any differences are noted below next to each method. get() ¶ get ( * args , ** kwargs ) ¶ aget ( * args , ** kwargs ) ¶ Asynchronous version : aget() Returns the object matching the given lookup parameters, which should be in\nthe format described in Field lookups . You should use lookups that are\nguaranteed unique, such as the primary key or fields in a unique constraint.\nFor example: Entry . objects . get ( id = 1 ) Entry . objects . get ( Q ( blog = blog ) & Q ( entry_number = 1 )) If you expect a queryset to already return one row, you can use get() without any arguments to return the object for that row: Entry . objects . filter ( pk = 1 ) . get () If get() doesn’t find any object, it raises a Model.DoesNotExist exception: Entry . objects . get ( id =- 999 ) # raises Entry.DoesNotExist If get() finds more than one object, it raises a Model.MultipleObjectsReturned exception: Entry . objects . get ( name = \"A Duplicated Name\" ) # raises Entry.MultipleObjectsReturned Both these exception classes are attributes of the model class, and specific to\nthat model. If you want to handle such exceptions from several get() calls\nfor different models, you can use their generic base classes. For example, you\ncan use django.core.exceptions.ObjectDoesNotExist to handle DoesNotExist exceptions from multiple models: from django.core.exceptions import ObjectDoesNotExist try : blog = Blog . objects . get ( id = 1 ) entry = Entry . objects . get ( blog = blog , entry_number = 1 ) except ObjectDoesNotExist : print ( \"Either the blog or entry doesn't exist.\" ) create() ¶ create ( ** kwargs ) ¶ acreate ( ** kwargs ) ¶ Asynchronous version : acreate() A convenience method for creating an object and saving it all in one step.  Thus: p = Person . objects . create ( first_name = \"Bruce\" , last_name = \"Springsteen\" ) and: p = Person ( first_name = \"Bruce\" , last_name = \"Springsteen\" ) p . save ( force_insert = True ) are equivalent. The force_insert parameter is documented\nelsewhere, but all it means is that a new object will always be created.\nNormally you won’t need to worry about this. However, if your model contains a\nmanual primary key value that you set and if that value already exists in the\ndatabase, a call to create() will fail with an IntegrityError since primary keys must be unique. Be\nprepared to handle the exception if you are using manual primary keys. get_or_create() ¶ get_or_create ( defaults = None , ** kwargs ) ¶ aget_or_create ( defaults = None , ** kwargs ) ¶ Asynchronous version : aget_or_create() A convenience method for looking up an object with the given kwargs (may be\nempty if your model has defaults for all fields), creating one if necessary. Returns a tuple of (object, created) , where object is the retrieved or\ncreated object and created is a boolean specifying whether a new object was\ncreated. This is meant to prevent duplicate objects from being created when requests are\nmade in parallel, and as a shortcut to boilerplatish code. For example: try : obj = Person . objects . get ( first_name = \"John\" , last_name = \"Lennon\" ) except Person . DoesNotExist : obj = Person ( first_name = \"John\" , last_name = \"Lennon\" , birthday = date ( 1940 , 10 , 9 )) obj . save () Here, with concurrent requests, multiple attempts to save a Person with\nthe same parameters may be made. To avoid this race condition, the above\nexample can be rewritten using get_or_create() like so: obj , created = Person . objects . get_or_create ( first_name = \"John\" , last_name = \"Lennon\" , defaults = { \"birthday\" : date ( 1940 , 10 , 9 )}, ) Any keyword arguments passed to get_or_create() — except an optional one\ncalled defaults — will be used in a get() call. If an object is\nfound, get_or_create() returns a tuple of that object and False . Warning This method is atomic assuming that the database enforces uniqueness of the\nkeyword arguments (see unique or unique_together ). If the fields used in the\nkeyword arguments do not have a uniqueness constraint, concurrent calls to\nthis method may result in multiple rows with the same parameters being\ninserted. You can specify more complex conditions for the retrieved object by chaining get_or_create() with filter() and using Q objects . For example, to retrieve Robert or Bob Marley if either\nexists, and create the latter otherwise: from django.db.models import Q obj , created = Person . objects . filter ( Q ( first_name = \"Bob\" ) | Q ( first_name = \"Robert\" ), ) . get_or_create ( last_name = \"Marley\" , defaults = { \"first_name\" : \"Bob\" }) If multiple objects are found, get_or_create() raises MultipleObjectsReturned . If an object is not found, get_or_create() will instantiate and save a new object, returning a\ntuple of the new object and True . The new object will be created roughly\naccording to this algorithm: params = { k : v for k , v in kwargs . items () if \"__\" not in k } params . update ({ k : v () if callable ( v ) else v for k , v in defaults . items ()}) obj = self . model ( ** params ) obj . save () In English, that means start with any non- 'defaults' keyword argument that\ndoesn’t contain a double underscore (which would indicate a non-exact lookup).\nThen add the contents of defaults , overriding any keys if necessary, and\nuse the result as the keyword arguments to the model class. If there are any\ncallables in defaults , evaluate them. As hinted at above, this is a\nsimplification of the algorithm that is used, but it contains all the pertinent\ndetails. The internal implementation has some more error-checking than this and\nhandles some extra edge-conditions; if you’re interested, read the code. If you have a field named defaults and want to use it as an exact lookup in get_or_create() , use 'defaults__exact' , like so: Foo . objects . get_or_create ( defaults__exact = \"bar\" , defaults = { \"defaults\" : \"baz\" }) The get_or_create() method has similar error behavior to create() when you’re using manually specified primary keys. If an object needs to be\ncreated and the key already exists in the database, an IntegrityError will be raised. Finally, a word on using get_or_create() in Django views. Please make sure\nto use it only in POST requests unless you have a good reason not to. GET requests shouldn’t have any effect on data. Instead, use POST whenever a request to a page has a side effect on your data. For more, see Safe methods in the HTTP spec. Warning You can use get_or_create() through ManyToManyField attributes and reverse relations. In that case you will restrict the queries\ninside the context of that relation. That could lead you to some integrity\nproblems if you don’t use it consistently. Being the following models: class Chapter ( models . Model ): title = models . CharField ( max_length = 255 , unique = True ) class Book ( models . Model ): title = models . CharField ( max_length = 256 ) chapters = models . ManyToManyField ( Chapter ) You can use get_or_create() through Book’s chapters field, but it only\nfetches inside the context of that book: >>> book = Book . objects . create ( title = \"Ulysses\" ) >>> book . chapters . get_or_create ( title = \"Telemachus\" ) (<Chapter: Telemachus>, True) >>> book . chapters . get_or_create ( title = \"Telemachus\" ) (<Chapter: Telemachus>, False) >>> Chapter . objects . create ( title = \"Chapter 1\" ) <Chapter: Chapter 1> >>> book . chapters . get_or_create ( title = \"Chapter 1\" ) # Raises IntegrityError This is happening because it’s trying to get or create “Chapter 1” through the\nbook “Ulysses”, but it can’t do any of them: the relation can’t fetch that\nchapter because it isn’t related to that book, but it can’t create it either\nbecause title field should be unique. update_or_create() ¶ update_or_create ( defaults = None , create_defaults = None , ** kwargs ) ¶ aupdate_or_create ( defaults = None , create_defaults = None , ** kwargs ) ¶ Asynchronous version : aupdate_or_create() A convenience method for updating an object with the given kwargs , creating\na new one if necessary. Both create_defaults and defaults are\ndictionaries of (field, value) pairs. The values in both create_defaults and defaults can be callables. defaults is used to update the object\nwhile create_defaults are used for the create operation. If create_defaults is not supplied, defaults will be used for the create\noperation. Returns a tuple of (object, created) , where object is the created or\nupdated object and created is a boolean specifying whether a new object was\ncreated. The update_or_create method tries to fetch an object from database based on\nthe given kwargs . If a match is found, it updates the fields passed in the defaults dictionary. This is meant as a shortcut to boilerplatish code. For example: defaults = { \"first_name\" : \"Bob\" } create_defaults = { \"first_name\" : \"Bob\" , \"birthday\" : date ( 1940 , 10 , 9 )} try : obj = Person . objects . get ( first_name = \"John\" , last_name = \"Lennon\" ) for key , value in defaults . items (): setattr ( obj , key , value ) obj . save () except Person . DoesNotExist : new_values = { \"first_name\" : \"John\" , \"last_name\" : \"Lennon\" } new_values . update ( create_defaults ) obj = Person ( ** new_values ) obj . save () This pattern gets quite unwieldy as the number of fields in a model goes up.\nThe above example can be rewritten using update_or_create() like so: obj , created = Person . objects . update_or_create ( first_name = \"John\" , last_name = \"Lennon\" , defaults = { \"first_name\" : \"Bob\" }, create_defaults = { \"first_name\" : \"Bob\" , \"birthday\" : date ( 1940 , 10 , 9 )}, ) For a detailed description of how names passed in kwargs are resolved, see get_or_create() . As described above in get_or_create() , this method is prone to a\nrace-condition which can result in multiple rows being inserted simultaneously\nif uniqueness is not enforced at the database level. Like get_or_create() and create() , if you’re using manually\nspecified primary keys and an object needs to be created but the key already\nexists in the database, an IntegrityError is raised. Changed in Django 5.0: The create_defaults argument was added. bulk_create() ¶ bulk_create ( objs , batch_size = None , ignore_conflicts = False , update_conflicts = False , update_fields = None , unique_fields = None ) ¶ abulk_create ( objs , batch_size = None , ignore_conflicts = False , update_conflicts = False , update_fields = None , unique_fields = None ) ¶ Asynchronous version : abulk_create() This method inserts the provided list of objects into the database in an\nefficient manner (generally only 1 query, no matter how many objects there\nare), and returns created objects as a list, in the same order as provided: >>> objs = Entry . objects . bulk_create ( ... [ ... Entry ( headline = \"This is a test\" ), ... Entry ( headline = \"This is only a test\" ), ... ] ... ) This has a number of caveats though: The model’s save() method will not be called, and the pre_save and post_save signals will not be sent. It does not work with child models in a multi-table inheritance scenario. If the model’s primary key is an AutoField and ignore_conflicts is False, the primary key attribute can only be\nretrieved on certain databases (currently PostgreSQL, MariaDB, and SQLite\n3.35+). On other databases, it will not be set. It does not work with many-to-many relationships. It casts objs to a list, which fully evaluates objs if it’s a\ngenerator. The cast allows inspecting all objects so that any objects with a\nmanually set primary key can be inserted first. If you want to insert objects\nin batches without evaluating the entire generator at once, you can use this\ntechnique as long as the objects don’t have any manually set primary keys: from itertools import islice batch_size = 100 objs = ( Entry ( headline = \"Test %s \" % i ) for i in range ( 1000 )) while True : batch = list ( islice ( objs , batch_size )) if not batch : break Entry . objects . bulk_create ( batch , batch_size ) The batch_size parameter controls how many objects are created in a single\nquery. The default is to create all objects in one batch, except for SQLite\nwhere the default is such that at most 999 variables per query are used. On databases that support it (all but Oracle), setting the ignore_conflicts parameter to True tells the database to ignore failure to insert any rows\nthat fail constraints such as duplicate unique values. On databases that support it (all except Oracle), setting the update_conflicts parameter to True , tells the database to update update_fields when a row insertion fails on conflicts. On PostgreSQL and\nSQLite, in addition to update_fields , a list of unique_fields that may\nbe in conflict must be provided. Enabling the ignore_conflicts parameter disables setting the primary key on\neach model instance (if the database normally supports it). Changed in Django 5.0: In older versions, enabling the update_conflicts parameter prevented\nsetting the primary key on each model instance. Warning On MySQL and MariaDB, setting the ignore_conflicts parameter to True turns certain types of errors, other than duplicate key, into\nwarnings. Even with Strict Mode. For example: invalid values or\nnon-nullable violations. See the MySQL documentation and MariaDB documentation for more details. bulk_update() ¶ bulk_update ( objs , fields , batch_size = None ) ¶ abulk_update ( objs , fields , batch_size = None ) ¶ Asynchronous version : abulk_update() This method efficiently updates the given fields on the provided model\ninstances, generally with one query, and returns the number of objects\nupdated: >>> objs = [ ... Entry . objects . create ( headline = \"Entry 1\" ), ... Entry . objects . create ( headline = \"Entry 2\" ), ... ] >>> objs [ 0 ] . headline = \"This is entry 1\" >>> objs [ 1 ] . headline = \"This is entry 2\" >>> Entry . objects . bulk_update ( objs , [ \"headline\" ]) 2 QuerySet.update() is used to save the changes, so this is more efficient\nthan iterating through the list of models and calling save() on each of\nthem, but it has a few caveats: You cannot update the model’s primary key. Each model’s save() method isn’t called, and the pre_save and post_save signals aren’t sent. If updating a large number of columns in a large number of rows, the SQL\ngenerated can be very large. Avoid this by specifying a suitable batch_size . Updating fields defined on multi-table inheritance ancestors will incur an\nextra query per ancestor. When an individual batch contains duplicates, only the first instance in that\nbatch will result in an update. The number of objects updated returned by the function may be fewer than the\nnumber of objects passed in. This can be due to duplicate objects passed in\nwhich are updated in the same batch or race conditions such that objects are\nno longer present in the database. The batch_size parameter controls how many objects are saved in a single\nquery. The default is to update all objects in one batch, except for SQLite\nand Oracle which have restrictions on the number of variables used in a query. count() ¶ count () ¶ acount () ¶ Asynchronous version : acount() Returns an integer representing the number of objects in the database matching\nthe QuerySet . Example: # Returns the total number of entries in the database. Entry . objects . count () # Returns the number of entries whose headline contains 'Lennon' Entry . objects . filter ( headline__contains = \"Lennon\" ) . count () A count() call performs a SELECT COUNT(*) behind the scenes, so you\nshould always use count() rather than loading all of the record into Python\nobjects and calling len() on the result (unless you need to load the\nobjects into memory anyway, in which case len() will be faster). Note that if you want the number of items in a QuerySet and are also\nretrieving model instances from it (for example, by iterating over it), it’s\nprobably more efficient to use len(queryset) which won’t cause an extra\ndatabase query like count() would. If the queryset has already been fully retrieved, count() will use that\nlength rather than perform an extra database query. in_bulk() ¶ in_bulk ( id_list = None , * , field_name = 'pk' ) ¶ ain_bulk ( id_list = None , * , field_name = 'pk' ) ¶ Asynchronous version : ain_bulk() Takes a list of field values ( id_list ) and the field_name for those\nvalues, and returns a dictionary mapping each value to an instance of the\nobject with the given field value. No django.core.exceptions.ObjectDoesNotExist exceptions will ever be raised\nby in_bulk ; that is, any id_list value not matching any instance will\nsimply be ignored. If id_list isn’t provided, all objects\nin the queryset are returned. field_name must be a unique field or a\ndistinct field (if there’s only one field specified in distinct() ). field_name defaults to the primary key. Example: >>> Blog . objects . in_bulk ([ 1 ]) {1: <Blog: Beatles Blog>} >>> Blog . objects . in_bulk ([ 1 , 2 ]) {1: <Blog: Beatles Blog>, 2: <Blog: Cheddar Talk>} >>> Blog . objects . in_bulk ([]) {} >>> Blog . objects . in_bulk () {1: <Blog: Beatles Blog>, 2: <Blog: Cheddar Talk>, 3: <Blog: Django Weblog>} >>> Blog . objects . in_bulk ([ \"beatles_blog\" ], field_name = \"slug\" ) {'beatles_blog': <Blog: Beatles Blog>} >>> Blog . objects . distinct ( \"name\" ) . in_bulk ( field_name = \"name\" ) {'Beatles Blog': <Blog: Beatles Blog>, 'Cheddar Talk': <Blog: Cheddar Talk>, 'Django Weblog': <Blog: Django Weblog>} If you pass in_bulk() an empty list, you’ll get an empty dictionary. iterator() ¶ iterator ( chunk_size = None ) ¶ aiterator ( chunk_size = None ) ¶ Asynchronous version : aiterator() Evaluates the QuerySet (by performing the query) and returns an iterator\n(see PEP 234 ) over the results, or an asynchronous iterator (see PEP 492 )\nif you call its asynchronous version aiterator . A QuerySet typically caches its results internally so that repeated\nevaluations do not result in additional queries. In contrast, iterator() will read results directly, without doing any caching at the QuerySet level\n(internally, the default iterator calls iterator() and caches the return\nvalue). For a QuerySet which returns a large number of objects that you\nonly need to access once, this can result in better performance and a\nsignificant reduction in memory. Note that using iterator() on a QuerySet which has already been\nevaluated will force it to evaluate again, repeating the query. iterator() is compatible with previous calls to prefetch_related() as\nlong as chunk_size is given. Larger values will necessitate fewer queries\nto accomplish the prefetching at the cost of greater memory usage. Changed in Django 5.0: Support for aiterator() with previous calls to prefetch_related() was added. On some databases (e.g. Oracle, SQLite ), the maximum number\nof terms in an SQL IN clause might be limited. Hence values below this\nlimit should be used. (In particular, when prefetching across two or more\nrelations, a chunk_size should be small enough that the anticipated number\nof results for each prefetched relation still falls below the limit.) So long as the QuerySet does not prefetch any related objects, providing no\nvalue for chunk_size will result in Django using an implicit default of\n2000. Depending on the database backend, query results will either be loaded all at\nonce or streamed from the database using server-side cursors. With server-side cursors ¶ Oracle and PostgreSQL use server-side\ncursors to stream results from the database without loading the entire result\nset into memory. The Oracle database driver always uses server-side cursors. With server-side cursors, the chunk_size parameter specifies the number of\nresults to cache at the database driver level. Fetching bigger chunks\ndiminishes the number of round trips between the database driver and the\ndatabase, at the expense of memory. On PostgreSQL, server-side cursors will only be used when the DISABLE_SERVER_SIDE_CURSORS setting is False . Read Transaction pooling and server-side cursors if\nyou’re using a connection pooler configured in transaction pooling mode. When\nserver-side cursors are disabled, the behavior is the same as databases that\ndon’t support server-side cursors. Without server-side cursors ¶ MySQL doesn’t support streaming results, hence the Python database driver loads\nthe entire result set into memory. The result set is then transformed into\nPython row objects by the database adapter using the fetchmany() method\ndefined in PEP 249 . SQLite can fetch results in batches using fetchmany() , but since SQLite\ndoesn’t provide isolation between queries within a connection, be careful when\nwriting to the table being iterated over. See Isolation when using QuerySet.iterator() for\nmore information. The chunk_size parameter controls the size of batches Django retrieves from\nthe database driver. Larger batches decrease the overhead of communicating with\nthe database driver at the expense of a slight increase in memory consumption. So long as the QuerySet does not prefetch any related objects, providing no\nvalue for chunk_size will result in Django using an implicit default of\n2000, a value derived from a calculation on the psycopg mailing list : Assuming rows of 10-20 columns with a mix of textual and numeric data, 2000\nis going to fetch less than 100KB of data, which seems a good compromise\nbetween the number of rows transferred and the data discarded if the loop\nis exited early. latest() ¶ latest ( * fields ) ¶ alatest ( * fields ) ¶ Asynchronous version : alatest() Returns the latest object in the table based on the given field(s). This example returns the latest Entry in the table, according to the pub_date field: Entry . objects . latest ( \"pub_date\" ) You can also choose the latest based on several fields. For example, to select\nthe Entry with the earliest expire_date when two entries have the same pub_date : Entry . objects . latest ( \"pub_date\" , \"-expire_date\" ) The negative sign in '-expire_date' means to sort expire_date in descending order. Since latest() gets the last result, the Entry with\nthe earliest expire_date is selected. If your model’s Meta specifies get_latest_by , you can omit any arguments to earliest() or latest() . The fields specified in get_latest_by will be used by default. Like get() , earliest() and latest() raise DoesNotExist if there is no object with the\ngiven parameters. Note that earliest() and latest() exist purely for convenience and\nreadability. earliest() and latest() may return instances with null dates. Since ordering is delegated to the database, results on fields that allow\nnull values may be ordered differently if you use different databases. For\nexample, PostgreSQL and MySQL sort null values as if they are higher than\nnon-null values, while SQLite does the opposite. You may want to filter out null values: Entry . objects . filter ( pub_date__isnull = False ) . latest ( \"pub_date\" ) earliest() ¶ earliest ( * fields ) ¶ aearliest ( * fields ) ¶ Asynchronous version : aearliest() Works otherwise like latest() except\nthe direction is changed. first() ¶ first () ¶ afirst () ¶ Asynchronous version : afirst() Returns the first object matched by the queryset, or None if there\nis no matching object. If the QuerySet has no ordering defined, then the\nqueryset is automatically ordered by the primary key. This can affect\naggregation results as described in Interaction with order_by() . Example: p = Article . objects . order_by ( \"title\" , \"pub_date\" ) . first () Note that first() is a convenience method, the following code sample is\nequivalent to the above example: try : p = Article . objects . order_by ( \"title\" , \"pub_date\" )[ 0 ] except IndexError : p = None last() ¶ last () ¶ alast () ¶ Asynchronous version : alast() Works like first() , but returns the last object in the queryset. aggregate() ¶ aggregate ( * args , ** kwargs ) ¶ aaggregate ( * args , ** kwargs ) ¶ Asynchronous version : aaggregate() Returns a dictionary of aggregate values (averages, sums, etc.) calculated over\nthe QuerySet . Each argument to aggregate() specifies a value that will\nbe included in the dictionary that is returned. The aggregation functions that are provided by Django are described in Aggregation Functions below. Since aggregates are also query\nexpressions , you may combine aggregates with other\naggregates or values to create complex aggregates. Aggregates specified using keyword arguments will use the keyword as the name\nfor the annotation. Anonymous arguments will have a name generated for them\nbased upon the name of the aggregate function and the model field that is being\naggregated. Complex aggregates cannot use anonymous arguments and must specify\na keyword argument as an alias. For example, when you are working with blog entries, you may want to know the\nnumber of authors that have contributed blog entries: >>> from django.db.models import Count >>> Blog . objects . aggregate ( Count ( \"entry\" )) {'entry__count': 16} By using a keyword argument to specify the aggregate function, you can\ncontrol the name of the aggregation value that is returned: >>> Blog . objects . aggregate ( number_of_entries = Count ( \"entry\" )) {'number_of_entries': 16} For an in-depth discussion of aggregation, see the topic guide on\nAggregation . exists() ¶ exists () ¶ aexists () ¶ Asynchronous version : aexists() Returns True if the QuerySet contains any results, and False if not. This tries to perform the query in the simplest and fastest way\npossible, but it does execute nearly the same query as a normal QuerySet query. exists() is useful for searches relating to the existence of\nany objects in a QuerySet , particularly in the context of a large QuerySet . To find whether a queryset contains any items: if some_queryset . exists (): print ( \"There is at least one object in some_queryset\" ) Which will be faster than: if some_queryset : print ( \"There is at least one object in some_queryset\" ) … but not by a large degree (hence needing a large queryset for efficiency\ngains). Additionally, if a some_queryset has not yet been evaluated, but you know\nthat it will be at some point, then using some_queryset.exists() will do\nmore overall work (one query for the existence check plus an extra one to later\nretrieve the results) than using bool(some_queryset) , which retrieves the\nresults and then checks if any were returned. contains() ¶ contains ( obj ) ¶ acontains ( obj ) ¶ Asynchronous version : acontains() Returns True if the QuerySet contains obj , and False if\nnot. This tries to perform the query in the simplest and fastest way possible. contains() is useful for checking an object membership in a QuerySet , particularly in the context of a large QuerySet . To check whether a queryset contains a specific item: if some_queryset . contains ( obj ): print ( \"Entry contained in queryset\" ) This will be faster than the following which requires evaluating and iterating\nthrough the entire queryset: if obj in some_queryset : print ( \"Entry contained in queryset\" ) Like exists() , if some_queryset has not yet been evaluated, but you\nknow that it will be at some point, then using some_queryset.contains(obj) will make an additional database query, generally resulting in slower overall\nperformance. update() ¶ update ( ** kwargs ) ¶ aupdate ( ** kwargs ) ¶ Asynchronous version : aupdate() Performs an SQL update query for the specified fields, and returns\nthe number of rows matched (which may not be equal to the number of rows\nupdated if some rows already have the new value). For example, to turn comments off for all blog entries published in 2010,\nyou could do this: >>> Entry . objects . filter ( pub_date__year = 2010 ) . update ( comments_on = False ) (This assumes your Entry model has fields pub_date and comments_on .) You can update multiple fields — there’s no limit on how many. For example,\nhere we update the comments_on and headline fields: >>> Entry . objects . filter ( pub_date__year = 2010 ) . update ( ... comments_on = False , headline = \"This is old\" ... ) The update() method is applied instantly, and the only restriction on the QuerySet that is updated is that it can only update columns in the\nmodel’s main table, not on related models. You can’t do this, for example: >>> Entry . objects . update ( blog__name = \"foo\" ) # Won't work! Filtering based on related fields is still possible, though: >>> Entry . objects . filter ( blog__id = 1 ) . update ( comments_on = True ) You cannot call update() on a QuerySet that has had a slice taken\nor can otherwise no longer be filtered. The update() method returns the number of affected rows: >>> Entry . objects . filter ( id = 64 ) . update ( comments_on = True ) 1 >>> Entry . objects . filter ( slug = \"nonexistent-slug\" ) . update ( comments_on = True ) 0 >>> Entry . objects . filter ( pub_date__year = 2010 ) . update ( comments_on = False ) 132 If you’re just updating a record and don’t need to do anything with the model\nobject, the most efficient approach is to call update() , rather than\nloading the model object into memory. For example, instead of doing this: e = Entry . objects . get ( id = 10 ) e . comments_on = False e . save () …do this: Entry . objects . filter ( id = 10 ) . update ( comments_on = False ) Using update() also prevents a race condition wherein something might\nchange in your database in the short period of time between loading the object\nand calling save() . Finally, realize that update() does an update at the SQL level and, thus,\ndoes not call any save() methods on your models, nor does it emit the pre_save or post_save signals (which are a consequence of\ncalling Model.save() ). If you want to\nupdate a bunch of records for a model that has a custom save() method, loop over them and call save() , like this: for e in Entry . objects . filter ( pub_date__year = 2010 ): e . comments_on = False e . save () Ordered queryset ¶ Chaining order_by() with update() is supported only on MariaDB and\nMySQL, and is ignored for different databases. This is useful for updating a\nunique field in the order that is specified without conflicts. For example: Entry . objects . order_by ( \"-number\" ) . update ( number = F ( \"number\" ) + 1 ) Note order_by() clause will be ignored if it contains annotations, inherited\nfields, or lookups spanning relations. delete() ¶ delete () ¶ adelete () ¶ Asynchronous version : adelete() Performs an SQL delete query on all rows in the QuerySet and\nreturns the number of objects deleted and a dictionary with the number of\ndeletions per object type. The delete() is applied instantly. You cannot call delete() on a QuerySet that has had a slice taken or can otherwise no longer be\nfiltered. For example, to delete all the entries in a particular blog: >>> b = Blog . objects . get ( pk = 1 ) # Delete all the entries belonging to this Blog. >>> Entry . objects . filter ( blog = b ) . delete () (4, {'blog.Entry': 2, 'blog.Entry_authors': 2}) By default, Django’s ForeignKey emulates the SQL\nconstraint ON DELETE CASCADE — in other words, any objects with foreign\nkeys pointing at the objects to be deleted will be deleted along with them.\nFor example: >>> blogs = Blog . objects . all () # This will delete all Blogs and all of their Entry objects. >>> blogs . delete () (5, {'blog.Blog': 1, 'blog.Entry': 2, 'blog.Entry_authors': 2}) This cascade behavior is customizable via the on_delete argument to the ForeignKey . The delete() method does a bulk delete and does not call any delete() methods on your models. It does, however, emit the pre_delete and post_delete signals for all deleted objects\n(including cascaded deletions). Django needs to fetch objects into memory to send signals and handle cascades.\nHowever, if there are no cascades and no signals, then Django may take a\nfast-path and delete objects without fetching into memory. For large\ndeletes this can result in significantly reduced memory usage. The amount of\nexecuted queries can be reduced, too. ForeignKeys which are set to on_delete DO_NOTHING do not prevent taking the fast-path in deletion. Note that the queries generated in object deletion is an implementation\ndetail subject to change. as_manager() ¶ classmethod as_manager () ¶ Class method that returns an instance of Manager with a copy of the QuerySet ’s methods. See Creating a manager with QuerySet methods for more details. Note that unlike the other entries in this section, this does not have an\nasynchronous variant as it does not execute a query. explain() ¶ explain ( format = None , ** options ) ¶ aexplain ( format = None , ** options ) ¶ Asynchronous version : aexplain() Returns a string of the QuerySet ’s execution plan, which details how the\ndatabase would execute the query, including any indexes or joins that would be\nused. Knowing these details may help you improve the performance of slow\nqueries. For example, when using PostgreSQL: >>> print ( Blog . objects . filter ( title = \"My Blog\" ) . explain ()) Seq Scan on blog  (cost=0.00..35.50 rows=10 width=12) Filter: (title = 'My Blog'::bpchar) The output differs significantly between databases. explain() is supported by all built-in database backends except Oracle\nbecause an implementation there isn’t straightforward. The format parameter changes the output format from the databases’s\ndefault, which is usually text-based. PostgreSQL supports 'TEXT' , 'JSON' , 'YAML' , and 'XML' formats. MariaDB and MySQL support 'TEXT' (also called 'TRADITIONAL' ) and 'JSON' formats. MySQL\n8.0.16+ also supports an improved 'TREE' format, which is similar to\nPostgreSQL’s 'TEXT' output and is used by default, if supported. Some databases accept flags that can return more information about the query.\nPass these flags as keyword arguments. For example, when using PostgreSQL: >>> print ( Blog . objects . filter ( title = \"My Blog\" ) . explain ( verbose = True , analyze = True )) Seq Scan on public.blog  (cost=0.00..35.50 rows=10 width=12) (actual time=0.004..0.004 rows=10 loops=1) Output: id, title Filter: (blog.title = 'My Blog'::bpchar) Planning time: 0.064 ms Execution time: 0.058 ms On some databases, flags may cause the query to be executed which could have\nadverse effects on your database. For example, the ANALYZE flag supported\nby MariaDB, MySQL 8.0.18+, and PostgreSQL could result in changes to data if\nthere are triggers or if a function is called, even for a SELECT query. Changed in Django 5.1: Support for the generic_plan option on PostgreSQL 16+ was added. Field lookups ¶ Field lookups are how you specify the meat of an SQL WHERE clause. They’re\nspecified as keyword arguments to the QuerySet methods filter() , exclude() and get() . For an introduction, see models and database queries documentation . Django’s built-in lookups are listed below. It is also possible to write custom lookups for model fields. As a convenience when no lookup type is provided (like in Entry.objects.get(id=14) ) the lookup type is assumed to be exact . exact ¶ Exact match. If the value provided for comparison is None , it will be\ninterpreted as an SQL NULL (see isnull for more details). Examples: Entry . objects . get ( id__exact = 14 ) Entry . objects . get ( id__exact = None ) SQL equivalents: SELECT ... WHERE id = 14 ; SELECT ... WHERE id IS NULL ; MySQL comparisons In MySQL, a database table’s “collation” setting determines whether exact comparisons are case-sensitive. This is a database setting, not a Django setting. It’s possible to configure your MySQL tables to use\ncase-sensitive comparisons, but some trade-offs are involved. For more\ninformation about this, see the collation section in the databases documentation. iexact ¶ Case-insensitive exact match. If the value provided for comparison is None ,\nit will be interpreted as an SQL NULL (see isnull for more\ndetails). Example: Blog . objects . get ( name__iexact = \"beatles blog\" ) Blog . objects . get ( name__iexact = None ) SQL equivalents: SELECT ... WHERE name ILIKE 'beatles blog' ; SELECT ... WHERE name IS NULL ; Note the first query will match 'Beatles Blog' , 'beatles blog' , 'BeAtLes BLoG' , etc. SQLite users When using the SQLite backend and non-ASCII strings, bear in mind the database note about string comparisons.\nSQLite does not do case-insensitive matching for non-ASCII strings. contains ¶ Case-sensitive containment test. Example: Entry . objects . get ( headline__contains = \"Lennon\" ) SQL equivalent: SELECT ... WHERE headline LIKE '%Lennon%' ; Note this will match the headline 'Lennon honored today' but not 'lennon honored today' . SQLite users SQLite doesn’t support case-sensitive LIKE statements; contains acts like icontains for SQLite. See the database note for more information. icontains ¶ Case-insensitive containment test. Example: Entry . objects . get ( headline__icontains = \"Lennon\" ) SQL equivalent: SELECT ... WHERE headline ILIKE '%Lennon%' ; SQLite users When using the SQLite backend and non-ASCII strings, bear in mind the database note about string comparisons. in ¶ In a given iterable; often a list, tuple, or queryset. It’s not a common use\ncase, but strings (being iterables) are accepted. Examples: Entry . objects . filter ( id__in = [ 1 , 3 , 4 ]) Entry . objects . filter ( headline__in = \"abc\" ) SQL equivalents: SELECT ... WHERE id IN ( 1 , 3 , 4 ); SELECT ... WHERE headline IN ( 'a' , 'b' , 'c' ); You can also use a queryset to dynamically evaluate the list of values\ninstead of providing a list of literal values: inner_qs = Blog . objects . filter ( name__contains = \"Cheddar\" ) entries = Entry . objects . filter ( blog__in = inner_qs ) This queryset will be evaluated as subselect statement: SELECT ... WHERE blog . id IN ( SELECT id FROM ... WHERE NAME LIKE '%Cheddar%' ) If you pass in a QuerySet resulting from values() or values_list() as the value to an __in lookup, you need to ensure you are only extracting\none field in the result. For example, this will work (filtering on the blog\nnames): inner_qs = Blog . objects . filter ( name__contains = \"Ch\" ) . values ( \"name\" ) entries = Entry . objects . filter ( blog__name__in = inner_qs ) This example will raise an exception, since the inner query is trying to\nextract two field values, where only one is expected: # Bad code! Will raise a TypeError. inner_qs = Blog . objects . filter ( name__contains = \"Ch\" ) . values ( \"name\" , \"id\" ) entries = Entry . objects . filter ( blog__name__in = inner_qs ) Performance considerations Be cautious about using nested queries and understand your database\nserver’s performance characteristics (if in doubt, benchmark!). Some\ndatabase backends, most notably MySQL, don’t optimize nested queries very\nwell. It is more efficient, in those cases, to extract a list of values\nand then pass that into the second query. That is, execute two queries\ninstead of one: values = Blog . objects . filter ( name__contains = \"Cheddar\" ) . values_list ( \"pk\" , flat = True ) entries = Entry . objects . filter ( blog__in = list ( values )) Note the list() call around the Blog QuerySet to force execution of\nthe first query. Without it, a nested query would be executed, because QuerySets are lazy . gt ¶ Greater than. Example: Entry . objects . filter ( id__gt = 4 ) SQL equivalent: SELECT ... WHERE id > 4 ; gte ¶ Greater than or equal to. lt ¶ Less than. lte ¶ Less than or equal to. startswith ¶ Case-sensitive starts-with. Example: Entry . objects . filter ( headline__startswith = \"Lennon\" ) SQL equivalent: SELECT ... WHERE headline LIKE 'Lennon%' ; SQLite doesn’t support case-sensitive LIKE statements; startswith acts\nlike istartswith for SQLite. istartswith ¶ Case-insensitive starts-with. Example: Entry . objects . filter ( headline__istartswith = \"Lennon\" ) SQL equivalent: SELECT ... WHERE headline ILIKE 'Lennon%' ; SQLite users When using the SQLite backend and non-ASCII strings, bear in mind the database note about string comparisons. endswith ¶ Case-sensitive ends-with. Example: Entry . objects . filter ( headline__endswith = \"Lennon\" ) SQL equivalent: SELECT ... WHERE headline LIKE '%Lennon' ; SQLite users SQLite doesn’t support case-sensitive LIKE statements; endswith acts like iendswith for SQLite. Refer to the database note documentation for more. iendswith ¶ Case-insensitive ends-with. Example: Entry . objects . filter ( headline__iendswith = \"Lennon\" ) SQL equivalent: SELECT ... WHERE headline ILIKE '%Lennon' SQLite users When using the SQLite backend and non-ASCII strings, bear in mind the database note about string comparisons. range ¶ Range test (inclusive). Example: import datetime start_date = datetime . date ( 2005 , 1 , 1 ) end_date = datetime . date ( 2005 , 3 , 31 ) Entry . objects . filter ( pub_date__range = ( start_date , end_date )) SQL equivalent: SELECT ... WHERE pub_date BETWEEN '2005-01-01' and '2005-03-31' ; You can use range anywhere you can use BETWEEN in SQL — for dates,\nnumbers and even characters. Warning Filtering a DateTimeField with dates won’t include items on the last\nday, because the bounds are interpreted as “0am on the given date”. If pub_date was a DateTimeField , the above expression would be turned\ninto this SQL: SELECT ... WHERE pub_date BETWEEN '2005-01-01 00:00:00' and '2005-03-31 00:00:00' ; Generally speaking, you can’t mix dates and datetimes. date ¶ For datetime fields, casts the value as date. Allows chaining additional field\nlookups. Takes a date value. Example: Entry . objects . filter ( pub_date__date = datetime . date ( 2005 , 1 , 1 )) Entry . objects . filter ( pub_date__date__gt = datetime . date ( 2005 , 1 , 1 )) (No equivalent SQL code fragment is included for this lookup because\nimplementation of the relevant query varies among different database engines.) When USE_TZ is True , fields are converted to the current time\nzone before filtering. This requires time zone definitions in the\ndatabase . year ¶ For date and datetime fields, an exact year match. Allows chaining additional\nfield lookups. Takes an integer year. Example: Entry . objects . filter ( pub_date__year = 2005 ) Entry . objects . filter ( pub_date__year__gte = 2005 ) SQL equivalent: SELECT ... WHERE pub_date BETWEEN '2005-01-01' AND '2005-12-31' ; SELECT ... WHERE pub_date >= '2005-01-01' ; (The exact SQL syntax varies for each database engine.) When USE_TZ is True , datetime fields are converted to the\ncurrent time zone before filtering. This requires time zone definitions\nin the database . iso_year ¶ For date and datetime fields, an exact ISO 8601 week-numbering year match.\nAllows chaining additional field lookups. Takes an integer year. Example: Entry . objects . filter ( pub_date__iso_year = 2005 ) Entry . objects . filter ( pub_date__iso_year__gte = 2005 ) (The exact SQL syntax varies for each database engine.) When USE_TZ is True , datetime fields are converted to the\ncurrent time zone before filtering. This requires time zone definitions\nin the database . month ¶ For date and datetime fields, an exact month match. Allows chaining additional\nfield lookups. Takes an integer 1 (January) through 12 (December). Example: Entry . objects . filter ( pub_date__month = 12 ) Entry . objects . filter ( pub_date__month__gte = 6 ) SQL equivalent: SELECT ... WHERE EXTRACT ( 'month' FROM pub_date ) = '12' ; SELECT ... WHERE EXTRACT ( 'month' FROM pub_date ) >= '6' ; (The exact SQL syntax varies for each database engine.) When USE_TZ is True , datetime fields are converted to the\ncurrent time zone before filtering. This requires time zone definitions\nin the database . day ¶ For date and datetime fields, an exact day match. Allows chaining additional\nfield lookups. Takes an integer day. Example: Entry . objects . filter ( pub_date__day = 3 ) Entry . objects . filter ( pub_date__day__gte = 3 ) SQL equivalent: SELECT ... WHERE EXTRACT ( 'day' FROM pub_date ) = '3' ; SELECT ... WHERE EXTRACT ( 'day' FROM pub_date ) >= '3' ; (The exact SQL syntax varies for each database engine.) Note this will match any record with a pub_date on the third day of the month,\nsuch as January 3, July 3, etc. When USE_TZ is True , datetime fields are converted to the\ncurrent time zone before filtering. This requires time zone definitions\nin the database . week ¶ For date and datetime fields, return the week number (1-52 or 53) according\nto ISO-8601 , i.e., weeks start\non a Monday and the first week contains the year’s first Thursday. Example: Entry . objects . filter ( pub_date__week = 52 ) Entry . objects . filter ( pub_date__week__gte = 32 , pub_date__week__lte = 38 ) (No equivalent SQL code fragment is included for this lookup because\nimplementation of the relevant query varies among different database engines.) When USE_TZ is True , datetime fields are converted to the\ncurrent time zone before filtering. This requires time zone definitions\nin the database . week_day ¶ For date and datetime fields, a ‘day of the week’ match. Allows chaining\nadditional field lookups. Takes an integer value representing the day of week from 1 (Sunday) to 7\n(Saturday). Example: Entry . objects . filter ( pub_date__week_day = 2 ) Entry . objects . filter ( pub_date__week_day__gte = 2 ) (No equivalent SQL code fragment is included for this lookup because\nimplementation of the relevant query varies among different database engines.) Note this will match any record with a pub_date that falls on a Monday (day\n2 of the week), regardless of the month or year in which it occurs. Week days\nare indexed with day 1 being Sunday and day 7 being Saturday. When USE_TZ is True , datetime fields are converted to the\ncurrent time zone before filtering. This requires time zone definitions\nin the database . iso_week_day ¶ For date and datetime fields, an exact ISO 8601 day of the week match. Allows\nchaining additional field lookups. Takes an integer value representing the day of the week from 1 (Monday) to 7\n(Sunday). Example: Entry . objects . filter ( pub_date__iso_week_day = 1 ) Entry . objects . filter ( pub_date__iso_week_day__gte = 1 ) (No equivalent SQL code fragment is included for this lookup because\nimplementation of the relevant query varies among different database engines.) Note this will match any record with a pub_date that falls on a Monday (day\n1 of the week), regardless of the month or year in which it occurs. Week days\nare indexed with day 1 being Monday and day 7 being Sunday. When USE_TZ is True , datetime fields are converted to the\ncurrent time zone before filtering. This requires time zone definitions\nin the database . quarter ¶ For date and datetime fields, a ‘quarter of the year’ match. Allows chaining\nadditional field lookups. Takes an integer value between 1 and 4 representing\nthe quarter of the year. Example to retrieve entries in the second quarter (April 1 to June 30): Entry . objects . filter ( pub_date__quarter = 2 ) (No equivalent SQL code fragment is included for this lookup because\nimplementation of the relevant query varies among different database engines.) When USE_TZ is True , datetime fields are converted to the\ncurrent time zone before filtering. This requires time zone definitions\nin the database . time ¶ For datetime fields, casts the value as time. Allows chaining additional field\nlookups. Takes a datetime.time value. Example: Entry . objects . filter ( pub_date__time = datetime . time ( 14 , 30 )) Entry . objects . filter ( pub_date__time__range = ( datetime . time ( 8 ), datetime . time ( 17 ))) (No equivalent SQL code fragment is included for this lookup because\nimplementation of the relevant query varies among different database engines.) When USE_TZ is True , fields are converted to the current time\nzone before filtering. This requires time zone definitions in the\ndatabase . hour ¶ For datetime and time fields, an exact hour match. Allows chaining additional\nfield lookups. Takes an integer between 0 and 23. Example: Event . objects . filter ( timestamp__hour = 23 ) Event . objects . filter ( time__hour = 5 ) Event . objects . filter ( timestamp__hour__gte = 12 ) SQL equivalent: SELECT ... WHERE EXTRACT ( 'hour' FROM timestamp ) = '23' ; SELECT ... WHERE EXTRACT ( 'hour' FROM time ) = '5' ; SELECT ... WHERE EXTRACT ( 'hour' FROM timestamp ) >= '12' ; (The exact SQL syntax varies for each database engine.) When USE_TZ is True , datetime fields are converted to the\ncurrent time zone before filtering. This requires time zone definitions\nin the database . minute ¶ For datetime and time fields, an exact minute match. Allows chaining additional\nfield lookups. Takes an integer between 0 and 59. Example: Event . objects . filter ( timestamp__minute = 29 ) Event . objects . filter ( time__minute = 46 ) Event . objects . filter ( timestamp__minute__gte = 29 ) SQL equivalent: SELECT ... WHERE EXTRACT ( 'minute' FROM timestamp ) = '29' ; SELECT ... WHERE EXTRACT ( 'minute' FROM time ) = '46' ; SELECT ... WHERE EXTRACT ( 'minute' FROM timestamp ) >= '29' ; (The exact SQL syntax varies for each database engine.) When USE_TZ is True , datetime fields are converted to the\ncurrent time zone before filtering. This requires time zone definitions\nin the database . second ¶ For datetime and time fields, an exact second match. Allows chaining additional\nfield lookups. Takes an integer between 0 and 59. Example: Event . objects . filter ( timestamp__second = 31 ) Event . objects . filter ( time__second = 2 ) Event . objects . filter ( timestamp__second__gte = 31 ) SQL equivalent: SELECT ... WHERE EXTRACT ( 'second' FROM timestamp ) = '31' ; SELECT ... WHERE EXTRACT ( 'second' FROM time ) = '2' ; SELECT ... WHERE EXTRACT ( 'second' FROM timestamp ) >= '31' ; (The exact SQL syntax varies for each database engine.) When USE_TZ is True , datetime fields are converted to the\ncurrent time zone before filtering. This requires time zone definitions\nin the database . isnull ¶ Takes either True or False , which correspond to SQL queries of IS NULL and IS NOT NULL , respectively. Example: Entry . objects . filter ( pub_date__isnull = True ) SQL equivalent: SELECT ... WHERE pub_date IS NULL ; regex ¶ Case-sensitive regular expression match. The regular expression syntax is that of the database backend in use.\nIn the case of SQLite, which has no built in regular expression support,\nthis feature is provided by a (Python) user-defined REGEXP function, and\nthe regular expression syntax is therefore that of Python’s re module. Example: Entry . objects . get ( title__regex = r \"^(An?|The) +\" ) SQL equivalents: SELECT ... WHERE title REGEXP BINARY '^(An?|The) +' ; -- MySQL SELECT ... WHERE REGEXP_LIKE ( title , '^(An?|The) +' , 'c' ); -- Oracle SELECT ... WHERE title ~ '^(An?|The) +' ; -- PostgreSQL SELECT ... WHERE title REGEXP '^(An?|The) +' ; -- SQLite Using raw strings (e.g., r'foo' instead of 'foo' ) for passing in the\nregular expression syntax is recommended. iregex ¶ Case-insensitive regular expression match. Example: Entry . objects . get ( title__iregex = r \"^(an?|the) +\" ) SQL equivalents: SELECT ... WHERE title REGEXP '^(an?|the) +' ; -- MySQL SELECT ... WHERE REGEXP_LIKE ( title , '^(an?|the) +' , 'i' ); -- Oracle SELECT ... WHERE title ~* '^(an?|the) +' ; -- PostgreSQL SELECT ... WHERE title REGEXP '(?i)^(an?|the) +' ; -- SQLite Aggregation functions ¶ Django provides the following aggregation functions in the django.db.models module. For details on how to use these\naggregate functions, see the topic guide on aggregation . See the Aggregate documentation to learn how to create your aggregates. Warning SQLite can’t handle aggregation on date/time fields out of the box.\nThis is because there are no native date/time fields in SQLite and Django\ncurrently emulates these features using a text field. Attempts to use\naggregation on date/time fields in SQLite will raise NotSupportedError . Empty querysets or groups Aggregation functions return None when used with an empty QuerySet or group. For example, the Sum aggregation function returns None instead of 0 if the QuerySet contains no entries or for any empty\ngroup in a non-empty QuerySet . To return another value instead, define\nthe default argument. Count is an exception to this behavior; it\nreturns 0 if the QuerySet is empty since Count does not support\nthe default argument. All aggregates have the following parameters in common: expressions ¶ Strings that reference fields on the model, transforms of the field, or query expressions . output_field ¶ An optional argument that represents the model field of the return value Note When combining multiple field types, Django can only determine the output_field if all fields are of the same type. Otherwise, you\nmust provide the output_field yourself. filter ¶ An optional Q object that’s used to filter the\nrows that are aggregated. See Conditional aggregation and Filtering on annotations for\nexample usage. default ¶ An optional argument that allows specifying a value to use as a default value\nwhen the queryset (or grouping) contains no entries. **extra ¶ Keyword arguments that can provide extra context for the SQL generated\nby the aggregate. Avg ¶ class Avg ( expression , output_field = None , distinct = False , filter = None , default = None , ** extra ) [source] ¶ Returns the mean value of the given expression, which must be numeric\nunless you specify a different output_field . Default alias: <field>__avg Return type: float if input is int , otherwise same as input\nfield, or output_field if supplied. If the queryset or grouping is\nempty, default is returned. distinct ¶ Optional. If distinct=True , Avg returns the mean value of\nunique values. This is the SQL equivalent of AVG(DISTINCT <field>) .\nThe default value is False . Count ¶ class Count ( expression , distinct = False , filter = None , ** extra ) [source] ¶ Returns the number of objects that are related through the provided\nexpression. Count('*') is equivalent to the SQL COUNT(*) expression. Default alias: <field>__count Return type: int distinct ¶ Optional. If distinct=True , the count will only include unique\ninstances. This is the SQL equivalent of COUNT(DISTINCT <field>) .\nThe default value is False . Note The default argument is not supported. Max ¶ class Max ( expression , output_field = None , filter = None , default = None , ** extra ) [source] ¶ Returns the maximum value of the given expression. Default alias: <field>__max Return type: same as input field, or output_field if supplied. If the\nqueryset or grouping is empty, default is returned. Min ¶ class Min ( expression , output_field = None , filter = None , default = None , ** extra ) [source] ¶ Returns the minimum value of the given expression. Default alias: <field>__min Return type: same as input field, or output_field if supplied. If the\nqueryset or grouping is empty, default is returned. StdDev ¶ class StdDev ( expression , output_field = None , sample = False , filter = None , default = None , ** extra ) [source] ¶ Returns the standard deviation of the data in the provided expression. Default alias: <field>__stddev Return type: float if input is int , otherwise same as input\nfield, or output_field if supplied. If the queryset or grouping is\nempty, default is returned. sample ¶ Optional. By default, StdDev returns the population standard\ndeviation. However, if sample=True , the return value will be the\nsample standard deviation. Sum ¶ class Sum ( expression , output_field = None , distinct = False , filter = None , default = None , ** extra ) [source] ¶ Computes the sum of all values of the given expression. Default alias: <field>__sum Return type: same as input field, or output_field if supplied. If the\nqueryset or grouping is empty, default is returned. distinct ¶ Optional. If distinct=True , Sum returns the sum of unique\nvalues. This is the SQL equivalent of SUM(DISTINCT <field>) . The\ndefault value is False . Variance ¶ class Variance ( expression , output_field = None , sample = False , filter = None , default = None , ** extra ) [source] ¶ Returns the variance of the data in the provided expression. Default alias: <field>__variance Return type: float if input is int , otherwise same as input\nfield, or output_field if supplied. If the queryset or grouping is\nempty, default is returned. sample ¶ Optional. By default, Variance returns the population variance.\nHowever, if sample=True , the return value will be the sample\nvariance. Query-related tools ¶ This section provides reference material for query-related tools not documented\nelsewhere. Q() objects ¶ class Q [source] ¶ A Q() object represents an SQL condition that can be used in\ndatabase-related operations. It’s similar to how an F() object represents the value of a model field\nor annotation. They make it possible to define and reuse conditions. These can\nbe negated using the ~ ( NOT ) operator, and combined using operators\nsuch as | ( OR ), & ( AND ), and ^ ( XOR ). See Complex lookups with Q objects . Prefetch() objects ¶ class Prefetch ( lookup , queryset = None , to_attr = None ) [source] ¶ The Prefetch() object can be used to control the operation of prefetch_related() . The lookup argument describes the relations to follow and works the same\nas the string based lookups passed to prefetch_related() . For example: >>> from django.db.models import Prefetch >>> Question . objects . prefetch_related ( Prefetch ( \"choice_set\" )) . get () . choice_set . all () <QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]> # This will only execute two queries regardless of the number of Question # and Choice objects. >>> Question . objects . prefetch_related ( Prefetch ( \"choice_set\" )) <QuerySet [<Question: What's up?>]> The queryset argument supplies a base QuerySet for the given lookup.\nThis is useful to further filter down the prefetch operation, or to call select_related() from the prefetched\nrelation, hence reducing the number of queries even further: >>> voted_choices = Choice . objects . filter ( votes__gt = 0 ) >>> voted_choices <QuerySet [<Choice: The sky>]> >>> prefetch = Prefetch ( \"choice_set\" , queryset = voted_choices ) >>> Question . objects . prefetch_related ( prefetch ) . get () . choice_set . all () <QuerySet [<Choice: The sky>]> The to_attr argument sets the result of the prefetch operation to a custom\nattribute: >>> prefetch = Prefetch ( \"choice_set\" , queryset = voted_choices , to_attr = \"voted_choices\" ) >>> Question . objects . prefetch_related ( prefetch ) . get () . voted_choices [<Choice: The sky>] >>> Question . objects . prefetch_related ( prefetch ) . get () . choice_set . all () <QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]> Note When using to_attr the prefetched result is stored in a list. This can\nprovide a significant speed improvement over traditional prefetch_related calls which store the cached result within a QuerySet instance. prefetch_related_objects() ¶ prefetch_related_objects ( model_instances , * related_lookups ) [source] ¶ aprefetch_related_objects ( model_instances , * related_lookups ) ¶ Asynchronous version : aprefetch_related_objects() Prefetches the given lookups on an iterable of model instances. This is useful\nin code that receives a list of model instances as opposed to a QuerySet ;\nfor example, when fetching models from a cache or instantiating them manually. Pass an iterable of model instances (must all be of the same class) and the\nlookups or Prefetch objects you want to prefetch for. For example: >>> from django.db.models import prefetch_related_objects >>> restaurants = fetch_top_restaurants_from_cache () # A list of Restaurants >>> prefetch_related_objects ( restaurants , \"pizzas__toppings\" ) When using multiple databases with prefetch_related_objects , the prefetch\nquery will use the database associated with the model instance. This can be\noverridden by using a custom queryset in a related lookup. Changed in Django 5.0: aprefetch_related_objects() function was added. FilteredRelation() objects ¶ class FilteredRelation ( relation_name , * , condition = Q() ) [source] ¶ relation_name ¶ The name of the field on which you’d like to filter the relation. condition ¶ A Q object to control the filtering. FilteredRelation is used with annotate() to create an ON clause when a JOIN is performed. It doesn’t act on the default\nrelationship but on the annotation name ( pizzas_vegetarian in example\nbelow). For example, to find restaurants that have vegetarian pizzas with 'mozzarella' in the name: >>> from django.db.models import FilteredRelation , Q >>> Restaurant . objects . annotate ( ... pizzas_vegetarian = FilteredRelation ( ... \"pizzas\" , ... condition = Q ( pizzas__vegetarian = True ), ... ), ... ) . filter ( pizzas_vegetarian__name__icontains = \"mozzarella\" ) If there are a large number of pizzas, this queryset performs better than: >>> Restaurant . objects . filter ( ... pizzas__vegetarian = True , ... pizzas__name__icontains = \"mozzarella\" , ... ) because the filtering in the WHERE clause of the first queryset will only\noperate on vegetarian pizzas. FilteredRelation doesn’t support: QuerySet.only() and prefetch_related() . A GenericForeignKey inherited from a parent model.", "keywords": ["endswith", "contrast", "iterable", "pizza.toppings.all", "django.core.exceptions", "lower", "column", "comments", "val", "boilerplatish", "work", "transactions", "hints", "update_fields", "type", "cascades", "field>__max", "pizza.objects.all", "select_for_update", "manytomanyfield", "book", "operands", "degree", "pub_date__year__gte", "introspection", "statement", "rows", "noam", "namedtuple", "evaluations", "aupdate_or_create", "def", "membership", "place", "distinct", "spicy", "scenes", "cpu", "searches", "qs", "pub_date__time", "reason", "entry.objects.get(id=14", "aggregation", "classes", "day", "null", "greater", "subtleties", "method", "shell", "starts", "on", "defer", "person", "violations", "mysql_tzinfo_to_sql", "someparam", "authors", "ancestors", "eliminates", "transactiontestcase", "objs", "performance", "name__iexact", "boolean", "pub_date__iso_week_day__gte", "use", "pineapple", "deviation", "pizza.toppings.filter", "pickle", "views", "beatles", "ways", "principle", "difference", "items", "callables", "condition", "sort", "sample", "startswith", "headline__istartswith", "chomsky", "pub_date__week", "equivalent", "topic", "consumption", "bool(some_queryset", "way", "standard", "filters", "default", "aiterator", "select_related('foo", "option", "islice", "iteration", "piece", "model.save", "techniques", "operand", "abulk_create", "aearliest", "penalty", "birthday", "requirements", "subquery", "need", "injection", "ulysses", "terms", "page", "pickles", "select", "block", "runtimewarning", "queryset.values_list", "commonlyusedmodel", "consequence", "kind", "isinstance", "combinations", "mind", "booster", "age", "dumps", "related_name", "constraints", "metaphor", "insertion", "users", "name__lower", "guide", "lock", "event", "tree", "entry__body", "disable_server_side_cursors", "f2", "backend", "self", "people", "ancestor", "argument", "row(id=1", "fetches", "words", "quixote", "version", "tickets", "deletion", "values_list", "tuple", "model_instances", "integer", "conjunction", "aupdate", "ch", "meta", "future", "individualism", "related_lookups", "month", "term", "generator", "transactionmanagementerror", "e", "datetime.tzinfo", "cautions", "blog__name__in", "name", "pattern", "relationships", "entry__authors__name", "hometown", "monday", "operator", "timestamp__minute__gte", "first_name", "don", "size", "adapter", "bulk_update", "python", "supports", "charfield", "direction", "link", "addition", "n+1", "instances", "interaction", "amount", "downside", "sunday", "field>__min", "edge", "formats", "july", "simplification", "headline__iendswith", "guarantee", "subclass", "force", "select_for_update(of=", "lookup", "front", "indexes", "pooler", "chance", "storage", "characteristics", "occurrences", "qs3", "blog_entry", "evaluation", "|", "speed", "pep", "pizzas_vegetarian__name__icontains", "depth", "vegetarian_pizzas", "true", "*", "end_date", "topping", "afirst", "relations", "minute", "good", "requests", "notsupportederror", "search", "queryset[(1", "mod", "mailing", "annotate", "pizzas", "my_queryset", "foo='a", "operation", "averages", "register_lookup", "length", "features", "ends", "feature", "modes", "benefit", "descending", "key", "cooking", "parameters", "inner_qs", "pub_date__day__gte", "situation", "headline__contains", ".", "alias", "english", "aget_or_create", "chunks", "datetime.datetime", "zone", "headline__in", "state", "dictionary", "explanation", "queryset.values", "characters", "[:", "nulls_first", "operators", "material", "doesnotexist", "driver", "warnings", "restriction", "error", "pub_date__iso_week_day", "differences", "aprefetch_related_objects", "cost=0.00", "cache", "gt", "istartswith", "interpreter", "datetime", "january", "set_null", "%", "setting", "increase", "time__second", "order", "basis", "documentation", "-", "bool", "salmon", "comparisons", "specifies", "field_name", "pairs", "sense", "remainder", "pk", "integrityerror", "yaml", "order_by", "sky", "managedmodel", "othercol", "containment", "table", "iexact", "convenience", "solutions", "coercion", "bugs", "reuse", "thursday", "behavior", "grouping", "aliases", "conflicts", "modules", "mode", "str", "abc", "query", "sorts", "mariadb", "weeks", "following", "pub_date__year", "import", "weblog", "talk", "respect", "bar", "moment", "datefield", "information", "'", "timestamp__hour", "article", "json", "result", "#", "point", "vegetarian_menu", "section", "versions", "modifier", "translates", "comments_on", "¶", "defers", "chaining", "variance", "stddev", "pre_save", "definition", "field(s", "iso-8601", "server", "change", "george", "uniqueness", "socialists", "mix", "loops=1", "format", "fetchmany", "toppings", "profile", "beginning", "headline='lennon", "word", "example", "chapters", "ordering", "year", "value", "functions", "..", "prefetch_related_objects", "public.blog", "definitions", "int", "setattr", "source", "timestamp__second", "n", "reloaded_qs", "dry", "transforms", "sensitivity", "offset", "offs", "exclude", "print", "introduction", "blog", "optimization", "existence", "save", "c", "orwell", "create", "examples", "aggregate", "city", "blog_entry.blog_id", "django.db", "things", "alatest", "details", "slug", "col", "iterables", "not", "subqueries", "non-", "psycopg", "form", "^(an?|the", "object", "datetime.date(2005", "deletions", "lte", "warning", "id__in", "one", "attributes", "postgresql", "comparison", "algorithm", "efficiency", "returns", "window", "queryset.iterator", "entry_list", "parent", "verbose", "tzinfo", "synchronousonlyoperation", "some_queryset", "array", "batch_size", "deletes", "sequence", "fetch_top_restaurants_from_cache", "api", "dates", "note", "box", "blog__pk", "marley", "period", "post", "valueerror", "level", "conditions", "django", "days", "fragments", "entries__gt", "genericforeignkey", "fact", "failure", "raw", "parameter", "syntax", "slice", "lot", "approach", "text", "field", "contents", "timestamp__hour__gte", "strings", "bob", "relation", "headline__icontains", "name__contains", "pub_date__month__gte", "http", "bounds", "caution", "telemachus", "itertools", "coalesce", "locks", "effect", "meta.ordering", "=", "blog.title", "objects", "discussion", "news", "parent_model_name>_ptr", "tagline", "parallel", "june", "django.db.models.functions", "explain", "defaults", "len(queryset", "traditional", "genericprefetch", "r'foo", "championed_by", "implementation", "matches", "strict", "hook", "connection", "blogs", "match", "+", "blog.objects.all", "binary", "truncation", "activity", "pub_date__week__lte", "datetimes", "statements", "mysql", "quarter", "range", "gaza", "^", "chunk_size", "obj", "):", "seq", "is_recent", "nature", "refinement", "prefetch_related('toppings", "total", "acts", "guides", "sums", "gte", "replica", "reader", "place_ptr", "adelete", "rows=10", "works", "time", "exception", "count", "defence", "no_key", "cascade", "oracle", "q", "deluge", "pub_date__day", "slicing", "delete", "queryset", "restaurant", "time__hour", "args", "d", "number_of_entries", "in_bulk", "manager", "corruption", "problem", "saturday", "subclasses", "robert", "record", "meaning", "orderings", "doubt", "groups", "john", "pub_date__date", "avg(distinct", "load", "acount", "output", "fields", "restaurants", "inclusive", "matters", "union", "entry_count", "pub_date__iso_year__gte", "icontains", "other_qs", "prefetch_related", "copy", "custom", "testcase", "filteredrelation", "f", "collation", "methods", "ham", "side", "keyword", "update", "id_list", "same", "select_params", "documents", "none", "menu", "iterators", "join", "loop", "variables", "pub_date__week_day__gte", "sometable", "foo_id", "process", "access", "base", "count(distinct", "foreignkeys", ">", "considerations", "allows", "mymodel", "first", "prefetching", "field>__stddev", "choice_set", "caching", "end", "week", "cheddar%", "exact", "classmethod", "cousin", "qs2", "bunch", "flag", "request", "enforces", "inheritance", "pickling", "biography", "iendswith", "attacks", "b", "lennon%", "tables", "engine", "databaseerror", "mapping", "bulk_create", "checking", "thing", "rating", "chapter", "protection", "f1", "isolation", "optimizations", "entry_authors", "a", "data", "meat", "avg", "blog'::bpchar", "effects", "pizza_list__toppings", "constraint", "matching", "contenttype", "lookups", "pub_date", "resort", "options", "alast", "conflict", "gains", "group", "reduction", "filtering", "headline__startswith", "readability", "params", "extra", "defaults__exact", "attempts", "ilike", "optional", "trade", "pub_date__week_day", "shortcut", "child", "execution", "description", "s", "kwargs", "entry__authors", "children", "keys", "seafood", "means", "sql", "blog_blog.id", "author", "path", "summary", "aexists", "impressions", "new_values", "tools", "children__date", "django.utils", "best_pizza", "cast", "managers", "to_attr", "elements", "placeholders", "counterpart", "rawsql", "in", "assumption", "criteria", "acreate", "backends", "module", "arguments", "practice", "time__minute", "max", "last_name", "april", "compromise", "voted_choices", "context", "memory", "expense", "acontains", "timestamp__second__gte", "december", "purpose", "hawaiian", "fun", "cheddar", "typecasting", "equivalents", "models", "pub_date__gt", "detail", "benchmark", "caveats", "re", "batch", "row", "title", "call", "blog__name", "field>__count", "subset", "batches", "consideration", "queryset.ordered", "kb", "attempt", "rawqueryset", "v", "onetoonefield", "k", "pizzas__toppings", "traverse", "sum", "plan", "annotation", "querysets", "support", "types", "pub_date__week__gte", "penultimate", "intersection", "prawns", "p", "django.db.utils", "queryset.update", "changes", "filter", "problems", "scenario", "annotates", "abulk_update", "false", "declaration", "pizza", "indexerror", "jan.", "iregex", "prefix", "xor", "records", "_", "analyze", "bruce", "with", "precursor", "check", "hand", "variant", "timestamp__minute", "pub_date__range", "isnull", "aget", "values", "json_extract", "quotes", "cases", "lennon", "asc", "queryset.extra", "iterator", "baz", "times", "notation", "post_delete", "sum(distinct", "extra(select=", "item", "pub_date__quarter", "async", "django.db.models.query", "translations", "conversions", "ignore_conflicts", "today", "attributeerror", "annotations", "beatles_blog", "final", "compatibility", "pub_date__time__range", "test", "len", "underscore", "zones", "field>__variance", "vegetarian_menu__toppings", "fragment", "atomic", "duplicates", "blog_id", "pizzas__name__icontains", "timezone", "unique_fields", "ms", "input", "usage", "output_field", "transaction", "entries", "parents", "model", "ascending", "z", "max_length", "improvement", "y", "processing", "trips", "choice", "datetime.date", "inner", "snippet", "select_for_update(nowait", "iso", "modeling", "purposes", "results", "e.blog", "use_tz", "expire_date", "calls", "n’t", "field>__avg", "sqlite", "parentheses", "get_or_create", "or", "loads", "internals", "opposite", "case", "pub_date__iso_year", "table_name.column_name", "class", "race", "number", "relation_name", "xml", "numbers", "ain_bulk", "tuples", "return", "columns", "force_insert", "pizzas_vegetarian", "attribute", "restrictions", "function", "self.toppings.all", "blog__in", "care", "string", "like", "list", "archival", "question", "headline='first", "loading", "ticket", "scan", "blogasaurus", "blog_blog", "exists", "book.objects.select_related('author__hometown').get(id=4", "autocommit", "uses", "parts", "entry_number", "i", "joins", "datetimefield", "body", "flags", "user", "spec", "title__regex", "part", "file", "queries", "read", "operations", "jsonfield", "blog__id", "errors", "dictionaries", "create_defaults", "get", "springsteen", "calculation", "mechanism", "sign", "planning", "traceback", "lack", "best_pizza__toppings", "manner", "exceptions", "unique_together", "situations", "except", "representations", "possibility", "get_latest_by", "population", "names", "signals", "technique", "clause", "typeerror", "expressions", "clauses", "extract", "mycolumn=0", "iso_week_day", "id__gt", "do_nothing", "aggregates", "desc", "float", "document", "representation", "s.", "date", "set", "select_related('foo').select_related('bar", "update_or_create", "cursors", "autofield", "nowait", "qs1", "entry__authors__name__lower", "some_queryset.exists", "functionality", "cost", "calling", "min", "foo", "foreignkey", "qs.none", "database", "relationship", "construction", "reverse", "transform", "databases", "prefetch", "as_manager", "limit", "triggers", "headline", "expression", "hour", "reference", "instance", "engines", "code", "overhead", "integrity", "aexplain", "headline__endswith", "regexp", "combines", "backup", "genericrelation", "objectdoesnotexist", "lower_name", "pub_date__date__gt", "entry", "step", "strategy", "timestamp", "entry__count"], "type": "documentation"},
{"title": "Model instance reference", "url": "https://docs.djangoproject.com/en/5.1/ref/models/instances/", "content": "Model instance reference ¶ This document describes the details of the Model API. It builds on the\nmaterial presented in the model and database\nquery guides, so you’ll probably want to read and\nunderstand those documents before reading this one. Throughout this reference we’ll use the example blog models presented in the database query guide . Creating objects ¶ To create a new instance of a model, instantiate it like any other Python\nclass: class Model ( ** kwargs ) [source] ¶ The keyword arguments are the names of the fields you’ve defined on your model.\nNote that instantiating a model in no way touches your database; for that, you\nneed to save() . Note You may be tempted to customize the model by overriding the __init__ method. If you do so, however, take care not to change the calling\nsignature as any change may prevent the model instance from being saved.\nAdditionally, referring to model fields within __init__ may potentially\nresult in infinite recursion errors in some circumstances.  Rather than\noverriding __init__ , try using one of these approaches: Add a classmethod on the model class: from django.db import models class Book ( models . Model ): title = models . CharField ( max_length = 100 ) @classmethod def create ( cls , title ): book = cls ( title = title ) # do something with the book return book book = Book . create ( \"Pride and Prejudice\" ) Add a method on a custom manager (usually preferred): class BookManager ( models . Manager ): def create_book ( self , title ): book = self . create ( title = title ) # do something with the book return book class Book ( models . Model ): title = models . CharField ( max_length = 100 ) objects = BookManager () book = Book . objects . create_book ( \"Pride and Prejudice\" ) Customizing model loading ¶ classmethod Model. from_db ( db , field_names , values ) [source] ¶ The from_db() method can be used to customize model instance creation\nwhen loading from the database. The db argument contains the database alias for the database the model\nis loaded from, field_names contains the names of all loaded fields, and values contains the loaded values for each field in field_names . The field_names are in the same order as the values . If all of the model’s\nfields are present, then values are guaranteed to be in the order __init__() expects them. That is, the instance can be created by cls(*values) . If any fields are deferred, they won’t appear in field_names . In that case, assign a value of django.db.models.DEFERRED to each of the missing fields. In addition to creating the new model, the from_db() method must set the adding and db flags in the new instance’s _state attribute. Below is an example showing how to record the initial values of fields that\nare loaded from the database: from django.db.models import DEFERRED @classmethod def from_db ( cls , db , field_names , values ): # Default implementation of from_db() (subject to change and could # be replaced with super()). if len ( values ) != len ( cls . _meta . concrete_fields ): values = list ( values ) values . reverse () values = [ values . pop () if f . attname in field_names else DEFERRED for f in cls . _meta . concrete_fields ] instance = cls ( * values ) instance . _state . adding = False instance . _state . db = db # customization to store the original field values on the instance instance . _loaded_values = dict ( zip ( field_names , ( value for value in values if value is not DEFERRED )) ) return instance def save ( self , ** kwargs ): # Check how the current values differ from ._loaded_values. For example, # prevent changing the creator_id of the model. (This example doesn't # support cases where 'creator_id' is deferred). if not self . _state . adding and ( self . creator_id != self . _loaded_values [ \"creator_id\" ] ): raise ValueError ( \"Updating the value of creator isn't allowed\" ) super () . save ( ** kwargs ) The example above shows a full from_db() implementation to clarify how that\nis done. In this case it would be possible to use a super() call in the from_db() method. Refreshing objects from database ¶ If you delete a field from a model instance, accessing it again reloads the\nvalue from the database: >>> obj = MyModel . objects . first () >>> del obj . field >>> obj . field # Loads the field from the database Model. refresh_from_db ( using = None , fields = None , from_queryset = None ) [source] ¶ Model. arefresh_from_db ( using = None , fields = None , from_queryset = None ) ¶ Asynchronous version : arefresh_from_db() If you need to reload a model’s values from the database, you can use the refresh_from_db() method. When this method is called without arguments the\nfollowing is done: All non-deferred fields of the model are updated to the values currently\npresent in the database. Any cached relations are cleared from the reloaded instance. Only fields of the model are reloaded from the database. Other\ndatabase-dependent values such as annotations aren’t reloaded. Any @cached_property attributes\naren’t cleared either. The reloading happens from the database the instance was loaded from, or from\nthe default database if the instance wasn’t loaded from the database. The using argument can be used to force the database used for reloading. It is possible to force the set of fields to be loaded by using the fields argument. For example, to test that an update() call resulted in the expected\nupdate, you could write a test similar to this: def test_update_result ( self ): obj = MyModel . objects . create ( val = 1 ) MyModel . objects . filter ( pk = obj . pk ) . update ( val = F ( \"val\" ) + 1 ) # At this point obj.val is still 1, but the value in the database # was updated to 2. The object's updated value needs to be reloaded # from the database. obj . refresh_from_db () self . assertEqual ( obj . val , 2 ) Note that when deferred fields are accessed, the loading of the deferred\nfield’s value happens through this method. Thus it is possible to customize\nthe way deferred loading happens. The example below shows how one can reload\nall of the instance’s fields when a deferred field is reloaded: class ExampleModel ( models . Model ): def refresh_from_db ( self , using = None , fields = None , ** kwargs ): # fields contains the name of the deferred field to be # loaded. if fields is not None : fields = set ( fields ) deferred_fields = self . get_deferred_fields () # If any deferred field is going to be loaded if fields . intersection ( deferred_fields ): # then load all of them fields = fields . union ( deferred_fields ) super () . refresh_from_db ( using , fields , ** kwargs ) The from_queryset argument allows using a different queryset than the one\ncreated from _base_manager . It gives you more\ncontrol over how the model is reloaded. For example, when your model uses soft\ndeletion you can make refresh_from_db() to take this into account: obj . refresh_from_db ( from_queryset = MyModel . active_objects . all ()) You can cache related objects that otherwise would be cleared from the reloaded\ninstance: obj . refresh_from_db ( from_queryset = MyModel . objects . select_related ( \"related_field\" )) You can lock the row until the end of transaction before reloading a model’s\nvalues: obj . refresh_from_db ( from_queryset = MyModel . objects . select_for_update ()) Changed in Django 5.1: The from_queryset argument was added. Model. get_deferred_fields () [source] ¶ A helper method that returns a set containing the attribute names of all those\nfields that are currently deferred for this model. Validating objects ¶ There are four steps involved in validating a model: Validate the model fields - Model.clean_fields() Validate the model as a whole - Model.clean() Validate the field uniqueness - Model.validate_unique() Validate the constraints - Model.validate_constraints() All four steps are performed when you call a model’s full_clean() method. When you use a ModelForm , the call to is_valid() will perform these validation steps for\nall the fields that are included on the form. See the ModelForm\ndocumentation for more information. You should only\nneed to call a model’s full_clean() method if you plan to handle\nvalidation errors yourself, or if you have excluded fields from the ModelForm that require validation. Model. full_clean ( exclude = None , validate_unique = True , validate_constraints = True ) [source] ¶ This method calls Model.clean_fields() , Model.clean() , Model.validate_unique() (if validate_unique is True ),  and Model.validate_constraints() (if validate_constraints is True )\nin that order and raises a ValidationError that\nhas a message_dict attribute containing errors from all four stages. The optional exclude argument can be used to provide a set of field\nnames that can be excluded from validation and cleaning. ModelForm uses this argument to exclude fields that\naren’t present on your form from being validated since any errors raised could\nnot be corrected by the user. Note that full_clean() will not be called automatically when you call\nyour model’s save() method. You’ll need to call it manually\nwhen you want to run one-step model validation for your own manually created\nmodels. For example: from django.core.exceptions import ValidationError try : article . full_clean () except ValidationError as e : # Do something based on the errors contained in e.message_dict. # Display them to a user, or handle them programmatically. pass The first step full_clean() performs is to clean each individual field. Model. clean_fields ( exclude = None ) [source] ¶ This method will validate all fields on your model. The optional exclude argument lets you provide a set of field names to exclude from validation.\nIt will raise a ValidationError if any fields\nfail validation. The second step full_clean() performs is to call Model.clean() .\nThis method should be overridden to perform custom validation on your model. Model. clean () [source] ¶ This method should be used to provide custom model validation, and to modify\nattributes on your model if desired. For instance, you could use it to\nautomatically provide a value for a field, or to do validation that requires\naccess to more than a single field: import datetime from django.core.exceptions import ValidationError from django.db import models from django.utils.translation import gettext_lazy as _ class Article ( models . Model ): ... def clean ( self ): # Don't allow draft entries to have a pub_date. if self . status == \"draft\" and self . pub_date is not None : raise ValidationError ( _ ( \"Draft entries may not have a publication date.\" )) # Set the pub_date for published items if it hasn't been set already. if self . status == \"published\" and self . pub_date is None : self . pub_date = datetime . date . today () Note, however, that like Model.full_clean() , a model’s clean() method is not invoked when you call your model’s save() method. In the above example, the ValidationError exception raised by Model.clean() was instantiated with a string, so it\nwill be stored in a special error dictionary key, NON_FIELD_ERRORS . This key is used for errors\nthat are tied to the entire model instead of to a specific field: from django.core.exceptions import NON_FIELD_ERRORS , ValidationError try : article . full_clean () except ValidationError as e : non_field_errors = e . message_dict [ NON_FIELD_ERRORS ] To assign exceptions to a specific field, instantiate the ValidationError with a dictionary, where the\nkeys are the field names. We could update the previous example to assign the\nerror to the pub_date field: class Article ( models . Model ): ... def clean ( self ): # Don't allow draft entries to have a pub_date. if self . status == \"draft\" and self . pub_date is not None : raise ValidationError ( { \"pub_date\" : _ ( \"Draft entries may not have a publication date.\" )} ) ... If you detect errors in multiple fields during Model.clean() , you can also\npass a dictionary mapping field names to errors: raise ValidationError ( { \"title\" : ValidationError ( _ ( \"Missing title.\" ), code = \"required\" ), \"pub_date\" : ValidationError ( _ ( \"Invalid date.\" ), code = \"invalid\" ), } ) Then, full_clean() will check unique constraints on your model. How to raise field-specific validation errors if those fields don’t appear in a ModelForm You can’t raise validation errors in Model.clean() for fields that\ndon’t appear in a model form (a form may limit its fields using Meta.fields or Meta.exclude ). Doing so will raise a ValueError because the validation error won’t be able to be associated with the\nexcluded field. To work around this dilemma, instead override Model.clean_fields() as it receives the list of fields\nthat are excluded from validation. For example: class Article ( models . Model ): ... def clean_fields ( self , exclude = None ): super () . clean_fields ( exclude = exclude ) if self . status == \"draft\" and self . pub_date is not None : if exclude and \"status\" in exclude : raise ValidationError ( _ ( \"Draft entries may not have a publication date.\" ) ) else : raise ValidationError ( { \"status\" : _ ( \"Set status to draft if there is not a publication date.\" ), } ) Model. validate_unique ( exclude = None ) [source] ¶ This method is similar to clean_fields() , but validates\nuniqueness constraints defined via Field.unique , Field.unique_for_date , Field.unique_for_month , Field.unique_for_year , or Meta.unique_together on your model instead of individual\nfield values. The optional exclude argument allows you to provide a set of field names to exclude from validation. It will raise a ValidationError if any fields fail validation. UniqueConstraint s defined in the Meta.constraints are validated\nby Model.validate_constraints() . Note that if you provide an exclude argument to validate_unique() , any unique_together constraint involving one of\nthe fields you provided will not be checked. Finally, full_clean() will check any other constraints on your model. Model. validate_constraints ( exclude = None ) [source] ¶ This method validates all constraints defined in Meta.constraints . The\noptional exclude argument allows you to provide a set of field names to\nexclude from validation. It will raise a ValidationError if any constraints fail\nvalidation. Saving objects ¶ To save an object back to the database, call save() : Model. save ( * , force_insert = False , force_update = False , using = DEFAULT_DB_ALIAS , update_fields = None ) [source] ¶ Model. asave ( * , force_insert = False , force_update = False , using = DEFAULT_DB_ALIAS , update_fields = None ) ¶ Asynchronous version : asave() For details on using the force_insert and force_update arguments, see Forcing an INSERT or UPDATE . Details about the update_fields argument\ncan be found in the Specifying which fields to save section. If you want customized saving behavior, you can override this save() method. See Overriding predefined model methods for more details. The model save process also has some subtleties; see the sections below. Deprecated since version 5.1: Support for positional arguments is deprecated. Auto-incrementing primary keys ¶ If a model has an AutoField — an auto-incrementing\nprimary key — then that auto-incremented value will be calculated and saved as\nan attribute on your object the first time you call save() : >>> b2 = Blog ( name = \"Cheddar Talk\" , tagline = \"Thoughts on cheese.\" ) >>> b2 . id # Returns None, because b2 doesn't have an ID yet. >>> b2 . save () >>> b2 . id # Returns the ID of your new object. There’s no way to tell what the value of an ID will be before you call save() , because that value is calculated by your database, not by Django. For convenience, each model has an AutoField named id by default unless you explicitly specify primary_key=True on a field\nin your model. See the documentation for AutoField for more details. The pk property ¶ Model. pk ¶ Regardless of whether you define a primary key field yourself, or let Django\nsupply one for you, each model will have a property called pk . It behaves\nlike a normal attribute on the model, but is actually an alias for whichever\nattribute is the primary key field for the model. You can read and set this\nvalue, just as you would for any other attribute, and it will update the\ncorrect field in the model. Explicitly specifying auto-primary-key values ¶ If a model has an AutoField but you want to define a\nnew object’s ID explicitly when saving, define it explicitly before saving,\nrather than relying on the auto-assignment of the ID: >>> b3 = Blog ( id = 3 , name = \"Cheddar Talk\" , tagline = \"Thoughts on cheese.\" ) >>> b3 . id # Returns 3. >>> b3 . save () >>> b3 . id # Returns 3. If you assign auto-primary-key values manually, make sure not to use an\nalready-existing primary-key value! If you create a new object with an explicit\nprimary-key value that already exists in the database, Django will assume you’re\nchanging the existing record rather than creating a new one. Given the above 'Cheddar Talk' blog example, this example would override the\nprevious record in the database: b4 = Blog ( id = 3 , name = \"Not Cheddar\" , tagline = \"Anything but cheese.\" ) b4 . save () # Overrides the previous blog with ID=3! See How Django knows to UPDATE vs. INSERT , below, for the reason this\nhappens. Explicitly specifying auto-primary-key values is mostly useful for bulk-saving\nobjects, when you’re confident you won’t have primary-key collision. If you’re using PostgreSQL, the sequence associated with the primary key might\nneed to be updated; see Manually-specifying values of auto-incrementing primary keys . What happens when you save? ¶ When you save an object, Django performs the following steps: Emit a pre-save signal. The pre_save signal is sent, allowing any functions listening for that signal to do\nsomething. Preprocess the data. Each field’s pre_save() method is called to perform any\nautomated data modification that’s needed. For example, the date/time fields\noverride pre_save() to implement auto_now_add and auto_now . Prepare the data for the database. Each field’s get_db_prep_save() method is asked to provide\nits current value in a data type that can be written to the database. Most fields don’t require data preparation. Simple data types, such as\nintegers and strings, are ‘ready to write’ as a Python object. However, more\ncomplex data types often require some modification. For example, DateField fields use a Python datetime object to store data. Databases don’t store datetime objects, so the field value must be converted into an ISO-compliant date\nstring for insertion into the database. Insert the data into the database. The preprocessed, prepared data is\ncomposed into an SQL statement for insertion into the database. Emit a post-save signal. The post_save signal is sent, allowing any functions listening for that signal to do\nsomething. How Django knows to UPDATE vs. INSERT ¶ You may have noticed Django database objects use the same save() method\nfor creating and changing objects. Django abstracts the need to use INSERT or UPDATE SQL statements. Specifically, when you call save() and the\nobject’s primary key attribute does not define a default or db_default , Django follows this algorithm: If the object’s primary key attribute is set to a value that evaluates to True (i.e., a value other than None or the empty string), Django\nexecutes an UPDATE . If the object’s primary key attribute is not set or if the UPDATE didn’t update anything (e.g. if primary key is set to a value that doesn’t\nexist in the database), Django executes an INSERT . If the object’s primary key attribute defines a default or db_default then Django executes an UPDATE if it is an existing model instance and primary key is set to a value that\nexists in the database. Otherwise, Django executes an INSERT . The one gotcha here is that you should be careful not to specify a primary-key\nvalue explicitly when saving new objects, if you cannot guarantee the\nprimary-key value is unused. For more on this nuance, see Explicitly specifying\nauto-primary-key values above and Forcing an INSERT or UPDATE below. In Django 1.5 and earlier, Django did a SELECT when the primary key\nattribute was set. If the SELECT found a row, then Django did an UPDATE ,\notherwise it did an INSERT . The old algorithm results in one more query in\nthe UPDATE case. There are some rare cases where the database doesn’t\nreport that a row was updated even if the database contains a row for the\nobject’s primary key value. An example is the PostgreSQL ON UPDATE trigger\nwhich returns NULL . In such cases it is possible to revert to the old\nalgorithm by setting the select_on_save option to True . Changed in Django 5.0: The Field.db_default parameter was added. Forcing an INSERT or UPDATE ¶ In some rare circumstances, it’s necessary to be able to force the save() method to perform an SQL INSERT and not fall back to\ndoing an UPDATE . Or vice-versa: update, if possible, but not insert a new\nrow. In these cases you can pass the force_insert=True or force_update=True parameters to the save() method.\nPassing both parameters is an error: you cannot both insert and update at the\nsame time! When using multi-table inheritance , it’s also\npossible to provide a tuple of parent classes to force_insert in order to\nforce INSERT statements for each base. For example: Restaurant ( pk = 1 , name = \"Bob's Cafe\" ) . save ( force_insert = ( Place ,)) Restaurant ( pk = 1 , name = \"Bob's Cafe\" , rating = 4 ) . save ( force_insert = ( Place , Rating )) You can pass force_insert=(models.Model,) to force an INSERT statement\nfor all parents. By default, force_insert=True only forces the insertion of\na new row for the current model. It should be very rare that you’ll need to use these parameters. Django will\nalmost always do the right thing and trying to override that will lead to\nerrors that are difficult to track down. This feature is for advanced use\nonly. Using update_fields will force an update similarly to force_update . Changed in Django 5.0: Support for passing a tuple of parent classes to force_insert was\nadded. Updating attributes based on existing fields ¶ Sometimes you’ll need to perform a simple arithmetic task on a field, such\nas incrementing or decrementing the current value. One way of achieving this is\ndoing the arithmetic in Python like: >>> product = Product . objects . get ( name = \"Venezuelan Beaver Cheese\" ) >>> product . number_sold += 1 >>> product . save () If the old number_sold value retrieved from the database was 10, then\nthe value of 11 will be written back to the database. The process can be made robust, avoiding a race condition , as well as slightly faster by expressing\nthe update relative to the original field value, rather than as an explicit\nassignment of a new value. Django provides F expressions for performing this kind of relative update. Using F expressions , the previous example is expressed\nas: >>> from django.db.models import F >>> product = Product . objects . get ( name = \"Venezuelan Beaver Cheese\" ) >>> product . number_sold = F ( \"number_sold\" ) + 1 >>> product . save () For more details, see the documentation on F expressions and their use in update queries . Specifying which fields to save ¶ If save() is passed a list of field names in keyword argument update_fields , only the fields named in that list will be updated.\nThis may be desirable if you want to update just one or a few fields on\nan object. There will be a slight performance benefit from preventing\nall of the model fields from being updated in the database. For example: product . name = \"Name changed again\" product . save ( update_fields = [ \"name\" ]) The update_fields argument can be any iterable containing strings. An\nempty update_fields iterable will skip the save. A value of None will\nperform an update on all fields. Specifying update_fields will force an update. When saving a model fetched through deferred model loading\n( only() or defer() ) only the fields loaded\nfrom the DB will get updated. In effect there is an automatic update_fields in this case. If you assign or change any deferred field\nvalue, the field will be added to the updated fields. Field.pre_save() and update_fields If update_fields is passed in, only the pre_save() methods of the update_fields are called. For example, this means that date/time fields with auto_now=True will not be updated unless they are included in the update_fields . Deleting objects ¶ Model. delete ( using = DEFAULT_DB_ALIAS , keep_parents = False ) [source] ¶ Model. adelete ( using = DEFAULT_DB_ALIAS , keep_parents = False ) ¶ Asynchronous version : adelete() Issues an SQL DELETE for the object. This only deletes the object in the\ndatabase; the Python instance will still exist and will still have data in\nits fields, except for the primary key set to None . This method returns the\nnumber of objects deleted and a dictionary with the number of deletions per\nobject type. For more details, including how to delete objects in bulk, see Deleting objects . If you want customized deletion behavior, you can override the delete() method. See Overriding predefined model methods for more details. Sometimes with multi-table inheritance you may\nwant to delete only a child model’s data. Specifying keep_parents=True will\nkeep the parent model’s data. Pickling objects ¶ When you pickle a model, its current state is pickled. When you unpickle\nit, it’ll contain the model instance at the moment it was pickled, rather than\nthe data that’s currently in the database. You can’t share pickles between versions Pickles of models are only valid for the version of Django that\nwas used to generate them. If you generate a pickle using Django\nversion N, there is no guarantee that pickle will be readable with\nDjango version N+1. Pickles should not be used as part of a long-term\narchival strategy. Since pickle compatibility errors can be difficult to diagnose, such as\nsilently corrupted objects, a RuntimeWarning is raised when you try to\nunpickle a model in a Django version that is different than the one in\nwhich it was pickled. Other model instance methods ¶ A few object methods have special purposes. __str__() ¶ Model. __str__ () [source] ¶ The __str__() method is called whenever you call str() on an object.\nDjango uses str(obj) in a number of places. Most notably, to display an\nobject in the Django admin site and as the value inserted into a template when\nit displays an object. Thus, you should always return a nice, human-readable\nrepresentation of the model from the __str__() method. For example: from django.db import models class Person ( models . Model ): first_name = models . CharField ( max_length = 50 ) last_name = models . CharField ( max_length = 50 ) def __str__ ( self ): return f \" { self . first_name } { self . last_name } \" __eq__() ¶ Model. __eq__ () [source] ¶ The equality method is defined such that instances with the same primary\nkey value and the same concrete class are considered equal, except that\ninstances with a primary key value of None aren’t equal to anything except\nthemselves. For proxy models, concrete class is defined as the model’s first\nnon-proxy parent; for all other models it’s simply the model’s class. For example: from django.db import models class MyModel ( models . Model ): id = models . AutoField ( primary_key = True ) class MyProxyModel ( MyModel ): class Meta : proxy = True class MultitableInherited ( MyModel ): pass # Primary keys compared MyModel ( id = 1 ) == MyModel ( id = 1 ) MyModel ( id = 1 ) != MyModel ( id = 2 ) # Primary keys are None MyModel ( id = None ) != MyModel ( id = None ) # Same instance instance = MyModel ( id = None ) instance == instance # Proxy model MyModel ( id = 1 ) == MyProxyModel ( id = 1 ) # Multi-table inheritance MyModel ( id = 1 ) != MultitableInherited ( id = 1 ) __hash__() ¶ Model. __hash__ () [source] ¶ The __hash__() method is based on the instance’s primary key value. It\nis effectively hash(obj.pk) . If the instance doesn’t have a primary key\nvalue then a TypeError will be raised (otherwise the __hash__() method would return different values before and after the instance is\nsaved, but changing the __hash__() value of an instance is\nforbidden in Python. get_absolute_url() ¶ Model. get_absolute_url () ¶ Define a get_absolute_url() method to tell Django how to calculate the\ncanonical URL for an object. To callers, this method should appear to return a\nstring that can be used to refer to the object over HTTP. For example: def get_absolute_url ( self ): return \"/people/ %i /\" % self . id While this code is correct and simple, it may not be the most portable way to\nto write this kind of method. The reverse() function is\nusually the best approach. For example: def get_absolute_url ( self ): from django.urls import reverse return reverse ( \"people-detail\" , kwargs = { \"pk\" : self . pk }) One place Django uses get_absolute_url() is in the admin app. If an object\ndefines this method, the object-editing page will have a “View on site” link\nthat will jump you directly to the object’s public view, as given by get_absolute_url() . Similarly, a couple of other bits of Django, such as the syndication feed\nframework , use get_absolute_url() when it is\ndefined. If it makes sense for your model’s instances to each have a unique\nURL, you should define get_absolute_url() . Warning You should avoid building the URL from unvalidated user input, in order to\nreduce possibilities of link or redirect poisoning: def get_absolute_url ( self ): return \"/ %s /\" % self . name If self.name is '/example.com' this returns '//example.com/' which, in turn, is a valid schema relative URL but not the expected '/%2Fexample.com/' . It’s good practice to use get_absolute_url() in templates, instead of\nhard-coding your objects’ URLs. For example, this template code is bad: <!-- BAD template code. Avoid! --> < a href = \"/people/ {{ object.id }} /\" > {{ object.name }} </ a > This template code is much better: < a href = \" {{ object.get_absolute_url }} \" > {{ object.name }} </ a > The logic here is that if you change the URL structure of your objects, even\nfor something small like correcting a spelling error, you don’t want to have to\ntrack down every place that the URL might be created. Specify it once, in get_absolute_url() and have all your other code call that one place. Note The string you return from get_absolute_url() must contain only\nASCII characters (required by the URI specification, RFC 3986 Section 2 )\nand be URL-encoded, if necessary. Code and templates calling get_absolute_url() should be able to use the\nresult directly without any further processing. You may wish to use the django.utils.encoding.iri_to_uri() function to help with this if you\nare using strings containing characters outside the ASCII range. Extra instance methods ¶ In addition to save() , delete() , a model object\nmight have some of the following methods: Model. get_FOO_display () ¶ For every field that has choices set, the\nobject will have a get_FOO_display() method, where FOO is the name of\nthe field. This method returns the “human-readable” value of the field. For example: from django.db import models class Person ( models . Model ): SHIRT_SIZES = { \"S\" : \"Small\" , \"M\" : \"Medium\" , \"L\" : \"Large\" , } name = models . CharField ( max_length = 60 ) shirt_size = models . CharField ( max_length = 2 , choices = SHIRT_SIZES ) >>> p = Person ( name = \"Fred Flintstone\" , shirt_size = \"L\" ) >>> p . save () >>> p . shirt_size 'L' >>> p . get_shirt_size_display () 'Large' Model. get_next_by_FOO ( ** kwargs ) ¶ Model. get_previous_by_FOO ( ** kwargs ) ¶ For every DateField and DateTimeField that does not have null=True , the object will have get_next_by_FOO() and get_previous_by_FOO() methods, where FOO is the name of the field. This\nreturns the next and previous object with respect to the date field, raising\na DoesNotExist exception when appropriate. Both of these methods will perform their queries using the default\nmanager for the model. If you need to emulate filtering used by a\ncustom manager, or want to perform one-off custom filtering, both\nmethods also accept optional keyword arguments, which should be in the\nformat described in Field lookups . Note that in the case of identical date values, these methods will use the\nprimary key as a tie-breaker. This guarantees that no records are skipped or\nduplicated. That also means you cannot use those methods on unsaved objects. Overriding extra instance methods In most cases overriding or inheriting get_FOO_display() , get_next_by_FOO() , and get_previous_by_FOO() should work as\nexpected. Since they are added by the metaclass however, it is not\npractical to account for all possible inheritance structures. In more\ncomplex cases you should override Field.contribute_to_class() to set\nthe methods you need. Other attributes ¶ _state ¶ Model. _state ¶ The _state attribute refers to a ModelState object that tracks\nthe lifecycle of the model instance. The ModelState object has two attributes: adding , a flag which is True if the model has not been saved to the database yet, and db ,\na string referring to the database alias the instance was loaded from or\nsaved to. Newly instantiated instances have adding=True and db=None ,\nsince they are yet to be saved. Instances fetched from a QuerySet will have adding=False and db set to the alias of the associated\ndatabase.", "keywords": ["django.core.exceptions", "val", "l", "update_fields", "type", "url", "select_for_update", "book", "adding", "statement", "metaclass", "def", "signal", "place", "e.message_dict", "id", "reason", "m", "uri", "classes", "null", "subtleties", "method", "loaded_values", "on", "person", "select_on_save", "recursion", "performance", "use", "status", "pickle", "items", "condition", "specification", "way", "related_field", "default", "option", "gettext_lazy", "venezuelan", "deferred", "need", "page", "select", "pickles", "runtimewarning", "model.validate_unique", "kind", "insertion", "constraints", "guide", "self", "people", "pass", "circumstances", "argument", "auto", "version", "deletion", "@classmethod", "tuple", "meta.fields", "model.clean", "meta", "term", "e", "steps", "name", "stages", "first_name", "admin", "python", "link", "charfield", "addition", "n+1", "instances", "lifecycle", "guarantee", "sections", "defines", "obj.val", "true", "*", "framework", "structure", "model.full_clean", "relations", "modelform", "creator_id", "turn", "poisoning", "django.urls", "logic", "feature", "benefit", "key", "parameters", ".", "alias", "helper", "state", "dictionary", "active_objects", "structures", "characters", "b3", "material", "error", "template", "control", "datetime", "%", "order", "callers", "documentation", "creation", "pk", "sense", "table", "customization", "preparation", "uniqueconstraint", "convenience", "b4", "cheese", "get_previous_by_foo", "behavior", "validate_unique", "str", "query", "following", "default_db_alias", "nuance", "import", "spelling", "talk", "respect", "moment", "datefield", "information", "article", "#", "result", "get_absolute_url", "point", "section", "versions", "beaver", "¶", "init", "@cached_property", "specifying", "pre_save", "couple", "avoid", "change", "uniqueness", "auto_now", "format", "example", "full_clean", "django.db.models", "field.unique_for_month", "inheriting", "value", "functions", "field.db_default", "source", "approaches", "n", "field.unique_for_year", "exclude", "dilemma", "force_insert=(models", "blog", "primary", "save", "create", "gotcha", "django.db", "details", "proxy", "override", "rfc", "deferred_fields", "form", "shirt_size", "object", "deletions", "task", "one", "attributes", "postgresql", "algorithm", "from_db", "returns", "parent", "trigger", "assignment", "sequence", "fred", "api", "note", "insert", "valueerror", "django", "bookmanager", "manually", "b2", "parameter", "validation", "approach", "field", "is_valid", "draft", "strings", "bob", "self.name", "http", "effect", "=", "test_update_result", "objects", "relative", "reloading", "implementation", "model.validate_constraints", "+", "statements", "range", "pride", "obj", "flintstone", "model.clean_fields", "multitableinherited", "guides", "field_names", "templates", "adelete", "places", "time", "exception", "property", "delete", "queryset", "restaurant", "define", "site", "non_field_errors", "d", "manager", "record", "django.utils.translation", "fields", "signature", "cafe", "union", "arithmetic", "custom", "f", "methods", "modelstate", "keyword", "update", "documents", "none", "urls", "django.utils.encoding.iri_to_uri", "keep_parents", "base", "process", "access", "examplemodel", "mymodel", "end", "classmethod", "str(obj", "flag", "cleaning", "inheritance", "prejudice", "db_default", "publication", "cls(*values", "object.get_absolute_url", "mapping", "refresh_from_db", "thing", "create_book", "field.unique_for_date", "rating", "href", "data", "constraint", "bulk", "lookups", "pub_date", "bits", "filtering", "child", "field.contribute_to_class", "editing", "s", "kwargs", "keys", "._loaded_values", "sql", "field.unique", "meta.constraints", "arguments", "practice", "last_name", "db", "cheddar", "field.pre_save", "models", "detail", "row", "title", "call", "meta.unique_together", "object.name", "thoughts", "feed", "support", "types", "creator", "intersection", "p", "filter", "validate", "false", "product", "_", "records", "customizing", "collision", "concrete_fields", "integers", "values", "cases", "zip", "super", "clean", "today", "annotations", "number_sold", "compatibility", "test", "len", "get_next_by_foo", "input", "parents", "transaction", "entries", "model", "max_length", "validationerror", "processing", "iso", "equality", "get_deferred_fields", "purposes", "n’t", "possibilities", "syndication", "validate_constraints", "case", "race", "class", "number", "base_manager", "choices", "return", "force_insert", "report", "attribute", "function", "care", "string", "list", "archival", "tie", "loading", "app", "view", "i", "datetimefield", "flags", "user", "part", "queries", "errors", "account", "breaker", "exceptions", "unique_together", "names", "meta.exclude", "modification", "typeerror", "expressions", "document", "representation", "/people/", "date", "set", "autofield", "foo", "database", "get_foo_display", "id=3", "reverse", "databases", "clean_fields", "reference", "instance", "schema", "code", "incrementing", "cls", "primary_key", "del", "strategy", "step"], "type": "documentation"},
{"title": "Model ", "url": "https://docs.djangoproject.com/en/5.1/ref/models/options/", "content": "Model Meta options ¶ This document explains all the possible metadata options that you can give your model in its internal class Meta . Available Meta options ¶ abstract ¶ Options. abstract ¶ If abstract = True , this model will be an abstract base class . app_label ¶ Options. app_label ¶ If a model is defined outside of an application in INSTALLED_APPS , it must declare which app it belongs to: app_label = \"myapp\" If you want to represent a model with the format app_label.object_name or app_label.model_name you can use model._meta.label or model._meta.label_lower respectively. base_manager_name ¶ Options. base_manager_name ¶ The attribute name of the manager, for example, 'objects' , to use for\nthe model’s _base_manager . db_table ¶ Options. db_table ¶ The name of the database table to use for the model: db_table = \"music_album\" Table names ¶ To save you time, Django automatically derives the name of the database table\nfrom the name of your model class and the app that contains it. A model’s\ndatabase table name is constructed by joining the model’s “app label” – the\nname you used in manage.py startapp – to the model’s\nclass name, with an underscore between them. For example, if you have an app bookstore (as created by manage.py startapp bookstore ), a model defined as class Book will have\na database table named bookstore_book . To override the database table name, use the db_table parameter in class Meta . If your database table name is an SQL reserved word, or contains characters that\naren’t allowed in Python variable names – notably, the hyphen – that’s OK.\nDjango quotes column and table names behind the scenes. Use lowercase table names for MariaDB and MySQL It is strongly advised that you use lowercase table names when you override\nthe table name via db_table , particularly if you are using the MySQL\nbackend. See the MySQL notes for more details. Table name quoting for Oracle In order to meet the 30-char limitation Oracle has on table names,\nand match the usual conventions for Oracle databases, Django may shorten\ntable names and turn them all-uppercase. To prevent such transformations,\nuse a quoted name as the value for db_table : db_table = '\"name_left_in_lowercase\"' Such quoted names can also be used with Django’s other supported database\nbackends; except for Oracle, however, the quotes have no effect. See the Oracle notes for more details. db_table_comment ¶ Options. db_table_comment ¶ The comment on the database table to use for this model. It is useful for\ndocumenting database tables for individuals with direct database access who may\nnot be looking at your Django code. For example: class Answer ( models . Model ): question = models . ForeignKey ( Question , on_delete = models . CASCADE ) answer = models . TextField () class Meta : db_table_comment = \"Question answers\" db_tablespace ¶ Options. db_tablespace ¶ The name of the database tablespace to use\nfor this model. The default is the project’s DEFAULT_TABLESPACE setting, if set. If the backend doesn’t support tablespaces, this option is\nignored. default_manager_name ¶ Options. default_manager_name ¶ The name of the manager to use for the model’s _default_manager . default_related_name ¶ Options. default_related_name ¶ The name that will be used by default for the relation from a related object\nback to this one. The default is <model_name>_set . This option also sets related_query_name . As the reverse name for a field should be unique, be careful if you intend\nto subclass your model. To work around name collisions, part of the name\nshould contain '%(app_label)s' and '%(model_name)s' , which are\nreplaced respectively by the name of the application the model is in,\nand the name of the model, both lowercased. See the paragraph on related names for abstract models . get_latest_by ¶ Options. get_latest_by ¶ The name of a field or a list of field names in the model, typically DateField , DateTimeField , or IntegerField . This\nspecifies the default field(s) to use in your model Manager ’s latest() and earliest() methods. Example: # Latest by ascending order_date. get_latest_by = \"order_date\" # Latest by priority descending, order_date ascending. get_latest_by = [ \"-priority\" , \"order_date\" ] See the latest() docs for more. managed ¶ Options. managed ¶ Defaults to True , meaning Django will create the appropriate database\ntables in migrate or as part of migrations and remove them as\npart of a flush management command. That is, Django manages the database tables’ lifecycles. If False , no database table creation, modification, or deletion\noperations will be performed for this model. This is useful if the model\nrepresents an existing table or a database view that has been created by\nsome other means. This is the only difference when managed=False . All\nother aspects of model handling are exactly the same as normal. This\nincludes Adding an automatic primary key field to the model if you don’t\ndeclare it.  To avoid confusion for later code readers, it’s\nrecommended to specify all the columns from the database table you\nare modeling when using unmanaged models. If a model with managed=False contains a ManyToManyField that points to another\nunmanaged model, then the intermediate table for the many-to-many\njoin will also not be created. However, the intermediary table\nbetween one managed and one unmanaged model will be created. If you need to change this default behavior, create the intermediary\ntable as an explicit model (with managed set as needed) and use\nthe ManyToManyField.through attribute to make the relation\nuse your custom model. For tests involving models with managed=False , it’s up to you to ensure\nthe correct tables are created as part of the test setup. If you’re interested in changing the Python-level behavior of a model class,\nyou could use managed=False and create a copy of an existing model.\nHowever, there’s a better approach for that situation: Proxy models . order_with_respect_to ¶ Options. order_with_respect_to ¶ Makes this object orderable with respect to the given field, usually a ForeignKey . This can be used to make related objects orderable with\nrespect to a parent object. For example, if an Answer relates to a Question object, and a question has more than one answer, and the order\nof answers matters, you’d do this: from django.db import models class Question ( models . Model ): text = models . TextField () # ... class Answer ( models . Model ): question = models . ForeignKey ( Question , on_delete = models . CASCADE ) # ... class Meta : order_with_respect_to = \"question\" When order_with_respect_to is set, two additional methods are provided to\nretrieve and to set the order of the related objects: get_RELATED_order() and set_RELATED_order() , where RELATED is the lowercased model name. For\nexample, assuming that a Question object has multiple related Answer objects, the list returned contains the primary keys of the related Answer objects: >>> question = Question . objects . get ( id = 1 ) >>> question . get_answer_order () [1, 2, 3] The order of a Question object’s related Answer objects can be set by\npassing in a list of Answer primary keys: >>> question . set_answer_order ([ 3 , 1 , 2 ]) The related objects also get two methods, get_next_in_order() and get_previous_in_order() , which can be used to access those objects in their\nproper order. Assuming the Answer objects are ordered by id : >>> answer = Answer . objects . get ( id = 2 ) >>> answer . get_next_in_order () <Answer: 3> >>> answer . get_previous_in_order () <Answer: 1> order_with_respect_to implicitly sets the ordering option Internally, order_with_respect_to adds an additional field/database\ncolumn named _order and sets the model’s ordering option to this field. Consequently, order_with_respect_to and ordering cannot be used together, and the ordering added by order_with_respect_to will apply whenever you obtain a list of objects\nof this model. Changing order_with_respect_to Because order_with_respect_to adds a new database column, be sure to\nmake and apply the appropriate migrations if you add or change order_with_respect_to after your initial migrate . ordering ¶ Options. ordering ¶ The default ordering for the object, for use when obtaining lists of objects: ordering = [ \"-order_date\" ] This is a tuple or list of strings and/or query expressions. Each string is\na field name with an optional “-” prefix, which indicates descending order.\nFields without a leading “-” will be ordered ascending. Use the string “?”\nto order randomly. For example, to order by a pub_date field ascending, use this: ordering = [ \"pub_date\" ] To order by pub_date descending, use this: ordering = [ \"-pub_date\" ] To order by pub_date descending, then by author ascending, use this: ordering = [ \"-pub_date\" , \"author\" ] You can also use query expressions . To\norder by author ascending and make null values sort last, use this: from django.db.models import F ordering = [ F ( \"author\" ) . asc ( nulls_last = True )] Warning Ordering is not a free operation. Each field you add to the ordering\nincurs a cost to your database. Each foreign key you add will\nimplicitly include all of its default orderings as well. If a query doesn’t have an ordering specified, results are returned from\nthe database in an unspecified order. A particular ordering is guaranteed\nonly when ordering by a set of fields that uniquely identify each object in\nthe results. For example, if a name field isn’t unique, ordering by it\nwon’t guarantee objects with the same name always appear in the same order. permissions ¶ Options. permissions ¶ Extra permissions to enter into the permissions table when creating this object.\nAdd, change, delete, and view permissions are automatically created for each\nmodel. This example specifies an extra permission, can_deliver_pizzas : permissions = [( \"can_deliver_pizzas\" , \"Can deliver pizzas\" )] This is a list or tuple of 2-tuples in the format (permission_code, human_readable_permission_name) . default_permissions ¶ Options. default_permissions ¶ Defaults to ('add', 'change', 'delete', 'view') . You may customize this\nlist, for example, by setting this to an empty list if your app doesn’t\nrequire any of the default permissions. It must be specified on the model\nbefore the model is created by migrate in order to prevent any\nomitted permissions from being created. proxy ¶ Options. proxy ¶ If proxy = True , a model which subclasses another model will be treated as\na proxy model . required_db_features ¶ Options. required_db_features ¶ List of database features that the current connection should have so that\nthe model is considered during the migration phase. For example, if you set\nthis list to ['gis_enabled'] , the model will only be synchronized on\nGIS-enabled databases. It’s also useful to skip some models when testing\nwith several database backends. Avoid relations between models that may or\nmay not be created as the ORM doesn’t handle this. required_db_vendor ¶ Options. required_db_vendor ¶ Name of a supported database vendor that this model is specific to. Current\nbuilt-in vendor names are: sqlite , postgresql , mysql , oracle . If this attribute is not empty and the current connection vendor\ndoesn’t match it, the model will not be synchronized. select_on_save ¶ Options. select_on_save ¶ Determines if Django will use the pre-1.6 django.db.models.Model.save() algorithm. The old algorithm\nuses SELECT to determine if there is an existing row to be updated.\nThe new algorithm tries an UPDATE directly. In some rare cases the UPDATE of an existing row isn’t visible to Django. An example is the\nPostgreSQL ON UPDATE trigger which returns NULL . In such cases the\nnew algorithm will end up doing an INSERT even when a row exists in\nthe database. Usually there is no need to set this attribute. The default is False . See django.db.models.Model.save() for more about the old and\nnew saving algorithm. indexes ¶ Options. indexes ¶ A list of indexes that you want to define on\nthe model: from django.db import models class Customer ( models . Model ): first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) class Meta : indexes = [ models . Index ( fields = [ \"last_name\" , \"first_name\" ]), models . Index ( fields = [ \"first_name\" ], name = \"first_name_idx\" ), ] unique_together ¶ Options. unique_together ¶ Use UniqueConstraint with the constraints option instead. UniqueConstraint provides more functionality than unique_together . unique_together may be deprecated in the\nfuture. Sets of field names that, taken together, must be unique: unique_together = [[ \"driver\" , \"restaurant\" ]] This is a list of lists that must be unique when considered together.\nIt’s used in the Django admin and is enforced at the database level (i.e., the\nappropriate UNIQUE statements are included in the CREATE TABLE statement). For convenience, unique_together can be a single list when dealing with\na single set of fields: unique_together = [ \"driver\" , \"restaurant\" ] A ManyToManyField cannot be included in unique_together . (It’s not clear what that would even mean!) If you\nneed to validate uniqueness related to a ManyToManyField , try using a signal or\nan explicit through model. The ValidationError raised during model validation when the constraint\nis violated has the unique_together error code. constraints ¶ Options. constraints ¶ A list of constraints that you want to\ndefine on the model: from django.db import models class Customer ( models . Model ): age = models . IntegerField () class Meta : constraints = [ models . CheckConstraint ( condition = models . Q ( age__gte = 18 ), name = \"age_gte_18\" ), ] verbose_name ¶ Options. verbose_name ¶ A human-readable name for the object, singular: verbose_name = \"pizza\" If this isn’t given, Django will use a munged version of the class name: CamelCase becomes camel case . verbose_name_plural ¶ Options. verbose_name_plural ¶ The plural name for the object: verbose_name_plural = \"stories\" If this isn’t given, Django will use verbose_name + \"s\" . Read-only Meta attributes ¶ label ¶ Options. label ¶ Representation of the object, returns app_label.object_name , e.g. 'polls.Question' . label_lower ¶ Options. label_lower ¶ Representation of the model, returns app_label.model_name , e.g. 'polls.question' .", "keywords": ["lists", "index", "available", "permissions", "characters", "column", "connection", "driver", "age__gte", "polls.question", "mysql", "statements", "error", "stories", "checkconstraint", "app_label.object_name", "migrations", "manytomanyfield", "book", "%", "setting", "intermediary", "docs", "default_manager", "order", "handling", "statement", "signal", "scenes", "creation", "limitation", "set_related_order", "false", "pizza", "time", "sets", "application", "answer", "management", "cascade", "prefix", "oracle", "null", "q", "_", "migrate", "model_name)s", "table", "aspects", "tests", "restaurant", "related_query_name", "uniqueconstraint", "convenience", "on", "testing", "age_gte_18", "behavior", "name_left_in_lowercase", "lowercase", "select_on_save", "values", "label_lower", "first_name_idx", "quotes", "get_next_in_order", "d", "query", "cases", "camel", "set_answer_order", "manager", "use", "asc", "import", "collisions", "determines", "respect", "datefield", "difference", "condition", "project", "orderings", "permission", "get_answer_order", "#", "default_related_name", "underscore", "test", "fields", "¶", "individuals", "default", "matters", "option", "answers", "order_with_respect_to", "copy", "custom", "f", "field(s", "methods", "update", "need", "db_tablespace", "model", "ascending", "camelcase", "max_length", "change", "select", "uniqueness", "default_tablespace", "order_date", "join", "validationerror", "format", "base", "access", "documenting", "results", "word", "command", "related", "customer", "base_manager_name", "example", "constraints", "age", "ordering", "n’t", "char", "value", "sqlite", "backend", "label", "music_album", "readers", "case", "class", "base_manager", "app_label.model_name", "default_permissions", "required_db_features", "version", "deletion", "tuple", "tuples", "app_label", "columns", "tables", "permission_code", "attribute", "gis", "meta", "future", "django.db", "string", "uppercase", "list", "details", "proxy", "question", "comment", "tablespaces", "verbose_name_plural", "polls", "setup", "app", "view", "confusion", "constraint", "name", "object", "options", "datetimefield", "i", "bookstore", "priority", "pub_date", "warning", "part", "one", "hyphen", "postgresql", "model._meta.label", "notes", "algorithm", "tablespace", "first_name", "operations", "returns", "vendor", "python", "parent", "charfield", "phase", "trigger", "startapp", "myapp", "s", "keys", "means", "indexes", "paragraph", "sql", "unique_together", "migration", "orm", "insert", "saving", "default_manager_name", "get_latest_by", "get_previous_in_order", "author", "singular", "names", "app_label)s", "django", "level", "modification", "expressions", "bookstore_book", "required_db_vendor", "parameter", "true", "document", "validation", "representation", "set", "text", "approach", "get_related_order", "pre-1.6", "backends", "field", "-order_date", "django.db.models.model.save", "functionality", "textfield", "cost", "strings", "relations", "relation", "last_name", "foreignkey", "database", "integerfield", "model._meta.label_lower", "databases", "human_readable_permission_name", "-priority", "pizzas", "operation", "lifecycles", "effect", "=", "code", "models", "transformations", "objects", "descending", "key", "conventions", "situation", "defaults", ".", "row", "verbose_name"], "type": "documentation"},
{"title": "Model class reference", "url": "https://docs.djangoproject.com/en/5.1/ref/models/class/", "content": "Model class reference ¶ This document covers features of the Model class.\nFor more information about models, see the complete list of Model\nreference guides . Attributes ¶ DoesNotExist ¶ exception Model. DoesNotExist ¶ This exception is raised by the ORM when an expected object is not found.\nFor example, QuerySet.get() will raise it when no object is found\nfor the given lookups. Django provides a DoesNotExist exception as an attribute of each model\nclass to identify the class of object that could not be found, allowing you\nto catch exceptions for a particular model class. The exception is a\nsubclass of django.core.exceptions.ObjectDoesNotExist . MultipleObjectsReturned ¶ exception Model. MultipleObjectsReturned ¶ This exception is raised by QuerySet.get() when multiple objects are\nfound for the given lookups. Django provides a MultipleObjectsReturned exception as an attribute of\neach model class to identify the class of object for which multiple objects\nwere found, allowing you to catch exceptions for a particular model class.\nThe exception is a subclass of django.core.exceptions.MultipleObjectsReturned . objects ¶ Model. objects ¶ Each non-abstract Model class must have a Manager instance added to it.\nDjango ensures that in your model class you have  at least a\ndefault Manager specified. If you don’t add your own Manager ,\nDjango will add an attribute objects containing default Manager instance. If you add your own Manager instance attribute, the default one does\nnot appear. Consider the following example: from django.db import models class Person ( models . Model ): # Add manager with another name people = models . Manager () For more details on model managers see Managers and Retrieving objects .", "keywords": ["people", "import", "django.core.exceptions", "class", "information", "subclass", "doesnotexist", "exceptions", "orm", "#", "django", "¶", "default", "managers", "attribute", "document", "guides", "django.db", "list", "details", "model", "exception", "lookups", "object", "name", "reference", "instance", "queryset.get", "features", "=", "models", "example", "person", "attributes", "objects", "one", "objectdoesnotexist", ".", "manager"], "type": "documentation"},
{"title": "Related objects reference", "url": "https://docs.djangoproject.com/en/5.1/ref/models/relations/", "content": "Related objects reference ¶ class RelatedManager ¶ A “related manager” is a manager used in a one-to-many or many-to-many\nrelated context. This happens in two cases: The “other side” of a ForeignKey relation.\nThat is: from django.db import models class Blog ( models . Model ): # ... pass class Entry ( models . Model ): blog = models . ForeignKey ( Blog , on_delete = models . CASCADE , null = True ) In the above example, the methods below will be available on\nthe manager blog.entry_set . Both sides of a ManyToManyField relation class Topping ( models . Model ): # ... pass class Pizza ( models . Model ): toppings = models . ManyToManyField ( Topping ) In this example, the methods below will be available both on topping.pizza_set and on pizza.toppings . add ( * objs , bulk = True , through_defaults = None ) ¶ aadd ( * objs , bulk = True , through_defaults = None ) ¶ Asynchronous version : aadd Adds the specified model objects to the related object set. Example: >>> b = Blog . objects . get ( id = 1 ) >>> e = Entry . objects . get ( id = 234 ) >>> b . entry_set . add ( e ) # Associates Entry e with Blog b. In the example above, in the case of a ForeignKey relationship, QuerySet.update() is used to perform the update. This requires the objects to already be\nsaved. You can use the bulk=False argument to instead have the related\nmanager perform the update by calling e.save() . Using add() with a many-to-many relationship, however, will not\ncall any save() methods (the bulk argument doesn’t exist), but\nrather create the relationships using QuerySet.bulk_create() . If you need to execute\nsome custom logic when a relationship is created, listen to the m2m_changed signal, which will\ntrigger pre_add and post_add actions. Using add() on a relation that already exists won’t duplicate the\nrelation, but it will still trigger signals. For many-to-many relationships add() accepts either model instances\nor field values, normally primary keys, as the *objs argument. Use the through_defaults argument to specify values for the new intermediate model instance(s), if\nneeded. You can use callables as values in the through_defaults dictionary and they will be evaluated once before creating any\nintermediate instance(s). create ( through_defaults = None , ** kwargs ) ¶ acreate ( through_defaults = None , ** kwargs ) ¶ Asynchronous version : acreate Creates a new object, saves it and puts it in the related object set.\nReturns the newly created object: >>> b = Blog . objects . get ( id = 1 ) >>> e = b . entry_set . create ( ... headline = \"Hello\" , body_text = \"Hi\" , pub_date = datetime . date ( 2005 , 1 , 1 ) ... ) # No need to call e.save() at this point -- it's already been saved. This is equivalent to (but simpler than): >>> b = Blog . objects . get ( id = 1 ) >>> e = Entry ( blog = b , headline = \"Hello\" , body_text = \"Hi\" , pub_date = datetime . date ( 2005 , 1 , 1 )) >>> e . save ( force_insert = True ) Note that there’s no need to specify the keyword argument of the model\nthat defines the relationship. In the above example, we don’t pass the\nparameter blog to create() . Django figures out that the new Entry object’s blog field should be set to b . Use the through_defaults argument to specify values for the new intermediate model instance, if\nneeded. You can use callables as values in the through_defaults dictionary. remove ( * objs , bulk = True ) ¶ aremove ( * objs , bulk = True ) ¶ Asynchronous version : aremove Removes the specified model objects from the related object set: >>> b = Blog . objects . get ( id = 1 ) >>> e = Entry . objects . get ( id = 234 ) >>> b . entry_set . remove ( e ) # Disassociates Entry e from Blog b. Similar to add() , e.save() is called in the example above\nto perform the update. Using remove() with a many-to-many\nrelationship, however, will delete the relationships using QuerySet.delete() which\nmeans no model save() methods are called; listen to the m2m_changed signal if you wish to\nexecute custom code when a relationship is deleted. For many-to-many relationships remove() accepts either model\ninstances or field values, normally primary keys, as the *objs argument. For ForeignKey objects, this method only\nexists if null=True . If the related field can’t be set to None ( NULL ), then an object can’t be removed from a relation without\nbeing added to another. In the above example, removing e from b.entry_set() is equivalent to doing e.blog = None , and because\nthe blog ForeignKey doesn’t have null=True , this is invalid. For ForeignKey objects, this method accepts\na bulk argument to control how to perform the operation.\nIf True (the default), QuerySet.update() is used.\nIf bulk=False , the save() method of each individual model\ninstance is called instead. This triggers the pre_save and post_save signals and comes at the\nexpense of performance. For many-to-many relationships, the bulk keyword argument doesn’t\nexist. clear ( bulk = True ) ¶ aclear ( bulk = True ) ¶ Asynchronous version : aclear Removes all objects from the related object set: >>> b = Blog . objects . get ( id = 1 ) >>> b . entry_set . clear () Note this doesn’t delete the related objects – it just disassociates\nthem. Just like remove() , clear() is only available on ForeignKey s where null=True and it also\naccepts the bulk keyword argument. For many-to-many relationships, the bulk keyword argument doesn’t\nexist. set ( objs , bulk = True , clear = False , through_defaults = None ) ¶ aset ( objs , bulk = True , clear = False , through_defaults = None ) ¶ Asynchronous version : aset Replace the set of related objects: >>> new_list = [ obj1 , obj2 , obj3 ] >>> e . related_set . set ( new_list ) This method accepts a clear argument to control how to perform the\noperation. If False (the default), the elements missing from the\nnew set are removed using remove() and only the new ones are added.\nIf clear=True , the clear() method is called instead and the\nwhole set is added at once. For ForeignKey objects, the bulk argument is passed on to add() and remove() . For many-to-many relationships, the bulk keyword argument doesn’t\nexist. Note that since set() is a compound operation, it is subject to\nrace conditions. For instance, new objects may be added to the database\nin between the call to clear() and the call to add() . For many-to-many relationships set() accepts a list of either model\ninstances or field values, normally primary keys, as the objs argument. Use the through_defaults argument to specify values for the new intermediate model instance(s), if\nneeded. You can use callables as values in the through_defaults dictionary and they will be evaluated once before creating any\nintermediate instance(s). Note Note that add() , aadd() , create() , acreate() , remove() , aremove() , clear() , aclear() , set() , and aset() all apply database changes immediately for all types of\nrelated fields. In other words, there is no need to call save() / asave() on either end of the relationship. If you use prefetch_related() ,\nthe add() , aadd() , remove() , aremove() , clear() , aclear() , set() , and aset() methods clear the prefetched\ncache.", "keywords": ["dictionary", "similar", "cache", "manytomanyfield", "types", "datetime", "queryset.update", "changes", "signal", "false", "pizza", "topping.pizza_set", "null", "method", "compound", "values", "aremove", "objs", "performance", "d", "cases", "manager", "import", "instance(s", "callables", "relatedmanager", "associates", "b.entry_set", "#", "point", "fields", "queryset.delete", "¶", "removes", "default", "prefetch_related", "custom", "pre_save", "methods", "side", "keyword", "update", "need", "aclear", "model", "blog.entry_set", "none", "clear", "pizza.toppings", "toppings", "e.blog", "example", "through_defaults", "n’t", "pre_add", "aset", "end", "case", "argument", "race", "class", "b.", "words", "version", "new_list", "blog", "b", "save", "ones", "django.db", "disassociates", "list", "e", "actions", "queryset.bulk_create", "bulk", "i", "object", "pub_date", "relationships", "aadd", "sides", "remove", "returns", "obj3", "instances", "related_set", "obj2", "s", "kwargs", "keys", "note", "conditions", "signals", "django", "parameter", "elements", "acreate", "*", "set", "date", "field", "topping", "relation", "foreignkey", "database", "relationship", "context", "e.save", "add", "expense", "headline", "operation", "logic", "reference", "instance", "=", "models", "code", "objects", "entry", "call"], "type": "documentation"},
{"title": "Model ", "url": "https://docs.djangoproject.com/en/5.1/ref/models/meta/", "content": "Model _meta API ¶ class Options [source] ¶ The model _meta API is at the core of the Django ORM. It enables other\nparts of the system such as lookups, queries, forms, and the admin to\nunderstand the capabilities of each model. The API is accessible through\nthe _meta attribute of each model class, which is an instance of an django.db.models.options.Options object. Methods that it provides can be used to: Retrieve all field instances of a model Retrieve a single field instance of a model by name Field access API ¶ Retrieving a single field instance of a model by name ¶ Options. get_field ( field_name ) [source] ¶ Returns the field instance given a name of a field. field_name can be the name of a field on the model, a field\non an abstract or inherited model, or a field defined on another\nmodel that points to the model. In the latter case, the field_name will be (in order of preference) the related_query_name set by the user, the related_name set by the user, or\nthe name automatically generated by Django. Hidden fields cannot be retrieved\nby name. If a field with the given name is not found a FieldDoesNotExist exception will be\nraised. >>> from django.contrib.auth.models import User # A field on the model >>> User . _meta . get_field ( \"username\" ) <django.db.models.fields.CharField: username> # A field from another model that has a relation with the current model >>> User . _meta . get_field ( \"logentry\" ) <ManyToOneRel: admin.logentry> # A non existent field >>> User . _meta . get_field ( \"does_not_exist\" ) Traceback (most recent call last): ... FieldDoesNotExist : User has no field named 'does_not_exist' Retrieving all field instances of a model ¶ Options. get_fields ( include_parents = True , include_hidden = False ) [source] ¶ Returns a tuple of fields associated with a model. get_fields() accepts\ntwo parameters that can be used to control which fields are returned: include_parents True by default. Recursively includes fields defined on parent\nclasses. If set to False , get_fields() will only search for\nfields declared directly on the current model. Fields from models that\ndirectly inherit from abstract models or proxy classes are considered\nto be local, not on the parent. include_hidden False by default. If set to True , get_fields() will include hidden fields . >>> from django.contrib.auth.models import User >>> User . _meta . get_fields () (<ManyToOneRel: admin.logentry>, <django.db.models.fields.AutoField: id>, <django.db.models.fields.CharField: password>, <django.db.models.fields.DateTimeField: last_login>, <django.db.models.fields.BooleanField: is_superuser>, <django.db.models.fields.CharField: username>, <django.db.models.fields.CharField: first_name>, <django.db.models.fields.CharField: last_name>, <django.db.models.fields.EmailField: email>, <django.db.models.fields.BooleanField: is_staff>, <django.db.models.fields.BooleanField: is_active>, <django.db.models.fields.DateTimeField: date_joined>, <django.db.models.fields.related.ManyToManyField: groups>, <django.db.models.fields.related.ManyToManyField: user_permissions>) # Also include hidden fields. >>> User . _meta . get_fields ( include_hidden = True ) (<ManyToOneRel: auth.user_groups>, <ManyToOneRel: auth.user_user_permissions>, <ManyToOneRel: admin.logentry>, <django.db.models.fields.AutoField: id>, <django.db.models.fields.CharField: password>, <django.db.models.fields.DateTimeField: last_login>, <django.db.models.fields.BooleanField: is_superuser>, <django.db.models.fields.CharField: username>, <django.db.models.fields.CharField: first_name>, <django.db.models.fields.CharField: last_name>, <django.db.models.fields.EmailField: email>, <django.db.models.fields.BooleanField: is_staff>, <django.db.models.fields.BooleanField: is_active>, <django.db.models.fields.DateTimeField: date_joined>, <django.db.models.fields.related.ManyToManyField: groups>, <django.db.models.fields.related.ManyToManyField: user_permissions>)", "keywords": ["retrieve", "emailfield", "manytomanyfield", "order", "booleanfield", "username", "field_name", "false", "exception", "classes", "_", "related_query_name", "is_superuser", "system", "preference", "d", "include_hidden", "import", "logentry", "get_fields", "django.db.models.fields", "groups", "#", "auth.user_user_permissions", "fields", "django.contrib.auth.models", "¶", "default", "does_not_exist", "methods", "existent", "model", "include_parents", "access", "capabilities", "related_name", ">", "email", "date_joined", "source", "case", "class", "tuple", "manytoonerel", "attribute", "get_field", "meta", "django.db.models.options", "proxy", "auth.user_groups", "parts", "lookups", "object", "options", "name", "datetimefield", "user", "queries", "first_name", "admin", "returns", "parent", "charfield", "core", "instances", "last_login", "traceback", "password", "api", "orm", "django", "is_active", "true", "admin.logentry", "autofield", "field", "fielddoesnotexist", "relation", "forms", "instance", "=", "models", "parameters", "call"], "type": "documentation"},
{"title": "Constraints reference", "url": "https://docs.djangoproject.com/en/5.1/ref/models/constraints/", "content": "Constraints reference ¶ The classes defined in this module create database constraints. They are added\nin the model Meta.constraints option. Referencing built-in constraints Constraints are defined in django.db.models.constraints , but for\nconvenience they’re imported into django.db.models . The standard\nconvention is to use from django.db import models and refer to the\nconstraints as models.<Foo>Constraint . Constraints in abstract base classes You must always specify a unique name for the constraint. As such, you\ncannot normally specify a constraint on an abstract base class, since the Meta.constraints option is\ninherited by subclasses, with exactly the same values for the attributes\n(including name ) each time. To work around name collisions, part of the\nname may contain '%(app_label)s' and '%(class)s' , which are\nreplaced, respectively, by the lowercased app label and class name of the\nconcrete model. For example CheckConstraint(condition=Q(age__gte=18), name='%(app_label)s_%(class)s_is_adult') . Validation of Constraints Constraints are checked during the model validation . BaseConstraint ¶ class BaseConstraint ( * name , violation_error_code = None , violation_error_message = None ) [source] ¶ Base class for all constraints. Subclasses must implement constraint_sql() , create_sql() , remove_sql() and validate() methods. Deprecated since version 5.0: Support for passing positional arguments is deprecated. All constraints have the following parameters in common: name ¶ BaseConstraint. name ¶ The name of the constraint. You must always specify a unique name for the\nconstraint. violation_error_code ¶ New in Django 5.0. BaseConstraint. violation_error_code ¶ The error code used when ValidationError is raised during model validation . Defaults to None . violation_error_message ¶ BaseConstraint. violation_error_message ¶ The error message used when ValidationError is raised during model validation . Defaults to \"Constraint “%(name)s” is violated.\" . validate() ¶ BaseConstraint. validate ( model , instance , exclude = None , using = DEFAULT_DB_ALIAS ) [source] ¶ Validates that the constraint, defined on model , is respected on the instance . This will do a query on the database to ensure that the\nconstraint is respected. If fields in the exclude list are needed to\nvalidate the constraint, the constraint is ignored. Raise a ValidationError if the constraint is violated. This method must be implemented by a subclass. CheckConstraint ¶ class CheckConstraint ( * , condition , name , violation_error_code = None , violation_error_message = None ) [source] ¶ Creates a check constraint in the database. condition ¶ CheckConstraint. condition ¶ A Q object or boolean Expression that\nspecifies the conditional check you want the constraint to enforce. For example, CheckConstraint(condition=Q(age__gte=18), name='age_gte_18') ensures the age field is never less than 18. Expression order Q argument order is not necessarily preserved, however the order of Q expressions themselves are preserved. This may be important for\ndatabases that preserve check constraint expression order for performance\nreasons. For example, use the following format if order matters: CheckConstraint ( condition = Q ( age__gte = 18 ) & Q ( expensive_check = condition ), name = \"age_gte_18_and_others\" , ) Oracle < 23c Checks with nullable fields on Oracle < 23c must include a condition\nallowing for NULL values in order for validate() to behave the same as check constraints validation. For example, if age is a nullable field: CheckConstraint ( condition = Q ( age__gte = 18 ) | Q ( age__isnull = True ), name = \"age_gte_18\" ) Deprecated since version 5.1: The check attribute is deprecated in favor of condition . UniqueConstraint ¶ class UniqueConstraint ( * expressions , fields = () , name = None , condition = None , deferrable = None , include = None , opclasses = () , nulls_distinct = None , violation_error_code = None , violation_error_message = None ) [source] ¶ Creates a unique constraint in the database. expressions ¶ UniqueConstraint. expressions ¶ Positional argument *expressions allows creating functional unique\nconstraints on expressions and database functions. For example: UniqueConstraint ( Lower ( \"name\" ) . desc (), \"category\" , name = \"unique_lower_name_category\" ) creates a unique constraint on the lowercased value of the name field in\ndescending order and the category field in the default ascending order. Functional unique constraints have the same database restrictions as Index.expressions . fields ¶ UniqueConstraint. fields ¶ A list of field names that specifies the unique set of columns you want the\nconstraint to enforce. For example, UniqueConstraint(fields=['room', 'date'], name='unique_booking') ensures each room can only be booked once for each\ndate. condition ¶ UniqueConstraint. condition ¶ A Q object that specifies the condition you want the constraint to\nenforce. For example: UniqueConstraint ( fields = [ \"user\" ], condition = Q ( status = \"DRAFT\" ), name = \"unique_draft_user\" ) ensures that each user only has one draft. These conditions have the same database restrictions as Index.condition . deferrable ¶ UniqueConstraint. deferrable ¶ Set this parameter to create a deferrable unique constraint. Accepted values\nare Deferrable.DEFERRED or Deferrable.IMMEDIATE . For example: from django.db.models import Deferrable , UniqueConstraint UniqueConstraint ( name = \"unique_order\" , fields = [ \"order\" ], deferrable = Deferrable . DEFERRED , ) By default constraints are not deferred. A deferred constraint will not be\nenforced until the end of the transaction. An immediate constraint will be\nenforced immediately after every command. MySQL, MariaDB, and SQLite. Deferrable unique constraints are ignored on MySQL, MariaDB, and SQLite as\nneither supports them. Warning Deferred unique constraints may lead to a performance penalty . include ¶ UniqueConstraint. include ¶ A list or tuple of the names of the fields to be included in the covering\nunique index as non-key columns. This allows index-only scans to be used for\nqueries that select only included fields ( include )\nand filter only by unique fields ( fields ). For example: UniqueConstraint ( name = \"unique_booking\" , fields = [ \"room\" , \"date\" ], include = [ \"full_name\" ]) will allow filtering on room and date , also selecting full_name ,\nwhile fetching data only from the index. Unique constraints with non-key columns are ignored for databases besides\nPostgreSQL. Non-key columns have the same database restrictions as Index.include . opclasses ¶ UniqueConstraint. opclasses ¶ The names of the PostgreSQL operator classes to use for\nthis unique index. If you require a custom operator class, you must provide one\nfor each field in the index. For example: UniqueConstraint ( name = \"unique_username\" , fields = [ \"username\" ], opclasses = [ \"varchar_pattern_ops\" ] ) creates a unique index on username using varchar_pattern_ops . opclasses are ignored for databases besides PostgreSQL. nulls_distinct ¶ New in Django 5.0. UniqueConstraint. nulls_distinct ¶ Whether rows containing NULL values covered by the unique constraint should\nbe considered distinct from each other. The default value is None which\nuses the database default which is True on most backends. For example: UniqueConstraint ( name = \"ordering\" , fields = [ \"ordering\" ], nulls_distinct = False ) creates a unique constraint that only allows one row to store a NULL value\nin the ordering column. Unique constraints with nulls_distinct are ignored for databases besides\nPostgreSQL 15+. violation_error_code ¶ New in Django 5.0. UniqueConstraint. violation_error_code ¶ The error code used when ValidationError is raised during model validation . Defaults to None . This code is not used for UniqueConstraint s with fields and without a condition . Such UniqueConstraint s have the\nsame error code as constraints defined with Field.unique or in Meta.unique_together . violation_error_message ¶ UniqueConstraint. violation_error_message ¶ The error message used when ValidationError is raised during model validation . Defaults to BaseConstraint.violation_error_message . This message is not used for UniqueConstraint s with fields and without a condition . Such UniqueConstraint s show the\nsame message as constraints defined with Field.unique or in Meta.unique_together .", "keywords": ["class)s", "index", "lower", "column", "q(age__gte=18", "age__gte", "+", "mysql", "error", "checkconstraint", "support", "name='%(app_label)s_%(class)s_is_adult", "%", "rows", "baseconstraint.violation_error_message", "order", "validate", "unique_order", "username", "time", "classes", "violation_error_code", "null", "oracle", "q", "category", "method", "check", "convenience", "age_gte_18", "uniqueconstraint", "values", "performance", "query", "status", "import", "collisions", "new", "subclasses", "condition", "scans", "opclasses", "unique_booking", "standard", "fields", "index.condition", "¶", "default", "option", "show", "custom", "penalty", "methods", "transaction", "model", "ascending", "none", "validationerror", "format", "base", "covering", "command", "age", "example", "constraints", "constraint_sql", "name='age_gte_18", "expensive_check", "checks", "ordering", "functions", "convention", "value", "<", "sqlite", "full_name", "name)s", "label", "end", "source", "argument", "room", "class", "exclude", "version", "tuple", "columns", "attribute", "restrictions", "varchar_pattern_ops", "list", "data", "app", "constraint", "violation_error_message", "name", "object", "user", "part", "validates", "queries", "index.include", "operator", "attributes", "postgresql", "filtering", "reasons", "favor", "remove_sql", "age_gte_18_and_others", "s", "subclass", "field.unique", "deferrable", "conditions", "names", "app_label)s", "django", "|", "message", "expressions", "create_sql", "baseconstraint", "desc", "validation", "parameter", "*", "set", "date", "meta.constraints", "module", "arguments", "field", "backends", "draft", "database", "checkconstraint(condition", "databases", "expression", "reference", "instance", "=", "models", "code", "django.db.models.constraints", "parameters", "defaults", "row", "unique_draft_user", "meta.unique_together"], "type": "documentation"},
{"title": "Model index reference", "url": "https://docs.djangoproject.com/en/5.1/ref/models/indexes/", "content": "Model index reference ¶ Index classes ease creating database indexes. They can be added using the Meta.indexes option. This document\nexplains the API references of Index which includes the index\noptions . Referencing built-in indexes Indexes are defined in django.db.models.indexes , but for convenience\nthey’re imported into django.db.models . The standard convention is\nto use from django.db import models and refer to the indexes as models.<IndexClass> . Index options ¶ class Index ( * expressions , fields = () , name = None , db_tablespace = None , opclasses = () , condition = None , include = None ) [source] ¶ Creates an index (B-Tree) in the database. expressions ¶ Index. expressions ¶ Positional argument *expressions allows creating functional indexes on\nexpressions and database functions. For example: Index ( Lower ( \"title\" ) . desc (), \"pub_date\" , name = \"lower_title_date_idx\" ) creates an index on the lowercased value of the title field in descending\norder and the pub_date field in the default ascending order. Another example: Index ( F ( \"height\" ) * F ( \"weight\" ), Round ( \"weight\" ), name = \"calc_idx\" ) creates an index on the result of multiplying fields height and weight and the weight rounded to the nearest integer. Index.name is required when using *expressions . Restrictions on Oracle Oracle requires functions referenced in an index to be marked as DETERMINISTIC . Django doesn’t validate this but Oracle will error. This\nmeans that functions such as Random() aren’t accepted. Restrictions on PostgreSQL PostgreSQL requires functions and operators referenced in an index to be\nmarked as IMMUTABLE . Django doesn’t validate this but PostgreSQL will\nerror. This means that functions such as Concat() aren’t accepted. MySQL and MariaDB Functional indexes are ignored with MySQL < 8.0.13 and MariaDB as neither\nsupports them. fields ¶ Index. fields ¶ A list or tuple of the name of the fields on which the index is desired. By default, indexes are created with an ascending order for each column. To\ndefine an index with a descending order for a column, add a hyphen before the\nfield’s name. For example Index(fields=['headline', '-pub_date']) would create SQL with (headline, pub_date DESC) . MariaDB Index ordering isn’t supported on MariaDB < 10.8. In that case, a\ndescending index is created as a normal index. name ¶ Index. name ¶ The name of the index. If name isn’t provided Django will auto-generate a\nname. For compatibility with different databases, index names cannot be longer\nthan 30 characters and shouldn’t start with a number (0-9) or underscore (_). Partial indexes in abstract base classes You must always specify a unique name for an index. As such, you\ncannot normally specify a partial index on an abstract base class, since\nthe Meta.indexes option is\ninherited by subclasses, with exactly the same values for the attributes\n(including name ) each time. To work around name collisions, part of the\nname may contain '%(app_label)s' and '%(class)s' , which are\nreplaced, respectively, by the lowercased app label and class name of the\nconcrete model. For example Index(fields=['title'], name='%(app_label)s_%(class)s_title_index') . db_tablespace ¶ Index. db_tablespace ¶ The name of the database tablespace to use for\nthis index. For single field indexes, if db_tablespace isn’t provided, the\nindex is created in the db_tablespace of the field. If Field.db_tablespace isn’t specified (or if the index uses multiple\nfields), the index is created in tablespace specified in the db_tablespace option inside the model’s class Meta . If neither of those tablespaces are set, the index is created\nin the same tablespace as the table. See also For a list of PostgreSQL-specific indexes, see django.contrib.postgres.indexes . opclasses ¶ Index. opclasses ¶ The names of the PostgreSQL operator classes to use for\nthis index. If you require a custom operator class, you must provide one for\neach field in the index. For example, GinIndex(name='json_index', fields=['jsonfield'], opclasses=['jsonb_path_ops']) creates a gin index on jsonfield using jsonb_path_ops . opclasses are ignored for databases besides PostgreSQL. Index.name is required when using opclasses . condition ¶ Index. condition ¶ If the table is very large and your queries mostly target a subset of rows,\nit may be useful to restrict an index to that subset. Specify a condition as a Q . For example, condition=Q(pages__gt=400) indexes records with more than 400 pages. Index.name is required when using condition . Restrictions on PostgreSQL PostgreSQL requires functions referenced in the condition to be marked as\nIMMUTABLE. Django doesn’t validate this but PostgreSQL will error. This\nmeans that functions such as Date functions and Concat aren’t accepted. If you store\ndates in DateTimeField , comparison to datetime objects may require the tzinfo argument\nto be provided because otherwise the comparison could result in a mutable\nfunction due to the casting Django does for lookups . Restrictions on SQLite SQLite imposes restrictions on how a partial index can be constructed. Oracle Oracle does not support partial indexes. Instead, partial indexes can be\nemulated by using functional indexes together with Case expressions. MySQL and MariaDB The condition argument is ignored with MySQL and MariaDB as neither\nsupports conditional indexes. include ¶ Index. include ¶ A list or tuple of the names of the fields to be included in the covering index\nas non-key columns. This allows index-only scans to be used for queries that\nselect only included fields ( include ) and filter only by indexed\nfields ( fields ). For example: Index ( name = \"covering_index\" , fields = [ \"headline\" ], include = [ \"pub_date\" ]) will allow filtering on headline , also selecting pub_date , while\nfetching data only from the index. Using include will produce a smaller index than using a multiple column\nindex but with the drawback that non-key columns can not be used for sorting or\nfiltering. include is ignored for databases besides PostgreSQL. Index.name is required when using include . See the PostgreSQL documentation for more details about covering indexes . Restrictions on PostgreSQL PostgreSQL supports covering B-Tree and GiST indexes . PostgreSQL 14+ also supports\ncovering SP-GiST indexes .", "keywords": ["class)s", "index", "lower", "characters", "column", "operators", "mysql", "error", "round", "%", "rows", "order", "sp", "documentation", "time", "gist", "classes", "oracle", "q", "_", "records", "models.<indexclass", "table", "multiplying", "convenience", "values", "field.db_tablespace", "mariadb", "fields=['jsonfield", "import", "collisions", "subclasses", "immutable", "condition", "scans", "opclasses", "result", "compatibility", "fields", "underscore", "q(pages__gt=400", "¶", "default", "option", "height", "custom", "f", "db_tablespace", "model", "ascending", "none", "base", "example", "ordering", "n’t", "tree", "convention", "functions", "value", "sqlite", "index(fields=['headline", "label", "source", "concat", "case", "argument", "ginindex(name='json_index", "class", "name='%(app_label)s_%(class)s_title_index", "number", "auto", "include", "calc_idx", "tuple", "b", "integer", "columns", "restrictions", "function", "meta", "list", "details", "tablespaces", "data", "django.db.models.indexes", "app", "name", "pub_date", "options", "datetimefield", "lookups", "drawback", "part", "queries", "operator", "postgresql", "hyphen", "attributes", "comparison", "filtering", "references", "tablespace", "jsonfield", "deterministic", "supports", "index(fields=['title", "jsonb_path_ops", "tzinfo", "meta.indexes", "random", "django.contrib.postgres.indexes", "indexes", "api", "index.name", "sql", "gin", "dates", "names", "app_label)s", "django", "expressions", "desc", "document", "*", "date", "field", "database", "databases", "headline", "reference", "lower_title_date_idx", "=", "models", "pages", "objects", "weight", "title", "opclasses=['jsonb_path_ops", "subset", "covering_index"], "type": "documentation"},
{"title": "Models", "url": "https://docs.djangoproject.com/en/5.1/ref/models/", "content": "Models ¶ Model API reference. For introductory material, see Models . Model field reference Field attribute reference Model index reference Constraints reference Model _meta API Related objects reference Model class reference Model Meta options Model instance reference QuerySet API reference Lookup API reference Query Expressions Conditional Expressions Database Functions", "keywords": ["index", "class", "material", "api", "lookup", "¶", "expressions", "attribute", "meta", "field", "model", "database", "options", "_", "queryset", "reference", "instance", "models", "constraints", "objects", "functions", "conditional", "query"], "type": "documentation"},
{"title": "Model field reference", "url": "https://docs.djangoproject.com/en/5.1/ref/models/fields/", "content": "Model field reference ¶ This document contains all the API references of Field including the field options and field types Django offers. See also If the built-in fields don’t do the trick, you can try django-localflavor ( documentation ), which contains assorted\npieces of code that are useful for particular countries and cultures. Also, you can easily write your own custom model fields . Note Fields are defined in django.db.models.fields , but for convenience\nthey’re imported into django.db.models . The standard convention is\nto use from django.db import models and refer to fields as models.<Foo>Field . Field options ¶ The following arguments are available to all field types. All are optional. null ¶ Field. null ¶ If True , Django will store empty values as NULL in the database. Default\nis False . Avoid using null on string-based fields such as CharField and TextField . If a string-based field has null=True , that means it has two possible values for “no data”: NULL ,\nand the empty string. In most cases, it’s redundant to have two possible values\nfor “no data;” the Django convention is to use the empty string, not NULL . One exception is when a CharField has both unique=True and blank=True set. In this situation, null=True is required to avoid\nunique constraint violations when saving multiple objects with blank values. For both string-based and non-string-based fields, you will also need to\nset blank=True if you wish to permit empty values in forms, as the null parameter only affects database storage\n(see blank ). Note When using the Oracle database backend, the value NULL will be stored to\ndenote the empty string regardless of this attribute. blank ¶ Field. blank ¶ If True , the field is allowed to be blank. Default is False . Note that this is different than null . null is\npurely database-related, whereas blank is validation-related. If\na field has blank=True , form validation will allow entry of an empty value.\nIf a field has blank=False , the field will be required. Supplying missing values blank=True can be used with fields having null=False , but this will\nrequire implementing clean() on the model in\norder to programmatically supply any missing values. choices ¶ Field. choices [source] ¶ A mapping or iterable in the format described below to use as choices for this\nfield. If choices are given, they’re enforced by model validation and the default form widget will\nbe a select box with these choices instead of the standard text field. If a mapping is given, the key element is the actual value to be set on the\nmodel, and the second element is the human readable name. For example: YEAR_IN_SCHOOL_CHOICES = { \"FR\" : \"Freshman\" , \"SO\" : \"Sophomore\" , \"JR\" : \"Junior\" , \"SR\" : \"Senior\" , \"GR\" : \"Graduate\" , } You can also pass a sequence consisting itself of iterables of exactly\ntwo items (e.g. [(A1, B1), (A2, B2), …] ). The first element in each tuple\nis the actual value to be set on the model, and the second element is the\nhuman-readable name. For example: YEAR_IN_SCHOOL_CHOICES = [ ( \"FR\" , \"Freshman\" ), ( \"SO\" , \"Sophomore\" ), ( \"JR\" , \"Junior\" ), ( \"SR\" , \"Senior\" ), ( \"GR\" , \"Graduate\" ), ] choices can also be defined as a callable that expects no arguments and\nreturns any of the formats described above. For example: def get_currencies (): return { i : i for i in settings . CURRENCIES } class Expense ( models . Model ): amount = models . DecimalField ( max_digits = 10 , decimal_places = 2 ) currency = models . CharField ( max_length = 3 , choices = get_currencies ) Passing a callable for choices can be particularly handy when, for example,\nthe choices are: the result of I/O-bound operations (which could potentially be cached), such\nas querying a table in the same or an external database, or accessing the\nchoices from a static file. a list that is mostly stable but could vary from time to time or from\nproject to project. Examples in this category are using third-party apps that\nprovide a well-known inventory of values, such as currencies, countries,\nlanguages, time zones, etc. Changed in Django 5.0: Support for mappings and callables was added. Generally, it’s best to define choices inside a model class, and to\ndefine a suitably-named constant for each value: from django.db import models class Student ( models . Model ): FRESHMAN = \"FR\" SOPHOMORE = \"SO\" JUNIOR = \"JR\" SENIOR = \"SR\" GRADUATE = \"GR\" YEAR_IN_SCHOOL_CHOICES = { FRESHMAN : \"Freshman\" , SOPHOMORE : \"Sophomore\" , JUNIOR : \"Junior\" , SENIOR : \"Senior\" , GRADUATE : \"Graduate\" , } year_in_school = models . CharField ( max_length = 2 , choices = YEAR_IN_SCHOOL_CHOICES , default = FRESHMAN , ) def is_upperclass ( self ): return self . year_in_school in { self . JUNIOR , self . SENIOR } Though you can define a choices list outside of a model class and then\nrefer to it, defining the choices and names for each choice inside the\nmodel class keeps all of that information with the class that uses it,\nand helps reference the choices (e.g, Student.SOPHOMORE will work anywhere that the Student model has been imported). You can also collect your available choices into named groups that can\nbe used for organizational purposes: MEDIA_CHOICES = { \"Audio\" : { \"vinyl\" : \"Vinyl\" , \"cd\" : \"CD\" , }, \"Video\" : { \"vhs\" : \"VHS Tape\" , \"dvd\" : \"DVD\" , }, \"unknown\" : \"Unknown\" , } The key of the mapping is the name to apply to the group and the value is the\nchoices inside that group, consisting of the field value and a human-readable\nname for an option. Grouped options may be combined with ungrouped options\nwithin a single mapping (such as the \"unknown\" option in this example). You can also use a sequence, e.g. a list of 2-tuples: MEDIA_CHOICES = [ ( \"Audio\" , ( ( \"vinyl\" , \"Vinyl\" ), ( \"cd\" , \"CD\" ), ), ), ( \"Video\" , ( ( \"vhs\" , \"VHS Tape\" ), ( \"dvd\" , \"DVD\" ), ), ), ( \"unknown\" , \"Unknown\" ), ] Note that choices can be any sequence object – not necessarily a list or\ntuple. This lets you construct choices dynamically. But if you find yourself\nhacking choices to be dynamic, you’re probably better off using\na proper database table with a ForeignKey . choices is\nmeant for static data that doesn’t change much, if ever. Note A new migration is created each time the order of choices changes. For each model field that has choices set, Django will normalize\nthe choices to a list of 2-tuples and add a method to retrieve the\nhuman-readable name for the field’s current value. See get_FOO_display() in the database API\ndocumentation. Unless blank=False is set on the field along with a default then a label containing \"---------\" will be rendered\nwith the select box. To override this behavior, add a tuple to choices containing None ; e.g. (None, 'Your String For Display') .\nAlternatively, you can use an empty string instead of None where this makes\nsense - such as on a CharField . Enumeration types ¶ In addition, Django provides enumeration types that you can subclass to define\nchoices in a concise way: from django.utils.translation import gettext_lazy as _ class Student ( models . Model ): class YearInSchool ( models . TextChoices ): FRESHMAN = \"FR\" , _ ( \"Freshman\" ) SOPHOMORE = \"SO\" , _ ( \"Sophomore\" ) JUNIOR = \"JR\" , _ ( \"Junior\" ) SENIOR = \"SR\" , _ ( \"Senior\" ) GRADUATE = \"GR\" , _ ( \"Graduate\" ) year_in_school = models . CharField ( max_length = 2 , choices = YearInSchool , default = YearInSchool . FRESHMAN , ) def is_upperclass ( self ): return self . year_in_school in { self . YearInSchool . JUNIOR , self . YearInSchool . SENIOR , } These work similar to enum from Python’s standard library, but with some\nmodifications: Enum member values are a tuple of arguments to use when constructing the\nconcrete data type. Django supports adding an extra string value to the end\nof this tuple to be used as the human-readable name, or label . The label can be a lazy translatable string. Thus, in most cases, the member\nvalue will be a (value, label) 2-tuple. See below for an example\nof subclassing choices using a more complex\ndata type. If a tuple is not provided, or the last item is not a (lazy)\nstring, the label is automatically generated from the member name. A .label property is added on values, to return the human-readable name. A number of custom properties are added to the enumeration classes – .choices , .labels , .values , and .names – to make it easier\nto access lists of those separate parts of the enumeration. Warning These property names cannot be used as member names as they would conflict. The use of enum.unique() is enforced to ensure that values cannot be\ndefined multiple times. This is unlikely to be expected in choices for a\nfield. Note that using YearInSchool.SENIOR , YearInSchool['SENIOR'] , or YearInSchool('SR') to access or lookup enum members work as expected, as do\nthe .name and .value properties on the members. If you don’t need to have the human-readable names translated, you can have\nthem inferred from the member name (replacing underscores with spaces and using\ntitle-case): >>> class Vehicle ( models . TextChoices ): ... CAR = \"C\" ... TRUCK = \"T\" ... JET_SKI = \"J\" ... >>> Vehicle . JET_SKI . label 'Jet Ski' Since the case where the enum values need to be integers is extremely common,\nDjango provides an IntegerChoices class. For example: class Card ( models . Model ): class Suit ( models . IntegerChoices ): DIAMOND = 1 SPADE = 2 HEART = 3 CLUB = 4 suit = models . IntegerField ( choices = Suit ) It is also possible to make use of the Enum Functional API with the caveat\nthat labels are automatically generated as highlighted above: >>> MedalType = models . TextChoices ( \"MedalType\" , \"GOLD SILVER BRONZE\" ) >>> MedalType . choices [('GOLD', 'Gold'), ('SILVER', 'Silver'), ('BRONZE', 'Bronze')] >>> Place = models . IntegerChoices ( \"Place\" , \"FIRST SECOND THIRD\" ) >>> Place . choices [(1, 'First'), (2, 'Second'), (3, 'Third')] If you require support for a concrete data type other than int or str ,\nyou can subclass Choices and the required concrete data type, e.g. date for use with DateField : class MoonLandings ( datetime . date , models . Choices ): APOLLO_11 = 1969 , 7 , 20 , \"Apollo 11 (Eagle)\" APOLLO_12 = 1969 , 11 , 19 , \"Apollo 12 (Intrepid)\" APOLLO_14 = 1971 , 2 , 5 , \"Apollo 14 (Antares)\" APOLLO_15 = 1971 , 7 , 30 , \"Apollo 15 (Falcon)\" APOLLO_16 = 1972 , 4 , 21 , \"Apollo 16 (Orion)\" APOLLO_17 = 1972 , 12 , 11 , \"Apollo 17 (Challenger)\" There are some additional caveats to be aware of: Enumeration types do not support named groups . Because an enumeration with a concrete data type requires all values to match\nthe type, overriding the blank label cannot be achieved by creating a member with a value of None . Instead,\nset the __empty__ attribute on the class: class Answer ( models . IntegerChoices ): NO = 0 , _ ( \"No\" ) YES = 1 , _ ( \"Yes\" ) __empty__ = _ ( \"(Unknown)\" ) Changed in Django 5.0: Support for using enumeration types directly in the choices was added. db_column ¶ Field. db_column ¶ The name of the database column to use for this field. If this isn’t given,\nDjango will use the field’s name. If your database column name is an SQL reserved word, or contains\ncharacters that aren’t allowed in Python variable names – notably, the\nhyphen – that’s OK. Django quotes column and table names behind the\nscenes. db_comment ¶ Field. db_comment ¶ The comment on the database column to use for this field. It is useful for\ndocumenting fields for individuals with direct database access who may not be\nlooking at your Django code. For example: pub_date = models . DateTimeField ( db_comment = \"Date and time when the article was published\" , ) db_default ¶ New in Django 5.0. Field. db_default ¶ The database-computed default value for this field. This can be a literal value\nor a database function, such as Now : created = models . DateTimeField ( db_default = Now ()) More complex expressions can be used, as long as they are made from literals\nand database functions: month_due = models . DateField ( db_default = TruncMonth ( Now () + timedelta ( days = 90 ), output_field = models . DateField (), ) ) Database defaults cannot reference other fields or models. For example, this is\ninvalid: end = models . IntegerField ( db_default = F ( \"start\" ) + 50 ) If both db_default and Field.default are set, default will take\nprecedence when creating instances in Python code. db_default will still be\nset at the database level and will be used when inserting rows outside of the\nORM or when adding a new field in a migration. If a field has a db_default without a default set and no value is\nassigned to the field, a DatabaseDefault object is returned as the field\nvalue on unsaved model instances. The actual value for the field is determined\nby the database when the model instance is saved. db_index ¶ Field. db_index ¶ If True , a database index will be created for this field. Use the indexes option instead. Where possible, use the Meta.indexes option\ninstead. In nearly all cases, indexes provides more\nfunctionality than db_index . db_index may be deprecated in the\nfuture. db_tablespace ¶ Field. db_tablespace [source] ¶ The name of the database tablespace to use for\nthis field’s index, if this field is indexed. The default is the project’s DEFAULT_INDEX_TABLESPACE setting, if set, or the db_tablespace of the model, if any. If the backend doesn’t\nsupport tablespaces for indexes, this option is ignored. default ¶ Field. default ¶ The default value for the field. This can be a value or a callable object. If\ncallable it will be called every time a new object is created. The default can’t be a mutable object (model instance, list , set , etc.),\nas a reference to the same instance of that object would be used as the default\nvalue in all new model instances. Instead, wrap the desired default in a\ncallable. For example, if you want to specify a default dict for JSONField , use a function: def contact_default (): return { \"email\" : \"to1@example.com\" } contact_info = JSONField ( \"ContactInfo\" , default = contact_default ) lambda s can’t be used for field options like default because they\ncan’t be serialized by migrations . See that\ndocumentation for other caveats. For fields like ForeignKey that map to model instances, defaults\nshould be the value of the field they reference ( pk unless to_field is set) instead of model instances. The default value is used when new model instances are created and a value\nisn’t provided for the field. When the field is a primary key, the default is\nalso used when the field is set to None . The default value can also be set at the database level with Field.db_default . editable ¶ Field. editable ¶ If False , the field will not be displayed in the admin or any other ModelForm . They are also skipped during model\nvalidation . Default is True . error_messages ¶ Field. error_messages [source] ¶ The error_messages argument lets you override the default messages that the\nfield will raise. Pass in a dictionary with keys matching the error messages you\nwant to override. Error message keys include null , blank , invalid , invalid_choice , unique , and unique_for_date . Additional error message keys are\nspecified for each field in the Field types section below. These error messages often don’t propagate to forms. See Considerations regarding model’s error_messages . help_text ¶ Field. help_text ¶ Extra “help” text to be displayed with the form widget. It’s useful for\ndocumentation even if your field isn’t used on a form. Note that this value is not HTML-escaped in automatically-generated\nforms. This lets you include HTML in help_text if you so\ndesire. For example: help_text = \"Please use the following format: <em>YYYY-MM-DD</em>.\" Alternatively you can use plain text and django.utils.html.escape() to escape any HTML special characters. Ensure\nthat you escape any help text that may come from untrusted users to avoid a\ncross-site scripting attack. primary_key ¶ Field. primary_key ¶ If True , this field is the primary key for the model. If you don’t specify primary_key=True for any field in your model, Django\nwill automatically add a field to hold the primary key, so you don’t need to\nset primary_key=True on any of your fields unless you want to override the\ndefault primary-key behavior. The type of auto-created primary key fields can\nbe specified per app in AppConfig.default_auto_field or globally in the DEFAULT_AUTO_FIELD setting. For more, see Automatic primary key fields . primary_key=True implies null=False and unique=True . Only one primary key is allowed on an\nobject. The primary key field is read-only. If you change the value of the primary\nkey on an existing object and then save it, a new object will be created\nalongside the old one. The primary key field is set to None when deleting an object. unique ¶ Field. unique [source] ¶ If True , this field must be unique throughout the table. This is enforced at the database level and by model validation. If\nyou try to save a model with a duplicate value in a unique field, a django.db.IntegrityError will be raised by the model’s save() method. This option is valid on all field types except ManyToManyField and OneToOneField . Note that when unique is True , you don’t need to specify db_index , because unique implies the creation of an index. unique_for_date ¶ Field. unique_for_date ¶ Set this to the name of a DateField or DateTimeField to\nrequire that this field be unique for the value of the date field. For example, if you have a field title that has unique_for_date=\"pub_date\" , then Django wouldn’t allow the entry of two\nrecords with the same title and pub_date . Note that if you set this to point to a DateTimeField , only the date\nportion of the field will be considered. Besides, when USE_TZ is True , the check will be performed in the current time zone at the time the object gets saved. This is enforced by Model.validate_unique() during model validation\nbut not at the database level. If any unique_for_date constraint\ninvolves fields that are not part of a ModelForm (for\nexample, if one of the fields is listed in exclude or has editable=False ), Model.validate_unique() will\nskip validation for that particular constraint. unique_for_month ¶ Field. unique_for_month ¶ Like unique_for_date , but requires the field to be unique with\nrespect to the month. unique_for_year ¶ Field. unique_for_year ¶ Like unique_for_date and unique_for_month . verbose_name ¶ Field. verbose_name ¶ A human-readable name for the field. If the verbose name isn’t given, Django\nwill automatically create it using the field’s attribute name, converting\nunderscores to spaces. See Verbose field names . validators ¶ Field. validators [source] ¶ A list of validators to run for this field. See the validators\ndocumentation for more information. Field types ¶ AutoField ¶ class AutoField ( ** options ) [source] ¶ An IntegerField that automatically increments\naccording to available IDs. You usually won’t need to use this directly; a\nprimary key field will automatically be added to your model if you don’t specify\notherwise. See Automatic primary key fields . BigAutoField ¶ class BigAutoField ( ** options ) [source] ¶ A 64-bit integer, much like an AutoField except that it is\nguaranteed to fit numbers from 1 to 9223372036854775807 . BigIntegerField ¶ class BigIntegerField ( ** options ) [source] ¶ A 64-bit integer, much like an IntegerField except that it is\nguaranteed to fit numbers from -9223372036854775808 to 9223372036854775807 . The default form widget for this field is a NumberInput . BinaryField ¶ class BinaryField ( max_length = None , ** options ) [source] ¶ A field to store raw binary data. It can be assigned bytes , bytearray , or memoryview . By default, BinaryField sets editable to False , in which\ncase it can’t be included in a ModelForm . BinaryField. max_length ¶ Optional. The maximum length (in bytes) of the field. The maximum length is\nenforced in Django’s validation using MaxLengthValidator . Abusing BinaryField Although you might think about storing files in the database, consider that\nit is bad design in 99% of the cases. This field is not a replacement for\nproper static files handling. BooleanField ¶ class BooleanField ( ** options ) [source] ¶ A true/false field. The default form widget for this field is CheckboxInput ,\nor NullBooleanSelect if null=True . The default value of BooleanField is None when Field.default isn’t defined. CharField ¶ class CharField ( max_length = None , ** options ) [source] ¶ A string field, for small- to large-sized strings. For large amounts of text, use TextField . The default form widget for this field is a TextInput . CharField has the following extra arguments: CharField. max_length ¶ The maximum length (in characters) of the field. The max_length is enforced at the database level and in Django’s validation using MaxLengthValidator . It’s required for all\ndatabase backends included with Django except PostgreSQL, which supports\nunlimited VARCHAR columns. Note If you are writing an application that must be portable to multiple\ndatabase backends, you should be aware that there are restrictions on max_length for some backends. Refer to the database backend\nnotes for details. CharField. db_collation ¶ Optional. The database collation name of the field. Note Collation names are not standardized. As such, this will not be\nportable across multiple database backends. Oracle Oracle supports collations only when the MAX_STRING_SIZE database\ninitialization parameter is set to EXTENDED . DateField ¶ class DateField ( auto_now = False , auto_now_add = False , ** options ) [source] ¶ A date, represented in Python by a datetime.date instance. Has a few extra,\noptional arguments: DateField. auto_now ¶ Automatically set the field to now every time the object is saved. Useful\nfor “last-modified” timestamps. Note that the current date is always used; it’s not just a default value that you can override. The field is only automatically updated when calling Model.save() . The field isn’t updated when making updates\nto other fields in other ways such as QuerySet.update() , though you can specify a custom\nvalue for the field in an update like that. DateField. auto_now_add ¶ Automatically set the field to now when the object is first created. Useful\nfor creation of timestamps. Note that the current date is always used;\nit’s not just a default value that you can override. So even if you\nset a value for this field when creating the object, it will be ignored.\nIf you want to be able to modify this field, set the following instead of auto_now_add=True : For DateField : default=date.today - from datetime.date.today() For DateTimeField : default=timezone.now - from django.utils.timezone.now() The default form widget for this field is a DateInput . The admin adds a JavaScript calendar,\nand a shortcut for “Today”. Includes an additional invalid_date error\nmessage key. The options auto_now_add , auto_now , and default are mutually exclusive.\nAny combination of these options will result in an error. Note As currently implemented, setting auto_now or auto_now_add to True will cause the field to have editable=False and blank=True set. Note The auto_now and auto_now_add options will always use the date in\nthe default timezone at the moment of\ncreation or update. If you need something different, you may want to\nconsider using your own callable default or overriding save() instead\nof using auto_now or auto_now_add ; or using a DateTimeField instead of a DateField and deciding how to handle the conversion from\ndatetime to date at display time. Warning Always use DateField with a datetime.date instance. If you have a datetime.datetime instance, it’s recommended to convert\nit to a datetime.date first. If you don’t, DateField will\nlocalize the datetime.datetime to the default timezone and convert it to a datetime.date instance, removing its time component. This is true for both storage and\ncomparison. DateTimeField ¶ class DateTimeField ( auto_now = False , auto_now_add = False , ** options ) [source] ¶ A date and time, represented in Python by a datetime.datetime instance.\nTakes the same extra arguments as DateField . The default form widget for this field is a single DateTimeInput . The admin uses two separate TextInput widgets with JavaScript shortcuts. Warning Always use DateTimeField with a datetime.datetime instance. If you have a datetime.date instance, it’s recommended to convert it to\na datetime.datetime first. If you don’t, DateTimeField will\nuse midnight in the default timezone for\nthe time component. This is true for both storage and comparison. To\ncompare the date portion of a DateTimeField with a datetime.date instance, use the date lookup. DecimalField ¶ class DecimalField ( max_digits = None , decimal_places = None , ** options ) [source] ¶ A fixed-precision decimal number, represented in Python by a Decimal instance. It validates the input using DecimalValidator . Has the following required arguments: DecimalField. max_digits ¶ The maximum number of digits allowed in the number. Note that this number\nmust be greater than or equal to decimal_places . DecimalField. decimal_places ¶ The number of decimal places to store with the number. For example, to store numbers up to 999.99 with a resolution of 2 decimal\nplaces, you’d use: models . DecimalField ( ... , max_digits = 5 , decimal_places = 2 ) And to store numbers up to approximately one billion with a resolution of 10\ndecimal places: models . DecimalField ( ... , max_digits = 19 , decimal_places = 10 ) The default form widget for this field is a NumberInput when localize is False or TextInput otherwise. Note For more information about the differences between the FloatField and DecimalField classes, please\nsee FloatField vs. DecimalField . You\nshould also be aware of SQLite limitations of decimal fields. DurationField ¶ class DurationField ( ** options ) [source] ¶ A field for storing periods of time - modeled in Python by timedelta . When used on PostgreSQL, the data type\nused is an interval and on Oracle the data type is INTERVAL DAY(9) TO SECOND(6) . Otherwise a bigint of microseconds is used. Note Arithmetic with DurationField works in most cases. However on all\ndatabases other than PostgreSQL, comparing the value of a DurationField to arithmetic on DateTimeField instances will not work as expected. EmailField ¶ class EmailField ( max_length = 254 , ** options ) [source] ¶ A CharField that checks that the value is a valid email address using EmailValidator . FileField ¶ class FileField ( upload_to = '' , storage = None , max_length = 100 , ** options ) [source] ¶ A file-upload field. Note The primary_key argument isn’t supported and will raise an error if\nused. Has the following optional arguments: FileField. upload_to ¶ This attribute provides a way of setting the upload directory and file name,\nand can be set in two ways. In both cases, the value is passed to the Storage.save() method. If you specify a string value or a Path , it may contain strftime() formatting, which will be replaced by the date/time\nof the file upload (so that uploaded files don’t fill up the given\ndirectory). For example: class MyModel ( models . Model ): # file will be uploaded to MEDIA_ROOT/uploads upload = models . FileField ( upload_to = \"uploads/\" ) # or... # file will be saved to MEDIA_ROOT/uploads/2015/01/30 upload = models . FileField ( upload_to = \"uploads/%Y/%m/ %d /\" ) If you are using the default FileSystemStorage , the string value\nwill be appended to your MEDIA_ROOT path to form the location on\nthe local filesystem where uploaded files will be stored. If you are using\na different storage, check that storage’s documentation to see how it\nhandles upload_to . upload_to may also be a callable, such as a function. This will be\ncalled to obtain the upload path, including the filename. This callable must\naccept two arguments and return a Unix-style path (with forward slashes)\nto be passed along to the storage system. The two arguments are: Argument Description instance An instance of the model where the FileField is defined. More specifically,\nthis is the particular instance where the\ncurrent file is being attached. In most cases, this object will not have been\nsaved to the database yet, so if it uses the\ndefault AutoField , it might not yet have a\nvalue for its primary key field . filename The filename that was originally given to the\nfile. This may or may not be taken into account\nwhen determining the final destination path. For example: def user_directory_path ( instance , filename ): # file will be uploaded to MEDIA_ROOT/user_<id>/<filename> return \"user_ {0} / {1} \" . format ( instance . user . id , filename ) class MyModel ( models . Model ): upload = models . FileField ( upload_to = user_directory_path ) FileField. storage ¶ A storage object, or a callable which returns a storage object. This\nhandles the storage and retrieval of your files. See Managing files for details on how to provide this object. The default form widget for this field is a ClearableFileInput . Using a FileField or an ImageField (see below) in a model\ntakes a few steps: In your settings file, you’ll need to define MEDIA_ROOT as the\nfull path to a directory where you’d like Django to store uploaded files.\n(For performance, these files are not stored in the database.) Define MEDIA_URL as the base public URL of that directory. Make sure\nthat this directory is writable by the web server’s user account. Add the FileField or ImageField to your model, defining\nthe upload_to option to specify a subdirectory of MEDIA_ROOT to use for uploaded files. All that will be stored in your database is a path to the file\n(relative to MEDIA_ROOT ). You’ll most likely want to use the\nconvenience url attribute\nprovided by Django. For example, if your ImageField is called mug_shot , you can get the absolute path to your image in a template with {{ object.mug_shot.url }} . For example, say your MEDIA_ROOT is set to '/home/media' , and upload_to is set to 'photos/%Y/%m/%d' . The '%Y/%m/%d' part of upload_to is strftime() formatting; '%Y' is the four-digit year, '%m' is the two-digit month and '%d' is\nthe two-digit day. If you upload a file on Jan. 15, 2007, it will be saved in\nthe directory /home/media/photos/2007/01/15 . If you wanted to retrieve the uploaded file’s on-disk filename, or the file’s\nsize, you could use the name and size attributes respectively; for more\ninformation on the available attributes and methods, see the File class reference and the Managing files topic guide. Note The file is saved as part of saving the model in the database, so the actual\nfile name used on disk cannot be relied on until after the model has been\nsaved. The uploaded file’s relative URL can be obtained using the url attribute. Internally,\nthis calls the url() method of the\nunderlying Storage class. Note that whenever you deal with uploaded files, you should pay close attention\nto where you’re uploading them and what type of files they are, to avoid\nsecurity holes. Validate all uploaded files so that you’re sure the files are\nwhat you think they are. For example, if you blindly let somebody upload files,\nwithout validation, to a directory that’s within your web server’s document\nroot, then somebody could upload a CGI or PHP script and execute that script by\nvisiting its URL on your site. Don’t allow that. Also note that even an uploaded HTML file, since it can be executed by the\nbrowser (though not by the server), can pose security threats that are\nequivalent to XSS or CSRF attacks. FileField instances are created in your database as varchar columns with a default max length of 100 characters. As with other fields, you\ncan change the maximum length using the max_length argument. FileField and FieldFile ¶ class FieldFile [source] ¶ When you access a FileField on a model, you are\ngiven an instance of FieldFile as a proxy for accessing the underlying\nfile. The API of FieldFile mirrors that of File ,\nwith one key difference: The object wrapped by the class is not necessarily a\nwrapper around Python’s built-in file object. Instead, it is a wrapper around\nthe result of the Storage.open() method, which may be a File object, or it may be a\ncustom storage’s implementation of the File API. In addition to the API inherited from File such as read() and write() , FieldFile includes several methods that\ncan be used to interact with the underlying file: Warning Two methods of this class, save() and delete() , default to saving the model object of the\nassociated FieldFile in the database. FieldFile. name ¶ The name of the file including the relative path from the root of the Storage of the associated FileField . FieldFile. path [source] ¶ A read-only property to access the file’s local filesystem path by calling the path() method of the underlying Storage class. FieldFile. size [source] ¶ The result of the underlying Storage.size() method. FieldFile. url [source] ¶ A read-only property to access the file’s relative URL by calling the url() method of the underlying Storage class. FieldFile. open ( mode = 'rb' ) [source] ¶ Opens or reopens the file associated with this instance in the specified mode . Unlike the standard Python open() method, it doesn’t return a\nfile descriptor. Since the underlying file is opened implicitly when accessing it, it may be\nunnecessary to call this method except to reset the pointer to the underlying\nfile or to change the mode . FieldFile. close () [source] ¶ Behaves like the standard Python file.close() method and closes the file\nassociated with this instance. FieldFile. save ( name , content , save = True ) [source] ¶ This method takes a filename and file contents and passes them to the storage\nclass for the field, then associates the stored file with the model field.\nIf you want to manually associate file data with FileField instances on your model, the save() method is used to persist that file data. Takes two required arguments: name which is the name of the file, and content which is an object containing the file’s contents.  The\noptional save argument controls whether or not the model instance is\nsaved after the file associated with this field has been altered. Defaults to True . Note that the content argument should be an instance of django.core.files.File , not Python’s built-in file object.\nYou can construct a File from an existing\nPython file object like this: from django.core.files import File # Open an existing file using Python's built-in open() f = open ( \"/path/to/hello.world\" ) myfile = File ( f ) Or you can construct one from a Python string like this: from django.core.files.base import ContentFile myfile = ContentFile ( \"hello world\" ) For more information, see Managing files . FieldFile. delete ( save = True ) [source] ¶ Deletes the file associated with this instance and clears all attributes on\nthe field. Note: This method will close the file if it happens to be open when delete() is called. The optional save argument controls whether or not the model instance is\nsaved after the file associated with this field has been deleted. Defaults to True . Note that when a model is deleted, related files are not deleted. If you need\nto cleanup orphaned files, you’ll need to handle it yourself (for instance,\nwith a custom management command that can be run manually or scheduled to run\nperiodically via e.g. cron). FilePathField ¶ class FilePathField ( path = '' , match = None , recursive = False , allow_files = True , allow_folders = False , max_length = 100 , ** options ) [source] ¶ A CharField whose choices are limited to the filenames in a certain\ndirectory on the filesystem. Has some special arguments, of which the first is required : FilePathField. path ¶ Required. The absolute filesystem path to a directory from which this FilePathField should get its choices. Example: \"/home/images\" . path may also be a callable, such as a function to dynamically set the\npath at runtime. Example: import os from django.conf import settings from django.db import models def images_path (): return os . path . join ( settings . LOCAL_FILE_DIR , \"images\" ) class MyModel ( models . Model ): file = models . FilePathField ( path = images_path ) FilePathField. match ¶ Optional. A regular expression, as a string, that FilePathField will use to filter filenames. Note that the regex will be applied to the\nbase filename, not the full path. Example: \"foo.*\\.txt$\" , which will\nmatch a file called foo23.txt but not bar.txt or foo23.png . FilePathField. recursive ¶ Optional. Either True or False . Default is False . Specifies\nwhether all subdirectories of path should be included FilePathField. allow_files ¶ Optional.  Either True or False .  Default is True .  Specifies\nwhether files in the specified location should be included.  Either this or allow_folders must be True . FilePathField. allow_folders ¶ Optional.  Either True or False .  Default is False .  Specifies\nwhether folders in the specified location should be included.  Either this\nor allow_files must be True . The one potential gotcha is that match applies to the\nbase filename, not the full path. So, this example: FilePathField ( path = \"/home/images\" , match = \"foo.*\" , recursive = True ) …will match /home/images/foo.png but not /home/images/foo/bar.png because the match applies to the base filename\n( foo.png and bar.png ). FilePathField instances are created in your database as varchar columns with a default max length of 100 characters. As with other fields, you\ncan change the maximum length using the max_length argument. FloatField ¶ class FloatField ( ** options ) [source] ¶ A floating-point number represented in Python by a float instance. The default form widget for this field is a NumberInput when localize is False or TextInput otherwise. FloatField vs. DecimalField The FloatField class is sometimes mixed up with the DecimalField class. Although they both represent real numbers, they\nrepresent those numbers differently. FloatField uses Python’s float type internally, while DecimalField uses Python’s Decimal type. For\ninformation on the difference between the two, see Python’s documentation\nfor the decimal module. GeneratedField ¶ New in Django 5.0. class GeneratedField ( expression , output_field , db_persist = None , ** kwargs ) [source] ¶ A field that is always computed based on other fields in the model. This field\nis managed and updated by the database itself. Uses the GENERATED ALWAYS SQL syntax. There are two kinds of generated columns: stored and virtual. A stored\ngenerated column is computed when it is written (inserted or updated) and\noccupies storage as if it were a regular column. A virtual generated column\noccupies no storage and is computed when it is read. Thus, a virtual generated\ncolumn is similar to a view and a stored generated column is similar to a\nmaterialized view. GeneratedField. expression ¶ An Expression used by the database to automatically set the field\nvalue each time the model is changed. The expressions should be deterministic and only reference fields within\nthe model (in the same database table). Generated fields cannot reference\nother generated fields. Database backends can impose further restrictions. GeneratedField. output_field ¶ A model field instance to define the field’s data type. GeneratedField. db_persist ¶ Determines if the database column should occupy storage as if it were a\nreal column. If False , the column acts as a virtual column and does\nnot occupy database storage space. PostgreSQL only supports persisted columns. Oracle only supports virtual\ncolumns. Refresh the data Since the database always computed the value, the object must be reloaded\nto access the new value after save() , for example, by using refresh_from_db() . Database limitations There are many database-specific restrictions on generated fields that\nDjango doesn’t validate and the database may raise an error e.g. PostgreSQL\nrequires functions and operators referenced in a generated column to be\nmarked as IMMUTABLE . You should always check that expression is supported on your database.\nCheck out MariaDB , MySQL , Oracle , PostgreSQL , or SQLite docs. GenericIPAddressField ¶ class GenericIPAddressField ( protocol = 'both' , unpack_ipv4 = False , ** options ) [source] ¶ An IPv4 or IPv6 address, in string format (e.g. 192.0.2.30 or 2a02:42fe::4 ). The default form widget for this field is a TextInput . The IPv6 address normalization follows RFC 4291 Section 2.2 section 2.2,\nincluding using the IPv4 format suggested in paragraph 3 of that section, like ::ffff:192.0.2.0 . For example, 2001:0::0:01 would be normalized to 2001::1 , and ::ffff:0a0a:0a0a to ::ffff:10.10.10.10 . All characters\nare converted to lowercase. GenericIPAddressField. protocol ¶ Limits valid inputs to the specified protocol.\nAccepted values are 'both' (default), 'IPv4' or 'IPv6' . Matching is case insensitive. GenericIPAddressField. unpack_ipv4 ¶ Unpacks IPv4 mapped addresses like ::ffff:192.0.2.1 .\nIf this option is enabled that address would be unpacked to 192.0.2.1 . Default is disabled. Can only be used\nwhen protocol is set to 'both' . If you allow for blank values, you have to allow for null values since blank\nvalues are stored as null. ImageField ¶ class ImageField ( upload_to = None , height_field = None , width_field = None , max_length = 100 , ** options ) [source] ¶ Inherits all attributes and methods from FileField , but also\nvalidates that the uploaded object is a valid image. In addition to the special attributes that are available for FileField ,\nan ImageField also has height and width attributes. To facilitate querying on those attributes, ImageField has the\nfollowing optional arguments: ImageField. height_field ¶ Name of a model field which is auto-populated with the height of the image\neach time an image object is set. ImageField. width_field ¶ Name of a model field which is auto-populated with the width of the image\neach time an image object is set. Requires the pillow library. ImageField instances are created in your database as varchar columns with a default max length of 100 characters. As with other fields, you\ncan change the maximum length using the max_length argument. The default form widget for this field is a ClearableFileInput . IntegerField ¶ class IntegerField ( ** options ) [source] ¶ An integer. Values from -2147483648 to 2147483647 are safe in all\ndatabases supported by Django. It uses MinValueValidator and MaxValueValidator to validate the input based\non the values that the default database supports. The default form widget for this field is a NumberInput when localize is False or TextInput otherwise. JSONField ¶ class JSONField ( encoder = None , decoder = None , ** options ) [source] ¶ A field for storing JSON encoded data. In Python the data is represented in its\nPython native format: dictionaries, lists, strings, numbers, booleans and None . JSONField is supported on MariaDB, MySQL, Oracle, PostgreSQL, and SQLite\n(with the JSON1 extension enabled ). JSONField. encoder ¶ An optional json.JSONEncoder subclass to serialize data types\nnot supported by the standard JSON serializer (e.g. datetime.datetime or UUID ). For example, you can use the DjangoJSONEncoder class. Defaults to json.JSONEncoder . JSONField. decoder ¶ An optional json.JSONDecoder subclass to deserialize the value\nretrieved from the database. The value will be in the format chosen by the\ncustom encoder (most often a string). Your deserialization may need to\naccount for the fact that you can’t be certain of the input type. For\nexample, you run the risk of returning a datetime that was actually a\nstring that just happened to be in the same format chosen for datetime s. Defaults to json.JSONDecoder . To query JSONField in the database, see Querying JSONField . Default value If you give the field a default , ensure\nit’s a callable such as the dict class or a function that\nreturns a fresh object each time. Incorrectly using a mutable object like default={} or default=[] creates a mutable default that is shared\nbetween all instances. Indexing Index and Field.db_index both create a\nB-tree index, which isn’t particularly helpful when querying JSONField .\nOn PostgreSQL only, you can use GinIndex that is better suited. PostgreSQL users PostgreSQL has two native JSON based data types: json and jsonb .\nThe main difference between them is how they are stored and how they can be\nqueried. PostgreSQL’s json field is stored as the original string\nrepresentation of the JSON and must be decoded on the fly when queried\nbased on keys. The jsonb field is stored based on the actual structure\nof the JSON which allows indexing. The trade-off is a small additional cost\non writing to the jsonb field. JSONField uses jsonb . Oracle users Oracle Database does not support storing JSON scalar values. Only JSON\nobjects and arrays (represented in Python using dict and list ) are supported. PositiveBigIntegerField ¶ class PositiveBigIntegerField ( ** options ) [source] ¶ Like a PositiveIntegerField , but only allows values under a certain\n(database-dependent) point. Values from 0 to 9223372036854775807 are\nsafe in all databases supported by Django. PositiveIntegerField ¶ class PositiveIntegerField ( ** options ) [source] ¶ Like an IntegerField , but must be either positive or zero ( 0 ).\nValues from 0 to 2147483647 are safe in all databases supported by\nDjango. The value 0 is accepted for backward compatibility reasons. PositiveSmallIntegerField ¶ class PositiveSmallIntegerField ( ** options ) [source] ¶ Like a PositiveIntegerField , but only allows values under a certain\n(database-dependent) point. Values from 0 to 32767 are safe in all\ndatabases supported by Django. SlugField ¶ class SlugField ( max_length = 50 , ** options ) [source] ¶ Slug is a newspaper term. A slug is a short label for something,\ncontaining only letters, numbers, underscores or hyphens. They’re generally used\nin URLs. Like a CharField, you can specify max_length (read the note\nabout database portability and max_length in that section,\ntoo). If max_length is not specified, Django will use a\ndefault length of 50. Implies setting Field.db_index to True . It is often useful to automatically prepopulate a SlugField based on the value\nof some other value.  You can do this automatically in the admin using prepopulated_fields . It uses validate_slug or validate_unicode_slug for validation. SlugField. allow_unicode ¶ If True , the field accepts Unicode letters in addition to ASCII\nletters. Defaults to False . SmallAutoField ¶ class SmallAutoField ( ** options ) [source] ¶ Like an AutoField , but only allows values under a certain\n(database-dependent) limit. Values from 1 to 32767 are safe in all\ndatabases supported by Django. SmallIntegerField ¶ class SmallIntegerField ( ** options ) [source] ¶ Like an IntegerField , but only allows values under a certain\n(database-dependent) point. Values from -32768 to 32767 are safe in all\ndatabases supported by Django. TextField ¶ class TextField ( ** options ) [source] ¶ A large text field. The default form widget for this field is a Textarea . If you specify a max_length attribute, it will be reflected in the Textarea widget of the auto-generated form field.\nHowever it is not enforced at the model or database level. Use a CharField for that. TextField. db_collation ¶ Optional. The database collation name of the field. Note Collation names are not standardized. As such, this will not be\nportable across multiple database backends. Oracle Oracle does not support collations for a TextField . TimeField ¶ class TimeField ( auto_now = False , auto_now_add = False , ** options ) [source] ¶ A time, represented in Python by a datetime.time instance. Accepts the same\nauto-population options as DateField . The default form widget for this field is a TimeInput .\nThe admin adds some JavaScript shortcuts. URLField ¶ class URLField ( max_length = 200 , ** options ) [source] ¶ A CharField for a URL, validated by URLValidator . The default form widget for this field is a URLInput . Like all CharField subclasses, URLField takes the optional max_length argument. If you don’t specify max_length , a default of 200 is used. UUIDField ¶ class UUIDField ( ** options ) [source] ¶ A field for storing universally unique identifiers. Uses Python’s UUID class. When used on PostgreSQL and MariaDB 10.7+,\nthis stores in a uuid datatype, otherwise in a char(32) . Universally unique identifiers are a good alternative to AutoField for primary_key . The database will not generate the UUID for you, so\nit is recommended to use default : import uuid from django.db import models class MyUUIDModel ( models . Model ): id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) # other fields Note that a callable (with the parentheses omitted) is passed to default ,\nnot an instance of UUID . Lookups on PostgreSQL and MariaDB 10.7+ Using iexact , contains , icontains , startswith , istartswith , endswith , or iendswith lookups on PostgreSQL don’t work for values without\nhyphens, because PostgreSQL and MariaDB 10.7+ store them in a hyphenated\nuuid datatype type. Relationship fields ¶ Django also defines a set of fields that represent relations. ForeignKey ¶ class ForeignKey ( to , on_delete , ** options ) [source] ¶ A many-to-one relationship. Requires two positional arguments: the class to\nwhich the model is related and the on_delete option: from django.db import models class Manufacturer ( models . Model ): name = models . TextField () class Car ( models . Model ): manufacturer = models . ForeignKey ( Manufacturer , on_delete = models . CASCADE ) The first positional argument can be either a concrete model class or a lazy reference to a model class. Recursive relationships , where a model has a\nrelationship with itself, are also supported. See ForeignKey.on_delete for details on the second positional\nargument. A database index is automatically created on the ForeignKey . You can\ndisable this by setting db_index to False .  You may want to\navoid the overhead of an index if you are creating a foreign key for\nconsistency rather than joins, or if you will be creating an alternative index\nlike a partial or multiple column index. Database Representation ¶ Behind the scenes, Django appends \"_id\" to the field name to create its\ndatabase column name. In the above example, the database table for the Car model will have a manufacturer_id column. You can change this explicitly by\nspecifying db_column , however, your code should never have to\ndeal with the database column name (unless you write custom SQL). You’ll always\ndeal with the field names of your model object. Arguments ¶ ForeignKey accepts other arguments that define the details of how the\nrelation works. ForeignKey. on_delete ¶ When an object referenced by a ForeignKey is deleted, Django will\nemulate the behavior of the SQL constraint specified by the on_delete argument. For example, if you have a nullable ForeignKey and you want it to be set null when the referenced\nobject is deleted: user = models . ForeignKey ( User , models . SET_NULL , blank = True , null = True , ) on_delete doesn’t create an SQL constraint in the database. Support for\ndatabase-level cascade options may be implemented later . The possible values for on_delete are found in django.db.models : CASCADE [source] ¶ Cascade deletes. Django emulates the behavior of the SQL constraint ON\nDELETE CASCADE and also deletes the object containing the ForeignKey. Model.delete() isn’t called on related models, but the pre_delete and post_delete signals are sent for all\ndeleted objects. PROTECT [source] ¶ Prevent deletion of the referenced object by raising ProtectedError , a subclass of django.db.IntegrityError . RESTRICT [source] ¶ Prevent deletion of the referenced object by raising RestrictedError (a subclass of django.db.IntegrityError ). Unlike PROTECT , deletion of the\nreferenced object is allowed if it also references a different object\nthat is being deleted in the same operation, but via a CASCADE relationship. Consider this set of models: class Artist ( models . Model ): name = models . CharField ( max_length = 10 ) class Album ( models . Model ): artist = models . ForeignKey ( Artist , on_delete = models . CASCADE ) class Song ( models . Model ): artist = models . ForeignKey ( Artist , on_delete = models . CASCADE ) album = models . ForeignKey ( Album , on_delete = models . RESTRICT ) Artist can be deleted even if that implies deleting an Album which is referenced by a Song , because Song also references Artist itself through a cascading relationship. For example: >>> artist_one = Artist . objects . create ( name = \"artist one\" ) >>> artist_two = Artist . objects . create ( name = \"artist two\" ) >>> album_one = Album . objects . create ( artist = artist_one ) >>> album_two = Album . objects . create ( artist = artist_two ) >>> song_one = Song . objects . create ( artist = artist_one , album = album_one ) >>> song_two = Song . objects . create ( artist = artist_one , album = album_two ) >>> album_one . delete () # Raises RestrictedError. >>> artist_two . delete () # Raises RestrictedError. >>> artist_one . delete () (4, {'Song': 2, 'Album': 1, 'Artist': 1}) SET_NULL [source] ¶ Set the ForeignKey null; this is only possible if null is True . SET_DEFAULT [source] ¶ Set the ForeignKey to its default value; a default for the ForeignKey must be set. SET () [source] ¶ Set the ForeignKey to the value passed to SET() , or if a callable is passed in,\nthe result of calling it. In most cases, passing a callable will be\nnecessary to avoid executing queries at the time your models.py is\nimported: from django.conf import settings from django.contrib.auth import get_user_model from django.db import models def get_sentinel_user (): return get_user_model () . objects . get_or_create ( username = \"deleted\" )[ 0 ] class MyModel ( models . Model ): user = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . SET ( get_sentinel_user ), ) DO_NOTHING [source] ¶ Take no action. If your database backend enforces referential\nintegrity, this will cause an IntegrityError unless\nyou manually add an SQL ON DELETE constraint to the database field. ForeignKey. limit_choices_to ¶ Sets a limit to the available choices for this field when this field is\nrendered using a ModelForm or the admin (by default, all objects\nin the queryset are available to choose). Either a dictionary, a Q object, or a callable returning a\ndictionary or Q object can be used. For example: staff_member = models . ForeignKey ( User , on_delete = models . CASCADE , limit_choices_to = { \"is_staff\" : True }, ) causes the corresponding field on the ModelForm to list only Users that have is_staff=True . This may be helpful in the Django admin. The callable form can be helpful, for instance, when used in conjunction\nwith the Python datetime module to limit selections by date range. For\nexample: def limit_pub_date_choices (): return { \"pub_date__lte\" : datetime . date . today ()} limit_choices_to = limit_pub_date_choices If limit_choices_to is or returns a Q object , which is useful for complex queries , then it will only have an effect on the choices\navailable in the admin when the field is not listed in raw_id_fields in the ModelAdmin for the model. Note If a callable is used for limit_choices_to , it will be invoked\nevery time a new form is instantiated. It may also be invoked when a\nmodel is validated, for example by management commands or the admin.\nThe admin constructs querysets to validate its form inputs in various\nedge cases multiple times, so there is a possibility your callable may\nbe invoked several times. ForeignKey. related_name ¶ The name to use for the relation from the related object back to this one.\nIt’s also the default value for related_query_name (the name to use\nfor the reverse filter name from the target model). See the related\nobjects documentation for a full explanation\nand example. Note that you must set this value when defining relations on abstract models ; and when you do so some special syntax is available. If you’d prefer Django not to create a backwards relation, set related_name to '+' or end it with '+' . For example, this will\nensure that the User model won’t have a backwards relation to this\nmodel: user = models . ForeignKey ( User , on_delete = models . CASCADE , related_name = \"+\" , ) ForeignKey. related_query_name ¶ The name to use for the reverse filter name from the target model. It\ndefaults to the value of related_name or default_related_name if set, otherwise it\ndefaults to the name of the model: # Declare the ForeignKey with related_query_name class Tag ( models . Model ): article = models . ForeignKey ( Article , on_delete = models . CASCADE , related_name = \"tags\" , related_query_name = \"tag\" , ) name = models . CharField ( max_length = 255 ) # That's now the name of the reverse filter Article . objects . filter ( tag__name = \"important\" ) Like related_name , related_query_name supports app label and\nclass interpolation via some special syntax . ForeignKey. to_field ¶ The field on the related object that the relation is to. By default, Django\nuses the primary key of the related object. If you reference a different\nfield, that field must have unique=True . ForeignKey. db_constraint ¶ Controls whether or not a constraint should be created in the database for\nthis foreign key. The default is True , and that’s almost certainly what\nyou want; setting this to False can be very bad for data integrity.\nThat said, here are some scenarios where you might want to do this: You have legacy data that is not valid. You’re sharding your database. If this is set to False , accessing a related object that doesn’t exist\nwill raise its DoesNotExist exception. ForeignKey. swappable ¶ Controls the migration framework’s reaction if this ForeignKey is pointing at a swappable model. If it is True - the default -\nthen if the ForeignKey is pointing at a model which matches\nthe current value of settings.AUTH_USER_MODEL (or another swappable\nmodel setting) the relationship will be stored in the migration using\na reference to the setting, not to the model directly. You only want to override this to be False if you are sure your\nmodel should always point toward the swapped-in model - for example,\nif it is a profile model designed specifically for your custom user model. Setting it to False does not mean you can reference a swappable model\neven if it is swapped out - False means that the migrations made\nwith this ForeignKey will always reference the exact model you specify\n(so it will fail hard if the user tries to run with a User model you don’t\nsupport, for example). If in doubt, leave it to its default of True . ManyToManyField ¶ class ManyToManyField ( to , ** options ) [source] ¶ A many-to-many relationship. Requires a positional argument: the class to\nwhich the model is related, which works exactly the same as it does for ForeignKey , including recursive and lazy relationships. Related objects can be added, removed, or created with the field’s RelatedManager . Database Representation ¶ Behind the scenes, Django creates an intermediary join table to represent the\nmany-to-many relationship. By default, this table name is generated using the\nname of the many-to-many field and the name of the table for the model that\ncontains it. Since some databases don’t support table names above a certain\nlength, these table names will be automatically truncated and a uniqueness hash\nwill be used, e.g. author_books_9cdf . You can manually provide the name of\nthe join table using the db_table option. Arguments ¶ ManyToManyField accepts an extra set of arguments – all optional –\nthat control how the relationship functions. ManyToManyField. related_name ¶ Same as ForeignKey.related_name . ManyToManyField. related_query_name ¶ Same as ForeignKey.related_query_name . ManyToManyField. limit_choices_to ¶ Same as ForeignKey.limit_choices_to . ManyToManyField. symmetrical ¶ Only used in the definition of ManyToManyFields on self. Consider the\nfollowing model: from django.db import models class Person ( models . Model ): friends = models . ManyToManyField ( \"self\" ) When Django processes this model, it identifies that it has a ManyToManyField on itself, and as a result, it doesn’t add a person_set attribute to the Person class. Instead, the ManyToManyField is assumed to be symmetrical – that is, if I am\nyour friend, then you are my friend. If you do not want symmetry in many-to-many relationships with self , set symmetrical to False . This will force Django to\nadd the descriptor for the reverse relationship, allowing ManyToManyField relationships to be non-symmetrical. ManyToManyField. through ¶ Django will automatically generate a table to manage many-to-many\nrelationships. However, if you want to manually specify the intermediary\ntable, you can use the through option to specify\nthe Django model that represents the intermediate table that you want to\nuse. The most common use for this option is when you want to associate extra data with a many-to-many relationship . Note If you don’t want multiple associations between the same instances, add\na UniqueConstraint including the from and to\nfields. Django’s automatically generated many-to-many tables include\nsuch a constraint. Note Recursive relationships using an intermediary model can’t determine the\nreverse accessors names, as they would be the same. You need to set a related_name to at least one of them. If you’d\nprefer Django not to create a backwards relation, set related_name to '+' . If you don’t specify an explicit through model, there is still an\nimplicit through model class you can use to directly access the table\ncreated to hold the association. It has three fields to link the models. If the source and target models differ, the following fields are\ngenerated: id : the primary key of the relation. <containing_model>_id : the id of the model that declares the ManyToManyField . <other_model>_id : the id of the model that the ManyToManyField points to. If the ManyToManyField points from and to the same model, the following\nfields are generated: id : the primary key of the relation. from_<model>_id : the id of the instance which points at the\nmodel (i.e. the source instance). to_<model>_id : the id of the instance to which the relationship\npoints (i.e. the target model instance). This class can be used to query associated records for a given model\ninstance like a normal model: Model . m2mfield . through . objects . all () ManyToManyField. through_fields ¶ Only used when a custom intermediary model is specified. Django will\nnormally determine which fields of the intermediary model to use in order\nto establish a many-to-many relationship automatically. However,\nconsider the following models: from django.db import models class Person ( models . Model ): name = models . CharField ( max_length = 50 ) class Group ( models . Model ): name = models . CharField ( max_length = 128 ) members = models . ManyToManyField ( Person , through = \"Membership\" , through_fields = ( \"group\" , \"person\" ), ) class Membership ( models . Model ): group = models . ForeignKey ( Group , on_delete = models . CASCADE ) person = models . ForeignKey ( Person , on_delete = models . CASCADE ) inviter = models . ForeignKey ( Person , on_delete = models . CASCADE , related_name = \"membership_invites\" , ) invite_reason = models . CharField ( max_length = 64 ) Membership has two foreign keys to Person ( person and inviter ), which makes the relationship ambiguous and Django can’t know\nwhich one to use. In this case, you must explicitly specify which\nforeign keys Django should use using through_fields , as in the example\nabove. through_fields accepts a 2-tuple ('field1', 'field2') , where field1 is the name of the foreign key to the model the ManyToManyField is defined on ( group in this case), and field2 the name of the foreign key to the target model ( person in this case). When you have more than one foreign key on an intermediary model to any\n(or even both) of the models participating in a many-to-many relationship,\nyou must specify through_fields . This also applies to recursive relationships when an intermediary model is used and there are more than two\nforeign keys to the model, or you want to explicitly specify which two\nDjango should use. ManyToManyField. db_table ¶ The name of the table to create for storing the many-to-many data. If this\nis not provided, Django will assume a default name based upon the names of:\nthe table for the model defining the relationship and the name of the field\nitself. ManyToManyField. db_constraint ¶ Controls whether or not constraints should be created in the database for\nthe foreign keys in the intermediary table. The default is True , and\nthat’s almost certainly what you want; setting this to False can be\nvery bad for data integrity. That said, here are some scenarios where you\nmight want to do this: You have legacy data that is not valid. You’re sharding your database. It is an error to pass both db_constraint and through . ManyToManyField. swappable ¶ Controls the migration framework’s reaction if this ManyToManyField is pointing at a swappable model. If it is True - the default -\nthen if the ManyToManyField is pointing at a model which matches\nthe current value of settings.AUTH_USER_MODEL (or another swappable\nmodel setting) the relationship will be stored in the migration using\na reference to the setting, not to the model directly. You only want to override this to be False if you are sure your\nmodel should always point toward the swapped-in model - for example,\nif it is a profile model designed specifically for your custom user model. If in doubt, leave it to its default of True . ManyToManyField does not support validators . null has no effect since there is no way to require a\nrelationship at the database level. OneToOneField ¶ class OneToOneField ( to , on_delete , parent_link = False , ** options ) [source] ¶ A one-to-one relationship. Conceptually, this is similar to a ForeignKey with unique=True , but the\n“reverse” side of the relation will directly return a single object. This is most useful as the primary key of a model which “extends”\nanother model in some way; Multi-table inheritance is\nimplemented by adding an implicit one-to-one relation from the child\nmodel to the parent model, for example. One positional argument is required: the class to which the model will be\nrelated. This works exactly the same as it does for ForeignKey ,\nincluding all the options regarding recursive and lazy relationships. If you do not specify the related_name argument for the OneToOneField , Django will use the lowercase name of the current model as\ndefault value. With the following example: from django.conf import settings from django.db import models class MySpecialUser ( models . Model ): user = models . OneToOneField ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE , ) supervisor = models . OneToOneField ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE , related_name = \"supervisor_of\" , ) your resulting User model will have the following attributes: >>> user = User . objects . get ( pk = 1 ) >>> hasattr ( user , \"myspecialuser\" ) True >>> hasattr ( user , \"supervisor_of\" ) True A RelatedObjectDoesNotExist exception is raised when accessing the reverse\nrelationship if an entry in the related table doesn’t exist. This is a subclass\nof the target model’s Model.DoesNotExist exception and can be accessed as an\nattribute of the reverse accessor. For example, if a user doesn’t have a\nsupervisor designated by MySpecialUser : try : user . supervisor_of except User . supervisor_of . RelatedObjectDoesNotExist : pass Additionally, OneToOneField accepts all of the extra arguments\naccepted by ForeignKey , plus one extra argument: OneToOneField. parent_link ¶ When True and used in a model which inherits from another concrete model , indicates that this field should be used as the\nlink back to the parent class, rather than the extra OneToOneField which would normally be implicitly created by\nsubclassing. See One-to-one relationships for usage\nexamples of OneToOneField . Lazy relationships ¶ Lazy relationships allow referencing models by their names (as strings) or\ncreating recursive relationships. Strings can be used as the first argument in\nany relationship field to reference models lazily. A lazy reference can be\neither recursive , relative or absolute . Recursive ¶ To define a relationship where a model references itself, use \"self\" as the\nfirst argument of the relationship field: from django.db import models class Manufacturer ( models . Model ): name = models . TextField () suppliers = models . ManyToManyField ( \"self\" , symmetrical = False ) When used in an abstract model , the recursive\nrelationship resolves such that each concrete subclass references itself. Relative ¶ When a relationship needs to be created with a model that has not been defined\nyet, it can be referenced by its name rather than the model object itself: from django.db import models class Car ( models . Model ): manufacturer = models . ForeignKey ( \"Manufacturer\" , on_delete = models . CASCADE , ) class Manufacturer ( models . Model ): name = models . TextField () suppliers = models . ManyToManyField ( \"self\" , symmetrical = False ) Relationships defined this way on abstract models are resolved when the model is subclassed as a\nconcrete model and are not relative to the abstract model’s app_label : products/models.py ¶ from django.db import models class AbstractCar ( models . Model ): manufacturer = models . ForeignKey ( \"Manufacturer\" , on_delete = models . CASCADE ) class Meta : abstract = True production/models.py ¶ from django.db import models from products.models import AbstractCar class Manufacturer ( models . Model ): name = models . TextField () class Car ( AbstractCar ): pass In this example, the Car.manufacturer relationship will resolve to production.Manufacturer , as it points to the concrete model defined\nwithin the production/models.py file. Reusable models with relative references Relative references allow the creation of reusable abstract models with\nrelationships that can resolve to different implementations of the\nreferenced models in various subclasses across different applications. Absolute ¶ Absolute references specify a model using its app_label and class name,\nallowing for model references across different applications. This type of lazy\nrelationship can also help resolve circular imports. For example, if the Manufacturer model is defined in another application\ncalled thirdpartyapp , it can be referenced as: class Car ( models . Model ): manufacturer = models . ForeignKey ( \"thirdpartyapp.Manufacturer\" , on_delete = models . CASCADE , ) Absolute references always point to the same model, even when used in an abstract model . Field API reference ¶ class Field [source] ¶ Field is an abstract class that represents a database table column.\nDjango uses fields to create the database table ( db_type() ), to map\nPython types to database ( get_prep_value() ) and vice-versa\n( from_db_value() ). A field is thus a fundamental piece in different Django APIs, notably, models and querysets . In models, a field is instantiated as a class attribute and represents a\nparticular table column, see Models . It has attributes\nsuch as null and unique , and methods that Django uses to\nmap the field value to database-specific values. A Field is a subclass of RegisterLookupMixin and thus both Transform and Lookup can be registered on it to be used\nin QuerySet s (e.g. field_name__exact=\"foo\" ). All built-in\nlookups are registered by default. All of Django’s built-in fields, such as CharField , are particular\nimplementations of Field . If you need a custom field, you can either\nsubclass any of the built-in fields or write a Field from scratch. In\neither case, see How to create custom model fields . description ¶ A verbose description of the field, e.g. for the django.contrib.admindocs application. The description can be of the form: description = _ ( \"String (up to %(max_length)s )\" ) where the arguments are interpolated from the field’s __dict__ . descriptor_class ¶ A class implementing the descriptor protocol that is instantiated and assigned to the model instance attribute. The\nconstructor must accept a single argument, the Field instance.\nOverriding this class attribute allows for customizing the get and set\nbehavior. To map a Field to a database-specific type, Django exposes several\nmethods: get_internal_type () [source] ¶ Returns a string naming this field for backend specific purposes.\nBy default, it returns the class name. See Emulating built-in field types for usage in custom fields. db_type ( connection ) [source] ¶ Returns the database column data type for the Field , taking\ninto account the connection . See Custom database types for usage in custom fields. rel_db_type ( connection ) [source] ¶ Returns the database column data type for fields such as ForeignKey and OneToOneField that point to the Field , taking\ninto account the connection . See Custom database types for usage in custom fields. There are three main situations where Django needs to interact with the\ndatabase backend and fields: when it queries the database (Python value -> database backend value) when it loads data from the database (database backend value -> Python\nvalue) when it saves to the database (Python value -> database backend value) When querying, get_db_prep_value() and get_prep_value() are used: get_prep_value ( value ) [source] ¶ value is the current value of the model’s attribute, and the method\nshould return data in a format that has been prepared for use as a\nparameter in a query. See Converting Python objects to query values for usage. get_db_prep_value ( value , connection , prepared = False ) [source] ¶ Converts value to a backend-specific value. By default it returns value if prepared=True and get_prep_value() if is False . See Converting query values to database values for usage. When loading data, from_db_value() is used: from_db_value ( value , expression , connection ) ¶ Converts a value as returned by the database to a Python object. It is\nthe reverse of get_prep_value() . This method is not used for most built-in fields as the database\nbackend already returns the correct Python type, or the backend itself\ndoes the conversion. expression is the same as self . See Converting values to Python objects for usage. Note For performance reasons, from_db_value is not implemented as a\nno-op on fields which do not require it (all Django fields).\nConsequently you may not call super in your definition. When saving, pre_save() and get_db_prep_save() are used: get_db_prep_save ( value , connection ) [source] ¶ Same as the get_db_prep_value() , but called when the field value\nmust be saved to the database. By default returns get_db_prep_value() . pre_save ( model_instance , add ) [source] ¶ Method called prior to get_db_prep_save() to prepare the value\nbefore being saved (e.g. for DateField.auto_now ). model_instance is the instance this field belongs to and add is whether the instance is being saved to the database for the first\ntime. It should return the value of the appropriate attribute from model_instance for this field. The attribute name is in self.attname (this is set up by Field ). See Preprocessing values before saving for usage. Fields often receive their values as a different type, either from\nserialization or from forms. to_python ( value ) [source] ¶ Converts the value into the correct Python object. It acts as the\nreverse of value_to_string() , and is also called in clean() . See Converting values to Python objects for usage. Besides saving to the database, the field also needs to know how to\nserialize its value: value_from_object ( obj ) [source] ¶ Returns the field’s value for the given model instance. This method is often used by value_to_string() . value_to_string ( obj ) [source] ¶ Converts obj to a string. Used to serialize the value of the field. See Converting field data for serialization for usage. When using model forms , the Field needs to know which form field it should be represented by: formfield ( form_class = None , choices_form_class = None , ** kwargs ) [source] ¶ Returns the default django.forms.Field of this field for ModelForm . By default, if both form_class and choices_form_class are None , it uses CharField . If the field has choices and choices_form_class isn’t specified, it uses TypedChoiceField . See Specifying the form field for a model field for usage. deconstruct () [source] ¶ Returns a 4-tuple with enough information to recreate the field: The name of the field on the model. The import path of the field (e.g. \"django.db.models.IntegerField\" ).\nThis should be the most portable version, so less specific may be better. A list of positional arguments. A dict of keyword arguments. This method must be added to fields prior to 1.7 to migrate its data\nusing Migrations . Registering and fetching lookups ¶ Field implements the lookup registration API .\nThe API can be used to customize which lookups are available for a field class\nand its instances, and how lookups are fetched from a field. Field attribute reference ¶ Every Field instance contains several attributes that allow\nintrospecting its behavior. Use these attributes instead of isinstance checks when you need to write code that depends on a field’s functionality.\nThese attributes can be used together with the Model._meta API to narrow down a search for specific field types.\nCustom model fields should implement these flags. Attributes for fields ¶ Field. auto_created ¶ Boolean flag that indicates if the field was automatically created, such\nas the OneToOneField used by model inheritance. Field. concrete ¶ Boolean flag that indicates if the field has a database column associated\nwith it. Field. hidden ¶ Boolean flag that indicates if a field is hidden and should not be returned\nby Options.get_fields() by default. An example is\nthe reverse field for a ForeignKey with a related_name that starts with '+' . Field. is_relation ¶ Boolean flag that indicates if a field contains references to one or\nmore other models for its functionality (e.g. ForeignKey , ManyToManyField , OneToOneField , etc.). Field. model ¶ Returns the model on which the field is defined. If a field is defined on\na superclass of a model, model will refer to the superclass, not the\nclass of the instance. Attributes for fields with relations ¶ These attributes are used to query for the cardinality and other details of a\nrelation. These attribute are present on all fields; however, they will only\nhave boolean values (rather than None ) if the field is a relation type\n( Field.is_relation=True ). Field. many_to_many ¶ Boolean flag that is True if the field has a many-to-many relation; False otherwise. The only field included with Django where this is True is ManyToManyField . Field. many_to_one ¶ Boolean flag that is True if the field has a many-to-one relation, such\nas a ForeignKey ; False otherwise. Field. one_to_many ¶ Boolean flag that is True if the field has a one-to-many relation, such\nas a GenericRelation or the reverse of a ForeignKey ; False otherwise. Field. one_to_one ¶ Boolean flag that is True if the field has a one-to-one relation, such\nas a OneToOneField ; False otherwise. Field. related_model ¶ Points to the model the field relates to. For example, Author in ForeignKey(Author, on_delete=models.CASCADE) . The related_model for\na GenericForeignKey is always None .", "keywords": ["endswith", "friend", "sr", "column", "self.attname", "type", "amounts", "url", "emailfield", "manytomanyfield", "symmetrical", "timefield", "cron", "-9223372036854775808", "occupies", "get_user_model", "2001:0::0:01", "referencing", "def", "membership", "place", "file.close", "scenes", "username", "settings", "validate_unicode_slug", "bar.png", "answer", "classes", "null", "day", "limit_pub_date_choices", "default_auto_field", "method", "party", "imagefield", "form_class", "points", "related_query_name", "violations", "person", "o", "upload", "a2", "performance", "falcon", "labels", "bytearray", "media_root", "gr", "uploads/%y/%m/", "use", "messages", "callables", "field.default", "ways", "items", "difference", "project", "timestamps", "topic", "folders", "standard", "way", "newspaper", "default", "option", "model.save", "piece", "desire", "op", "media_url", "unpacks", "gettext_lazy", "calendar", "attention", "manytomanyfields", "django.forms", "many_to_many", "tag__name", "decoder", "model.validate_unique", "author_books_9cdf", "documenting", "supervisor_of", "isinstance", "related_name", "constraints", "users", "guide", "ffff:0a0a:0a0a", "supervisor", "tree", "char(32", "foreignkey(author", "textarea", "backend", "self", "label", "validate_slug", "junior", "argument", "field.db_index", "accessor", "converts", "t", "alternative", "auto", "version", "filesystem", "deletion", "db_column", "images", "tuple", "subdirectory", "integer", "app_label", "allow_files", "conjunction", "dict", "future", "meta", "pub_date__lte", "associations", "month", "properties", "term", "pillow", "comment", "tablespaces", "steps", "element", "human", "club", "name", "intrepid", "caveat", "relationships", "registerlookupmixin", "medaltype", "storage.open", "suppliers", "typedchoicefield", "implicit", "world", "sophomore", "allow_unicode", "admin", "size", "space", "python", "link", "charfield", "addition", "amount", "moonlandings", "instances", "diamond", "regex", "jsonencoder", "constructor", "edge", "formats", "default_index_tablespace", "subclass", "indexes", "lookup", "migration", "orm", "descriptor", "storage", "em", "tag", "enum", "address", "display", "true", "related_model", "*", "periods", "managing", "framework", "structure", "through_fields", "relations", "width_field", "from_<model>_id", "search", "modelform", "decimalfield", "unicode", "kinds", ".names", "foo.*\\.txt$", "operation", "forms", "length", "to_<model>_id", "emulating", "updates", "key", "modeladmin", "deconstruct", "situation", "generatedfield", "members", "numberinput", "datetime.datetime", "zone", "dictionary", "db_constraint", "explanation", "characters", "integerchoices", "resolution", "script", "operators", "browser", "portability", "selections", "implementations", "error", "reaction", "differences", "xss", "design", "template", "minvaluevalidator", "migrations", "istartswith", "literals", "datetime", "clearablefileinput", "destination", "%", "setting", "set_null", "intermediary", "order", "limits", "documentation", ".labels", "apollo_11", "style", "is_staff", "creation", "specifies", "uploads", "photos/%y/%m/%d", "sense", "pk", "integrityerror", "application", "scripting", "foo.png", "ginindex", "b1", "table", "iexact", "convenience", "uniqueconstraint", "behavior", "php", "system", "ids", "auto_now_add", "mode", "str", "risk", "files", "query", "mariadb", "following", "strftime", "import", "determines", "enum.unique", "runtime", "respect", "hyphens", "'", "moment", "datefield", "information", "upload_to", "django.db.models.fields", "thirdpartyapp", "article", "interval", "json", "off", "result", "#", "decimal", "point", "section", "limitations", "¶", "functional", "lazy", "dvd", "web", "maxvaluevalidator", "2a02:42fe::4", "member", "definition", "binaryfield", "foreignkey.on_delete", "db_tablespace", "modifications", "server", "choices_form_class", "auto_now", "apollo_16", "foreignkey.related_name", "field_name__exact=\"foo", "precedence", "format", "user_directory_path", "profile", "word", "example", "vice", "django.db.models", "year", "value", "functions", "products", "field.db_default", "year_in_school", "db_type", "int", "source", "manufacturer", "booleans", "replacement", "bronze", "exclude", "behaves", "languages", "artist_one", "converting", "save", "c", "unpack_ipv4", "html", "positiveintegerfield", "images_path", "album", "year_in_school_choices", "apollo_15", "gotcha", "currency", "examples", "get_prep_value", "django.db", "student", "details", "slug", "proxy", "iterables", "open", "ipv6", ".value", "scenarios", "deserialization", "rfc", "form", "ski", "slugfield", "object", "root", "hash", "library", "postgresql", "comparison", "attributes", "help_text", "durationfield", "prevent", "one", "hasattr", "returns", "car", "retrieval", "challenger", "/path", "parent", "verbose", "conversion", "is_upperclass", "suit", "initialization", "sequence", "api", "paragraph", "note", "box", "decimalvalidator", "unique_for_date", "level", "django", "days", "message", "filesystemstorage", "fact", "model_instance", "yearinschool['senior", "genericforeignkey", "b2", "parameter", "validation", "databasedefault", "datetime.date.today", "syntax", "staff_member", "csrf", "text", "urlvalidator", "field", "contents", "strings", "microseconds", "relation", "integerfield", "bigautofield", "textinput", "checkboxinput", "orion", "effect", "m2mfield", "digits", "=", "superclass", "objects", "apollo_17", "defaults", "photos/2007/01/15", "verbose_name", "django.utils.html.escape", "implementation", "field1", "lists", "index", "connection", "wrapper", "match", "callable", "filenames", "+", "album_one", "datefield.auto_now", "urlfield", "mysql", "range", "inviter", "descriptor_class", "memoryview", "widgets", "opens", "appconfig.default_auto_field", "serialization", "max_digits", "trick", "containing_model>_id", "membership_invites", "help", "places", "works", "time", "controls", "card", "exception", "restrictederror", "cascade", "oracle", "q", "vehicle", "property", "category", "-32768", "tape", "delete", "queryset", "pointer", "django.utils.timezone.now", "commands", "lowercase", "dd</em", "define", "site", "myuuidmodel", "contact_info", "d", "pieces", "unique_for_month", "bytes", "subclasses", "registration", "relatedmanager", "doubt", "groups", "invalid_choice", "localize", "db_comment", "ipv4", "django.utils.translation", "default_related_name", "fields", "apis", "arithmetic", "cardinality", "cultures", "height", "icontains", "custom", "f", "collation", ".name", "methods", "date.today", "side", "bigintegerfield", "update", "emailvalidator", "floatfield", "rb", "genericipaddressfield", "smallautofield", "heart", "same", "keyword", "none", "urls", "datatype", "join", "base", "protocol", "access", "command", "javascript", ">", "contactinfo", "symmetry", "considerations", "timedelta", "component", "email", "convention", "uuid4", "first", "mymodel", "content", "validators", "-2147483648", "uuid", "production", "end", "unix", "y/%m/%d", "relatedobjectdoesnotexist", "flag", "applications", "jet", "enforces", "inheritance", "decimal_places", "db_default", "attacks", "b", "tables", "third", "mapping", "contact_default", "attack", "holes", "refresh_from_db", "urlinput", "graduate", "currencies", "jr", "a", "protect", "is_relation", "data", "widget", "matching", "constraint", "group", "pub_date", "options", "lookups", "threats", "truncmonth", "notes", "references", "tablespace", "combination", "reasons", "optional", "error_messages", "trade", "shortcut", "countries", "child", "django.core.files", "description", "senior", "kwargs", "positivebigintegerfield", "a1", "keys", "sql", "author", "path", "storage.size", "antares", "user_<id>/<filename", "get_sentinel_user", "artist_two", "directory", "model._meta", "max", "backends", "apps", "arguments", "module", "restrict", "jsondecoder", "yearinschool", "textchoices", "consistency", "friends", "expense", "mm", "e.g", "myspecialuser", "absolute", "editable", ".values", "security", "day(9", "models", "underscores", "video", "foreignkey.limit_choices_to", "caveats", "db_collation", "datetimeinput", "song_one", "get_currencies", "apollo", "title", "get_internal_type", "disk", "addresses", "width", "slashes", "limit_choices_to", "contentfile", "max_length)s", "onetoonefield", "truck", "blank", "gold", "height_field", "freshman", "shortcuts", "querysets", "image", "support", "object.mug_shot.url", "abstractcar", "types", "to_field", "queryset.update", "docs", "changes", "get_db_prep_save", "recursive", "filter", "booleanfield", "validate", "timeinput", "one_to_many", "indexing", "portion", "false", "legacy", "protectederror", "jan.", "filefield", "management", "db_persist", "midnight", "_", "records", "model.delete", "check", "inputs", "integers", "values", "required", "vhs", "cases", "encoder", "new", "times", "post_delete", "clean", "j", "immutable", "item", "media", "lambda", "today", "prepopulated_fields", "compatibility", "subdirectories", "zones", "from_db_value", "spaces", "individuals", "artist", "fieldfile", "stores", "collations", "max_string_size", "timezone", "precision", "input", "mappings", "location", "fly", "raw_id_fields", "output_field", "target", "manufacturer_id", "filepathfield", "model", "usage", "value_to_string", "max_length", "fr", "y", "querying", "choice", "datetime.date", "serializer", "yearinschool('sr", "letters", "purposes", "use_tz", "djangojsonencoder", "parent_link", "storage.save", "checks", ".choices", "n’t", "second", "formatting", "song_two", "sqlite", "parentheses", "uuidfield", "hello.world", "ffff:192.0.2.1", "field.is_relation", "case", "imports", "scratch", "local_file_dir", "class", "number", "choices", "numbers", "foreignkey.related_query_name", "return", "tuples", "bigint", "columns", "digit", "smallintegerfield", "extended", "field2", "action", "myfile", "attribute", "restrictions", "function", "string", "interpolation", "list", "json1", "positivesmallintegerfield", "bit", "filename", "app", "view", "products.models", "maxlengthvalidator", "models.<foo", "parts", "django.contrib.admindocs", "i", "joins", "datetimefield", "identifiers", "formfield", "extension", "mirrors", "user", "allow_folders", "flags", "unique_for_year", "part", "file", "invalid_date", "yyyy", "read", "queries", "hyphen", "operations", "jsonfield", "eagle", "unique_for_date=\"pub_date", "other_model>_id", "dictionaries", "get", "localflavor", "account", "vinyl", "inventory", "meta.indexes", "to1@example.com", "cd", "jet_ski", "situations", "population", "possibility", "’d", "names", "enumeration", "signals", "rel_db_type", "options.get_fields", "expressions", "float", "document", "s.", "representation", "date", "set", "normalization", "django.contrib.auth", "tags", "autofield", "functionality", "textfield", "cost", "foo", "foreignkey", "apollo_12", "database", "cgi", "relationship", "song", "reverse", "transform", "databases", "get_db_prep_value", "arrays", "limit", "expression", "db_index", "inherits", "reference", "silver", "instance", "code", "overhead", "integrity", "primary_key", "accessors", "through", "genericrelation", "audio", "entry", "association", "dateinput"], "type": "documentation"},
{"title": "Migration Operations", "url": "https://docs.djangoproject.com/en/5.1/ref/migration-operations/", "content": "Migration Operations ¶ Migration files are composed of one or more Operation s, objects that\ndeclaratively record what the migration should do to your database. Django also uses these Operation objects to work out what your models\nlooked like historically, and to calculate what changes you’ve made to\nyour models since the last migration so it can automatically write\nyour migrations; that’s why they’re declarative, as it means Django can\neasily load them all into memory and run through them without touching\nthe database to work out what your project should look like. There are also more specialized Operation objects which are for things like data migrations and for advanced manual database\nmanipulation. You can also write your own Operation classes if you want\nto encapsulate a custom change you commonly make. If you need an empty migration file to write your own Operation objects\ninto, use python manage.py makemigrations --empty yourappname , but be aware\nthat manually adding schema-altering operations can confuse the migration\nautodetector and make resulting runs of makemigrations output\nincorrect code. All of the core Django operations are available from the django.db.migrations.operations module. For introductory material, see the migrations topic guide . Schema Operations ¶ CreateModel ¶ class CreateModel ( name , fields , options = None , bases = None , managers = None ) [source] ¶ Creates a new model in the project history and a corresponding table in the\ndatabase to match it. name is the model name, as would be written in the models.py file. fields is a list of 2-tuples of (field_name, field_instance) .\nThe field instance should be an unbound field (so just models.CharField(...) , rather than a field taken from another model). options is an optional dictionary of values from the model’s Meta class. bases is an optional list of other classes to have this model inherit from;\nit can contain both class objects as well as strings in the format \"appname.ModelName\" if you want to depend on another model (so you inherit\nfrom the historical version). If it’s not supplied, it defaults to inheriting\nfrom the standard models.Model . managers takes a list of 2-tuples of (manager_name, manager_instance) .\nThe first manager in the list will be the default manager for this model during\nmigrations. DeleteModel ¶ class DeleteModel ( name ) [source] ¶ Deletes the model from the project history and its table from the database. RenameModel ¶ class RenameModel ( old_name , new_name ) [source] ¶ Renames the model from an old name to a new one. You may have to manually add\nthis if you change the model’s name and quite a few of its fields at once; to\nthe autodetector, this will look like you deleted a model with the old name\nand added a new one with a different name, and the migration it creates will\nlose any data in the old table. AlterModelTable ¶ class AlterModelTable ( name , table ) [source] ¶ Changes the model’s table name (the db_table option on the Meta subclass). AlterModelTableComment ¶ class AlterModelTableComment ( name , table_comment ) [source] ¶ Changes the model’s table comment (the db_table_comment option on the Meta subclass). AlterUniqueTogether ¶ class AlterUniqueTogether ( name , unique_together ) [source] ¶ Changes the model’s set of unique constraints (the unique_together option on the Meta subclass). AlterIndexTogether ¶ class AlterIndexTogether ( name , index_together ) [source] ¶ Changes the model’s set of custom indexes (the index_together option on the Meta subclass). Warning AlterIndexTogether is officially supported only for pre-Django 4.2\nmigration files. For backward compatibility reasons, it’s still part of the\npublic API, and there’s no plan to deprecate or remove it, but it should\nnot be used for new migrations. Use AddIndex and RemoveIndex operations instead. AlterOrderWithRespectTo ¶ class AlterOrderWithRespectTo ( name , order_with_respect_to ) [source] ¶ Makes or deletes the _order column needed for the order_with_respect_to option on the Meta subclass. AlterModelOptions ¶ class AlterModelOptions ( name , options ) [source] ¶ Stores changes to miscellaneous model options (settings on a model’s Meta )\nlike permissions and verbose_name . Does not affect the database, but\npersists these changes for RunPython instances to use. options should be a dictionary mapping option names to values. AlterModelManagers ¶ class AlterModelManagers ( name , managers ) [source] ¶ Alters the managers that are available during migrations. AddField ¶ class AddField ( model_name , name , field , preserve_default = True ) [source] ¶ Adds a field to a model. model_name is the model’s name, name is\nthe field’s name, and field is an unbound Field instance (the thing\nyou would put in the field declaration in models.py - for example, models.IntegerField(null=True) . The preserve_default argument indicates whether the field’s default\nvalue is permanent and should be baked into the project state ( True ),\nor if it is temporary and just for this migration ( False ) - usually\nbecause the migration is adding a non-nullable field to a table and needs\na default value to put into existing rows. It does not affect the behavior\nof setting defaults in the database directly - Django never sets database\ndefaults and always applies them in the Django ORM code. Warning On older databases, adding a field with a default value may cause a full\nrewrite of the table. This happens even for nullable fields and may have a\nnegative performance impact. To avoid that, the following steps should be\ntaken. Add the nullable field without the default value and run the makemigrations command. This should generate a migration with\nan AddField operation. Add the default value to your field and run the makemigrations command. This should generate a migration with an AlterField operation. RemoveField ¶ class RemoveField ( model_name , name ) [source] ¶ Removes a field from a model. Bear in mind that when reversed, this is actually adding a field to a model.\nThe operation is reversible (apart from any data loss, which is irreversible)\nif the field is nullable or if it has a default value that can be used to\npopulate the recreated column. If the field is not nullable and does not have a\ndefault value, the operation is irreversible. PostgreSQL RemoveField will also delete any additional database objects that are\nrelated to the removed field (like views, for example). This is because the\nresulting DROP COLUMN statement will include the CASCADE clause to\nensure dependent objects outside the table are also dropped . AlterField ¶ class AlterField ( model_name , name , field , preserve_default = True ) [source] ¶ Alters a field’s definition, including changes to its type, null , unique , db_column and other field attributes. The preserve_default argument indicates whether the field’s default\nvalue is permanent and should be baked into the project state ( True ),\nor if it is temporary and just for this migration ( False ) - usually\nbecause the migration is altering a nullable field to a non-nullable one and\nneeds a default value to put into existing rows. It does not affect the\nbehavior of setting defaults in the database directly - Django never sets\ndatabase defaults and always applies them in the Django ORM code. Note that not all changes are possible on all databases - for example, you\ncannot change a text-type field like models.TextField() into a number-type\nfield like models.IntegerField() on most databases. RenameField ¶ class RenameField ( model_name , old_name , new_name ) [source] ¶ Changes a field’s name (and, unless db_column is set, its column name). AddIndex ¶ class AddIndex ( model_name , index ) [source] ¶ Creates an index in the database table for the model with model_name . index is an instance of the Index class. RemoveIndex ¶ class RemoveIndex ( model_name , name ) [source] ¶ Removes the index named name from the model with model_name . RenameIndex ¶ class RenameIndex ( model_name , new_name , old_name = None , old_fields = None ) [source] ¶ Renames an index in the database table for the model with model_name .\nExactly one of old_name and old_fields can be provided. old_fields is an iterable of the strings, often corresponding to fields of index_together (pre-Django 5.1 option). On databases that don’t support an index renaming statement (SQLite and MariaDB\n< 10.5.2), the operation will drop and recreate the index, which can be\nexpensive. AddConstraint ¶ class AddConstraint ( model_name , constraint ) [source] ¶ Creates a constraint in the database table for\nthe model with model_name . RemoveConstraint ¶ class RemoveConstraint ( model_name , name ) [source] ¶ Removes the constraint named name from the model with model_name . Special Operations ¶ RunSQL ¶ class RunSQL ( sql , reverse_sql = None , state_operations = None , hints = None , elidable = False ) [source] ¶ Allows running of arbitrary SQL on the database - useful for more advanced\nfeatures of database backends that Django doesn’t support directly. sql , and reverse_sql if provided, should be strings of SQL to run on\nthe database. On most database backends (all but PostgreSQL), Django will\nsplit the SQL into individual statements prior to executing them. Warning On PostgreSQL and SQLite, only use BEGIN or COMMIT in your SQL in non-atomic migrations , to avoid breaking\nDjango’s transaction state. You can also pass a list of strings or 2-tuples. The latter is used for passing\nqueries and parameters in the same way as cursor.execute() . These three operations are equivalent: migrations . RunSQL ( \"INSERT INTO musician (name) VALUES ('Reinhardt');\" ) migrations . RunSQL ([( \"INSERT INTO musician (name) VALUES ('Reinhardt');\" , None )]) migrations . RunSQL ([( \"INSERT INTO musician (name) VALUES ( %s );\" , [ \"Reinhardt\" ])]) If you want to include literal percent signs in the query, you have to double\nthem if you are passing parameters. The reverse_sql queries are executed when the migration is unapplied. They\nshould undo what is done by the sql queries. For example, to undo the above\ninsertion with a deletion: migrations . RunSQL ( sql = [( \"INSERT INTO musician (name) VALUES ( %s );\" , [ \"Reinhardt\" ])], reverse_sql = [( \"DELETE FROM musician where name= %s ;\" , [ \"Reinhardt\" ])], ) If reverse_sql is None (the default), the RunSQL operation is\nirreversible. The state_operations argument allows you to supply operations that are\nequivalent to the SQL in terms of project state. For example, if you are\nmanually creating a column, you should pass in a list containing an AddField operation here so that the autodetector still has an up-to-date state of the\nmodel. If you don’t, when you next run makemigrations , it won’t see any\noperation that adds that field and so will try to run it again. For example: migrations . RunSQL ( \"ALTER TABLE musician ADD COLUMN name varchar(255) NOT NULL;\" , state_operations = [ migrations . AddField ( \"musician\" , \"name\" , models . CharField ( max_length = 255 ), ), ], ) The optional hints argument will be passed as **hints to the allow_migrate() method of database routers to assist them in making\nrouting decisions. See Hints for more details on\ndatabase hints. The optional elidable argument determines whether or not the operation will\nbe removed (elided) when squashing migrations . RunSQL. noop ¶ Pass the RunSQL.noop attribute to sql or reverse_sql when you\nwant the operation not to do anything in the given direction. This is\nespecially useful in making the operation reversible. RunPython ¶ class RunPython ( code , reverse_code = None , atomic = None , hints = None , elidable = False ) [source] ¶ Runs custom Python code in a historical context. code (and reverse_code if supplied) should be callable objects that accept two arguments; the first is\nan instance of django.apps.registry.Apps containing historical models that\nmatch the operation’s place in the project history, and the second is an\ninstance of SchemaEditor . The reverse_code argument is called when unapplying migrations. This\ncallable should undo what is done in the code callable so that the\nmigration is reversible. If reverse_code is None (the default), the RunPython operation is irreversible. The optional hints argument will be passed as **hints to the allow_migrate() method of database routers to assist them in making a\nrouting decision. See Hints for more details on\ndatabase hints. The optional elidable argument determines whether or not the operation will\nbe removed (elided) when squashing migrations . You are advised to write the code as a separate function above the Migration class in the migration file, and pass it to RunPython . Here’s an example of\nusing RunPython to create some initial objects on a Country model: from django.db import migrations def forwards_func ( apps , schema_editor ): # We get the model from the versioned app registry; # if we directly import it, it'll be the wrong version Country = apps . get_model ( \"myapp\" , \"Country\" ) db_alias = schema_editor . connection . alias Country . objects . using ( db_alias ) . bulk_create ( [ Country ( name = \"USA\" , code = \"us\" ), Country ( name = \"France\" , code = \"fr\" ), ] ) def reverse_func ( apps , schema_editor ): # forwards_func() creates two Country instances, # so reverse_func() should delete them. Country = apps . get_model ( \"myapp\" , \"Country\" ) db_alias = schema_editor . connection . alias Country . objects . using ( db_alias ) . filter ( name = \"USA\" , code = \"us\" ) . delete () Country . objects . using ( db_alias ) . filter ( name = \"France\" , code = \"fr\" ) . delete () class Migration ( migrations . Migration ): dependencies = [] operations = [ migrations . RunPython ( forwards_func , reverse_func ), ] This is generally the operation you would use to create data migrations , run\ncustom data updates and alterations, and anything else you need access to an\nORM and/or Python code for. Much like RunSQL , ensure that if you change schema inside here you’re\neither doing it outside the scope of the Django model system (e.g. triggers)\nor that you use SeparateDatabaseAndState to add in operations that will\nreflect your changes to the model state - otherwise, the versioned ORM and\nthe autodetector will stop working correctly. By default, RunPython will run its contents inside a transaction on\ndatabases that do not support DDL transactions (for example, MySQL and\nOracle). This should be safe, but may cause a crash if you attempt to use\nthe schema_editor provided on these backends; in this case, pass atomic=False to the RunPython operation. On databases that do support DDL transactions (SQLite and PostgreSQL), RunPython operations do not have any transactions automatically added\nbesides the transactions created for each migration. Thus, on PostgreSQL, for\nexample, you should avoid combining schema changes and RunPython operations\nin the same migration or you may hit errors like OperationalError: cannot ALTER TABLE \"mytable\" because it has pending trigger events . If you have a different database and aren’t sure if it supports DDL\ntransactions, check the django.db.connection.features.can_rollback_ddl attribute. If the RunPython operation is part of a non-atomic migration , the operation will only be executed in a transaction\nif atomic=True is passed to the RunPython operation. Warning RunPython does not magically alter the connection of the models for you;\nany model methods you call will go to the default database unless you\ngive them the current database alias (available from schema_editor.connection.alias , where schema_editor is the second\nargument to your function). static RunPython. noop () [source] ¶ Pass the RunPython.noop method to code or reverse_code when\nyou want the operation not to do anything in the given direction. This is\nespecially useful in making the operation reversible. SeparateDatabaseAndState ¶ class SeparateDatabaseAndState ( database_operations = None , state_operations = None ) [source] ¶ A highly specialized operation that lets you mix and match the database\n(schema-changing) and state (autodetector-powering) aspects of operations. It accepts two lists of operations. When asked to apply state, it will use the state_operations list (this is a generalized version of RunSQL ’s state_operations argument). When asked to apply changes to the database, it\nwill use the database_operations list. If the actual state of the database and Django’s view of the state get out of\nsync, this can break the migration framework, even leading to data loss. It’s\nworth exercising caution and checking your database and state operations\ncarefully. You can use sqlmigrate and dbshell to check\nyour database operations. You can use makemigrations , especially\nwith --dry-run , to check your state\noperations. For an example using SeparateDatabaseAndState , see Changing a ManyToManyField to use a through model . Operation category ¶ New in Django 5.1. class OperationCategory [source] ¶ Categories of migration operation used by the makemigrations command to display meaningful symbols. ADDITION ¶ Symbol : + REMOVAL ¶ Symbol : - ALTERATION ¶ Symbol : ~ PYTHON ¶ Symbol : p SQL ¶ Symbol : s MIXED ¶ Symbol : ? Writing your own ¶ Operations have a relatively simple API, and they’re designed so that you can\neasily write your own to supplement the built-in Django ones. The basic\nstructure of an Operation looks like this: from django.db.migrations.operations.base import Operation class MyCustomOperation ( Operation ): # If this is False, it means that this operation will be ignored by # sqlmigrate; if true, it will be run and the SQL collected for its output. reduces_to_sql = False # If this is False, Django will refuse to reverse past this operation. reversible = False # This categorizes the operation. The corresponding symbol will be # displayed by the makemigrations command. category = OperationCategory . ADDITION def __init__ ( self , arg1 , arg2 ): # Operations are usually instantiated with arguments in migration # files. Store the values of them on self for later use. pass def state_forwards ( self , app_label , state ): # The Operation should take the 'state' parameter (an instance of # django.db.migrations.state.ProjectState) and mutate it to match # any schema changes that have occurred. pass def database_forwards ( self , app_label , schema_editor , from_state , to_state ): # The Operation should use schema_editor to apply any changes it # wants to make to the database. pass def database_backwards ( self , app_label , schema_editor , from_state , to_state ): # If reversible is True, this is called when the operation is reversed. pass def describe ( self ): # This is used to describe what the operation does. return \"Custom Operation\" @property def migration_name_fragment ( self ): # Optional. A filename part suitable for automatically naming a # migration containing this operation, or None if not applicable. return \"custom_operation_ %s _ %s \" % ( self . arg1 , self . arg2 ) You can take this template and work from it, though we suggest looking at the\nbuilt-in Django operations in django.db.migrations.operations - they cover\na lot of the example usage of semi-internal aspects of the migration framework\nlike ProjectState and the patterns used to get historical models, as well\nas ModelState and the patterns used to mutate historical models in state_forwards() . Some things to note: You don’t need to learn too much about ProjectState to write migrations;\njust know that it has an apps property that gives access to an app\nregistry (which you can then call get_model on). database_forwards and database_backwards both get two states passed\nto them; these represent the difference the state_forwards method would\nhave applied, but are given to you for convenience and speed reasons. If you want to work with model classes or model instances from the from_state argument in database_forwards() or database_backwards() , you must render model states using the clear_delayed_apps_cache() method to make related models available: def database_forwards ( self , app_label , schema_editor , from_state , to_state ): # This operation should have access to all models. Ensure that all models are # reloaded in case any are delayed. from_state . clear_delayed_apps_cache () ... to_state in the database_backwards method is the older state; that is,\nthe one that will be the current state once the migration has finished reversing. You might see implementations of references_model on the built-in\noperations; this is part of the autodetection code and does not matter for\ncustom operations. Warning For performance reasons, the Field instances in ModelState.fields are reused across migrations. You must never change\nthe attributes on these instances. If you need to mutate a field in state_forwards() , you must remove the old instance from ModelState.fields and add a new instance in its place. The same is true\nfor the Manager instances in ModelState.managers . As an example, let’s make an operation that loads PostgreSQL extensions (which\ncontain some of PostgreSQL’s more exciting features). Since there’s no model\nstate changes, all it does is run one command: from django.db.migrations.operations.base import Operation class LoadExtension ( Operation ): reversible = True def __init__ ( self , name ): self . name = name def state_forwards ( self , app_label , state ): pass def database_forwards ( self , app_label , schema_editor , from_state , to_state ): schema_editor . execute ( \"CREATE EXTENSION IF NOT EXISTS %s \" % self . name ) def database_backwards ( self , app_label , schema_editor , from_state , to_state ): schema_editor . execute ( \"DROP EXTENSION %s \" % self . name ) def describe ( self ): return \"Creates extension %s \" % self . name @property def migration_name_fragment ( self ): return \"create_extension_ %s \" % self . name", "keywords": ["iterable", "alter", "addfield", "column", "runsql.noop", "transactions", "removal", "modelname", "hints", "type", "runpython.noop", "manytomanyfield", "table_comment", "rows", "statement", "def", "renamemodel", "place", "altermodeltablecomment", "settings", "classes", "null", "method", "aspects", "noop", "autodetection", "performance", "use", "views", "difference", "project", "runpython", "clear_delayed_apps_cache", "topic", "way", "projectstate", "default", "option", "musician", "terms", "get_model", "mind", "insertion", "constraints", "guide", "django.db.migrations.state", "addconstraint", "self", "operationalerror", "argument", "@property", "version", "deletion", "db_column", "meta", "comment", "steps", "runs", "name", "france", "percent", "python", "charfield", "direction", "addition", "instances", "reverse_sql", "allow_migrate", "alters", "subclass", "removeindex", "indexes", "migration", "orm", "operationcategory", "speed", "arg2", "removefield", "*", "framework", "structure", "django.apps.registry", "describe", "model_name", "alterorderwithrespectto", "dbshell", "operation", "features", "updates", "parameters", "alias", "state", "dictionary", "permissions", "material", "implementations", "old_name", "django.db.migrations.operations.base", "template", "migrations", "%", "static", "order", "-", "manager_name", "field_name", "categories", "table", "convenience", "behavior", "system", "create_extension", "files", "query", "import", "manipulation", "#", "manager_instance", "¶", "init", "order_with_respect_to", "definition", "change", "symbols", "format", "example", "value", "renameindex", "impact", "source", "begin", "create", "django.db", "things", "details", "decisions", "bases", "warning", "removeconstraint", "reverse_code", "symbol", "one", "postgresql", "attributes", "to_state", "sync", "loadextension", "trigger", "myapp", "index_together", "api", "insert", "modelstate.fields", "django", "createmodel", "parameter", "addindex", "lot", "text", "field", "altermodeloptions", "loss", "state_operations", "strings", "contents", "integerfield", "caution", "=", "database_operations", "objects", "crash", "defaults", "verbose_name", "index", "lists", "connection", "callable", "run", "statements", "separatedatabaseandstate", "cursor.execute", "cascade", "oracle", "property", "category", "delete", "database_backwards", "from_state", "old_fields", "manager", "routing", "mytable", "field_instance", "output", "fields", "new_name", "removes", "inherit", "custom", "methods", "django.db.connection.features.can_rollback_ddl", "modelstate", "none", "access", "command", "allows", "decision", "makemigrations", "bear", "bulk_create", "mapping", "thing", "forwards_func", "altermodelmanagers", "data", "latter", "constraint", "runsql", "reduces_to_sql", "references_model", "options", "alterindextogether", "dependencies", "states", "patterns", "reasons", "optional", "rewrite", "s", "sql", "events", "managers", "module", "backends", "arguments", "apps", "memory", "add", "context", "models", "varchar(255", "mixed", "registry", "arg1", "deletemodel", "state_forwards", "alteruniquetogether", "renames", "plan", "schemaeditor", "country", "changes", "filter", "false", "declaration", "_", "preserve_default", "db_alias", "values", "special", "new", "sqlmigrate", "compatibility", "signs", "stores", "alterfield", "reverse_func", "schema_editor", "transaction", "usage", "model", "max_length", "fr", "n’t", "sqlite", "renamefield", "case", "class", "number", "autodetector", "tuples", "return", "attribute", "ones", "function", "drop", "list", "alteration", "app", "view", "schema_editor.connection.alias", "extension", "part", "file", "queries", "usa", "alterations", "operations", "errors", "core", "extensions", "history", "database_forwards", "names", "clause", "pre", "modelstate.managers", "scope", "date", "yourappname", "set", "textfield", "ddl", "database", "django.db.migrations.operations", "triggers", "databases", "instance", "schema", "code", "into"], "type": "documentation"},
{"title": "Middleware", "url": "https://docs.djangoproject.com/en/5.1/ref/middleware/", "content": "Middleware ¶ This document explains all middleware components that come with Django. For\ninformation on how to use them and how to write your own middleware, see\nthe middleware usage guide . Available middleware ¶ Cache middleware ¶ class UpdateCacheMiddleware [source] ¶ class FetchFromCacheMiddleware [source] ¶ Enable the site-wide cache. If these are enabled, each Django-powered page will\nbe cached for as long as the CACHE_MIDDLEWARE_SECONDS setting\ndefines. See the cache documentation . “Common” middleware ¶ class CommonMiddleware [source] ¶ response_redirect_class ¶ Defaults to HttpResponsePermanentRedirect . Subclass CommonMiddleware and override the attribute to customize the redirects\nissued by the middleware. Adds a few conveniences for perfectionists: Forbids access to user agents in the DISALLOWED_USER_AGENTS setting, which should be a list of compiled regular expression objects. Performs URL rewriting based on the APPEND_SLASH and PREPEND_WWW settings. If APPEND_SLASH is True and the initial URL doesn’t end\nwith a slash, and it is not found in the URLconf, then a new URL is\nformed by appending a slash at the end. If this new URL is found in the\nURLconf, then Django redirects the request to this new URL. Otherwise,\nthe initial URL is processed as usual. For example, foo.com/bar will be redirected to foo.com/bar/ if\nyou don’t have a valid URL pattern for foo.com/bar but do have a\nvalid pattern for foo.com/bar/ . If PREPEND_WWW is True , URLs that lack a leading “www.”\nwill be redirected to the same URL with a leading “www.” Both of these options are meant to normalize URLs. The philosophy is that\neach URL should exist in one, and only one, place. Technically a URL foo.com/bar is distinct from foo.com/bar/ – a search-engine\nindexer would treat them as separate URLs – so it’s best practice to\nnormalize URLs. If necessary, individual views may be excluded from the APPEND_SLASH behavior using the no_append_slash() decorator: from django.views.decorators.common import no_append_slash @no_append_slash def sensitive_fbv ( request , * args , ** kwargs ): \"\"\"View to be excluded from APPEND_SLASH.\"\"\" return HttpResponse () Sets the Content-Length header for non-streaming responses. class BrokenLinkEmailsMiddleware [source] ¶ Sends broken link notification emails to MANAGERS (see How to manage error reporting ). GZip middleware ¶ class GZipMiddleware [source] ¶ max_random_bytes ¶ Defaults to 100. Subclass GZipMiddleware and override the attribute\nto change the maximum number of random bytes that is included with\ncompressed responses. Note Security researchers revealed that when compression techniques (including GZipMiddleware ) are used on a website, the site may become exposed to a\nnumber of possible attacks. To mitigate attacks, Django implements a technique called Heal The Breach\n(HTB) . It adds up to 100 bytes (see max_random_bytes ) of random bytes to each response\nto make the attacks less effective. For more details, see the BREACH paper (PDF) , breachattack.com , and\nthe Heal The Breach (HTB) paper . The django.middleware.gzip.GZipMiddleware compresses content for browsers\nthat understand GZip compression (all modern browsers). This middleware should be placed before any other middleware that need to\nread or write the response body so that compression happens afterward. It will NOT compress content if any of the following are true: The content body is less than 200 bytes long. The response has already set the Content-Encoding header. The request (the browser) hasn’t sent an Accept-Encoding header\ncontaining gzip . If the response has an ETag header, the ETag is made weak to comply with RFC 9110 Section 8.8.1 . You can apply GZip compression to individual views using the gzip_page() decorator. Conditional GET middleware ¶ class ConditionalGetMiddleware [source] ¶ Handles conditional GET operations. If the response doesn’t have an ETag header, the middleware adds one if needed. If the response has an ETag or Last-Modified header, and the request has If-None-Match or If-Modified-Since , the response is replaced by an HttpResponseNotModified . Locale middleware ¶ class LocaleMiddleware [source] ¶ response_redirect_class ¶ Defaults to HttpResponseRedirect . Subclass LocaleMiddleware and override the attribute to customize the\nredirects issued by the middleware. Enables language selection based on data from the request. It customizes\ncontent for each user. See the internationalization documentation . Message middleware ¶ class MessageMiddleware [source] ¶ Enables cookie- and session-based message support. See the messages documentation . Security middleware ¶ Warning If your deployment situation allows, it’s usually a good idea to have your\nfront-end web server perform the functionality provided by the SecurityMiddleware . That way, if there are requests that aren’t served\nby Django (such as static media or user-uploaded files), they will have\nthe same protections as requests to your Django application. class SecurityMiddleware [source] ¶ The django.middleware.security.SecurityMiddleware provides several security\nenhancements to the request/response cycle. Each one can be independently\nenabled or disabled with a setting. SECURE_CONTENT_TYPE_NOSNIFF SECURE_CROSS_ORIGIN_OPENER_POLICY SECURE_HSTS_INCLUDE_SUBDOMAINS SECURE_HSTS_PRELOAD SECURE_HSTS_SECONDS SECURE_REDIRECT_EXEMPT SECURE_REFERRER_POLICY SECURE_SSL_HOST SECURE_SSL_REDIRECT HTTP Strict Transport Security ¶ For sites that should only be accessed over HTTPS, you can instruct modern\nbrowsers to refuse to connect to your domain name via an insecure connection\n(for a given period of time) by setting the “Strict-Transport-Security”\nheader . This reduces your exposure to some SSL-stripping man-in-the-middle\n(MITM) attacks. SecurityMiddleware will set this header for you on all HTTPS responses if\nyou set the SECURE_HSTS_SECONDS setting to a non-zero integer value. When enabling HSTS, it’s a good idea to first use a small value for testing,\nfor example, SECURE_HSTS_SECONDS = 3600 for one\nhour. Each time a web browser sees the HSTS header from your site, it will\nrefuse to communicate non-securely (using HTTP) with your domain for the given\nperiod of time. Once you confirm that all assets are served securely on your\nsite (i.e. HSTS didn’t break anything), it’s a good idea to increase this value\nso that infrequent visitors will be protected (31536000 seconds, i.e. 1 year,\nis common). Additionally, if you set the SECURE_HSTS_INCLUDE_SUBDOMAINS setting\nto True , SecurityMiddleware will add the includeSubDomains directive\nto the Strict-Transport-Security header. This is recommended (assuming all\nsubdomains are served exclusively using HTTPS), otherwise your site may still\nbe vulnerable via an insecure connection to a subdomain. If you wish to submit your site to the browser preload list , set the SECURE_HSTS_PRELOAD setting to True . That appends the preload directive to the Strict-Transport-Security header. Warning The HSTS policy applies to your entire domain, not just the URL of the\nresponse that you set the header on. Therefore, you should only use it if\nyour entire domain is served via HTTPS only. Browsers properly respecting the HSTS header will refuse to allow users to\nbypass warnings and connect to a site with an expired, self-signed, or\notherwise invalid SSL certificate. If you use HSTS, make sure your\ncertificates are in good shape and stay that way! Note If you are deployed behind a load-balancer or reverse-proxy server, and the Strict-Transport-Security header is not being added to your responses,\nit may be because Django doesn’t realize that it’s on a secure connection;\nyou may need to set the SECURE_PROXY_SSL_HEADER setting. Referrer Policy ¶ Browsers use the Referer header as a way to send information to a site\nabout how users got there. When a user clicks a link, the browser will send the\nfull URL of the linking page as the referrer. While this can be useful for some\npurposes – like figuring out who’s linking to your site – it also can cause\nprivacy concerns by informing one site that a user was visiting another site. Some browsers have the ability to accept hints about whether they should send\nthe HTTP Referer header when a user clicks a link; this hint is provided\nvia the Referrer-Policy header . This header can suggest any of three\nbehaviors to browsers: Full URL: send the entire URL in the Referer header. For example, if the\nuser is visiting https://example.com/page.html , the Referer header\nwould contain \"https://example.com/page.html\" . Origin only: send only the “origin” in the referrer. The origin consists of\nthe scheme, host and (optionally) port number. For example, if the user is\nvisiting https://example.com/page.html , the origin would be https://example.com/ . No referrer: do not send a Referer header at all. There are two types of conditions this header can tell a browser to watch out\nfor: Same-origin versus cross-origin: a link from https://example.com/1.html to https://example.com/2.html is same-origin. A link from https://example.com/page.html to https://not.example.com/page.html is\ncross-origin. Protocol downgrade: a downgrade occurs if the page containing the link is\nserved via HTTPS, but the page being linked to is not served via HTTPS. Warning When your site is served via HTTPS, Django’s CSRF protection system requires the Referer header to be present, so\ncompletely disabling the Referer header will interfere with CSRF\nprotection. To gain most of the benefits of disabling Referer headers\nwhile also keeping CSRF protection, consider enabling only same-origin\nreferrers. SecurityMiddleware can set the Referrer-Policy header for you, based on\nthe SECURE_REFERRER_POLICY setting (note spelling: browsers send a Referer header when a user clicks a link, but the header instructing a\nbrowser whether to do so is spelled Referrer-Policy ). The valid values for\nthis setting are: no-referrer Instructs the browser to send no referrer for links clicked on this site. no-referrer-when-downgrade Instructs the browser to send a full URL as the referrer, but only when no\nprotocol downgrade occurs. origin Instructs the browser to send only the origin, not the full URL, as the\nreferrer. origin-when-cross-origin Instructs the browser to send the full URL as the referrer for same-origin\nlinks, and only the origin for cross-origin links. same-origin Instructs the browser to send a full URL, but only for same-origin links. No\nreferrer will be sent for cross-origin links. strict-origin Instructs the browser to send only the origin, not the full URL, and to send\nno referrer when a protocol downgrade occurs. strict-origin-when-cross-origin Instructs the browser to send the full URL when the link is same-origin and\nno protocol downgrade occurs; send only the origin when the link is\ncross-origin and no protocol downgrade occurs; and no referrer when a\nprotocol downgrade occurs. unsafe-url Instructs the browser to always send the full URL as the referrer. Unknown Policy Values Where a policy value is unknown by a user agent, it is possible to\nspecify multiple policy values to provide a fallback. The last specified\nvalue that is understood takes precedence. To support this, an iterable or\ncomma-separated string can be used with SECURE_REFERRER_POLICY . Cross-Origin Opener Policy ¶ Some browsers have the ability to isolate top-level windows from other\ndocuments by putting them in a separate browsing context group based on the\nvalue of the Cross-Origin Opener Policy (COOP) header. If a document that\nis isolated in this way opens a cross-origin popup window, the popup’s window.opener property will be null . Isolating windows using COOP is a\ndefense-in-depth protection against cross-origin attacks, especially those like\nSpectre which allowed exfiltration of data loaded into a shared browsing\ncontext. SecurityMiddleware can set the Cross-Origin-Opener-Policy header for\nyou, based on the SECURE_CROSS_ORIGIN_OPENER_POLICY setting. The\nvalid values for this setting are: same-origin Isolates the browsing context exclusively to same-origin documents.\nCross-origin documents are not loaded in the same browsing context. This\nis the default and most secure option. same-origin-allow-popups Isolates the browsing context to same-origin documents or those which\neither don’t set COOP or which opt out of isolation by setting a COOP of unsafe-none . unsafe-none Allows the document to be added to its opener’s browsing context group\nunless the opener itself has a COOP of same-origin or same-origin-allow-popups . X-Content-Type-Options: nosniff ¶ Some browsers will try to guess the content types of the assets that they\nfetch, overriding the Content-Type header. While this can help display\nsites with improperly configured servers, it can also pose a security\nrisk. If your site serves user-uploaded files, a malicious user could upload a\nspecially-crafted file that would be interpreted as HTML or JavaScript by\nthe browser when you expected it to be something harmless. To prevent the browser from guessing the content type and force it to\nalways use the type provided in the Content-Type header, you can pass\nthe X-Content-Type-Options: nosniff header. SecurityMiddleware will\ndo this for all responses if the SECURE_CONTENT_TYPE_NOSNIFF setting\nis True . Note that in most deployment situations where Django isn’t involved in serving\nuser-uploaded files, this setting won’t help you. For example, if your MEDIA_URL is served directly by your front-end web server (nginx,\nApache, etc.) then you’d want to set this header there. On the other hand, if\nyou are using Django to do something like require authorization in order to\ndownload files and you cannot set the header using your web server, this\nsetting will be useful. SSL Redirect ¶ If your site offers both HTTP and HTTPS connections, most users will end up\nwith an unsecured connection by default. For best security, you should redirect\nall HTTP connections to HTTPS. If you set the SECURE_SSL_REDIRECT setting to True, SecurityMiddleware will permanently (HTTP 301) redirect all HTTP\nconnections to HTTPS. Note For performance reasons, it’s preferable to do these redirects outside of\nDjango, in a front-end load balancer or reverse-proxy server such as nginx . SECURE_SSL_REDIRECT is intended for the deployment\nsituations where this isn’t an option. If the SECURE_SSL_HOST setting has a value, all redirects will be\nsent to that host instead of the originally-requested host. If there are a few pages on your site that should be available over HTTP, and\nnot redirected to HTTPS, you can list regular expressions to match those URLs\nin the SECURE_REDIRECT_EXEMPT setting. Note If you are deployed behind a load-balancer or reverse-proxy server and\nDjango can’t seem to tell when a request actually is already secure, you\nmay need to set the SECURE_PROXY_SSL_HEADER setting. Session middleware ¶ class SessionMiddleware [source] ¶ Enables session support. See the session documentation . Site middleware ¶ class CurrentSiteMiddleware [source] ¶ Adds the site attribute representing the current site to every incoming HttpRequest object. See the sites documentation . Authentication middleware ¶ class AuthenticationMiddleware [source] ¶ Adds the user attribute, representing the currently-logged-in user, to\nevery incoming HttpRequest object. See Authentication in web requests . class LoginRequiredMiddleware [source] ¶ Subclass the middleware and override the following attributes and methods\nto customize behavior for unauthenticated requests. redirect_field_name ¶ Defaults to \"next\" . get_login_url () [source] ¶ Returns the URL that unauthenticated requests will be redirected to. This\nresult is either the login_url set on the login_required() decorator (if not None ), or settings.LOGIN_URL . get_redirect_field_name () [source] ¶ Returns the name of the query parameter that contains the URL the user\nshould be redirected to after a successful login. This result is either\nthe redirect_field_name set on the login_required() decorator (if not None ), or redirect_field_name . If None is returned, a query\nparameter won’t be added. New in Django 5.1. Redirects all unauthenticated requests to a login page, except for views\nexcluded with login_not_required() . The\nlogin page defaults to settings.LOGIN_URL , but can be\ncustomized. Enable this middleware by adding it to the MIDDLEWARE setting after AuthenticationMiddleware : MIDDLEWARE = [ \"...\" , \"django.contrib.auth.middleware.AuthenticationMiddleware\" , \"django.contrib.auth.middleware.LoginRequiredMiddleware\" , \"...\" , ] Make a view public, allowing unauthenticated requests, with login_not_required() . For example: from django.contrib.auth.decorators import login_not_required @login_not_required def contact_us ( request ): ... Customize the login URL or field name for authenticated views with the login_required() decorator to set login_url or redirect_field_name respectively. For example: from django.contrib.auth.decorators import login_required from django.utils.decorators import method_decorator from django.views.generic import View @login_required ( login_url = \"/books/login/\" , redirect_field_name = \"redirect_to\" ) def book_dashboard ( request ): ... @method_decorator ( login_required ( login_url = \"/books/login/\" , redirect_field_name = \"redirect_to\" ), name = \"dispatch\" , ) class BookMetrics ( View ): pass Ensure that your login view does not require a login. To prevent infinite redirects, ensure you have enabled unauthenticated requests to your login view. class RemoteUserMiddleware [source] ¶ Middleware for utilizing web server provided authentication. See How to authenticate using REMOTE_USER for usage details. class PersistentRemoteUserMiddleware [source] ¶ Middleware for utilizing web server provided authentication when enabled only\non the login page. See Using REMOTE_USER on login pages only for usage\ndetails. CSRF protection middleware ¶ class CsrfViewMiddleware [source] ¶ Adds protection against Cross Site Request Forgeries by adding hidden form\nfields to POST forms and checking requests for the correct value. See the Cross Site Request Forgery protection documentation . X-Frame-Options middleware ¶ class XFrameOptionsMiddleware [source] ¶ Simple clickjacking protection via the X-Frame-Options header . Middleware ordering ¶ Here are some hints about the ordering of various Django middleware classes: SecurityMiddleware It should go near the top of the list if you’re going to turn on the SSL\nredirect as that avoids running through a bunch of other unnecessary\nmiddleware. UpdateCacheMiddleware Before those that modify the Vary header ( SessionMiddleware , GZipMiddleware , LocaleMiddleware ). GZipMiddleware Before any middleware that may change or use the response body. After UpdateCacheMiddleware : Modifies Vary header. SessionMiddleware Before any middleware that may raise an exception to trigger an error\nview (such as PermissionDenied ) if you’re\nusing CSRF_USE_SESSIONS . After UpdateCacheMiddleware : Modifies Vary header. ConditionalGetMiddleware Before any middleware that may change the response (it sets the ETag header). After GZipMiddleware so it won’t calculate an ETag header on gzipped\ncontents. LocaleMiddleware One of the topmost, after SessionMiddleware (uses session data) and UpdateCacheMiddleware (modifies Vary header). CommonMiddleware Before any middleware that may change the response (it sets the Content-Length header). A middleware that appears before CommonMiddleware and changes the response must reset Content-Length . Close to the top: it redirects when APPEND_SLASH or PREPEND_WWW are set to True . After SessionMiddleware if you’re using CSRF_USE_SESSIONS . CsrfViewMiddleware Before any view middleware that assumes that CSRF attacks have been dealt\nwith. Before RemoteUserMiddleware , or any\nother authentication middleware that may perform a login, and hence rotate\nthe CSRF token, before calling down the middleware chain. After SessionMiddleware if you’re using CSRF_USE_SESSIONS . AuthenticationMiddleware After SessionMiddleware : uses session storage. LoginRequiredMiddleware New in Django 5.1. After AuthenticationMiddleware : uses user object. MessageMiddleware After SessionMiddleware : can use session-based storage. FetchFromCacheMiddleware After any middleware that modifies the Vary header: that header is used\nto pick a value for the cache hash-key. FlatpageFallbackMiddleware Should be near the bottom as it’s a last-resort type of middleware. RedirectFallbackMiddleware Should be near the bottom as it’s a last-resort type of middleware.", "keywords": ["max_random_bytes", "accept", "https://example.com/2.html", "@login_not_required", "hints", "comma", "type", "subdomain", "url", "httpresponse", "fallback", "def", "place", "popup", "secure_ssl_redirect", "settings", "classes", "dispatch", "perfectionists", "downgrade", "testing", "performance", "responses", "django.contrib.auth.decorators", "views", "encoding", "messages", "secure_ssl_host", "man", "django.views.decorators.common", "login", "way", "default", "option", "redirectfallbackmiddleware", "referer", "conditionalgetmiddleware", "techniques", "media_url", "referrer", "domain", "page", "etag", "vary", "bottom", "top", "users", "guide", "django.middleware.gzip", "self", "windows", "integer", "benefits", "8.8.1", "chain", "protections", "cross", "authenticationmiddleware", "forgeries", "x", "policy", "name", "pattern", "securitymiddleware", "header", "popups", "link", "secure_hsts_seconds", "currentsitemiddleware", "subclass", "defines", "get_login_url", "host", "includesubdomains", "storage", "mitm", "depth", "cache_middleware_seconds", "true", "*", "get_redirect_field_name", "locale", "htb", "requests", "search", "nosniff", "headers", "forms", "length", "frame", "key", "situation", "urlconf", "assets", "browser", "django.utils.decorators", "warnings", "login_required", "error", "compression", "handles", "httpresponsenotmodified", "cache", "gzip_page", "selection", "remoteusermiddleware", "setting", "agent", "order", "documentation", "-", "insecure", "transport", "secure_referrer_policy", "application", "port", "behavior", "system", "compresses", "preload", "risk", "files", "query", "following", "import", "spelling", "slash", "information", "result", "section", "idea", "authentication", "¶", "web", "server", "sites", "precedence", "example", "session", "ordering", "year", "django.middleware.security", "value", "conditional", "source", "gzip", "append_slash", "subdomains", "html", "ssl", "secure_content_type_nosniff", "exposure", "details", "proxy", "coop", "rfc", "form", "object", "httprequest", "warning", "sensitive_fbv", "hash", "one", "attributes", "privacy", "returns", "window", "concerns", "note", "period", "conditions", "level", "django", "message", "https://example.com/1.html", "parameter", "common", "csrf", "field", "contents", "http", "=", "objects", "enhancements", "fetchfromcachemiddleware", "language", "defaults", "scheme", "ability", "secure_proxy_ssl_header", "https://example.com/page.html", "strict", "connection", "match", "https", "time", "updatecachemiddleware", "brokenlinkemailsmiddleware", "exception", "forbids", "secure_cross_origin_opener_policy", "property", "middleware", "args", "balancer", "method_decorator", "site", "bytes", "philosophy", "agents", "load", "fields", "response_redirect_class", "login_url", "https://example.com/", "decorator", "methods", "browsers", "login_not_required", "paper", "apache", "documents", "none", "urls", "prepend_www", "allow", "protocol", "access", "javascript", "content", "authorization", "seconds", "end", "reporting", "deployment", "/books", "bunch", "request", "redirects", "attacks", "internationalization", "simple", "cycle", "engine", "flatpagefallbackmiddleware", "remote_user", "protection", "isolation", "data", "foo.com/bar/", "group", "resort", "options", "messagemiddleware", "bypass", "redirect_to", "reasons", "response", "kwargs", "login/", "contact_us", "directive", "pdf", "managers", "opener", "practice", "secure_redirect_exempt", "context", "breach", "visitors", "security", "@no_append_slash", "pages", "persistentremoteusermiddleware", "website", "indexer", "support", "localemiddleware", "types", "bookmetrics", "servers", "csrf_use_sessions", "conveniences", "hand", "values", "gzipmiddleware", "new", "redirect_field_name", "media", "nginx", "behaviors", "forgery", "disallowed_user_agents", "usage", "certificate", "no_append_slash", "sessionmiddleware", "certificates", "origin", "window.opener", "enables", "purposes", "modifies", "cookie-", "n’t", "class", "number", "components", "redirect", "defense", "return", "secure_hsts_preload", "connections", "attribute", "string", "spectre", "list", "hsts", "researchers", "shape", "view", "www", "body", "user", "secure_hsts_include_subdomains", "file", "operations", "permissiondenied", "emails", "get", "foo.com/bar", "loginrequiredmiddleware", "exfiltration", "situations", "hint", "notification", "technique", "expressions", "document", "referrers", "functionality", "reverse", "heal", "commonmiddleware", "expression", "hour", "links", "csrfviewmiddleware"], "type": "documentation"},
{"title": "Logging", "url": "https://docs.djangoproject.com/en/5.1/ref/logging/", "content": "Logging ¶ See also How to configure and use logging Django logging overview Django’s logging module extends Python’s builtin logging . Logging is configured as part of the general Django django.setup() function, so it’s always available unless explicitly disabled. Django’s default logging configuration ¶ By default, Django uses Python’s logging.config.dictConfig format . Default logging conditions ¶ The full set of default logging conditions are: When DEBUG is True : The django logger sends messages in the django hierarchy (except django.server ) at the INFO level or higher to the console. When DEBUG is False : The django logger sends messages in the django hierarchy (except django.server )  with ERROR or CRITICAL level to AdminEmailHandler . Independently of the value of DEBUG : The django.server logger sends messages at the INFO level\nor higher to the console. All loggers except django.server propagate logging to their\nparents, up to the root django logger. The console and mail_admins handlers are attached to the root logger to provide the behavior described\nabove. Python’s own defaults send records of level WARNING and higher\nto the console. Default logging definition ¶ Django’s default logging configuration inherits Python’s defaults. It’s\navailable as django.utils.log.DEFAULT_LOGGING and defined in django/utils/log.py : { \"version\" : 1 , \"disable_existing_loggers\" : False , \"filters\" : { \"require_debug_false\" : { \"()\" : \"django.utils.log.RequireDebugFalse\" , }, \"require_debug_true\" : { \"()\" : \"django.utils.log.RequireDebugTrue\" , }, }, \"formatters\" : { \"django.server\" : { \"()\" : \"django.utils.log.ServerFormatter\" , \"format\" : \"[ {server_time} ] {message} \" , \"style\" : \"{\" , } }, \"handlers\" : { \"console\" : { \"level\" : \"INFO\" , \"filters\" : [ \"require_debug_true\" ], \"class\" : \"logging.StreamHandler\" , }, \"django.server\" : { \"level\" : \"INFO\" , \"class\" : \"logging.StreamHandler\" , \"formatter\" : \"django.server\" , }, \"mail_admins\" : { \"level\" : \"ERROR\" , \"filters\" : [ \"require_debug_false\" ], \"class\" : \"django.utils.log.AdminEmailHandler\" , }, }, \"loggers\" : { \"django\" : { \"handlers\" : [ \"console\" , \"mail_admins\" ], \"level\" : \"INFO\" , }, \"django.server\" : { \"handlers\" : [ \"django.server\" ], \"level\" : \"INFO\" , \"propagate\" : False , }, }, } See Configuring logging on how to complement or replace this default\nlogging configuration. Django logging extensions ¶ Django provides a number of utilities to handle the particular requirements of\nlogging in a web server environment. Loggers ¶ Django provides several built-in loggers. django ¶ The parent logger for messages in the django named logger hierarchy . Django does not post messages using this name.\nInstead, it uses one of the loggers below. django.request ¶ Log messages related to the handling of requests. 5XX responses are\nraised as ERROR messages; 4XX responses are raised as WARNING messages. Requests that are logged to the django.security logger aren’t\nlogged to django.request . Messages to this logger have the following extra context: status_code : The HTTP response code associated with the request. request : The request object that generated the logging message. django.server ¶ Log messages related to the handling of requests received by the server invoked\nby the runserver command. HTTP 5XX responses are logged as ERROR messages, 4XX responses are logged as WARNING messages, and everything else\nis logged as INFO . Messages to this logger have the following extra context: status_code : The HTTP response code associated with the request. request : The request object (a socket.socket ) that generated the logging message. django.template ¶ Log messages related to the rendering of templates. Missing context variables are logged as DEBUG messages. django.db.backends ¶ Messages relating to the interaction of code with the database. For example,\nevery application-level SQL statement executed by a request is logged at the DEBUG level to this logger. Messages to this logger have the following extra context: duration : The time taken to execute the SQL statement. sql : The SQL statement that was executed. params : The parameters that were used in the SQL call. alias : The alias of the database used in the SQL call. For performance reasons, SQL logging is only enabled when settings.DEBUG is set to True , regardless of the logging\nlevel or handlers that are installed. This logging does not include framework-level initialization (e.g. SET TIMEZONE ). Turn on query logging in your database if you wish to view\nall database queries. django.utils.autoreload ¶ Log messages related to automatic code reloading during the execution of the\nDjango development server. This logger generates an INFO message upon\ndetecting a modification in a source code file and may produce WARNING messages during filesystem inspection and event subscription processes. django.contrib.auth ¶ New in Django 4.2.16. Log messages related to django.contrib.auth , particularly ERROR messages\nare generated when a PasswordResetForm is\nsuccessfully submitted but the password reset email cannot be delivered due to\na mail sending exception. django.contrib.gis ¶ Log messages related to GeoDjango at various points: during the\nloading of external GeoSpatial libraries (GEOS, GDAL, etc.) and when reporting\nerrors. Each ERROR log record includes the caught exception and relevant\ncontextual data. django.dispatch ¶ This logger is used in Signals , specifically within the Signal class, to report issues when dispatching a\nsignal to a connected receiver. The ERROR log record includes the caught\nexception as exc_info and adds the following extra context: receiver : The name of the receiver. err : The exception that occurred when calling the receiver. django.security.* ¶ The security loggers will receive messages on any occurrence of SuspiciousOperation and other security-related\nerrors. There is a sub-logger for each subtype of security error, including all SuspiciousOperation s. The level of the log event depends on where the\nexception is handled.  Most occurrences are logged as a warning, while\nany SuspiciousOperation that reaches the WSGI handler will be logged as an\nerror. For example, when an HTTP Host header is included in a request from\na client that does not match ALLOWED_HOSTS , Django will return a 400\nresponse, and an error message will be logged to the django.security.DisallowedHost logger. These log events will reach the django logger by default, which mails error\nevents to admins when DEBUG=False . Requests resulting in a 400 response due\nto a SuspiciousOperation will not be logged to the django.request logger, but only to the django.security logger. To silence a particular type of SuspiciousOperation , you can override that\nspecific logger following this example: LOGGING = { # ... \"handlers\" : { \"null\" : { \"class\" : \"logging.NullHandler\" , }, }, \"loggers\" : { \"django.security.DisallowedHost\" : { \"handlers\" : [ \"null\" ], \"propagate\" : False , }, }, # ... } Other django.security loggers not based on SuspiciousOperation are: django.security.csrf : For CSRF failures . django.db.backends.schema ¶ Logs the SQL queries that are executed during schema changes to the database by\nthe migrations framework . Note that it won’t log the\nqueries executed by RunPython .\nMessages to this logger have params and sql in their extra context (but\nunlike django.db.backends , not duration). The values have the same meaning\nas explained in django.db.backends . django.contrib.sessions ¶ Log messages related to the session framework . Non-fatal errors occurring when using the django.contrib.sessions.backends.cached_db.SessionStore engine are\nlogged as ERROR messages with the corresponding traceback. Handlers ¶ Django provides one log handler in addition to those provided by the Python logging module . class AdminEmailHandler ( include_html = False , email_backend = None , reporter_class = None ) [source] ¶ This handler sends an email to the site ADMINS for each log\nmessage it receives. If the log record contains a request attribute, the full details\nof the request will be included in the email. The email subject will\ninclude the phrase “internal IP” if the client’s IP address is in the INTERNAL_IPS setting; if not, it will include “EXTERNAL IP”. If the log record contains stack trace information, that stack\ntrace will be included in the email. The include_html argument of AdminEmailHandler is used to\ncontrol whether the traceback email includes an HTML attachment\ncontaining the full content of the debug web page that would have been\nproduced if DEBUG were True . To set this value in your\nconfiguration, include it in the handler definition for django.utils.log.AdminEmailHandler , like this: \"handlers\" : { \"mail_admins\" : { \"level\" : \"ERROR\" , \"class\" : \"django.utils.log.AdminEmailHandler\" , \"include_html\" : True , }, } Be aware of the security implications of logging when using the AdminEmailHandler . By setting the email_backend argument of AdminEmailHandler , the email backend that is being used by the\nhandler can be overridden, like this: \"handlers\" : { \"mail_admins\" : { \"level\" : \"ERROR\" , \"class\" : \"django.utils.log.AdminEmailHandler\" , \"email_backend\" : \"django.core.mail.backends.filebased.EmailBackend\" , }, } By default, an instance of the email backend specified in EMAIL_BACKEND will be used. The reporter_class argument of AdminEmailHandler allows providing\nan django.views.debug.ExceptionReporter subclass to customize the\ntraceback text sent in the email body. You provide a string import path to\nthe class you wish to use, like this: \"handlers\" : { \"mail_admins\" : { \"level\" : \"ERROR\" , \"class\" : \"django.utils.log.AdminEmailHandler\" , \"include_html\" : True , \"reporter_class\" : \"somepackage.error_reporter.CustomErrorReporter\" , }, } send_mail ( subject , message , * args , ** kwargs ) [source] ¶ Sends emails to admin users. To customize this behavior, you can\nsubclass the AdminEmailHandler class and\noverride this method. Filters ¶ Django provides some log filters in addition to those provided by the Python\nlogging module. class CallbackFilter ( callback ) [source] ¶ This filter accepts a callback function (which should accept a single\nargument, the record to be logged), and calls it for each record that\npasses through the filter. Handling of that record will not proceed if the\ncallback returns False. For instance, to filter out UnreadablePostError (raised when a user cancels an upload) from the admin emails, you would\ncreate a filter function: from django.http import UnreadablePostError def skip_unreadable_post ( record ): if record . exc_info : exc_type , exc_value = record . exc_info [: 2 ] if isinstance ( exc_value , UnreadablePostError ): return False return True and then add it to your logging config: LOGGING = { # ... \"filters\" : { \"skip_unreadable_posts\" : { \"()\" : \"django.utils.log.CallbackFilter\" , \"callback\" : skip_unreadable_post , }, }, \"handlers\" : { \"mail_admins\" : { \"level\" : \"ERROR\" , \"filters\" : [ \"skip_unreadable_posts\" ], \"class\" : \"django.utils.log.AdminEmailHandler\" , }, }, # ... } class RequireDebugFalse [source] ¶ This filter will only pass on records when settings.DEBUG is False. This filter is used as follows in the default LOGGING configuration to ensure that the AdminEmailHandler only sends\nerror emails to admins when DEBUG is False : LOGGING = { # ... \"filters\" : { \"require_debug_false\" : { \"()\" : \"django.utils.log.RequireDebugFalse\" , }, }, \"handlers\" : { \"mail_admins\" : { \"level\" : \"ERROR\" , \"filters\" : [ \"require_debug_false\" ], \"class\" : \"django.utils.log.AdminEmailHandler\" , }, }, # ... } class RequireDebugTrue [source] ¶ This filter is similar to RequireDebugFalse , except that records are\npassed only when DEBUG is True .", "keywords": ["reloading", "log", "django.server", "[:", "error", "type", "logger", "debug", "migrations", "rendering", "statement", "setting", "handling", "changes", "templates", "suspiciousoperation", "django.contrib.sessions", "signal", "-", "development", "stack", "subject", "style", "filter", "exc_value", "critical", "settings", "false", "geos", "time", "require_debug_true", "application", "exception", "overview", "external", "exc_type", "passwordresetform", "django.contrib.gis", "info", "records", "method", "django.security", "disallowedhost", "points", "args", "builtin", "behavior", "utils", "upload", "values", "site", "performance", "log.py", "responses", "query", "sub", "new", "messages", "import", "emails", "record", "information", "meaning", "processes", "requiredebugfalse", "runpython", "occurrence", "#", "propagate", "¶", "default", "filters", "django.db.backends.schema", "formatter", "ip", "django.setup", "web", "django.template", "admins", "definition", "timezone", "client", "skip_unreadable_posts", "mail_admins", "requirements", "geodjango", "parents", "exc_info", "server", "socket.socket", "none", "page", "subtype", "variables", "format", "trace", "callback", "disable_existing_loggers", "command", "formatters", "isinstance", "example", "callbackfilter", "skip_unreadable_post", "runserver", "reset", "session", "users", "event", "email", "value", "content", "backend", "handlers", "source", "requiredebugtrue", "argument", "class", "number", "request", "version", "filesystem", "receiver", "serverformatter", "nullhandler", "return", "html", "engine", "config", "attribute", "function", "string", "details", "send_mail", "loading", "data", "duration", "attachment", "include_html", "django.security.csrf", "name", "object", "body", "root", "environment", "gdal", "emailbackend", "user", "warning", "header", "implications", "part", "file", "queries", "sessionstore", "hierarchy", "email_backend", "returns", "django.contrib.sessions.backends.cached_db", "params", "python", "geospatial", "parent", "interaction", "errors", "addition", "reasons", "extensions", "logging", "logs", "response", "loggers", "handler", "initialization", "traceback", "execution", "streamhandler", "password", "reporter_class", "customerrorreporter", "kwargs", "configuration", "subclass", "sql", "host", "failures", "events", "exceptionreporter", "occurrences", "conditions", "level", "signals", "django", "phrase", "path", "modification", "message", "address", "mail", "true", "s.", "*", "set", "django.contrib.auth", "server_time", "framework", "require_debug_false", "module", "csrf", "4.2.16", "django.db.backends", "text", "requests", "http", "database", "context", "somepackage.error_reporter", "libraries", "subscription", "inspection", "adminemailhandler", "instance", "utilities", "status_code", "code", "security", "=", "console", "schema", "django.views.debug", "wsgi", "django.utils.log", "parameters", "internal_ips", "django.utils.autoreload", "defaults", "alias", "issues", "call", "unreadableposterror", "configuring"], "type": "documentation"},
{"title": "Form and field validation", "url": "https://docs.djangoproject.com/en/5.1/ref/forms/validation/", "content": "Form and field validation ¶ Form validation happens when the data is cleaned. If you want to customize\nthis process, there are various places to make changes, each one serving a\ndifferent purpose. Three types of cleaning methods are run during form\nprocessing. These are normally executed when you call the is_valid() method on a form. There are other things that can also trigger cleaning and\nvalidation (accessing the errors attribute or calling full_clean() directly), but normally they won’t be needed. In general, any cleaning method can raise ValidationError if there is a\nproblem with the data it is processing, passing the relevant information to\nthe ValidationError constructor. See below for the best practice in raising ValidationError . If no ValidationError is raised, the method should return the cleaned (normalized) data as a Python\nobject. Most validation can be done using validators - helpers that can be reused.\nValidators are functions (or callables) that take a single argument and raise ValidationError on invalid input. Validators are run after the field’s to_python and validate methods have been called. Validation of a form is split into several steps, which can be customized or\noverridden: The to_python() method on a Field is the first step in every\nvalidation. It coerces the value to a correct datatype and raises ValidationError if that is not possible. This method accepts the raw\nvalue from the widget and returns the converted value. For example, a FloatField will turn the data into a Python float or raise a ValidationError . The validate() method on a Field handles field-specific validation\nthat is not suitable for a validator. It takes a value that has been\ncoerced to a correct datatype and raises ValidationError on any error.\nThis method does not return anything and shouldn’t alter the value. You\nshould override it to handle validation logic that you can’t or don’t\nwant to put in a validator. The run_validators() method on a Field runs all of the field’s\nvalidators and aggregates all the errors into a single ValidationError . You shouldn’t need to override this method. The clean() method on a Field subclass is responsible for running to_python() , validate() , and run_validators() in the correct\norder and propagating their errors. If, at any time, any of the methods\nraise ValidationError , the validation stops and that error is raised.\nThis method returns the clean data, which is then inserted into the cleaned_data dictionary of the form. The clean_<fieldname>() method is called on a form subclass – where <fieldname> is replaced with the name of the form field attribute.\nThis method does any cleaning that is specific to that particular\nattribute, unrelated to the type of field that it is. This method is not\npassed any parameters. You will need to look up the value of the field\nin self.cleaned_data and remember that it will be a Python object\nat this point, not the original string submitted in the form (it will be\nin cleaned_data because the general field clean() method, above,\nhas already cleaned the data once). For example, if you wanted to validate that the contents of a CharField called serialnumber was unique, clean_serialnumber() would be the right place to do this. You don’t\nneed a specific field (it’s a CharField ), but you want a\nformfield-specific piece of validation and, possibly, cleaning/normalizing\nthe data. The return value of this method replaces the existing value in cleaned_data , so it must be the field’s value from cleaned_data (even\nif this method didn’t change it) or a new cleaned value. The form subclass’s clean() method can perform validation that requires\naccess to multiple form fields. This is where you might put in checks such as\n“if field A is supplied, field B must contain a valid email address”.\nThis method can return a completely different dictionary if it wishes, which\nwill be used as the cleaned_data . Since the field validation methods have been run by the time clean() is\ncalled, you also have access to the form’s errors attribute which\ncontains all the errors raised by cleaning of individual fields. Note that any errors raised by your Form.clean() override will not\nbe associated with any field in particular. They go into a special\n“field” (called __all__ ), which you can access via the non_field_errors() method if you need to. If you\nwant to attach errors to a specific field in the form, you need to call add_error() . Also note that there are special considerations when overriding\nthe clean() method of a ModelForm subclass. (see the ModelForm documentation for more information) These methods are run in the order given above, one field at a time.  That is,\nfor each field in the form (in the order they are declared in the form\ndefinition), the Field.clean() method (or its override) is run, then clean_<fieldname>() . Finally, once those two methods are run for every\nfield, the Form.clean() method, or its override, is executed whether\nor not the previous methods have raised errors. Examples of each of these methods are provided below. As mentioned, any of these methods can raise a ValidationError . For any\nfield, if the Field.clean() method raises a ValidationError , any\nfield-specific cleaning method is not called. However, the cleaning methods\nfor all remaining fields are still executed. Raising ValidationError ¶ In order to make error messages flexible and easy to override, consider the\nfollowing guidelines: Provide a descriptive error code to the constructor: # Good ValidationError ( _ ( \"Invalid value\" ), code = \"invalid\" ) # Bad ValidationError ( _ ( \"Invalid value\" )) Don’t coerce variables into the message; use placeholders and the params argument of the constructor: # Good ValidationError ( _ ( \"Invalid value: %(value)s \" ), params = { \"value\" : \"42\" }, ) # Bad ValidationError ( _ ( \"Invalid value: %s \" ) % value ) Use mapping keys instead of positional formatting. This enables putting\nthe variables in any order or omitting them altogether when rewriting the\nmessage: # Good ValidationError ( _ ( \"Invalid value: %(value)s \" ), params = { \"value\" : \"42\" }, ) # Bad ValidationError ( _ ( \"Invalid value: %s \" ), params = ( \"42\" ,), ) Wrap the message with gettext to enable translation: # Good ValidationError ( _ ( \"Invalid value\" )) # Bad ValidationError ( \"Invalid value\" ) Putting it all together: raise ValidationError ( _ ( \"Invalid value: %(value)s \" ), code = \"invalid\" , params = { \"value\" : \"42\" }, ) Following these guidelines is particularly necessary if you write reusable\nforms, form fields, and model fields. While not recommended, if you are at the end of the validation chain\n(i.e. your form clean() method) and you know you will never need\nto override your error message you can still opt for the less verbose: ValidationError ( _ ( \"Invalid value: %s \" ) % value ) The Form.errors.as_data() and Form.errors.as_json() methods\ngreatly benefit from fully featured ValidationError s (with a code name\nand a params dictionary). Raising multiple errors ¶ If you detect multiple errors during a cleaning method and wish to signal all\nof them to the form submitter, it is possible to pass a list of errors to the ValidationError constructor. As above, it is recommended to pass a list of ValidationError instances\nwith code s and params but a list of strings will also work: # Good raise ValidationError ( [ ValidationError ( _ ( \"Error 1\" ), code = \"error1\" ), ValidationError ( _ ( \"Error 2\" ), code = \"error2\" ), ] ) # Bad raise ValidationError ( [ _ ( \"Error 1\" ), _ ( \"Error 2\" ), ] ) Using validation in practice ¶ The previous sections explained how validation works in general for forms.\nSince it can sometimes be easier to put things into place by seeing each\nfeature in use, here are a series of small examples that use each of the\nprevious features. Using validators ¶ Django’s form (and model) fields support use of utility functions and classes\nknown as validators. A validator is a callable object or function that takes a\nvalue and returns nothing if the value is valid or raises a ValidationError if not. These can be passed to a\nfield’s constructor, via the field’s validators argument, or defined on the Field class itself with the default_validators attribute. Validators can be used to validate values inside the field, let’s have a look\nat Django’s SlugField : from django.core import validators from django.forms import CharField class SlugField ( CharField ): default_validators = [ validators . validate_slug ] As you can see, SlugField is a CharField with a customized validator\nthat validates that submitted text obeys to some character rules. This can also\nbe done on field definition so: slug = forms . SlugField () is equivalent to: slug = forms . CharField ( validators = [ validators . validate_slug ]) Common cases such as validating against an email or a regular expression can be\nhandled using existing validator classes available in Django. For example, validators.validate_slug is an instance of\na RegexValidator constructed with the first\nargument being the pattern: ^[-a-zA-Z0-9_]+\\Z . See the section on writing validators to see a list of what is already\navailable and for an example of how to write a validator. Form field default cleaning ¶ Let’s first create a custom form field that validates its input is a string\ncontaining comma-separated email addresses. The full class looks like this: from django import forms from django.core.validators import validate_email class MultiEmailField ( forms . Field ): def to_python ( self , value ): \"\"\"Normalize data to a list of strings.\"\"\" # Return an empty list if no input was given. if not value : return [] return value . split ( \",\" ) def validate ( self , value ): \"\"\"Check if value consists only of valid emails.\"\"\" # Use the parent's handling of required fields, etc. super () . validate ( value ) for email in value : validate_email ( email ) Every form that uses this field will have these methods run before anything\nelse can be done with the field’s data. This is cleaning that is specific to\nthis type of field, regardless of how it is subsequently used. Let’s create a ContactForm to demonstrate how you’d use this field: class ContactForm ( forms . Form ): subject = forms . CharField ( max_length = 100 ) message = forms . CharField () sender = forms . EmailField () recipients = MultiEmailField () cc_myself = forms . BooleanField ( required = False ) Use MultiEmailField like any other form field. When the is_valid() method is called on the form, the MultiEmailField.clean() method will be\nrun as part of the cleaning process and it will, in turn, call the custom to_python() and validate() methods. Cleaning a specific field attribute ¶ Continuing on from the previous example, suppose that in our ContactForm ,\nwe want to make sure that the recipients field always contains the address \"fred@example.com\" . This is validation that is specific to our form, so we\ndon’t want to put it into the general MultiEmailField class. Instead, we\nwrite a cleaning method that operates on the recipients field, like so: from django import forms from django.core.exceptions import ValidationError class ContactForm ( forms . Form ): # Everything as before. ... def clean_recipients ( self ): data = self . cleaned_data [ \"recipients\" ] if \"fred@example.com\" not in data : raise ValidationError ( \"You have forgotten about Fred!\" ) # Always return a value to use as the new cleaned data, even if # this method didn't change it. return data Cleaning and validating fields that depend on each other ¶ Suppose we add another requirement to our contact form: if the cc_myself field is True , the subject must contain the word \"help\" . We are\nperforming validation on more than one field at a time, so the form’s clean() method is a good spot to do this. Notice that we are\ntalking about the clean() method on the form here, whereas earlier we were\nwriting a clean() method on a field. It’s important to keep the field and\nform difference clear when working out where to validate things. Fields are\nsingle data points, forms are a collection of fields. By the time the form’s clean() method is called, all the individual field\nclean methods will have been run (the previous two sections), so self.cleaned_data will be populated with any data that has survived so\nfar. So you also need to remember to allow for the fact that the fields you\nare wanting to validate might not have survived the initial individual field\nchecks. There are two ways to report any errors from this step. Probably the most\ncommon method is to display the error at the top of the form. To create such\nan error, you can raise a ValidationError from the clean() method. For\nexample: from django import forms from django.core.exceptions import ValidationError class ContactForm ( forms . Form ): # Everything as before. ... def clean ( self ): cleaned_data = super () . clean () cc_myself = cleaned_data . get ( \"cc_myself\" ) subject = cleaned_data . get ( \"subject\" ) if cc_myself and subject : # Only do something if both fields are valid so far. if \"help\" not in subject : raise ValidationError ( \"Did not send for 'help' in the subject despite CC'ing yourself.\" ) In this code, if the validation error is raised, the form will display an\nerror message at the top of the form (normally) describing the problem. Such\nerrors are non-field errors, which are displayed in the template with {{ form.non_field_errors }} . The call to super().clean() in the example code ensures that any validation\nlogic in parent classes is maintained. If your form inherits another that\ndoesn’t return a cleaned_data dictionary in its clean() method (doing\nso is optional), then don’t assign cleaned_data to the result of the super() call and use self.cleaned_data instead: def clean ( self ): super () . clean () cc_myself = self . cleaned_data . get ( \"cc_myself\" ) ... The second approach for reporting validation errors might involve assigning the\nerror message to one of the fields. In this case, let’s assign an error message\nto both the “subject” and “cc_myself” rows in the form display. Be careful when\ndoing this in practice, since it can lead to confusing form output. We’re\nshowing what is possible here and leaving it up to you and your designers to\nwork out what works effectively in your particular situation. Our new code\n(replacing the previous sample) looks like this: from django import forms class ContactForm ( forms . Form ): # Everything as before. ... def clean ( self ): cleaned_data = super () . clean () cc_myself = cleaned_data . get ( \"cc_myself\" ) subject = cleaned_data . get ( \"subject\" ) if cc_myself and subject and \"help\" not in subject : msg = \"Must put 'help' in subject when cc'ing yourself.\" self . add_error ( \"cc_myself\" , msg ) self . add_error ( \"subject\" , msg ) The second argument of add_error() can be a string, or preferably an\ninstance of ValidationError . See Raising ValidationError for more\ndetails. Note that add_error() automatically removes the field from cleaned_data .", "keywords": ["dictionary", "addresses", "django.core.exceptions", "error", "comma", "type", "template", "support", "emailfield", "types", "translation", "helpers", "%", "rows", "handling", "order", "changes", "documentation", "-", "def", "form.non_field_errors", "place", "rules", "subject", "validate", "recipients", "booleanfield", "places", "help", "validators.validate_slug", "time", "clean_serialnumber", "classes", "_", "method", "submitter", "points", "requirement", "default_validators", "9_]+\\z", "values", "^[-a", "non_field_errors", "contact", "coerce", "cases", "use", "utility", "import", "problem", "messages", "clean", "callables", "validator", "information", "super", "obeys", "difference", "ways", "sample", "guidelines", "#", "result", "point", "output", "fields", "section", "error1", "¶", "default", "super().clean", "piece", "z0", "custom", "methods", "definition", "input", "sender", "contactform", "floatfield", "model", "django.forms", "max_length", "processing", "validationerror", "datatype", "character", "variables", "process", "access", "suppose", "word", "top", "full_clean", "example", "error2", "checks", "n’t", "considerations", "formatting", "email", "functions", "value", "validators", "self", "value)s", "end", "form.errors.as_json", "case", "argument", "designers", "class", "run_validators", "cleaning", "django.core.validators", "return", "b", "chain", "mapping", "attribute", "function", "examples", "string", "things", "list", "series", "details", "slug", "cc_myself", "gettext", "a", "steps", "data", "self.cleaned_data", "widget", "override", "form", "field.clean", "slugfield", "name", "object", "pattern", "part", "one", "serialnumber", "emails", "errors", "python", "params", "charfield", "parent", "regexvalidator", "verbose", "to_python", "django.core", "constructor", "s", "fieldname", "keys", "subclass", "fred", "sections", "validate_email", "form.clean", "django", "spot", "form.errors.as_data", "message", "address", "bad", "look", "fact", "normalize", "display", "float", "validation", "placeholders", "text", "approach", "field", "is_valid", "practice", "contents", "strings", "good", "cleaned_data", "modelform", "turn", "expression", "purpose", "logic", "forms", "instance", "features", "code", "=", "add_error", "feature", "za", "clean_recipients", "collection", "parameters", "situation", "step", "call", "multiemailfield"], "type": "documentation"},
{"title": "Widgets", "url": "https://docs.djangoproject.com/en/5.1/ref/forms/widgets/", "content": "Widgets ¶ A widget is Django’s representation of an HTML input element. The widget\nhandles the rendering of the HTML, and the extraction of data from a GET/POST\ndictionary that corresponds to the widget. The HTML generated by the built-in widgets uses HTML5 syntax, targeting <!DOCTYPE html> . For example, it uses boolean attributes such as checked rather than the XHTML style of checked='checked' . Tip Widgets should not be confused with the form fields .\nForm fields deal with the logic of input validation and are used directly\nin templates. Widgets deal with rendering of HTML form input elements on\nthe web page and extraction of raw submitted data. However, widgets do\nneed to be assigned to form fields. Specifying widgets ¶ Whenever you specify a field on a form, Django will use a default widget\nthat is appropriate to the type of data that is to be displayed. To find\nwhich widget is used on which field, see the documentation about Built-in Field classes . However, if you want to use a different widget for a field, you can\nuse the widget argument on the field definition. For example: from django import forms class CommentForm ( forms . Form ): name = forms . CharField () url = forms . URLField () comment = forms . CharField ( widget = forms . Textarea ) This would specify a form with a comment that uses a larger Textarea widget, rather than the default TextInput widget. Setting arguments for widgets ¶ Many widgets have optional extra arguments; they can be set when defining the\nwidget on the field. In the following example, the years attribute is set for a SelectDateWidget : from django import forms BIRTH_YEAR_CHOICES = [ \"1980\" , \"1981\" , \"1982\" ] FAVORITE_COLORS_CHOICES = { \"blue\" : \"Blue\" , \"green\" : \"Green\" , \"black\" : \"Black\" , } class SimpleForm ( forms . Form ): birth_year = forms . DateField ( widget = forms . SelectDateWidget ( years = BIRTH_YEAR_CHOICES ) ) favorite_colors = forms . MultipleChoiceField ( required = False , widget = forms . CheckboxSelectMultiple , choices = FAVORITE_COLORS_CHOICES , ) See the Built-in widgets for more information about which widgets\nare available and which arguments they accept. Widgets inheriting from the Select widget ¶ Widgets inheriting from the Select widget deal with choices. They\npresent the user with a list of options to choose from. The different widgets\npresent this choice differently; the Select widget itself uses a <select> HTML list representation, while RadioSelect uses radio\nbuttons. Select widgets are used by default on ChoiceField fields. The\nchoices displayed on the widget are inherited from the ChoiceField and\nchanging ChoiceField.choices will update Select.choices . For\nexample: >>> from django import forms >>> CHOICES = { \"1\" : \"First\" , \"2\" : \"Second\" } >>> choice_field = forms . ChoiceField ( widget = forms . RadioSelect , choices = CHOICES ) >>> choice_field . choices [('1', 'First'), ('2', 'Second')] >>> choice_field . widget . choices [('1', 'First'), ('2', 'Second')] >>> choice_field . widget . choices = [] >>> choice_field . choices = [( \"1\" , \"First and only\" )] >>> choice_field . widget . choices [('1', 'First and only')] Widgets which offer a choices attribute can however be used\nwith fields which are not based on choice – such as a CharField –\nbut it is recommended to use a ChoiceField -based field when the\nchoices are inherent to the model and not just the representational widget. Customizing widget instances ¶ When Django renders a widget as HTML, it only renders very minimal markup -\nDjango doesn’t add class names, or any other widget-specific attributes. This\nmeans, for example, that all TextInput widgets will appear the same\non your web pages. There are two ways to customize widgets: per widget instance and per widget class . Styling widget instances ¶ If you want to make one widget instance look different from another, you will\nneed to specify additional attributes at the time when the widget object is\ninstantiated and assigned to a form field (and perhaps add some rules to your\nCSS files). For example, take the following form: from django import forms class CommentForm ( forms . Form ): name = forms . CharField () url = forms . URLField () comment = forms . CharField () This form will include TextInput widgets for the name and comment\nfields, and a URLInput widget for the url field. Each has default\nrendering - no CSS class, no extra attributes: >>> f = CommentForm ( auto_id = False ) >>> print ( f ) <div>Name:<input type=\"text\" name=\"name\" required></div> <div>Url:<input type=\"url\" name=\"url\" required></div> <div>Comment:<input type=\"text\" name=\"comment\" required></div> On a real web page, you probably want to customize this. You might want a\nlarger input element for the comment, and you might want the ‘name’ widget to\nhave some special CSS class. It is also possible to specify the ‘type’\nattribute to use a different HTML5 input type. To do this, you use the Widget.attrs argument when creating the widget: class CommentForm ( forms . Form ): name = forms . CharField ( widget = forms . TextInput ( attrs = { \"class\" : \"special\" })) url = forms . URLField () comment = forms . CharField ( widget = forms . TextInput ( attrs = { \"size\" : \"40\" })) You can also modify a widget in the form definition: class CommentForm ( forms . Form ): name = forms . CharField () url = forms . URLField () comment = forms . CharField () name . widget . attrs . update ({ \"class\" : \"special\" }) comment . widget . attrs . update ( size = \"40\" ) Or if the field isn’t declared directly on the form (such as model form fields),\nyou can use the Form.fields attribute: class CommentForm ( forms . ModelForm ): def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . fields [ \"name\" ] . widget . attrs . update ({ \"class\" : \"special\" }) self . fields [ \"comment\" ] . widget . attrs . update ( size = \"40\" ) Django will then include the extra attributes in the rendered output: >>> f = CommentForm ( auto_id = False ) >>> print ( f ) <div>Name:<input type=\"text\" name=\"name\" class=\"special\" required></div> <div>Url:<input type=\"url\" name=\"url\" required></div> <div>Comment:<input type=\"text\" name=\"comment\" size=\"40\" required></div> You can also set the HTML id using attrs . See BoundField.id_for_label for an example. Styling widget classes ¶ With widgets, it is possible to add assets ( css and javascript )\nand more deeply customize their appearance and behavior. In a nutshell, you will need to subclass the widget and either define a “Media” inner class or create a “media” property . These methods involve somewhat advanced Python programming and are described in\ndetail in the Form Assets topic guide. Base widget classes ¶ Base widget classes Widget and MultiWidget are subclassed by\nall the built-in widgets and may serve as a\nfoundation for custom widgets. Widget ¶ class Widget ( attrs = None ) [source] ¶ This abstract class cannot be rendered, but provides the basic attribute attrs .  You may also implement or override the render() method on custom widgets. attrs ¶ A dictionary containing HTML attributes to be set on the rendered\nwidget. >>> from django import forms >>> name = forms . TextInput ( attrs = { \"size\" : 10 , \"title\" : \"Your name\" }) >>> name . render ( \"name\" , \"A name\" ) '<input title=\"Your name\" type=\"text\" name=\"name\" value=\"A name\" size=\"10\">' If you assign a value of True or False to an attribute,\nit will be rendered as an HTML5 boolean attribute: >>> name = forms . TextInput ( attrs = { \"required\" : True }) >>> name . render ( \"name\" , \"A name\" ) '<input name=\"name\" type=\"text\" value=\"A name\" required>' >>> >>> name = forms . TextInput ( attrs = { \"required\" : False }) >>> name . render ( \"name\" , \"A name\" ) '<input name=\"name\" type=\"text\" value=\"A name\">' supports_microseconds ¶ An attribute that defaults to True . If set to False , the\nmicroseconds part of datetime and time values will be set to 0 . format_value ( value ) [source] ¶ Cleans and returns a value for use in the widget template. value isn’t guaranteed to be valid input, therefore subclass implementations\nshould program defensively. get_context ( name , value , attrs ) [source] ¶ Returns a dictionary of values to use when rendering the widget\ntemplate. By default, the dictionary contains a single key, 'widget' , which is a dictionary representation of the widget\ncontaining the following keys: 'name' : The name of the field from the name argument. 'is_hidden' : A boolean indicating whether or not this widget is\nhidden. 'required' : A boolean indicating whether or not the field for\nthis widget is required. 'value' : The value as returned by format_value() . 'attrs' : HTML attributes to be set on the rendered widget. The\ncombination of the attrs attribute and the attrs argument. 'template_name' : The value of self.template_name . Widget subclasses can provide custom context values by overriding\nthis method. id_for_label ( id_ ) [source] ¶ Returns the HTML ID attribute of this widget for use by a <label> ,\ngiven the ID of the field. Returns an empty string if an ID isn’t\navailable. This hook is necessary because some widgets have multiple HTML\nelements and, thus, multiple IDs. In that case, this method should\nreturn an ID value that corresponds to the first ID in the widget’s\ntags. render ( name , value , attrs = None , renderer = None ) [source] ¶ Renders a widget to HTML using the given renderer. If renderer is None , the renderer from the FORM_RENDERER setting is\nused. value_from_datadict ( data , files , name ) [source] ¶ Given a dictionary of data and this widget’s name, returns the value\nof this widget. files may contain data coming from request.FILES . Returns None if a value wasn’t provided. Note also that value_from_datadict may\nbe called more than once during handling of form data, so if you\ncustomize it and add expensive processing, you should implement some\ncaching mechanism yourself. value_omitted_from_data ( data , files , name ) [source] ¶ Given data and files dictionaries and this widget’s name,\nreturns whether or not there’s data or files for the widget. The method’s result affects whether or not a field in a model form falls back to its default . Special cases are CheckboxInput , CheckboxSelectMultiple , and SelectMultiple , which always return False because an unchecked checkbox and unselected <select multiple> don’t appear in the data of an HTML form\nsubmission, so it’s unknown whether or not the user submitted a value. use_fieldset ¶ An attribute to identify if the widget should be grouped in a <fieldset> with a <legend> when rendered. Defaults to False but is True when the widget contains multiple <input> tags such as CheckboxSelectMultiple , RadioSelect , MultiWidget , SplitDateTimeWidget , and SelectDateWidget . use_required_attribute ( initial ) [source] ¶ Given a form field’s initial value, returns whether or not the\nwidget can be rendered with the required HTML attribute. Forms use\nthis method along with Field.required and Form.use_required_attribute to determine whether or not\nto display the required attribute for each field. By default, returns False for hidden widgets and True otherwise. Special cases are FileInput and ClearableFileInput , which return False when initial is set, and CheckboxSelectMultiple ,\nwhich always returns False because browser validation would require\nall checkboxes to be checked instead of at least one. Override this method in custom widgets that aren’t compatible with\nbrowser validation. For example, a WSYSIWG text editor widget backed by\na hidden textarea element may want to always return False to\navoid browser validation on the hidden field. MultiWidget ¶ class MultiWidget ( widgets , attrs = None ) [source] ¶ A widget that is composed of multiple widgets. MultiWidget works hand in hand with the MultiValueField . MultiWidget has one required argument: widgets ¶ An iterable containing the widgets needed. For example: >>> from django.forms import MultiWidget , TextInput >>> widget = MultiWidget ( widgets = [ TextInput , TextInput ]) >>> widget . render ( \"name\" , [ \"john\" , \"paul\" ]) '<input type=\"text\" name=\"name_0\" value=\"john\"><input type=\"text\" name=\"name_1\" value=\"paul\">' You may provide a dictionary in order to specify custom suffixes for\nthe name attribute on each subwidget. In this case, for each (key, widget) pair, the key will be appended to the name of the\nwidget in order to generate the attribute value. You may provide the\nempty string ( '' ) for a single key, in order to suppress the suffix\nfor one widget. For example: >>> widget = MultiWidget ( widgets = { \"\" : TextInput , \"last\" : TextInput }) >>> widget . render ( \"name\" , [ \"john\" , \"paul\" ]) '<input type=\"text\" name=\"name\" value=\"john\"><input type=\"text\" name=\"name_last\" value=\"paul\">' And one required method: decompress ( value ) [source] ¶ This method takes a single “compressed” value from the field and\nreturns a list of “decompressed” values. The input value can be\nassumed valid, but not necessarily non-empty. This method must be implemented by the subclass, and since the\nvalue may be empty, the implementation must be defensive. The rationale behind “decompression” is that it is necessary to “split”\nthe combined value of the form field into the values for each widget. An example of this is how SplitDateTimeWidget turns a datetime value into a list with date and time split\ninto two separate values: from django.forms import MultiWidget class SplitDateTimeWidget ( MultiWidget ): # ... def decompress ( self , value ): if value : return [ value . date (), value . time ()] return [ None , None ] Tip Note that MultiValueField has a\ncomplementary method compress() with the opposite responsibility - to combine cleaned values of\nall member fields into one. It provides some custom context: get_context ( name , value , attrs ) [source] ¶ In addition to the 'widget' key described in Widget.get_context() , MultiWidget adds a widget['subwidgets'] key. These can be looped over in the widget template: {% for subwidget in widget.subwidgets %} {% include subwidget.template_name with widget = subwidget %} {% endfor %} Here’s an example widget which subclasses MultiWidget to display\na date with the day, month, and year in different select boxes. This widget\nis intended to be used with a DateField rather than\na MultiValueField , thus we have implemented value_from_datadict() : from datetime import date from django import forms class DateSelectorWidget ( forms . MultiWidget ): def __init__ ( self , attrs = None ): days = { day : day for day in range ( 1 , 32 )} months = { month : month for month in range ( 1 , 13 )} years = { year : year for year in [ 2018 , 2019 , 2020 ]} widgets = [ forms . Select ( attrs = attrs , choices = days ), forms . Select ( attrs = attrs , choices = months ), forms . Select ( attrs = attrs , choices = years ), ] super () . __init__ ( widgets , attrs ) def decompress ( self , value ): if isinstance ( value , date ): return [ value . day , value . month , value . year ] elif isinstance ( value , str ): year , month , day = value . split ( \"-\" ) return [ day , month , year ] return [ None , None , None ] def value_from_datadict ( self , data , files , name ): day , month , year = super () . value_from_datadict ( data , files , name ) # DateField expects a single string that it can parse into a date. return \" {} - {} - {} \" . format ( year , month , day ) The constructor creates several Select widgets in a list. The super() method uses this list to set up the widget. The required method decompress() breaks up a datetime.date value into the day, month, and year values corresponding\nto each widget. If an invalid date was selected, such as the non-existent\n30th February, the DateField passes this method a\nstring instead, so that needs parsing. The final return handles when value is None , meaning we don’t have any defaults for our\nsubwidgets. The default implementation of value_from_datadict() returns a\nlist of values corresponding to each Widget . This is appropriate when\nusing a MultiWidget with a MultiValueField . But\nsince we want to use this widget with a DateField ,\nwhich takes a single value, we have overridden this method. The\nimplementation here combines the data from the subwidgets into a string in\nthe format that DateField expects. Built-in widgets ¶ Django provides a representation of all the basic HTML widgets, plus some\ncommonly used groups of widgets in the django.forms.widgets module,\nincluding the input of text , various checkboxes\nand selectors , uploading files ,\nand handling of multi-valued input . Widgets handling input of text ¶ These widgets make use of the HTML elements input and textarea . TextInput ¶ class TextInput [source] ¶ input_type : 'text' template_name : 'django/forms/widgets/text.html' Renders as: <input type=\"text\" ...> NumberInput ¶ class NumberInput [source] ¶ input_type : 'number' template_name : 'django/forms/widgets/number.html' Renders as: <input type=\"number\" ...> Beware that not all browsers support entering localized numbers in number input types. Django itself avoids using them for fields having\ntheir localize property set to True . EmailInput ¶ class EmailInput [source] ¶ input_type : 'email' template_name : 'django/forms/widgets/email.html' Renders as: <input type=\"email\" ...> URLInput ¶ class URLInput [source] ¶ input_type : 'url' template_name : 'django/forms/widgets/url.html' Renders as: <input type=\"url\" ...> PasswordInput ¶ class PasswordInput [source] ¶ input_type : 'password' template_name : 'django/forms/widgets/password.html' Renders as: <input type=\"password\" ...> Takes one optional argument: render_value ¶ Determines whether the widget will have a value filled in when the\nform is re-displayed after a validation error (default is False ). HiddenInput ¶ class HiddenInput [source] ¶ input_type : 'hidden' template_name : 'django/forms/widgets/hidden.html' Renders as: <input type=\"hidden\" ...> Note that there also is a MultipleHiddenInput widget that\nencapsulates a set of hidden input elements. DateInput ¶ class DateInput [source] ¶ input_type : 'text' template_name : 'django/forms/widgets/date.html' Renders as: <input type=\"text\" ...> Takes same arguments as TextInput , with one more optional argument: format ¶ The format in which this field’s initial value will be displayed. If no format argument is provided, the default format is the first\nformat found in DATE_INPUT_FORMATS and respects Format localization . %U , %W , and %j formats are not\nsupported by this widget. DateTimeInput ¶ class DateTimeInput [source] ¶ input_type : 'text' template_name : 'django/forms/widgets/datetime.html' Renders as: <input type=\"text\" ...> Takes same arguments as TextInput , with one more optional argument: format ¶ The format in which this field’s initial value will be displayed. If no format argument is provided, the default format is the first\nformat found in DATETIME_INPUT_FORMATS and respects Format localization . %U , %W , and %j formats are not\nsupported by this widget. By default, the microseconds part of the time value is always set to 0 .\nIf microseconds are required, use a subclass with the supports_microseconds attribute set to True . TimeInput ¶ class TimeInput [source] ¶ input_type : 'text' template_name : 'django/forms/widgets/time.html' Renders as: <input type=\"text\" ...> Takes same arguments as TextInput , with one more optional argument: format ¶ The format in which this field’s initial value will be displayed. If no format argument is provided, the default format is the first\nformat found in TIME_INPUT_FORMATS and respects Format localization . For the treatment of microseconds, see DateTimeInput . Textarea ¶ class Textarea [source] ¶ template_name : 'django/forms/widgets/textarea.html' Renders as: <textarea>...</textarea> Selector and checkbox widgets ¶ These widgets make use of the HTML elements <select> , <input type=\"checkbox\"> , and <input type=\"radio\"> . Widgets that render multiple choices have an option_template_name attribute\nthat specifies the template used to render each choice. For example, for the Select widget, select_option.html renders the <option> for a <select> . CheckboxInput ¶ class CheckboxInput [source] ¶ input_type : 'checkbox' template_name : 'django/forms/widgets/checkbox.html' Renders as: <input type=\"checkbox\" ...> Takes one optional argument: check_test ¶ A callable that takes the value of the CheckboxInput and returns True if the checkbox should be checked for that value. Select ¶ class Select [source] ¶ template_name : 'django/forms/widgets/select.html' option_template_name : 'django/forms/widgets/select_option.html' Renders as: <select><option ...>...</select> choices ¶ This attribute is optional when the form field does not have a choices attribute. If it does, it will override anything you set\nhere when the attribute is updated on the Field . NullBooleanSelect ¶ class NullBooleanSelect [source] ¶ template_name : 'django/forms/widgets/select.html' option_template_name : 'django/forms/widgets/select_option.html' Select widget with options ‘Unknown’, ‘Yes’ and ‘No’ SelectMultiple ¶ class SelectMultiple [source] ¶ template_name : 'django/forms/widgets/select.html' option_template_name : 'django/forms/widgets/select_option.html' Similar to Select , but allows multiple selection: <select multiple>...</select> RadioSelect ¶ class RadioSelect [source] ¶ template_name : 'django/forms/widgets/radio.html' option_template_name : 'django/forms/widgets/radio_option.html' Similar to Select , but rendered as a list of radio buttons within <div> tags: < div > < div >< input type = \"radio\" name = \"...\" ></ div > ... </ div > For more granular control over the generated markup, you can loop over the\nradio buttons in the template. Assuming a form myform with a field beatles that uses a RadioSelect as its widget: < fieldset > < legend > {{ myform.beatles.label }} </ legend > {% for radio in myform.beatles %} < div class = \"myradio\" > {{ radio }} </ div > {% endfor %} </ fieldset > This would generate the following HTML: < fieldset > < legend > Radio buttons </ legend > < div class = \"myradio\" > < label for = \"id_beatles_0\" >< input id = \"id_beatles_0\" name = \"beatles\" type = \"radio\" value = \"john\" required > John </ label > </ div > < div class = \"myradio\" > < label for = \"id_beatles_1\" >< input id = \"id_beatles_1\" name = \"beatles\" type = \"radio\" value = \"paul\" required > Paul </ label > </ div > < div class = \"myradio\" > < label for = \"id_beatles_2\" >< input id = \"id_beatles_2\" name = \"beatles\" type = \"radio\" value = \"george\" required > George </ label > </ div > < div class = \"myradio\" > < label for = \"id_beatles_3\" >< input id = \"id_beatles_3\" name = \"beatles\" type = \"radio\" value = \"ringo\" required > Ringo </ label > </ div > </ fieldset > That included the <label> tags. To get more granular, you can use each\nradio button’s tag , choice_label and id_for_label attributes.\nFor example, this template… < fieldset > < legend > {{ myform.beatles.label }} </ legend > {% for radio in myform.beatles %} < label for = \" {{ radio.id_for_label }} \" > {{ radio.choice_label }} < span class = \"radio\" > {{ radio.tag }} </ span > </ label > {% endfor %} </ fieldset > …will result in the following HTML: < fieldset > < legend > Radio buttons </ legend > < label for = \"id_beatles_0\" > John < span class = \"radio\" >< input id = \"id_beatles_0\" name = \"beatles\" type = \"radio\" value = \"john\" required ></ span > </ label > < label for = \"id_beatles_1\" > Paul < span class = \"radio\" >< input id = \"id_beatles_1\" name = \"beatles\" type = \"radio\" value = \"paul\" required ></ span > </ label > < label for = \"id_beatles_2\" > George < span class = \"radio\" >< input id = \"id_beatles_2\" name = \"beatles\" type = \"radio\" value = \"george\" required ></ span > </ label > < label for = \"id_beatles_3\" > Ringo < span class = \"radio\" >< input id = \"id_beatles_3\" name = \"beatles\" type = \"radio\" value = \"ringo\" required ></ span > </ label > </ fieldset > If you decide not to loop over the radio buttons – e.g., if your template\nincludes {{ myform.beatles }} – they’ll be output in a <div> with <div> tags, as above. The outer <div> container receives the id attribute of the widget,\nif defined, or BoundField.auto_id otherwise. When looping over the radio buttons, the label and input tags include for and id attributes, respectively. Each radio button has an id_for_label attribute to output the element’s ID. CheckboxSelectMultiple ¶ class CheckboxSelectMultiple [source] ¶ template_name : 'django/forms/widgets/checkbox_select.html' option_template_name : 'django/forms/widgets/checkbox_option.html' Similar to SelectMultiple , but rendered as a list of checkboxes: < div > < div >< input type = \"checkbox\" name = \"...\" ></ div > ... </ div > The outer <div> container receives the id attribute of the widget,\nif defined, or BoundField.auto_id otherwise. Like RadioSelect , you can loop over the individual checkboxes for the\nwidget’s choices. Unlike RadioSelect , the checkboxes won’t include the required HTML attribute if the field is required because browser validation\nwould require all checkboxes to be checked instead of at least one. When looping over the checkboxes, the label and input tags include for and id attributes, respectively. Each checkbox has an id_for_label attribute to output the element’s ID. File upload widgets ¶ FileInput ¶ class FileInput [source] ¶ template_name : 'django/forms/widgets/file.html' Renders as: <input type=\"file\" ...> ClearableFileInput ¶ class ClearableFileInput [source] ¶ template_name : 'django/forms/widgets/clearable_file_input.html' Renders as: <input type=\"file\" ...> with an additional checkbox\ninput to clear the field’s value, if the field is not required and has\ninitial data. Composite widgets ¶ MultipleHiddenInput ¶ class MultipleHiddenInput [source] ¶ template_name : 'django/forms/widgets/multiple_hidden.html' Renders as: multiple <input type=\"hidden\" ...> tags A widget that handles multiple hidden widgets for fields that have a list\nof values. SplitDateTimeWidget ¶ class SplitDateTimeWidget [source] ¶ template_name : 'django/forms/widgets/splitdatetime.html' Wrapper (using MultiWidget ) around two widgets: DateInput for the date, and TimeInput for the time. Must be used with SplitDateTimeField rather than DateTimeField . SplitDateTimeWidget has several optional arguments: date_format ¶ Similar to DateInput.format time_format ¶ Similar to TimeInput.format date_attrs ¶ time_attrs ¶ Similar to Widget.attrs . A dictionary containing HTML\nattributes to be set on the rendered DateInput and TimeInput widgets, respectively. If these attributes aren’t\nset, Widget.attrs is used instead. SplitHiddenDateTimeWidget ¶ class SplitHiddenDateTimeWidget [source] ¶ template_name : 'django/forms/widgets/splithiddendatetime.html' Similar to SplitDateTimeWidget , but uses HiddenInput for\nboth date and time. SelectDateWidget ¶ class SelectDateWidget [source] ¶ template_name : 'django/forms/widgets/select_date.html' Wrapper around three Select widgets: one each for\nmonth, day, and year. Takes several optional arguments: years ¶ An optional list/tuple of years to use in the “year” select box.\nThe default is a list containing the current year and the next 9 years. months ¶ An optional dict of months to use in the “months” select box. The keys of the dict correspond to the month number (1-indexed) and\nthe values are the displayed months: MONTHS = { 1 : _ ( \"jan\" ), 2 : _ ( \"feb\" ), 3 : _ ( \"mar\" ), 4 : _ ( \"apr\" ), 5 : _ ( \"may\" ), 6 : _ ( \"jun\" ), 7 : _ ( \"jul\" ), 8 : _ ( \"aug\" ), 9 : _ ( \"sep\" ), 10 : _ ( \"oct\" ), 11 : _ ( \"nov\" ), 12 : _ ( \"dec\" ), } empty_label ¶ If the DateField is not required, SelectDateWidget will have an empty choice at the top of the\nlist (which is --- by default). You can change the text of this\nlabel with the empty_label attribute. empty_label can be a string , list , or tuple . When a string is used, all select\nboxes will each have an empty choice with this label. If empty_label is a list or tuple of 3 string elements, the select boxes will\nhave their own custom label. The labels should be in this order ('year_label', 'month_label', 'day_label') . # A custom empty label with string field1 = forms . DateField ( widget = SelectDateWidget ( empty_label = \"Nothing\" )) # A custom empty label with tuple field1 = forms . DateField ( widget = SelectDateWidget ( empty_label = ( \"Choose Year\" , \"Choose Month\" , \"Choose Day\" ), ), )", "keywords": ["text.html", "jun", "type", "url", "emailinput", "tip", "def", "renderer", "id", "id_beatles_1", "classes", "day", "method", "green", "appearance", "splithiddendatetime.html", "upload", "labels", "use", "beatles", "format_value", "ways", "xhtml", "jul", "form.use_required_attribute", "topic", "dateselectorwidget", "default", "option", "type=\"url", "django.forms", "page", "select", "mar", "top", "isinstance", "guide", "textarea", "self", "label", "sep", "boxes", "type=\"number", "argument", "date.html", "localization", "months", "tuple", "dict", "month", "decompress", "nullbooleanselect", "comment", "radio.choice_label", "editor", "empty_label", "element", "name", "input_type", "hidden.html", "date_input_formats", "size", "programming", "python", "charfield", "addition", "splitdatetimefield", "constructor", "formats", "subclass", "tag", "url.html", "true", "*", "radio.id_for_label", "modelform", "favorite_colors_choices", "nutshell", "logic", "forms", "february", "key", "numberinput", "container", "dictionary", "suffix", "type=\"text", "assets", "implementations", "browser", "error", "template", "handles", "control", "clearablefileinput", "selection", "rendering", "setting", "%", "value_omitted_from_data", "order", "documentation", "style", "widget.subwidgets", "feb", "behavior", "ids", "str", "files", "multiplehiddeninput", "import", "is_hidden", "w", "'", "selectmultiple", "datefield", "information", "type=\"radio", "id_beatles_3", "result", "#", "¶", "init", "myradio", "selector", "oct", "subwidgets", "web", "definition", "member", "date_format", "george", "multiplechoicefield", "format", "render", "dec", "choicefield.choices", "name=\"comment", "example", "year", "select_date.html", "value", "styling", "source", "checkboxselectmultiple", "multiple_hidden.html", "print", "simpleform", "html", "select.html", "checkbox.html", "choice_field", "form", "object", "option_template_name", "dateinput.format", "attributes", "returns", "size=\"10", "myform.beatles.label", "div", "multiple", "password", "note", "box", "post", "django", "foundation", "days", "validation", "syntax", "ringo", "value_from_datadict", "text", "field", "microseconds", "id_for_label", "name=\"url", "textinput", "checkboxinput", "=", "wsysiwg", "clearable_file_input.html", "choicefield", "defaults", "implementation", "field1", "email.html", "attrs", "hook", "wrapper", "myform.beatles", "get_context", "urlfield", "range", "button", "):", "widgets", "handling", "templates", "value=\"paul", "month_label", "time", "doctype", "property", "form.fields", "use_fieldset", "args", "textarea.html", "d", "css", "name=\"name_0", "class=\"special", "fileinput", "subclasses", "boundfield.id_for_label", "rationale", "groups", "localize", "john", "django.forms.widgets", "output", "fields", "type=\"email", "compress", "year_label", "custom", "f", "methods", "browsers", "update", "renders", "auto_id", "none", "base", "radioselect", "favorite_colors", "javascript", ">", "responsibility", "email", "type=\"file", "caching", "request", "name=\"name_last", "splitdatetimewidget", "splithiddendatetimewidget", "id_beatles_0", "hiddeninput", "urlinput", "selectdatewidget", "value=\"a", "subwidget", "data", "widget", "legend", "options", "select_option.html", "self.template_name", "submission", "widget.get_context", "combination", "treatment", "kwargs", "keys", "extraction", "required></div", "value=\"john\"><input", "select><option", "elements", "module", "markup", "arguments", "e.g.", "checkbox_select.html", "deal", "name:<input", "context", "subwidget.template_name", "pages", "detail", "datetimeinput", "title", "</textarea", "similar", "paul", "correspond", "widget.attrs", "types", "passwordinput", "file.html", "rules", "timeinput", "radio.html", "false", "type=\"checkbox", "_", "radio", "hand", "name=\"name", "time_input_formats", "checkbox", "time.html", "title=\"your", "values", "cases", "datetime.html", "form_renderer", "super", "j", "cleans", "media", "birth_year_choices", "commentform", "pair", "comment:<input", "nov", "birth_year", "choose", "input", "model", "processing", "choice", "span", "n’t", "years", "suffixes", "case", "supports_microseconds", "class", "number", "choices", "numbers", "return", "html5", "attribute", "string", "list", "field.required", "timeinput.format", "widget['subwidgets", "aug", "i", "datetimefield", "user", "part", "file", "decompression", "buttons", "day_label", "endfor", "dictionaries", "datetime_input_formats", "get", "mechanism", "select.choices", "template_name", "names", "checkboxes", "number.html", "password.html", "myform", "tags", "representation", "jan", "date", "set", "radio_option.html", "selectors", "multivaluefield", "choice_label", "instance", "boundfield.auto_id", "splitdatetime.html", "multiwidget", "url:<input", "dateinput"], "type": "documentation"},
{"title": "The form rendering API", "url": "https://docs.djangoproject.com/en/5.1/ref/forms/renderers/", "content": "The form rendering API ¶ Django’s form widgets are rendered using Django’s template engines\nsystem . The form rendering process can be customized at several levels: Widgets can specify custom template names. Forms and widgets can specify custom renderer classes. A widget’s template can be overridden by a project. (Reusable applications\ntypically shouldn’t override built-in templates because they might conflict\nwith a project’s custom templates.) The low-level render API ¶ The rendering of form templates is controlled by a customizable renderer class.\nA custom renderer can be specified by updating the FORM_RENDERER setting. It defaults to ' django.forms.renderers.DjangoTemplates ' . By specifying a custom form renderer and overriding form_template_name you can adjust the default form\nmarkup across your project from a single place. You can also provide a custom renderer per-form or per-widget by setting the Form.default_renderer attribute or by using the renderer argument\nof Form.render() , or Widget.render() . Matching points apply to formset rendering. See Using a formset in views and templates for\ndiscussion. Use one of the built-in template form renderers or implement your own. Custom renderers\nmust implement a render(template_name, context, request=None) method. It\nshould return a rendered templates (as a string) or raise TemplateDoesNotExist . class BaseRenderer [source] ¶ The base class for the built-in form renderers. form_template_name ¶ The default name of the template to use to render a form. Defaults to \"django/forms/div.html\" template. formset_template_name ¶ The default name of the template to use to render a formset. Defaults to \"django/forms/formsets/div.html\" template. field_template_name ¶ New in Django 5.0. The default name of the template used to render a BoundField . Defaults to \"django/forms/field.html\" get_template ( template_name ) [source] ¶ Subclasses must implement this method with the appropriate template\nfinding logic. render ( template_name , context , request = None ) [source] ¶ Renders the given template, or raises TemplateDoesNotExist . Built-in-template form renderers ¶ DjangoTemplates ¶ class DjangoTemplates [source] ¶ This renderer uses a standalone DjangoTemplates engine (unconnected to what you might have configured in the TEMPLATES setting). It loads templates first from the built-in form\ntemplates directory in django/forms/templates and then from the\ninstalled apps’ templates directories using the app_directories loader. If you want to render templates with customizations from your TEMPLATES setting, such as context processors for example, use the TemplatesSetting renderer. class DjangoDivFormRenderer [source] ¶ Deprecated since version 5.0. The alias of DjangoTemplates . Jinja2 ¶ class Jinja2 [source] ¶ This renderer is the same as the DjangoTemplates renderer except that\nit uses a Jinja2 backend. Templates\nfor the built-in widgets are located in django/forms/jinja2 and\ninstalled apps can provide templates in a jinja2 directory. To use this backend, all the forms and widgets in your project and its\nthird-party apps must have Jinja2 templates. Unless you provide your own Jinja2\ntemplates for widgets that don’t have any, you can’t use this renderer. For\nexample, django.contrib.admin doesn’t include Jinja2 templates for its\nwidgets due to their usage of Django template tags. class Jinja2DivFormRenderer [source] ¶ Deprecated since version 5.0. The alias of Jinja2 . TemplatesSetting ¶ class TemplatesSetting [source] ¶ This renderer gives you complete control of how form and widget templates are\nsourced. It uses get_template() to find templates\nbased on what’s configured in the TEMPLATES setting. Using this renderer along with the built-in templates requires either: 'django.forms' in INSTALLED_APPS and at least one engine\nwith APP_DIRS=True . Adding the built-in templates directory in DIRS of one of your template engines. To generate that path: import django django . __path__ [ 0 ] + \"/forms/templates\" # or '/forms/jinja2' Using this renderer requires you to make sure the form templates your project\nneeds can be located. Context available in formset templates ¶ Formset templates receive a context from BaseFormSet.get_context() . By\ndefault, formsets receive a dictionary with the following values: formset : The formset instance. Context available in form templates ¶ Form templates receive a context from Form.get_context() . By default,\nforms receive a dictionary with the following values: form : The bound form. fields : All bound fields, except the hidden fields. hidden_fields : All hidden bound fields. errors : All non field related or hidden field related form errors. Context available in field templates ¶ New in Django 5.0. Field templates receive a context from BoundField.get_context() . By\ndefault, fields receive a dictionary with the following values: field : The BoundField . Context available in widget templates ¶ Widget templates receive a context from Widget.get_context() . By\ndefault, widgets receive a single value in the context, widget . This is a\ndictionary that contains values like: name value attrs is_hidden template_name Some widgets add further information to the context. For instance, all widgets\nthat subclass Input defines widget['type'] and MultiWidget defines widget['subwidgets'] for looping purposes. Overriding built-in formset templates ¶ BaseFormSet.template_name To override formset templates, you must use the TemplatesSetting renderer. Then overriding formset templates works the same as overriding any other template in your project. Overriding built-in form templates ¶ Form.template_name To override form templates, you must use the TemplatesSetting renderer. Then overriding form templates works the same as overriding any other template in your project. Overriding built-in field templates ¶ New in Django 5.0. Field.template_name To override field templates, you must use the TemplatesSetting renderer. Then overriding field templates works the same as overriding any other template in your project. Overriding built-in widget templates ¶ Each widget has a template_name attribute with a value such as input.html . Built-in widget templates are stored in the django/forms/widgets path. You can provide a custom template for input.html by defining django/forms/widgets/input.html , for example.\nSee Built-in widgets for the name of each widget’s template. To override widget templates, you must use the TemplatesSetting renderer. Then overriding widget templates works the same as overriding any other template in your project.", "keywords": ["dictionary", "attrs", "render(template_name", "template", "app_dirs", "control", "rendering", "setting", "widgets", "templates", "place", "renderer", "form.get_context", "classes", "loader", "baserenderer", "renderers", "method", "party", "boundfield", "points", "widget['type", "system", "directories", "values", "app_directories", "form.template_name", "templatessetting", "views", "new", "import", "form_renderer", "is_hidden", "subclasses", "field_template_name", "information", "project", "input.html", "customizations", "#", "fields", "jinja2", "¶", "default", "custom", "hidden_fields", "input", "usage", "renders", "django.forms", "none", "base", "process", "render", "purposes", "widget.render", "example", "djangotemplates", "value", "backend", "source", "argument", "class", "applications", "request", "version", "form.render", "baseformset.get_context", "div.html", "form_template_name", "engine", "needs", "finding", "attribute", "string", "formset_template_name", "widget", "widget['subwidgets", "matching", "form", "name", "templatedoesnotexist", "boundfield.get_context", "widget.get_context", "form.default_renderer", "errors", "formset", "template_name", "api", "get_template", "path", "names", "level", "django", "directory", "django.forms.renderers", "dirs", "tags", "markup", "apps", "field", "context", "formsets", "logic", "forms", "instance", "engines", "=", "djangodivformrenderer", "jinja2divformrenderer", "discussion", "multiwidget", "levels", "defaults", "alias", "field.html", "processors", "django.contrib.admin"], "type": "documentation"},
{"title": "Formset Functions", "url": "https://docs.djangoproject.com/en/5.1/ref/forms/formsets/", "content": "Formset Functions ¶ Formset API reference. For introductory material about formsets, see the Formsets topic guide. formset_factory ¶ formset_factory ( form , formset = BaseFormSet , extra = 1 , can_order = False , can_delete = False , max_num = None , validate_max = False , min_num = None , validate_min = False , absolute_max = None , can_delete_extra = True , renderer = None ) [source] ¶ Returns a FormSet class for the given form class. See formsets for example usage.", "keywords": ["formset", "source", "class", "material", "api", "topic", "can_delete", "¶", "max_num", "formset_factory", "renderer", "usage", "false", "none", "form", "formsets", "reference", "=", "example", "guide", "min_num", "baseformset", "returns", "functions", "absolute_max"], "type": "documentation"},
{"title": "Model Form Functions", "url": "https://docs.djangoproject.com/en/5.1/ref/forms/models/", "content": "Model Form Functions ¶ Model Form API reference. For introductory material about model forms, see the Creating forms from models topic guide. modelform_factory ¶ modelform_factory ( model , form = ModelForm , fields = None , exclude = None , formfield_callback = None , widgets = None , localized_fields = None , labels = None , help_texts = None , error_messages = None , field_classes = None ) [source] ¶ Returns a ModelForm class for the given model .\nYou can optionally pass a form argument to use as a starting point for\nconstructing the ModelForm . fields is an optional list of field names. If provided, only the named\nfields will be included in the returned fields. exclude is an optional list of field names. If provided, the named\nfields will be excluded from the returned fields, even if they are listed\nin the fields argument. formfield_callback is a callable that takes a model field and returns\na form field. widgets is a dictionary of model field names mapped to a widget. localized_fields is a list of names of fields which should be localized. labels is a dictionary of model field names mapped to a label. help_texts is a dictionary of model field names mapped to a help text. error_messages is a dictionary of model field names mapped to a\ndictionary of error messages. field_classes is a dictionary of model field names mapped to a form\nfield class. See ModelForm factory function for example usage. You must provide the list of fields explicitly, either via keyword arguments fields or exclude , or the corresponding attributes on the form’s\ninner Meta class. See Selecting the fields to use for more\ninformation. Omitting any definition of the fields to use will result in\nan ImproperlyConfigured exception. modelformset_factory ¶ modelformset_factory ( model , form = ModelForm , formfield_callback = None , formset = BaseModelFormSet , extra = 1 , can_delete = False , can_order = False , max_num = None , fields = None , exclude = None , widgets = None , validate_max = False , localized_fields = None , labels = None , help_texts = None , error_messages = None , min_num = None , validate_min = False , field_classes = None , absolute_max = None , can_delete_extra = True , renderer = None , edit_only = False ) [source] ¶ Returns a FormSet class for the given model class. Arguments model , form , fields , exclude , formfield_callback , widgets , localized_fields , labels , help_texts , error_messages , and field_classes are all passed\nthrough to modelform_factory() . Arguments formset , extra , can_delete , can_order , max_num , validate_max , min_num , validate_min , absolute_max , can_delete_extra , and renderer are passed\nthrough to formset_factory() . See formsets for details. The edit_only argument allows preventing new objects creation . See Model formsets for example usage. inlineformset_factory ¶ inlineformset_factory ( parent_model , model , form = ModelForm , formset = BaseInlineFormSet , fk_name = None , fields = None , exclude = None , extra = 3 , can_order = False , can_delete = True , max_num = None , formfield_callback = None , widgets = None , validate_max = False , localized_fields = None , labels = None , help_texts = None , error_messages = None , min_num = None , validate_min = False , field_classes = None , absolute_max = None , can_delete_extra = True , renderer = None , edit_only = False ) [source] ¶ Returns an InlineFormSet using modelformset_factory() with\ndefaults of formset= BaseInlineFormSet , can_delete=True , and extra=3 . If your model has more than one ForeignKey to\nthe parent_model , you must specify a fk_name . See Inline formsets for example usage.", "keywords": ["source", "dictionary", "formset", "messages", "argument", "class", "information", "material", "exclude", "api", "modelform_factory", "error", "topic", "point", "inline", "fields", "names", "improperlyconfigured", "can_delete", "inlineformset", "¶", "extra=3", "function", "widgets", "max_num", "meta", "text", "list", "formset_factory", "field", "definition", "arguments", "details", "renderer", "creation", "keyword", "usage", "inlineformset_factory", "help", "model", "widget", "false", "foreignkey", "modelform", "none", "exception", "form", "formsets", "fk_name", "modelformset_factory", "forms", "reference", "baseinlineformset", "=", "models", "factory", "starting", "example", "basemodelformset", "can_order", "attributes", "objects", "localized_fields", "guide", "min_num", "parent_model", "formfield_callback", "functions", "returns", "defaults", "labels", "field_classes", "absolute_max", "help_texts", "label", "error_messages"], "type": "documentation"},
{"title": "Form fields", "url": "https://docs.djangoproject.com/en/5.1/ref/forms/fields/", "content": "Form fields ¶ class Field [source] ¶ When you create a Form class, the most important part is defining the\nfields of the form. Each field has custom validation logic, along with a few\nother hooks. Field. clean ( value ) [source] ¶ Although the primary way you’ll use Field classes is in Form classes,\nyou can also instantiate them and use them directly to get a better idea of\nhow they work. Each Field instance has a clean() method, which takes\na single argument and either raises a django.core.exceptions.ValidationError exception or returns the clean\nvalue: >>> from django import forms >>> f = forms . EmailField () >>> f . clean ( \"foo@example.com\" ) 'foo@example.com' >>> f . clean ( \"invalid email address\" ) Traceback (most recent call last): ... ValidationError : ['Enter a valid email address.'] Core field arguments ¶ Each Field class constructor takes at least these arguments. Some Field classes take additional, field-specific arguments, but the following\nshould always be accepted: required ¶ Field. required ¶ By default, each Field class assumes the value is required, so if you pass\nan empty value – either None or the empty string ( \"\" ) – then clean() will raise a ValidationError exception: >>> from django import forms >>> f = forms . CharField () >>> f . clean ( \"foo\" ) 'foo' >>> f . clean ( \"\" ) Traceback (most recent call last): ... ValidationError : ['This field is required.'] >>> f . clean ( None ) Traceback (most recent call last): ... ValidationError : ['This field is required.'] >>> f . clean ( 0 ) '0' >>> f . clean ( True ) 'True' >>> f . clean ( False ) 'False' To specify that a field is not required, pass required=False to the Field constructor: >>> f = forms . CharField ( required = False ) >>> f . clean ( \"foo\" ) 'foo' >>> f . clean ( \"\" ) '' >>> f . clean ( None ) '' >>> f . clean ( 0 ) '0' >>> f . clean ( True ) 'True' >>> f . clean ( False ) 'False' If a Field has required=False and you pass clean() an empty value,\nthen clean() will return a normalized empty value rather than raising ValidationError . For CharField , this will return empty_value which defaults to an empty string. For other Field classes, it might be None . (This varies from field to field.) Widgets of required form fields have the required HTML attribute. Set the Form.use_required_attribute attribute to False to disable it. The required attribute isn’t included on forms of formsets because the browser\nvalidation may not be correct when adding and deleting formsets. label ¶ Field. label ¶ The label argument lets you specify the “human-friendly” label for this\nfield. This is used when the Field is displayed in a Form . As explained in Outputting forms as HTML , the default label for a Field is generated from the field name by converting all underscores to\nspaces and upper-casing the first letter. Specify label if that default\nbehavior doesn’t result in an adequate label. Here’s a full example Form that implements label for two of its fields.\nWe’ve specified auto_id=False to simplify the output: >>> from django import forms >>> class CommentForm ( forms . Form ): ... name = forms . CharField ( label = \"Your name\" ) ... url = forms . URLField ( label = \"Your website\" , required = False ) ... comment = forms . CharField () ... >>> f = CommentForm ( auto_id = False ) >>> print ( f ) <div>Your name:<input type=\"text\" name=\"name\" required></div> <div>Your website:<input type=\"url\" name=\"url\"></div> <div>Comment:<input type=\"text\" name=\"comment\" required></div> label_suffix ¶ Field. label_suffix ¶ The label_suffix argument lets you override the form’s label_suffix on a per-field basis: >>> class ContactForm ( forms . Form ): ... age = forms . IntegerField () ... nationality = forms . CharField () ... captcha_answer = forms . IntegerField ( label = \"2 + 2\" , label_suffix = \" =\" ) ... >>> f = ContactForm ( label_suffix = \"?\" ) >>> print ( f ) <div><label for=\"id_age\">Age?</label><input type=\"number\" name=\"age\" required id=\"id_age\"></div> <div><label for=\"id_nationality\">Nationality?</label><input type=\"text\" name=\"nationality\" required id=\"id_nationality\"></div> <div><label for=\"id_captcha_answer\">2 + 2 =</label><input type=\"number\" name=\"captcha_answer\" required id=\"id_captcha_answer\"></div> initial ¶ Field. initial ¶ The initial argument lets you specify the initial value to use when\nrendering this Field in an unbound Form . To specify dynamic initial data, see the Form.initial parameter. The use-case for this is when you want to display an “empty” form in which a\nfield is initialized to a particular value. For example: >>> from django import forms >>> class CommentForm ( forms . Form ): ... name = forms . CharField ( initial = \"Your name\" ) ... url = forms . URLField ( initial = \"https://\" ) ... comment = forms . CharField () ... >>> f = CommentForm ( auto_id = False ) >>> print ( f ) <div>Name:<input type=\"text\" name=\"name\" value=\"Your name\" required></div> <div>Url:<input type=\"url\" name=\"url\" value=\"https://\" required></div> <div>Comment:<input type=\"text\" name=\"comment\" required></div> You may be thinking, why not just pass a dictionary of the initial values as\ndata when displaying the form? Well, if you do that, you’ll trigger validation,\nand the HTML output will include any validation errors: >>> class CommentForm ( forms . Form ): ... name = forms . CharField () ... url = forms . URLField () ... comment = forms . CharField () ... >>> default_data = { \"name\" : \"Your name\" , \"url\" : \"https://\" } >>> f = CommentForm ( default_data , auto_id = False ) >>> print ( f ) <div>Name: <input type=\"text\" name=\"name\" value=\"Your name\" required> </div> <div>Url: <ul class=\"errorlist\"><li>Enter a valid URL.</li></ul> <input type=\"url\" name=\"url\" value=\"https://\" required aria-invalid=\"true\"> </div> <div>Comment: <ul class=\"errorlist\"><li>This field is required.</li></ul> <input type=\"text\" name=\"comment\" required aria-invalid=\"true\"> </div> This is why initial values are only displayed for unbound forms. For bound\nforms, the HTML output will use the bound data. Also note that initial values are not used as “fallback” data in\nvalidation if a particular field’s value is not given. initial values are only intended for initial form display: >>> class CommentForm ( forms . Form ): ... name = forms . CharField ( initial = \"Your name\" ) ... url = forms . URLField ( initial = \"https://\" ) ... comment = forms . CharField () ... >>> data = { \"name\" : \"\" , \"url\" : \"\" , \"comment\" : \"Foo\" } >>> f = CommentForm ( data ) >>> f . is_valid () False # The form does *not* fallback to using the initial values. >>> f . errors {'url': ['This field is required.'], 'name': ['This field is required.']} Instead of a constant, you can also pass any callable: >>> import datetime >>> class DateForm ( forms . Form ): ... day = forms . DateField ( initial = datetime . date . today ) ... >>> print ( DateForm ()) <div><label for=\"id_day\">Day:</label><input type=\"text\" name=\"day\" value=\"2023-02-11\" required id=\"id_day\"></div> The callable will be evaluated only when the unbound form is displayed, not when it is defined. widget ¶ Field. widget ¶ The widget argument lets you specify a Widget class to use when\nrendering this Field . See Widgets for more information. help_text ¶ Field. help_text ¶ The help_text argument lets you specify descriptive text for this Field . If you provide help_text , it will be displayed next to the Field when the Field is rendered by one of the convenience Form methods (e.g., as_ul() ). Like the model field’s help_text , this value\nisn’t HTML-escaped in automatically-generated forms. Here’s a full example Form that implements help_text for two of its\nfields. We’ve specified auto_id=False to simplify the output: >>> from django import forms >>> class HelpTextContactForm ( forms . Form ): ... subject = forms . CharField ( max_length = 100 , help_text = \"100 characters max.\" ) ... message = forms . CharField () ... sender = forms . EmailField ( help_text = \"A valid email address, please.\" ) ... cc_myself = forms . BooleanField ( required = False ) ... >>> f = HelpTextContactForm ( auto_id = False ) >>> print ( f ) <div>Subject:<div class=\"helptext\">100 characters max.</div><input type=\"text\" name=\"subject\" maxlength=\"100\" required></div> <div>Message:<input type=\"text\" name=\"message\" required></div> <div>Sender:<div class=\"helptext\">A valid email address, please.</div><input type=\"email\" name=\"sender\" required></div> <div>Cc myself:<input type=\"checkbox\" name=\"cc_myself\"></div> When a field has help text it is associated with its input using the aria-describedby HTML attribute. If the widget is rendered in a <fieldset> then aria-describedby is added to this element, otherwise it\nis added to the widget’s <input> : >>> from django import forms >>> class UserForm ( forms . Form ): ... username = forms . CharField ( max_length = 255 , help_text = \"e.g., user@example.com\" ) ... >>> f = UserForm () >>> print ( f ) <div> <label for=\"id_username\">Username:</label> <div class=\"helptext\" id=\"id_username_helptext\">e.g., user@example.com</div> <input type=\"text\" name=\"username\" maxlength=\"255\" required aria-describedby=\"id_username_helptext\" id=\"id_username\"> </div> When adding a custom aria-describedby attribute, make sure to also include\nthe id of the help_text element (if used) in the desired order. For\nscreen reader users, descriptions will be read in their order of appearance\ninside aria-describedby : >>> class UserForm ( forms . Form ): ... username = forms . CharField ( ... max_length = 255 , ... help_text = \"e.g., user@example.com\" , ... widget = forms . TextInput ( ... attrs = { \"aria-describedby\" : \"custom-description id_username_helptext\" }, ... ), ... ) ... >>> f = UserForm () >>> print ( f [ \"username\" ]) <input type=\"text\" name=\"username\" aria-describedby=\"custom-description id_username_helptext\" maxlength=\"255\" id=\"id_username\" required> Changed in Django 5.0: aria-describedby was added to associate help_text with its input. Changed in Django 5.1: aria-describedby support was added for <fieldset> . error_messages ¶ Field. error_messages ¶ The error_messages argument lets you override the default messages that the\nfield will raise. Pass in a dictionary with keys matching the error messages you\nwant to override. For example, here is the default error message: >>> from django import forms >>> generic = forms . CharField () >>> generic . clean ( \"\" ) Traceback (most recent call last): ... ValidationError : ['This field is required.'] And here is a custom error message: >>> name = forms . CharField ( error_messages = { \"required\" : \"Please enter your name\" }) >>> name . clean ( \"\" ) Traceback (most recent call last): ... ValidationError : ['Please enter your name'] In the built-in Field classes section below, each Field defines the\nerror message keys it uses. validators ¶ Field. validators ¶ The validators argument lets you provide a list of validation functions\nfor this field. See the validators documentation for more information. localize ¶ Field. localize ¶ The localize argument enables the localization of form data input, as well\nas the rendered output. See the format localization documentation for\nmore information. disabled ¶ Field. disabled ¶ The disabled boolean argument, when set to True , disables a form field\nusing the disabled HTML attribute so that it won’t be editable by users.\nEven if a user tampers with the field’s value submitted to the server, it will\nbe ignored in favor of the value from the form’s initial data. template_name ¶ Field. template_name ¶ New in Django 5.0. The template_name argument allows a custom template to be used when the\nfield is rendered with as_field_group() . By\ndefault this value is set to \"django/forms/field.html\" . Can be changed per\nfield by overriding this attribute or more generally by overriding the default\ntemplate, see also Overriding built-in field templates . Checking if the field data has changed ¶ has_changed() ¶ Field. has_changed () [source] ¶ The has_changed() method is used to determine if the field value has changed\nfrom the initial value. Returns True or False . See the Form.has_changed() documentation for more information. Built-in Field classes ¶ Naturally, the forms library comes with a set of Field classes that\nrepresent common validation needs. This section documents each built-in field. For each field, we describe the default widget used if you don’t specify widget . We also specify the value returned when you provide an empty value\n(see the section on required above to understand what that means). BooleanField ¶ class BooleanField ( ** kwargs ) [source] ¶ Default widget: CheckboxInput Empty value: False Normalizes to: A Python True or False value. Validates that the value is True (e.g. the check box is checked) if\nthe field has required=True . Error message keys: required Note Since all Field subclasses have required=True by default, the\nvalidation condition here is important. If you want to include a boolean\nin your form that can be either True or False (e.g. a checked or\nunchecked checkbox), you must remember to pass in required=False when\ncreating the BooleanField . CharField ¶ class CharField ( ** kwargs ) [source] ¶ Default widget: TextInput Empty value: Whatever you’ve given as empty_value . Normalizes to: A string. Uses MaxLengthValidator and MinLengthValidator if max_length and min_length are provided. Otherwise, all inputs are valid. Error message keys: required , max_length , min_length Has the following optional arguments for validation: max_length ¶ min_length ¶ If provided, these arguments ensure that the string is at most or at\nleast the given length. strip ¶ If True (default), the value will be stripped of leading and\ntrailing whitespace. empty_value ¶ The value to use to represent “empty”. Defaults to an empty string. ChoiceField ¶ class ChoiceField ( ** kwargs ) [source] ¶ Default widget: Select Empty value: '' (an empty string) Normalizes to: A string. Validates that the given value exists in the list of choices. Error message keys: required , invalid_choice The invalid_choice error message may contain %(value)s , which will be\nreplaced with the selected choice. Takes one extra argument: choices [source] ¶ Either an iterable of 2-tuples to use as choices for this\nfield, enumeration type , or a\ncallable that returns such an iterable. This argument accepts the same\nformats as the choices argument to a model field. See the model field reference documentation on choices for more details. If the argument is a callable, it is evaluated each\ntime the field’s form is initialized, in addition to during rendering.\nDefaults to an empty list. Choice type This field normalizes choices to strings, so if choices are required in\nother data types, such as integers or booleans, consider using TypedChoiceField instead. Changed in Django 5.0: Support for mappings and using enumeration types directly in choices was added. DateField ¶ class DateField ( ** kwargs ) [source] ¶ Default widget: DateInput Empty value: None Normalizes to: A Python datetime.date object. Validates that the given value is either a datetime.date , datetime.datetime or string formatted in a particular date format. Error message keys: required , invalid Takes one optional argument: input_formats ¶ An iterable of formats used to attempt to convert a string to a valid datetime.date object. If no input_formats argument is provided, the default input formats are\ntaken from the active locale format DATE_INPUT_FORMATS key, or from DATE_INPUT_FORMATS if localization is disabled. See also format localization . DateTimeField ¶ class DateTimeField ( ** kwargs ) [source] ¶ Default widget: DateTimeInput Empty value: None Normalizes to: A Python datetime.datetime object. Validates that the given value is either a datetime.datetime , datetime.date or string formatted in a particular datetime format. Error message keys: required , invalid Takes one optional argument: input_formats ¶ An iterable of formats used to attempt to convert a string to a valid datetime.datetime object, in addition to ISO 8601 formats. The field always accepts strings in ISO 8601 formatted dates or similar\nrecognized by parse_datetime() . Some examples\nare: '2006-10-25 14:30:59' '2006-10-25T14:30:59' '2006-10-25 14:30' '2006-10-25T14:30' '2006-10-25T14:30Z' '2006-10-25T14:30+02:00' '2006-10-25' If no input_formats argument is provided, the default input formats are\ntaken from the active locale format DATETIME_INPUT_FORMATS and DATE_INPUT_FORMATS keys, or from DATETIME_INPUT_FORMATS and DATE_INPUT_FORMATS if localization is disabled. See also format localization . DecimalField ¶ class DecimalField ( ** kwargs ) [source] ¶ Default widget: NumberInput when Field.localize is False , else TextInput . Empty value: None Normalizes to: A Python decimal . Validates that the given value is a decimal. Uses MaxValueValidator and MinValueValidator if max_value and min_value are provided. Uses StepValueValidator if step_size is\nprovided. Leading and trailing whitespace is ignored. Error message keys: required , invalid , max_value , min_value , max_digits , max_decimal_places , max_whole_digits , step_size . The max_value and min_value error messages may contain %(limit_value)s , which will be substituted by the appropriate limit.\nSimilarly, the max_digits , max_decimal_places and max_whole_digits error messages may contain %(max)s . Takes five optional arguments: max_value ¶ min_value ¶ These control the range of values permitted in the field, and should be\ngiven as decimal.Decimal values. max_digits ¶ The maximum number of digits (those before the decimal point plus those\nafter the decimal point, with leading zeros stripped) permitted in the\nvalue. decimal_places ¶ The maximum number of decimal places permitted. step_size ¶ Limit valid inputs to an integral multiple of step_size . If min_value is also provided, it’s added as an offset to determine if\nthe step size matches. DurationField ¶ class DurationField ( ** kwargs ) [source] ¶ Default widget: TextInput Empty value: None Normalizes to: A Python timedelta . Validates that the given value is a string which can be converted into a timedelta . The value must be between datetime.timedelta.min and datetime.timedelta.max . Error message keys: required , invalid , overflow . Accepts any format understood by parse_duration() . EmailField ¶ class EmailField ( ** kwargs ) [source] ¶ Default widget: EmailInput Empty value: Whatever you’ve given as empty_value . Normalizes to: A string. Uses EmailValidator to validate that\nthe given value is a valid email address, using a moderately complex\nregular expression. Error message keys: required , invalid Has the optional arguments max_length , min_length , and empty_value which work just as they do for CharField . The max_length argument defaults to 320 (see RFC 3696 Section 3 ). FileField ¶ class FileField ( ** kwargs ) [source] ¶ Default widget: ClearableFileInput Empty value: None Normalizes to: An UploadedFile object that wraps the file content\nand file name into a single object. Can validate that non-empty file data has been bound to the form. Error message keys: required , invalid , missing , empty , max_length Has the optional arguments for validation: max_length and allow_empty_file . If provided, these ensure that the file name is at\nmost the given length, and that validation will succeed even if the file\ncontent is empty. To learn more about the UploadedFile object, see the file uploads\ndocumentation . When you use a FileField in a form, you must also remember to bind the file data to the form . The max_length error refers to the length of the filename. In the error\nmessage for that key, %(max)d will be replaced with the maximum filename\nlength and %(length)d will be replaced with the current filename length. FilePathField ¶ class FilePathField ( ** kwargs ) [source] ¶ Default widget: Select Empty value: '' (an empty string) Normalizes to: A string. Validates that the selected choice exists in the list of choices. Error message keys: required , invalid_choice The field allows choosing from files inside a certain directory. It takes five\nextra arguments; only path is required: path ¶ The absolute path to the directory whose contents you want listed. This\ndirectory must exist. recursive ¶ If False (the default) only the direct contents of path will be\noffered as choices. If True , the directory will be descended into\nrecursively and all descendants will be listed as choices. match ¶ A regular expression pattern; only files with names matching this expression\nwill be allowed as choices. allow_files ¶ Optional.  Either True or False .  Default is True .  Specifies\nwhether files in the specified location should be included.  Either this or allow_folders must be True . allow_folders ¶ Optional.  Either True or False .  Default is False .  Specifies\nwhether folders in the specified location should be included.  Either this or allow_files must be True . FloatField ¶ class FloatField ( ** kwargs ) [source] ¶ Default widget: NumberInput when Field.localize is False , else TextInput . Empty value: None Normalizes to: A Python float. Validates that the given value is a float. Uses MaxValueValidator and MinValueValidator if max_value and min_value are provided. Uses StepValueValidator if step_size is\nprovided. Leading and trailing whitespace is allowed, as in Python’s float() function. Error message keys: required , invalid , max_value , min_value , step_size . Takes three optional arguments: max_value ¶ min_value ¶ These control the range of values permitted in the field. step_size ¶ Limit valid inputs to an integral multiple of step_size . If min_value is also provided, it’s added as an offset to determine if\nthe step size matches. GenericIPAddressField ¶ class GenericIPAddressField ( ** kwargs ) [source] ¶ A field containing either an IPv4 or an IPv6 address. Default widget: TextInput Empty value: '' (an empty string) Normalizes to: A string. IPv6 addresses are normalized as described below. Validates that the given value is a valid IP address. Error message keys: required , invalid The IPv6 address normalization follows RFC 4291 Section 2.2 section 2.2,\nincluding using the IPv4 format suggested in paragraph 3 of that section, like ::ffff:192.0.2.0 . For example, 2001:0::0:01 would be normalized to 2001::1 , and ::ffff:0a0a:0a0a to ::ffff:10.10.10.10 . All characters\nare converted to lowercase. Takes two optional arguments: protocol ¶ Limits valid inputs to the specified protocol.\nAccepted values are both (default), IPv4 or IPv6 . Matching is case insensitive. unpack_ipv4 ¶ Unpacks IPv4 mapped addresses like ::ffff:192.0.2.1 .\nIf this option is enabled that address would be unpacked to 192.0.2.1 . Default is disabled. Can only be used\nwhen protocol is set to 'both' . ImageField ¶ class ImageField ( ** kwargs ) [source] ¶ Default widget: ClearableFileInput Empty value: None Normalizes to: An UploadedFile object that wraps the file content\nand file name into a single object. Validates that file data has been bound to the form. Also uses FileExtensionValidator to validate that\nthe file extension is supported by Pillow. Error message keys: required , invalid , missing , empty , invalid_image Using an ImageField requires that pillow is installed with\nsupport for the image formats you use. If you encounter a corrupt image error when you upload an image, it usually means that Pillow doesn’t\nunderstand its format. To fix this, install the appropriate library and\nreinstall Pillow. When you use an ImageField on a form, you must also remember to bind the file data to the form . After the field has been cleaned and validated, the UploadedFile object will have an additional image attribute containing the Pillow Image instance used to check if the file was a valid image. Pillow\ncloses the underlying file descriptor after verifying an image, so while\nnon-image data attributes, such as format , height , and width ,\nare available, methods that access the underlying image data, such as getdata() or getpixel() , cannot be used without reopening the file.\nFor example: >>> from PIL import Image >>> from django import forms >>> from django.core.files.uploadedfile import SimpleUploadedFile >>> class ImageForm ( forms . Form ): ... img = forms . ImageField () ... >>> file_data = { \"img\" : SimpleUploadedFile ( \"test.png\" , b \"file data\" )} >>> form = ImageForm ({}, file_data ) # Pillow closes the underlying file descriptor. >>> form . is_valid () True >>> image_field = form . cleaned_data [ \"img\" ] >>> image_field . image <PIL.PngImagePlugin.PngImageFile image mode=RGBA size=191x287 at 0x7F5985045C18> >>> image_field . image . width 191 >>> image_field . image . height 287 >>> image_field . image . format 'PNG' >>> image_field . image . getdata () # Raises AttributeError: 'NoneType' object has no attribute 'seek'. >>> image = Image . open ( image_field ) >>> image . getdata () <ImagingCore object at 0x7f5984f874b0> Additionally, UploadedFile.content_type will be updated with the\nimage’s content type if Pillow can determine it, otherwise it will be set\nto None . IntegerField ¶ class IntegerField ( ** kwargs ) [source] ¶ Default widget: NumberInput when Field.localize is False , else TextInput . Empty value: None Normalizes to: A Python integer. Validates that the given value is an integer. Uses MaxValueValidator and MinValueValidator if max_value and min_value are provided. Uses StepValueValidator if step_size is\nprovided. Leading and trailing whitespace is allowed, as in Python’s int() function. Error message keys: required , invalid , max_value , min_value , step_size The max_value , min_value and step_size error messages may\ncontain %(limit_value)s , which will be substituted by the appropriate\nlimit. Takes three optional arguments for validation: max_value ¶ min_value ¶ These control the range of values permitted in the field. step_size ¶ Limit valid inputs to an integral multiple of step_size . If min_value is also provided, it’s added as an offset to determine if\nthe step size matches. JSONField ¶ class JSONField ( encoder = None , decoder = None , ** kwargs ) [source] ¶ A field which accepts JSON encoded data for a JSONField . Default widget: Textarea Empty value: None Normalizes to: A Python representation of the JSON value (usually as a dict , list , or None ), depending on JSONField.decoder . Validates that the given value is a valid JSON. Error message keys: required , invalid Takes two optional arguments: encoder ¶ A json.JSONEncoder subclass to serialize data types not\nsupported by the standard JSON serializer (e.g. datetime.datetime or UUID ). For example, you can use the DjangoJSONEncoder class. Defaults to json.JSONEncoder . decoder ¶ A json.JSONDecoder subclass to deserialize the input. Your\ndeserialization may need to account for the fact that you can’t be\ncertain of the input type. For example, you run the risk of returning a datetime that was actually a string that just happened to be in the\nsame format chosen for datetime s. The decoder can be used to validate the input. If json.JSONDecodeError is raised during the deserialization,\na ValidationError will be raised. Defaults to json.JSONDecoder . Note If you use a ModelForm , the encoder and decoder from JSONField will be used. User friendly forms JSONField is not particularly user friendly in most cases. However,\nit is a useful way to format data from a client-side widget for\nsubmission to the server. MultipleChoiceField ¶ class MultipleChoiceField ( ** kwargs ) [source] ¶ Default widget: SelectMultiple Empty value: [] (an empty list) Normalizes to: A list of strings. Validates that every value in the given list of values exists in the list\nof choices. Error message keys: required , invalid_choice , invalid_list The invalid_choice error message may contain %(value)s , which will be\nreplaced with the selected choice. Takes one extra required argument, choices , as for ChoiceField . NullBooleanField ¶ class NullBooleanField ( ** kwargs ) [source] ¶ Default widget: NullBooleanSelect Empty value: None Normalizes to: A Python True , False or None value. Validates nothing (i.e., it never raises a ValidationError ). NullBooleanField may be used with widgets such as Select or RadioSelect by providing the widget choices : NullBooleanField ( widget = Select ( choices = [ ( \"\" , \"Unknown\" ), ( True , \"Yes\" ), ( False , \"No\" ), ] ) ) RegexField ¶ class RegexField ( ** kwargs ) [source] ¶ Default widget: TextInput Empty value: Whatever you’ve given as empty_value . Normalizes to: A string. Uses RegexValidator to validate that\nthe given value matches a certain regular expression. Error message keys: required , invalid Takes one required argument: regex ¶ A regular expression specified either as a string or a compiled regular\nexpression object. Also takes max_length , min_length , strip , and empty_value which work just as they do for CharField . strip ¶ Defaults to False . If enabled, stripping will be applied before the\nregex validation. SlugField ¶ class SlugField ( ** kwargs ) [source] ¶ Default widget: TextInput Empty value: Whatever you’ve given as empty_value . Normalizes to: A string. Uses validate_slug or validate_unicode_slug to validate that\nthe given value contains only letters, numbers, underscores, and hyphens. Error messages: required , invalid This field is intended for use in representing a model SlugField in forms. Takes two optional parameters: allow_unicode ¶ A boolean instructing the field to accept Unicode letters in addition\nto ASCII letters. Defaults to False . empty_value ¶ The value to use to represent “empty”. Defaults to an empty string. TimeField ¶ class TimeField ( ** kwargs ) [source] ¶ Default widget: TimeInput Empty value: None Normalizes to: A Python datetime.time object. Validates that the given value is either a datetime.time or string\nformatted in a particular time format. Error message keys: required , invalid Takes one optional argument: input_formats ¶ An iterable of formats used to attempt to convert a string to a valid datetime.time object. If no input_formats argument is provided, the default input formats are\ntaken from the active locale format TIME_INPUT_FORMATS key, or from TIME_INPUT_FORMATS if localization is disabled. See also format localization . TypedChoiceField ¶ class TypedChoiceField ( ** kwargs ) [source] ¶ Just like a ChoiceField , except TypedChoiceField takes two\nextra arguments, coerce and empty_value . Default widget: Select Empty value: Whatever you’ve given as empty_value . Normalizes to: A value of the type provided by the coerce argument. Validates that the given value exists in the list of choices and can be\ncoerced. Error message keys: required , invalid_choice Takes extra arguments: coerce ¶ A function that takes one argument and returns a coerced value. Examples\ninclude the built-in int , float , bool and other types. Defaults\nto an identity function. Note that coercion happens after input\nvalidation, so it is possible to coerce to a value not present in choices . empty_value ¶ The value to use to represent “empty.” Defaults to the empty string; None is another common choice here. Note that this value will not be\ncoerced by the function given in the coerce argument, so choose it\naccordingly. TypedMultipleChoiceField ¶ class TypedMultipleChoiceField ( ** kwargs ) [source] ¶ Just like a MultipleChoiceField , except TypedMultipleChoiceField takes two extra arguments, coerce and empty_value . Default widget: SelectMultiple Empty value: Whatever you’ve given as empty_value Normalizes to: A list of values of the type provided by the coerce argument. Validates that the given values exists in the list of choices and can be\ncoerced. Error message keys: required , invalid_choice The invalid_choice error message may contain %(value)s , which will be\nreplaced with the selected choice. Takes two extra arguments, coerce and empty_value , as for TypedChoiceField . URLField ¶ class URLField ( ** kwargs ) [source] ¶ Default widget: URLInput Empty value: Whatever you’ve given as empty_value . Normalizes to: A string. Uses URLValidator to validate that the\ngiven value is a valid URL. Error message keys: required , invalid Has the optional arguments max_length , min_length , empty_value which work just as they do for CharField , and one more argument: assume_scheme ¶ New in Django 5.0. The scheme assumed for URLs provided without one. Defaults to \"http\" . For example, if assume_scheme is \"https\" and the\nprovided value is \"example.com\" , the normalized value will be \"https://example.com\" . Deprecated since version 5.0: The default value for assume_scheme will change from \"http\" to \"https\" in Django 6.0. Set FORMS_URLFIELD_ASSUME_HTTPS transitional setting to True to opt into using \"https\" during\nthe Django 5.x release cycle. UUIDField ¶ class UUIDField ( ** kwargs ) [source] ¶ Default widget: TextInput Empty value: None Normalizes to: A UUID object. Error message keys: required , invalid This field will accept any string format accepted as the hex argument\nto the UUID constructor. Slightly complex built-in Field classes ¶ ComboField ¶ class ComboField ( ** kwargs ) [source] ¶ Default widget: TextInput Empty value: '' (an empty string) Normalizes to: A string. Validates the given value against each of the fields specified\nas an argument to the ComboField . Error message keys: required , invalid Takes one extra required argument: fields ¶ The list of fields that should be used to validate the field’s value (in\nthe order in which they are provided). >>> from django.forms import ComboField >>> f = ComboField ( fields = [ CharField ( max_length = 20 ), EmailField ()]) >>> f . clean ( \"test@example.com\" ) 'test@example.com' >>> f . clean ( \"longemailaddress@example.com\" ) Traceback (most recent call last): ... ValidationError : ['Ensure this value has at most 20 characters (it has 28).'] MultiValueField ¶ class MultiValueField ( fields = () , ** kwargs ) [source] ¶ Default widget: TextInput Empty value: '' (an empty string) Normalizes to: the type returned by the compress method of the subclass. Validates the given value against each of the fields specified\nas an argument to the MultiValueField . Error message keys: required , invalid , incomplete Aggregates the logic of multiple fields that together produce a single\nvalue. This field is abstract and must be subclassed. In contrast with the\nsingle-value fields, subclasses of MultiValueField must not\nimplement clean() but instead - implement compress() . Takes one extra required argument: fields ¶ A tuple of fields whose values are cleaned and subsequently combined\ninto a single value.  Each value of the field is cleaned by the\ncorresponding field in fields – the first value is cleaned by the\nfirst field, the second value is cleaned by the second field, etc.\nOnce all fields are cleaned, the list of clean values is combined into\na single value by compress() . Also takes some optional arguments: require_all_fields ¶ Defaults to True , in which case a required validation error\nwill be raised if no value is supplied for any field. When set to False , the Field.required attribute can be set\nto False for individual fields to make them optional. If no value\nis supplied for a required field, an incomplete validation error\nwill be raised. A default incomplete error message can be defined on the MultiValueField subclass, or different messages can be defined\non each individual field. For example: from django.core.validators import RegexValidator class PhoneField ( MultiValueField ): def __init__ ( self , ** kwargs ): # Define one message for all fields. error_messages = { \"incomplete\" : \"Enter a country calling code and a phone number.\" , } # Or define a different message for each field. fields = ( CharField ( error_messages = { \"incomplete\" : \"Enter a country calling code.\" }, validators = [ RegexValidator ( r \"^[0-9]+$\" , \"Enter a valid country calling code.\" ), ], ), CharField ( error_messages = { \"incomplete\" : \"Enter a phone number.\" }, validators = [ RegexValidator ( r \"^[0-9]+$\" , \"Enter a valid phone number.\" )], ), CharField ( validators = [ RegexValidator ( r \"^[0-9]+$\" , \"Enter a valid extension.\" )], required = False , ), ) super () . __init__ ( error_messages = error_messages , fields = fields , require_all_fields = False , ** kwargs ) widget ¶ Must be a subclass of django.forms.MultiWidget .\nDefault value is TextInput , which\nprobably is not very useful in this case. compress ( data_list ) [source] ¶ Takes a list of valid values and returns  a “compressed” version of\nthose values – in a single value. For example, SplitDateTimeField is a subclass which combines a time field\nand a date field into a datetime object. This method must be implemented in the subclasses. SplitDateTimeField ¶ class SplitDateTimeField ( ** kwargs ) [source] ¶ Default widget: SplitDateTimeWidget Empty value: None Normalizes to: A Python datetime.datetime object. Validates that the given value is a datetime.datetime or string\nformatted in a particular datetime format. Error message keys: required , invalid , invalid_date , invalid_time Takes two optional arguments: input_date_formats ¶ A list of formats used to attempt to convert a string to a valid datetime.date object. If no input_date_formats argument is provided, the default input formats\nfor DateField are used. input_time_formats ¶ A list of formats used to attempt to convert a string to a valid datetime.time object. If no input_time_formats argument is provided, the default input formats\nfor TimeField are used. Fields which handle relationships ¶ Two fields are available for representing relationships between\nmodels: ModelChoiceField and ModelMultipleChoiceField .  Both of these fields require a\nsingle queryset parameter that is used to create the choices for\nthe field.  Upon form validation, these fields will place either one\nmodel object (in the case of ModelChoiceField ) or multiple model\nobjects (in the case of ModelMultipleChoiceField ) into the cleaned_data dictionary of the form. For more complex uses, you can specify queryset=None when declaring the\nform field and then populate the queryset in the form’s __init__() method: class FooMultipleChoiceForm ( forms . Form ): foo_select = forms . ModelMultipleChoiceField ( queryset = None ) def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . fields [ \"foo_select\" ] . queryset = ... Both ModelChoiceField and ModelMultipleChoiceField have an iterator attribute which specifies the class used to iterate over the queryset when\ngenerating choices. See Iterating relationship choices for details. ModelChoiceField ¶ class ModelChoiceField ( ** kwargs ) [source] ¶ Default widget: Select Empty value: None Normalizes to: A model instance. Validates that the given id exists in the queryset. Error message keys: required , invalid_choice The invalid_choice error message may contain %(value)s , which will\nbe replaced with the selected choice. Allows the selection of a single model object, suitable for representing a\nforeign key. Note that the default widget for ModelChoiceField becomes\nimpractical when the number of entries increases. You should avoid using it\nfor more than 100 items. A single argument is required: queryset ¶ A QuerySet of model objects from which the choices for the field\nare derived and which is used to validate the user’s selection. It’s\nevaluated when the form is rendered. ModelChoiceField also takes several optional arguments: empty_label ¶ By default the <select> widget used by ModelChoiceField will have an\nempty choice at the top of the list. You can change the text of this\nlabel (which is \"---------\" by default) with the empty_label attribute, or you can disable the empty label entirely by setting empty_label to None : # A custom empty label field1 = forms . ModelChoiceField ( queryset =... , empty_label = \"(Nothing)\" ) # No empty label field2 = forms . ModelChoiceField ( queryset =... , empty_label = None ) Note that no empty choice is created (regardless of the value of empty_label ) if a ModelChoiceField is required and has a\ndefault initial value, or a widget is set to RadioSelect and the blank argument is False . to_field_name ¶ This optional argument is used to specify the field to use as the value\nof the choices in the field’s widget. Be sure it’s a unique field for\nthe model, otherwise the selected value could match more than one\nobject. By default it is set to None , in which case the primary key\nof each object will be used. For example: # No custom to_field_name field1 = forms . ModelChoiceField ( queryset =... ) would yield: < select id = \"id_field1\" name = \"field1\" > < option value = \"obj1.pk\" > Object1 </ option > < option value = \"obj2.pk\" > Object2 </ option > ... </ select > and: # to_field_name provided field2 = forms . ModelChoiceField ( queryset =... , to_field_name = \"name\" ) would yield: < select id = \"id_field2\" name = \"field2\" > < option value = \"obj1.name\" > Object1 </ option > < option value = \"obj2.name\" > Object2 </ option > ... </ select > blank ¶ When using the RadioSelect widget, this optional\nboolean argument determines whether an empty choice is created. By\ndefault, blank is False , in which case no empty choice is\ncreated. ModelChoiceField also has the attribute: iterator ¶ The iterator class used to generate field choices from queryset . By\ndefault, ModelChoiceIterator . The __str__() method of the model will be called to generate string\nrepresentations of the objects for use in the field’s choices. To provide\ncustomized representations, subclass ModelChoiceField and override label_from_instance . This method will receive a model object and should\nreturn a string suitable for representing it. For example: from django.forms import ModelChoiceField class MyModelChoiceField ( ModelChoiceField ): def label_from_instance ( self , obj ): return \"My Object # %i \" % obj . id ModelMultipleChoiceField ¶ class ModelMultipleChoiceField ( ** kwargs ) [source] ¶ Default widget: SelectMultiple Empty value: An empty QuerySet ( self.queryset.none() ) Normalizes to: A QuerySet of model instances. Validates that every id in the given list of values exists in the\nqueryset. Error message keys: required , invalid_list , invalid_choice , invalid_pk_value The invalid_choice message may contain %(value)s and the invalid_pk_value message may contain %(pk)s , which will be\nsubstituted by the appropriate values. Allows the selection of one or more model objects, suitable for\nrepresenting a many-to-many relation. As with ModelChoiceField ,\nyou can use label_from_instance to customize the object\nrepresentations. A single argument is required: queryset ¶ Same as ModelChoiceField.queryset . Takes one optional argument: to_field_name ¶ Same as ModelChoiceField.to_field_name . ModelMultipleChoiceField also has the attribute: iterator ¶ Same as ModelChoiceField.iterator . Iterating relationship choices ¶ By default, ModelChoiceField and ModelMultipleChoiceField use ModelChoiceIterator to generate their field choices . When iterated, ModelChoiceIterator yields 2-tuple choices containing ModelChoiceIteratorValue instances as the first value element in\neach choice. ModelChoiceIteratorValue wraps the choice value while\nmaintaining a reference to the source model instance that can be used in custom\nwidget implementations, for example, to add data-* attributes to <option> elements. For example, consider the following models: from django.db import models class Topping ( models . Model ): name = models . CharField ( max_length = 100 ) price = models . DecimalField ( decimal_places = 2 , max_digits = 6 ) def __str__ ( self ): return self . name class Pizza ( models . Model ): topping = models . ForeignKey ( Topping , on_delete = models . CASCADE ) You can use a Select widget subclass to include\nthe value of Topping.price as the HTML attribute data-price for each <option> element: from django import forms class ToppingSelect ( forms . Select ): def create_option ( self , name , value , label , selected , index , subindex = None , attrs = None ): option = super () . create_option ( name , value , label , selected , index , subindex , attrs ) if value : option [ \"attrs\" ][ \"data-price\" ] = value . instance . price return option class PizzaForm ( forms . ModelForm ): class Meta : model = Pizza fields = [ \"topping\" ] widgets = { \"topping\" : ToppingSelect } This will render the Pizza.topping select as: < select id = \"id_topping\" name = \"topping\" required > < option value = \"\" selected > --------- </ option > < option value = \"1\" data-price = \"1.50\" > mushrooms </ option > < option value = \"2\" data-price = \"1.25\" > onions </ option > < option value = \"3\" data-price = \"1.75\" > peppers </ option > < option value = \"4\" data-price = \"2.00\" > pineapple </ option > </ select > For more advanced usage you may subclass ModelChoiceIterator in order to\ncustomize the yielded 2-tuple choices. ModelChoiceIterator ¶ class ModelChoiceIterator ( field ) [source] ¶ The default class assigned to the iterator attribute of ModelChoiceField and ModelMultipleChoiceField . An\niterable that yields 2-tuple choices from the queryset. A single argument is required: field ¶ The instance of ModelChoiceField or ModelMultipleChoiceField to\niterate and yield choices. ModelChoiceIterator has the following method: __iter__ () [source] ¶ Yields 2-tuple choices, in the (value, label) format used by ChoiceField.choices . The first value element is a ModelChoiceIteratorValue instance. ModelChoiceIteratorValue ¶ class ModelChoiceIteratorValue ( value , instance ) [source] ¶ Two arguments are required: value ¶ The value of the choice. This value is used to render the value attribute of an HTML <option> element. instance ¶ The model instance from the queryset. The instance can be accessed in\ncustom ChoiceWidget.create_option() implementations to adjust the\nrendered HTML. ModelChoiceIteratorValue has the following method: __str__ () [source] ¶ Return value as a string to be rendered in HTML. Creating custom fields ¶ If the built-in Field classes don’t meet your needs, you can create custom Field classes. To do this, create a subclass of django.forms.Field . Its\nonly requirements are that it implement a clean() method and that its __init__() method accept the core arguments mentioned above ( required , label , initial , widget , help_text ). You can also customize how a field will be accessed by overriding get_bound_field() .", "keywords": ["contrast", "iterable", "django.core.exceptions", "max_decimal_places", "data-", "https://", "type", "url", "emailfield", "fallback", "emailinput", "timefield", "2001:0::0:01", "def", "modelchoicefield.queryset", "empty_value", "username", "validate_unicode_slug", "value=\"https://", "classes", "day", "fileextensionvalidator", "method", "imagefield", "id=\"id_day\"></div", "pk)s", "yield", "name=\"sender", "png", "appearance", "value=\"your", "boolean", "coerce", "use", "jsondecodeerror", "pineapple", "messages", "for=\"id_nationality\">nationality?</label><input", "items", "condition", "input_formats", "form.use_required_attribute", "folders", "way", "yields", "default", "pil", "option", "imageform", "describedby=\"id_username_helptext", "type=\"url", "reinstall", "unpacks", "name=\"message", "client", "sender", "requirements", "longemailaddress@example.com", "modelchoiceiteratorvalue", "django.forms", "select", "zeros", "decoder", "top", "age", "id=\"id_username", "iterating", "users", "ffff:0a0a:0a0a", "textarea", "self", "label", "value)s", "validate_slug", "subindex", "type=\"number", "argument", "class=\"helptext\">100", "localization", "version", "tuple", "name=\"captcha_answer", "integer", "allow_files", "meta", "pillow", "comment", "modelchoicefield.to_field_name", "empty_label", "element", "choicewidget.create_option", "name", "pattern", "relationships", "typedchoicefield", "date_input_formats", "allow_unicode", "size", "python", "topping.price", "charfield", "addition", "helptextcontactform", "instances", "assume_scheme", "splitdatetimefield", "jsonencoder", "regex", "constructor", "formats", "test@example.com", "subclass", "label_from_instance", "descriptor", "name=\"age", "message:<input", "address", "display", "true", "*", "topping", "maxlength=\"255", "modelform", "decimalfield", "label_suffix", "unicode", "logic", "forms", "length", "key", "parameters", "aria", ".", "numberinput", "datetime.datetime", "dictionary", "type=\"text", "characters", "field.localize", "object2", "browser", "implementations", "error", "identity", "template", "nonetype", "minvaluevalidator", "datetime", "selection", "%", "setting", "order", "basis", "documentation", "limits", "bool", "specifies", "uploads", "stepvaluevalidator", "has_changed", "convenience", "coercion", "behavior", "mode", "risk", "str", "files", "typedmultiplechoicefield", "import", "hyphens", "selectmultiple", "name=\"nationality", "datefield", "information", "descriptions", "regexfield", "json", "#", "user@example.com</div", "point", "idea", "section", "¶", "limit_value)s", "init", "maxvaluevalidator", "server", "max)s", "please.</div><input", "userform", "multiplechoicefield", "format", "choicefield.choices", "name=\"comment", "modelchoicefield", "example", "uploadedfile.content_type", "value=\"2023", "value", "functions", "int", "source", "booleans", "offset", "print", "pizzaform", "unpack_ipv4", "html", "needs", "examples", "simpleuploadedfile", "django.db", "details", "^[0", "ipv6", "deserialization", "min_length", "rfc", "form", "slugfield", "object", "foo_select", "hex", "name=\"cc_myself\"></div", "library", "attributes", "help_text", "durationfield", "returns", "datetime.timedelta.min", "as_field_group", "div", "multiple", "dates", "paragraph", "box", "note", "modelchoicefield.iterator", "name=\"url\"></div", "allow_empty_file", "django", "message", "fact", "overflow", "parameter", "validation", "text", "urlvalidator", "field", "is_valid", "contents", "strings", "relation", "name=\"url", "http", "integerfield", "whitespace", "to_field_name", "formsets", "textinput", "digits", "=", "url.</li></ul", "objects", "defaults", "choicefield", "scheme", "matches", "field1", "index", "attrs", "nullbooleanfield", "uploadedfile", "callable", "https", "urlfield", "range", "class=\"helptext\">a", "25t14:30:59", "widgets", "pizza.topping", "templates", "max_digits", "reader", "help", "places", "time", "exception", "letter", "release", "queryset", "args", "image_field", "define", "invalid_list", "d", "name=\"day", "9]+$", "subclasses", "id=\"id_age\"></div", "max_whole_digits", "id=\"id_captcha_answer\"></div", "invalid_choice", "localize", "class=\"helptext", "onions", "ipv4", "size=191x287", "output", "fields", "type=\"email", "compress", "height", "custom", "f", "methods", "side", "contactform", "emailvalidator", "floatfield", "genericipaddressfield", "same", "auto_id", "none", "urls", "protocol", "radioselect", ">", "file_data", "timedelta", "email", "content", "validators", "uuid", "obj2.name", "decimal_places", "django.core.validators", "require_all_fields", "foomultiplechoiceform", "cycle", "datetime.timedelta.max", "urlinput", "invalid_pk_value", "combofield", "length)d", "screen", "data", "captcha_answer", "widget", "matching", "toppingselect", "create_option", "submission", "phonefield", "regexvalidator", "myself:<input", "error_messages", "optional", "description", "kwargs", "keys", "path", "directory", "input_time_formats", "mushrooms", "elements", "max", "arguments", "jsondecoder", "name:<input", "hooks", "website:<input", "phone", "models", "underscores", "max)d", "modelchoiceiterator", "call", "normalizes", "imagingcore", "addresses", "website", "nationality", "blank", "div><label", "id=\"id_username_helptext\">e.g", "image", "support", "types", "country", "self.queryset.none", "step_size", "subject", "booleanfield", "price", "timeinput", "false", "pizza", "type=\"checkbox", "filefield", "default_data", "check", "name=\"name", "for=\"id_username\">username:</label", "checkbox", "inputs", "getdata", "time_input_formats", "5.x", "integers", "values", "cases", "encoder", "new", "iterator", "clean", "generic", "super", "jsonfield.decoder", "today", "attributeerror", "descendants", "commentform", "spaces", "min_value", "ip", "comment:<input", "img", "location", "input", "mappings", "usage", "entries", "filepathfield", "model", "max_length", "validationerror", "datetime.time", "choice", "datetime.date", "iso", "serializer", "letters", "describedby=\"custom", "cc", "djangojsonencoder", "n’t", "for=\"id_day\">day:</label><input", "uuidfield", "ffff:192.0.2.1", "case", "minlengthvalidator", "mymodelchoicefield", "class", "number", "choices", "numbers", "describedby", "tuples", "constant", "return", "field2", "attribute", "function", "string", "list", "filename", "sender:<div", "max_value", "maxlengthvalidator", "uses", "i", "datetimefield", "get_bound_field", "extension", "allow_folders", "user", "part", "file", "invalid_image", "invalid_date", "peppers", "jsonfield", "errors", "core", "datetime_input_formats", "r", "dateform", "maxlength=\"100", "favor", "strip", "rgba", "traceback", "template_name", "subject:<div", "representations", "names", "name=\"username", "enumeration", "parse_datetime", "parse_duration", "input_date_formats", "aggregates", "float", "s.", "representation", "date", "set", "normalization", "foo", "cleaned_data", "modelmultiplechoicefield", "foreignkey", "relationship", "limit", "multivaluefield", "expression", "reference", "instance", "getpixel", "code", "increases", "multiwidget", "url:<input", "as_ul", "max.</div><input", "step", "field.html", "dateinput"], "type": "documentation"},
{"title": "The Forms API", "url": "https://docs.djangoproject.com/en/5.1/ref/forms/api/", "content": "The Forms API ¶ About this document This document covers the gritty details of Django’s forms API. You should\nread the introduction to working with forms first. Bound and unbound forms ¶ A Form instance is either bound to a set of data, or unbound . If it’s bound to a set of data, it’s capable of validating that data\nand rendering the form as HTML with the data displayed in the HTML. If it’s unbound , it cannot do validation (because there’s no data to\nvalidate!), but it can still render the blank form as HTML. class Form [source] ¶ To create an unbound Form instance, instantiate the class: >>> f = ContactForm () To bind data to a form, pass the data as a dictionary as the first parameter to\nyour Form class constructor: >>> data = { ... \"subject\" : \"hello\" , ... \"message\" : \"Hi there\" , ... \"sender\" : \"foo@example.com\" , ... \"cc_myself\" : True , ... } >>> f = ContactForm ( data ) In this dictionary, the keys are the field names, which correspond to the\nattributes in your Form class. The values are the data you’re trying to\nvalidate. These will usually be strings, but there’s no requirement that they be\nstrings; the type of data you pass depends on the Field , as we’ll see\nin a moment. Form. is_bound ¶ If you need to distinguish between bound and unbound form instances at runtime,\ncheck the value of the form’s is_bound attribute: >>> f = ContactForm () >>> f . is_bound False >>> f = ContactForm ({ \"subject\" : \"hello\" }) >>> f . is_bound True Note that passing an empty dictionary creates a bound form with empty data: >>> f = ContactForm ({}) >>> f . is_bound True If you have a bound Form instance and want to change the data somehow,\nor if you want to bind an unbound Form instance to some data, create\nanother Form instance. There is no way to change data in a Form instance. Once a Form instance has been created, you\nshould consider its data immutable, whether it has data or not. Using forms to validate data ¶ Form. clean () ¶ Implement a clean() method on your Form when you must add custom\nvalidation for fields that are interdependent. See Cleaning and validating fields that depend on each other for example usage. Form. is_valid () ¶ The primary task of a Form object is to validate data. With a bound Form instance, call the is_valid() method to run validation\nand return a boolean designating whether the data was valid: >>> data = { ... \"subject\" : \"hello\" , ... \"message\" : \"Hi there\" , ... \"sender\" : \"foo@example.com\" , ... \"cc_myself\" : True , ... } >>> f = ContactForm ( data ) >>> f . is_valid () True Let’s try with some invalid data. In this case, subject is blank (an error,\nbecause all fields are required by default) and sender is not a valid\nemail address: >>> data = { ... \"subject\" : \"\" , ... \"message\" : \"Hi there\" , ... \"sender\" : \"invalid email address\" , ... \"cc_myself\" : True , ... } >>> f = ContactForm ( data ) >>> f . is_valid () False Form. errors ¶ Access the errors attribute to get a dictionary of error\nmessages: >>> f . errors {'sender': ['Enter a valid email address.'], 'subject': ['This field is required.']} In this dictionary, the keys are the field names, and the values are lists of\nstrings representing the error messages. The error messages are stored\nin lists because a field can have multiple error messages. You can access errors without having to call is_valid() first. The form’s data will be validated the first time\neither you call is_valid() or access errors . The validation routines will only get called once, regardless of how many times\nyou access errors or call is_valid() . This means that\nif validation has side effects, those side effects will only be triggered once. Form.errors. as_data () ¶ Returns a dict that maps fields to their original ValidationError instances. >>> f . errors . as_data () {'sender': [ValidationError(['Enter a valid email address.'])], 'subject': [ValidationError(['This field is required.'])]} Use this method anytime you need to identify an error by its code . This\nenables things like rewriting the error’s message or writing custom logic in a\nview when a given error is present. It can also be used to serialize the errors\nin a custom format (e.g. XML); for instance, as_json() relies on as_data() . The need for the as_data() method is due to backwards compatibility.\nPreviously ValidationError instances were lost as soon as their rendered error messages were added to the Form.errors dictionary.\nIdeally Form.errors would have stored ValidationError instances\nand methods with an as_ prefix could render them, but it had to be done\nthe other way around in order not to break code that expects rendered error\nmessages in Form.errors . Form.errors. as_json ( escape_html = False ) ¶ Returns the errors serialized as JSON. >>> f . errors . as_json () {\"sender\": [{\"message\": \"Enter a valid email address.\", \"code\": \"invalid\"}], \"subject\": [{\"message\": \"This field is required.\", \"code\": \"required\"}]} By default, as_json() does not escape its output. If you are using it for\nsomething like AJAX requests to a form view where the client interprets the\nresponse and inserts errors into the page, you’ll want to be sure to escape the\nresults on the client-side to avoid the possibility of a cross-site scripting\nattack. You can do this in JavaScript with element.textContent = errorText or with jQuery’s $(el).text(errorText) (rather than its .html() function). If for some reason you don’t want to use client-side escaping, you can also\nset escape_html=True and error messages will be escaped so you can use them\ndirectly in HTML. Form.errors. get_json_data ( escape_html = False ) ¶ Returns the errors as a dictionary suitable for serializing to JSON. Form.errors.as_json() returns serialized JSON, while this returns the\nerror data before it’s serialized. The escape_html parameter behaves as described in Form.errors.as_json() . Form. add_error ( field , error ) ¶ This method allows adding errors to specific fields from within the Form.clean() method, or from outside the form altogether; for instance\nfrom a view. The field argument is the name of the field to which the errors\nshould be added. If its value is None the error will be treated as\na non-field error as returned by Form.non_field_errors() . The error argument can be a string, or preferably an instance of ValidationError . See Raising ValidationError for best practices\nwhen defining form errors. Note that Form.add_error() automatically removes the relevant field from cleaned_data . Form. has_error ( field , code = None ) ¶ This method returns a boolean designating whether a field has an error with\na specific error code . If code is None , it will return True if the field contains any errors at all. To check for non-field errors use NON_FIELD_ERRORS as the field parameter. Form. non_field_errors () ¶ This method returns the list of errors from Form.errors that aren’t associated with a particular field.\nThis includes ValidationError s that are raised in Form.clean() and errors added using Form.add_error(None, \"...\") . Behavior of unbound forms ¶ It’s meaningless to validate a form with no data, but, for the record, here’s\nwhat happens with unbound forms: >>> f = ContactForm () >>> f . is_valid () False >>> f . errors {} Initial form values ¶ Form. initial ¶ Use initial to declare the initial value of form fields at\nruntime. For example, you might want to fill in a username field with the\nusername of the current session. To accomplish this, use the initial argument to a Form .\nThis argument, if given, should be a dictionary mapping field names to initial\nvalues. Only include the fields for which you’re specifying an initial value;\nit’s not necessary to include every field in your form. For example: >>> f = ContactForm ( initial = { \"subject\" : \"Hi there!\" }) These values are only displayed for unbound forms, and they’re not used as\nfallback values if a particular value isn’t provided. If a Field defines initial and you\ninclude initial when instantiating the Form , then the latter initial will have precedence. In this example, initial is provided both\nat the field level and at the form instance level, and the latter gets\nprecedence: >>> from django import forms >>> class CommentForm ( forms . Form ): ... name = forms . CharField ( initial = \"class\" ) ... url = forms . URLField () ... comment = forms . CharField () ... >>> f = CommentForm ( initial = { \"name\" : \"instance\" }, auto_id = False ) >>> print ( f ) <div>Name:<input type=\"text\" name=\"name\" value=\"instance\" required></div> <div>Url:<input type=\"url\" name=\"url\" required></div> <div>Comment:<input type=\"text\" name=\"comment\" required></div> Form. get_initial_for_field ( field , field_name ) ¶ Returns the initial data for a form field. It retrieves the data from Form.initial if present, otherwise trying Field.initial .\nCallable values are evaluated. It is recommended to use BoundField.initial over get_initial_for_field() because BoundField.initial has a\nsimpler interface. Also, unlike get_initial_for_field() , BoundField.initial caches its values. This is useful especially when\ndealing with callables whose return values can change (e.g. datetime.now or uuid.uuid4 ): >>> import uuid >>> class UUIDCommentForm ( CommentForm ): ... identifier = forms . UUIDField ( initial = uuid . uuid4 ) ... >>> f = UUIDCommentForm () >>> f . get_initial_for_field ( f . fields [ \"identifier\" ], \"identifier\" ) UUID('972ca9e4-7bfe-4f5b-af7d-07b3aa306334') >>> f . get_initial_for_field ( f . fields [ \"identifier\" ], \"identifier\" ) UUID('1b411fab-844e-4dec-bd4f-e9b0495f04d0') >>> # Using BoundField.initial, for comparison >>> f [ \"identifier\" ] . initial UUID('28a09c59-5f00-4ed9-9179-a3b074fa9c30') >>> f [ \"identifier\" ] . initial UUID('28a09c59-5f00-4ed9-9179-a3b074fa9c30') Checking which form data has changed ¶ Form. has_changed () ¶ Use the has_changed() method on your Form when you need to check if the\nform data has been changed from the initial data. >>> data = { ... \"subject\" : \"hello\" , ... \"message\" : \"Hi there\" , ... \"sender\" : \"foo@example.com\" , ... \"cc_myself\" : True , ... } >>> f = ContactForm ( data , initial = data ) >>> f . has_changed () False When the form is submitted, we reconstruct it and provide the original data\nso that the comparison can be done: >>> f = ContactForm ( request . POST , initial = data ) >>> f . has_changed () has_changed() will be True if the data from request.POST differs\nfrom what was provided in initial or False otherwise. The\nresult is computed by calling Field.has_changed() for each field in the\nform. Form. changed_data ¶ The changed_data attribute returns a list of the names of the fields whose\nvalues in the form’s bound data (usually request.POST ) differ from what was\nprovided in initial . It returns an empty list if no data differs. >>> f = ContactForm ( request . POST , initial = data ) >>> if f . has_changed (): ... print ( \"The following fields changed: %s \" % \", \" . join ( f . changed_data )) ... >>> f . changed_data ['subject', 'message'] Accessing the fields from the form ¶ Form. fields ¶ You can access the fields of Form instance from its fields attribute: >>> for row in f . fields . values (): ... print ( row ) ... <django.forms.fields.CharField object at 0x7ffaac632510> <django.forms.fields.URLField object at 0x7ffaac632f90> <django.forms.fields.CharField object at 0x7ffaac3aa050> >>> f . fields [ \"name\" ] <django.forms.fields.CharField object at 0x7ffaac6324d0> You can alter the field and BoundField of Form instance to\nchange the way it is presented in the form: >>> f . as_div () . split ( \"</div>\" )[ 0 ] '<div><label for=\"id_subject\">Subject:</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"id_subject\">' >>> f [ \"subject\" ] . label = \"Topic\" >>> f . as_div () . split ( \"</div>\" )[ 0 ] '<div><label for=\"id_subject\">Topic:</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"id_subject\">' Beware not to alter the base_fields attribute because this modification\nwill influence all subsequent ContactForm instances within the same Python\nprocess: >>> f . base_fields [ \"subject\" ] . label_suffix = \"?\" >>> another_f = ContactForm ( auto_id = False ) >>> another_f . as_div () . split ( \"</div>\" )[ 0 ] '<div><label for=\"id_subject\">Subject?</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"id_subject\">' Accessing “clean” data ¶ Form. cleaned_data ¶ Each field in a Form class is responsible not only for validating\ndata, but also for “cleaning” it – normalizing it to a consistent format. This\nis a nice feature, because it allows data for a particular field to be input in\na variety of ways, always resulting in consistent output. For example, DateField normalizes input into a\nPython datetime.date object. Regardless of whether you pass it a string in\nthe format '1994-07-15' , a datetime.date object, or a number of other\nformats, DateField will always normalize it to a datetime.date object\nas long as it’s valid. Once you’ve created a Form instance with a set of data and validated\nit, you can access the clean data via its cleaned_data attribute: >>> data = { ... \"subject\" : \"hello\" , ... \"message\" : \"Hi there\" , ... \"sender\" : \"foo@example.com\" , ... \"cc_myself\" : True , ... } >>> f = ContactForm ( data ) >>> f . is_valid () True >>> f . cleaned_data {'cc_myself': True, 'message': 'Hi there', 'sender': 'foo@example.com', 'subject': 'hello'} Note that any text-based field – such as CharField or EmailField –\nalways cleans the input into a string. We’ll cover the encoding implications\nlater in this document. If your data does not validate, the cleaned_data dictionary contains\nonly the valid fields: >>> data = { ... \"subject\" : \"\" , ... \"message\" : \"Hi there\" , ... \"sender\" : \"invalid email address\" , ... \"cc_myself\" : True , ... } >>> f = ContactForm ( data ) >>> f . is_valid () False >>> f . cleaned_data {'cc_myself': True, 'message': 'Hi there'} cleaned_data will always only contain a key for fields defined in the Form , even if you pass extra data when you define the Form . In this\nexample, we pass a bunch of extra fields to the ContactForm constructor,\nbut cleaned_data contains only the form’s fields: >>> data = { ... \"subject\" : \"hello\" , ... \"message\" : \"Hi there\" , ... \"sender\" : \"foo@example.com\" , ... \"cc_myself\" : True , ... \"extra_field_1\" : \"foo\" , ... \"extra_field_2\" : \"bar\" , ... \"extra_field_3\" : \"baz\" , ... } >>> f = ContactForm ( data ) >>> f . is_valid () True >>> f . cleaned_data # Doesn't contain extra_field_1, etc. {'cc_myself': True, 'message': 'Hi there', 'sender': 'foo@example.com', 'subject': 'hello'} When the Form is valid, cleaned_data will include a key and value for all its fields, even if the data didn’t include a value for some optional\nfields. In this example, the data dictionary doesn’t include a value for the nick_name field, but cleaned_data includes it, with an empty value: >>> from django import forms >>> class OptionalPersonForm ( forms . Form ): ... first_name = forms . CharField () ... last_name = forms . CharField () ... nick_name = forms . CharField ( required = False ) ... >>> data = { \"first_name\" : \"John\" , \"last_name\" : \"Lennon\" } >>> f = OptionalPersonForm ( data ) >>> f . is_valid () True >>> f . cleaned_data {'nick_name': '', 'first_name': 'John', 'last_name': 'Lennon'} In this above example, the cleaned_data value for nick_name is set to an\nempty string, because nick_name is CharField , and CharField s treat\nempty values as an empty string. Each field type knows what its “blank” value\nis – e.g., for DateField , it’s None instead of the empty string. For\nfull details on each field’s behavior in this case, see the “Empty value” note\nfor each field in the “Built-in Field classes” section below. You can write code to perform validation for particular form fields (based on\ntheir name) or for the form as a whole (considering combinations of various\nfields). More information about this is in Form and field validation . Outputting forms as HTML ¶ The second task of a Form object is to render itself as HTML. To do so, print it: >>> f = ContactForm () >>> print ( f ) <div><label for=\"id_subject\">Subject:</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"id_subject\"></div> <div><label for=\"id_message\">Message:</label><input type=\"text\" name=\"message\" required id=\"id_message\"></div> <div><label for=\"id_sender\">Sender:</label><input type=\"email\" name=\"sender\" required id=\"id_sender\"></div> <div><label for=\"id_cc_myself\">Cc myself:</label><input type=\"checkbox\" name=\"cc_myself\" id=\"id_cc_myself\"></div> If the form is bound to data, the HTML output will include that data\nappropriately. For example, if a field is represented by an <input type=\"text\"> , the data will be in the value attribute. If a\nfield is represented by an <input type=\"checkbox\"> , then that HTML will\ninclude checked if appropriate: >>> data = { ... \"subject\" : \"hello\" , ... \"message\" : \"Hi there\" , ... \"sender\" : \"foo@example.com\" , ... \"cc_myself\" : True , ... } >>> f = ContactForm ( data ) >>> print ( f ) <div><label for=\"id_subject\">Subject:</label><input type=\"text\" name=\"subject\" value=\"hello\" maxlength=\"100\" required id=\"id_subject\"></div> <div><label for=\"id_message\">Message:</label><input type=\"text\" name=\"message\" value=\"Hi there\" required id=\"id_message\"></div> <div><label for=\"id_sender\">Sender:</label><input type=\"email\" name=\"sender\" value=\"foo@example.com\" required id=\"id_sender\"></div> <div><label for=\"id_cc_myself\">Cc myself:</label><input type=\"checkbox\" name=\"cc_myself\" id=\"id_cc_myself\" checked></div> This default output wraps each field with a <div> . Notice the following: For flexibility, the output does not include the <form> and </form> tags or an <input type=\"submit\"> tag. It’s your job to do that. Each field type has a default HTML representation. CharField is\nrepresented by an <input type=\"text\"> and EmailField by an <input type=\"email\"> . BooleanField(null=False) is represented by an <input type=\"checkbox\"> . Note these are merely sensible defaults; you can\nspecify which HTML to use for a given field by using widgets, which we’ll\nexplain shortly. The HTML name for each tag is taken directly from its attribute name\nin the ContactForm class. The text label for each field – e.g. 'Subject:' , 'Message:' and 'Cc myself:' is generated from the field name by converting all\nunderscores to spaces and upper-casing the first letter. Again, note\nthese are merely sensible defaults; you can also specify labels manually. Each text label is surrounded in an HTML <label> tag, which points\nto the appropriate form field via its id . Its id , in turn, is\ngenerated by prepending 'id_' to the field name. The id attributes and <label> tags are included in the output by default, to\nfollow best practices, but you can change that behavior. The output uses HTML5 syntax, targeting <!DOCTYPE html> . For example,\nit uses boolean attributes such as checked rather than the XHTML style\nof checked='checked' . Although <div> output is the default output style when you print a form\nyou can customize the output by using your own form template which can be set\nsite-wide, per-form, or per-instance. See Reusable form templates . Default rendering ¶ The default rendering when you print a form uses the following methods and\nattributes. template_name ¶ Form. template_name ¶ The name of the template rendered if the form is cast into a string, e.g. via print(form) or in a template via {{ form }} . By default, a property returning the value of the renderer’s form_template_name . You may set it\nas a string template name in order to override that for a particular form\nclass. render() ¶ Form. render ( template_name = None , context = None , renderer = None ) ¶ The render method is called by __str__ as well as the Form.as_div() , Form.as_table() , Form.as_p() , and Form.as_ul() methods.\nAll arguments are optional and default to: template_name : Form.template_name context : Value returned by Form.get_context() renderer : Value returned by Form.default_renderer By passing template_name you can customize the template used for just a\nsingle call. get_context() ¶ Form. get_context () ¶ Return the template context for rendering the form. The available context is: form : The bound form. fields : All bound fields, except the hidden fields. hidden_fields : All hidden bound fields. errors : All non field related or hidden field related form errors. template_name_label ¶ Form. template_name_label ¶ The template used to render a field’s <label> , used when calling BoundField.label_tag() / legend_tag() . Can be changed per\nform by overriding this attribute or more generally by overriding the default\ntemplate, see also Overriding built-in form templates . Output styles ¶ The recommended approach for changing form output style is to set a custom form\ntemplate either site-wide, per-form, or per-instance. See Reusable form templates for examples. The following helper functions are provided for backward compatibility and are\na proxy to Form.render() passing a particular template_name value. Note Of the framework provided templates and output styles, the default as_div() is recommended over the as_p() , as_table() , and as_ul() versions as the template implements <fieldset> and <legend> to group related inputs and is easier for screen reader users\nto navigate. Each helper pairs a form method with an attribute giving the appropriate\ntemplate name. as_div() ¶ Form. template_name_div ¶ The template used by as_div() . Default: 'django/forms/div.html' . Form. as_div () ¶ as_div() renders the form as a series of <div> elements, with each <div> containing one field, such as: >>> f = ContactForm () >>> f . as_div () … gives HTML like: < div > < label for = \"id_subject\" > Subject: </ label > < input type = \"text\" name = \"subject\" maxlength = \"100\" required id = \"id_subject\" > </ div > < div > < label for = \"id_message\" > Message: </ label > < input type = \"text\" name = \"message\" required id = \"id_message\" > </ div > < div > < label for = \"id_sender\" > Sender: </ label > < input type = \"email\" name = \"sender\" required id = \"id_sender\" > </ div > < div > < label for = \"id_cc_myself\" > Cc myself: </ label > < input type = \"checkbox\" name = \"cc_myself\" id = \"id_cc_myself\" > </ div > as_p() ¶ Form. template_name_p ¶ The template used by as_p() . Default: 'django/forms/p.html' . Form. as_p () ¶ as_p() renders the form as a series of <p> tags, with each <p> containing one field: >>> f = ContactForm () >>> f . as_p () '<p><label for=\"id_subject\">Subject:</label> <input id=\"id_subject\" type=\"text\" name=\"subject\" maxlength=\"100\" required></p>\\n<p><label for=\"id_message\">Message:</label> <input type=\"text\" name=\"message\" id=\"id_message\" required></p>\\n<p><label for=\"id_sender\">Sender:</label> <input type=\"text\" name=\"sender\" id=\"id_sender\" required></p>\\n<p><label for=\"id_cc_myself\">Cc myself:</label> <input type=\"checkbox\" name=\"cc_myself\" id=\"id_cc_myself\"></p>' >>> print ( f . as_p ()) <p><label for=\"id_subject\">Subject:</label> <input id=\"id_subject\" type=\"text\" name=\"subject\" maxlength=\"100\" required></p> <p><label for=\"id_message\">Message:</label> <input type=\"text\" name=\"message\" id=\"id_message\" required></p> <p><label for=\"id_sender\">Sender:</label> <input type=\"email\" name=\"sender\" id=\"id_sender\" required></p> <p><label for=\"id_cc_myself\">Cc myself:</label> <input type=\"checkbox\" name=\"cc_myself\" id=\"id_cc_myself\"></p> as_ul() ¶ Form. template_name_ul ¶ The template used by as_ul() . Default: 'django/forms/ul.html' . Form. as_ul () ¶ as_ul() renders the form as a series of <li> tags, with each <li> containing one field. It does not include the <ul> or </ul> , so that\nyou can specify any HTML attributes on the <ul> for flexibility: >>> f = ContactForm () >>> f . as_ul () '<li><label for=\"id_subject\">Subject:</label> <input id=\"id_subject\" type=\"text\" name=\"subject\" maxlength=\"100\" required></li>\\n<li><label for=\"id_message\">Message:</label> <input type=\"text\" name=\"message\" id=\"id_message\" required></li>\\n<li><label for=\"id_sender\">Sender:</label> <input type=\"email\" name=\"sender\" id=\"id_sender\" required></li>\\n<li><label for=\"id_cc_myself\">Cc myself:</label> <input type=\"checkbox\" name=\"cc_myself\" id=\"id_cc_myself\"></li>' >>> print ( f . as_ul ()) <li><label for=\"id_subject\">Subject:</label> <input id=\"id_subject\" type=\"text\" name=\"subject\" maxlength=\"100\" required></li> <li><label for=\"id_message\">Message:</label> <input type=\"text\" name=\"message\" id=\"id_message\" required></li> <li><label for=\"id_sender\">Sender:</label> <input type=\"email\" name=\"sender\" id=\"id_sender\" required></li> <li><label for=\"id_cc_myself\">Cc myself:</label> <input type=\"checkbox\" name=\"cc_myself\" id=\"id_cc_myself\"></li> as_table() ¶ Form. template_name_table ¶ The template used by as_table() . Default: 'django/forms/table.html' . Form. as_table () ¶ as_table() renders the form as an HTML <table> : >>> f = ContactForm () >>> f . as_table () '<tr><th><label for=\"id_subject\">Subject:</label></th><td><input id=\"id_subject\" type=\"text\" name=\"subject\" maxlength=\"100\" required></td></tr>\\n<tr><th><label for=\"id_message\">Message:</label></th><td><input type=\"text\" name=\"message\" id=\"id_message\" required></td></tr>\\n<tr><th><label for=\"id_sender\">Sender:</label></th><td><input type=\"email\" name=\"sender\" id=\"id_sender\" required></td></tr>\\n<tr><th><label for=\"id_cc_myself\">Cc myself:</label></th><td><input type=\"checkbox\" name=\"cc_myself\" id=\"id_cc_myself\"></td></tr>' >>> print ( f . as_table ()) <tr><th><label for=\"id_subject\">Subject:</label></th><td><input id=\"id_subject\" type=\"text\" name=\"subject\" maxlength=\"100\" required></td></tr> <tr><th><label for=\"id_message\">Message:</label></th><td><input type=\"text\" name=\"message\" id=\"id_message\" required></td></tr> <tr><th><label for=\"id_sender\">Sender:</label></th><td><input type=\"email\" name=\"sender\" id=\"id_sender\" required></td></tr> <tr><th><label for=\"id_cc_myself\">Cc myself:</label></th><td><input type=\"checkbox\" name=\"cc_myself\" id=\"id_cc_myself\"></td></tr> Styling required or erroneous form rows ¶ Form. error_css_class ¶ Form. required_css_class ¶ It’s pretty common to style form rows and fields that are required or have\nerrors. For example, you might want to present required form rows in bold and\nhighlight errors in red. The Form class has a couple of hooks you can use to add class attributes to required rows or to rows with errors: set the Form.error_css_class and/or Form.required_css_class attributes: from django import forms class ContactForm ( forms . Form ): error_css_class = \"error\" required_css_class = \"required\" # ... and the rest of your fields here Once you’ve done that, rows will be given \"error\" and/or \"required\" classes, as needed. The HTML will look something like: >>> f = ContactForm ( data ) >>> print ( f ) <div class=\"required\"><label for=\"id_subject\" class=\"required\">Subject:</label> ... <div class=\"required\"><label for=\"id_message\" class=\"required\">Message:</label> ... <div class=\"required\"><label for=\"id_sender\" class=\"required\">Sender:</label> ... <div><label for=\"id_cc_myself\">Cc myself:</label> ... >>> f [ \"subject\" ] . label_tag () <label class=\"required\" for=\"id_subject\">Subject:</label> >>> f [ \"subject\" ] . legend_tag () <legend class=\"required\" for=\"id_subject\">Subject:</legend> >>> f [ \"subject\" ] . label_tag ( attrs = { \"class\" : \"foo\" }) <label for=\"id_subject\" class=\"foo required\">Subject:</label> >>> f [ \"subject\" ] . legend_tag ( attrs = { \"class\" : \"foo\" }) <legend for=\"id_subject\" class=\"foo required\">Subject:</legend> Configuring form elements’ HTML id attributes and <label> tags ¶ Form. auto_id ¶ By default, the form rendering methods include: HTML id attributes on the form elements. The corresponding <label> tags around the labels. An HTML <label> tag\ndesignates which label text is associated with which form element. This small\nenhancement makes forms more usable and more accessible to assistive devices.\nIt’s always a good idea to use <label> tags. The id attribute values are generated by prepending id_ to the form\nfield names.  This behavior is configurable, though, if you want to change the id convention or remove HTML id attributes and <label> tags\nentirely. Use the auto_id argument to the Form constructor to control the id and label behavior. This argument must be True , False or a string. If auto_id is False , then the form output will not include <label> tags nor id attributes: >>> f = ContactForm ( auto_id = False ) >>> print ( f ) <div>Subject:<input type=\"text\" name=\"subject\" maxlength=\"100\" required></div> <div>Message:<textarea name=\"message\" cols=\"40\" rows=\"10\" required></textarea></div> <div>Sender:<input type=\"email\" name=\"sender\" required></div> <div>Cc myself:<input type=\"checkbox\" name=\"cc_myself\"></div> If auto_id is set to True , then the form output will include <label> tags and will use the field name as its id for each form\nfield: >>> f = ContactForm ( auto_id = True ) >>> print ( f ) <div><label for=\"subject\">Subject:</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"subject\"></div> <div><label for=\"message\">Message:</label><textarea name=\"message\" cols=\"40\" rows=\"10\" required id=\"message\"></textarea></div> <div><label for=\"sender\">Sender:</label><input type=\"email\" name=\"sender\" required id=\"sender\"></div> <div><label for=\"cc_myself\">Cc myself:</label><input type=\"checkbox\" name=\"cc_myself\" id=\"cc_myself\"></div> If auto_id is set to a string containing the format character '%s' ,\nthen the form output will include <label> tags, and will generate id attributes based on the format string. For example, for a format string 'field_%s' , a field named subject will get the id value 'field_subject' . Continuing our example: >>> f = ContactForm ( auto_id = \"id_for_ %s \" ) >>> print ( f ) <div><label for=\"id_for_subject\">Subject:</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"id_for_subject\"></div> <div><label for=\"id_for_message\">Message:</label><textarea name=\"message\" cols=\"40\" rows=\"10\" required id=\"id_for_message\"></textarea></div> <div><label for=\"id_for_sender\">Sender:</label><input type=\"email\" name=\"sender\" required id=\"id_for_sender\"></div> <div><label for=\"id_for_cc_myself\">Cc myself:</label><input type=\"checkbox\" name=\"cc_myself\" id=\"id_for_cc_myself\"></div> If auto_id is set to any other true value – such as a string that doesn’t\ninclude %s – then the library will act as if auto_id is True . By default, auto_id is set to the string 'id_%s' . Form. label_suffix ¶ A translatable string (defaults to a colon ( : ) in English) that will be\nappended after any label name when a form is rendered. It’s possible to customize that character, or omit it entirely, using the label_suffix parameter: >>> f = ContactForm ( auto_id = \"id_for_ %s \" , label_suffix = \"\" ) >>> print ( f ) <div><label for=\"id_for_subject\">Subject</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"id_for_subject\"></div> <div><label for=\"id_for_message\">Message</label><textarea name=\"message\" cols=\"40\" rows=\"10\" required id=\"id_for_message\"></textarea></div> <div><label for=\"id_for_sender\">Sender</label><input type=\"email\" name=\"sender\" required id=\"id_for_sender\"></div> <div><label for=\"id_for_cc_myself\">Cc myself</label><input type=\"checkbox\" name=\"cc_myself\" id=\"id_for_cc_myself\"></div> >>> f = ContactForm ( auto_id = \"id_for_ %s \" , label_suffix = \" ->\" ) >>> print ( f ) <div><label for=\"id_for_subject\">Subject -&gt;</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"id_for_subject\"></div> <div><label for=\"id_for_message\">Message -&gt;</label><textarea name=\"message\" cols=\"40\" rows=\"10\" required id=\"id_for_message\"></textarea></div> <div><label for=\"id_for_sender\">Sender -&gt;</label><input type=\"email\" name=\"sender\" required id=\"id_for_sender\"></div> <div><label for=\"id_for_cc_myself\">Cc myself -&gt;</label><input type=\"checkbox\" name=\"cc_myself\" id=\"id_for_cc_myself\"></div> Note that the label suffix is added only if the last character of the\nlabel isn’t a punctuation character (in English, those are . , ! , ? or : ). Fields can also define their own label_suffix .\nThis will take precedence over Form.label_suffix . The suffix can also be overridden at runtime\nusing the label_suffix parameter to label_tag() / legend_tag() . Form. use_required_attribute ¶ When set to True (the default), required form fields will have the required HTML attribute. Formsets instantiate forms with use_required_attribute=False to avoid incorrect browser validation when\nadding and deleting forms from a formset. Configuring the rendering of a form’s widgets ¶ Form. default_renderer ¶ Specifies the renderer to use for the form. Defaults to None which means to use the default renderer specified by the FORM_RENDERER setting. You can set this as a class attribute when declaring your form or use the renderer argument to Form.__init__() . For example: from django import forms class MyForm ( forms . Form ): default_renderer = MyRenderer () or: form = MyForm ( renderer = MyRenderer ()) Notes on field ordering ¶ In the as_p() , as_ul() and as_table() shortcuts, the fields are\ndisplayed in the order in which you define them in your form class. For\nexample, in the ContactForm example, the fields are defined in the order subject , message , sender , cc_myself . To reorder the HTML\noutput, change the order in which those fields are listed in the class. There are several other ways to customize the order: Form. field_order ¶ By default Form.field_order=None , which retains the order in which you\ndefine the fields in your form class. If field_order is a list of field\nnames, the fields are ordered as specified by the list and remaining fields are\nappended according to the default order. Unknown field names in the list are\nignored. This makes it possible to disable a field in a subclass by setting it\nto None without having to redefine ordering. You can also use the Form.field_order argument to a Form to\noverride the field order. If a Form defines field_order and you include field_order when instantiating\nthe Form , then the latter field_order will have precedence. Form. order_fields ( field_order ) ¶ You may rearrange the fields any time using order_fields() with a list of\nfield names as in field_order . How errors are displayed ¶ If you render a bound Form object, the act of rendering will automatically\nrun the form’s validation if it hasn’t already happened, and the HTML output\nwill include the validation errors as a <ul class=\"errorlist\"> near the\nfield. The particular positioning of the error messages depends on the output\nmethod you’re using: >>> data = { ... \"subject\" : \"\" , ... \"message\" : \"Hi there\" , ... \"sender\" : \"invalid email address\" , ... \"cc_myself\" : True , ... } >>> f = ContactForm ( data , auto_id = False ) >>> print ( f ) <div>Subject: <ul class=\"errorlist\"><li>This field is required.</li></ul> <input type=\"text\" name=\"subject\" maxlength=\"100\" required aria-invalid=\"true\"> </div> <div>Message: <textarea name=\"message\" cols=\"40\" rows=\"10\" required>Hi there</textarea> </div> <div>Sender: <ul class=\"errorlist\"><li>Enter a valid email address.</li></ul> <input type=\"email\" name=\"sender\" value=\"invalid email address\" required aria-invalid=\"true\"> </div> <div>Cc myself: <input type=\"checkbox\" name=\"cc_myself\" checked> </div> Customizing the error list format ¶ class ErrorList ( initlist = None , error_class = None , renderer = None ) [source] ¶ By default, forms use django.forms.utils.ErrorList to format validation\nerrors. ErrorList is a list like object where initlist is the\nlist of errors. In addition this class has the following attributes and\nmethods. error_class ¶ The CSS classes to be used when rendering the error list. Any provided\nclasses are added to the default errorlist class. renderer ¶ Specifies the renderer to use for ErrorList .\nDefaults to None which means to use the default renderer\nspecified by the FORM_RENDERER setting. template_name ¶ The name of the template used when calling __str__ or render() . By default this is 'django/forms/errors/list/default.html' which is a proxy for the 'ul.html' template. template_name_text ¶ The name of the template used when calling as_text() . By default\nthis is 'django/forms/errors/list/text.html' . This template renders\nthe errors as a list of bullet points. template_name_ul ¶ The name of the template used when calling as_ul() . By default\nthis is 'django/forms/errors/list/ul.html' . This template renders\nthe errors in <li> tags with a wrapping <ul> with the CSS\nclasses as defined by error_class . get_context () [source] ¶ Return context for rendering of errors in a template. The available context is: errors : A list of the errors. error_class : A string of CSS classes. render ( template_name = None , context = None , renderer = None ) ¶ The render method is called by __str__ as well as by the as_ul() method. All arguments are optional and will default to: template_name : Value returned by template_name context : Value returned by get_context() renderer : Value returned by renderer as_text () ¶ Renders the error list using the template defined by template_name_text . as_ul () ¶ Renders the error list using the template defined by template_name_ul . If you’d like to customize the rendering of errors this can be achieved by\noverriding the template_name attribute or more generally by\noverriding the default template, see also Overriding built-in form templates . More granular output ¶ The as_p() , as_ul() , and as_table() methods are shortcuts –\nthey’re not the only way a form object can be displayed. class BoundField [source] ¶ Used to display HTML or access attributes for a single field of a Form instance. The __str__() method of this object displays the HTML for this field. To retrieve a single BoundField , use dictionary lookup syntax on your form\nusing the field’s name as the key: >>> form = ContactForm () >>> print ( form [ \"subject\" ]) <input id=\"id_subject\" type=\"text\" name=\"subject\" maxlength=\"100\" required> To retrieve all BoundField objects, iterate the form: >>> form = ContactForm () >>> for boundfield in form : ... print ( boundfield ) ... <input id=\"id_subject\" type=\"text\" name=\"subject\" maxlength=\"100\" required> <input type=\"text\" name=\"message\" id=\"id_message\" required> <input type=\"email\" name=\"sender\" id=\"id_sender\" required> <input type=\"checkbox\" name=\"cc_myself\" id=\"id_cc_myself\"> The field-specific output honors the form object’s auto_id setting: >>> f = ContactForm ( auto_id = False ) >>> print ( f [ \"message\" ]) <input type=\"text\" name=\"message\" required> >>> f = ContactForm ( auto_id = \"id_ %s \" ) >>> print ( f [ \"message\" ]) <input type=\"text\" name=\"message\" id=\"id_message\" required> Attributes of BoundField ¶ BoundField. auto_id [source] ¶ The HTML ID attribute for this BoundField . Returns an empty string\nif Form.auto_id is False . BoundField. data [source] ¶ This property returns the data for this BoundField extracted by the widget’s value_from_datadict() method, or None if it wasn’t given: >>> unbound_form = ContactForm () >>> print ( unbound_form [ \"subject\" ] . data ) None >>> bound_form = ContactForm ( data = { \"subject\" : \"My Subject\" }) >>> print ( bound_form [ \"subject\" ] . data ) My Subject BoundField. errors [source] ¶ A list-like object that is displayed\nas an HTML <ul class=\"errorlist\"> when printed: >>> data = { \"subject\" : \"hi\" , \"message\" : \"\" , \"sender\" : \"\" , \"cc_myself\" : \"\" } >>> f = ContactForm ( data , auto_id = False ) >>> print ( f [ \"message\" ]) <input type=\"text\" name=\"message\" required aria-invalid=\"true\"> >>> f [ \"message\" ] . errors ['This field is required.'] >>> print ( f [ \"message\" ] . errors ) <ul class=\"errorlist\"><li>This field is required.</li></ul> >>> f [ \"subject\" ] . errors [] >>> print ( f [ \"subject\" ] . errors ) >>> str ( f [ \"subject\" ] . errors ) '' When rendering a field with errors, aria-invalid=\"true\" will be set on\nthe field’s widget to indicate there is an error to screen reader users. Changed in Django 5.0: The aria-invalid=\"true\" was added when a field has errors. BoundField. field ¶ The form Field instance from the form class that\nthis BoundField wraps. BoundField. form ¶ The Form instance this BoundField is bound to. BoundField. help_text ¶ The help_text of the field. BoundField. html_name ¶ The name that will be used in the widget’s HTML name attribute. It takes\nthe form prefix into account. BoundField. id_for_label [source] ¶ Use this property to render the ID of this field. For example, if you are\nmanually constructing a <label> in your template (despite the fact that label_tag() / legend_tag() will do this\nfor you): < label for = \" {{ form.my_field.id_for_label }} \" > ... </ label > {{ my_field }} By default, this will be the field’s name prefixed by id_ (” id_my_field ” for the example above). You may modify the ID by setting attrs on the field’s widget. For example,\ndeclaring a field like this: my_field = forms . CharField ( widget = forms . TextInput ( attrs = { \"id\" : \"myFIELD\" })) and using the template above, would render something like: < label for = \"myFIELD\" > ... </ label >< input id = \"myFIELD\" type = \"text\" name = \"my_field\" required > BoundField. initial [source] ¶ Use BoundField.initial to retrieve initial data for a form field.\nIt retrieves the data from Form.initial if present, otherwise\ntrying Field.initial . Callable values are evaluated. See Initial form values for more examples. BoundField.initial caches its return value, which is useful\nespecially when dealing with callables whose return values can change (e.g. datetime.now or uuid.uuid4 ): >>> from datetime import datetime >>> class DatedCommentForm ( CommentForm ): ... created = forms . DateTimeField ( initial = datetime . now ) ... >>> f = DatedCommentForm () >>> f [ \"created\" ] . initial datetime.datetime(2021, 7, 27, 9, 5, 54) >>> f [ \"created\" ] . initial datetime.datetime(2021, 7, 27, 9, 5, 54) Using BoundField.initial is recommended over get_initial_for_field() . BoundField. is_hidden [source] ¶ Returns True if this BoundField ’s widget is\nhidden. BoundField. label ¶ The label of the field. This is used in label_tag() / legend_tag() . BoundField. name ¶ The name of this field in the form: >>> f = ContactForm () >>> print ( f [ \"subject\" ] . name ) subject >>> print ( f [ \"message\" ] . name ) message BoundField. template_name [source] ¶ New in Django 5.0. The name of the template rendered with BoundField.as_field_group() . A property returning the value of the template_name if set otherwise field_template_name . BoundField. use_fieldset [source] ¶ Returns the value of this BoundField widget’s use_fieldset attribute. BoundField. widget_type [source] ¶ Returns the lowercased class name of the wrapped field’s widget, with any\ntrailing input or widget removed. This may be used when building\nforms where the layout is dependent upon the widget type. For example: {% for field in form %} {% if field.widget_type == 'checkbox' %} # render one way {% else %} # render another way {% endif %} {% endfor %} Methods of BoundField ¶ BoundField. as_field_group () ¶ New in Django 5.0. Renders the field using BoundField.render() with default values\nwhich renders the BoundField , including its label, help text and errors\nusing the template’s template_name if set\notherwise field_template_name BoundField. as_hidden ( attrs = None , ** kwargs ) [source] ¶ Returns a string of HTML for representing this as an <input type=\"hidden\"> . **kwargs are passed to as_widget() . This method is primarily used internally. You should use a widget instead. BoundField. as_widget ( widget = None , attrs = None , only_initial = False ) [source] ¶ Renders the field by rendering the passed widget, adding any HTML\nattributes passed as attrs .  If no widget is specified, then the\nfield’s default widget will be used. only_initial is used by Django internals and should not be set\nexplicitly. BoundField. css_classes ( extra_classes = None ) [source] ¶ When you use Django’s rendering shortcuts, CSS classes are used to\nindicate required form fields or fields that contain errors. If you’re\nmanually rendering a form, you can access these CSS classes using the css_classes method: >>> f = ContactForm ( data = { \"message\" : \"\" }) >>> f [ \"message\" ] . css_classes () 'required' If you want to provide some additional classes in addition to the\nerror and required classes that may be required, you can provide\nthose classes as an argument: >>> f = ContactForm ( data = { \"message\" : \"\" }) >>> f [ \"message\" ] . css_classes ( \"foo bar\" ) 'foo bar required' BoundField. get_context () [source] ¶ New in Django 5.0. Return the template context for rendering the field. The available context\nis field being the instance of the bound field. BoundField. label_tag ( contents = None , attrs = None , label_suffix = None , tag = None ) [source] ¶ Renders a label tag for the form field using the template specified by Form.template_name_label . The available context is: field : This instance of the BoundField . contents : By default a concatenated string of BoundField.label and Form.label_suffix (or Field.label_suffix , if set). This can be overridden by the contents and label_suffix arguments. attrs : A dict containing for , Form.required_css_class , and id . id is generated by the\nfield’s widget attrs or BoundField.auto_id . Additional\nattributes can be provided by the attrs argument. use_tag : A boolean which is True if the label has an id .\nIf False the default template omits the tag . tag : An optional string to customize the tag, defaults to label . Tip In your template field is the instance of the BoundField .\nTherefore field.field accesses BoundField.field being\nthe field you declare, e.g. forms.CharField . To separately render the label tag of a form field, you can call its label_tag() method: >>> f = ContactForm ( data = { \"message\" : \"\" }) >>> print ( f [ \"message\" ] . label_tag ()) <label for=\"id_message\">Message:</label> If you’d like to customize the rendering this can be achieved by overriding\nthe Form.template_name_label attribute or more generally by\noverriding the default template, see also Overriding built-in form templates . BoundField. legend_tag ( contents = None , attrs = None , label_suffix = None ) [source] ¶ Calls label_tag() with tag='legend' to render the label with <legend> tags. This is useful when rendering radio and multiple\ncheckbox widgets where <legend> may be more appropriate than a <label> . BoundField. render ( template_name = None , context = None , renderer = None ) ¶ New in Django 5.0. The render method is called by as_field_group . All arguments are\noptional and default to: template_name : BoundField.template_name context : Value returned by BoundField.get_context() renderer : Value returned by Form.default_renderer By passing template_name you can customize the template used for just a\nsingle call. BoundField. value () [source] ¶ Use this method to render the raw value of this field as it would be rendered\nby a Widget : >>> initial = { \"subject\" : \"welcome\" } >>> unbound_form = ContactForm ( initial = initial ) >>> bound_form = ContactForm ( data = { \"subject\" : \"hi\" }, initial = initial ) >>> print ( unbound_form [ \"subject\" ] . value ()) welcome >>> print ( bound_form [ \"subject\" ] . value ()) hi Customizing BoundField ¶ If you need to access some additional information about a form field in a\ntemplate and using a subclass of Field isn’t\nsufficient, consider also customizing BoundField . A custom form field can override get_bound_field() : Field. get_bound_field ( form , field_name ) [source] ¶ Takes an instance of Form and the name of the field.\nThe return value will be used when accessing the field in a template. Most\nlikely it will be an instance of a subclass of BoundField . If you have a GPSCoordinatesField , for example, and want to be able to\naccess additional information about the coordinates in a template, this could\nbe implemented as follows: class GPSCoordinatesBoundField ( BoundField ): @property def country ( self ): \"\"\" Return the country the coordinates lie in or None if it can't be determined. \"\"\" value = self . value () if value : return get_country_from_coordinates ( value ) else : return None class GPSCoordinatesField ( Field ): def get_bound_field ( self , form , field_name ): return GPSCoordinatesBoundField ( form , self , field_name ) Now you can access the country in a template with {{ form.coordinates.country }} . Binding uploaded files to a form ¶ Dealing with forms that have FileField and ImageField fields\nis a little more complicated than a normal form. Firstly, in order to upload files, you’ll need to make sure that your <form> element correctly defines the enctype as \"multipart/form-data\" : < form enctype = \"multipart/form-data\" method = \"post\" action = \"/foo/\" > Secondly, when you use the form, you need to bind the file data. File\ndata is handled separately to normal form data, so when your form\ncontains a FileField and ImageField , you will need to specify\na second argument when you bind your form. So if we extend our\nContactForm to include an ImageField called mugshot , we\nneed to bind the file data containing the mugshot image: # Bound form with an image field >>> from django.core.files.uploadedfile import SimpleUploadedFile >>> data = { ... \"subject\" : \"hello\" , ... \"message\" : \"Hi there\" , ... \"sender\" : \"foo@example.com\" , ... \"cc_myself\" : True , ... } >>> file_data = { \"mugshot\" : SimpleUploadedFile ( \"face.jpg\" , b \"file data\" )} >>> f = ContactFormWithMugshot ( data , file_data ) In practice, you will usually specify request.FILES as the source\nof file data (just like you use request.POST as the source of\nform data): # Bound form with an image field, data from the request >>> f = ContactFormWithMugshot ( request . POST , request . FILES ) Constructing an unbound form is the same as always – omit both form data and file data: # Unbound form with an image field >>> f = ContactFormWithMugshot () Testing for multipart forms ¶ Form. is_multipart () ¶ If you’re writing reusable views or templates, you may not know ahead of time\nwhether your form is a multipart form or not. The is_multipart() method\ntells you whether the form requires multipart encoding for submission: >>> f = ContactFormWithMugshot () >>> f . is_multipart () True Here’s an example of how you might use this in a template: {% if form.is_multipart %} < form enctype = \"multipart/form-data\" method = \"post\" action = \"/foo/\" > {% else %} < form method = \"post\" action = \"/foo/\" > {% endif %} {{ form }} </ form > Subclassing forms ¶ If you have multiple Form classes that share fields, you can use\nsubclassing to remove redundancy. When you subclass a custom Form class, the resulting subclass will\ninclude all fields of the parent class(es), followed by the fields you define\nin the subclass. In this example, ContactFormWithPriority contains all the fields from ContactForm , plus an additional field, priority . The ContactForm fields are ordered first: >>> class ContactFormWithPriority ( ContactForm ): ... priority = forms . CharField () ... >>> f = ContactFormWithPriority ( auto_id = False ) >>> print ( f ) <div>Subject:<input type=\"text\" name=\"subject\" maxlength=\"100\" required></div> <div>Message:<textarea name=\"message\" cols=\"40\" rows=\"10\" required></textarea></div> <div>Sender:<input type=\"email\" name=\"sender\" required></div> <div>Cc myself:<input type=\"checkbox\" name=\"cc_myself\"></div> <div>Priority:<input type=\"text\" name=\"priority\" required></div> It’s possible to subclass multiple forms, treating forms as mixins. In this\nexample, BeatleForm subclasses both PersonForm and InstrumentForm (in that order), and its field list includes the fields from the parent\nclasses: >>> from django import forms >>> class PersonForm ( forms . Form ): ... first_name = forms . CharField () ... last_name = forms . CharField () ... >>> class InstrumentForm ( forms . Form ): ... instrument = forms . CharField () ... >>> class BeatleForm ( InstrumentForm , PersonForm ): ... haircut_type = forms . CharField () ... >>> b = BeatleForm ( auto_id = False ) >>> print ( b ) <div>First name:<input type=\"text\" name=\"first_name\" required></div> <div>Last name:<input type=\"text\" name=\"last_name\" required></div> <div>Instrument:<input type=\"text\" name=\"instrument\" required></div> <div>Haircut type:<input type=\"text\" name=\"haircut_type\" required></div> It’s possible to declaratively remove a Field inherited from a parent class\nby setting the name of the field to None on the subclass. For example: >>> from django import forms >>> class ParentForm ( forms . Form ): ... name = forms . CharField () ... age = forms . IntegerField () ... >>> class ChildForm ( ParentForm ): ... name = None ... >>> list ( ChildForm () . fields ) ['age'] Prefixes for forms ¶ Form. prefix ¶ You can put several Django forms inside one <form> tag. To give each Form its own namespace, use the prefix keyword argument: >>> mother = PersonForm ( prefix = \"mother\" ) >>> father = PersonForm ( prefix = \"father\" ) >>> print ( mother ) <div><label for=\"id_mother-first_name\">First name:</label><input type=\"text\" name=\"mother-first_name\" required id=\"id_mother-first_name\"></div> <div><label for=\"id_mother-last_name\">Last name:</label><input type=\"text\" name=\"mother-last_name\" required id=\"id_mother-last_name\"></div> >>> print ( father ) <div><label for=\"id_father-first_name\">First name:</label><input type=\"text\" name=\"father-first_name\" required id=\"id_father-first_name\"></div> <div><label for=\"id_father-last_name\">Last name:</label><input type=\"text\" name=\"father-last_name\" required id=\"id_father-last_name\"></div> The prefix can also be specified on the form class: >>> class PersonForm ( forms . Form ): ... ... ... prefix = \"person\" ...", "keywords": ["required></p>\\n", "punctuation", "text.html", "bullet", "type", "url", "emailfield", "fallback", "class(es", "for=\"id_message\">message:</label></th><td><input", "rows", "tip", "def", "renderer", "required\">subject:</legend", ".html", "username", "id", "form.get_context", "reason", "name=\"last_name", "classes", "id=\"id_for_subject\"></div", "method", "colon", "form.field_order", "imagefield", "name=\"sender", "points", "testing", "person", "labels", "boolean", "use", "redundancy", "encoding", "messages", "datetime.datetime(2021", "views", "escaping", "ul.html", "first_name\"></div", "callables", "ways", "xhtml", "form.my_field.id_for_label", "topic", "get_json_data", "way", "parentform", "default", "id=\"id_subject", "name=\"message", "template_name_p", "red", "client", "sender", "hidden_fields", "need", "page", "class=\"required\">subject:</label", "name=\"first_name", "for=\"id_message\">message:</label", "combinations", "age", "users", "as_div", "<", "textarea", "self", "label", "django.forms.fields", "last_name\">last", "argument", "@property", "for=\"id_cc_myself\">cc", "cols=\"40", "form_template_name", "personform", "dict", "form.as_div", "booleanfield(null", "message:<textarea", "required></li", "sender:<input", "form.__init", "comment", "for=\"id_father", "element", "name", "uuid('28a09c59", "implications", "first_name", "uuid.uuid4", "python", "charfield", "addition", "instances", "id=\"id_cc_myself", "constructor", "formats", "for=\"id_subject\">subject?</label><input", "myfield", "subclass", "lookup", "wrapping", "class=\"required\"><label", "class=\"required\">sender:</label", "tag", "address", "namespace", "true", "extra_classes", "*", "framework", "id=\"message\"></textarea></div", "use_required_attribute", "error_class", "requests", "turn", "label_suffix", "boundfield.as_field_group", "logic", "forms", "treat", "label_tag", "feature", "key", "aria", ".", "english", "helper", "dictionary", "suffix", "type=\"text", "browser", "errortext", "error", "for=\"id_for_subject\">subject", "template", "maxlength", "datetime", "%", "rendering", "setting", "order", "as_data", "-", "style", "specifies", "field_name", "for=\"message\">message:</label><textarea", "childform", "has_changed", "scripting", "foo@example.com", "act", "table", "for=\"id_message", "mixins", "behavior", "maps", "rest", "str", "files", "id=\"id_for_message\"></textarea></div", "import", "runtime", "bar", "moment", "datefield", "'", "information", "field_template_name", "json", "#", "result", "as_json", "section", "versions", "idea", "¶", "type:<input", "devices", "class=\"foo", "for=\"subject\">subject:</label><input", "couple", "for=\"id_for_message\">message", "layout", "for=\"id_subject\">subject:</label", "precedence", "format", "field.widget_type", "for=\"id_for_message\">message:</label><textarea", "render", "p.html", "name=\"comment", "example", "for=\"sender\">sender:</label><input", "session", "identifier", "beatleform", "value", "functions", "field_order", "styling", "form.errors.as_json", "source", "behaves", "print", "get_initial_for_field", "introduction", "django.forms.utils", "mother", "for=\"id_sender\">sender:</label></th><td><input", "html", "id=\"id_for_sender\"></div", "examples", "another_f", "enctype", "simpleuploadedfile", "things", "practices", "details", "proxy", "boundfield.label_tag", "form.required_css_class", "template_name_ul", "form.errors", "form", "object", "task", "name=\"cc_myself\"></div", "for=\"id_subject\">subject:</label></th><td><input", "boundfield.render", "attributes", "library", "comparison", "help_text", "for=\"cc_myself\">cc", "returns", "form.default_renderer", "as_field_group", "parent", "uuid('1b411fab-844e-4dec", "div", "has_error", "api", "wraps", "note", "required\">subject:</label", "post", "level", "django", "message", "fact", "for=\"id_sender\">sender:</label", "parameter", "validation", "for=\"id_for_sender\">sender</label><input", "syntax", "value_from_datadict", "text", "approach", "p><label", "field", "is_valid", "father", "get_country_from_coordinates", "contents", "strings", "name=\"url", "required_css_class", "integerfield", "tag='legend", "formsets", "textinput", "=", "add_error", "for=\"id_message\">message:</label><input", "required></li>\\n", "required></td></tr>\\n", "objects", "as_hidden", "defaults", "name=\"priority", "myrenderer", "lists", "attrs", "name=\"father", "interface", "get_context", "urlfield", "legend_tag", "field.label_suffix", "id=\"id_cc_myself\"></p", "rows=\"10", "widgets", "as_p", "field.field", "templates", "reader", "time", "letter", "as_table", "doctype", "property", "optionalpersonform", "bd4f", "use_fieldset", "for=\"id_for_sender\">sender:</label><input", "for=\"id_sender\">sender:</label><input", "subject:<input", "el).text(errortext", "site", "non_field_errors", "d", "myself</label><input", "css", "initlist", "required></td></tr", "boundfield.label", "record", "for=\"id_for_sender\">sender", "instrument", "html_name", "john", "print(form", "myself:</label><input", "extra_field_2", "id_message", "output", "fields", "name=\"cc_myself", "type=\"email", "li><label", "custom", "f", "methods", "side", "contactform", "keyword", "share", "renders", "for=\"id_for_message\">message</label><textarea", "widget_type", "coordinates", "auto_id", "none", "field_%s", "join", "process", "access", "default.html", "af7d-07b3aa306334", "for=\"id_subject\">topic:</label><input", "boundfield.field", "javascript", ">", "file_data", "value=\"instance", "email", "form.as_p", "convention", "uuid4", "first", "uuid", "prefixes", "bunch", "enhancement", "request", "cleaning", "b", "required></p", "mapping", "attack", "series", "screen", "cc_myself", "as_text", "data", "legend", "widget", "effects", "form.coordinates.country", "group", "changed_data", "boundfield.initial", "notes", "0x7ffaac632f90", "id_subject", "id=\"id_sender", "submission", "last_name\"></div", "form.label_suffix", "job", "myself:<input", "response", "formset", "form.error_css_class", "for=\"id_mother", "s", "there</textarea", "kwargs", "keys", "required></div", "gpscoordinatesboundfield", "order_fields", "form.add_error(none", "-&gt;</label><input", "elements", "arguments", "practice", "id=\"id_mother", "uuidcommentform", "last_name", "name:<input", "context", "hooks", "for=\"id_for_subject\">subject</label><input", "haircut_type", "field.initial", "unbound", "class=\"required\">message:</label", "form.template_name_label", "underscores", "jquery", "class=\"errorlist", "error_css_class", "row", "call", "value=\"foo@example.com", "id=\"id_cc_myself\"></td></tr", "haircut", "inserts", "base_fields", "name:</label><input", "div><label", "shortcuts", "image", "value=\"hello", "country", "id=\"id_for_cc_myself\"></div", "form.non_field_errors", "subject", "unbound_form", "false", "type=\"checkbox", "whole", "filefield", "prefix", "ul", "_", "customizing", "boundfield", "instrument:<input", "radio", "name=\"name", "requirement", "inputs", "checkbox", "flexibility", "datetime.now", "values", "form.template_name", "id_my_field", "lennon", "new", "baz", "times", "form_renderer", "clean", "caches", "compatibility", "commentform", "variety", "field_subject", "spaces", "name=\"mother", "comment:<input", "for=\"id_subject\">subject:</label><input", "input", "usage", "validationerror", "character", "datetime.date", "type=\"submit", "results", "cc", "form.as_ul", "hi", "priority:<input", "instrumentform", "calls", "n’t", "template_name_text", "id=\"id_father", "uuidfield", "id_cc_myself", "routines", "internals", "my_field", "positioning", "case", "class", "number", "xml", "initial", "id_%s", "address.</li></ul", "return", "html5", "div.html", "myself:</label></th><td><input", "action", "datedcommentform", "attribute", "function", "li", "string", "list", "styles", "for=\"id_for_subject\">subject:</label><input", "errorlist", "extra_field_3", "view", "myself:</label", "i", "datetimefield", "get_bound_field", "priority", "boundfield.get_context", "file", "errors", "endfor", "honors", "account", "maxlength=\"100", "a3b074fa9c30", "template_name", "possibility", "form.add_error", "names", "table.html", "for=\"id_subject\">subject:</legend", "modification", "id_sender", "myform", "for=\"id_for_cc_myself\">cc", "document", "tags", "representation", "value=\"invalid", "set", "contactformwithpriority", "is_multipart", "extra_field_1", "nick_name", "for=\"id_subject", "foo", "cleaned_data", "name=\"haircut_type", "template_name_label", "instance", "boundfield.auto_id", "code", "tr><th><label", "contactformwithmugshot", "url:<input", "as_ul", "id=\"cc_myself\"></div", "gpscoordinatesfield", "css_classes"], "type": "documentation"},
{"title": "Forms", "url": "https://docs.djangoproject.com/en/5.1/ref/forms/", "content": "Forms ¶ Detailed form API reference. For introductory material, see the Working with forms topic guide. The Forms API Bound and unbound forms Using forms to validate data Initial form values Checking which form data has changed Accessing the fields from the form Accessing “clean” data Outputting forms as HTML More granular output Customizing BoundField Binding uploaded files to a form Subclassing forms Prefixes for forms Form fields Core field arguments Checking if the field data has changed Built-in Field classes Slightly complex built-in Field classes Fields which handle relationships Creating custom fields Model Form Functions modelform_factory modelformset_factory inlineformset_factory Formset Functions formset_factory The form rendering API The low-level render API Built-in-template form renderers Context available in formset templates Context available in form templates Context available in field templates Context available in widget templates Overriding built-in formset templates Overriding built-in form templates Overriding built-in field templates Overriding built-in widget templates Widgets Specifying widgets Setting arguments for widgets Widgets inheriting from the Select widget Customizing widget instances Base widget classes Built-in widgets Form and field validation Raising ValidationError Using validation in practice", "keywords": ["formset", "prefixes", "bound", "material", "working", "api", "modelform_factory", "overriding", "topic", "output", "fields", "level", "template", "html", "¶", "widgets", "validation", "custom", "templates", "formset_factory", "field", "arguments", "practice", "inlineformset_factory", "data", "model", "widget", "binding", "select", "context", "classes", "form", "validationerror", "base", "modelformset_factory", "render", "customizing", "boundfield", "reference", "forms", "detailed", "relationships", "renderers", "guide", "values", "functions", "files"], "type": "documentation"},
{"title": "Uploaded Files and Upload Handlers", "url": "https://docs.djangoproject.com/en/5.1/ref/files/uploads/", "content": "Uploaded Files and Upload Handlers ¶ Uploaded files ¶ class UploadedFile [source] ¶ During file uploads, the actual file data is stored in request.FILES . Each entry in this dictionary is an UploadedFile object (or a subclass) – a wrapper around an uploaded file.\nYou’ll usually use one of these methods to access the uploaded content: UploadedFile. read () ¶ Read the entire uploaded data from the file. Be careful with this method:\nif the uploaded file is huge it can overwhelm your system if you try to\nread it into memory. You’ll probably want to use chunks() instead; see\nbelow. UploadedFile. multiple_chunks ( chunk_size = None ) ¶ Returns True if the uploaded file is big enough to require reading in\nmultiple chunks. By default this will be any file larger than 2.5 megabytes,\nbut that’s configurable; see below. UploadedFile. chunks ( chunk_size = None ) ¶ A generator returning chunks of the file. If multiple_chunks() is True , you should use this method in a loop instead of read() . In practice, it’s often easiest to use chunks() all the time. Looping\nover chunks() instead of using read() ensures that large files\ndon’t overwhelm your system’s memory. Here are some useful attributes of UploadedFile : UploadedFile. name ¶ The name of the uploaded file (e.g. my_file.txt ). UploadedFile. size ¶ The size, in bytes, of the uploaded file. UploadedFile. content_type ¶ The content-type header uploaded with the file (e.g. text/plain or application/pdf ). Like any data supplied by the user, you\nshouldn’t trust that the uploaded file is actually this type. You’ll still\nneed to validate that the file contains the content that the content-type\nheader claims – “trust but verify.” UploadedFile. content_type_extra ¶ A dictionary containing extra parameters passed to the content-type header. This is typically provided by services, such as Google App Engine,\nthat intercept and handle file uploads on your behalf. As a result your\nhandler may not receive the uploaded file content, but instead a URL or\nother pointer to the file (see RFC 2388 ). UploadedFile. charset ¶ For text/* content-types, the character set (i.e. utf8 )\nsupplied by the browser. Again, “trust but verify” is the best policy here. Note Like regular Python files, you can read the file line-by-line by iterating\nover the uploaded file: for line in uploadedfile : do_something_with ( line ) Lines are split using universal newlines . The following are\nrecognized as ending a line: the Unix end-of-line convention '\\n' , the\nWindows convention '\\r\\n' , and the old Macintosh convention '\\r' . Subclasses of UploadedFile include: class TemporaryUploadedFile [source] ¶ A file uploaded to a temporary location (i.e. stream-to-disk). This class\nis used by the TemporaryFileUploadHandler . In\naddition to the methods from UploadedFile , it has one additional\nmethod: TemporaryUploadedFile. temporary_file_path () [source] ¶ Returns the full path to the temporary uploaded file. class InMemoryUploadedFile [source] ¶ A file uploaded into memory (i.e. stream-to-memory). This class is used\nby the MemoryFileUploadHandler . Built-in upload handlers ¶ Together the MemoryFileUploadHandler and TemporaryFileUploadHandler provide Django’s default file upload\nbehavior of reading small files into memory and large ones onto disk. They\nare located in django.core.files.uploadhandler . class MemoryFileUploadHandler [source] ¶ File upload handler to stream uploads into memory (used for small files). class TemporaryFileUploadHandler [source] ¶ Upload handler that streams data into a temporary file using TemporaryUploadedFile . Writing custom upload handlers ¶ class FileUploadHandler [source] ¶ All file upload handlers should be subclasses of django.core.files.uploadhandler.FileUploadHandler . You can define upload\nhandlers wherever you wish. Required methods ¶ Custom file upload handlers must define the following methods: FileUploadHandler. receive_data_chunk ( raw_data , start ) [source] ¶ Receives a “chunk” of data from the file upload. raw_data is a bytestring containing the uploaded data. start is the position in the file where this raw_data chunk\nbegins. The data you return will get fed into the subsequent upload handlers’ receive_data_chunk methods. In this way, one handler can be a\n“filter” for other handlers. Return None from receive_data_chunk to short-circuit remaining\nupload handlers from getting this chunk. This is useful if you’re\nstoring the uploaded data yourself and don’t want future handlers to\nstore a copy of the data. If you raise a StopUpload or a SkipFile exception, the upload\nwill abort or the file will be completely skipped. FileUploadHandler. file_complete ( file_size ) [source] ¶ Called when a file has finished uploading. The handler should return an UploadedFile object that will be stored\nin request.FILES . Handlers may also return None to indicate that\nthe UploadedFile object should come from subsequent upload handlers. Optional methods ¶ Custom upload handlers may also define any of the following optional methods or\nattributes: FileUploadHandler. chunk_size ¶ Size, in bytes, of the “chunks” Django should store into memory and feed\ninto the handler. That is, this attribute controls the size of chunks\nfed into FileUploadHandler.receive_data_chunk . For maximum performance the chunk sizes should be divisible by 4 and\nshould not exceed 2 GB (2 31 bytes) in size. When there are\nmultiple chunk sizes provided by multiple handlers, Django will use the\nsmallest chunk size defined by any handler. The default is 64*2 10 bytes, or 64 KB. FileUploadHandler. new_file ( field_name , file_name , content_type , content_length , charset , content_type_extra ) [source] ¶ Callback signaling that a new file upload is starting. This is called\nbefore any data has been fed to any upload handlers. field_name is a string name of the file <input> field. file_name is the filename provided by the browser. content_type is the MIME type provided by the browser – E.g. 'image/jpeg' . content_length is the length of the image given by the browser.\nSometimes this won’t be provided and will be None . charset is the character set (i.e. utf8 ) given by the browser.\nLike content_length , this sometimes won’t be provided. content_type_extra is extra information about the file from the content-type header. See UploadedFile.content_type_extra . This method may raise a StopFutureHandlers exception to prevent\nfuture handlers from handling this file. FileUploadHandler. upload_complete () [source] ¶ Callback signaling that the entire upload (all files) has completed. FileUploadHandler. upload_interrupted () [source] ¶ Callback signaling that the upload was interrupted, e.g. when the user\nclosed their browser during file upload. FileUploadHandler. handle_raw_input ( input_data , META , content_length , boundary , encoding ) [source] ¶ Allows the handler to completely override the parsing of the raw\nHTTP input. input_data is a file-like object that supports read() -ing. META is the same object as request.META . content_length is the length of the data in input_data . Don’t\nread more than content_length bytes from input_data . boundary is the MIME boundary for this request. encoding is the encoding of the request. Return None if you want upload handling to continue, or a tuple of (POST, FILES) if you want to return the new data structures suitable\nfor the request directly.", "keywords": ["\\r\\n", "dictionary", "fileuploadhandler.receive_data_chunk", "disk", "fileuploadhandler", "google", "kb", "wrapper", "uploadedfile", "file_name", "structures", "chunk", "macintosh", "browser", "behalf", "type", "line", "feed", "boundary", "url", "gb", "image", "types", "filter", "temporary_file_path", "uploads", "django.core.files.uploadhandler", "field_name", "time", "application", "exception", "newlines", "method", "content_length", "pointer", "behavior", "system", "upload", "performance", "files", "stopfuturehandlers", "\\n", "file_complete", "encoding", "bytes", "circuit", "subclasses", "information", "result", "way", "¶", "default", "services", "plain", "custom", "copy", "mime", "methods", "location", "input", "receive_data_chunk", "none", "character", "loop", "callback", "uploadedfile.content_type_extra", "parsing", "upload_interrupted", "new_file", "my_file.txt", "n’t", "content_type", "claims", "convention", "content", "handlers", "source", "unix", "end", "do_something_with", "class", "utf8", "stream", "jpeg", "position", "request", "file_size", "tuple", "windows", "engine", "charset", "input_data", "ones", "attribute", "meta", "string", "generator", "filename", "start", "policy", "data", "app", "rfc", "lines", "temporaryuploadedfile", "name", "object", "user", "memoryfileuploadhandler", "header", "file", "read", "attributes", "size", "returns", "python", "addition", "content_type_extra", "temporaryfileuploadhandler", "handler", "raw_data", "subclass", "inmemoryuploadedfile", "multiple_chunks", "path", "post", "pdf", "django", "verify", "*", "text", "field", "e.g.", "practice", "http", "sizes", "memory", "\\r", "megabytes", "length", "parameters", "entry", ".", "chunks", "handle_raw_input", "stopupload"], "type": "documentation"},
{"title": "File storage API", "url": "https://docs.djangoproject.com/en/5.1/ref/files/storage/", "content": "File storage API ¶ Getting the default storage class ¶ Django provides convenient ways to access the default storage class: storages ¶ A dictionary-like object that allows retrieving a storage instance using\nits alias as defined by STORAGES . storages has an attribute backends , which defaults to the raw value\nprovided in STORAGES . Additionally, storages provides a create_storage() method that\naccepts the dictionary used in STORAGES for a backend, and\nreturns a storage instance based on that backend definition. This may be\nuseful for third-party packages needing to instantiate storages in tests: >>> from django.core.files.storage import storages >>> storages . backends {'default': {'BACKEND': 'django.core.files.storage.FileSystemStorage'}, 'staticfiles': {'BACKEND': 'django.contrib.staticfiles.storage.StaticFilesStorage'}, 'custom': {'BACKEND': 'package.storage.CustomStorage'}} >>> storage_instance = storages . create_storage ({ \"BACKEND\" : \"package.storage.CustomStorage\" }) class DefaultStorage [source] ¶ DefaultStorage provides\nlazy access to the default storage system as defined by default key in STORAGES . DefaultStorage uses storages internally. default_storage ¶ default_storage is an instance of the DefaultStorage . The FileSystemStorage class ¶ class FileSystemStorage ( location = None , base_url = None , file_permissions_mode = None , directory_permissions_mode = None , allow_overwrite = False ) [source] ¶ The FileSystemStorage class implements\nbasic file storage on a local filesystem. It inherits from Storage and provides implementations\nfor all the public methods thereof. Note The FileSystemStorage.delete() method will not raise an exception\nif the given file name does not exist. location [source] ¶ Absolute path to the directory that will hold the files.\nDefaults to the value of your MEDIA_ROOT setting. base_url [source] ¶ URL that serves the files stored at this location.\nDefaults to the value of your MEDIA_URL setting. file_permissions_mode [source] ¶ The file system permissions that the file will receive when it is\nsaved. Defaults to FILE_UPLOAD_PERMISSIONS . directory_permissions_mode [source] ¶ The file system permissions that the directory will receive when it is\nsaved. Defaults to FILE_UPLOAD_DIRECTORY_PERMISSIONS . allow_overwrite ¶ New in Django 5.1. Flag to control allowing saving a new file over an existing one.\nDefaults to False . get_created_time ( name ) [source] ¶ Returns a datetime of the system’s ctime, i.e. os.path.getctime() . On some systems (like Unix), this is the\ntime of the last metadata change, and on others (like Windows), it’s\nthe creation time of the file. The InMemoryStorage class ¶ class InMemoryStorage ( location = None , base_url = None , file_permissions_mode = None , directory_permissions_mode = None ) [source] ¶ The InMemoryStorage class implements\na memory-based file storage. It has no persistence, but can be useful for\nspeeding up tests by avoiding disk access. location [source] ¶ Absolute path to the directory name assigned to files. Defaults to the\nvalue of your MEDIA_ROOT setting. base_url [source] ¶ URL that serves the files stored at this location.\nDefaults to the value of your MEDIA_URL setting. file_permissions_mode [source] ¶ The file system permissions assigned to files, provided for\ncompatibility with FileSystemStorage . Defaults to FILE_UPLOAD_PERMISSIONS . directory_permissions_mode [source] ¶ The file system permissions assigned to directories, provided for\ncompatibility with FileSystemStorage . Defaults to FILE_UPLOAD_DIRECTORY_PERMISSIONS . The Storage class ¶ class Storage [source] ¶ The Storage class provides a\nstandardized API for storing files, along with a set of default\nbehaviors that all other storage systems can inherit or override\nas necessary. Note When methods return naive datetime objects, the effective timezone\nused will be the current value of os.environ['TZ'] ; note that this\nis usually set from Django’s TIME_ZONE . delete ( name ) [source] ¶ Deletes the file referenced by name . If deletion is not supported\non the target storage system this will raise NotImplementedError instead. exists ( name ) [source] ¶ Returns True if a file referenced by the given name already exists\nin the storage system. get_accessed_time ( name ) [source] ¶ Returns a datetime of the last accessed time of the\nfile. For storage systems unable to return the last accessed time this\nwill raise NotImplementedError . If USE_TZ is True , returns an aware datetime ,\notherwise returns a naive datetime in the local timezone. get_alternative_name ( file_root , file_ext ) [source] ¶ Returns an alternative filename based on the file_root and file_ext parameters, an underscore plus a random 7 character\nalphanumeric string is appended to the filename before the extension. get_available_name ( name , max_length = None ) [source] ¶ Returns a filename based on the name parameter that’s free and\navailable for new content to be written to on the target storage\nsystem. The length of the filename will not exceed max_length , if provided.\nIf a free unique filename cannot be found, a SuspiciousFileOperation exception will be raised. If a file with name already exists, get_alternative_name() is\ncalled to obtain an alternative name. get_created_time ( name ) [source] ¶ Returns a datetime of the creation time of the file.\nFor storage systems unable to return the creation time this will raise NotImplementedError . If USE_TZ is True , returns an aware datetime ,\notherwise returns a naive datetime in the local timezone. get_modified_time ( name ) [source] ¶ Returns a datetime of the last modified time of the\nfile. For storage systems unable to return the last modified time this\nwill raise NotImplementedError . If USE_TZ is True , returns an aware datetime ,\notherwise returns a naive datetime in the local timezone. get_valid_name ( name ) [source] ¶ Returns a filename based on the name parameter that’s suitable\nfor use on the target storage system. generate_filename ( filename ) [source] ¶ Validates the filename by calling get_valid_name() and\nreturns a filename to be passed to the save() method. The filename argument may include a path as returned by FileField.upload_to .\nIn that case, the path won’t be passed to get_valid_name() but\nwill be prepended back to the resulting name. The default implementation uses os.path operations. Override\nthis method if that’s not appropriate for your storage. listdir ( path ) [source] ¶ Lists the contents of the specified path, returning a 2-tuple of lists;\nthe first item being directories, the second item being files. For\nstorage systems that aren’t able to provide such a listing, this will\nraise a NotImplementedError instead. open ( name , mode = 'rb' ) [source] ¶ Opens the file given by name . Note that although the returned file\nis guaranteed to be a File object, it might actually be some\nsubclass. In the case of remote file storage this means that\nreading/writing could be quite slow, so be warned. path ( name ) [source] ¶ The local filesystem path where the file can be opened using Python’s\nstandard open() . For storage systems that aren’t accessible from\nthe local filesystem, this will raise NotImplementedError instead. save ( name , content , max_length = None ) [source] ¶ Saves a new file using the storage system, preferably with the name\nspecified. If there already exists a file with this name name , the\nstorage system may modify the filename as necessary to get a unique\nname. The actual name of the stored file will be returned. The max_length argument is passed along to get_available_name() . The content argument must be an instance of django.core.files.File or a file-like object that can be\nwrapped in File . size ( name ) [source] ¶ Returns the total size, in bytes, of the file referenced by name .\nFor storage systems that aren’t able to return the file size this will\nraise NotImplementedError instead. url ( name ) [source] ¶ Returns the URL where the contents of the file referenced by name can be accessed. For storage systems that don’t support access by URL\nthis will raise NotImplementedError instead.", "keywords": ["dictionary", "implementation", "disk", "lists", "permissions", "implementations", "get_created_time", "get_accessed_time", "url", "staticfiles", "datetime", "systems", "setting", "notimplementederror", "opens", "creation", "false", "time", "exception", "method", "party", "tests", "listdir", "file_permissions_mode", "system", "metadata", "directories", "mode", "files", "use", "ctime", "import", "new", "bytes", "'", "ways", "item", "filesystemstorage.delete", "compatibility", "create_storage", "underscore", "behaviors", "¶", "default", "get_available_name", "listing", "media_url", "custom", "generate_filename", "definition", "location", "methods", "timezone", "rb", "target", "max_length", "none", "change", "character", "persistence", "access", "default_storage", "use_tz", "implements", "n’t", "value", "content", "backend", "django.contrib.staticfiles.storage", "source", "unix", "case", "argument", "class", "filefield.upload_to", "get_alternative_name", "flag", "filesystem", "deletion", "tuple", "writing", "windows", "save", "attribute", "base_url", "string", "filename", "open", "os.path", "override", "name", "object", "get_modified_time", "extension", "suspiciousfileoperation", "file", "validates", "size", "package.storage", "operations", "storages", "returns", "python", "customstorage", "file_upload_directory_permissions", "django.core.files", "staticfilesstorage", "subclass", "api", "defaultstorage", "storage", "path", "others", "os.path.getctime", "os.environ['tz", "django", "directory", "filesystemstorage", "being", "parameter", "set", "backends", "packages", "contents", "memory", "absolute", "instance", "length", "=", "file_ext", "objects", "key", "parameters", "directory_permissions_mode", "defaults", "alias", "storage_instance", "file_upload_permissions", "get_valid_name"], "type": "documentation"},
{"title": "The ", "url": "https://docs.djangoproject.com/en/5.1/ref/files/file/", "content": "The File object ¶ The django.core.files module and its submodules contain built-in classes\nfor basic file handling in Django. The File class ¶ class File ( file_object , name = None ) [source] ¶ The File class is a thin wrapper around a Python file object with some Django-specific additions.\nInternally, Django uses this class when it needs to represent a file. File objects have the following attributes and methods: name ¶ The name of the file including the relative path from MEDIA_ROOT . size [source] ¶ The size of the file in bytes. file ¶ The underlying file object that this class wraps. Be careful with this attribute in subclasses. Some subclasses of File , including ContentFile and FieldFile , may replace this\nattribute with an object other than a Python file object .\nIn these cases, this attribute may itself be a File subclass (and not necessarily the same subclass). Whenever\npossible, use the attributes and methods of the subclass itself\nrather than the those of the subclass’s file attribute. mode ¶ The read/write mode for the file. open ( mode = None , * args , ** kwargs ) [source] ¶ Open or reopen the file (which also does File.seek(0) ).\nThe mode argument allows the same values\nas Python’s built-in open() . *args and **kwargs are passed after mode to Python’s built-in open() . When reopening a file, mode will override whatever mode the file\nwas originally opened with; None means to reopen with the original\nmode. It can be used as a context manager, e.g. with file.open() as f: . Changed in Django 5.0: Support for passing *args and **kwargs was added. __iter__ () [source] ¶ Iterate over the file yielding one line at a time. chunks ( chunk_size = None ) [source] ¶ Iterate over the file yielding “chunks” of a given size. chunk_size defaults to 64 KB. This is especially useful with very large files since it allows them to\nbe streamed off disk and avoids storing the whole file in memory. multiple_chunks ( chunk_size = None ) [source] ¶ Returns True if the file is large enough to require multiple chunks\nto access all of its content give some chunk_size . close () [source] ¶ Close the file. In addition to the listed methods, File exposes\nthe following attributes and methods of its file object: encoding , fileno , flush , isatty , newlines , read , readinto , readline , readlines , seek , tell , truncate , write , writelines , readable() , writable() ,\nand seekable() . The ContentFile class ¶ class ContentFile ( content , name = None ) [source] ¶ The ContentFile class inherits from File ,\nbut unlike File it operates on string content\n(bytes also supported), rather than an actual file. For example: from django.core.files.base import ContentFile f1 = ContentFile ( \"esta frase está en español\" ) f2 = ContentFile ( b \"these are bytes\" ) The ImageFile class ¶ class ImageFile ( file_object , name = None ) [source] ¶ Django provides a built-in class specifically for images. django.core.files.images.ImageFile inherits all the attributes\nand methods of File , and additionally\nprovides the following: width [source] ¶ Width of the image in pixels. height [source] ¶ Height of the image in pixels. Additional methods on files attached to objects ¶ Any File that is associated with an object (as with Car.photo ,\nbelow) will also have a couple of extra methods: File. save ( name , content , save = True ) ¶ Saves a new file with the file name and contents provided. This will not\nreplace the existing file, but will create a new file and update the object\nto point to it. If save is True , the model’s save() method will\nbe called once the file is saved. That is, these two lines: >>> car . photo . save ( \"myphoto.jpg\" , content , save = False ) >>> car . save () are equivalent to: >>> car . photo . save ( \"myphoto.jpg\" , content , save = True ) Note that the content argument must be an instance of either File or of a subclass of File , such as ContentFile . File. delete ( save = True ) ¶ Removes the file from the model instance and deletes the underlying file.\nIf save is True , the model’s save() method will be called once\nthe file is deleted.", "keywords": ["pixels", "width", "disk", "kb", "wrapper", "contentfile", "fileno", "line", "chunk_size", "image", "support", "handling", "está", "photo", "car.photo", "time", "classes", "newlines", "writelines", "additions", "method", "iterate", "args", "values", "mode", "files", "cases", "media_root", "manager", "encoding", "import", "bytes", "subclasses", "¶", "fieldfile", "height", "f", "methods", "couple", "submodules", "model", "imagefile", "none", "example", "f2", "content", "source", "readline", "argument", "class", "readinto", "images", "save", "español", "attribute", "file.open", "string", "f1", "open", "lines", "name", "object", "file", "read", "attributes", "size", "returns", "car", "python", "addition", "django.core.files", "kwargs", "subclass", "wraps", "multiple_chunks", "path", "django", "*", "frase", "module", "contents", "context", "memory", "instance", "=", "objects", "readlines", "defaults", "chunks"], "type": "documentation"},
{"title": "File handling", "url": "https://docs.djangoproject.com/en/5.1/ref/files/", "content": "File handling ¶ The File object The File class The ContentFile class The ImageFile class Additional methods on files attached to objects File storage API Getting the default storage class The FileSystemStorage class The InMemoryStorage class The Storage class Uploaded Files and Upload Handlers Uploaded files Built-in upload handlers Writing custom upload handlers", "keywords": ["handlers", "file", "¶", "default", "imagefile", "class", "objects", "filesystemstorage", "contentfile", "upload", "uploaded", "api", "custom", "files", "object", "storage", "methods"], "type": "documentation"},
{"title": "Django Exceptions", "url": "https://docs.djangoproject.com/en/5.1/ref/exceptions/", "content": "Django Exceptions ¶ Django raises some of its own exceptions as well as standard Python exceptions. Django Core Exceptions ¶ Django core exception classes are defined in django.core.exceptions . AppRegistryNotReady ¶ exception AppRegistryNotReady [source] ¶ This exception is raised when attempting to use models before the app\nloading process , which initializes the ORM, is\ncomplete. ObjectDoesNotExist ¶ exception ObjectDoesNotExist [source] ¶ The base class for Model.DoesNotExist exceptions. A try/except for ObjectDoesNotExist will catch DoesNotExist exceptions for all models. See get() . EmptyResultSet ¶ exception EmptyResultSet [source] ¶ EmptyResultSet may be raised during query generation if a query won’t\nreturn any results. Most Django projects won’t encounter this exception,\nbut it might be useful for implementing custom lookups and expressions. FullResultSet ¶ exception FullResultSet [source] ¶ FullResultSet may be raised during query generation if a query will\nmatch everything. Most Django projects won’t encounter this exception, but\nit might be useful for implementing custom lookups and expressions. FieldDoesNotExist ¶ exception FieldDoesNotExist [source] ¶ The FieldDoesNotExist exception is raised by a model’s _meta.get_field() method when the requested field does not exist on the\nmodel or on the model’s parents. MultipleObjectsReturned ¶ exception MultipleObjectsReturned [source] ¶ The base class for Model.MultipleObjectsReturned exceptions. A try/except for MultipleObjectsReturned will catch MultipleObjectsReturned exceptions for all\nmodels. See get() . SuspiciousOperation ¶ exception SuspiciousOperation [source] ¶ The SuspiciousOperation exception is raised when a user has\nperformed an operation that should be considered suspicious from a security\nperspective, such as tampering with a session cookie. Subclasses of SuspiciousOperation include: DisallowedHost DisallowedModelAdminLookup DisallowedModelAdminToField DisallowedRedirect InvalidSessionKey RequestDataTooBig SuspiciousFileOperation SuspiciousMultipartForm SuspiciousSession TooManyFieldsSent TooManyFilesSent If a SuspiciousOperation exception reaches the ASGI/WSGI handler level\nit is logged at the Error level and results in\na HttpResponseBadRequest . See the logging\ndocumentation for more information. PermissionDenied ¶ exception PermissionDenied [source] ¶ The PermissionDenied exception is raised when a user does not have\npermission to perform the action requested. ViewDoesNotExist ¶ exception ViewDoesNotExist [source] ¶ The ViewDoesNotExist exception is raised by django.urls when a requested view does not exist. MiddlewareNotUsed ¶ exception MiddlewareNotUsed [source] ¶ The MiddlewareNotUsed exception is raised when a middleware is not\nused in the server configuration. ImproperlyConfigured ¶ exception ImproperlyConfigured [source] ¶ The ImproperlyConfigured exception is raised when Django is\nsomehow improperly configured – for example, if a value in settings.py is incorrect or unparseable. FieldError ¶ exception FieldError [source] ¶ The FieldError exception is raised when there is a problem with a\nmodel field. This can happen for several reasons: A field in a model clashes with a field of the same name from an\nabstract base class An infinite loop is caused by ordering A keyword cannot be parsed from the filter parameters A field cannot be determined from a keyword in the query\nparameters A join is not permitted on the specified field A field name is invalid A query contains invalid order_by arguments ValidationError ¶ exception ValidationError [source] ¶ The ValidationError exception is raised when data fails form or\nmodel field validation. For more information about validation, see Form and Field Validation , Model Field Validation and the Validator Reference . NON_FIELD_ERRORS ¶ NON_FIELD_ERRORS ¶ ValidationError s that don’t belong to a particular field in a form\nor model are classified as NON_FIELD_ERRORS . This constant is used\nas a key in dictionaries that otherwise map fields to their respective\nlist of errors. BadRequest ¶ exception BadRequest [source] ¶ The BadRequest exception is raised when the request cannot be\nprocessed due to a client error. If a BadRequest exception reaches the\nASGI/WSGI handler level it results in a HttpResponseBadRequest . RequestAborted ¶ exception RequestAborted [source] ¶ The RequestAborted exception is raised when an HTTP body being read\nin by the handler is cut off midstream and the client connection closes,\nor when the client does not send data and hits a timeout where the server\ncloses the connection. It is internal to the HTTP handler modules and you are unlikely to see\nit elsewhere. If you are modifying HTTP handling code, you should raise\nthis when you encounter an aborted request to make sure the socket is\nclosed cleanly. SynchronousOnlyOperation ¶ exception SynchronousOnlyOperation [source] ¶ The SynchronousOnlyOperation exception is raised when code that\nis only allowed in synchronous Python code is called from an asynchronous\ncontext (a thread with a running asynchronous event loop). These parts of\nDjango are generally heavily reliant on thread-safety to function and don’t\nwork correctly under coroutines sharing the same thread. If you are trying to call code that is synchronous-only from an\nasynchronous thread, then create a synchronous thread and call it in that.\nYou can accomplish this is with asgiref.sync.sync_to_async() . URL Resolver exceptions ¶ URL Resolver exceptions are defined in django.urls . Resolver404 ¶ exception Resolver404 [source] ¶ The Resolver404 exception is raised by resolve() if the path passed to resolve() doesn’t\nmap to a view. It’s a subclass of django.http.Http404 . NoReverseMatch ¶ exception NoReverseMatch [source] ¶ The NoReverseMatch exception is raised by django.urls when a\nmatching URL in your URLconf cannot be identified based on the parameters\nsupplied. Database Exceptions ¶ Database exceptions may be imported from django.db . Django wraps the standard database exceptions so that your Django code has a\nguaranteed common implementation of these classes. exception Error [source] ¶ exception InterfaceError [source] ¶ exception DatabaseError [source] ¶ exception DataError [source] ¶ exception OperationalError [source] ¶ exception IntegrityError [source] ¶ exception InternalError [source] ¶ exception ProgrammingError [source] ¶ exception NotSupportedError [source] ¶ The Django wrappers for database exceptions behave exactly the same as\nthe underlying database exceptions. See PEP 249 , the Python Database API\nSpecification v2.0, for further information. As per PEP 3134 , a __cause__ attribute is set with the original\n(underlying) database exception, allowing access to any additional\ninformation provided. exception models. ProtectedError ¶ Raised to prevent deletion of referenced objects when using django.db.models.PROTECT . models.ProtectedError is a subclass\nof IntegrityError . exception models. RestrictedError ¶ Raised to prevent deletion of referenced objects when using django.db.models.RESTRICT . models.RestrictedError is a subclass\nof IntegrityError . HTTP Exceptions ¶ HTTP exceptions may be imported from django.http . UnreadablePostError ¶ exception UnreadablePostError [source] ¶ UnreadablePostError is raised when a user cancels an upload. Sessions Exceptions ¶ Sessions exceptions are defined in django.contrib.sessions.exceptions . SessionInterrupted ¶ exception SessionInterrupted [source] ¶ SessionInterrupted is raised when a session is destroyed in a\nconcurrent request. It’s a subclass of BadRequest . Transaction Exceptions ¶ Transaction exceptions are defined in django.db.transaction . TransactionManagementError ¶ exception TransactionManagementError [source] ¶ TransactionManagementError is raised for any and all problems\nrelated to database transactions. Testing Framework Exceptions ¶ Exceptions provided by the django.test package. RedirectCycleError ¶ exception client. RedirectCycleError ¶ RedirectCycleError is raised when the test client detects a\nloop or an overly long chain of redirects. Python Exceptions ¶ Django raises built-in Python exceptions when appropriate as well. See the\nPython documentation for further information on the Built-in Exceptions .", "keywords": ["implementation", "urlconf", "django.core.exceptions", "disallowedmodeladmintofield", "redirectcycleerror", "connection", "django.contrib.sessions.exceptions", "suspicioussession", "transactions", "doesnotexist", "error", "improperlyconfigured", "url", "internalerror", "requestaborted", "suspiciousoperation", "documentation", "filter", "resolve", "socket", "problems", "integrityerror", "protectederror", "exception", "perspective", "classes", "order_by", "restrictederror", "_", "method", "middleware", "disallowedhost", "testing", "upload", "coroutines", "requestdatatoobig", "modules", "non_field_errors", "query", "toomanyfieldssent", "generation", "problem", "subclasses", "validator", "information", "permission", "specification", "httpresponsebadrequest", "safety", "fullresultset", "test", "fields", "¶", "custom", "resolver", "client", "keyword", "parents", "transaction", "interfaceerror", "model", "server", "validationerror", "join", "loop", "clashes", "package", "base", "process", "access", "results", "example", "django.db.models", "session", "n’t", "fielderror", "event", "value", "operationalerror", "source", "dataerror", "class", "badrequest", "programmingerror", "request", "emptyresultset", "wrappers", "deletion", "redirects", "asgiref.sync.sync_to_async", "constant", "databaseerror", "chain", "action", "attribute", "list", "transactionmanagementerror", "middlewarenotused", "loading", "data", "multipleobjectsreturned", "cause", "app", "view", "matching", "v2.0", "form", "parts", "lookups", "name", "cookie", "body", "midstream", "sessioninterrupted", "user", "suspiciousfileoperation", "try", "permissiondenied", "errors", "python", "core", "dictionaries", "http404", "reasons", "logging", "handler", "synchronousonlyoperation", "suspiciousmultipartform", "appregistrynotready", "configuration", "meta.get_field", "exceptions", "subclass", "api", "orm", "sessions", "path", "projects", "level", "timeout", "django", "expressions", "thread", "pep", "validation", "asgi", "framework", "viewdoesnotexist", "field", "arguments", "restrict", "fielddoesnotexist", "notsupportederror", "http", "database", "context", "django.http", "django.urls", "operation", "reference", "toomanyfilessent", "security", "code", "models", "objects", "wsgi", "key", "parameters", "objectdoesnotexist", "resolver404", "disallowedredirect", ".", "unreadableposterror"], "type": "documentation"},
{"title": " and ", "url": "https://docs.djangoproject.com/en/5.1/ref/django-admin/", "content": "django-admin and manage.py ¶ django-admin is Django’s command-line utility for administrative tasks.\nThis document outlines all it can do. In addition, manage.py is automatically created in each Django project. It\ndoes the same thing as django-admin but also sets the DJANGO_SETTINGS_MODULE environment variable so that it points to your\nproject’s settings.py file. The django-admin script should be on your system path if you installed\nDjango via pip . If it’s not in your path, ensure you have your virtual\nenvironment activated. Generally, when working on a single Django project, it’s easier to use manage.py than django-admin . If you need to switch between multiple\nDjango settings files, use django-admin with DJANGO_SETTINGS_MODULE or the --settings command line\noption. The command-line examples throughout this document use django-admin to\nbe consistent, but any example can use manage.py or python -m django just as well. Usage ¶ /  $ django-admin <command> [ options ] $ manage.py <command> [ options ] $ python -m django <command> [ options ] ...\\> django-admin < command > [options] ...\\> manage.py < command > [options] ...\\> py -m django < command > [options] command should be one of the commands listed in this document. options , which is optional, should be zero or more of the options available\nfor the given command. Getting runtime help ¶ django-admin help ¶ Run django-admin help to display usage information and a list of the\ncommands provided by each application. Run django-admin help --commands to display a list of all available\ncommands. Run django-admin help <command> to display a description of the given\ncommand and a list of its available options. App names ¶ Many commands take a list of “app names.” An “app name” is the basename of\nthe package containing your models. For example, if your INSTALLED_APPS contains the string 'mysite.blog' , the app name is blog . Determining the version ¶ django-admin version ¶ Run django-admin version to display the current Django version. The output follows the schema described in PEP 440 : 1.4.dev17026\n1.4a1\n1.4 Displaying debug output ¶ Use --verbosity , where it is supported, to specify the amount of\nnotification and debug information that django-admin prints to the console. Available commands ¶ check ¶ django-admin check [app_label [app_label ...]] ¶ Uses the system check framework to inspect the entire\nDjango project for common problems. By default, all apps will be checked. You can check a subset of apps by\nproviding a list of app labels as arguments: django-admin check auth admin myapp --tag TAGS , -t TAGS ¶ The system check framework performs many different types of checks that are categorized with tags . You can use these\ntags to restrict the checks performed to just those in a particular category.\nFor example, to perform only models and compatibility checks, run: django-admin check --tag models --tag compatibility --database DATABASE ¶ Specifies the database to run checks requiring database access: django-admin check --database default --database other By default, these checks will not be run. --list-tags ¶ Lists all available tags. --deploy ¶ Activates some additional checks that are only relevant in a deployment setting. You can use this option in your local development environment, but since your\nlocal development settings module may not have many of your production settings,\nyou will probably want to point the check command at a different settings\nmodule, either by setting the DJANGO_SETTINGS_MODULE environment\nvariable, or by passing the --settings option: django-admin check --deploy --settings=production_settings Or you could run it directly on a production or staging deployment to verify\nthat the correct settings are in use (omitting --settings ). You could even\nmake it part of your integration test suite. --fail-level {CRITICAL,ERROR,WARNING,INFO,DEBUG} ¶ Specifies the message level that will cause the command to exit with a non-zero\nstatus. Default is ERROR . compilemessages ¶ django-admin compilemessages ¶ Compiles .po files created by makemessages to .mo files for\nuse with the built-in gettext support. See Internationalization and localization . --locale LOCALE , -l LOCALE ¶ Specifies the locale(s) to process. If not provided, all locales are processed. --exclude EXCLUDE , -x EXCLUDE ¶ Specifies the locale(s) to exclude from processing. If not provided, no locales\nare excluded. --use-fuzzy , -f ¶ Includes fuzzy translations into compiled files. Example usage: django-admin compilemessages --locale=pt_BR django-admin compilemessages --locale=pt_BR --locale=fr -f django-admin compilemessages -l pt_BR django-admin compilemessages -l pt_BR -l fr --use-fuzzy django-admin compilemessages --exclude=pt_BR django-admin compilemessages --exclude=pt_BR --exclude=fr django-admin compilemessages -x pt_BR django-admin compilemessages -x pt_BR -x fr --ignore PATTERN , -i PATTERN ¶ Ignores directories matching the given glob -style pattern. Use\nmultiple times to ignore more. Example usage: django-admin compilemessages --ignore=cache --ignore=outdated/*/locale createcachetable ¶ django-admin createcachetable ¶ Creates the cache tables for use with the database cache backend using the\ninformation from your settings file. See Django’s cache framework for more\ninformation. --database DATABASE ¶ Specifies the database in which the cache table(s) will be created. Defaults to default . --dry-run ¶ Prints the SQL that would be run without actually running it, so you can\ncustomize it or use the migrations framework. dbshell ¶ django-admin dbshell ¶ Runs the command-line client for the database engine specified in your ENGINE setting, with the connection parameters\nspecified in your USER , PASSWORD , etc., settings. For PostgreSQL, this runs the psql command-line client. For MySQL, this runs the mysql command-line client. For SQLite, this runs the sqlite3 command-line client. For Oracle, this runs the sqlplus command-line client. This command assumes the programs are on your PATH so that a call to\nthe program name ( psql , mysql , sqlite3 , sqlplus ) will find the\nprogram in the right place. There’s no way to specify the location of the\nprogram manually. --database DATABASE ¶ Specifies the database onto which to open a shell. Defaults to default . -- ARGUMENTS ¶ Any arguments following a -- divider will be passed on to the underlying\ncommand-line client. For example, with PostgreSQL you can use the psql command’s -c flag to execute a raw SQL query directly: /  $ django-admin dbshell -- -c 'select current_user' current_user -------------- postgres (1 row) ...\\> django-admin dbshell -- -c 'select current_user' current_user -------------- postgres (1 row) On MySQL/MariaDB, you can do this with the mysql command’s -e flag: /  $ django-admin dbshell -- -e \"select user()\" +----------------------+ | user()               | +----------------------+ | djangonaut@localhost | +----------------------+ ...\\> django-admin dbshell -- -e \"select user()\" +----------------------+ | user()               | +----------------------+ | djangonaut@localhost | +----------------------+ Note Be aware that not all options set in the OPTIONS part of your\ndatabase configuration in DATABASES are passed to the\ncommand-line client, e.g. 'isolation_level' . diffsettings ¶ django-admin diffsettings ¶ Displays differences between the current settings file and Django’s default\nsettings (or another settings file specified by --default ). Settings that don’t appear in the defaults are followed by \"###\" . For\nexample, the default settings don’t define ROOT_URLCONF , so ROOT_URLCONF is followed by \"###\" in the output of diffsettings . --all ¶ Displays all settings, even if they have Django’s default value. Such settings\nare prefixed by \"###\" . --default MODULE ¶ The settings module to compare the current settings against. Leave empty to\ncompare against Django’s default settings. --output {hash,unified} ¶ Specifies the output format. Available values are hash and unified . hash is the default mode that displays the output that’s described above. unified displays the output similar to diff -u . Default settings are\nprefixed with a minus sign, followed by the changed setting prefixed with a\nplus sign. dumpdata ¶ django-admin dumpdata [app_label[.ModelName] [app_label[.ModelName] ...]] ¶ Outputs to standard output all data in the database associated with the named\napplication(s). If no application name is provided, all installed applications will be dumped. The output of dumpdata can be used as input for loaddata . When result of dumpdata is saved as a file, it can serve as a fixture for tests or as an initial data . Note that dumpdata uses the default manager on the model for selecting the\nrecords to dump. If you’re using a custom manager as\nthe default manager and it filters some of the available records, not all of the\nobjects will be dumped. --all , -a ¶ Uses Django’s base manager, dumping records which might otherwise be filtered\nor modified by a custom manager. --format FORMAT ¶ Specifies the serialization format of the output. Defaults to JSON. Supported\nformats are listed in Serialization formats . --indent INDENT ¶ Specifies the number of indentation spaces to use in the output. Defaults to None which displays all data on single line. --exclude EXCLUDE , -e EXCLUDE ¶ Prevents specific applications or models (specified in the form of app_label.ModelName ) from being dumped. If you specify a model name, then\nonly that model will be excluded, rather than the entire application. You can\nalso mix application names and model names. If you want to exclude multiple applications, pass --exclude more than\nonce: django-admin dumpdata --exclude=auth --exclude=contenttypes --database DATABASE ¶ Specifies the database from which data will be dumped. Defaults to default . --natural-foreign ¶ Uses the natural_key() model method to serialize any foreign key and\nmany-to-many relationship to objects of the type that defines the method. If\nyou’re dumping contrib.auth Permission objects or contrib.contenttypes ContentType objects, you should probably use this\nflag. See the natural keys documentation for more details on this and the next option. --natural-primary ¶ Omits the primary key in the serialized data of this object since it can be\ncalculated during deserialization. --pks PRIMARY_KEYS ¶ Outputs only the objects specified by a comma separated list of primary keys.\nThis is only available when dumping one model. By default, all the records of\nthe model are output. --output OUTPUT , -o OUTPUT ¶ Specifies a file to write the serialized data to. By default, the data goes to\nstandard output. When this option is set and --verbosity is greater than 0 (the default), a\nprogress bar is shown in the terminal. Fixtures compression ¶ The output file can be compressed with one of the bz2 , gz , lzma , or xz formats by ending the filename with the corresponding extension.\nFor example, to output the data as a compressed JSON file: django-admin dumpdata -o mydata.json.gz flush ¶ django-admin flush ¶ Removes all data from the database and re-executes any post-synchronization\nhandlers. The table of which migrations have been applied is not cleared. If you would rather start from an empty database and rerun all migrations, you\nshould drop and recreate the database and then run migrate instead. --noinput , --no-input ¶ Suppresses all user prompts. --database DATABASE ¶ Specifies the database to flush. Defaults to default . inspectdb ¶ django-admin inspectdb [table [table ...]] ¶ Introspects the database tables in the database pointed-to by the NAME setting and outputs a Django model module (a models.py file) to standard output. You may choose what tables or views to inspect by passing their names as\narguments. If no arguments are provided, models are created for views only if\nthe --include-views option is used. Models for partition tables are\ncreated on PostgreSQL if the --include-partitions option is used. Use this if you have a legacy database with which you’d like to use Django.\nThe script will inspect the database and create a model for each table within\nit. As you might expect, the created models will have an attribute for every field\nin the table. Note that inspectdb has a few special cases in its field-name\noutput: If inspectdb cannot map a column’s type to a model field type, it’ll\nuse TextField and will insert the Python comment 'This field type is a guess.' next to the field in the generated\nmodel. The recognized fields may depend on apps listed in INSTALLED_APPS . For example, django.contrib.postgres adds\nrecognition for several PostgreSQL-specific field types. If the database column name is a Python reserved word (such as 'pass' , 'class' or 'for' ), inspectdb will append '_field' to the attribute name. For example, if a table has a column 'for' , the generated model will have a field 'for_field' , with\nthe db_column attribute set to 'for' . inspectdb will insert\nthe Python comment 'Field renamed because it was a Python reserved word.' next to the\nfield. This feature is meant as a shortcut, not as definitive model generation. After\nyou run it, you’ll want to look over the generated models yourself to make\ncustomizations. In particular, you’ll need to rearrange models’ order, so that\nmodels that refer to other models are ordered properly. Django doesn’t create database defaults when a default is specified on a model field.\nSimilarly, database defaults aren’t translated to model field defaults or\ndetected in any fashion by inspectdb . By default, inspectdb creates unmanaged models. That is, managed = False in the model’s Meta class tells Django not to manage each table’s creation,\nmodification, and deletion. If you do want to allow Django to manage the\ntable’s lifecycle, you’ll need to change the managed option to True (or remove\nit because True is its default value). Database-specific notes ¶ Oracle ¶ Models are created for materialized views if --include-views is\nused. PostgreSQL ¶ Models are created for foreign tables. Models are created for materialized views if --include-views is used. Models are created for partition tables if --include-partitions is used. --database DATABASE ¶ Specifies the database to introspect. Defaults to default . --include-partitions ¶ If this option is provided, models are also created for partitions. Only support for PostgreSQL is implemented. --include-views ¶ If this option is provided, models are also created for database views. loaddata ¶ django-admin loaddata fixture [fixture ...] ¶ Searches for and loads the contents of the named fixture into the database. --database DATABASE ¶ Specifies the database into which the data will be loaded. Defaults to default . --ignorenonexistent , -i ¶ Ignores fields and models that may have been removed since the fixture was\noriginally generated. --app APP_LABEL ¶ Specifies a single app to look for fixtures in rather than looking in all apps. --format FORMAT ¶ Specifies the serialization format (e.g., json or xml ) for fixtures read from stdin . --exclude EXCLUDE , -e EXCLUDE ¶ Excludes loading the fixtures from the given applications and/or models (in the\nform of app_label or app_label.ModelName ). Use the option multiple\ntimes to exclude more than one app or model. Loading fixtures from stdin ¶ You can use a dash as the fixture name to load input from sys.stdin . For\nexample: django-admin loaddata --format=json - When reading from stdin , the --format option\nis required to specify the serialization format of the input (e.g., json or xml ). Loading from stdin is useful with standard input and output redirections.\nFor example: django-admin dumpdata --format=json --database=test app_label.ModelName | django-admin loaddata --format=json --database=prod - The dumpdata command can be used to generate input for loaddata . See also For more detail about fixtures see the Fixtures topic. makemessages ¶ django-admin makemessages ¶ Runs over the entire source tree of the current directory and pulls out all\nstrings marked for translation. It creates (or updates) a message file in the\nconf/locale (in the Django tree) or locale (for project and application)\ndirectory. After making changes to the messages files you need to compile them\nwith compilemessages for use with the builtin gettext support. See\nthe i18n documentation for details. This command doesn’t require configured settings. However, when settings aren’t\nconfigured, the command can’t ignore the MEDIA_ROOT and STATIC_ROOT directories or include LOCALE_PATHS . --all , -a ¶ Updates the message files for all available languages. --extension EXTENSIONS , -e EXTENSIONS ¶ Specifies a list of file extensions to examine (default: html , txt , py or js if --domain is djangojs ). Example usage: django-admin makemessages --locale=de --extension xhtml Separate multiple extensions with commas or use -e or --extension multiple times: django-admin makemessages --locale=de --extension=html,txt --extension xml --locale LOCALE , -l LOCALE ¶ Specifies the locale(s) to process. --exclude EXCLUDE , -x EXCLUDE ¶ Specifies the locale(s) to exclude from processing. If not provided, no locales\nare excluded. Example usage: django-admin makemessages --locale=pt_BR django-admin makemessages --locale=pt_BR --locale=fr django-admin makemessages -l pt_BR django-admin makemessages -l pt_BR -l fr django-admin makemessages --exclude=pt_BR django-admin makemessages --exclude=pt_BR --exclude=fr django-admin makemessages -x pt_BR django-admin makemessages -x pt_BR -x fr --domain DOMAIN , -d DOMAIN ¶ Specifies the domain of the messages files. Supported options are: django for all *.py , *.html and *.txt files (default) djangojs for *.js files --symlinks , -s ¶ Follows symlinks to directories when looking for new translation strings. Example usage: django-admin makemessages --locale=de --symlinks --ignore PATTERN , -i PATTERN ¶ Ignores files or directories matching the given glob -style pattern. Use\nmultiple times to ignore more. These patterns are used by default: 'CVS' , '.*' , '*~' , '*.pyc' . Example usage: django-admin makemessages --locale=en_US --ignore=apps/* --ignore=secret/*.html --no-default-ignore ¶ Disables the default values of --ignore . --no-wrap ¶ Disables breaking long message lines into several lines in language files. --no-location ¶ Suppresses writing ‘ #: filename:line ’ comment lines in language files.\nUsing this option makes it harder for technically skilled translators to\nunderstand each message’s context. --add-location [{full,file,never}] ¶ Controls #: filename:line comment lines in language files. If the option\nis: full (the default if not given): the lines include both file name and\nline number. file : the line number is omitted. never : the lines are suppressed (same as --no-location ). Requires gettext 0.19 or newer. --no-obsolete ¶ Removes obsolete message strings from the .po files. --keep-pot ¶ Prevents deleting the temporary .pot files generated before creating the .po file. This is useful for debugging errors which may prevent the final\nlanguage files from being created. See also See Customizing the makemessages command for instructions on how to customize\nthe keywords that makemessages passes to xgettext . makemigrations ¶ django-admin makemigrations [app_label [app_label ...]] ¶ Creates new migrations based on the changes detected to your models.\nMigrations, their relationship with apps and more are covered in depth in the migrations documentation . Providing one or more app names as arguments will limit the migrations created\nto the app(s) specified and any dependencies needed (the table at the other end\nof a ForeignKey , for example). To add migrations to an app that doesn’t have a migrations directory, run makemigrations with the app’s app_label . --noinput , --no-input ¶ Suppresses all user prompts. If a suppressed prompt cannot be resolved\nautomatically, the command will exit with error code 3. --empty ¶ Outputs an empty migration for the specified apps, for manual editing. This is\nfor advanced users and should not be used unless you are familiar with the\nmigration format, migration operations, and the dependencies between your\nmigrations. --dry-run ¶ Shows what migrations would be made without actually writing any migrations\nfiles to disk. Using this option along with --verbosity 3 will also show\nthe complete migrations files that would be written. --merge ¶ Enables fixing of migration conflicts. --name NAME , -n NAME ¶ Allows naming the generated migration(s) instead of using a generated name. The\nname must be a valid Python identifier . --no-header ¶ Generate migration files without Django version and timestamp header. --check ¶ Makes makemigrations exit with a non-zero status when model changes without\nmigrations are detected. Implies --dry-run . --scriptable ¶ Diverts log output and input prompts to stderr , writing only paths of\ngenerated migration files to stdout . --update ¶ Merges model changes into the latest migration and optimize the resulting\noperations. The updated migration will have a generated name. In order to preserve the\nprevious name, set it using --name . migrate ¶ django-admin migrate [app_label] [migration_name] ¶ Synchronizes the database state with the current set of models and migrations.\nMigrations, their relationship with apps and more are covered in depth in the migrations documentation . The behavior of this command changes depending on the arguments provided: No arguments: All apps have all of their migrations run. <app_label> : The specified app has its migrations run, up to the most\nrecent migration. This may involve running other apps’ migrations too, due\nto dependencies. <app_label> <migrationname> : Brings the database schema to a state where\nthe named migration is applied, but no later migrations in the same app are\napplied. This may involve unapplying migrations if you have previously\nmigrated past the named migration. You can use a prefix of the migration\nname, e.g. 0001 , as long as it’s unique for the given app name. Use the\nname zero to migrate all the way back i.e. to revert all applied\nmigrations for an app. Warning When unapplying migrations, all dependent migrations will also be\nunapplied, regardless of <app_label> . You can use --plan to check\nwhich migrations will be unapplied. --database DATABASE ¶ Specifies the database to migrate. Defaults to default . --fake ¶ Marks the migrations up to the target one (following the rules above) as\napplied, but without actually running the SQL to change your database schema. This is intended for advanced users to manipulate the\ncurrent migration state directly if they’re manually applying changes;\nbe warned that using --fake runs the risk of putting the migration state\ntable into a state where manual recovery will be needed to make migrations\nrun correctly. --fake-initial ¶ Allows Django to skip an app’s initial migration if all database tables with\nthe names of all models created by all CreateModel operations in that\nmigration already exist. This option is intended for use when first running\nmigrations against a database that preexisted the use of migrations. This\noption does not, however, check for matching database schema beyond matching\ntable names and so is only safe to use if you are confident that your existing\nschema matches what is recorded in your initial migration. --plan ¶ Shows the migration operations that will be performed for the given migrate command. --run-syncdb ¶ Allows creating tables for apps without migrations. While this isn’t\nrecommended, the migrations framework is sometimes too slow on large projects\nwith hundreds of models. --noinput , --no-input ¶ Suppresses all user prompts. An example prompt is asking about removing stale\ncontent types. --check ¶ Makes migrate exit with a non-zero status when unapplied migrations are\ndetected. --prune ¶ Deletes nonexistent migrations from the django_migrations table. This is\nuseful when migration files replaced by a squashed migration have been removed.\nSee Squashing migrations for more details. optimizemigration ¶ django-admin optimizemigration app_label migration_name ¶ Optimizes the operations for the named migration and overrides the existing\nfile. If the migration contains functions that must be manually copied, the\ncommand creates a new migration file suffixed with _optimized that is meant\nto replace the named migration. --check ¶ Makes optimizemigration exit with a non-zero status when a migration can be\noptimized. runserver ¶ django-admin runserver [addrport] ¶ Starts a lightweight development web server on the local machine. By default,\nthe server runs on port 8000 on the IP address 127.0.0.1 . You can pass in an\nIP address and port number explicitly. If you run this script as a user with normal privileges (recommended), you\nmight not have access to start a port on a low port number. Low port numbers\nare reserved for the superuser (root). This server uses the WSGI application object specified by the WSGI_APPLICATION setting. Warning DO NOT USE THIS SERVER IN A PRODUCTION SETTING. This lightweight development server has not gone through security audits or\nperformance tests, hence is unsuitable for production. Making this server\nable to handle a production environment is outside the scope of Django. The development server automatically reloads Python code for each request, as\nneeded. You don’t need to restart the server for code changes to take effect.\nHowever, some actions like adding files don’t trigger a restart, so you’ll\nhave to restart the server in these cases. If you’re using Linux or MacOS and install both pywatchman and the Watchman service, kernel signals will be used to autoreload the server\n(rather than polling file modification timestamps each second). This offers\nbetter performance on large projects, reduced response time after code changes,\nmore robust change detection, and a reduction in power usage. Django supports pywatchman 1.2.0 and higher. Large directories with many files may cause performance issues When using Watchman with a project that includes large non-Python\ndirectories like node_modules , it’s advisable to ignore this directory\nfor optimal performance. See the watchman documentation for information\non how to do this. Watchman timeout DJANGO_WATCHMAN_TIMEOUT ¶ The default timeout of Watchman client is 5 seconds. You can change it\nby setting the DJANGO_WATCHMAN_TIMEOUT environment variable. When you start the server, and each time you change Python code while the\nserver is running, the system check framework will check your entire Django\nproject for some common errors (see the check command). If any\nerrors are found, they will be printed to standard output. You can use the --skip-checks option to skip running system checks. You can run as many concurrent servers as you want, as long as they’re on\nseparate ports by executing django-admin runserver more than once. Note that the default IP address, 127.0.0.1 , is not accessible from other\nmachines on your network. To make your development server viewable to other\nmachines on the network, use its own IP address (e.g. 192.168.2.1 ), 0 (shortcut for 0.0.0.0 ), 0.0.0.0 , or :: (with IPv6 enabled). You can provide an IPv6 address surrounded by brackets\n(e.g. [200a::1]:8000 ). This will automatically enable IPv6 support. A hostname containing ASCII-only characters can also be used. If the staticfiles contrib app is enabled\n(default in new projects) the runserver command will be overridden\nwith its own runserver command. Logging of each request and response of the server is sent to the django.server logger. --noreload ¶ Disables the auto-reloader. This means any Python code changes you make while\nthe server is running will not take effect if the particular Python modules\nhave already been loaded into memory. --nothreading ¶ Disables use of threading in the development server. The server is\nmultithreaded by default. --ipv6 , -6 ¶ Uses IPv6 for the development server. This changes the default IP address from 127.0.0.1 to ::1 . Examples of using different ports and addresses ¶ Port 8000 on IP address 127.0.0.1 : django-admin runserver Port 8000 on IP address 1.2.3.4 : django-admin runserver 1.2.3.4:8000 Port 7000 on IP address 127.0.0.1 : django-admin runserver 7000 Port 7000 on IP address 1.2.3.4 : django-admin runserver 1.2.3.4:7000 Port 8000 on IPv6 address ::1 : django-admin runserver -6 Port 7000 on IPv6 address ::1 : django-admin runserver -6 7000 Port 7000 on IPv6 address 2001:0db8:1234:5678::9 : django-admin runserver [2001:0db8:1234:5678::9]:7000 Port 8000 on IPv4 address of host localhost : django-admin runserver localhost:8000 Port 8000 on IPv6 address of host localhost : django-admin runserver -6 localhost:8000 Serving static files with the development server ¶ By default, the development server doesn’t serve any static files for your site\n(such as CSS files, images, things under MEDIA_URL and so forth). If\nyou want to configure Django to serve static media, read How to manage static files (e.g. images, JavaScript, CSS) . Serving with ASGI in development ¶ Django’s runserver command provides a WSGI server. In order to run under\nASGI you will need to use an ASGI server .\nThe Django Daphne project provides Integration with runserver that you can use. sendtestemail ¶ django-admin sendtestemail [email [email ...]] ¶ Sends a test email (to confirm email sending through Django is working) to the\nrecipient(s) specified. For example: django-admin sendtestemail foo@example.com bar@example.com There are a couple of options, and you may use any combination of them\ntogether: --managers ¶ Mails the email addresses specified in MANAGERS using mail_managers() . --admins ¶ Mails the email addresses specified in ADMINS using mail_admins() . shell ¶ django-admin shell ¶ Starts the Python interactive interpreter. --interface {ipython,bpython,python} , -i {ipython,bpython,python} ¶ Specifies the shell to use. By default, Django will use IPython or bpython if\neither is installed. If both are installed, specify which one you want like so: IPython: django-admin shell -i ipython bpython: django-admin shell -i bpython If you have a “rich” shell installed but want to force use of the “plain”\nPython interpreter, use python as the interface name, like so: django-admin shell -i python --no-startup ¶ Disables reading the startup script for the “plain” Python interpreter. By\ndefault, the script pointed to by the PYTHONSTARTUP environment\nvariable or the ~/.pythonrc.py script is read. --command COMMAND , -c COMMAND ¶ Lets you pass a command as a string to execute it as Django, like so: django-admin shell --command=\"import django; print(django.__version__)\" You can also pass code in on standard input to execute it. For example: $ django-admin shell <<EOF > import django > print(django.__version__) > EOF On Windows, the REPL is output due to implementation limits of select.select() on that platform. showmigrations ¶ django-admin showmigrations [app_label [app_label ...]] ¶ Shows all migrations in a project. You can choose from one of two formats: --list , -l ¶ Lists all of the apps Django knows about, the migrations available for each\napp, and whether or not each migration is applied (marked by an [X] next to\nthe migration name). For a --verbosity of 2 and above, the applied\ndatetimes are also shown. Apps without migrations are also listed, but have (no migrations) printed\nunder them. This is the default output format. --plan , -p ¶ Shows the migration plan Django will follow to apply migrations. Like --list , applied migrations are marked by an [X] . For a --verbosity of 2 and above, all dependencies of a migration will also be shown. app_label s arguments limit the output, however, dependencies of provided\napps may also be included. --database DATABASE ¶ Specifies the database to examine. Defaults to default . sqlflush ¶ django-admin sqlflush ¶ Prints the SQL statements that would be executed for the flush command. --database DATABASE ¶ Specifies the database for which to print the SQL. Defaults to default . sqlmigrate ¶ django-admin sqlmigrate app_label migration_name ¶ Prints the SQL for the named migration. This requires an active database\nconnection, which it will use to resolve constraint names; this means you must\ngenerate the SQL against a copy of the database you wish to later apply it on. Note that sqlmigrate doesn’t colorize its output. --backwards ¶ Generates the SQL for unapplying the migration. By default, the SQL created is\nfor running the migration in the forwards direction. --database DATABASE ¶ Specifies the database for which to generate the SQL. Defaults to default . sqlsequencereset ¶ django-admin sqlsequencereset app_label [app_label ...] ¶ Prints the SQL statements for resetting sequences for the given app name(s). Sequences are indexes used by some database engines to track the next available\nnumber for automatically incremented fields. Use this command to generate SQL which will fix cases where a sequence is out\nof sync with its automatically incremented field data. --database DATABASE ¶ Specifies the database for which to print the SQL. Defaults to default . squashmigrations ¶ django-admin squashmigrations app_label [start_migration_name] migration_name ¶ Squashes the migrations for app_label up to and including migration_name down into fewer migrations, if possible. The resulting squashed migrations\ncan live alongside the unsquashed ones safely. For more information,\nplease read Squashing migrations . When start_migration_name is given, Django will only include migrations\nstarting from and including this migration. This helps to mitigate the\nsquashing limitation of RunPython and django.db.migrations.operations.RunSQL migration operations. --no-optimize ¶ Disables the optimizer when generating a squashed migration. By default, Django\nwill try to optimize the operations in your migrations to reduce the size of\nthe resulting file. Use this option if this process is failing or creating\nincorrect migrations, though please also file a Django bug report about the\nbehavior, as optimization is meant to be safe. --noinput , --no-input ¶ Suppresses all user prompts. --squashed-name SQUASHED_NAME ¶ Sets the name of the squashed migration. When omitted, the name is based on the\nfirst and last migration, with _squashed_ in between. --no-header ¶ Generate squashed migration file without Django version and timestamp header. startapp ¶ django-admin startapp name [directory] ¶ Creates a Django app directory structure for the given app name in the current\ndirectory or the given destination. By default, the new directory contains a models.py file and other app template files. If only the app name is given,\nthe app directory will be created in the current working directory. If the optional destination is provided, Django will use that existing\ndirectory rather than creating a new one. You can use ‘.’ to denote the current\nworking directory. For example: django-admin startapp myapp /Users/jezdez/Code/myapp --template TEMPLATE ¶ Provides the path to a directory with a custom app template file, or a path to\nan uncompressed archive ( .tar ) or a compressed archive ( .tar.gz , .tar.bz2 , .tar.xz , .tar.lzma , .tgz , .tbz2 , .txz , .tlz , .zip ) containing the app template files. For example, this would look for an app template in the given directory when\ncreating the myapp app: django-admin startapp --template=/Users/jezdez/Code/my_app_template myapp Django will also accept URLs ( http , https , ftp ) to compressed\narchives with the app template files, downloading and extracting them on the\nfly. For example, taking advantage of GitHub’s feature to expose repositories as\nzip files, you can use a URL like: django-admin startapp --template=https://github.com/githubuser/django-app-template/archive/main.zip myapp --extension EXTENSIONS , -e EXTENSIONS ¶ Specifies which file extensions in the app template should be rendered with the\ntemplate engine. Defaults to py . --name FILES , -n FILES ¶ Specifies which files in the app template (in addition to those matching --extension ) should be rendered with the template engine. Defaults to an\nempty list. --exclude DIRECTORIES , -x DIRECTORIES ¶ Specifies which directories in the app template should be excluded, in addition\nto .git and __pycache__ . If this option is not provided, directories\nnamed __pycache__ or starting with . will be excluded. The template context used for all matching\nfiles is: Any option passed to the startapp command (among the command’s supported\noptions) app_name – the app name as passed to the command app_directory – the full path of the newly created app camel_case_app_name – the app name in camel case format docs_version – the version of the documentation: 'dev' or '1.x' django_version – the version of Django, e.g. '2.0.3' Warning When the app template files are rendered with the Django template\nengine (by default all *.py files), Django will also replace all\nstray template variables contained. For example, if one of the Python files\ncontains a docstring explaining a particular feature related\nto template rendering, it might result in an incorrect example. To work around this problem, you can use the templatetag template tag to “escape” the various parts of the template syntax. In addition, to allow Python template files that contain Django template\nlanguage syntax while also preventing packaging systems from trying to\nbyte-compile invalid *.py files, template files ending with .py-tpl will be renamed to .py . Warning The contents of custom app (or project) templates should always be\naudited before use: Such templates define code that will become\npart of your project, and this means that such code will be trusted\nas much as any app you install, or code you write yourself.\nFurther, even rendering the templates is, effectively, executing\ncode that was provided as input to the management command. The\nDjango template language may provide wide access into the system,\nso make sure any custom template you use is worthy of your trust. startproject ¶ django-admin startproject name [directory] ¶ Creates a Django project directory structure for the given project name in\nthe current directory or the given destination. By default, the new directory contains manage.py and a project package (containing a settings.py and other\nfiles). If only the project name is given, both the project directory and project\npackage will be named <projectname> and the project directory\nwill be created in the current working directory. If the optional destination is provided, Django will use that existing\ndirectory as the project directory, and create manage.py and the project\npackage within it. Use ‘.’ to denote the current working directory. For example: django-admin startproject myproject /Users/jezdez/Code/myproject_repo --template TEMPLATE ¶ Specifies a directory, file path, or URL of a custom project template. See the startapp --template documentation for examples and usage. --extension EXTENSIONS , -e EXTENSIONS ¶ Specifies which file extensions in the project template should be rendered with\nthe template engine. Defaults to py . --name FILES , -n FILES ¶ Specifies which files in the project template (in addition to those matching --extension ) should be rendered with the template engine. Defaults to an\nempty list. --exclude DIRECTORIES , -x DIRECTORIES ¶ Specifies which directories in the project template should be excluded, in\naddition to .git and __pycache__ . If this option is not provided,\ndirectories named __pycache__ or starting with . will be excluded. The template context used is: Any option passed to the startproject command (among the command’s\nsupported options) project_name – the project name as passed to the command project_directory – the full path of the newly created project secret_key – a random key for the SECRET_KEY setting docs_version – the version of the documentation: 'dev' or '1.x' django_version – the version of Django, e.g. '2.0.3' Please also see the rendering warning and trusted code warning as mentioned for startapp . test ¶ django-admin test [test_label [test_label ...]] ¶ Runs tests for all installed apps. See Testing in Django for more\ninformation. --failfast ¶ Stops running tests and reports the failure immediately after a test fails. --testrunner TESTRUNNER ¶ Controls the test runner class that is used to execute tests. This value\noverrides the value provided by the TEST_RUNNER setting. --noinput , --no-input ¶ Suppresses all user prompts. A typical prompt is a warning about deleting an\nexisting test database. Test runner options ¶ The test command receives options on behalf of the specified --testrunner . These are the options of the default test runner: DiscoverRunner . --keepdb ¶ Preserves the test database between test runs. This has the advantage of\nskipping both the create and destroy actions which can greatly decrease the\ntime to run tests, especially those in a large test suite. If the test database\ndoes not exist, it will be created on the first run and then preserved for each\nsubsequent run. Unless the MIGRATE test setting is False , any unapplied migrations will also be applied to the test database\nbefore running the test suite. --shuffle [SEED] ¶ Randomizes the order of tests before running them. This can help detect tests\nthat aren’t properly isolated. The test order generated by this option is a\ndeterministic function of the integer seed given. When no seed is passed, a\nseed is chosen randomly and printed to the console. To repeat a particular test\norder, pass a seed. The test orders generated by this option preserve Django’s guarantees on test order . They also keep tests grouped\nby test case class. The shuffled orderings also have a special consistency property useful when\nnarrowing down isolation issues. Namely, for a given seed and when running a\nsubset of tests, the new order will be the original shuffling restricted to the\nsmaller set. Similarly, when adding tests while keeping the seed the same, the\norder of the original tests will be the same in the new order. --reverse , -r ¶ Sorts test cases in the opposite execution order. This may help in debugging\nthe side effects of tests that aren’t properly isolated. Grouping by test\nclass is preserved when using this option. This can be used\nin conjunction with --shuffle to reverse the order for a particular seed. --debug-mode ¶ Sets the DEBUG setting to True prior to running tests. This may\nhelp troubleshoot test failures. --debug-sql , -d ¶ Enables SQL logging for failing tests. If --verbosity is 2 , then queries in passing tests are also output. --parallel [N] ¶ DJANGO_TEST_PROCESSES ¶ Runs tests in separate parallel processes. Since modern processors have\nmultiple cores, this allows running tests significantly faster. Using --parallel without a value, or with the value auto , runs one test\nprocess per core according to multiprocessing.cpu_count() . You can\noverride this by passing the desired number of processes, e.g. --parallel 4 , or by setting the DJANGO_TEST_PROCESSES environment\nvariable. Django distributes test cases — unittest.TestCase subclasses — to\nsubprocesses. If there are fewer test case classes than configured processes,\nDjango will reduce the number of processes accordingly. Each process gets its own database. You must ensure that different test case\nclasses don’t access the same resources. For instance, test case classes that\ntouch the filesystem should create a temporary directory for their own use. Note If you have test classes that cannot be run in parallel, you can use SerializeMixin to run them sequentially. See Enforce running test\nclasses sequentially . This option requires the third-party tblib package to display tracebacks\ncorrectly: $ python -m pip install tblib This feature isn’t available on Windows. It doesn’t work with the Oracle\ndatabase backend either. If you want to use pdb while debugging tests, you must disable parallel\nexecution ( --parallel=1 ). You’ll see something like bdb.BdbQuit if you\ndon’t. Warning When test parallelization is enabled and a test fails, Django may be\nunable to display the exception traceback. This can make debugging\ndifficult. If you encounter this problem, run the affected test without\nparallelization to see the traceback of the failure. This is a known limitation. It arises from the need to serialize objects\nin order to exchange them between processes. See What can be pickled and unpickled? for details. --tag TAGS ¶ Runs only tests marked with the specified tags .\nMay be specified multiple times and combined with test --exclude-tag . Tests that fail to load are always considered matching. --exclude-tag EXCLUDE_TAGS ¶ Excludes tests marked with the specified tags .\nMay be specified multiple times and combined with test --tag . -k TEST_NAME_PATTERNS ¶ Runs test methods and classes matching test name patterns, in the same way as unittest's -k option . Can be specified multiple times. --pdb ¶ Spawns a pdb debugger at each test error or failure. If you have it\ninstalled, ipdb is used instead. --buffer , -b ¶ Discards output ( stdout and stderr ) for passing tests, in the same way\nas unittest's --buffer option . --no-faulthandler ¶ Django automatically calls faulthandler.enable() when starting the\ntests, which allows it to print a traceback if the interpreter crashes. Pass --no-faulthandler to disable this behavior. --timing ¶ Outputs timings, including database setup and total run time. --durations N ¶ New in Django 5.0. Shows the N slowest test cases (N=0 for all). Python 3.12 and later This feature is only available for Python 3.12 and later. testserver ¶ django-admin testserver [fixture [fixture ...]] ¶ Runs a Django development server (as in runserver ) using data from\nthe given fixture(s). For example, this command: django-admin testserver mydata.json …would perform the following steps: Create a test database, as described in The test database . Populate the test database with fixture data from the given fixtures.\n(For more on fixtures, see the documentation for loaddata above.) Runs the Django development server (as in runserver ), pointed at\nthis newly created test database instead of your production database. This is useful in a number of ways: When you’re writing unit tests of how your views\nact with certain fixture data, you can use testserver to interact with\nthe views in a web browser, manually. Let’s say you’re developing your Django application and have a “pristine”\ncopy of a database that you’d like to interact with. You can dump your\ndatabase to a fixture (using the dumpdata command, explained above), then use testserver to run\nyour web application with that data.  With this arrangement, you have the\nflexibility of messing up your data in any way, knowing that whatever data\nchanges you’re making are only being made to a test database. Note that this server does not automatically detect changes to your Python\nsource code (as runserver does). It does, however, detect changes to\ntemplates. --addrport ADDRPORT ¶ Specifies a different port, or IP address and port, from the default of 127.0.0.1:8000 . This value follows exactly the same format and serves\nexactly the same function as the argument to the runserver command. Examples: To run the test server on port 7000 with fixture1 and fixture2 : django-admin testserver --addrport 7000 fixture1 fixture2 django-admin testserver fixture1 fixture2 --addrport 7000 (The above statements are equivalent. We include both of them to demonstrate\nthat it doesn’t matter whether the options come before or after the fixture\narguments.) To run on 1.2.3.4:7000 with a test fixture: django-admin testserver --addrport 1.2.3.4:7000 test --noinput , --no-input ¶ Suppresses all user prompts. A typical prompt is a warning about deleting an\nexisting test database. Commands provided by applications ¶ Some commands are only available when the django.contrib application that implements them has been enabled . This section describes them grouped by\ntheir application. django.contrib.auth ¶ changepassword ¶ django-admin changepassword [<username>] ¶ This command is only available if Django’s authentication system ( django.contrib.auth ) is installed. Allows changing a user’s password. It prompts you to enter a new password twice\nfor the given user. If the entries are identical, this immediately becomes the\nnew password. If you do not supply a user, the command will attempt to change\nthe password whose username matches the current user. --database DATABASE ¶ Specifies the database to query for the user. Defaults to default . Example usage: django-admin changepassword ringo createsuperuser ¶ django-admin createsuperuser ¶ DJANGO_SUPERUSER_PASSWORD ¶ This command is only available if Django’s authentication system ( django.contrib.auth ) is installed. Creates a superuser account (a user who has all permissions). This is\nuseful if you need to create an initial superuser account or if you need to\nprogrammatically generate superuser accounts for your site(s). When run interactively, this command will prompt for a password for\nthe new superuser account. When run non-interactively, you can provide\na password by setting the DJANGO_SUPERUSER_PASSWORD environment\nvariable. Otherwise, no password will be set, and the superuser account will\nnot be able to log in until a password has been manually set for it. In non-interactive mode, the USERNAME_FIELD and required\nfields (listed in REQUIRED_FIELDS ) fall back to DJANGO_SUPERUSER_<uppercase_field_name> environment variables, unless they\nare overridden by a command line argument. For example, to provide an email field, you can use DJANGO_SUPERUSER_EMAIL environment variable. --noinput , --no-input ¶ Suppresses all user prompts. If a suppressed prompt cannot be resolved\nautomatically, the command will exit with error code 1. --username USERNAME ¶ --email EMAIL ¶ The username and email address for the new account can be supplied by\nusing the --username and --email arguments on the command\nline. If either of those is not supplied, createsuperuser will prompt for\nit when running interactively. --database DATABASE ¶ Specifies the database into which the superuser object will be saved. You can subclass the management command and override get_input_data() if you\nwant to customize data input and validation. Consult the source code for\ndetails on the existing implementation and the method’s parameters. For example,\nit could be useful if you have a ForeignKey in REQUIRED_FIELDS and want to\nallow creating an instance instead of entering the primary key of an existing\ninstance. django.contrib.contenttypes ¶ remove_stale_contenttypes ¶ django-admin remove_stale_contenttypes ¶ This command is only available if Django’s contenttypes app ( django.contrib.contenttypes ) is installed. Deletes stale content types (from deleted models) in your database. Any objects\nthat depend on the deleted content types will also be deleted. A list of\ndeleted objects will be displayed before you confirm it’s okay to proceed with\nthe deletion. --database DATABASE ¶ Specifies the database to use. Defaults to default . --include-stale-apps ¶ Deletes stale content types including ones from previously installed apps that\nhave been removed from INSTALLED_APPS . Defaults to False . django.contrib.gis ¶ ogrinspect ¶ This command is only available if GeoDjango ( django.contrib.gis ) is installed. Please refer to its description in the GeoDjango\ndocumentation. django.contrib.sessions ¶ clearsessions ¶ django-admin clearsessions ¶ Can be run as a cron job or directly to clean out expired sessions. django.contrib.staticfiles ¶ collectstatic ¶ This command is only available if the static files application ( django.contrib.staticfiles ) is installed. Please refer to its description in the staticfiles documentation. findstatic ¶ This command is only available if the static files application ( django.contrib.staticfiles ) is installed. Please refer to its description in the staticfiles documentation. Default options ¶ Although some commands may allow their own custom options, every command\nallows for the following options by default: --pythonpath PYTHONPATH ¶ Adds the given filesystem path to the Python sys.path module\nattribute. If this isn’t provided, django-admin will use the PYTHONPATH environment variable. This option is unnecessary in manage.py , because it takes care of setting\nthe Python path for you. Example usage: django-admin migrate --pythonpath='/home/djangoprojects/myproject' --settings SETTINGS ¶ Specifies the settings module to use. The settings module should be in Python\npackage syntax, e.g. mysite.settings . If this isn’t provided, django-admin will use the DJANGO_SETTINGS_MODULE environment\nvariable. This option is unnecessary in manage.py , because it uses settings.py from the current project by default. Example usage: django-admin migrate --settings=mysite.settings --traceback ¶ Displays a full stack trace when a CommandError is raised. By default, django-admin will show an error message when a CommandError occurs and a full stack trace for any other exception. This option is ignored by runserver . Example usage: django-admin migrate --traceback --verbosity {0,1,2,3} , -v {0,1,2,3} ¶ Specifies the amount of notification and debug information that a command\nshould print to the console. 0 means no output. 1 means normal output (default). 2 means verbose output. 3 means very verbose output. This option is ignored by runserver . Example usage: django-admin migrate --verbosity 2 --no-color ¶ Disables colorized command output.  Some commands format their output to be\ncolorized. For example, errors will be printed to the console in red and SQL\nstatements will be syntax highlighted. Example usage: django-admin runserver --no-color --force-color ¶ Forces colorization of the command output if it would otherwise be disabled\nas discussed in Syntax coloring . For example, you may want to pipe\ncolored output to another command. --skip-checks ¶ Skips running system checks prior to running the command. This option is only\navailable if the requires_system_checks command\nattribute is not an empty list or tuple. Example usage: django-admin migrate --skip-checks Extra niceties ¶ Syntax coloring ¶ DJANGO_COLORS ¶ The django-admin / manage.py commands will use pretty\ncolor-coded output if your terminal supports ANSI-colored output. It\nwon’t use the color codes if you’re piping the command’s output to\nanother program unless the --force-color option is used. Windows support ¶ On Windows 10, the Windows Terminal application, VS Code , and PowerShell\n(where virtual terminal processing is enabled) allow colored output, and are\nsupported by default. Under Windows, the legacy cmd.exe native console doesn’t support ANSI\nescape sequences so by default there is no color output. In this case either of\ntwo third-party libraries are needed: Install colorama , a Python package that translates ANSI color codes\ninto Windows API calls. Django commands will detect its presence and will\nmake use of its services to color output just like on Unix-based platforms. colorama can be installed via pip: ...\\> py -m pip install \"colorama >= 0.4.6\" Install ANSICON , a third-party tool that allows cmd.exe to process\nANSI color codes. Django commands will detect its presence and will make use\nof its services to color output just like on Unix-based platforms. Other modern terminal environments on Windows, that support terminal colors,\nbut which are not automatically detected as supported by Django, may “fake” the\ninstallation of ANSICON by setting the appropriate environmental variable, ANSICON=\"on\" . Custom colors ¶ The colors used for syntax highlighting can be customized. Django\nships with three color palettes: dark , suited to terminals that show white text on a black\nbackground. This is the default palette. light , suited to terminals that show black text on a white\nbackground. nocolor , which disables syntax highlighting. You select a palette by setting a DJANGO_COLORS environment\nvariable to specify the palette you want to use. For example, to\nspecify the light palette under a Unix or OS/X BASH shell, you\nwould run the following at a command prompt: export DJANGO_COLORS = \"light\" You can also customize the colors that are used. Django specifies a\nnumber of roles in which color is used: error - A major error. notice - A minor error. success - A success. warning - A warning. sql_field - The name of a model field in SQL. sql_coltype - The type of a model field in SQL. sql_keyword - An SQL keyword. sql_table - The name of a model in SQL. http_info - A 1XX HTTP Informational server response. http_success - A 2XX HTTP Success server response. http_not_modified - A 304 HTTP Not Modified server response. http_redirect - A 3XX HTTP Redirect server response other than 304. http_not_found - A 404 HTTP Not Found server response. http_bad_request - A 4XX HTTP Bad Request server response other than 404. http_server_error - A 5XX HTTP Server Error response. migrate_heading - A heading in a migrations management command. migrate_label - A migration name. Each of these roles can be assigned a specific foreground and\nbackground color, from the following list: black red green yellow blue magenta cyan white Each of these colors can then be modified by using the following\ndisplay options: bold underscore blink reverse conceal A color specification follows one of the following patterns: role=fg role=fg/bg role=fg,option,option role=fg/bg,option,option where role is the name of a valid color role, fg is the\nforeground color, bg is the background color and each option is one of the color modifying options. Multiple color specifications\nare then separated by a semicolon. For example: export DJANGO_COLORS = \"error=yellow/blue,blink;notice=magenta\" would specify that errors be displayed using blinking yellow on blue,\nand notices displayed using magenta. All other color roles would be\nleft uncolored. Colors can also be specified by extending a base palette. If you put\na palette name in a color specification, all the colors implied by that\npalette will be loaded. So: export DJANGO_COLORS = \"light;error=yellow/blue,blink;notice=magenta\" would specify the use of all the colors in the light color palette, except for the colors for errors and notices which would be\noverridden as specified. Bash completion ¶ If you use the Bash shell, consider installing the Django bash completion\nscript, which lives in extras/django_bash_completion in the Django source\ndistribution. It enables tab-completion of django-admin and manage.py commands, so you can, for instance… Type django-admin . Press [TAB] to see all available options. Type sql , then [TAB], to see all available options whose names start\nwith sql . See How to create custom django-admin commands for how to add customized actions. Black formatting ¶ The Python files created by startproject , startapp , optimizemigration , makemigrations , and squashmigrations are formatted using the black command if it is\npresent on your PATH . If you have black globally installed, but do not wish it used for the\ncurrent project, you can set the PATH explicitly: PATH = path/to/venv/bin django-admin makemigrations For commands using stdout you can pipe the output to black if needed: django-admin inspectdb | black - Running management commands from your code ¶ django.core.management. call_command ( name , * args , ** options ) ¶ To call a management command from code use call_command() . name the name of the command to call or a command object. Passing the name is\npreferred unless the object is required for testing. *args a list of arguments accepted by the command. Arguments are passed to the\nargument parser, so you can use the same style as you would on the command\nline. For example, call_command('flush', '--verbosity=0') . **options named options accepted on the command-line. Options are passed to the command\nwithout triggering the argument parser, which means you’ll need to pass the\ncorrect type. For example, call_command('flush', verbosity=0) (zero must\nbe an integer rather than a string). Examples: from django.core import management from django.core.management.commands import loaddata management . call_command ( \"flush\" , verbosity = 0 , interactive = False ) management . call_command ( \"loaddata\" , \"test_data\" , verbosity = 0 ) management . call_command ( loaddata . Command (), \"test_data\" , verbosity = 0 ) Note that command options that take no arguments are passed as keywords\nwith True or False , as you can see with the interactive option above. Named arguments can be passed by using either one of the following syntaxes: # Similar to the command line management . call_command ( \"dumpdata\" , \"--natural-foreign\" ) # Named argument similar to the command line minus the initial dashes and # with internal dashes replaced by underscores management . call_command ( \"dumpdata\" , natural_foreign = True ) # `use_natural_foreign_keys` is the option destination variable management . call_command ( \"dumpdata\" , use_natural_foreign_keys = True ) Some command options have different names when using call_command() instead\nof django-admin or manage.py . For example, django-admin createsuperuser --no-input translates to call_command('createsuperuser', interactive=False) . To find what keyword argument name to use for call_command() , check the command’s source code for the dest argument\npassed to parser.add_argument() . Command options which take multiple options are passed a list: management . call_command ( \"dumpdata\" , exclude = [ \"contenttypes\" , \"auth\" ]) The return value of the call_command() function is the same as the return\nvalue of the handle() method of the command. Output redirection ¶ Note that you can redirect standard output and error streams as all commands\nsupport the stdout and stderr options. For example, you could write: with open ( \"/path/to/command_output\" , \"w\" ) as f : management . call_command ( \"dumpdata\" , stdout = f )", "keywords": ["http_server_error", ".tgz", "django.server", "column", "py", "packaging", "variable", "modelname", "terminal", "comma", "randomizes", "type", "line", "commanderror", "url", "excludes", "cron", "http_redirect", "\\", "django.core.management", "--default", "place", "searches", "-style", "distribution", "limitation", "programs", "critical", ".html", "username", "settings", ".pot", "classes", "django_settings_module", "ships", "info", "method", "party", "shell", "green", "testing", "secret_key", "mydata.json", "directories", "repositories", "ignore", "performance", "labels", "dash", "media_root", "http_bad_request", "use", "status", "camel_case_app_name", "utility", "views", "messages", "ways", "dumpdata", "project", "timestamps", "runpython", "specification", "tab", "topic", "current_user", "integration", "way", "-i", ".tbz2", "select.select", "default", "suite", "option", "media_url", "1.x", "mysite.settings", "red", "client", "domain", "-l", "bdb", "need", "wrap", "command_output", "recognition", "username_field", "locale_paths", "package", "postgres", "contrib", "users", "tool", "os", "parser", "tree", "showmigrations", "backend", "githubuser", "semicolon", "generate", "pass", "argument", "pycache", "contrib.contenttypes", "prints", "localization", "django.contrib.postgres", "auto", "django.contrib.staticfiles", "version", "filesystem", "deletion", "db_column", "sys.path", "images", "tuple", "install", "windows", "orders", "palette", "platform", "app_label", "integer", "ansi", "conjunction", "----------------------+", "-s", "environments", "meta", "watchman", "x", "comment", "gettext", "steps", "runs", "lines", "merges", ".txt", "name", "pattern", "skips", "byte", "completion", "header", "stops", "app(s", "admin", "size", ".git", "call_command('createsuperuser", "python", "direction", "addition", "amount", "xgettext", "lifecycle", "startapp", "jezdez", "formats", "manage.py", "fixtures", "diverts", "discards", "working", "indexes", "sqlflush", "migration", "host", "failures", "sessions", "-x", "tag", "|", "pt_br", "address", "notices", "pep", "exclude_tags", "depth", "ports", "true", "display", "*", "framework", "structure", "--email", "node_modules", "locale", "serializemixin", "--fail", "verbosity", "txt", "--list", "coloring", "dbshell", "feature", "kernel", "test_runner", "updates", "key", "locale(s", "parameters", "djangoprojects", "squashmigrations", "issues", "state", "fashion", "migration_name", "characters", "permissions", "script", "disables", "browser", "error", "differences", "ansicon", "compression", "forces", "template", "debug", "xz", "cache", "migrations", "http_not_found", "interpreter", "archives", "symlinks", "destination", "restart", "setting", "stdin", "tasks", "rendering", "order", "systems", "django.contrib.sessions", "limits", "documentation", "-", "development", "style", "creation", "specifies", "shuffling", "-u", "--debug", "application", "--add", "app_directory", ".py", "foo@example.com", "divider", "migrate", "table", "port", "blink;notice", "behavior", "system", "startup", "for_field", "conflicts", "mode", "risk", "modules", "files", "query", ".tar.bz2", "camel", "sorts", "addrport", "lzma", "following", "makemessages", "import", "stdout", "runtime", "macos", "bar", "w", "information", "paths", "json", ".txz", "result", "#", "section", "authentication", "¶", "service", "fg", "locales", "conceal", "web", "sys.stdin", "admins", "venv", "marks", "couple", "informational", "--fake", "server", "suppresses", "streams", "change", "tracebacks", "format", "trace", "modifying", "word", "debugger", "palettes", "example", "unit", "identifier", "multiprocessing.cpu_count", "value", "functions", "compile", "source", "--exclude", "n", "fixture1", ".zip", "exclude", "dev", "languages", "blog", "optimization", "primary", "http_not_modified", "projectname", "html", "cyan", "create", "--shuffle", "examples", "things", "pythonpath", "details", "ipv6", "setup", "deserialization", "form", "ipython", "object", "root", "0.0.0.0", "highlighting", "guarantees", "warning", "discoverrunner", "hash", "loaddata", "prevents", "postgresql", "exit", "one", "niceties", "sync", "/path", "outdated/*/locale", "call_command('flush", "export", "myapp", "bar@example.com", "password", "multiple", "spawns", "sequence", "redirections", "api", "note", "production_settings", "keywords", "djangojs", "projects", "level", "timeout", "django", "createmodel", "message", "failure", "timings", "validation", "sqlite3", "syntax", "ringo", "sendtestemail", "text", "compiles", "field", "commas", "recovery", "contents", "terminals", "strings", "isolation_level", "http", "fixture(s", "debugging", "libraries", "resetting", "daphne", "arrangement", "effect", "foreign", "get_input_data", "migrate_label", "=", "console", "objects", "parallel", "1.2.3.4:8000", "language", "nocolor", "defaults", "squashing", "privileges", "remove_stale_contenttypes", "sql_field", "--ipv6", "implementation", "lists", "django_bash_completion", "connection", "instructions", "run", "+", "interface", "https", "diff", "mysql", "datetimes", "statements", "foreground", "pot", "cores", "migrationname", "logger", "staticfiles", "accounts", "translation", "requires_system_checks", "serialization", "contrib.auth", "templates", "mysite.blog", "help", "controls", "time", "exception", "oracle", "guess", "property", "category", "extras", "args", "mail_managers", "i18n", "192.168.2.1", "commands", "site", "css", "generation", "manager", "django_watchman_timeout", "problem", "powershell", "indentation", "orderings", "processes", "collectstatic", "specifications", "mails", "customizations", "output", "fields", "-a", "startproject", "bin", "test_data", "handle", "removes", "ipdb", "--format", ".tar.xz", "colorization", "ansicon=\"on", "copy", "custom", "testcase", "inspectdb", "static_root", "call_command", "f", "troubleshoot", "conf", "methods", "to", "machine", "mail_admins", "geodjango", "keyword", "none", "syncdb", "urls", "variables", "hundreds", "base", "--symlinks", "process", "access", "pywatchman", "command", "javascript", "sql_coltype", "js", "email", "allows", "name(s", "production", "color", "content", "diffsettings", "-p", "testrunner", "seconds", "handlers", "deployment", "end", "unix", "bdbquit", "makemigrations", "findstatic", "--app", "flag", "applications", "secret/*.html", "request", "subprocesses", "bash", "internationalization", "advantage", "verbosity=0", "tables", "engine", "progress", "thing", "changepassword", "natural_foreign", "createsuperuser", "isolation", "a", "data", "matching", "effects", ".po", "constraint", "fixture2", "--no", "site(s", "contenttype", "brackets", "runsql", "options", "vs", "environment", ".tar.lzma", "--include", "reduction", "dependencies", "notes", "stray", "patterns", "sqlplus", "combination", "1.2.0", "job", "response", "shortcut", "optimizer", "network", ".tlz", "django.core", "editing", "description", "superuser", "execution", "dashes", "keys", "configuration", "sql", "platforms", "sequences", "staging", "path", "recipient(s", "basename", "django_superuser_password", "archive", "-r", "table(s", "directory", ":1", "managers", "auth", "my_app_template", "application(s", "contenttypes", "asgi", "faulthandler", "optimize", "module", "apps", "arguments", "program", "~/.pythonrc.py", "consistency", "context", "memory", "roles", "yellow", ".pyc", "security", "docs_version", "redirection", "models", "detail", ".js", "underscores", "re", "compilemessages", "row", "call", "success", "processors", "subset", "addresses", "use_natural_foreign_keys", "behalf", "ogrinspect", "plan", "prod", "support", "types", "parallelization", "--template=/users", "django_superuser_<uppercase_field_name", "threading", "bz2", "background", "changes", "django.contrib", "problems", "stack", "rules", "servers", "cmd.exe", "escape", "glob", "legacy", "wsgi_application", "false", "linux", "ftp", "management", "prefix", "0.4.6", "docstring", "light", "django.contrib.gis", "records", "_", "-6", "ascii", "heading", "tests", "check", "codes", "flexibility", "values", "cases", "runner", "zip", "omitting", "eof", "new", "times", "optimizes", "localhost", "start_migration_name", "--pythonpath='/home", "django_version", "permission", "role", "translations", "media", "sqlmigrate", "compatibility", "--extension", "test", "audits", "underscore", "spaces", "obsolete", "ip", "services", "optimizemigration", "/", "sqlsequencereset", "location", "outputs", "input", "hostname", "fly", "--addrport", "usage", "fixture", "target", "entries", "model", "fr", "processing", "sql_keyword", "detection", "--skip", "enables", "--tag", "displays", "runserver", "checks", "migration(s", "tblib", "calls", "n’t", "templatetag", "pip", "formatting", "clearsessions", "--traceback", "syntaxes", "sqlite", "case", "tpl", "class", "number", "xml", "seed", "numbers", "redirect", "github", "return", "report", "--settings", "attribute", "ones", "trust", "function", "django_test_processes", "string", "reloader", "care", "list", "bug", "enforce", "machines", "filename", "loading", "actions", "--ignore", "app", "bpython", "uses", "parts", "project_name", "presence", "extension", "blue", "user", "part", "file", ".mo", "pythonstartup", "operations", "installation", "translators", "magenta", "errors", "core", "notice", "extensions", "account", "sign", "traceback", "partitions", "repl", "prompt", "django.core.management.commands", "notification", "psql", "names", "signals", "--database", "cvs", "modification", "colorama", "scope", "document", "tags", "set", "django.contrib.auth", "project_directory", "polling", "textfield", "pdb", "foreignkey", "database", "django.db.migrations.operations", "relationship", "prompts", "testserver", "reverse", "databases", "--force", "instance", "engines", "schema", "--output", "code", "resources", "black", "myproject_repo", "wsgi", "partition", "localhost:8000", "-c", "/users", "root_urlconf", "timestamp", "power", "django.contrib.contenttypes", "colors"], "type": "documentation"},
{"title": "Databases", "url": "https://docs.djangoproject.com/en/5.1/ref/databases/", "content": "Databases ¶ Django officially supports the following databases: PostgreSQL MariaDB MySQL Oracle SQLite There are also a number of database backends provided by third parties . Django attempts to support as many features as possible on all database\nbackends. However, not all database backends are alike, and we’ve had to make\ndesign decisions on which features to support and which assumptions we can make\nsafely. This file describes some of the features that might be relevant to Django\nusage. It is not intended as a replacement for server-specific documentation or\nreference manuals. General notes ¶ Persistent connections ¶ Persistent connections avoid the overhead of reestablishing a connection to\nthe database in each HTTP request. They’re controlled by the CONN_MAX_AGE parameter which defines the maximum lifetime of a\nconnection. It can be set independently for each database. The default value is 0 , preserving the historical behavior of closing the\ndatabase connection at the end of each request. To enable persistent\nconnections, set CONN_MAX_AGE to a positive integer of seconds. For\nunlimited persistent connections, set it to None . Connection management ¶ Django opens a connection to the database when it first makes a database\nquery. It keeps this connection open and reuses it in subsequent requests.\nDjango closes the connection once it exceeds the maximum age defined by CONN_MAX_AGE or when it isn’t usable any longer. In detail, Django automatically opens a connection to the database whenever it\nneeds one and doesn’t have one already — either because this is the first\nconnection, or because the previous connection was closed. At the beginning of each request, Django closes the connection if it has\nreached its maximum age. If your database terminates idle connections after\nsome time, you should set CONN_MAX_AGE to a lower value, so that\nDjango doesn’t attempt to use a connection that has been terminated by the\ndatabase server. (This problem may only affect very low traffic sites.) At the end of each request, Django closes the connection if it has reached its\nmaximum age or if it is in an unrecoverable error state. If any database\nerrors have occurred while processing the requests, Django checks whether the\nconnection still works, and closes it if it doesn’t. Thus, database errors\naffect at most one request per each application’s worker thread; if the\nconnection becomes unusable, the next request gets a fresh connection. Setting CONN_HEALTH_CHECKS to True can be used to improve the\nrobustness of connection reuse and prevent errors when a connection has been\nclosed by the database server which is now ready to accept and serve new\nconnections, e.g. after database server restart. The health check is performed\nonly once per request and only if the database is being accessed during the\nhandling of the request. Caveats ¶ Since each thread maintains its own connection, your database must support at\nleast as many simultaneous connections as you have worker threads. Sometimes a database won’t be accessed by the majority of your views, for\nexample because it’s the database of an external system, or thanks to caching.\nIn such cases, you should set CONN_MAX_AGE to a low value or even 0 , because it doesn’t make sense to maintain a connection that’s unlikely\nto be reused. This will help keep the number of simultaneous connections to\nthis database small. The development server creates a new thread for each request it handles,\nnegating the effect of persistent connections. Don’t enable them during\ndevelopment. When Django establishes a connection to the database, it sets up appropriate\nparameters, depending on the backend being used. If you enable persistent\nconnections, this setup is no longer repeated every request. If you modify\nparameters such as the connection’s isolation level or time zone, you should\neither restore Django’s defaults at the end of each request, force an\nappropriate value at the beginning of each request, or disable persistent\nconnections. If a connection is created in a long-running process, outside of Django’s\nrequest-response cycle, the connection will remain open until explicitly\nclosed, or timeout occurs. You can use django.db.close_old_connections() to\nclose all old or unusable connections. Encoding ¶ Django assumes that all databases use UTF-8 encoding. Using other encodings may\nresult in unexpected behavior such as “value too long” errors from your\ndatabase for data that is valid in Django. See the database specific notes\nbelow for information on how to set up your database correctly. PostgreSQL notes ¶ Django supports PostgreSQL 13 and higher. psycopg 3.1.8+ or psycopg2 2.8.4+ is required, though the latest psycopg 3.1.8+ is recommended. Note Support for psycopg2 is likely to be deprecated and removed at some\npoint in the future. PostgreSQL connection settings ¶ See HOST for details. To connect using a service name from the connection service file and a\npassword from the password file , you must specify them in the OPTIONS part of your database configuration in DATABASES : settings.py ¶ DATABASES = { \"default\" : { \"ENGINE\" : \"django.db.backends.postgresql\" , \"OPTIONS\" : { \"service\" : \"my_service\" , \"passfile\" : \".my_pgpass\" , }, } } .pg_service.conf ¶ [my_service]\nhost=localhost\nuser=USER\ndbname=NAME\nport=5432 .my_pgpass ¶ localhost:5432:NAME:USER:PASSWORD The PostgreSQL backend passes the content of OPTIONS as keyword\narguments to the connection constructor, allowing for more advanced control\nof driver behavior. All available parameters are described in detail in the\nPostgreSQL documentation. Warning Using a service name for testing purposes is not supported. This may be implemented later . Optimizing PostgreSQL’s configuration ¶ Django needs the following parameters for its database connections: client_encoding : 'UTF8' , default_transaction_isolation : 'read committed' by default,\nor the value set in the connection options (see below), timezone : when USE_TZ is True , 'UTC' by default, or the TIME_ZONE value set for the connection, when USE_TZ is False , the value of the global TIME_ZONE setting. If these parameters already have the correct values, Django won’t set them for\nevery new connection, which improves performance slightly. You can configure\nthem directly in postgresql.conf or more conveniently per database\nuser with ALTER ROLE . Django will work just fine without this optimization, but each new connection\nwill do some additional queries to set these parameters. Isolation level ¶ Like PostgreSQL itself, Django defaults to the READ COMMITTED isolation\nlevel . If you need a higher isolation level such as REPEATABLE READ or SERIALIZABLE , set it in the OPTIONS part of your database\nconfiguration in DATABASES : from django.db.backends.postgresql.psycopg_any import IsolationLevel DATABASES = { # ... \"OPTIONS\" : { \"isolation_level\" : IsolationLevel . SERIALIZABLE , }, } Note Under higher isolation levels, your application should be prepared to\nhandle exceptions raised on serialization failures. This option is\ndesigned for advanced uses. Role ¶ If you need to use a different role for database connections than the role use\nto establish the connection, set it in the OPTIONS part of your\ndatabase configuration in DATABASES : DATABASES = { \"default\" : { \"ENGINE\" : \"django.db.backends.postgresql\" , # ... \"OPTIONS\" : { \"assume_role\" : \"my_application_role\" , }, }, } Connection pool ¶ New in Django 5.1. To use a connection pool with psycopg , you can either set \"pool\" in the OPTIONS part of your database configuration in DATABASES to be a dict to be passed to ConnectionPool , or\nto True to use the ConnectionPool defaults: DATABASES = { \"default\" : { \"ENGINE\" : \"django.db.backends.postgresql\" , # ... \"OPTIONS\" : { \"pool\" : True , }, }, } This option requires psycopg[pool] or psycopg-pool to be installed\nand is ignored with psycopg2 . Server-side parameters binding ¶ With psycopg 3.1.8+, Django defaults to the client-side binding\ncursors . If you want to use the server-side binding set it in the OPTIONS part of your database configuration in DATABASES : DATABASES = { \"default\" : { \"ENGINE\" : \"django.db.backends.postgresql\" , # ... \"OPTIONS\" : { \"server_side_binding\" : True , }, }, } This option is ignored with psycopg2 . Indexes for varchar and text columns ¶ When specifying db_index=True on your model fields, Django typically\noutputs a single CREATE INDEX statement.  However, if the database type\nfor the field is either varchar or text (e.g., used by CharField , FileField , and TextField ), then Django will create\nan additional index that uses an appropriate PostgreSQL operator class for the column.  The extra index is necessary to correctly perform\nlookups that use the LIKE operator in their SQL, as is done with the contains and startswith lookup types. Migration operation for adding extensions ¶ If you need to add a PostgreSQL extension (like hstore , postgis , etc.)\nusing a migration, use the CreateExtension operation. Server-side cursors ¶ When using QuerySet.iterator() , Django opens a server-side\ncursor . By default, PostgreSQL assumes that\nonly the first 10% of the results of cursor queries will be fetched. The query\nplanner spends less time planning the query and starts returning results\nfaster, but this could diminish performance if more than 10% of the results are\nretrieved. PostgreSQL’s assumptions on the number of rows retrieved for a\ncursor query is controlled with the cursor_tuple_fraction option. Transaction pooling and server-side cursors ¶ Using a connection pooler in transaction pooling mode (e.g. PgBouncer )\nrequires disabling server-side cursors for that connection. Server-side cursors are local to a connection and remain open at the end of a\ntransaction when AUTOCOMMIT is True . A\nsubsequent transaction may attempt to fetch more results from a server-side\ncursor. In transaction pooling mode, there’s no guarantee that subsequent\ntransactions will use the same connection. If a different connection is used,\nan error is raised when the transaction references the server-side cursor,\nbecause server-side cursors are only accessible in the connection in which they\nwere created. One solution is to disable server-side cursors for a connection in DATABASES by setting DISABLE_SERVER_SIDE_CURSORS to True . To benefit from server-side cursors in transaction pooling mode, you could set\nup another connection to the database in order to\nperform queries that use server-side cursors. This connection needs to either\nbe directly to the database or to a connection pooler in session pooling mode. Another option is to wrap each QuerySet using server-side cursors in an atomic() block, because it disables autocommit for the duration of the transaction. This way, the server-side cursor will only\nlive for the duration of the transaction. Manually-specifying values of auto-incrementing primary keys ¶ Django uses PostgreSQL’s identity columns to store auto-incrementing primary\nkeys. An identity column is populated with values from a sequence that keeps\ntrack of the next available value. Manually assigning a value to an\nauto-incrementing field doesn’t update the field’s sequence, which might later\ncause a conflict. For example: >>> from django.contrib.auth.models import User >>> User . objects . create ( username = \"alice\" , pk = 1 ) <User: alice> >>> # The sequence hasn't been updated; its next value is 1. >>> User . objects . create ( username = \"bob\" ) IntegrityError: duplicate key value violates unique constraint \"auth_user_pkey\" DETAIL:  Key (id)=(1) already exists. If you need to specify such values, reset the sequence afterward to avoid\nreusing a value that’s already in the table. The sqlsequencereset management command generates the SQL statements to do that. Test database templates ¶ You can use the TEST['TEMPLATE'] setting to specify\na template (e.g. 'template0' ) from which to create a test database. Speeding up test execution with non-durable settings ¶ You can speed up test execution times by configuring PostgreSQL to be\nnon-durable . Warning This is dangerous: it will make your database more susceptible to data loss\nor corruption in the case of a server crash or power loss. Only use this on\na development machine where you can easily restore the entire contents of\nall databases in the cluster. MariaDB notes ¶ Django supports MariaDB 10.5 and higher. To use MariaDB, use the MySQL backend, which is shared between the two. See the MySQL notes for more details. MySQL notes ¶ Version support ¶ Django supports MySQL 8.0.11 and higher. Django’s inspectdb feature uses the information_schema database, which\ncontains detailed data on all database schemas. Django expects the database to support Unicode (UTF-8 encoding) and delegates to\nit the task of enforcing transactions and referential integrity. It is important\nto be aware of the fact that the two latter ones aren’t actually enforced by\nMySQL when using the MyISAM storage engine, see the next section. Storage engines ¶ MySQL has several storage engines . You can change the default storage engine\nin the server configuration. MySQL’s default storage engine is InnoDB . This engine is fully transactional\nand supports foreign key references. It’s the recommended choice. However, the\nInnoDB autoincrement counter is lost on a MySQL restart because it does not\nremember the AUTO_INCREMENT value, instead recreating it as “max(id)+1”.\nThis may result in an inadvertent reuse of AutoField values. The main drawbacks of MyISAM are that it doesn’t support transactions or\nenforce foreign-key constraints. MySQL DB API Drivers ¶ MySQL has a couple drivers that implement the Python Database API described in PEP 249 : mysqlclient is a native driver. It’s the recommended choice . MySQL Connector/Python is a pure Python driver from Oracle that does not\nrequire the MySQL client library or any Python modules outside the standard\nlibrary. These drivers are thread-safe and provide connection pooling. In addition to a DB API driver, Django needs an adapter to access the database\ndrivers from its ORM. Django provides an adapter for mysqlclient while MySQL\nConnector/Python includes its own . mysqlclient ¶ Django requires mysqlclient 1.4.3 or later. MySQL Connector/Python ¶ MySQL Connector/Python is available from the download page .\nThe Django adapter is available in versions 1.1.X and later. It may not\nsupport the most recent releases of Django. Time zone definitions ¶ If you plan on using Django’s timezone support ,\nuse mysql_tzinfo_to_sql to load time zone tables into the MySQL database.\nThis needs to be done just once for your MySQL server, not per database. Creating your database ¶ You can create your database using the command-line tools and this SQL: CREATE DATABASE < dbname > CHARACTER SET utf8 ; This ensures all tables and columns will use UTF-8 by default. Collation settings ¶ The collation setting for a column controls the order in which data is sorted\nas well as what strings compare as equal. You can specify the db_collation parameter to set the collation name of the column for CharField and TextField . The collation can also be set on a database-wide level and per-table. This is documented thoroughly in the MySQL documentation. In such cases, you must\nset the collation by directly manipulating the database settings or tables.\nDjango doesn’t provide an API to change them. By default, with a UTF-8 database, MySQL will use the utf8_general_ci collation. This results in all string equality\ncomparisons being done in a case-insensitive manner. That is, \"Fred\" and \"freD\" are considered equal at the database level. If you have a unique\nconstraint on a field, it would be illegal to try to insert both \"aa\" and \"AA\" into the same column, since they compare as equal (and, hence,\nnon-unique) with the default collation. If you want case-sensitive comparisons\non a particular column or table, change the column or table to use the utf8_bin collation. Please note that according to MySQL Unicode Character Sets , comparisons for\nthe utf8_general_ci collation are faster, but slightly less correct, than\ncomparisons for utf8_unicode_ci . If this is acceptable for your application,\nyou should use utf8_general_ci because it is faster. If this is not acceptable\n(for example, if you require German dictionary order), use utf8_unicode_ci because it is more accurate. Warning Model formsets validate unique fields in a case-sensitive manner. Thus when\nusing a case-insensitive collation, a formset with unique field values that\ndiffer only by case will pass validation, but upon calling save() , an IntegrityError will be raised. Connecting to the database ¶ Refer to the settings documentation . Connection settings are used in this order: OPTIONS . NAME , USER , PASSWORD , HOST , PORT MySQL option files. In other words, if you set the name of the database in OPTIONS ,\nthis will take precedence over NAME , which would override\nanything in a MySQL option file . Here’s a sample configuration which uses a MySQL option file: # settings.py DATABASES = { \"default\" : { \"ENGINE\" : \"django.db.backends.mysql\" , \"OPTIONS\" : { \"read_default_file\" : \"/path/to/my.cnf\" , }, } } # my.cnf [client] database = NAME user = USER password = PASSWORD default-character-set = utf8 Several other MySQLdb connection options may be useful, such as ssl , init_command , and sql_mode . Setting sql_mode ¶ The default value of the sql_mode option contains STRICT_TRANS_TABLES .\nThat option escalates warnings into errors when data are truncated upon\ninsertion, so Django highly recommends activating a strict mode for MySQL to\nprevent data loss (either STRICT_TRANS_TABLES or STRICT_ALL_TABLES ). If you need to customize the SQL mode, you can set the sql_mode variable\nlike other MySQL options: either in a config file or with the entry 'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\" in the OPTIONS part of your database configuration in DATABASES . Isolation level ¶ When running concurrent loads, database transactions from different sessions\n(say, separate threads handling different requests) may interact with each\nother. These interactions are affected by each session’s transaction isolation\nlevel . You can set a connection’s isolation level with an 'isolation_level' entry in the OPTIONS part of your database\nconfiguration in DATABASES . Valid values for\nthis entry are the four standard isolation levels: 'read uncommitted' 'read committed' 'repeatable read' 'serializable' or None to use the server’s configured isolation level. However, Django\nworks best with and defaults to read committed rather than MySQL’s default,\nrepeatable read. Data loss is possible with repeatable read. In particular,\nyou may see cases where get_or_create() will raise an IntegrityError but the object won’t appear in\na subsequent get() call. Creating your tables ¶ When Django generates the schema, it doesn’t specify a storage engine, so\ntables will be created with whatever default storage engine your database\nserver is configured for. The easiest solution is to set your database server’s\ndefault storage engine to the desired engine. If you’re using a hosting service and can’t change your server’s default\nstorage engine, you have a couple of options. After the tables are created, execute an ALTER TABLE statement to\nconvert a table to a new storage engine (such as InnoDB): ALTER TABLE < tablename > ENGINE = INNODB ; This can be tedious if you have a lot of tables. Another option is to use the init_command option for MySQLdb prior to\ncreating your tables: \"OPTIONS\" : { \"init_command\" : \"SET default_storage_engine=INNODB\" , } This sets the default storage engine upon connecting to the database.\nAfter your tables have been created, you should remove this option as it\nadds a query that is only needed during table creation to each database\nconnection. Table names ¶ There are known issues in even the latest versions of MySQL that can cause the\ncase of a table name to be altered when certain SQL statements are executed\nunder certain conditions. It is recommended that you use lowercase table\nnames, if possible, to avoid any problems that might arise from this behavior.\nDjango uses lowercase table names when it auto-generates table names from\nmodels, so this is mainly a consideration if you are overriding the table name\nvia the db_table parameter. Savepoints ¶ Both the Django ORM and MySQL (when using the InnoDB storage engine ) support database savepoints . If you use the MyISAM storage engine please be aware of the fact that you will\nreceive database-generated errors if you try to use the savepoint-related\nmethods of the transactions API . The reason\nfor this is that detecting the storage engine of a MySQL database/table is an\nexpensive operation so it was decided it isn’t worth to dynamically convert\nthese methods in no-op’s based in the results of such detection. Notes on specific fields ¶ Character fields ¶ Any fields that are stored with VARCHAR column types may have their max_length restricted to 255 characters if you are using unique=True for the field. This affects CharField , SlugField . See the MySQL documentation for more\ndetails. TextField limitations ¶ MySQL can index only the first N chars of a BLOB or TEXT column. Since TextField doesn’t have a defined length, you can’t mark it as unique=True . MySQL will report: “BLOB/TEXT column ‘<db_column>’ used in key\nspecification without a key length”. Fractional seconds support for Time and DateTime fields ¶ MySQL can store fractional seconds, provided that the column definition\nincludes a fractional indication (e.g. DATETIME(6) ). Django will not upgrade existing columns to include fractional seconds if the\ndatabase server supports it. If you want to enable them on an existing database,\nit’s up to you to either manually update the column on the target database, by\nexecuting a command like: ALTER TABLE ` your_table ` MODIFY ` your_datetime_column ` DATETIME ( 6 ) or using a RunSQL operation in a data migration . TIMESTAMP columns ¶ If you are using a legacy database that contains TIMESTAMP columns, you must\nset USE_TZ = False to avoid data corruption. inspectdb maps these columns to DateTimeField and if you enable timezone support,\nboth MySQL and Django will attempt to convert the values from UTC to local time. Row locking with QuerySet.select_for_update() ¶ MySQL and MariaDB do not support some options to the SELECT ... FOR UPDATE statement. If select_for_update() is used with an unsupported option, then\na NotSupportedError is raised. Option MariaDB MySQL SKIP LOCKED X (≥10.6) X NOWAIT X X OF X NO KEY When using select_for_update() on MySQL, make sure you filter a queryset\nagainst at least a set of fields contained in unique constraints or only\nagainst fields covered by indexes. Otherwise, an exclusive write lock will be\nacquired over the full table for the duration of the transaction. Automatic typecasting can cause unexpected results ¶ When performing a query on a string type, but with an integer value, MySQL will\ncoerce the types of all values in the table to an integer before performing the\ncomparison. If your table contains the values 'abc' , 'def' and you\nquery for WHERE mycolumn=0 , both rows will match. Similarly, WHERE mycolumn=1 will match the value 'abc1' . Therefore, string type fields included in Django\nwill always cast the value to a string before using it in a query. If you implement custom model fields that inherit from Field directly, are overriding get_prep_value() , or use RawSQL , extra() , or raw() , you should ensure that you perform\nappropriate typecasting. SQLite notes ¶ Django supports SQLite 3.31.0 and later. SQLite provides an excellent development alternative for applications that\nare predominantly read-only or require a smaller installation footprint. As\nwith all database servers, though, there are some differences that are\nspecific to SQLite that you should be aware of. Substring matching and case sensitivity ¶ For all SQLite versions, there is some slightly counterintuitive behavior when\nattempting to match some types of strings.  These are triggered when using the iexact or contains filters in Querysets. The behavior\nsplits into two cases: 1. For substring matching, all matches are done case-insensitively. That is a\nfilter such as filter(name__contains=\"aa\") will match a name of \"Aabb\" . 2. For strings containing characters outside the ASCII range, all exact string\nmatches are performed case-sensitively, even when the case-insensitive options\nare passed into the query. So the iexact filter will behave exactly\nthe same as the exact filter in these cases. Some possible workarounds for this are documented at sqlite.org , but they\naren’t utilized by the default SQLite backend in Django, as incorporating them\nwould be fairly difficult to do robustly. Thus, Django exposes the default\nSQLite behavior and you should be aware of this when doing case-insensitive or\nsubstring filtering. Decimal handling ¶ SQLite has no real decimal internal type. Decimal values are internally\nconverted to the REAL data type (8-byte IEEE floating point number), as\nexplained in the SQLite datatypes documentation , so they don’t support\ncorrectly-rounded decimal floating point arithmetic. “Database is locked” errors ¶ SQLite is meant to be a lightweight database, and thus can’t support a high\nlevel of concurrency. OperationalError: database is locked errors indicate\nthat your application is experiencing more concurrency than sqlite can\nhandle in default configuration. This error means that one thread or process has\nan exclusive lock on the database connection and another thread timed out\nwaiting for the lock the be released. Python’s SQLite wrapper has\na default timeout value that determines how long the second thread is allowed to\nwait on the lock before it times out and raises the OperationalError: database is locked error. If you’re getting this error, you can solve it by: Switching to another database backend. At a certain point SQLite becomes\ntoo “lite” for real-world applications, and these sorts of concurrency\nerrors indicate you’ve reached that point. Rewriting your code to reduce concurrency and ensure that database\ntransactions are short-lived. Increase the default timeout value by setting the timeout database\noption: \"OPTIONS\" : { # ... \"timeout\" : 20 , # ... } This will make SQLite wait a bit longer before throwing “database is locked”\nerrors; it won’t really do anything to solve them. Transactions behavior ¶ New in Django 5.1. SQLite supports three transaction modes: DEFERRED , IMMEDIATE , and EXCLUSIVE . The default is DEFERRED . If you need to use a different mode, set it in the OPTIONS part of your database configuration in DATABASES , for example: \"OPTIONS\" : { # ... \"transaction_mode\" : \"IMMEDIATE\" , # ... } To make sure your transactions wait until timeout before raising “Database\nis Locked”, change the transaction mode to IMMEDIATE . For the best performance with IMMEDIATE and EXCLUSIVE , transactions\nshould be as short as possible. This might be hard to guarantee for all of your\nviews so the usage of ATOMIC_REQUESTS is\ndiscouraged  in this case. For more information see Transactions in SQLite . QuerySet.select_for_update() not supported ¶ SQLite does not support the SELECT ... FOR UPDATE syntax. Calling it will\nhave no effect. Isolation when using QuerySet.iterator() ¶ There are special considerations described in Isolation In SQLite when\nmodifying a table while iterating over it using QuerySet.iterator() . If\na row is added, changed, or deleted within the loop, then that row may or may\nnot appear, or may appear twice, in subsequent results fetched from the\niterator. Your code must handle this. Enabling JSON1 extension on SQLite ¶ To use JSONField on SQLite, you need to enable the JSON1 extension on Python’s sqlite3 library. If the extension is\nnot enabled on your installation, a system error ( fields.E180 ) will be\nraised. To enable the JSON1 extension you can follow the instruction on the wiki page . Note The JSON1 extension is enabled by default on SQLite 3.38+. Setting pragma options ¶ New in Django 5.1. Pragma options can be set upon connection by using the init_command in\nthe OPTIONS part of your database configuration in DATABASES . The example below shows how to enable extra durability of\nsynchronous writes and change the cache_size : DATABASES = { \"default\" : { \"ENGINE\" : \"django.db.backends.sqlite3\" , # ... \"OPTIONS\" : { \"init_command\" : \"PRAGMA synchronous=3; PRAGMA cache_size=2000;\" , }, } } Oracle notes ¶ Django supports Oracle Database Server versions 19c and higher. Version\n1.3.2 or higher of the oracledb Python driver is required. Deprecated since version 5.0: Support for cx_Oracle is deprecated. In order for the python manage.py migrate command to work, your Oracle\ndatabase user must have privileges to run the following commands: CREATE TABLE CREATE SEQUENCE CREATE PROCEDURE CREATE TRIGGER To run a project’s test suite, the user usually needs these additional privileges: CREATE USER ALTER USER DROP USER CREATE TABLESPACE DROP TABLESPACE CREATE SESSION WITH ADMIN OPTION CREATE TABLE WITH ADMIN OPTION CREATE SEQUENCE WITH ADMIN OPTION CREATE PROCEDURE WITH ADMIN OPTION CREATE TRIGGER WITH ADMIN OPTION While the RESOURCE role has the required CREATE TABLE , CREATE SEQUENCE , CREATE PROCEDURE , and CREATE TRIGGER privileges,\nand a user granted RESOURCE WITH ADMIN OPTION can grant RESOURCE , such\na user cannot grant the individual privileges (e.g. CREATE TABLE ), and thus RESOURCE WITH ADMIN OPTION is not usually sufficient for running tests. Some test suites also create views or materialized views; to run these, the\nuser also needs CREATE VIEW WITH ADMIN OPTION and CREATE MATERIALIZED VIEW WITH ADMIN OPTION privileges. In particular, this\nis needed for Django’s own test suite. All of these privileges are included in the DBA role, which is appropriate\nfor use on a private developer’s database. The Oracle database backend uses the SYS.DBMS_LOB and SYS.DBMS_RANDOM packages, so your user will require execute permissions on it. It’s normally\naccessible to all users by default, but in case it is not, you’ll need to grant\npermissions like so: GRANT EXECUTE ON SYS . DBMS_LOB TO user ; GRANT EXECUTE ON SYS . DBMS_RANDOM TO user ; Connecting to the database ¶ To connect using the service name of your Oracle database, your settings.py file should look something like this: DATABASES = { \"default\" : { \"ENGINE\" : \"django.db.backends.oracle\" , \"NAME\" : \"xe\" , \"USER\" : \"a_user\" , \"PASSWORD\" : \"a_password\" , \"HOST\" : \"\" , \"PORT\" : \"\" , } } In this case, you should leave both HOST and PORT empty.\nHowever, if you don’t use a tnsnames.ora file or a similar naming method\nand want to connect using the SID (“xe” in this example), then fill in both HOST and PORT like so: DATABASES = { \"default\" : { \"ENGINE\" : \"django.db.backends.oracle\" , \"NAME\" : \"xe\" , \"USER\" : \"a_user\" , \"PASSWORD\" : \"a_password\" , \"HOST\" : \"dbprod01ned.mycompany.com\" , \"PORT\" : \"1540\" , } } You should either supply both HOST and PORT , or leave\nboth as empty strings. Django will use a different connect descriptor depending\non that choice. Full DSN and Easy Connect ¶ A Full DSN or Easy Connect string can be used in NAME if both HOST and PORT are empty. This format is required when\nusing RAC or pluggable databases without tnsnames.ora , for example. Example of an Easy Connect string: \"NAME\" : \"localhost:1521/orclpdb1\" Example of a full DSN string: \"NAME\" : ( \"(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521))\" \"(CONNECT_DATA=(SERVICE_NAME=orclpdb1)))\" ) Threaded option ¶ If you plan to run Django in a multithreaded environment (e.g. Apache using the\ndefault MPM module on any modern operating system), then you must set\nthe threaded option of your Oracle database configuration to True : \"OPTIONS\" : { \"threaded\" : True , } Failure to do this may result in crashes and other odd behavior. INSERT … RETURNING INTO ¶ By default, the Oracle backend uses a RETURNING INTO clause to efficiently\nretrieve the value of an AutoField when inserting new rows.  This behavior\nmay result in a DatabaseError in certain unusual setups, such as when\ninserting into a remote table, or into a view with an INSTEAD OF trigger.\nThe RETURNING INTO clause can be disabled by setting the use_returning_into option of the database configuration to False : \"OPTIONS\" : { \"use_returning_into\" : False , } In this case, the Oracle backend will use a separate SELECT query to\nretrieve AutoField values. Naming issues ¶ Oracle imposes a name length limit of 30 characters. To accommodate this, the\nbackend truncates database identifiers to fit, replacing the final four\ncharacters of the truncated name with a repeatable MD5 hash value.\nAdditionally, the backend turns database identifiers to all-uppercase. To prevent these transformations (this is usually required only when dealing\nwith legacy databases or accessing tables which belong to other users), use\na quoted name as the value for db_table : class LegacyModel ( models . Model ): class Meta : db_table = '\"name_left_in_lowercase\"' class ForeignModel ( models . Model ): class Meta : db_table = '\"OTHER_USER\".\"NAME_ONLY_SEEMS_OVER_30\"' Quoted names can also be used with Django’s other supported database\nbackends; except for Oracle, however, the quotes have no effect. When running migrate , an ORA-06552 error may be encountered if\ncertain Oracle keywords are used as the name of a model field or the\nvalue of a db_column option.  Django quotes all identifiers used\nin queries to prevent most such problems, but this error can still\noccur when an Oracle datatype is used as a column name.  In\nparticular, take care to avoid using the names date , timestamp , number or float as a field name. NULL and empty strings ¶ Django generally prefers to use the empty string ( '' ) rather than NULL , but Oracle treats both identically. To get around this, the\nOracle backend ignores an explicit null option on fields that\nhave the empty string as a possible value and generates DDL as if null=True . When fetching from the database, it is assumed that\na NULL value in one of these fields really means the empty\nstring, and the data is silently converted to reflect this assumption. TextField limitations ¶ The Oracle backend stores TextFields as NCLOB columns. Oracle imposes\nsome limitations on the usage of such LOB columns in general: LOB columns may not be used as primary keys. LOB columns may not be used in indexes. LOB columns may not be used in a SELECT DISTINCT list. This means that\nattempting to use the QuerySet.distinct method on a model that\nincludes TextField columns will result in an ORA-00932 error when\nrun against Oracle. As a workaround, use the QuerySet.defer method in\nconjunction with distinct() to prevent TextField columns from being\nincluded in the SELECT DISTINCT list. Subclassing the built-in database backends ¶ Django comes with built-in database backends. You may subclass an existing\ndatabase backends to modify its behavior, features, or configuration. Consider, for example, that you need to change a single database feature.\nFirst, you have to create a new directory with a base module in it. For\nexample: mysite/\n    ...\n    mydbengine/\n        __init__.py\n        base.py The base.py module must contain a class named DatabaseWrapper that\nsubclasses an existing engine from the django.db.backends module. Here’s an\nexample of subclassing the PostgreSQL engine to change a feature class allows_group_by_selected_pks_on_model : mysite/mydbengine/base.py ¶ from django.db.backends.postgresql import base , features class DatabaseFeatures ( features . DatabaseFeatures ): def allows_group_by_selected_pks_on_model ( self , model ): return True class DatabaseWrapper ( base . DatabaseWrapper ): features_class = DatabaseFeatures Finally, you must specify a DATABASE-ENGINE in your settings.py file: DATABASES = { \"default\" : { \"ENGINE\" : \"mydbengine\" , # ... }, } You can see the current list of database engines by looking in django/db/backends . Using a 3rd-party database backend ¶ In addition to the officially supported databases, there are backends provided\nby 3rd parties that allow you to use other databases with Django: CockroachDB Firebird Google Cloud Spanner Microsoft SQL Server Snowflake TiDB YugabyteDB The Django versions and ORM features supported by these unofficial backends\nvary considerably. Queries regarding the specific capabilities of these\nunofficial backends, along with any support queries, should be directed to\nthe support channels provided by each 3rd party project.", "keywords": ["alter", "column", "transactions", "chars", "setups", "variable", "rac", "robustness", "type", "line", "majority", "select_for_update", "tidb", "statement", "rows", "psycopg2", "def", "distinct", "username", "encodings", "settings", "reason", "null", "mysite", "method", "party", "hstore", "testing", "mysql_tzinfo_to_sql", "name_left_in_lowercase", "performance", "alice", "use", "views", "encoding", "sample", "project", "lite", "specification", "cursor", "abc1", "way", "default", "filters", "suite", "blob", "option", "op", "savepoints", "client", "deferred", "naming", "localhost:1521", "sys", "page", "select", "schemas", "block", "pooling", "queryset.select_for_update", "localhost)(port=1521", "age", "insertion", "constraints", "users", "lock", "disable_server_side_cursors", "backend", "self", "operationalerror", "foreignmodel", "words", "alternative", "auto", "drawbacks", "version", "db_column", "integer", "utf8_unicode_ci", "connectionpool", "interactions", "conjunction", "future", "meta", "cx_oracle", "x", "information_schema", "name", "world", "operator", "admin", "adapter", "python", "charfield", "a_password", "addition", "crashes", "description=(address=(protocol", "constructor", "isolationlevel", "guarantee", "indexes", "migration", "orm", "host", "failures", "pooler", "storage", "sessions", "descriptor", "pep", "cursor_tuple_fraction", "true", "max(id)+1", "inserting", "connect", "requests", "notsupportederror", "unicode", "operation", "download", "features", "length", "feature", "transformations", "traffic", "key", "truncates", "levels", "parameters", "template0", "mysqlclient", "issues", "zone", "serializable", "state", "psycopg[pool", "locked", "permissions", "characters", "driver", "warnings", "error", "differences", "identity", "design", "template", "control", "datetime", "writes", "connector", "restart", "%", "order", "documentation", "development", "comparisons", "creation", "general", "sense", "pk", "integrityerror", "application", "dbname", "port", "migrate", "passfile", "table", "iexact", "reuse", "behavior", "auto_increment", "system", "maps", "modify", "mode", "modules", "abc", "files", "query", "sorts", "mariadb", "dbms_lob", "django.db.backends.postgresql", "import", "manuals", "delegates", "information", "grant", "#", "decimal", "point", "section", "versions", "limitations", "¶", "service", "channels", "definition", "couple", "server", "sites", "precedence", "format", "beginning", "sid", "example", "session", "autoincrement", "value", "cluster", "sensitivity", "replacement", "optimization", "auth_user_pkey", "my_service", "save", "synchronous=3", "ssl", "create", "get_prep_value", "details", "1.3.2", "duration", "decisions", "setup", "psycopg", "slugfield", "object", "aa", "contains", "warning", "task", "hash", "postgresql", "library", "comparison", "queryset.iterator", "sql_mode='strict_trans_tables", "other_user\"", "trigger", "init_command", "password", "sequence", "fred", "api", "keywords", "conditions", "level", "timeout", "django", "workarounds", "thread", "fact", "failure", "parameter", "validation", "sqlite3", "syntax", "lot", "text", "default_storage_engine", "field", "loss", "contents", "strings", "bob", "orclpdb1", "isolation_level", "http", "operating", "\"name_only_seems_over_30", "formsets", "effect", "=", "objects", "crash", "drivers", "defaults", "dba", "server_side_binding", "privileges", "matches", "index", "connection", "google", "wrapper", "+", "pool", "utc", "mysql", "statements", "utf8_bin", "range", "ora-06552", "cache_size", "handling", ".my_pgpass", "serialization", "time", "sets", "spanner", "oracle", "queryset", "innodb", "lowercase", "commands", "dbprod01ned.mycompany.com", "corruption", "problem", "releases", "oracledb", "assume_role", "postgresql.conf", "fields", "use_returning_into", "parties", "lob", "snowflake", "durability", "inherit", "custom", "persistent", "inspectdb", "collation", "methods", "side", "machine", "keyword", "update", "allows_group_by_selected_pks_on_model", "apache", "none", "datatype", "loop", "sys.dbms_lob", "base", "process", "capabilities", "command", "considerations", "content", "seconds", "end", "microsoft", "conn_health_checks", "applications", "returning", "request", "your_datetime_column", "cycle", "tables", "engine", "databaseerror", "assumptions", "django.db.close_old_connections", "suites", "isolation", "data", "matching", "constraint", "instruction", "runsql", "lookups", "options", "environment", "conflict", "instead", "notes", "filtering", "references", "tablespace", "response", "formset", "port=5432", "execution", "ora-00932", "keys", "configuration", "repeatable", "sql", "e180", "tools", "directory", "nclob", "rawsql", "assumption", "backends", "module", "arguments", "materialized", "packages", "mydbengine", "firebird", "features_class", "savepoint", "my_application_role", "localhost:5432", "db", "typecasting", "models", "detail", "caveats", "db_collation", "id)=(1", "dsn", "row", "call", "workaround", "pgbouncer", "consideration", "track", "developer", "substring", "querysets", "support", "counter", "types", "queryset.defer", "my.cnf", "legacymodel", "filter", "problems", "read_default_file", "servers", "utf-8", "legacy", "false", "test['template", "md5", "management", "filefield", "myisam", "tcp)(host", "pragma", "django.db.backends.oracle", "tests", "check", "mycolumn=1", "values", "sql_mode", "mysqldb", "quotes", "worker", "cases", "solution", "new", "iterator", "times", "localhost", "role", "test", "lifetime", "django.contrib.auth.models", "planner", "resource", "stores", "sqlsequencereset", "timezone", "refer", "xe", "usage", "transaction", "target", "model", "databasefeatures", "max_length", "character", "choice", "concurrency", "equality", "detection", "indication", "execute", "purposes", "results", "use_tz", "n’t", "strict_trans_tables", "sqlite", "loads", "immediate", "case", "class", "utf8", "number", "utf8_general_ci", "skip", "ieee", "return", "columns", "config", "connections", "ones", "sys.dbms_random", "care", "string", "health", "like", "django.db.backends.mysql", "json1", "drop", "aabb", "bit", "uppercase", "list", "view", "autocommit", "uses", "footprint", "identifiers", "extension", "user", "part", "file", "queries", "read", "databasewrapper", "8.0.11", "installation", "exclusive", "jsonfield", "errors", "threads", "real", "textfields", "extensions", "get", "atomic_requests", "mpm", "manner", "exceptions", "names", "thanks", "clause", "createextension", "mycolumn=0", "easy", "strict_all_tables", "django.db.backends.sqlite3", "cursors", "date", "set", "autofield", "nowait", "textfield", "ddl", "database", "binding", "databases", "limit", "procedure", "db_index", "reference", "engines", "schema", "overhead", "code", "integrity", "into", "cloud", "entry", "timestamp", "power"], "type": "documentation"},
{"title": "Cross Site Request Forgery protection", "url": "https://docs.djangoproject.com/en/5.1/ref/csrf/", "content": "Cross Site Request Forgery protection ¶ The CSRF middleware and template tag provides easy-to-use protection against Cross Site Request Forgeries . This type of attack occurs when a malicious\nwebsite contains a link, a form button or some JavaScript that is intended to\nperform some action on your website, using the credentials of a logged-in user\nwho visits the malicious site in their browser. A related type of attack,\n‘login CSRF’, where an attacking site tricks a user’s browser into logging into\na site with someone else’s credentials, is also covered. The first defense against CSRF attacks is to ensure that GET requests (and other\n‘safe’ methods, as defined by RFC 9110 Section 9.2.1 ) are side effect free.\nRequests via ‘unsafe’ methods, such as POST, PUT, and DELETE, can then be\nprotected by the steps outlined in How to use Django’s CSRF protection . How it works ¶ The CSRF protection is based on the following things: A CSRF cookie that is a random secret value, which other sites will not have\naccess to. CsrfViewMiddleware sends this cookie with the response whenever django.middleware.csrf.get_token() is called. It can also send it in\nother cases. For security reasons, the value of the secret is changed each\ntime a user logs in. A hidden form field with the name ‘csrfmiddlewaretoken’, present in all\noutgoing POST forms. In order to protect against BREACH attacks, the value of this field is\nnot simply the secret. It is scrambled differently with each response using\na mask. The mask is generated randomly on every call to get_token() , so\nthe form field value is different each time. This part is done by the csrf_token template tag. For all incoming requests that are not using HTTP GET, HEAD, OPTIONS or\nTRACE, a CSRF cookie must be present, and the ‘csrfmiddlewaretoken’ field\nmust be present and correct. If it isn’t, the user will get a 403 error. When validating the ‘csrfmiddlewaretoken’ field value, only the secret,\nnot the full token, is compared with the secret in the cookie value.\nThis allows the use of ever-changing tokens. While each request may use its\nown token, the secret remains common to all. This check is done by CsrfViewMiddleware . CsrfViewMiddleware verifies the Origin header , if provided by the\nbrowser, against the current host and the CSRF_TRUSTED_ORIGINS setting. This provides protection against cross-subdomain attacks. In addition, for HTTPS requests, if the Origin header isn’t provided, CsrfViewMiddleware performs strict referer checking. This means that\neven if a subdomain can set or modify cookies on your domain, it can’t force\na user to post to your application since that request won’t come from your\nown exact domain. This also addresses a man-in-the-middle attack that’s possible under HTTPS\nwhen using a session independent secret, due to the fact that HTTP Set-Cookie headers are (unfortunately) accepted by clients even when\nthey are talking to a site under HTTPS. (Referer checking is not done for\nHTTP requests because the presence of the Referer header isn’t reliable\nenough under HTTP.) If the CSRF_COOKIE_DOMAIN setting is set, the referer is compared\nagainst it. You can allow cross-subdomain requests by including a leading\ndot. For example, CSRF_COOKIE_DOMAIN = '.example.com' will allow POST\nrequests from www.example.com and api.example.com . If the setting is\nnot set, then the referer must match the HTTP Host header. Expanding the accepted referers beyond the current host or cookie domain can\nbe done with the CSRF_TRUSTED_ORIGINS setting. This ensures that only forms that have originated from trusted domains can be\nused to POST data back. It deliberately ignores GET requests (and other requests that are defined as\n‘safe’ by RFC 9110 Section 9.2.1 ). These requests ought never to have any\npotentially dangerous side effects, and so a CSRF attack with a GET request\nought to be harmless. RFC 9110 Section 9.2.1 defines POST, PUT, and DELETE\nas ‘unsafe’, and all other methods are also assumed to be unsafe, for maximum\nprotection. The CSRF protection cannot protect against man-in-the-middle attacks, so use HTTPS with HTTP Strict Transport Security . It also assumes validation of\nthe HOST header and that there aren’t any cross-site scripting vulnerabilities on your site\n(because XSS vulnerabilities already let an attacker do anything a CSRF\nvulnerability allows and much worse). Removing the Referer header To avoid disclosing the referrer URL to third-party sites, you might want\nto disable the referer on your site’s <a> tags. For example, you\nmight use the <meta name=\"referrer\" content=\"no-referrer\"> tag or\ninclude the Referrer-Policy: no-referrer header. Due to the CSRF\nprotection’s strict referer checking on HTTPS requests, those techniques\ncause a CSRF failure on requests with ‘unsafe’ methods. Instead, use\nalternatives like <a rel=\"noreferrer\" ...>\" for links to third-party\nsites. Limitations ¶ Subdomains within a site will be able to set cookies on the client for the whole\ndomain. By setting the cookie and using a corresponding token, subdomains will\nbe able to circumvent the CSRF protection. The only way to avoid this is to\nensure that subdomains are controlled by trusted users (or, are at least unable\nto set cookies). Note that even without CSRF, there are other vulnerabilities,\nsuch as session fixation, that make giving subdomains to untrusted parties a bad\nidea, and these vulnerabilities cannot easily be fixed with current browsers. Utilities ¶ The examples below assume you are using function-based views. If you\nare working with class-based views, you can refer to Decorating\nclass-based views . csrf_exempt ( view ) [source] ¶ This decorator marks a view as being exempt from the protection ensured by\nthe middleware. Example: from django.http import HttpResponse from django.views.decorators.csrf import csrf_exempt @csrf_exempt def my_view ( request ): return HttpResponse ( \"Hello world\" ) Changed in Django 5.0: Support for wrapping asynchronous view functions was added. csrf_protect ( view ) ¶ Decorator that provides the protection of CsrfViewMiddleware to a view. Usage: from django.shortcuts import render from django.views.decorators.csrf import csrf_protect @csrf_protect def my_view ( request ): c = {} # ... return render ( request , \"a_template.html\" , c ) Changed in Django 5.0: Support for wrapping asynchronous view functions was added. requires_csrf_token ( view ) ¶ Normally the csrf_token template tag will not work if CsrfViewMiddleware.process_view or an equivalent like csrf_protect has not run. The view decorator requires_csrf_token can be used to\nensure the template tag does work. This decorator works similarly to csrf_protect , but never rejects an incoming request. Example: from django.shortcuts import render from django.views.decorators.csrf import requires_csrf_token @requires_csrf_token def my_view ( request ): c = {} # ... return render ( request , \"a_template.html\" , c ) Changed in Django 5.0: Support for wrapping asynchronous view functions was added. ensure_csrf_cookie ( view ) ¶ This decorator forces a view to send the CSRF cookie. Changed in Django 5.0: Support for wrapping asynchronous view functions was added. Settings ¶ A number of settings can be used to control Django’s CSRF behavior: CSRF_COOKIE_AGE CSRF_COOKIE_DOMAIN CSRF_COOKIE_HTTPONLY CSRF_COOKIE_NAME CSRF_COOKIE_PATH CSRF_COOKIE_SAMESITE CSRF_COOKIE_SECURE CSRF_FAILURE_VIEW CSRF_HEADER_NAME CSRF_TRUSTED_ORIGINS CSRF_USE_SESSIONS Frequently Asked Questions ¶ Is posting an arbitrary CSRF token pair (cookie and POST data) a vulnerability? ¶ No, this is by design. Without a man-in-the-middle attack, there is no way for\nan attacker to send a CSRF token cookie to a victim’s browser, so a successful\nattack would need to obtain the victim’s browser’s cookie via XSS or similar,\nin which case an attacker usually doesn’t need CSRF attacks. Some security audit tools flag this as a problem but as mentioned before, an\nattacker cannot steal a user’s browser’s CSRF cookie. “Stealing” or modifying your own token using Firebug, Chrome dev tools, etc. isn’t a vulnerability. Is it a problem that Django’s CSRF protection isn’t linked to a session by default? ¶ No, this is by design. Not linking CSRF protection to a session allows using\nthe protection on sites such as a pastebin that allow submissions from\nanonymous users which don’t have a session. If you wish to store the CSRF token in the user’s session, use the CSRF_USE_SESSIONS setting. Why might a user encounter a CSRF validation failure after logging in? ¶ For security reasons, CSRF tokens are rotated each time a user logs in. Any\npage with a form generated before a login will have an old, invalid CSRF token\nand need to be reloaded. This might happen if a user uses the back button after\na login or if they log in a different browser tab.", "keywords": ["strict", "firebug", "website", "get_token", "browser", "https", "error", "type", "secret", "xss", "button", "template", "subdomain", "url", "httpresponse", "support", "csrfviewmiddleware.process_view", "design", "clients", "setting", "order", "tokens", "questions", "def", "transport", "referers", "settings", "time", "application", "scripting", "csrf_use_sessions", "middleware", "party", "victim", "delete", "check", "behavior", "site", "put", "cases", "use", "views", "import", "man", "problem", "cookies", "csrf_cookie_path", "submissions", ".example.com", "mask", "tab", "equivalent", "pastebin", "#", "attacker", "login", "section", "way", "idea", "limitations", "parties", "¶", "a_template.html", "default", "alternatives", "referer", "forgery", "techniques", "pair", "decorator", "methods", "referrer", "client", "domain", "side", "browsers", "credentials", "rel=\"noreferrer", "usage", "page", "sites", "csrf_cookie_domain", "trace", "origin", "access", "render", "requires_csrf_token", "example", "javascript", "session", "users", "n’t", "value", "functions", "dot", "decorating", "source", "case", "class", "number", "dev", "request", "defense", "attacks", "return", "c", "subdomains", "csrf_cookie_secure", "attack", "action", "checking", "cross", "function", "examples", "forgeries", "things", "csrf_protect", "protection", "policy", "steps", "data", "view", "effects", "rfc", "form", "presence", "name", "my_view", "cookie", "options", "user", "header", "part", "world", "csrf_cookie_name", "fixation", "link", "addition", "reasons", "get", "response", "chrome", "domains", "audit", "defines", "host", "csrf_trusted_origins", "post", "django", "tag", "csrf_cookie_samesite", "tools", "fact", "vulnerability", "token", "failure", "validation", "tags", "csrf", "set", "field", "vulnerabilities", "head", "content=\"no", "csrf_header_name", "requests", "http", "no", "breach", "headers", "forms", "effect", "security", "utilities", "=", "name=\"referrer", "links", "call", "csrfviewmiddleware"], "type": "documentation"},
{"title": "The syndication feed framework", "url": "https://docs.djangoproject.com/en/5.1/ref/contrib/syndication/", "content": "The syndication feed framework ¶ Django comes with a high-level syndication-feed-generating framework for\ncreating RSS and Atom feeds. To create any syndication feed, all you have to do is write a short\nPython class. You can create as many feeds as you want. Django also comes with a lower-level feed-generating API. Use this if\nyou want to generate feeds outside of a web context, or in some other\nlower-level way. The high-level framework ¶ Overview ¶ The high-level feed-generating framework is supplied by the Feed class. To create a\nfeed, write a Feed class\nand point to an instance of it in your URLconf . Feed classes ¶ A Feed class is a Python\nclass that represents a syndication feed. A feed can be simple (e.g.,\na “site news” feed, or a basic feed displaying the latest entries of a\nblog) or more complex (e.g., a feed displaying all the blog entries in\na particular category, where the category is variable). Feed classes subclass django.contrib.syndication.views.Feed .\nThey can live anywhere in your codebase. Instances of Feed classes\nare views which can be used in your URLconf . A simple example ¶ This simple example, taken from a hypothetical police beat news site describes\na feed of the latest five news items: from django.contrib.syndication.views import Feed from django.urls import reverse from policebeat.models import NewsItem class LatestEntriesFeed ( Feed ): title = \"Police beat site news\" link = \"/sitenews/\" description = \"Updates on changes and additions to police beat central.\" def items ( self ): return NewsItem . objects . order_by ( \"-pub_date\" )[: 5 ] def item_title ( self , item ): return item . title def item_description ( self , item ): return item . description # item_link is only needed if NewsItem has no get_absolute_url method. def item_link ( self , item ): return reverse ( \"news-item\" , args = [ item . pk ]) To connect a URL to this feed, put an instance of the Feed object in\nyour URLconf . For example: from django.urls import path from myproject.feeds import LatestEntriesFeed urlpatterns = [ # ... path ( \"latest/feed/\" , LatestEntriesFeed ()), # ... ] Note: The Feed class subclasses django.contrib.syndication.views.Feed . title , link and description correspond to the\nstandard RSS <title> , <link> and <description> elements,\nrespectively. items() is, a method that returns a list of objects that should be\nincluded in the feed as <item> elements. Although this example returns NewsItem objects using Django’s object-relational mapper , items() doesn’t have to return model instances.\nAlthough you get a few bits of functionality “for free” by using Django\nmodels, items() can return any type of object you want. If you’re creating an Atom feed, rather than an RSS feed, set the subtitle attribute instead of the description attribute.\nSee Publishing Atom and RSS feeds in tandem , later, for an example. One thing is left to do. In an RSS feed, each <item> has a <title> , <link> and <description> . We need to tell the framework what data to put\ninto those elements. For the contents of <title> and <description> , Django tries\ncalling the methods item_title() and item_description() on\nthe Feed class. They are passed\na single parameter, item , which is the object itself. These are\noptional; by default, the string representation of the object is used for\nboth. If you want to do any special formatting for either the title or\ndescription, Django templates can be used\ninstead. Their paths can be specified with the title_template and description_template attributes on the Feed class. The templates are\nrendered for each item and are passed two template context variables: {{ obj }} – The current object (one of whichever objects you\nreturned in items() ). {{ site }} – A django.contrib.sites.models.Site object\nrepresenting the current site. This is useful for {{ site.domain }} or {{ site.name }} . If you do not have the Django sites\nframework installed, this will be set to a RequestSite object. See the RequestSite section of the sites framework documentation for more. See a complex example below that uses a description template. Feed. get_context_data ( ** kwargs ) ¶ There is also a way to pass additional information to title and description\ntemplates, if you need to supply more than the two variables mentioned\nbefore. You can provide your implementation of get_context_data method\nin your Feed subclass. For example: from mysite.models import Article from django.contrib.syndication.views import Feed class ArticlesFeed ( Feed ): title = \"My articles\" description_template = \"feeds/articles.html\" def items ( self ): return Article . objects . order_by ( \"-pub_date\" )[: 5 ] def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ \"foo\" ] = \"bar\" return context And the template: Something about {{ foo }} : {{ obj.description }} This method will be called once per each item in the list returned by items() with the following keyword arguments: item : the current item. For backward compatibility reasons, the name\nof this context variable is {{ obj }} . obj : the object returned by get_object() . By default this is not\nexposed to the templates to avoid confusion with {{ obj }} (see above),\nbut you can use it in your implementation of get_context_data() . site : current site as described above. request : current request. The behavior of get_context_data() mimics that of generic views - you’re supposed to call super() to retrieve context data from parent class, add your data\nand return the modified dictionary. To specify the contents of <link> , you have two options. For each item\nin items() , Django first tries calling the item_link() method on the Feed class. In a similar way to\nthe title and description, it is passed it a single parameter, item . If that method doesn’t exist, Django tries executing a get_absolute_url() method on that object. Both get_absolute_url() and item_link() should return the\nitem’s URL as a normal Python string. As with get_absolute_url() , the\nresult of item_link() will be included directly in the URL, so you\nare responsible for doing all necessary URL quoting and conversion to\nASCII inside the method itself. A complex example ¶ The framework also supports more complex feeds, via arguments. For example, a website could offer an RSS feed of recent crimes for every\npolice beat in a city. It’d be silly to create a separate Feed class for each police beat; that\nwould violate the DRY principle and would couple data to\nprogramming logic. Instead, the syndication framework lets you access the\narguments passed from your URLconf so feeds can output\nitems based on information in the feed’s URL. The police beat feeds could be accessible via URLs like this: /beats/613/rss/ – Returns recent crimes for beat 613. /beats/1424/rss/ – Returns recent crimes for beat 1424. These can be matched with a URLconf line such as: path ( \"beats/<int:beat_id>/rss/\" , BeatFeed ()), Like a view, the arguments in the URL are passed to the get_object() method along with the request object. Here’s the code for these beat-specific feeds: from django.contrib.syndication.views import Feed class BeatFeed ( Feed ): description_template = \"feeds/beat_description.html\" def get_object ( self , request , beat_id ): return Beat . objects . get ( pk = beat_id ) def title ( self , obj ): return \"Police beat central: Crimes for beat %s \" % obj . beat def link ( self , obj ): return obj . get_absolute_url () def description ( self , obj ): return \"Crimes recently reported in police beat %s \" % obj . beat def items ( self , obj ): return Crime . objects . filter ( beat = obj ) . order_by ( \"-crime_date\" )[: 30 ] To generate the feed’s <title> , <link> and <description> , Django\nuses the title() , link() and description() methods. In\nthe previous example, they were string class attributes, but this example\nillustrates that they can be either strings or methods. For each of title , link and description , Django follows this\nalgorithm: First, it tries to call a method, passing the obj argument, where obj is the object returned by get_object() . Failing that, it tries to call a method with no arguments. Failing that, it uses the class attribute. Also note that items() also follows the same algorithm – first, it\ntries items(obj) , then items() , then finally an items class attribute (which should be a list). We are using a template for the item descriptions. It can be as minimal as\nthis: {{ obj.description }} However, you are free to add formatting as desired. The ExampleFeed class below gives full documentation on methods and\nattributes of Feed classes. Specifying the type of feed ¶ By default, feeds produced in this framework use RSS 2.0. To change that, add a feed_type attribute to your Feed class, like so: from django.utils.feedgenerator import Atom1Feed class MyFeed ( Feed ): feed_type = Atom1Feed Note that you set feed_type to a class object, not an instance. Currently available feed types are: django.utils.feedgenerator.Rss201rev2Feed (RSS 2.01. Default.) django.utils.feedgenerator.RssUserland091Feed (RSS 0.91.) django.utils.feedgenerator.Atom1Feed (Atom 1.0.) Enclosures ¶ To specify enclosures, such as those used in creating podcast feeds, use the item_enclosures hook or, alternatively and if you only have a single\nenclosure per item, the item_enclosure_url , item_enclosure_length , and item_enclosure_mime_type hooks. See the ExampleFeed class below for\nusage examples. Language ¶ Feeds created by the syndication framework automatically include the\nappropriate <language> tag (RSS 2.0) or xml:lang attribute (Atom). By\ndefault, this is django.utils.translation.get_language() . You can change it\nby setting the language class attribute. URLs ¶ The link method/attribute can return either an absolute path (e.g. \"/blog/\" ) or a URL with the fully-qualified domain and protocol (e.g. \"https://www.example.com/blog/\" ). If link doesn’t return the domain,\nthe syndication framework will insert the domain of the current site, according\nto your SITE_ID setting . Atom feeds require a <link rel=\"self\"> that defines the feed’s current\nlocation. The syndication framework populates this automatically, using the\ndomain of the current site according to the SITE_ID setting. Publishing Atom and RSS feeds in tandem ¶ Some developers like to make available both Atom and RSS versions of their\nfeeds. To do that, you can create a subclass of your Feed class and set the feed_type to something different. Then update your URLconf to add the extra versions. Here’s a full example: from django.contrib.syndication.views import Feed from policebeat.models import NewsItem from django.utils.feedgenerator import Atom1Feed class RssSiteNewsFeed ( Feed ): title = \"Police beat site news\" link = \"/sitenews/\" description = \"Updates on changes and additions to police beat central.\" def items ( self ): return NewsItem . objects . order_by ( \"-pub_date\" )[: 5 ] class AtomSiteNewsFeed ( RssSiteNewsFeed ): feed_type = Atom1Feed subtitle = RssSiteNewsFeed . description Note In this example, the RSS feed uses a description while the Atom\nfeed uses a subtitle . That’s because Atom feeds don’t provide for\na feed-level “description,” but they do provide for a “subtitle.” If you provide a description in your Feed class, Django will not automatically put that into the subtitle element, because a\nsubtitle and description are not necessarily the same thing. Instead, you\nshould define a subtitle attribute. In the above example, we set the Atom feed’s subtitle to the RSS feed’s description , because it’s quite short already. And the accompanying URLconf: from django.urls import path from myproject.feeds import AtomSiteNewsFeed , RssSiteNewsFeed urlpatterns = [ # ... path ( \"sitenews/rss/\" , RssSiteNewsFeed ()), path ( \"sitenews/atom/\" , AtomSiteNewsFeed ()), # ... ] Feed class reference ¶ class views. Feed ¶ This example illustrates all possible attributes and methods for a Feed class: from django.contrib.syndication.views import Feed from django.utils import feedgenerator class ExampleFeed ( Feed ): # FEED TYPE -- Optional. This should be a class that subclasses # django.utils.feedgenerator.SyndicationFeed. This designates # which type of feed this should be: RSS 2.0, Atom 1.0, etc. If # you don't specify feed_type, your feed will be RSS 2.0. This # should be a class, not an instance of the class. feed_type = feedgenerator . Rss201rev2Feed # TEMPLATE NAMES -- Optional. These should be strings # representing names of Django templates that the system should # use in rendering the title and description of your feed items. # Both are optional. If a template is not specified, the # item_title() or item_description() methods are used instead. title_template = None description_template = None # LANGUAGE -- Optional. This should be a string specifying a language # code. Defaults to django.utils.translation.get_language(). language = \"de\" # TITLE -- One of the following three is required. The framework # looks for them in this order. def title ( self , obj ): \"\"\" Takes the object returned by get_object() and returns the feed's title as a normal Python string. \"\"\" def title ( self ): \"\"\" Returns the feed's title as a normal Python string. \"\"\" title = \"foo\" # Hard-coded title. # LINK -- One of the following three is required. The framework # looks for them in this order. def link ( self , obj ): \"\"\" # Takes the object returned by get_object() and returns the URL # of the HTML version of the feed as a normal Python string. \"\"\" def link ( self ): \"\"\" Returns the URL of the HTML version of the feed as a normal Python string. \"\"\" link = \"/blog/\" # Hard-coded URL. # FEED_URL -- One of the following three is optional. The framework # looks for them in this order. def feed_url ( self , obj ): \"\"\" # Takes the object returned by get_object() and returns the feed's # own URL as a normal Python string. \"\"\" def feed_url ( self ): \"\"\" Returns the feed's own URL as a normal Python string. \"\"\" feed_url = \"/blog/rss/\" # Hard-coded URL. # GUID -- One of the following three is optional. The framework looks # for them in this order. This property is only used for Atom feeds # (where it is the feed-level ID element). If not provided, the feed # link is used as the ID. def feed_guid ( self , obj ): \"\"\" Takes the object returned by get_object() and returns the globally unique ID for the feed as a normal Python string. \"\"\" def feed_guid ( self ): \"\"\" Returns the feed's globally unique ID as a normal Python string. \"\"\" feed_guid = \"/foo/bar/1234\" # Hard-coded guid. # DESCRIPTION -- One of the following three is required. The framework # looks for them in this order. def description ( self , obj ): \"\"\" Takes the object returned by get_object() and returns the feed's description as a normal Python string. \"\"\" def description ( self ): \"\"\" Returns the feed's description as a normal Python string. \"\"\" description = \"Foo bar baz.\" # Hard-coded description. # AUTHOR NAME --One of the following three is optional. The framework # looks for them in this order. def author_name ( self , obj ): \"\"\" Takes the object returned by get_object() and returns the feed's author's name as a normal Python string. \"\"\" def author_name ( self ): \"\"\" Returns the feed's author's name as a normal Python string. \"\"\" author_name = \"Sally Smith\" # Hard-coded author name. # AUTHOR EMAIL --One of the following three is optional. The framework # looks for them in this order. def author_email ( self , obj ): \"\"\" Takes the object returned by get_object() and returns the feed's author's email as a normal Python string. \"\"\" def author_email ( self ): \"\"\" Returns the feed's author's email as a normal Python string. \"\"\" author_email = \"test@example.com\" # Hard-coded author email. # AUTHOR LINK --One of the following three is optional. The framework # looks for them in this order. In each case, the URL should include # the scheme (such as \"https://\") and domain name. def author_link ( self , obj ): \"\"\" Takes the object returned by get_object() and returns the feed's author's URL as a normal Python string. \"\"\" def author_link ( self ): \"\"\" Returns the feed's author's URL as a normal Python string. \"\"\" author_link = \"https://www.example.com/\" # Hard-coded author URL. # CATEGORIES -- One of the following three is optional. The framework # looks for them in this order. In each case, the method/attribute # should return an iterable object that returns strings. def categories ( self , obj ): \"\"\" Takes the object returned by get_object() and returns the feed's categories as iterable over strings. \"\"\" def categories ( self ): \"\"\" Returns the feed's categories as iterable over strings. \"\"\" categories = [ \"python\" , \"django\" ] # Hard-coded list of categories. # COPYRIGHT NOTICE -- One of the following three is optional. The # framework looks for them in this order. def feed_copyright ( self , obj ): \"\"\" Takes the object returned by get_object() and returns the feed's copyright notice as a normal Python string. \"\"\" def feed_copyright ( self ): \"\"\" Returns the feed's copyright notice as a normal Python string. \"\"\" feed_copyright = \"Copyright (c) 2007, Sally Smith\" # Hard-coded copyright notice. # TTL -- One of the following three is optional. The framework looks # for them in this order. Ignored for Atom feeds. def ttl ( self , obj ): \"\"\" Takes the object returned by get_object() and returns the feed's TTL (Time To Live) as a normal Python string. \"\"\" def ttl ( self ): \"\"\" Returns the feed's TTL as a normal Python string. \"\"\" ttl = 600 # Hard-coded Time To Live. # ITEMS -- One of the following three is required. The framework looks # for them in this order. def items ( self , obj ): \"\"\" Takes the object returned by get_object() and returns a list of items to publish in this feed. \"\"\" def items ( self ): \"\"\" Returns a list of items to publish in this feed. \"\"\" items = [ \"Item 1\" , \"Item 2\" ] # Hard-coded items. # GET_OBJECT -- This is required for feeds that publish different data # for different URL parameters. (See \"A complex example\" above.) def get_object ( self , request , * args , ** kwargs ): \"\"\" Takes the current request and the arguments from the URL, and returns an object represented by this feed. Raises django.core.exceptions.ObjectDoesNotExist on error. \"\"\" # ITEM TITLE AND DESCRIPTION -- If title_template or # description_template are not defined, these are used instead. Both are # optional, by default they will use the string representation of the # item. def item_title ( self , item ): \"\"\" Takes an item, as returned by items(), and returns the item's title as a normal Python string. \"\"\" def item_title ( self ): \"\"\" Returns the title for every item in the feed. \"\"\" item_title = \"Breaking News: Nothing Happening\" # Hard-coded title. def item_description ( self , item ): \"\"\" Takes an item, as returned by items(), and returns the item's description as a normal Python string. \"\"\" def item_description ( self ): \"\"\" Returns the description for every item in the feed. \"\"\" item_description = \"A description of the item.\" # Hard-coded description. def get_context_data ( self , ** kwargs ): \"\"\" Returns a dictionary to use as extra context if either description_template or item_template are used. Default implementation preserves the old behavior of using {'obj': item, 'site': current_site} as the context. \"\"\" # ITEM LINK -- One of these three is required. The framework looks for # them in this order. # First, the framework tries the two methods below, in # order. Failing that, it falls back to the get_absolute_url() # method on each item returned by items(). def item_link ( self , item ): \"\"\" Takes an item, as returned by items(), and returns the item's URL. \"\"\" def item_link ( self ): \"\"\" Returns the URL for every item in the feed. \"\"\" # ITEM_GUID -- The following method is optional. If not provided, the # item's link is used by default. def item_guid ( self , obj ): \"\"\" Takes an item, as return by items(), and returns the item's ID. \"\"\" # ITEM_GUID_IS_PERMALINK -- The following method is optional. If # provided, it sets the 'isPermaLink' attribute of an item's # GUID element. This method is used only when 'item_guid' is # specified. def item_guid_is_permalink ( self , obj ): \"\"\" Takes an item, as returned by items(), and returns a boolean. \"\"\" item_guid_is_permalink = False # Hard coded value # ITEM AUTHOR NAME -- One of the following three is optional. The # framework looks for them in this order. def item_author_name ( self , item ): \"\"\" Takes an item, as returned by items(), and returns the item's author's name as a normal Python string. \"\"\" def item_author_name ( self ): \"\"\" Returns the author name for every item in the feed. \"\"\" item_author_name = \"Sally Smith\" # Hard-coded author name. # ITEM AUTHOR EMAIL --One of the following three is optional. The # framework looks for them in this order. # # If you specify this, you must specify item_author_name. def item_author_email ( self , obj ): \"\"\" Takes an item, as returned by items(), and returns the item's author's email as a normal Python string. \"\"\" def item_author_email ( self ): \"\"\" Returns the author email for every item in the feed. \"\"\" item_author_email = \"test@example.com\" # Hard-coded author email. # ITEM AUTHOR LINK -- One of the following three is optional. The # framework looks for them in this order. In each case, the URL should # include the scheme (such as \"https://\") and domain name. # # If you specify this, you must specify item_author_name. def item_author_link ( self , obj ): \"\"\" Takes an item, as returned by items(), and returns the item's author's URL as a normal Python string. \"\"\" def item_author_link ( self ): \"\"\" Returns the author URL for every item in the feed. \"\"\" item_author_link = \"https://www.example.com/\" # Hard-coded author URL. # ITEM ENCLOSURES -- One of the following three is optional. The # framework looks for them in this order. If one of them is defined, # ``item_enclosure_url``, ``item_enclosure_length``, and # ``item_enclosure_mime_type`` will have no effect. def item_enclosures ( self , item ): \"\"\" Takes an item, as returned by items(), and returns a list of ``django.utils.feedgenerator.Enclosure`` objects. \"\"\" def item_enclosures ( self ): \"\"\" Returns the ``django.utils.feedgenerator.Enclosure`` list for every item in the feed. \"\"\" item_enclosures = [] # Hard-coded enclosure list # ITEM ENCLOSURE URL -- One of these three is required if you're # publishing enclosures and you're not using ``item_enclosures``. The # framework looks for them in this order. def item_enclosure_url ( self , item ): \"\"\" Takes an item, as returned by items(), and returns the item's enclosure URL. \"\"\" def item_enclosure_url ( self ): \"\"\" Returns the enclosure URL for every item in the feed. \"\"\" item_enclosure_url = \"/foo/bar.mp3\" # Hard-coded enclosure link. # ITEM ENCLOSURE LENGTH -- One of these three is required if you're # publishing enclosures and you're not using ``item_enclosures``. The # framework looks for them in this order. In each case, the returned # value should be either an integer, or a string representation of the # integer, in bytes. def item_enclosure_length ( self , item ): \"\"\" Takes an item, as returned by items(), and returns the item's enclosure length. \"\"\" def item_enclosure_length ( self ): \"\"\" Returns the enclosure length for every item in the feed. \"\"\" item_enclosure_length = 32000 # Hard-coded enclosure length. # ITEM ENCLOSURE MIME TYPE -- One of these three is required if you're # publishing enclosures and you're not using ``item_enclosures``. The # framework looks for them in this order. def item_enclosure_mime_type ( self , item ): \"\"\" Takes an item, as returned by items(), and returns the item's enclosure MIME type. \"\"\" def item_enclosure_mime_type ( self ): \"\"\" Returns the enclosure MIME type for every item in the feed. \"\"\" item_enclosure_mime_type = \"audio/mpeg\" # Hard-coded enclosure MIME type. # ITEM PUBDATE -- It's optional to use one of these three. This is a # hook that specifies how to get the pubdate for a given item. # In each case, the method/attribute should return a Python # datetime.datetime object. def item_pubdate ( self , item ): \"\"\" Takes an item, as returned by items(), and returns the item's pubdate. \"\"\" def item_pubdate ( self ): \"\"\" Returns the pubdate for every item in the feed. \"\"\" item_pubdate = datetime . datetime ( 2005 , 5 , 3 ) # Hard-coded pubdate. # ITEM UPDATED -- It's optional to use one of these three. This is a # hook that specifies how to get the updateddate for a given item. # In each case, the method/attribute should return a Python # datetime.datetime object. def item_updateddate ( self , item ): \"\"\" Takes an item, as returned by items(), and returns the item's updateddate. \"\"\" def item_updateddate ( self ): \"\"\" Returns the updateddate for every item in the feed. \"\"\" item_updateddate = datetime . datetime ( 2005 , 5 , 3 ) # Hard-coded updateddate. # ITEM CATEGORIES -- It's optional to use one of these three. This is # a hook that specifies how to get the list of categories for a given # item. In each case, the method/attribute should return an iterable # object that returns strings. def item_categories ( self , item ): \"\"\" Takes an item, as returned by items(), and returns the item's categories. \"\"\" def item_categories ( self ): \"\"\" Returns the categories for every item in the feed. \"\"\" item_categories = [ \"python\" , \"django\" ] # Hard-coded categories. # ITEM COPYRIGHT NOTICE (only applicable to Atom feeds) -- One of the # following three is optional. The framework looks for them in this # order. def item_copyright ( self , obj ): \"\"\" Takes an item, as returned by items(), and returns the item's copyright notice as a normal Python string. \"\"\" def item_copyright ( self ): \"\"\" Returns the copyright notice for every item in the feed. \"\"\" item_copyright = \"Copyright (c) 2007, Sally Smith\" # Hard-coded copyright notice. # ITEM COMMENTS URL -- It's optional to use one of these three. This is # a hook that specifies how to get the URL of a page for comments for a # given item. def item_comments ( self , obj ): \"\"\" Takes an item, as returned by items(), and returns the item's comments URL as a normal Python string. \"\"\" def item_comments ( self ): \"\"\" Returns the comments URL for every item in the feed. \"\"\" item_comments = \"https://www.example.com/comments\" # Hard-coded comments URL The low-level framework ¶ Behind the scenes, the high-level RSS framework uses a lower-level framework\nfor generating feeds’ XML. This framework lives in a single module: django/utils/feedgenerator.py . You use this framework on your own, for lower-level feed generation. You can\nalso create custom feed generator subclasses for use with the feed_type Feed option. SyndicationFeed classes ¶ The feedgenerator module contains a base class: django.utils.feedgenerator.SyndicationFeed and several subclasses: django.utils.feedgenerator.RssUserland091Feed django.utils.feedgenerator.Rss201rev2Feed django.utils.feedgenerator.Atom1Feed Each of these three classes knows how to render a certain type of feed as XML.\nThey share this interface: SyndicationFeed.__init__() Initialize the feed with the given dictionary of metadata, which applies to\nthe entire feed. Required keyword arguments are: title link description There’s also a bunch of other optional keywords: language author_email author_name author_link subtitle categories feed_url feed_copyright feed_guid ttl Any extra keyword arguments you pass to __init__ will be stored in self.feed for use with custom feed generators . All parameters should be strings, except categories , which should be a\nsequence of strings. Beware that some control characters\nare not allowed in XML documents. If your content has some of them, you might encounter a ValueError when producing the feed. SyndicationFeed.add_item() Add an item to the feed with the given parameters. Required keyword arguments are: title link description Optional keyword arguments are: author_email author_name author_link pubdate comments unique_id enclosures categories item_copyright ttl updateddate Extra keyword arguments will be stored for custom feed generators . All parameters, if given, should be strings, except: pubdate should be a Python datetime object. updateddate should be a Python datetime object. enclosures should be a list of django.utils.feedgenerator.Enclosure instances. categories should be a sequence of strings. SyndicationFeed.write() Outputs the feed in the given encoding to outfile, which is a file-like object. SyndicationFeed.writeString() Returns the feed as a string in the given encoding. For example, to create an Atom 1.0 feed and print it to standard output: >>> from django.utils import feedgenerator >>> from datetime import datetime >>> f = feedgenerator . Atom1Feed ( ... title = \"My Blog\" , ... link = \"https://www.example.com/\" , ... description = \"In which I write about what I ate today.\" , ... language = \"en\" , ... author_name = \"Myself\" , ... feed_url = \"https://example.com/atom.xml\" , ... ) >>> f . add_item ( ... title = \"Hot dog today\" , ... link = \"https://www.example.com/entries/1/\" , ... pubdate = datetime . now (), ... description = \"<p>Today I had a Vienna Beef hot dog. It was pink, plump and perfect.</p>\" , ... ) >>> print ( f . writeString ( \"UTF-8\" )) <?xml version=\"1.0\" encoding=\"UTF-8\"?> <feed xmlns=\"http://www.w3.org/2005/Atom\" xml:lang=\"en\"> ... </feed> Custom feed generators ¶ If you need to produce a custom feed format, you’ve got a couple of options. If the feed format is totally custom, you’ll want to subclass SyndicationFeed and completely replace the write() and writeString() methods. However, if the feed format is a spin-off of RSS or Atom (i.e. GeoRSS , Apple’s iTunes podcast format , etc.), you’ve got a better choice. These types of\nfeeds typically add extra elements and/or attributes to the underlying format,\nand there are a set of methods that SyndicationFeed calls to get these extra\nattributes. Thus, you can subclass the appropriate feed generator class\n( Atom1Feed or Rss201rev2Feed ) and extend these callbacks. They are: SyndicationFeed.root_attributes(self) Return a dict of attributes to add to the root feed element\n( feed / channel ). SyndicationFeed.add_root_elements(self, handler) Callback to add elements inside the root feed element\n( feed / channel ). handler is an XMLGenerator from Python’s built-in SAX library;\nyou’ll call methods on it to add to the XML document in process. SyndicationFeed.item_attributes(self, item) Return a dict of attributes to add to each item ( item / entry )\nelement. The argument, item , is a dictionary of all the data passed to SyndicationFeed.add_item() . SyndicationFeed.add_item_elements(self, handler, item) Callback to add elements to each item ( item / entry ) element. handler and item are as above. Warning If you override any of these methods, be sure to call the superclass methods\nsince they add the required elements for each feed format. For example, you might start implementing an iTunes RSS feed generator like so: class iTunesFeed ( Rss201rev2Feed ): def root_attributes ( self ): attrs = super () . root_attributes () attrs [ \"xmlns:itunes\" ] = \"http://www.itunes.com/dtds/podcast-1.0.dtd\" return attrs def add_root_elements ( self , handler ): super () . add_root_elements ( handler ) handler . addQuickElement ( \"itunes:explicit\" , \"clean\" ) There’s a lot more work to be done for a complete custom feed class, but the\nabove example should demonstrate the basic idea.", "keywords": ["django.core.exceptions", "comments", "updateddate", "work", "variable", "https://", "type", "line", "url", "item_pubdate", "def", "scenes", "id", "requestsite", "overview", "classes", "additions", "method", "dog", "boolean", "use", "django.utils.feedgenerator", "views", "encoding", "principle", "items", "way", "mimics", "default", "option", "atom", "https://www.example.com/entries/1/", "domain", "https://example.com/atom.xml", "beats/<int", "generators", "page", "bar.mp3", "item_author_email", "beat_id", "feed_copyright", "feedgenerator.py", "self", "argument", "ispermalink", "version", "integer", "site.name", "dict", "generator", "relational", "element", "item_title", "name", "add_root_elements", "mpeg", "programming", "python", "link", "instances", "handler", "test@example.com", "subclass", "item_link", "current_site", "addquickelement", "tag", "smith", "self.feed", "*", "framework", "django.urls", "itunesfeed", "xmlns", "logic", "write", "length", "parameters", "datetime.datetime", "dictionary", "obj.description", "urlconf", "characters", "[:", "error", "template", "control", "datetime", "setting", "order", "documentation", "apple", "author_name", "pk", "order_by", "newsitem", "categories", "sax", "/foo", "--one", "behavior", "system", "import", "bar", "descriptions", "information", "paths", "article", "off", "#", "result", "get_absolute_url", "point", "section", "versions", "idea", "¶", "enclosures", "init", "web", "feed_guid", "rss", "couple", "atom1feed", "sites", "subtitle", "format", "example", "value", "feedgenerator", "dry", "myproject.feeds", "print", "blog", "c", "html", "examples", "city", "item_copyright", "object", "rss201rev2feed", "root", "policebeat.models", "attributes", "library", "algorithm", "returns", "parent", "conversion", "sequence", "xmlgenerator", "api", "pubdate", "note", "keywords", "guid", "callbacks", "quoting", "valueerror", "level", "django", "unique_id", "lang", "feeds", "tandem", "parameter", "beatfeed", "lot", "version=\"1.0", "contents", "strings", "https://www.example.com/comments", "police", "myself", "effect", "superclass", "=", "objects", "news", "rssuserland091feed", "language", "defaults", "scheme", "ttl", "implementation", "attrs", "hook", "interface", "root_attributes", "https://www.example.com/", "breaking", "item_description", "obj", "mapper", "templates", "item_guid_is_permalink", "perfect.</p", "time", "articlesfeed", "property", "category", "args", "outfile", "site", "feed_url", "generation", "sally", "bytes", "subclasses", "output", "/blog/", "mime", "custom", "f", "methods", "beat_id>/rss/", "keyword", "add_item", "none", "documents", "urls", "variables", "base", "protocol", "process", "email", "get_object", "syndicationfeed", "content", "item_comments", "bunch", "request", "lang=\"en", "item_updateddate", "copyright", "item_enclosures", "thing", "beat", "data", "item_enclosure_length", "item_categories", "bits", "options", "enclosure", "reasons", "/beats/613", "optional", "description", "kwargs", "podcast", "-pub_date", "articles.html", "author", "path", "django.utils", "author_email", "mysite.models", "itunes", "elements", "module", "arguments", "item_enclosure_url", "crime", "context", "sitenews", "hooks", "syndicationfeed.add_item", "codebase", "models", "title", "website", "feed", "django.contrib.sites.models", "types", "changes", "filter", "publishing", "rss/", "spin", "feed_type", "latestentriesfeed", "metadata", "utils", "beef", "crimes", "baz", "super", "item", "today", "compatibility", "item_author_name", "https://www.example.com/blog/", "item_guid", "location", "usage", "entries", "model", "/sitenews/", "choice", "callback", "vienna", "django.utils.translation.get_language", "n’t", "formatting", "channel", "syndication", "case", "item_author_link", "class", "site_id", "xml", "live", "return", "atomsitenewsfeed", "get_context_data", "attribute", "developers", "string", "list", "examplefeed", "confusion", "view", "myfeed", "articles", "-crime_date", "rsssitenewsfeed", "file", "item_enclosure_mime_type", "notice", "django.contrib.syndication.views", "names", "items(obj", "document", "representation", "set", "functionality", "foo", "reverse", "reference", "instance", "code", "syndicationfeed.__init", "objectdoesnotexist", "author_link", "entry"], "type": "documentation"},
{"title": "The ", "url": "https://docs.djangoproject.com/en/5.1/ref/contrib/staticfiles/", "content": "The staticfiles app ¶ django.contrib.staticfiles collects static files from each of your\napplications (and any other places you specify) into a single location that\ncan easily be served in production. See also For an introduction to the static files app and some usage examples, see How to manage static files (e.g. images, JavaScript, CSS) . For guidelines on deploying static files,\nsee How to deploy static files . Settings ¶ See staticfiles settings for details on the\nfollowing settings: STORAGES STATIC_ROOT STATIC_URL STATICFILES_DIRS STATICFILES_FINDERS Management Commands ¶ django.contrib.staticfiles exposes three management commands. collectstatic ¶ django-admin collectstatic ¶ Collects the static files into STATIC_ROOT . Duplicate file names are by default resolved in a similar way to how template\nresolution works: the file that is first found in one of the specified\nlocations will be used. If you’re confused, the findstatic command\ncan help show you which files are found. On subsequent collectstatic runs (if STATIC_ROOT isn’t empty), files\nare copied only if they have a modified timestamp greater than the timestamp of\nthe file in STATIC_ROOT . Therefore if you remove an application from INSTALLED_APPS , it’s a good idea to use the collectstatic --clear option in order to remove stale static files. Files are searched by using the enabled finders . The default is to look in all locations defined in STATICFILES_DIRS and in the 'static' directory of apps\nspecified by the INSTALLED_APPS setting. The collectstatic management command calls the post_process() method of the staticfiles storage backend from STORAGES after\neach run and passes a list of paths that have been found by the management\ncommand. It also receives all command line options of collectstatic .\nThis is used by the ManifestStaticFilesStorage by\ndefault. By default, collected files receive permissions from FILE_UPLOAD_PERMISSIONS and collected directories receive permissions\nfrom FILE_UPLOAD_DIRECTORY_PERMISSIONS . If you would like different\npermissions for these files and/or directories, you can subclass either of the static files storage classes and specify the file_permissions_mode and/or directory_permissions_mode parameters,\nrespectively. For example: from django.contrib.staticfiles import storage class MyStaticFilesStorage ( storage . StaticFilesStorage ): def __init__ ( self , * args , ** kwargs ): kwargs [ \"file_permissions_mode\" ] = 0o640 kwargs [ \"directory_permissions_mode\" ] = 0o760 super () . __init__ ( * args , ** kwargs ) Then set the staticfiles storage backend in STORAGES setting to 'path.to.MyStaticFilesStorage' . Some commonly used options are: --noinput , --no-input ¶ Do NOT prompt the user for input of any kind. --ignore PATTERN , -i PATTERN ¶ Ignore files, directories, or paths matching this glob-style pattern. Use\nmultiple times to ignore more. When specifying a path, always use forward\nslashes, even on Windows. --dry-run , -n ¶ Do everything except modify the filesystem. --clear , -c ¶ Clear the existing files before trying to copy or link the original file. --link , -l ¶ Create a symbolic link to each file instead of copying. --no-post-process ¶ Don’t call the post_process() method of the configured staticfiles storage backend from STORAGES . --no-default-ignore ¶ Don’t ignore the common private glob-style patterns 'CVS' , '.*' and '*~' . For a full list of options, refer to the commands own help by running: /  $ python manage.py collectstatic --help ...\\> py manage.py collectstatic --help Customizing the ignored pattern list ¶ The default ignored pattern list, ['CVS', '.*', '*~'] , can be customized in\na more persistent way than providing the --ignore command option at each collectstatic invocation. Provide a custom AppConfig class, override the ignore_patterns attribute of this class and replace 'django.contrib.staticfiles' with that class path in your INSTALLED_APPS setting: from django.contrib.staticfiles.apps import StaticFilesConfig class MyStaticFilesConfig ( StaticFilesConfig ): ignore_patterns = [ ... ] # your custom ignore list findstatic ¶ django-admin findstatic staticfile [staticfile ...] ¶ Searches for one or more relative paths with the enabled finders. For example: /  $ python manage.py findstatic css/base.css admin/js/core.js Found 'css/base.css' here: /home/special.polls.com/core/static/css/base.css /home/polls.com/core/static/css/base.css Found 'admin/js/core.js' here: /home/polls.com/src/django/contrib/admin/media/js/core.js ...\\> py manage.py findstatic css\\base.css admin\\js\\core.js Found 'css/base.css' here: /home/special.polls.com/core/static/css/base.css /home/polls.com/core/static/css/base.css Found 'admin/js/core.js' here: /home/polls.com/src/django/contrib/admin/media/js/core.js findstatic --first ¶ By default, all matching locations are found. To only return the first match\nfor each relative path, use the --first option: /  $ python manage.py findstatic css/base.css --first Found 'css/base.css' here: /home/special.polls.com/core/static/css/base.css ...\\> py manage.py findstatic css\\base.css --first Found 'css/base.css' here: /home/special.polls.com/core/static/css/base.css This is a debugging aid; it’ll show you exactly which static file will be\ncollected for a given path. By setting the --verbosity flag to 0, you can suppress the extra output and\njust get the path names: /  $ python manage.py findstatic css/base.css --verbosity 0 /home/special.polls.com/core/static/css/base.css /home/polls.com/core/static/css/base.css ...\\> py manage.py findstatic css\\base.css --verbosity 0 /home/special.polls.com/core/static/css/base.css /home/polls.com/core/static/css/base.css On the other hand, by setting the --verbosity flag to 2, you can get all\nthe directories which were searched: /  $ python manage.py findstatic css/base.css --verbosity 2 Found 'css/base.css' here: /home/special.polls.com/core/static/css/base.css /home/polls.com/core/static/css/base.css Looking in the following locations: /home/special.polls.com/core/static /home/polls.com/core/static /some/other/path/static ...\\> py manage.py findstatic css\\base.css --verbosity 2 Found 'css/base.css' here: /home/special.polls.com/core/static/css/base.css /home/polls.com/core/static/css/base.css Looking in the following locations: /home/special.polls.com/core/static /home/polls.com/core/static /some/other/path/static runserver ¶ django-admin runserver [addrport] Overrides the core runserver command if the staticfiles app\nis installed and adds automatic serving of static\nfiles. File serving doesn’t run through MIDDLEWARE . The command adds these options: --nostatic ¶ Use the --nostatic option to disable serving of static files with the staticfiles app entirely. This option is\nonly available if the staticfiles app is\nin your project’s INSTALLED_APPS setting. Example usage: /  $ django-admin runserver --nostatic ...\\> django-admin runserver --nostatic --insecure ¶ Use the --insecure option to force serving of static files with the staticfiles app even if the DEBUG setting is False . By using this you acknowledge the fact that it’s grossly inefficient and probably insecure . This is only intended for\nlocal development, should never be used in production and is only\navailable if the staticfiles app is\nin your project’s INSTALLED_APPS setting. --insecure doesn’t work with ManifestStaticFilesStorage . Example usage: /  $ django-admin runserver --insecure ...\\> django-admin runserver --insecure Storages ¶ StaticFilesStorage ¶ class storage. StaticFilesStorage ¶ A subclass of the FileSystemStorage storage backend that uses the STATIC_ROOT setting as the base\nfile system location and the STATIC_URL setting respectively\nas the base URL. storage.StaticFilesStorage. post_process ( paths , ** options ) ¶ If this method is defined on a storage, it’s called by the collectstatic management command after each run and gets passed the\nlocal storages and paths of found files as a dictionary, as well as the command\nline options. It yields tuples of three values: original_path, processed_path, processed . The path values are strings and processed is a boolean indicating whether or not the value was\npost-processed, or an exception if post-processing failed. The ManifestStaticFilesStorage uses this behind the scenes to replace the paths with their hashed\ncounterparts and update the cache appropriately. ManifestStaticFilesStorage ¶ class storage. ManifestStaticFilesStorage ¶ A subclass of the StaticFilesStorage storage backend which stores the file names it handles by appending the MD5\nhash of the file’s content to the filename. For example, the file css/styles.css would also be saved as css/styles.55e7cbb9ba48.css . The purpose of this storage is to keep serving the old files in case some\npages still refer to those files, e.g. because they are cached by you or\na 3rd party proxy server. Additionally, it’s very helpful if you want to\napply far future Expires headers to the deployed files to speed up the\nload time for subsequent page visits. The storage backend automatically replaces the paths found in the saved\nfiles matching other saved files with the path of the cached copy (using\nthe post_process() method). The regular expressions used to find those paths\n( django.contrib.staticfiles.storage.HashedFilesMixin.patterns ) cover: The @import rule and url() statement of Cascading Style Sheets . Source map comments in CSS and JavaScript files. Subclass ManifestStaticFilesStorage and set the support_js_module_import_aggregation attribute to True , if you want to\nuse the experimental regular expressions to cover: The modules import in JavaScript. The modules aggregation in JavaScript. For example, the 'css/styles.css' file with this content: @ import url ( \"../admin/css/base.css\" ) ; …would be replaced by calling the url() method of the ManifestStaticFilesStorage storage backend, ultimately saving a 'css/styles.55e7cbb9ba48.css' file with the following content: @ import url ( \"../admin/css/base.27e20196a850.css\" ) ; Usage of the integrity HTML attribute with local files When using the optional integrity attribute within tags like <script> or <link> , its value should be calculated based on the\nfiles as they are served, not as stored in the filesystem. This is\nparticularly important because depending on how static files are collected,\ntheir checksum may have changed (for example when using collectstatic ). At the moment, there is no out-of-the-box\ntooling available for this. You can change the location of the manifest file by using a custom ManifestStaticFilesStorage subclass that sets the manifest_storage argument. For example: from django.conf import settings from django.contrib.staticfiles.storage import ( ManifestStaticFilesStorage , StaticFilesStorage , ) class MyManifestStaticFilesStorage ( ManifestStaticFilesStorage ): def __init__ ( self , * args , ** kwargs ): manifest_storage = StaticFilesStorage ( location = settings . BASE_DIR ) super () . __init__ ( * args , manifest_storage = manifest_storage , ** kwargs ) References in comments ManifestStaticFilesStorage doesn’t ignore paths in statements that are\ncommented out. This may crash on the nonexistent paths .\nYou should check and eventually strip comments. storage.ManifestStaticFilesStorage. manifest_hash ¶ This attribute provides a single hash that changes whenever a file in the\nmanifest changes. This can be useful to communicate to SPAs that the assets on\nthe server have changed (due to a new deployment). storage.ManifestStaticFilesStorage. max_post_process_passes ¶ Since static files might reference other static files that need to have their\npaths replaced, multiple passes of replacing paths may be needed until the file\nhashes converge. To prevent an infinite loop due to hashes not converging (for\nexample, if 'foo.css' references 'bar.css' which references 'foo.css' ) there is a maximum number of passes before post-processing is\nabandoned. In cases with a large number of references, a higher number of\npasses might be needed. Increase the maximum number of passes by subclassing ManifestStaticFilesStorage and setting the max_post_process_passes attribute. It defaults to 5. To enable the ManifestStaticFilesStorage you have to make sure the\nfollowing requirements are met: the staticfiles storage backend in STORAGES setting is set to 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage' the DEBUG setting is set to False you’ve collected all your static files by using the collectstatic management command Since creating the MD5 hash can be a performance burden to your website\nduring runtime, staticfiles will automatically store the mapping with\nhashed names for all processed files in a file called staticfiles.json .\nThis happens once when you run the collectstatic management\ncommand. storage.ManifestStaticFilesStorage. manifest_strict ¶ If a file isn’t found in the staticfiles.json manifest at runtime, a ValueError is raised. This behavior can be disabled by subclassing ManifestStaticFilesStorage and setting the manifest_strict attribute to False – nonexistent paths will remain unchanged. Due to the requirement of running collectstatic , this storage\ntypically shouldn’t be used when running tests as collectstatic isn’t run\nas part of the normal test setup. During testing, ensure that staticfiles storage backend in the STORAGES setting is set to something else\nlike 'django.contrib.staticfiles.storage.StaticFilesStorage' (the default). storage.ManifestStaticFilesStorage. file_hash ( name , content = None ) ¶ The method that is used when creating the hashed name of a file.\nNeeds to return a hash for the given file name and content.\nBy default it calculates a MD5 hash from the content’s chunks as\nmentioned above. Feel free to override this method to use your own\nhashing algorithm. ManifestFilesMixin ¶ class storage. ManifestFilesMixin ¶ Use this mixin with a custom storage to append the MD5 hash of the file’s\ncontent to the filename as ManifestStaticFilesStorage does. Finders Module ¶ staticfiles finders has a searched_locations attribute which is a list\nof directory paths in which the finders searched. Example usage: from django.contrib.staticfiles import finders result = finders . find ( \"css/base.css\" ) searched_locations = finders . searched_locations Other Helpers ¶ There are a few other helpers outside of the staticfiles app to work with static\nfiles: The django.template.context_processors.static() context processor\nwhich adds STATIC_URL to every template context rendered\nwith RequestContext contexts. The builtin template tag static which takes a path and urljoins it\nwith the static prefix STATIC_URL . If django.contrib.staticfiles is installed, the tag uses the url() method of the staticfiles storage backend from STORAGES instead. The builtin template tag get_static_prefix which populates a\ntemplate variable with the static prefix STATIC_URL to be\nused as a variable or directly. The similar template tag get_media_prefix which works like get_static_prefix but uses MEDIA_URL . The staticfiles key in django.core.files.storage.storages contains a ready-to-use instance of the staticfiles storage backend. Static file development view ¶ The static files tools are mostly designed to help with getting static files\nsuccessfully deployed into production. This usually means a separate,\ndedicated static file server, which is a lot of overhead to mess with when\ndeveloping locally. Thus, the staticfiles app ships with a quick and dirty helper view that you can use to serve files locally in\ndevelopment. views. serve ( request , path ) ¶ This view function serves static files in development. Warning This view will only work if DEBUG is True . That’s because this view is grossly inefficient and probably insecure . This is only intended for local development, and should never be used in production . Note To guess the served files’ content types, this view relies on the mimetypes module from the Python standard library, which itself\nrelies on the underlying platform’s map files. If you find that this view\ndoesn’t return proper content types for certain files, it is most likely\nthat the platform’s map files are incorrect or need to be updated. This can\nbe achieved, for example, by installing or updating the mailcap package\non a Red Hat distribution, mime-support on a Debian distribution, or by\nediting the keys under HKEY_CLASSES_ROOT in the Windows registry. This view is automatically enabled by runserver (with a DEBUG setting set to True ). To use the view with a different\nlocal development server, add the following snippet to the end of your\nprimary URL configuration: from django.conf import settings from django.contrib.staticfiles import views from django.urls import re_path if settings . DEBUG : urlpatterns += [ re_path ( r \"^static/(?P<path>.*)$\" , views . serve ), ] Note, the beginning of the pattern ( r'^static/' ) should be your STATIC_URL setting. Since this is a bit finicky, there’s also a helper function that’ll do this for\nyou: urls. staticfiles_urlpatterns () ¶ This will return the proper URL pattern for serving static files to your\nalready defined pattern list. Use it like this: from django.contrib.staticfiles.urls import staticfiles_urlpatterns # ... the rest of your URLconf here ... urlpatterns += staticfiles_urlpatterns () This will inspect your STATIC_URL setting and wire up the view\nto serve static files accordingly. Don’t forget to set the STATICFILES_DIRS setting appropriately to let django.contrib.staticfiles know where to look for files in addition to\nfiles in app directories. Warning This helper function will only work if DEBUG is True and your STATIC_URL setting is neither empty nor a full\nURL such as http://static.example.com/ . That’s because this view is grossly inefficient and probably insecure . This is only intended for local development, and should never be used in production . Specialized test case to support ‘live testing’ ¶ class testing. StaticLiveServerTestCase ¶ This unittest TestCase subclass extends django.test.LiveServerTestCase . Just like its parent, you can use it to write tests that involve running the\ncode under test and consuming it with testing tools through HTTP (e.g. Selenium,\nPhantomJS, etc.), because of which it’s needed that the static assets are also\npublished. But given the fact that it makes use of the django.contrib.staticfiles.views.serve() view described above, it can\ntransparently overlay at test execution-time the assets provided by the staticfiles finders. This means you don’t need to run collectstatic before or as a part of your tests setup.", "keywords": ["py", "comments", "variable", "line", "django.core.files.storage.storages", "url", "helpers", "statement", "\\", "def", "distribution", "searches", "css\\base.css", "scenes", "settings", "aggregation", "mymanifeststaticfilesstorage", "classes", "ships", "method", "party", "file_permissions_mode", "testing", "directories", "ignore", "performance", "use", "hat", "views", "special.polls.com", "project", "way", "-i", "default", "option", "src", "manifest_hash", "media_url", "red", "requirements", "-l", "page", "clear", "package", "contrib", "kind", "checksum", "backend", "self", "django.contrib.staticfiles.storage", "argument", "django.contrib.staticfiles", "filesystem", "images", "windows", "platform", "hashes", "future", "runs", "name", "pattern", "get_media_prefix", "admin", "python", "link", "addition", "spas", "file_upload_directory_permissions", "manage.py", "subclass", "wire", "django.contrib.staticfiles.urls", "storage", "--first", "rule", "tag", "0o760", "selenium", "true", "*", "headers", "processor", "django.urls", "key", "parameters", "chunks", "helper", "dictionary", "urlconf", "permissions", "assets", "resolution", "manifeststaticfilesstorage", "script", "support_js_module_import_aggregation", "--verbosity", "template", "debug", "cache", "setting", "static", "order", "development", "style", "ignore_patterns", "application", "behavior", "system", "rest", "modules", "files", "passes", "import", "runtime", "moment", "paths", "staticliveservertestcase", "#", "idea", "counterparts", "django.contrib.staticfiles.storage.hashedfilesmixin.patterns", "¶", "init", "sheets", "server", "beginning", "example", "value", "bar.css", "source", "styles.css", "introduction", "html", "examples", "details", "manifest_storage", "proxy", "setup", "locations", "map", "hash", "library", "algorithm", "post_process", "admin\\js\\core.js", "parent", "mailcap", "get_static_prefix", "searched_locations", "box", "post", "valueerror", "phantomjs", "django", "mixin", "fact", "filesystemstorage", "lot", "hkey_classes_root", "strings", "http", "requestcontext", "=", "aid", "base_dir", "match", "run", "+", "file_hash", "statements", "--nostatic", "staticfiles", "staticfilesconfig", "places", "help", "time", "exception", "middleware", "args", "r'^static/", "commands", "css", "collectstatic", "load", "output", "static_url", "copy", "custom", "mime", "testcase", "static_root", "django.contrib.staticfiles.apps", "none", "urls", "loop", "base", "command", "javascript", "js", "production", "content", "end", "deployment", "findstatic", "flag", "applications", "request", "mapping", "matching", "--no", "options", "references", "storages", "patterns", "invocation", "manifest_strict", "execution", "kwargs", "keys", "staticfilesstorage", "configuration", "path", "tools", "directory", "base.27e20196a850.css", "module", "apps", "http://static.example.com/", "context", "purpose", "pages", "registry", "website", "slashes", "manifestfilesmixin", "manifest", "processed_path", "staticfiles_urlpatterns", "support", "types", "changes", "--insecure", "base.css", "false", "md5", "management", "prefix", "tests", "hand", "requirement", "visits", "@import", "values", "django.contrib.staticfiles.views.serve", "mystaticfilesconfig", "cases", "times", "super", "urlpatterns", "media", "burden", "guidelines", "contexts", "test", "staticfiles_dirs", "re_path", "/", "location", "path>.*)$", "input", "usage", "foo.css", "processing", "snippet", "finders", "staticfiles.json", "runserver", "n’t", "installed_apps", "case", "class", "number", "mystaticfilesstorage", "tuples", "attribute", "function", "list", "bit", "filename", "app", "view", "user", "part", "file", "core", "mess", "tooling", "cascading", "timestamp", "core.js", "names", "cvs", "styles.55e7cbb9ba48.css", "max_post_process_passes", "expressions", "tags", "set", "instance", "overhead", "code", "integrity", "appconfig", "directory_permissions_mode", "mimetypes", "file_upload_permissions"], "type": "documentation"},
{"title": "The “sites” framework", "url": "https://docs.djangoproject.com/en/5.1/ref/contrib/sites/", "content": "The “sites” framework ¶ Django comes with an optional “sites” framework. It’s a hook for associating\nobjects and functionality to particular websites, and it’s a holding place for\nthe domain names and “verbose” names of your Django-powered sites. Use it if your single Django installation powers more than one site and you\nneed to differentiate between those sites in some way. The sites framework is mainly based on this model: class models. Site ¶ A model for storing the domain and name attributes of a website. domain ¶ The fully qualified domain name associated with the website.\nFor example, www.example.com . name ¶ A human-readable “verbose” name for the website. The SITE_ID setting specifies the database ID of the Site object associated with that\nparticular settings file. If the setting is omitted, the get_current_site() function will\ntry to get the current site by comparing the domain with the host name from\nthe request.get_host() method. How you use this is up to you, but Django uses it in a couple of ways\nautomatically via a couple of conventions. Example usage ¶ Why would you use sites? It’s best explained through examples. Associating content with multiple sites ¶ The LJWorld.com and Lawrence.com sites were operated by the same news\norganization – the Lawrence Journal-World newspaper in Lawrence, Kansas.\nLJWorld.com focused on news, while Lawrence.com focused on local entertainment.\nBut sometimes editors wanted to publish an article on both sites. The naive way of solving the problem would be to require site producers to\npublish the same story twice: once for LJWorld.com and again for Lawrence.com.\nBut that’s inefficient for site producers, and it’s redundant to store\nmultiple copies of the same story in the database. A better solution removes the content duplication: Both sites use the same\narticle database, and an article is associated with one or more sites. In\nDjango model terminology, that’s represented by a ManyToManyField in the Article model: from django.contrib.sites.models import Site from django.db import models class Article ( models . Model ): headline = models . CharField ( max_length = 200 ) # ... sites = models . ManyToManyField ( Site ) This accomplishes several things quite nicely: It lets the site producers edit all content – on both sites – in a\nsingle interface (the Django admin). It means the same story doesn’t have to be published twice in the\ndatabase; it only has a single record in the database. It lets the site developers use the same Django view code for both sites.\nThe view code that displays a given story checks to make sure the requested\nstory is on the current site. It looks something like this: from django.contrib.sites.shortcuts import get_current_site def article_detail ( request , article_id ): try : a = Article . objects . get ( id = article_id , sites__id = get_current_site ( request ) . id ) except Article . DoesNotExist : raise Http404 ( \"Article does not exist on this site\" ) # ... Associating content with a single site ¶ Similarly, you can associate a model to the Site model in a many-to-one relationship, using ForeignKey . For example, if an article is only allowed on a single site, you’d use a model\nlike this: from django.contrib.sites.models import Site from django.db import models class Article ( models . Model ): headline = models . CharField ( max_length = 200 ) # ... site = models . ForeignKey ( Site , on_delete = models . CASCADE ) This has the same benefits as described in the last section. Hooking into the current site from views ¶ You can use the sites framework in your Django views to do\nparticular things based on the site in which the view is being called.\nFor example: from django.conf import settings def my_view ( request ): if settings . SITE_ID == 3 : # Do something. pass else : # Do something else. pass It’s fragile to hard-code the site IDs like that, in case they change. The\ncleaner way of accomplishing the same thing is to check the current site’s\ndomain: from django.contrib.sites.shortcuts import get_current_site def my_view ( request ): current_site = get_current_site ( request ) if current_site . domain == \"foo.com\" : # Do something pass else : # Do something else. pass This has also the advantage of checking if the sites framework is installed,\nand return a RequestSite instance if\nit is not. If you don’t have access to the request object, you can use the get_current() method of the Site model’s manager. You should then ensure that your settings file does contain\nthe SITE_ID setting. This example is equivalent to the previous one: from django.contrib.sites.models import Site def my_function_without_request (): current_site = Site . objects . get_current () if current_site . domain == \"foo.com\" : # Do something pass else : # Do something else. pass Getting the current domain for display ¶ LJWorld.com and Lawrence.com both have email alert functionality, which lets\nreaders sign up to get notifications when news happens. It’s pretty basic: A\nreader signs up on a web form and immediately gets an email saying,\n“Thanks for your subscription.” It’d be inefficient and redundant to implement this sign up processing code\ntwice, so the sites use the same code behind the scenes. But the “thank you for\nsigning up” notice needs to be different for each site. By using Site objects, we can abstract the “thank you” notice to use the values of the\ncurrent site’s name and domain . Here’s an example of what the form-handling view looks like: from django.contrib.sites.shortcuts import get_current_site from django.core.mail import send_mail def register_for_newsletter ( request ): # Check form values, etc., and subscribe the user. # ... current_site = get_current_site ( request ) send_mail ( \"Thanks for subscribing to %s alerts\" % current_site . name , \"Thanks for your subscription. We appreciate it. \\n\\n -The %s team.\" % ( current_site . name ,), \"editor@ %s \" % current_site . domain , [ user . email ], ) # ... On Lawrence.com, this email has the subject line “Thanks for subscribing to\nlawrence.com alerts.” On LJWorld.com, the email has the subject “Thanks for\nsubscribing to LJWorld.com alerts.” Same goes for the email’s message body. Note that an even more flexible (but more heavyweight) way of doing this would\nbe to use Django’s template system. Assuming Lawrence.com and LJWorld.com have\ndifferent template directories ( DIRS ), you could\nfarm out to the template system like so: from django.core.mail import send_mail from django.template import loader def register_for_newsletter ( request ): # Check form values, etc., and subscribe the user. # ... subject = loader . get_template ( \"alerts/subject.txt\" ) . render ({}) message = loader . get_template ( \"alerts/message.txt\" ) . render ({}) send_mail ( subject , message , \"editor@ljworld.com\" , [ user . email ]) # ... In this case, you’d have to create subject.txt and message.txt template files for both the LJWorld.com and Lawrence.com template directories.\nThat gives you more flexibility, but it’s also more complex. It’s a good idea to exploit the Site objects as much as possible, to remove unneeded complexity and redundancy. Getting the current domain for full URLs ¶ Django’s get_absolute_url() convention is nice for getting your objects’\nURL without the domain name, but in some cases you might want to display the\nfull URL – with https:// and the domain and everything – for an object.\nTo do this, you can use the sites framework. An example: >>> from django.contrib.sites.models import Site >>> obj = MyModel . objects . get ( id = 3 ) >>> obj . get_absolute_url () '/mymodel/objects/3/' >>> Site . objects . get_current () . domain 'example.com' >>> \"https:// %s%s \" % ( Site . objects . get_current () . domain , obj . get_absolute_url ()) 'https://example.com/mymodel/objects/3/' Enabling the sites framework ¶ To enable the sites framework, follow these steps: Add 'django.contrib.sites' to your INSTALLED_APPS setting. Define a SITE_ID setting: SITE_ID = 1 Run migrate . django.contrib.sites registers a post_migrate signal handler which creates a\ndefault site named example.com with the domain example.com . This site\nwill also be created after Django creates the test database. To set the\ncorrect name and domain for your project, you can use a data migration . In order to serve different sites in production, you’d create a separate\nsettings file with each SITE_ID (perhaps importing from a common settings\nfile to avoid duplicating shared settings) and then specify the appropriate DJANGO_SETTINGS_MODULE for each site. Caching the current Site object ¶ As the current site is stored in the database, each call to Site.objects.get_current() could result in a database query. But Django is a\nlittle cleverer than that: on the first request, the current site is cached, and\nany subsequent call returns the cached data instead of hitting the database. If for any reason you want to force a database query, you can tell Django to\nclear the cache using Site.objects.clear_cache() : # First call; current site fetched from database. current_site = Site . objects . get_current () # ... # Second call; current site fetched from cache. current_site = Site . objects . get_current () # ... # Force a database query for the third call. Site . objects . clear_cache () current_site = Site . objects . get_current () The CurrentSiteManager ¶ class managers. CurrentSiteManager ¶ If Site plays a key role in your\napplication, consider using the helpful CurrentSiteManager in your\nmodel(s). It’s a model manager that\nautomatically filters its queries to include only objects associated\nwith the current Site . Mandatory SITE_ID The CurrentSiteManager is only usable when the SITE_ID setting is defined in your settings. Use CurrentSiteManager by adding it to\nyour model explicitly. For example: from django.contrib.sites.models import Site from django.contrib.sites.managers import CurrentSiteManager from django.db import models class Photo ( models . Model ): photo = models . FileField ( upload_to = \"photos\" ) photographer_name = models . CharField ( max_length = 100 ) pub_date = models . DateField () site = models . ForeignKey ( Site , on_delete = models . CASCADE ) objects = models . Manager () on_site = CurrentSiteManager () With this model, Photo.objects.all() will return all Photo objects in\nthe database, but Photo.on_site.all() will return only the Photo objects\nassociated with the current site, according to the SITE_ID setting. Put another way, these two statements are equivalent: Photo . objects . filter ( site = settings . SITE_ID ) Photo . on_site . all () How did CurrentSiteManager know which field of Photo was the Site ? By default, CurrentSiteManager looks for a\neither a ForeignKey called site or a ManyToManyField called sites to filter on. If you use a field named something other than site or sites to identify which Site objects your object is\nrelated to, then you need to explicitly pass the custom field name as\na parameter to CurrentSiteManager on your\nmodel. The following model, which has a field called publish_on ,\ndemonstrates this: from django.contrib.sites.models import Site from django.contrib.sites.managers import CurrentSiteManager from django.db import models class Photo ( models . Model ): photo = models . FileField ( upload_to = \"photos\" ) photographer_name = models . CharField ( max_length = 100 ) pub_date = models . DateField () publish_on = models . ForeignKey ( Site , on_delete = models . CASCADE ) objects = models . Manager () on_site = CurrentSiteManager ( \"publish_on\" ) If you attempt to use CurrentSiteManager and pass a field name that doesn’t exist, Django will raise a ValueError . Finally, note that you’ll probably want to keep a normal\n(non-site-specific) Manager on your model, even if you use CurrentSiteManager . As\nexplained in the manager documentation , if\nyou define a manager manually, then Django won’t create the automatic objects = models.Manager() manager for you. Also note that certain\nparts of Django – namely, the Django admin site and generic views –\nuse whichever manager is defined first in the model, so if you want\nyour admin site to have access to all objects (not just site-specific\nones), put objects = models.Manager() in your model, before you\ndefine CurrentSiteManager . Site middleware ¶ If you often use this pattern: from django.contrib.sites.models import Site def my_view ( request ): site = Site . objects . get_current () ... To avoid repetitions, add django.contrib.sites.middleware.CurrentSiteMiddleware to MIDDLEWARE . The middleware sets the site attribute on every\nrequest object, so you can use request.site to get the current site. How Django uses the sites framework ¶ Although it’s not required that you use the sites framework, it’s strongly\nencouraged, because Django takes advantage of it in a few places. Even if your\nDjango installation is powering only a single site, you should take the two\nseconds to create the site object with your domain and name , and point\nto its ID in your SITE_ID setting. Here’s how Django uses the sites framework: In the redirects framework , each\nredirect object is associated with a particular site. When Django searches\nfor a redirect, it takes into account the current site. In the flatpages framework , each\nflatpage is associated with a particular site. When a flatpage is created,\nyou specify its Site , and the FlatpageFallbackMiddleware checks the current site in retrieving flatpages to display. In the syndication framework , the\ntemplates for title and description automatically have access to a\nvariable {{ site }} , which is the Site object representing the current\nsite. Also, the hook for providing item URLs will use the domain from\nthe current Site object if you don’t\nspecify a fully-qualified domain. In the authentication framework , django.contrib.auth.views.LoginView passes the current Site name to the template as {{ site_name }} . The shortcut view ( django.contrib.contenttypes.views.shortcut )\nuses the domain of the current Site object when calculating\nan object’s URL. In the admin framework, the “view on site” link uses the current Site to work out the domain for the\nsite that it will redirect to. RequestSite objects ¶ Some django.contrib applications take advantage of\nthe sites framework but are architected in a way that doesn’t require the\nsites framework to be installed in your database. (Some people don’t want to,\nor just aren’t able to install the extra database table that the sites\nframework requires.) For those cases, the framework provides a django.contrib.sites.requests.RequestSite class, which can be used as\na fallback when the database-backed sites framework is not available. class requests. RequestSite ¶ A class that shares the primary interface of Site (i.e., it has domain and name attributes) but gets its data from a Django HttpRequest object rather than from a database. __init__ ( request ) ¶ Sets the name and domain attributes to the value of get_host() . A RequestSite object has a similar\ninterface to a normal Site object,\nexcept its __init__() method takes an HttpRequest object. It’s able to deduce\nthe domain and name by looking at the request’s domain. It has save() and delete() methods to match the interface of Site , but the methods raise NotImplementedError . get_current_site shortcut ¶ Finally, to avoid repetitive fallback code, the framework provides a django.contrib.sites.shortcuts.get_current_site() function. shortcuts. get_current_site ( request ) ¶ A function that checks if django.contrib.sites is installed and\nreturns either the current Site object or a RequestSite object\nbased on the request. It looks up the current site based on request.get_host() if the SITE_ID setting is not defined. Both a domain and a port may be returned by request.get_host() when the Host header has a port\nexplicitly specified, e.g. example.com:80 . In such cases, if the\nlookup fails because the host does not match a record in the database,\nthe port is stripped and the lookup is retried with the domain part\nonly. This does not apply to RequestSite which will always\nuse the unmodified host.", "keywords": ["website", "terminology", "hook", "interface", "photo.on_site.all", "doesnotexist", "variable", "editors", "entertainment", "statements", "https://", "line", "template", "url", "django.contrib.sites.models", "alert", "obj", "cache", "shortcuts", "manytomanyfield", "story", "fallback", "foo.com", "%", "setting", "handling", "order", "notimplementederror", "lawrence.com", "templates", "documentation", "def", "signal", "filter", "place", "subject", "reader", "scenes", "photo", "django.contrib", "get_host", "id", "settings", "places", "reason", "requestsite", "application", "filefield", "django_settings_module", "get_current_site", "loader", "middleware", "method", "migrate", "django.contrib.sites.requests", "table", "port", "check", "system", "directories", "flexibility", "values", "ids", "site", "organization", "d", "notifications", "files", "cases", "solution", "query", "manager", "redundancy", "import", "problem", "views", "record", "ways", "upload_to", "datefield", "item", "subscribing", "role", "project", "register_for_newsletter", "article", "lawrence", "#", "get_absolute_url", "sites__id", "point", "test", "way", "section", "idea", "newspaper", "authentication", "¶", "django.contrib.sites.middleware", "producers", "default", "init", "ljworld.com", "kansas", "custom", "web", "django.template", "django.contrib.contenttypes.views.shortcut", "methods", "domain", "django.contrib.sites", "usage", "https://example.com/mymodel/objects/3/", "couple", "model", "max_length", "request.site", "processing", "urls", "sites", "journal", "copies", "access", "example", "checks", "photographer_name", "site.objects.clear_cache", "n’t", "email", "powers", "value", "convention", "installed_apps", "mymodel", "production", "content", "repetitions", "syndication", "seconds", "people", "case", "get_current", "readers", "class", "site_id", "applications", "request", "redirect", "redirects", "advantage", "article_id", "benefits", "objects/3/", "ones", "attribute", "function", "examples", "developers", "thing", "django.db", "things", "flatpagefallbackmiddleware", "django.contrib.sites.shortcuts", "send_mail", "steps", "data", "view", "form", "site_name", "human", "parts", "my_view", "name", "object", "i", "body", "pub_date", "team", "pattern", "user", "httprequest", "header", "photos", "file", "world", "queries", "flatpages", "attributes", "django.contrib.sites.managers", "part", "admin", "installation", "link", "charfield", "http404", "notice", "loginview", "verbose", "account", "currentsitemiddleware", "shortcut", "handler", "sign", "description", "force", "lookup", "migration", "current_site", "host", "publish_on", "flatpage", "get_template", "on_site", "valueerror", "names", "django", "duplication", "thanks", "complexity", "message", "request.get_host", "\\n\\n", "managers", "model(s", "display", "dirs", "cleverer", "parameter", "framework", "field", "functionality", "requests", "foreignkey", "database", "relationship", "websites", "currentsitemanager", "headline", "subscription", "photo.objects.all", "instance", "article_detail", "=", "models", "code", "objects", "alerts", "news", "conventions", "django.core.mail", "title", "call", "django.contrib.auth.views"], "type": "documentation"},
{"title": "The sitemap framework", "url": "https://docs.djangoproject.com/en/5.1/ref/contrib/sitemaps/", "content": "The sitemap framework ¶ Django comes with a high-level sitemap-generating framework to create sitemap XML files. Overview ¶ A sitemap is an XML file on your website that tells search-engine indexers how\nfrequently your pages change and how “important” certain pages are in relation\nto other pages on your site. This information helps search engines index your\nsite. The Django sitemap framework automates the creation of this XML file by letting\nyou express this information in Python code. It works much like Django’s syndication framework . To create a sitemap, write a Sitemap class and point to it in your URLconf . Installation ¶ To install the sitemap app, follow these steps: Add 'django.contrib.sitemaps' to your INSTALLED_APPS setting. Make sure your TEMPLATES setting contains a DjangoTemplates backend whose APP_DIRS options is set to True . It’s in there by\ndefault, so you’ll only need to change this if you’ve changed that setting. Make sure you’ve installed the sites framework . (Note: The sitemap application doesn’t install any database tables. The only\nreason it needs to go into INSTALLED_APPS is so that the Loader() template\nloader can find the default templates.) Initialization ¶ views. sitemap ( request , sitemaps , section = None , template_name = 'sitemap.xml' , content_type = 'application/xml' ) ¶ To activate sitemap generation on your Django site, add this line to your URLconf : from django.contrib.sitemaps.views import sitemap path ( \"sitemap.xml\" , sitemap , { \"sitemaps\" : sitemaps }, name = \"django.contrib.sitemaps.views.sitemap\" , ) This tells Django to build a sitemap when a client accesses /sitemap.xml . The name of the sitemap file is not important, but the location is. Search\nengines will only index links in your sitemap for the current URL level and\nbelow. For instance, if sitemap.xml lives in your root directory, it may\nreference any URL in your site. However, if your sitemap lives at /content/sitemap.xml , it may only reference URLs that begin with /content/ . The sitemap view takes an extra, required argument: {'sitemaps': sitemaps} . sitemaps should be a dictionary that maps a short section label (e.g., blog or news ) to its Sitemap class\n(e.g., BlogSitemap or NewsSitemap ). It may also map to an instance of\na Sitemap class (e.g., BlogSitemap(some_var) ). Sitemap classes ¶ A Sitemap class is a Python class that\nrepresents a “section” of entries in your sitemap. For example, one Sitemap class could represent all the entries\nof your blog, while another could represent all of the events in your events\ncalendar. In the simplest case, all these sections get lumped together into one sitemap.xml , but it’s also possible to use the framework to generate a\nsitemap index that references individual sitemap files, one per section. (See Creating a sitemap index below.) Sitemap classes must subclass django.contrib.sitemaps.Sitemap . They can live anywhere in your codebase. An example ¶ Let’s assume you have a blog system, with an Entry model, and you want your\nsitemap to include all the links to your individual blog entries. Here’s how\nyour sitemap class might look: from django.contrib.sitemaps import Sitemap from blog.models import Entry class BlogSitemap ( Sitemap ): changefreq = \"never\" priority = 0.5 def items ( self ): return Entry . objects . filter ( is_draft = False ) def lastmod ( self , obj ): return obj . pub_date Note: changefreq and priority are class\nattributes corresponding to <changefreq> and <priority> elements,\nrespectively. They can be made callable as functions, as lastmod was in the example. items() is a method that returns a sequence or QuerySet of objects. The objects returned will get passed to any callable\nmethods corresponding to a sitemap property ( location , lastmod , changefreq , and priority ). lastmod should return a datetime . There is no location method in this example, but you\ncan provide it in order to specify the URL for your object. By default, location() calls get_absolute_url() on each object\nand returns the result. Sitemap class reference ¶ class Sitemap [source] ¶ A Sitemap class can define the following methods/attributes: items [source] ¶ Required. A method that returns a sequence or QuerySet of objects. The framework doesn’t care what type of objects they are;\nall that matters is that these objects get passed to the location() , lastmod() , changefreq() and priority() methods. location [source] ¶ Optional. Either a method or attribute. If it’s a method, it should return the absolute path for a given object\nas returned by items() . If it’s an attribute, its value should be a string representing an\nabsolute path to use for every object returned by items() . In both cases, “absolute path” means a URL that doesn’t include the\nprotocol or domain. Examples: Good: '/foo/bar/' Bad: 'example.com/foo/bar/' Bad: 'https://example.com/foo/bar/' If location isn’t provided, the framework will call\nthe get_absolute_url() method on each object as returned by items() . To specify a protocol other than 'http' , use protocol . lastmod ¶ Optional. Either a method or attribute. If it’s a method, it should take one argument – an object as returned\nby items() – and return that object’s last-modified\ndate/time as a datetime . If it’s an attribute, its value should be a datetime representing the last-modified date/time for every object returned by items() . If all items in a sitemap have a lastmod , the sitemap\ngenerated by views.sitemap() will have a Last-Modified header equal to the latest lastmod . You can activate the ConditionalGetMiddleware to make\nDjango respond appropriately to requests with an If-Modified-Since header which will prevent sending the sitemap if it hasn’t changed. paginator [source] ¶ Optional. This property returns a Paginator for items() . If you generate sitemaps in a batch you may\nwant to override this as a cached property in order to avoid multiple items() calls. changefreq ¶ Optional. Either a method or attribute. If it’s a method, it should take one argument – an object as returned\nby items() – and return that object’s change\nfrequency as a string. If it’s an attribute, its value should be a string representing the\nchange frequency of every object returned by items() . Possible values for changefreq , whether you use a\nmethod or attribute, are: 'always' 'hourly' 'daily' 'weekly' 'monthly' 'yearly' 'never' priority ¶ Optional. Either a method or attribute. If it’s a method, it should take one argument – an object as returned\nby items() – and return that object’s priority as\neither a string or float. If it’s an attribute, its value should be either a string or float\nrepresenting the priority of every object returned by items() . Example values for priority : 0.4 , 1.0 . The\ndefault priority of a page is 0.5 . See the sitemaps.org\ndocumentation for more. protocol ¶ Optional. This attribute defines the protocol ( 'http' or 'https' ) of the\nURLs in the sitemap. If it isn’t set, the protocol with which the\nsitemap was requested is used. If the sitemap is built outside the\ncontext of a request, the default is 'https' . Changed in Django 5.0: In older versions, the default protocol for sitemaps built outside\nthe context of a request was 'http' . limit ¶ Optional. This attribute defines the maximum number of URLs included on each page\nof the sitemap. Its value should not exceed the default value of 50000 , which is the upper limit allowed in the Sitemaps protocol . i18n ¶ Optional. A boolean attribute that defines if the URLs of this sitemap should\nbe generated using all of your LANGUAGES . The default is False . languages ¶ Optional. A sequence of language codes to use for\ngenerating alternate links when i18n is enabled.\nDefaults to LANGUAGES . alternates ¶ Optional. A boolean attribute. When used in conjunction with i18n generated URLs will each have a list of alternate\nlinks pointing to other language versions using the hreflang\nattribute . The default is False . x_default ¶ Optional. A boolean attribute. When True the alternate links generated by alternates will contain a hreflang=\"x-default\" fallback entry with a value of LANGUAGE_CODE . The default is False . get_latest_lastmod () [source] ¶ Optional. A method that returns the latest value returned by lastmod . This function is used to add the lastmod attribute to Sitemap index context\nvariables . By default get_latest_lastmod() returns: If lastmod is an attribute: lastmod . If lastmod is a method:\nThe latest lastmod returned by calling the method with all\nitems returned by Sitemap.items() . get_languages_for_item ( item ) [source] ¶ Optional. A method that returns the sequence of language codes for\nwhich the item is displayed. By default get_languages_for_item() returns languages . Shortcuts ¶ The sitemap framework provides a convenience class for a common case: class GenericSitemap ( info_dict , priority = None , changefreq = None , protocol = None ) [source] ¶ The django.contrib.sitemaps.GenericSitemap class allows you to\ncreate a sitemap by passing it a dictionary which has to contain at least\na queryset entry. This queryset will be used to generate the items\nof the sitemap. It may also have a date_field entry that\nspecifies a date field for objects retrieved from the queryset .\nThis will be used for the lastmod attribute and get_latest_lastmod() methods in the in the\ngenerated sitemap. The priority , changefreq ,\nand protocol keyword arguments allow specifying these\nattributes for all URLs. Example ¶ Here’s an example of a URLconf using GenericSitemap : from django.contrib.sitemaps import GenericSitemap from django.contrib.sitemaps.views import sitemap from django.urls import path from blog.models import Entry info_dict = { \"queryset\" : Entry . objects . all (), \"date_field\" : \"pub_date\" , } urlpatterns = [ # some generic view using info_dict # ... # the sitemap path ( \"sitemap.xml\" , sitemap , { \"sitemaps\" : { \"blog\" : GenericSitemap ( info_dict , priority = 0.6 )}}, name = \"django.contrib.sitemaps.views.sitemap\" , ), ] Sitemap for static views ¶ Often you want the search engine crawlers to index views which are neither\nobject detail pages nor flatpages. The solution is to explicitly list URL\nnames for these views in items and call reverse() in\nthe location method of the sitemap. For example: # sitemaps.py from django.contrib import sitemaps from django.urls import reverse class StaticViewSitemap ( sitemaps . Sitemap ): priority = 0.5 changefreq = \"daily\" def items ( self ): return [ \"main\" , \"about\" , \"license\" ] def location ( self , item ): return reverse ( item ) # urls.py from django.contrib.sitemaps.views import sitemap from django.urls import path from .sitemaps import StaticViewSitemap from . import views sitemaps = { \"static\" : StaticViewSitemap , } urlpatterns = [ path ( \"\" , views . main , name = \"main\" ), path ( \"about/\" , views . about , name = \"about\" ), path ( \"license/\" , views . license , name = \"license\" ), # ... path ( \"sitemap.xml\" , sitemap , { \"sitemaps\" : sitemaps }, name = \"django.contrib.sitemaps.views.sitemap\" , ), ] Creating a sitemap index ¶ views. index ( request , sitemaps , template_name = 'sitemap_index.xml' , content_type = 'application/xml' , sitemap_url_name = 'django.contrib.sitemaps.views.sitemap' ) ¶ The sitemap framework also has the ability to create a sitemap index that\nreferences individual sitemap files, one per each section defined in your sitemaps dictionary. The only differences in usage are: You use two views in your URLconf: django.contrib.sitemaps.views.index() and django.contrib.sitemaps.views.sitemap() . The django.contrib.sitemaps.views.sitemap() view should take a section keyword argument. Here’s what the relevant URLconf lines would look like for the example above: from django.contrib.sitemaps import views urlpatterns = [ path ( \"sitemap.xml\" , views . index , { \"sitemaps\" : sitemaps }, name = \"django.contrib.sitemaps.views.index\" , ), path ( \"sitemap-<section>.xml\" , views . sitemap , { \"sitemaps\" : sitemaps }, name = \"django.contrib.sitemaps.views.sitemap\" , ), ] This will automatically generate a sitemap.xml file that references\nboth sitemap-flatpages.xml and sitemap-blog.xml . The Sitemap classes and the sitemaps dict don’t change at all. If all sitemaps have a lastmod returned by Sitemap.get_latest_lastmod() the sitemap index will have a Last-Modified header equal to the latest lastmod . You should create an index file if one of your sitemaps has more than 50,000\nURLs. In this case, Django will automatically paginate the sitemap, and the\nindex will reflect that. If you’re not using the vanilla sitemap view – for example, if it’s wrapped\nwith a caching decorator – you must name your sitemap view and pass sitemap_url_name to the index view: from django.contrib.sitemaps import views as sitemaps_views from django.views.decorators.cache import cache_page urlpatterns = [ path ( \"sitemap.xml\" , cache_page ( 86400 )( sitemaps_views . index ), { \"sitemaps\" : sitemaps , \"sitemap_url_name\" : \"sitemaps\" }, ), path ( \"sitemap-<section>.xml\" , cache_page ( 86400 )( sitemaps_views . sitemap ), { \"sitemaps\" : sitemaps }, name = \"sitemaps\" , ), ] Template customization ¶ If you wish to use a different template for each sitemap or sitemap index\navailable on your site, you may specify it by passing a template_name parameter to the sitemap and index views via the URLconf: from django.contrib.sitemaps import views urlpatterns = [ path ( \"custom-sitemap.xml\" , views . index , { \"sitemaps\" : sitemaps , \"template_name\" : \"custom_sitemap.html\" }, name = \"django.contrib.sitemaps.views.index\" , ), path ( \"custom-sitemap-<section>.xml\" , views . sitemap , { \"sitemaps\" : sitemaps , \"template_name\" : \"custom_sitemap.html\" }, name = \"django.contrib.sitemaps.views.sitemap\" , ), ] These views return TemplateResponse instances which allow you to easily customize the response data before\nrendering. For more details, see the TemplateResponse documentation . Context variables ¶ When customizing the templates for the index() and sitemap() views, you can rely on the\nfollowing context variables. Index ¶ The variable sitemaps is a list of objects containing the location and lastmod attribute for each of the sitemaps. Each URL exposes the following\nattributes: location : The location (url & page) of the sitemap. lastmod : Populated by the get_latest_lastmod() method for each sitemap. Sitemap ¶ The variable urlset is a list of URLs that should appear in the\nsitemap. Each URL exposes attributes as defined in the Sitemap class: alternates changefreq item lastmod location priority The alternates attribute is available when i18n and alternates are enabled. It is a list of other language\nversions, including the optional x_default fallback, for each\nURL. Each alternate is a dictionary with location and lang_code keys. The item attribute has been added for each URL to allow more flexible\ncustomization of the templates, such as Google news sitemaps . Assuming\nSitemap’s items() would return a list of items with publication_data and a tags field something like this would\ngenerate a Google News compatible sitemap: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <urlset xmlns= \"https://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:news= \"https://www.google.com/schemas/sitemap-news/0.9\" > {% spaceless %} {% for url in urlset %} <url> <loc> {{ url.location }} </loc> {% if url.lastmod %} <lastmod> {{ url.lastmod | date :\"Y-m-d\" }} </lastmod> {% endif %} {% if url.changefreq %} <changefreq> {{ url.changefreq }} </changefreq> {% endif %} {% if url.priority %} <priority> {{ url.priority }} </priority> {% endif %} <news:news> {% if url.item.publication_date %} <news:publication_date> {{ url.item.publication_date | date :\"Y-m-d\" }} </news:publication_date> {% endif %} {% if url.item.tags %} <news:keywords> {{ url.item.tags }} </news:keywords> {% endif %} </news:news> </url> {% endfor %} {% endspaceless %} </urlset>", "keywords": ["dictionary", "urlconf", "website", "index", "alternate", "google", "/content/", "https", "differences", "type", "line", "template", "custom-sitemap.xml", "url", "app_dirs", "shortcuts", "obj", "url.item.tags", "fallback", "datetime", ".sitemaps", "sitemap_url_name", "setting", "%", "order", "templates", "django.contrib.sitemaps.views.sitemap", "filter", "def", "sitemaps", "documentation", "django.contrib", "creation", "https://www.google.com/schemas/sitemap-news/0.9", "genericsitemap", "reason", "m", "time", "application", "overview", "classes", "loader", "sitemap.get_latest_lastmod", "property", "method", "queryset", "if", "language_code", "customization", "convenience", "i18n", "system", "codes", "values", "required", "site", "d", "files", "cases", "solution", "weekly", "generation", "views.sitemap", "views", "import", "information", "items", "item", "result", "#", "get_absolute_url", "frequency", "point", "section", "versions", "¶", "default", "urlset", "hreflang=\"x", "conditionalgetmiddleware", "django.contrib.sitemaps.views", "staticviewsitemap", "decorator", "custom", "location", "client", "calendar", "methods", "domain", "vanilla", "keyword", "usage", "entries", "model", "none", "page", "urls", "change", "y", "sites", "variables", "protocol", "alternates", "https://example.com/foo/bar/", "blogsitemap", "example", "calls", "djangotemplates", "n’t", "content_type", "license", "functions", "value", "installed_apps", "syndication", "backend", "self", "label", "blog.models", "source", "cache_page", "case", "argument", "class", "loc", "number", "xml", "paginator", "sitemap-<section>.xml", "request", "languages", "django.contrib.sitemaps.views.index", "blog", "/sitemap.xml", "return", "tables", "engine", "changefreq", "attribute", "conjunction", "is_draft", "examples", "function", "https://www.sitemaps.org/schemas/sitemap/0.9", "example.com/foo/bar/", "string", "hreflang", "list", "details", "url.location", "steps", "data", "django.contrib.sitemaps", "app", "view", "lines", "name", "pub_date", "options", "root", "object", "priority", "header", "file", "flatpages", "attributes", "lastmod", "bar/", "references", "returns", "installation", "python", "endfor", "crawlers", "xmlns=", "indexers", "templateresponse", "instances", "optional", "newssitemap", "response", "initialization", "template_name", "get_languages_for_item", "sequence", "keys", "url.priority", "sections", "note", "keywords", "sitemap", "events", "url.lastmod", "path", "sitemap.items", "level", "names", "django", "publication_data", "|", "directory", "bad", "parameter", "float", "true", "get_latest_lastmod", "elements", "tags", "date", "spaceless", "framework", "field", "arguments", "version=\"1.0", "sitemaps_views", "relation", "good", "requests", "info_dict", "search", "database", "blogsitemap(some_var", "http", "reverse", "context", "django.views.decorators.cache", "limit", "django.urls", "xmlns", "codebase", "reference", "instance", "engines", "code", "=", "sitemap-flatpages.xml", "pages", "detail", "objects", "links", "news", "sitemap-blog.xml", "lang_code", "language", "batch", "defaults", "entry", "ability", "sitemap_index.xml"], "type": "documentation"},
{"title": "The redirects app", "url": "https://docs.djangoproject.com/en/5.1/ref/contrib/redirects/", "content": "The redirects app ¶ Django comes with an optional redirects application. It lets you store\nredirects in a database and handles the redirecting for you. It uses the HTTP\nresponse status code 301 Moved Permanently by default. Installation ¶ To install the redirects app, follow these steps: Ensure that the django.contrib.sites framework is installed . Add 'django.contrib.redirects' to your INSTALLED_APPS setting. Add 'django.contrib.redirects.middleware.RedirectFallbackMiddleware' to your MIDDLEWARE setting. Run the command manage.py migrate . How it works ¶ manage.py migrate creates a django_redirect table in your database. This\nis a lookup table with site_id , old_path and new_path fields. The RedirectFallbackMiddleware does all of the work. Each time any Django application raises a 404\nerror, this middleware checks the redirects database for the requested\nURL as a last resort. Specifically, it checks for a redirect with the\ngiven old_path with a site ID that corresponds to the SITE_ID setting. If it finds a match, and new_path is not empty, it redirects to new_path using a 301 (“Moved Permanently”) redirect. You can subclass RedirectFallbackMiddleware and set response_redirect_class to django.http.HttpResponseRedirect to use a 302 Moved Temporarily redirect instead. If it finds a match, and new_path is empty, it sends a 410 (“Gone”)\nHTTP header and empty (content-less) response. If it doesn’t find a match, the request continues to be processed as\nusual. The middleware only gets activated for 404s – not for 500s or responses of any\nother status code. Note that the order of MIDDLEWARE matters. Generally, you can put RedirectFallbackMiddleware at the\nend of the list, because it’s a last resort. For more on middleware, read the middleware docs . How to add, change and delete redirects ¶ Via the admin interface ¶ If you’ve activated the automatic Django admin interface, you should see a\n“Redirects” section on the admin index page. Edit redirects as you edit any\nother object in the system. Via the Python API ¶ class models. Redirect ¶ Redirects are represented by a standard Django model ,\nwhich lives in django/contrib/redirects/models.py . You can access\nredirect objects via the Django database API .\nFor example: >>> from django.conf import settings >>> from django.contrib.redirects.models import Redirect >>> # Add a new redirect. >>> redirect = Redirect . objects . create ( ... site_id = 1 , ... old_path = \"/contact-us/\" , ... new_path = \"/contact/\" , ... ) >>> # Change a redirect. >>> redirect . new_path = \"/contact-details/\" >>> redirect . save () >>> redirect <Redirect: /contact-us/ ---> /contact-details/> >>> # Delete a redirect. >>> Redirect . objects . filter ( site_id = 1 , old_path = \"/contact-us/\" ) . delete () (1, {'redirects.Redirect': 1}) Middleware ¶ class middleware. RedirectFallbackMiddleware ¶ You can change the HttpResponse classes used\nby the middleware by creating a subclass of RedirectFallbackMiddleware and overriding response_gone_class and/or response_redirect_class . response_gone_class ¶ The HttpResponse class used when a Redirect is not found for the\nrequested path or has a blank new_path value. Defaults to HttpResponseGone . response_redirect_class ¶ The HttpResponse class that handles the redirect. Defaults to HttpResponsePermanentRedirect .", "keywords": ["via", "index", "edit", "match", "interface", "work", "/contact", "error", "url", "httpresponse", "redirecting", "setting", "docs", "order", "filter", "django_redirect", "id", "settings", "time", "application", "classes", "middleware", "django.contrib.redirects", "migrate", "delete", "table", "system", "old_path", "django.contrib.redirects.models", "site", "responses", "status", "import", "#", "fields", "section", "¶", "response_redirect_class", "default", "matters", "redirectfallbackmiddleware", "django.contrib.sites", "model", "page", "change", "contrib", "response_gone_class", "command", "example", "value", "installed_apps", "content", "end", "class", "site_id", "request", "redirect", "redirects", "gone", "list", "steps", "500s", "app", "new_path", "resort", "object", "header", "admin", "installation", "python", "us/", "/contact/", "response", "subclass", "lookup", "api", "path", "django", "framework", "httpresponsegone", "database", "http", "404s", "code", "models", "=", "objects", "defaults"], "type": "documentation"},
{"title": "Additional Information", "url": "https://docs.djangoproject.com/en/5.1/ref/contrib/postgres/", "content": "django.contrib.postgres ¶ PostgreSQL has a number of features which are not shared by the other databases\nDjango supports. This optional module contains model fields and form fields for\na number of PostgreSQL specific data types. Note Django is, and will continue to be, a database-agnostic web framework. We\nwould encourage those writing reusable applications for the Django\ncommunity to write database-agnostic code where practical. However, we\nrecognize that real world projects written using Django need not be\ndatabase-agnostic. In fact, once a project reaches a given size changing\nthe underlying data store is already a significant challenge and is likely\nto require changing the code base in some ways to handle differences\nbetween the data stores. Django provides support for a number of data types which will\nonly work with PostgreSQL. There is no fundamental reason why (for example)\na contrib.mysql module does not exist, except that PostgreSQL has the\nrichest feature set of the supported databases so its users have the most\nto gain. PostgreSQL specific aggregation functions General-purpose aggregation functions Aggregate functions for statistics Usage examples PostgreSQL specific database constraints ExclusionConstraint PostgreSQL specific query expressions ArraySubquery() expressions PostgreSQL specific model fields Indexing these fields ArrayField HStoreField Range Fields PostgreSQL specific form fields and widgets Fields Widgets PostgreSQL specific database functions RandomUUID TransactionNow PostgreSQL specific model indexes BloomIndex BrinIndex BTreeIndex GinIndex GistIndex HashIndex SpGistIndex OpClass() expressions PostgreSQL specific lookups Trigram similarity Unaccent Database migration operations Creating extension using migrations CreateExtension BloomExtension BtreeGinExtension BtreeGistExtension CITextExtension CryptoExtension HStoreExtension TrigramExtension UnaccentExtension Managing collations using migrations Concurrent index operations Adding constraints without enforcing validation Full text search The search lookup SearchVector SearchQuery SearchRank SearchHeadline Changing the search configuration Weighting queries Performance Trigram similarity Validators KeysValidator Range validators", "keywords": ["searchrank", "opclass", "index", "concurrent", "btreeindex", "differences", "range", "support", "migrations", "types", "widgets", "indexing", "keysvalidator", "reason", "aggregation", "ginindex", "gistindex", "searchvector", "performance", "unaccent", "query", "arrayfield", "ways", "project", "bloomextension", "fields", "trigramextension", "¶", "searchheadline", "bloomindex", "stores", "web", "collations", "usage", "model", "similarity", "unaccentextension", "statistics", "base", "searchquery", "hstorefield", "citextextension", "randomuuid", "example", "constraints", "users", "functions", "btreegistextension", "challenge", "validators", "community", "number", "applications", "weighting", "arraysubquery", "contrib.mysql", "examples", "data", "hstoreextension", "form", "lookups", "extension", "world", "postgresql", "size", "operations", "transactionnow", "store", "configuration", "indexes", "lookup", "migration", "hashindex", "projects", "django", "createextension", "fact", "expressions", "trigram", "brinindex", "validation", "set", "managing", "framework", "text", "module", "btreeginextension", "database", "search", "databases", "exclusionconstraint", "purpose", "spgistindex", "features", "code", "feature", "cryptoextension"], "type": "documentation"},
{"title": "The messages framework", "url": "https://docs.djangoproject.com/en/5.1/ref/contrib/messages/", "content": "The messages framework ¶ Quite commonly in web applications, you need to display a one-time\nnotification message (also known as “flash message”) to the user after\nprocessing a form or some other types of user input. For this, Django provides full support for cookie- and session-based\nmessaging, for both anonymous and authenticated users. The messages framework\nallows you to temporarily store messages in one request and retrieve them for\ndisplay in a subsequent request (usually the next one). Every message is\ntagged with a specific level that determines its priority (e.g., info , warning , or error ). Enabling messages ¶ Messages are implemented through a middleware class and corresponding context processor . The default settings.py created by django-admin startproject already contains all the settings required to enable message functionality: 'django.contrib.messages' is in INSTALLED_APPS . MIDDLEWARE contains 'django.contrib.sessions.middleware.SessionMiddleware' and 'django.contrib.messages.middleware.MessageMiddleware' . The default storage backend relies on sessions . That’s why SessionMiddleware must be enabled and appear before MessageMiddleware in MIDDLEWARE . The 'context_processors' option of the DjangoTemplates backend\ndefined in your TEMPLATES setting contains 'django.contrib.messages.context_processors.messages' . If you don’t want to use messages, you can remove 'django.contrib.messages' from your INSTALLED_APPS , the MessageMiddleware line from MIDDLEWARE , and the messages context processor from TEMPLATES . Configuring the message engine ¶ Storage backends ¶ The messages framework can use different backends to store temporary messages. Django provides three built-in storage classes in django.contrib.messages : class storage.session. SessionStorage ¶ This class stores all messages inside of the request’s session. Therefore\nit requires Django’s contrib.sessions application. class storage.cookie. CookieStorage ¶ This class stores the message data in a cookie (signed with a secret hash\nto prevent manipulation) to persist notifications across requests. Old\nmessages are dropped if the cookie data size would exceed 2048 bytes. class storage.fallback. FallbackStorage ¶ This class first uses CookieStorage , and falls back to using SessionStorage for the messages that could not fit in a single cookie.\nIt also requires Django’s contrib.sessions application. This behavior avoids writing to the session whenever possible. It should\nprovide the best performance in the general case. FallbackStorage is the\ndefault storage class. If it isn’t suitable to your needs, you can select\nanother storage class by setting MESSAGE_STORAGE to its full import\npath, for example: MESSAGE_STORAGE = \"django.contrib.messages.storage.cookie.CookieStorage\" class storage.base. BaseStorage ¶ To write your own storage class, subclass the BaseStorage class in django.contrib.messages.storage.base and implement the _get and _store methods. Message levels ¶ The messages framework is based on a configurable level architecture similar\nto that of the Python logging module. Message levels allow you to group\nmessages by type so they can be filtered or displayed differently in views and\ntemplates. The built-in levels, which can be imported from django.contrib.messages directly, are: Constant Purpose DEBUG Development-related messages that will be ignored (or removed) in a production deployment INFO Informational messages for the user SUCCESS An action was successful, e.g. “Your profile was updated successfully” WARNING A failure did not occur but may be imminent ERROR An action was not successful or some other failure occurred The MESSAGE_LEVEL setting can be used to change the minimum recorded level\n(or it can be changed per request ). Attempts to add messages of a level less\nthan this will be ignored. Message tags ¶ Message tags are a string representation of the message level plus any\nextra tags that were added directly in the view (see Adding extra message tags below for more details). Tags are stored in a\nstring and are separated by spaces. Typically, message tags\nare used as CSS classes to customize message style based on message type. By\ndefault, each level has a single tag that’s a lowercase version of its own\nconstant: Level Constant Tag DEBUG debug INFO info SUCCESS success WARNING warning ERROR error To change the default tags for a message level (either built-in or custom),\nset the MESSAGE_TAGS setting to a dictionary containing the levels\nyou wish to change. As this extends the default tags, you only need to provide\ntags for the levels you wish to override: from django.contrib.messages import constants as messages MESSAGE_TAGS = { messages . INFO : \"\" , 50 : \"critical\" , } Using messages in views and templates ¶ add_message ( request , level , message , extra_tags = '' , fail_silently = False ) [source] ¶ Adding a message ¶ To add a message, call: from django.contrib import messages messages . add_message ( request , messages . INFO , \"Hello world.\" ) Some shortcut methods provide a standard way to add messages with commonly\nused tags (which are usually represented as HTML classes for the message): messages . debug ( request , \" %s SQL statements were executed.\" % count ) messages . info ( request , \"Three credits remain in your account.\" ) messages . success ( request , \"Profile details updated.\" ) messages . warning ( request , \"Your account expires in three days.\" ) messages . error ( request , \"Document deleted.\" ) Displaying messages ¶ get_messages ( request ) [source] ¶ In your template , use something like: {% if messages %} < ul class = \"messages\" > {% for message in messages %} < li {% if message.tags %} class = \" {{ message.tags }} \" {% endif %} > {{ message }} </ li > {% endfor %} </ ul > {% endif %} If you’re using the context processor, your template should be rendered with a RequestContext . Otherwise, ensure messages is available to\nthe template context. Even if you know there is only one message, you should still iterate over the messages sequence, because otherwise the message storage will not be\ncleared for the next request. The context processor also provides a DEFAULT_MESSAGE_LEVELS variable which\nis a mapping of the message level names to their numeric value: {% if messages %} < ul class = \"messages\" > {% for message in messages %} < li {% if message.tags %} class = \" {{ message.tags }} \" {% endif %} > {% if message.level == DEFAULT_MESSAGE_LEVELS.ERROR %} Important: {% endif %} {{ message }} </ li > {% endfor %} </ ul > {% endif %} Outside of templates , you can use get_messages() : from django.contrib.messages import get_messages storage = get_messages ( request ) for message in storage : do_something_with_the_message ( message ) For instance, you can fetch all the messages to return them in a JSONResponseMixin instead of a TemplateResponseMixin . get_messages() will return an\ninstance of the configured storage backend. The Message class ¶ class Message [source] ¶ When you loop over the list of messages in a template, what you get are\ninstances of the Message class. They have only a few attributes: message : The actual text of the message. level : An integer describing the type of the message (see the message levels section above). tags : A string combining all the message’s tags ( extra_tags and level_tag ) separated by spaces. extra_tags : A string containing custom tags for this message,\nseparated by spaces. It’s empty by default. level_tag : The string representation of the level. By default, it’s\nthe lowercase version of the name of the associated constant, but this\ncan be changed if you need by using the MESSAGE_TAGS setting. Creating custom message levels ¶ Messages levels are nothing more than integers, so you can define your own\nlevel constants and use them to create more customized user feedback, e.g.: CRITICAL = 50 def my_view ( request ): messages . add_message ( request , CRITICAL , \"A serious error occurred.\" ) When creating custom message levels you should be careful to avoid overloading\nexisting levels. The values for the built-in levels are: Level Constant Value DEBUG 10 INFO 20 SUCCESS 25 WARNING 30 ERROR 40 If you need to identify the custom levels in your HTML or CSS, you need to\nprovide a mapping via the MESSAGE_TAGS setting. Note If you are creating a reusable application, it is recommended to use\nonly the built-in message levels and not rely on any custom levels. Changing the minimum recorded level per-request ¶ The minimum recorded level can be set per request via the set_level method: from django.contrib import messages # Change the messages level to ensure the debug message is added. messages . set_level ( request , messages . DEBUG ) messages . debug ( request , \"Test message...\" ) # In another request, record only messages with a level of WARNING and higher messages . set_level ( request , messages . WARNING ) messages . success ( request , \"Your profile was updated.\" ) # ignored messages . warning ( request , \"Your account is about to expire.\" ) # recorded # Set the messages level back to default. messages . set_level ( request , None ) Similarly, the current effective level can be retrieved with get_level : from django.contrib import messages current_level = messages . get_level ( request ) For more information on how the minimum recorded level functions, see Message levels above. Adding extra message tags ¶ For more direct control over message tags, you can optionally provide a string\ncontaining extra tags to any of the add methods: messages . add_message ( request , messages . INFO , \"Over 9000!\" , extra_tags = \"dragonball\" ) messages . error ( request , \"Email box full\" , extra_tags = \"email\" ) Extra tags are added before the default tag for that level and are space\nseparated. Failing silently when the message framework is disabled ¶ If you’re writing a reusable app (or other piece of code) and want to include\nmessaging functionality, but don’t want to require your users to enable it\nif they don’t want to, you may pass an additional keyword argument fail_silently=True to any of the add_message family of methods. For\nexample: messages . add_message ( request , messages . SUCCESS , \"Profile details updated.\" , fail_silently = True , ) messages . info ( request , \"Hello world.\" , fail_silently = True ) Note Setting fail_silently=True only hides the MessageFailure that would\notherwise occur when the messages framework disabled and one attempts to\nuse one of the add_message family of methods. It does not hide failures\nthat may occur for other reasons. Adding messages in class-based views ¶ class views. SuccessMessageMixin ¶ Adds a success message attribute to FormView based classes get_success_message ( cleaned_data ) ¶ cleaned_data is the cleaned data from the form which is used for\nstring formatting Example views.py : from django.contrib.messages.views import SuccessMessageMixin from django.views.generic.edit import CreateView from myapp.models import Author class AuthorCreateView ( SuccessMessageMixin , CreateView ): model = Author success_url = \"/success/\" success_message = \" %(name)s was created successfully\" The cleaned data from the form is available for string interpolation using\nthe %(field_name)s syntax. For ModelForms, if you need access to fields\nfrom the saved object override the get_success_message() method. Example views.py for ModelForms : from django.contrib.messages.views import SuccessMessageMixin from django.views.generic.edit import CreateView from myapp.models import ComplicatedModel class ComplicatedCreateView ( SuccessMessageMixin , CreateView ): model = ComplicatedModel success_url = \"/success/\" success_message = \" %(calculated_field)s was created successfully\" def get_success_message ( self , cleaned_data ): return self . success_message % dict ( cleaned_data , calculated_field = self . object . calculated_field , ) Expiration of messages ¶ The messages are marked to be cleared when the storage instance is iterated\n(and cleared when the response is processed). To avoid the messages being cleared, you can set the messages storage to False after iterating: storage = messages . get_messages ( request ) for message in storage : do_something_with ( message ) storage . used = False Behavior of parallel requests ¶ Due to the way cookies (and hence sessions) work, the behavior of any\nbackends that make use of cookies or sessions is undefined when the same\nclient makes multiple requests that set or get messages in parallel . For\nexample, if a client initiates a request that creates a message in one window\n(or tab) and then another that fetches any uniterated messages in another\nwindow, before the first window redirects, the message may appear in the\nsecond window instead of the first window where it may be expected. In short, when multiple simultaneous requests from the same client are\ninvolved, messages are not guaranteed to be delivered to the same window that\ncreated them nor, in some cases, at all. Note that this is typically not a\nproblem in most applications and will become a non-issue in HTML5, where each\nwindow/tab will have its own browsing context. Settings ¶ A few settings give you control over message\nbehavior: MESSAGE_LEVEL MESSAGE_STORAGE MESSAGE_TAGS For backends that use cookies, the settings for the cookie are taken from\nthe session cookie settings: SESSION_COOKIE_DOMAIN SESSION_COOKIE_SECURE SESSION_COOKIE_HTTPONLY Testing ¶ New in Django 5.0. This module offers a tailored test assertion method, for testing messages\nattached to an HttpResponse . To benefit from this assertion, add MessagesTestMixin to the class\nhierarchy: from django.contrib.messages.test import MessagesTestMixin from django.test import TestCase class MsgTestCase ( MessagesTestMixin , TestCase ): pass Then, inherit from the MsgTestCase in your tests. MessagesTestMixin. assertMessages ( response , expected_messages , ordered = True ) [source] ¶ Asserts that messages added to the response matches expected_messages . expected_messages is a list of Message objects. By default, the comparison is ordering dependent. You can disable this by\nsetting the ordered argument to False .", "keywords": ["dictionary", "django.contrib.messages.storage.base", "work", "variable", "error", "statements", "type", "line", "template", "httpresponse", "debug", "expiration", "support", "control", "types", "%", "setting", "templates", "get_level", "django.contrib", "-", "development", "templateresponsemixin", "style", "critical", "current_level", "settings", "false", "time", "successmessagemixin", "application", "count", "classes", "expected_messages", "add_message", "ul", "info", "middleware", "contrib.sessions", "_", "feedback", "method", "assertion", "default_message_levels", "tests", "important", "complicatedmodel", "testing", "django.contrib.messages", "behavior", "lowercase", "integers", "django.contrib.messages.storage.cookie", "values", "performance", "notifications", "cases", "cookiestorage", "css", "use", "architecture", "import", "messages", "bytes", "views", "cookies", "problem", "new", "information", "tab", "message.level", "manipulation", "#", "storage.base", "startproject", "test", "way", "section", "fields", "dragonball", "¶", "spaces", "default", "sessionstorage", "basestorage", "option", "message.tags", "piece", "inherit", "testcase", "stores", "web", "custom", "success_message", "methods", "client", "session_cookie_domain", "input", "messagestestmixin", "fallbackstorage", "do_something_with_the_message", "calculated_field", "informational", "model", "none", "message_storage", "sessionmiddleware", "profile", "access", "msgtestcase", "example", "django.contrib.sessions.middleware", "cookie-", "session", "users", "djangotemplates", "email", "formview", "value", "functions", "installed_apps", "get_success_message", "production", "calculated_field)s", "backend", "name)s", "self", "extra_tags", "deployment", "source", "pass", "case", "argument", "/success/", "do_something_with", "class", "applications", "request", "version", "redirects", "writing", "return", "constant", "modelforms", "html", "integer", "html5", "engine", "needs", "mapping", "get_messages", "jsonresponsemixin", "action", "attribute", "li", "string", "interpolation", "list", "details", "django.contrib.messages.context_processors.messages", "data", "view", "app", "myapp.models", "form", "assertmessages", "my_view", "name", "object", "cookie", "messagemiddleware", "priority", "user", "warning", "credits", "hash", "world", "attributes", "comparison", "hierarchy", "size", "space", "window", "python", "endfor", "success_url", "context_processors", "attempts", "instances", "get", "reasons", "account", "response", "issue", "flash", "store", "django.views.generic.edit", "sequence", "sql", "box", "sessions", "failures", "storage", "notification", "author", "path", "level", "names", "django", "days", "tag", "message", "failure", "display", "message_tags", "tags", "representation", "constants", "document", "syntax", "in", "framework", "messaging", "text", "backends", "module", "set_level", "authorcreateview", "functionality", "field_name)s", "requests", "cleaned_data", "requestcontext", "family", "context", "add", "django.contrib.messages.views", "messagefailure", "processor", "storage.cookie", "purpose", "instance", "=", "code", "complicatedcreateview", "createview", "parallel", "objects", "storage.fallback", "levels", "storage.session", "success", "level_tag", "session_cookie_httponly"], "type": "documentation"},
{"title": "Additional Information", "url": "https://docs.djangoproject.com/en/5.1/ref/contrib/humanize/", "content": "django.contrib.humanize ¶ A set of Django template filters useful for adding a “human touch” to data. To activate these filters, add 'django.contrib.humanize' to your INSTALLED_APPS setting. Once you’ve done that, use {% load humanize %} in a template, and you’ll have access to the following\nfilters. apnumber ¶ For numbers 1-9, returns the number spelled out. Otherwise, returns the\nnumber. This follows Associated Press style. Examples: 1 becomes one . 2 becomes two . 10 becomes 10 . You can pass in either an integer or a string representation of an integer. intcomma ¶ Converts an integer or float (or a string representation of either) to a string\ncontaining commas every three digits. Examples: 4500 becomes 4,500 . 4500.2 becomes 4,500.2 . 45000 becomes 45,000 . 450000 becomes 450,000 . 4500000 becomes 4,500,000 . Format localization will be respected if enabled,\ne.g. with the 'de' language: 45000 becomes '45.000' . 450000 becomes '450.000' . intword ¶ Converts a large integer (or a string representation of an integer) to a\nfriendly text representation. Translates 1.0 as a singular phrase and all\nother numeric values as plural, this may be incorrect for some languages. Works\nbest for numbers over 1 million. Examples: 1000000 becomes 1.0 million . 1200000 becomes 1.2 million . 1200000000 becomes 1.2 billion . -1200000000 becomes -1.2 billion . Values up to 10^100 (Googol) are supported. Format localization will be respected if enabled,\ne.g. with the 'de' language: 1000000 becomes '1,0 Million' . 1200000 becomes '1,2 Millionen' . 1200000000 becomes '1,2 Milliarden' . -1200000000 becomes '-1,2 Milliarden' . naturalday ¶ For dates that are the current day or within one day, return “today”,\n“tomorrow” or “yesterday”, as appropriate. Otherwise, format the date using\nthe passed in format string. Argument: Date formatting string as described in the date tag. Examples (when ‘today’ is 17 Feb 2007): 16 Feb 2007 becomes yesterday . 17 Feb 2007 becomes today . 18 Feb 2007 becomes tomorrow . Any other day is formatted according to given argument or the DATE_FORMAT setting if no argument is given. naturaltime ¶ For datetime values, returns a string representing how many seconds,\nminutes or hours ago it was – falling back to the timesince format if the value is more than a day old. In case the datetime value is in\nthe future the return value will automatically use an appropriate phrase. Examples (when ‘now’ is 17 Feb 2007 16:30:00): 17 Feb 2007 16:30:00 becomes now . 17 Feb 2007 16:29:31 becomes 29 seconds ago . 17 Feb 2007 16:29:00 becomes a minute ago . 17 Feb 2007 16:25:35 becomes 4 minutes ago . 17 Feb 2007 15:30:29 becomes 59 minutes ago . 17 Feb 2007 15:30:01 becomes 59 minutes ago . 17 Feb 2007 15:30:00 becomes an hour ago . 17 Feb 2007 13:31:29 becomes 2 hours ago . 16 Feb 2007 13:31:29 becomes 1 day, 2 hours ago . 16 Feb 2007 13:30:01 becomes 1 day, 2 hours ago . 16 Feb 2007 13:30:00 becomes 1 day, 3 hours ago . 17 Feb 2007 16:30:30 becomes 30 seconds from now . 17 Feb 2007 16:30:29 becomes 29 seconds from now . 17 Feb 2007 16:31:00 becomes a minute from now . 17 Feb 2007 16:34:35 becomes 4 minutes from now . 17 Feb 2007 17:30:29 becomes an hour from now . 17 Feb 2007 18:31:29 becomes 2 hours from now . 18 Feb 2007 16:31:29 becomes 1 day from now . 26 Feb 2007 18:31:29 becomes 1 week, 2 days from now . ordinal ¶ Converts an integer to its ordinal as a string. Examples: 1 becomes 1st . 2 becomes 2nd . 3 becomes 3rd . You can pass in either an integer or a string representation of an integer.\nNegative integers are returned unchanged.", "keywords": ["week", "case", "argument", "converts", "number", "ordinal", "de", "localization", "intcomma", "dates", "numbers", "languages", "apnumber", "millionen", "today", "yesterday", "load", "naturaltime", "django.contrib.humanize", "touch", "associated", "template", "^", "django", "integer", "phrase", "tag", "¶", "return", "filters", "days", "milliarden", "%", "examples", "representation", "future", "string", "set", "text", "date", "googol", "tomorrow", "style", "commas", "date_format", "minute", "data", "works", "press", "humanize", "day", "format", "hour", "naturalday", "access", "minutes", "-1200000000", "digits", "feb", "timesince", "-1.2", "hours", "intword", "integers", "language", "values", "formatting", "value", "installed_apps", "seconds"], "type": "documentation"},
{"title": "GeoDjango", "url": "https://docs.djangoproject.com/en/5.1/ref/contrib/gis/", "content": "GeoDjango ¶ GeoDjango intends to be a world-class geographic web framework. Its goal is to\nmake it as easy as possible to build GIS web applications and harness the power\nof spatially enabled data. GeoDjango Tutorial Introduction Setting Up Geographic Data Geographic Models Importing Spatial Data Spatial Queries Putting your data on the map GeoDjango Installation Overview Requirements Installation Troubleshooting Platform-specific instructions GeoDjango Model API Spatial Field Types Spatial Field Options Geometry Field Options GeoDjango Database API Spatial Backends Creating and Saving Models with Geometry Fields Creating and Saving Models with Raster Fields Spatial Lookups Distance Queries Compatibility Tables GeoDjango Forms API Field arguments Form field classes Form widgets GIS QuerySet API Reference Spatial Lookups Distance Lookups Geographic Database Functions Area AsGeoJSON AsGML AsKML AsSVG AsWKB AsWKT Azimuth BoundingCircle Centroid ClosestPoint Difference Distance Envelope ForcePolygonCW FromWKB FromWKT GeoHash GeometryDistance Intersection IsEmpty IsValid Length LineLocatePoint MakeValid MemSize NumGeometries NumPoints Perimeter PointOnSurface Reverse Scale SnapToGrid SymDifference Transform Translate Union Measurement Objects Example Supported units Measurement API GEOS API Background Tutorial Geometry Objects Geometry Collections Prepared Geometries Geometry Factories I/O Objects Settings Exceptions GDAL API Overview Vector Data Source Objects OGR Geometries Coordinate System Objects Raster Data Objects Settings Exceptions Geolocation with GeoIP2 Example API Reference Methods Settings Exceptions GeoDjango Utilities LayerMapping data import utility OGR Inspection GeoJSON Serializer GeoDjango Management Commands inspectdb ogrinspect GeoDjango’s admin site GISModelAdmin Geographic Feeds Example API Reference Geographic Sitemaps Example Reference Testing GeoDjango apps PostGIS GeoDjango tests Deploying GeoDjango", "keywords": ["azimuth", "instructions", "geolocation", "vector", "types", "intersection", "background", "sitemaps", "measurement", "settings", "management", "overview", "classes", "snaptogrid", "troubleshooting", "queryset", "numpoints", "tests", "testing", "system", "commands", "closestpoint", "site", "distance", "geojson", "area", "utility", "import", "perimeter", "difference", "boundingcircle", "symdifference", "compatibility", "fields", "geometrydistance", "¶", "union", "web", "inspectdb", "methods", "requirements", "pointonsurface", "geodjango", "tutorial", "model", "serializer", "creating", "example", "envelope", "aswkt", "units", "functions", "geoip2", "makevalid", "asgeojson", "memsize", "isvalid", "source", "layermapping", "class", "applications", "assvg", "introduction", "coordinate", "ogr", "platform", "tables", "factories", "gis", "numgeometries", "geometry", "data", "spatial", "form", "aswkb", "map", "lookups", "options", "raster", "gdal", "world", "queries", "admin", "fromwkt", "installation", "translate", "geometries", "exceptions", "api", "geohash", "saving", "linelocatepoint", "feeds", "scale", "framework", "geographic", "field", "backends", "arguments", "goal", "apps", "centroid", "database", "reverse", "transform", "collections", "inspection", "isempty", "forms", "reference", "length", "utilities", "models", "objects", "gismodeladmin", "fromwkb", "power", "forcepolygoncw"], "type": "documentation"},
{"title": "The flatpages app", "url": "https://docs.djangoproject.com/en/5.1/ref/contrib/flatpages/", "content": "The flatpages app ¶ Django comes with an optional “flatpages” application. It lets you store “flat”\nHTML content in a database and handles the management for you via Django’s\nadmin interface and a Python API. A flatpage is an object with a URL, title and content. Use it for one-off,\nspecial-case pages, such as “About” or “Privacy Policy” pages, that you want to\nstore in a database but for which you don’t want to develop a custom Django\napplication. A flatpage can use a custom template or a default, systemwide flatpage\ntemplate. It can be associated with one, or multiple, sites. The content field may optionally be left blank if you prefer to put your\ncontent in a custom template. Installation ¶ To install the flatpages app, follow these steps: Install the sites framework by adding 'django.contrib.sites' to your INSTALLED_APPS setting,\nif it’s not already in there. Also make sure you’ve correctly set SITE_ID to the ID of the\nsite the settings file represents. This will usually be 1 (i.e. SITE_ID = 1 , but if you’re using the sites framework to manage\nmultiple sites, it could be the ID of a different site. Add 'django.contrib.flatpages' to your INSTALLED_APPS setting. Then either: Add an entry in your URLconf. For example: urlpatterns = [ path ( \"pages/\" , include ( \"django.contrib.flatpages.urls\" )), ] or: Add 'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware' to your MIDDLEWARE setting. Run the command manage.py migrate . How it works ¶ manage.py migrate creates two tables in your database: django_flatpage and django_flatpage_sites . django_flatpage is a lookup table that maps\na URL to a title and bunch of text content. django_flatpage_sites associates a flatpage with a site. Using the URLconf ¶ There are several ways to include the flat pages in your URLconf. You can\ndedicate a particular path to flat pages: urlpatterns = [ path ( \"pages/\" , include ( \"django.contrib.flatpages.urls\" )), ] You can also set it up as a “catchall” pattern. In this case, it is important\nto place the pattern at the end of the other urlpatterns: from django.contrib.flatpages import views # Your other patterns here urlpatterns += [ re_path ( r \"^(?P<url>.*/)$\" , views . flatpage ), ] Warning If you set APPEND_SLASH to False , you must remove the slash\nin the catchall pattern or flatpages without a trailing slash will not be\nmatched. Another common setup is to use flat pages for a limited set of known pages and\nto hard code the urls, so you can reference them with the url template\ntag: from django.contrib.flatpages import views urlpatterns += [ path ( \"about-us/\" , views . flatpage , { \"url\" : \"/about-us/\" }, name = \"about\" ), path ( \"license/\" , views . flatpage , { \"url\" : \"/license/\" }, name = \"license\" ), ] Using the middleware ¶ The FlatpageFallbackMiddleware can do all of the work. class FlatpageFallbackMiddleware [source] ¶ Each time any Django application raises a 404 error, this middleware\nchecks the flatpages database for the requested URL as a last resort.\nSpecifically, it checks for a flatpage with the given URL with a site ID\nthat corresponds to the SITE_ID setting. If it finds a match, it follows this algorithm: If the flatpage has a custom template, it loads that template.\nOtherwise, it loads the template flatpages/default.html . It passes that template a single context variable, flatpage ,\nwhich is the flatpage object. It uses RequestContext in rendering the\ntemplate. The middleware will only add a trailing slash and redirect (by looking\nat the APPEND_SLASH setting) if the resulting URL refers to\na valid flatpage. Redirects are permanent (301 status code). If it doesn’t find a match, the request continues to be processed as usual. The middleware only gets activated for 404s – not for 500s or responses\nof any other status code. Flatpages will not apply view middleware Because the FlatpageFallbackMiddleware is applied only after\nURL resolution has failed and produced a 404, the response it\nreturns will not apply any view middleware methods. Only requests which are successfully routed to a view via\nnormal URL resolution apply view middleware. Note that the order of MIDDLEWARE matters. Generally, you can put FlatpageFallbackMiddleware at the\nend of the list. This means it will run first when processing the response, and\nensures that any other response-processing middleware see the real flatpage\nresponse rather than the 404. For more on middleware, read the middleware docs . Ensure that your 404 template works Note that the FlatpageFallbackMiddleware only steps in once another view has successfully produced a 404 response.\nIf another view or middleware class attempts to produce a 404 but ends up\nraising an exception instead, the response will become an HTTP 500\n(“Internal Server Error”) and the FlatpageFallbackMiddleware will not attempt to serve a flat page. How to add, change and delete flatpages ¶ Warning Permissions to add or edit flatpages should be restricted to trusted users.\nFlatpages are defined by raw HTML and are not sanitized by Django. As a\nconsequence, a malicious flatpage can lead to various security\nvulnerabilities, including permission escalation. Via the admin interface ¶ If you’ve activated the automatic Django admin interface, you should see a\n“Flatpages” section on the admin index page. Edit flatpages as you edit any\nother object in the system. The FlatPage model has an enable_comments field that isn’t used by contrib.flatpages , but that could be useful for your project or third-party\napps. It doesn’t appear in the admin interface, but you can add it by\nregistering a custom ModelAdmin for FlatPage : from django.contrib import admin from django.contrib.flatpages.admin import FlatPageAdmin from django.contrib.flatpages.models import FlatPage from django.utils.translation import gettext_lazy as _ # Define a new FlatPageAdmin class FlatPageAdmin ( FlatPageAdmin ): fieldsets = [ ( None , { \"fields\" : [ \"url\" , \"title\" , \"content\" , \"sites\" ]}), ( _ ( \"Advanced options\" ), { \"classes\" : [ \"collapse\" ], \"fields\" : [ \"enable_comments\" , \"registration_required\" , \"template_name\" , ], }, ), ] # Re-register FlatPageAdmin admin . site . unregister ( FlatPage ) admin . site . register ( FlatPage , FlatPageAdmin ) Via the Python API ¶ class FlatPage [source] ¶ Flatpages are represented by a standard Django model ,\nwhich lives in django/contrib/flatpages/models.py . You can access\nflatpage objects via the Django database API . Check for duplicate flatpage URLs. If you add or modify flatpages via your own code, you will likely want to\ncheck for duplicate flatpage URLs within the same site. The flatpage form\nused in the admin performs this validation check, and can be imported from django.contrib.flatpages.forms.FlatpageForm and used in your own\nviews. Flatpage templates ¶ By default, flatpages are rendered via the template flatpages/default.html , but you can override that for a\nparticular flatpage: in the admin, a collapsed fieldset titled\n“Advanced options” (clicking will expand it) contains a field for\nspecifying a template name. If you’re creating a flat page via the\nPython API you can set the template name as the field template_name on the FlatPage object. Creating the flatpages/default.html template is your responsibility;\nin your template directory, create a flatpages directory containing a\nfile default.html . Flatpage templates are passed a single context variable, flatpage ,\nwhich is the flatpage object. Here’s a sample flatpages/default.html template: <!DOCTYPE html> < html lang = \"en\" > < head > < title > {{ flatpage.title }} </ title > </ head > < body > {{ flatpage.content }} </ body > </ html > Since you’re already entering raw HTML into the admin page for a flatpage,\nboth flatpage.title and flatpage.content are marked as not requiring automatic HTML escaping in the\ntemplate. Getting a list of FlatPage objects in your templates ¶ The flatpages app provides a template tag that allows you to iterate\nover all of the available flatpages on the current site . Like all custom template tags, you’ll need to load its custom\ntag library before you can use\nit. After loading the library, you can retrieve all current flatpages\nvia the get_flatpages tag: {% load flatpages %} {% get_flatpages as flatpages %} < ul > {% for page in flatpages %} < li >< a href = \" {{ page.url }} \" > {{ page.title }} </ a ></ li > {% endfor %} </ ul > Displaying registration_required flatpages ¶ By default, the get_flatpages template tag will only show\nflatpages that are marked registration_required = False . If you\nwant to display registration-protected flatpages, you need to specify\nan authenticated user using a for clause. For example: {% get_flatpages for someuser as about_pages %} If you provide an anonymous user, get_flatpages will behave\nthe same as if you hadn’t provided a user – i.e., it will only show you\npublic flatpages. Limiting flatpages by base URL ¶ An optional argument, starts_with , can be applied to limit the\nreturned pages to those beginning with a particular base URL. This\nargument may be passed as a string, or as a variable to be resolved\nfrom the context. For example: {% get_flatpages '/about/' as about_pages %} {% get_flatpages about_prefix as about_pages %} {% get_flatpages '/about/' for someuser as about_pages %} Integrating with django.contrib.sitemaps ¶ class FlatPageSitemap [source] ¶ The sitemaps.FlatPageSitemap class looks at all\npublicly visible flatpages defined for the current SITE_ID (see the sites documentation ) and creates an entry in the sitemap. These entries\ninclude only the location attribute – not lastmod , changefreq or priority . Example ¶ Here’s an example of a URLconf using FlatPageSitemap : from django.contrib.flatpages.sitemaps import FlatPageSitemap from django.contrib.sitemaps.views import sitemap from django.urls import path urlpatterns = [ # ... # the sitemap path ( \"sitemap.xml\" , sitemap , { \"sitemaps\" : { \"flatpages\" : FlatPageSitemap }}, name = \"django.contrib.sitemaps.views.sitemap\" , ), ]", "keywords": ["via", "urlconf", "index", "/license/", "edit", "permissions", "match", "resolution", "interface", "work", "variable", "error", "template", "django.contrib.flatpages.middleware", "url", "flatpagesitemap", "%", "setting", "docs", "order", "templates", "documentation", "django.contrib", "django.contrib.sitemaps.views.sitemap", "sitemaps", "id", "page.title", "settings", "false", "works", "time", "unregister", "application", "exception", "management", "classes", "doctype", "ul", "middleware", "_", "party", "migrate", "table", "check", "system", "site", "responses", "enable_comments", "status", "import", "views", "slash", "registration", "ways", "urlpatterns", "sample", "permission", "project", "off", "#", "load", "django.utils.translation", "systemwide", "fields", "section", "django.contrib.flatpages.models", "¶", "default", "matters", "re_path", "fieldsets", "django.contrib.sitemaps.views", "custom", "django.contrib.flatpages", "methods", "gettext_lazy", "location", "django.contrib.sites", "fieldset", "entries", "model", "server", "page", "none", "urls", "change", "sites", "consequence", "base", "contrib", "default.html", "command", "example", "django_flatpage_sites", "flatpageadmin", "responsibility", "someuser", "users", "license", "installed_apps", "content", "escalation", "end", "source", "case", "django_flatpage", "argument", "class", "site_id", "bunch", "request", "redirects", "html", "tables", "clicking", "changefreq", "attribute", "li", "flatpagefallbackmiddleware", "string", "list", "href", "policy", "steps", "get_flatpages", "setup", "500s", "app", "view", "django.contrib.sitemaps", "form", "^(?p", "object", "name", "pattern", "resort", "options", "body", "user", "priority", "warning", "flatpages", "file", "library", "privacy", "admin", "algorithm", "lastmod", "returns", "installation", "patterns", "python", "endfor", "us/", "attempts", "response", "template_name", "flatpage.title", "api", "lookup", "url>.*/)$", "sitemap", "flatpage", "internal", "path", "django", "clause", "tag", "directory", "lang", "django.contrib.flatpages.sitemaps", "validation", "tags", "set", "text", "framework", "field", "apps", "vulnerabilities", "head", "requests", "database", "http", "requestcontext", "django.contrib.flatpages.forms", "flatpage.content", "context", "catchall", "django.urls", "404s", "starts_with", "security", "=", "code", "pages", "objects", "modeladmin", "re", "entry", "title", "contrib.flatpages"], "type": "documentation"},
{"title": "The contenttypes framework", "url": "https://docs.djangoproject.com/en/5.1/ref/contrib/contenttypes/", "content": "The contenttypes framework ¶ Django includes a contenttypes application that can\ntrack all of the models installed in your Django-powered project, providing a\nhigh-level, generic interface for working with your models. Overview ¶ At the heart of the contenttypes application is the ContentType model, which lives at django.contrib.contenttypes.models.ContentType . Instances of ContentType represent and store\ninformation about the models installed in your project, and new instances of ContentType are automatically\ncreated whenever new models are installed. Instances of ContentType have\nmethods for returning the model classes they represent and for querying objects\nfrom those models. ContentType also has a custom manager that adds methods for\nworking with ContentType and for\nobtaining instances of ContentType for a particular model. Relations between your models and ContentType can also be used to\nenable “generic” relationships between an instance of one of your\nmodels and instances of any model you have installed. Installing the contenttypes framework ¶ The contenttypes framework is included in the default INSTALLED_APPS list created by django-admin startproject ,\nbut if you’ve removed it or if you manually set up your INSTALLED_APPS list, you can enable it by adding 'django.contrib.contenttypes' to your INSTALLED_APPS setting. It’s generally a good idea to have the contenttypes framework\ninstalled; several of Django’s other bundled applications require it: The admin application uses it to log the history of each object\nadded or changed through the admin interface. Django’s authentication framework uses it\nto tie user permissions to specific models. The ContentType model ¶ class ContentType [source] ¶ Each instance of ContentType has two fields which, taken together, uniquely describe an installed\nmodel: app_label ¶ The name of the application the model is part of. This is taken from\nthe app_label attribute of the model, and includes only the last part of the application’s Python import path; django.contrib.contenttypes , for example, becomes an app_label of contenttypes . model ¶ The name of the model class. Additionally, the following property is available: name [source] ¶ The human-readable name of the content type. This is taken from the verbose_name attribute of the model. Let’s look at an example to see how this works. If you already have\nthe contenttypes application installed, and then add the sites application to your INSTALLED_APPS setting and run manage.py migrate to install it,\nthe model django.contrib.sites.models.Site will be installed into\nyour database. Along with it a new instance of ContentType will be\ncreated with the following values: app_label will be set to 'sites' (the last part of the Python\npath django.contrib.sites ). model will be set to 'site' . Methods on ContentType instances ¶ Each ContentType instance has\nmethods that allow you to get from a ContentType instance to the\nmodel it represents, or to retrieve objects from that model: ContentType. get_object_for_this_type ( using = None , ** kwargs ) [source] ¶ Takes a set of valid lookup arguments for the\nmodel the ContentType represents, and does a get() lookup on that model, returning the corresponding object. The using argument\ncan be used to specify a different database than the default one. Changed in Django 5.1: The using argument was added. ContentType. model_class () [source] ¶ Returns the model class represented by this ContentType instance. For example, we could look up the ContentType for the User model: >>> from django.contrib.contenttypes.models import ContentType >>> user_type = ContentType . objects . get ( app_label = \"auth\" , model = \"user\" ) >>> user_type <ContentType: user> And then use it to query for a particular User , or to get access\nto the User model class: >>> user_type . model_class () <class 'django.contrib.auth.models.User'> >>> user_type . get_object_for_this_type ( username = \"Guido\" ) <User: Guido> Together, get_object_for_this_type() and model_class() enable\ntwo extremely important use cases: Using these methods, you can write high-level generic code that\nperforms queries on any installed model – instead of importing and\nusing a single specific model class, you can pass an app_label and model into a ContentType lookup at\nruntime, and then work with the model class or retrieve objects from it. You can relate another model to ContentType as a way of\ntying instances of it to particular model classes, and use these methods\nto get access to those model classes. Several of Django’s bundled applications make use of the latter technique.\nFor example, the permissions system in\nDjango’s authentication framework uses a Permission model with a foreign\nkey to ContentType ; this lets Permission represent concepts like\n“can add blog entry” or “can delete news story”. The ContentTypeManager ¶ class ContentTypeManager [source] ¶ ContentType also has a custom\nmanager, ContentTypeManager ,\nwhich adds the following methods: clear_cache () [source] ¶ Clears an internal cache used by ContentType to keep track\nof models for which it has created ContentType instances. You\nprobably won’t ever need to call this method yourself; Django will call\nit automatically when it’s needed. get_for_id ( id ) [source] ¶ Lookup a ContentType by ID.\nSince this method uses the same shared cache as get_for_model() ,\nit’s preferred to use this method over the usual ContentType.objects.get(pk=id) get_for_model ( model , for_concrete_model = True ) [source] ¶ Takes either a model class or an instance of a model, and returns the ContentType instance\nrepresenting that model. for_concrete_model=False allows fetching\nthe ContentType of a proxy\nmodel. get_for_models ( * models , for_concrete_models = True ) [source] ¶ Takes a variadic number of model classes, and returns a dictionary\nmapping the model classes to the ContentType instances\nrepresenting them. for_concrete_models=False allows fetching the ContentType of proxy\nmodels. get_by_natural_key ( app_label , model ) [source] ¶ Returns the ContentType instance uniquely identified by the given application label and model\nname. The primary purpose of this method is to allow ContentType objects to be\nreferenced via a natural key during deserialization. The get_for_model() method is especially\nuseful when you know you need to work with a ContentType but don’t\nwant to go to the trouble of obtaining the model’s metadata to perform a manual\nlookup: >>> from django.contrib.auth.models import User >>> ContentType . objects . get_for_model ( User ) <ContentType: user> Generic relations ¶ Adding a foreign key from one of your own models to ContentType allows your model to\neffectively tie itself to another model class, as in the example of the Permission model above. But it’s possible\nto go one step further and use ContentType to enable truly\ngeneric (sometimes called “polymorphic”) relationships between models. For example, it could be used for a tagging system like so: from django.contrib.contenttypes.fields import GenericForeignKey from django.contrib.contenttypes.models import ContentType from django.db import models class TaggedItem ( models . Model ): tag = models . SlugField () content_type = models . ForeignKey ( ContentType , on_delete = models . CASCADE ) object_id = models . PositiveIntegerField () content_object = GenericForeignKey ( \"content_type\" , \"object_id\" ) def __str__ ( self ): return self . tag class Meta : indexes = [ models . Index ( fields = [ \"content_type\" , \"object_id\" ]), ] A normal ForeignKey can only “point\nto” one other model, which means that if the TaggedItem model used a ForeignKey it would have to\nchoose one and only one model to store tags for. The contenttypes\napplication provides a special field type ( GenericForeignKey ) which\nworks around this and allows the relationship to be with any\nmodel: class GenericForeignKey [source] ¶ There are three parts to setting up a GenericForeignKey : Give your model a ForeignKey to ContentType . The usual\nname for this field is “content_type”. Give your model a field that can store primary key values from the\nmodels you’ll be relating to. For most models, this means a PositiveIntegerField . The usual name\nfor this field is “object_id”. Give your model a GenericForeignKey , and\npass it the names of the two fields described above. If these fields\nare named “content_type” and “object_id”, you can omit this – those\nare the default field names GenericForeignKey will\nlook for. Unlike for the ForeignKey , a database index is not automatically created on the GenericForeignKey , so it’s\nrecommended that you use Meta.indexes to add your own\nmultiple column index. This behavior may change in the\nfuture. for_concrete_model ¶ If False , the field will be able to reference proxy models. Default\nis True . This mirrors the for_concrete_model argument to get_for_model() . Primary key type compatibility The “object_id” field doesn’t have to be the same type as the\nprimary key fields on the related models, but their primary key values\nmust be coercible to the same type as the “object_id” field by its get_db_prep_value() method. For example, if you want to allow generic relations to models with either IntegerField or CharField primary key fields, you\ncan use CharField for the\n“object_id” field on your model since integers can be coerced to\nstrings by get_db_prep_value() . For maximum flexibility you can use a TextField which doesn’t have a\nmaximum length defined, however this may incur significant performance\npenalties depending on your database backend. There is no one-size-fits-all solution for which field type is best. You\nshould evaluate the models you expect to be pointing to and determine\nwhich solution will be most effective for your use case. Serializing references to ContentType objects If you’re serializing data (for example, when generating fixtures ) from a model that implements\ngeneric relations, you should probably be using a natural key to uniquely\nidentify related ContentType objects. See natural keys and dumpdata --natural-foreign for more information. This will enable an API similar to the one used for a normal ForeignKey ;\neach TaggedItem will have a content_object field that returns the\nobject it’s related to, and you can also assign to that field or use it when\ncreating a TaggedItem : >>> from django.contrib.auth.models import User >>> guido = User . objects . get ( username = \"Guido\" ) >>> t = TaggedItem ( content_object = guido , tag = \"bdfl\" ) >>> t . save () >>> t . content_object <User: Guido> If the related object is deleted, the content_type and object_id fields\nremain set to their original values and the GenericForeignKey returns None : >>> guido . delete () >>> t . content_object # returns None Due to the way GenericForeignKey is implemented, you cannot use such fields directly with filters ( filter() and exclude() , for example) via the database API. Because a GenericForeignKey isn’t a\nnormal field object, these examples will not work: # This will fail >>> TaggedItem . objects . filter ( content_object = guido ) # This will also fail >>> TaggedItem . objects . get ( content_object = guido ) Likewise, GenericForeignKey s\ndoes not appear in ModelForm s. Reverse generic relations ¶ class GenericRelation [source] ¶ related_query_name ¶ The relation on the related object back to this object doesn’t exist by\ndefault. Setting related_query_name creates a relation from the\nrelated object back to this one. This allows querying and filtering\nfrom the related object. If you know which models you’ll be using most often, you can also add\na “reverse” generic relationship to enable an additional API. For example: from django.contrib.contenttypes.fields import GenericRelation from django.db import models class Bookmark ( models . Model ): url = models . URLField () tags = GenericRelation ( TaggedItem ) Bookmark instances will each have a tags attribute, which can\nbe used to retrieve their associated TaggedItems : >>> b = Bookmark ( url = \"https://www.djangoproject.com/\" ) >>> b . save () >>> t1 = TaggedItem ( content_object = b , tag = \"django\" ) >>> t1 . save () >>> t2 = TaggedItem ( content_object = b , tag = \"python\" ) >>> t2 . save () >>> b . tags . all () <QuerySet [<TaggedItem: django>, <TaggedItem: python>]> You can also use add() , create() , or set() to create\nrelationships: >>> t3 = TaggedItem ( tag = \"Web development\" ) >>> b . tags . add ( t3 , bulk = False ) >>> b . tags . create ( tag = \"Web framework\" ) <TaggedItem: Web framework> >>> b . tags . all () <QuerySet [<TaggedItem: django>, <TaggedItem: python>, <TaggedItem: Web development>, <TaggedItem: Web framework>]> >>> b . tags . set ([ t1 , t3 ]) >>> b . tags . all () <QuerySet [<TaggedItem: django>, <TaggedItem: Web development>]> The remove() call will bulk delete the specified model objects: >>> b . tags . remove ( t3 ) >>> b . tags . all () <QuerySet [<TaggedItem: django>]> >>> TaggedItem . objects . all () <QuerySet [<TaggedItem: django>]> The clear() method can be used to bulk delete all related objects for an\ninstance: >>> b . tags . clear () >>> b . tags . all () <QuerySet []> >>> TaggedItem . objects . all () <QuerySet []> Defining GenericRelation with related_query_name set allows querying from the related object: tags = GenericRelation ( TaggedItem , related_query_name = \"bookmark\" ) This enables filtering, ordering, and other query operations on Bookmark from TaggedItem : >>> # Get all tags belonging to bookmarks containing `django` in the url >>> TaggedItem . objects . filter ( bookmark__url__contains = \"django\" ) <QuerySet [<TaggedItem: django>, <TaggedItem: python>]> If you don’t add the related_query_name , you can do the same types of\nlookups manually: >>> bookmarks = Bookmark . objects . filter ( url__contains = \"django\" ) >>> bookmark_type = ContentType . objects . get_for_model ( Bookmark ) >>> TaggedItem . objects . filter ( content_type__pk = bookmark_type . id , object_id__in = bookmarks ) <QuerySet [<TaggedItem: django>, <TaggedItem: python>]> Just as GenericForeignKey accepts the names of the content-type and object-ID fields as\narguments, so too does GenericRelation ;\nif the model which has the generic foreign key is using non-default names\nfor those fields, you must pass the names of the fields when setting up a GenericRelation to it. For example, if the TaggedItem model\nreferred to above used fields named content_type_fk and object_primary_key to create its generic foreign key, then a GenericRelation back to it would need to be defined like so: tags = GenericRelation ( TaggedItem , content_type_field = \"content_type_fk\" , object_id_field = \"object_primary_key\" , ) Note also, that if you delete an object that has a GenericRelation , any objects\nwhich have a GenericForeignKey pointing at it will be deleted as well. In the example above, this means that\nif a Bookmark object were deleted, any TaggedItem objects pointing at\nit would be deleted at the same time. Unlike ForeignKey , GenericForeignKey does not accept\nan on_delete argument to customize this\nbehavior; if desired, you can avoid the cascade-deletion by not using GenericRelation , and alternate\nbehavior can be provided via the pre_delete signal. Generic relations and aggregation ¶ Django’s database aggregation API works with a GenericRelation . For example, you\ncan find out how many tags all the bookmarks have: >>> Bookmark . objects . aggregate ( Count ( \"tags\" )) {'tags__count': 3} Generic relation in forms ¶ The django.contrib.contenttypes.forms module provides: BaseGenericInlineFormSet A formset factory, generic_inlineformset_factory() , for use with GenericForeignKey . class BaseGenericInlineFormSet [source] ¶ generic_inlineformset_factory ( model , form = ModelForm , formset = BaseGenericInlineFormSet , ct_field = 'content_type' , fk_field = 'object_id' , fields = None , exclude = None , extra = 3 , can_order = False , can_delete = True , max_num = None , formfield_callback = None , validate_max = False , for_concrete_model = True , min_num = None , validate_min = False , absolute_max = None , can_delete_extra = True ) [source] ¶ Returns a GenericInlineFormSet using modelformset_factory() . You must provide ct_field and fk_field if they are different from\nthe defaults, content_type and object_id respectively. Other\nparameters are similar to those documented in modelformset_factory() and inlineformset_factory() . The for_concrete_model argument corresponds to the for_concrete_model argument on GenericForeignKey . Generic relations in admin ¶ The django.contrib.contenttypes.admin module provides GenericTabularInline and GenericStackedInline (subclasses of GenericInlineModelAdmin ) These classes and functions enable the use of generic relations in forms\nand the admin. See the model formset and admin documentation for more\ninformation. class GenericInlineModelAdmin [source] ¶ The GenericInlineModelAdmin class inherits all properties from an InlineModelAdmin class. However,\nit adds a couple of its own for working with the generic relation: ct_field ¶ The name of the ContentType foreign key\nfield on the model. Defaults to content_type . ct_fk_field ¶ The name of the integer field that represents the ID of the related\nobject. Defaults to object_id . class GenericTabularInline [source] ¶ class GenericStackedInline [source] ¶ Subclasses of GenericInlineModelAdmin with stacked and tabular\nlayouts, respectively. GenericPrefetch() ¶ New in Django 5.0. class GenericPrefetch ( lookup , querysets , to_attr = None ) [source] ¶ This lookup is similar to Prefetch() and it should only be used on GenericForeignKey . The querysets argument accepts a list of querysets,\neach for a different ContentType . This is useful for GenericForeignKey with non-homogeneous set of results. >>> from django.contrib.contenttypes.prefetch import GenericPrefetch >>> bookmark = Bookmark . objects . create ( url = \"https://www.djangoproject.com/\" ) >>> animal = Animal . objects . create ( name = \"lion\" , weight = 100 ) >>> TaggedItem . objects . create ( tag = \"great\" , content_object = bookmark ) >>> TaggedItem . objects . create ( tag = \"awesome\" , content_object = animal ) >>> prefetch = GenericPrefetch ( ... \"content_object\" , [ Bookmark . objects . all (), Animal . objects . only ( \"name\" )] ... ) >>> TaggedItem . objects . prefetch_related ( prefetch ) . all () <QuerySet [<TaggedItem: Great>, <TaggedItem: Awesome>]>", "keywords": ["index", "permissions", "column", "interface", "get_for_model", "urlfield", "track", "type", "retrieve", "url", "querysets", "cache", "lion", "get_object_for_this_type", "story", "types", "object_id__in", "clear_cache", "fk_field", "url__contains", "filter", "get_for_id", "development", "t2", "signal", "documentation", "inlineformset_factory", "username", "id", "false", "time", "application", "aggregation", "count", "overview", "classes", "cascade", "django.contrib.contenttypes.models", "basegenericinlineformset", "property", "method", "modelformset_factory", "migrate", "queryset", "delete", "related_query_name", "taggeditem", "behavior", "system", "metadata", "integers", "content_object", "values", "flexibility", "site", "performance", "d", "str", "https://www.djangoproject.com/", "cases", "solution", "query", "absolute_max", "use", "manager", "import", "genericinlineformset", "runtime", "content_type_field", "new", "subclasses", "generic", "information", "penalties", "dumpdata", "taggeditems", "project", "permission", "#", "generic_inlineformset_factory", "compatibility", "bookmark", "startproject", "fields", "idea", "authentication", "django.contrib.auth.models", "way", "animal", "¶", "default", "filters", "contenttype.objects.get(pk", "max_num", "custom", "web", "methods", "django.contrib.sites", "represent", "couple", "model", "heart", "none", "clear", "sites", "access", "results", "example", ">", "ordering", "n’t", "min_num", "content_type", "functions", "installed_apps", "content", "backend", "self", "label", "source", "genericstackedinline", "case", "argument", "class", "bookmarks", "number", "t", "applications", "for_concrete_model", "django.contrib.contenttypes.forms", "deletion", "blog", "for_concrete_models", "b", "save", "bookmark__url__contains", "app_label", "get_for_models", "positiveintegerfield", "can_delete", "generictabularinline", "integer", "mapping", "attribute", "examples", "meta", "future", "list", "trouble", "properties", "proxy", "concepts", "inlinemodeladmin", "data", "bdfl", "deserialization", "django.contrib.contenttypes.fields", "bulk", "form", "parts", "contenttype", "slugfield", "name", "object", "i", "t1", "lookups", "relationships", "genericinlinemodeladmin", "user", "model_class", "django.contrib.contenttypes.prefetch", "part", "queries", "user_type", "one", "remove", "admin", "size", "filtering", "references", "guido", "returns", "operations", "formfield_callback", "python", "charfield", "instances", "bookmark_type", "formset", "history", "meta.indexes", "contenttypemanager", "s", "kwargs", "fixtures", "keys", "indexes", "lookup", "api", "clears", "path", "level", "technique", "django", "names", "object_id_field", "tag", "object_id", "genericforeignkey", "tagging", "auth", "to_attr", "contenttypes", "tags", "s.", "*", "set", "pointing", "framework", "field", "module", "arguments", "textfield", "relations", "strings", "relation", "foreignkey", "great", "database", "integerfield", "relationship", "modelform", "prefetch", "add", "get_db_prep_value", "ct_field", "purpose", "forms", "instance", "get_by_natural_key", "length", "=", "models", "code", "factory", "ct_fk_field", "layouts", "objects", "key", "news", "genericrelation", "parameters", "defaults", "t3", "entry", "step", "weight", "call", "awesome", "verbose_name", "django.contrib.contenttypes", "genericprefetch"], "type": "documentation"},
{"title": "Additional Information", "url": "https://docs.djangoproject.com/en/5.1/ref/contrib/auth/", "content": "django.contrib.auth ¶ This document provides API reference material for the components of Django’s\nauthentication system. For more details on the usage of these components or\nhow to customize authentication and authorization see the authentication\ntopic guide . User model ¶ class models. User ¶ Fields ¶ class models. User User objects have the following\nfields: username ¶ Required. 150 characters or fewer. Usernames may contain alphanumeric, _ , @ , + , . and - characters. The max_length should be sufficient for many use cases. If you need\na longer length, please use a custom user model . If you use MySQL with the utf8mb4 encoding (recommended for proper Unicode support), specify at most max_length=191 because MySQL can only create unique indexes with\n191 characters in that case by default. first_name ¶ Optional ( blank=True ). 150\ncharacters or fewer. last_name ¶ Optional ( blank=True ). 150\ncharacters or fewer. email ¶ Optional ( blank=True ). Email\naddress. password ¶ Required. A hash of, and metadata about, the password. (Django doesn’t\nstore the raw password.) Raw passwords can be arbitrarily long and can\ncontain any character. The metadata in this field may mark the password\nas unusable. See the password documentation . groups ¶ Many-to-many relationship to Group user_permissions ¶ Many-to-many relationship to Permission is_staff ¶ Boolean. Allows this user to access the admin site. is_active ¶ Boolean. Marks this user account as active. We recommend that you set\nthis flag to False instead of deleting accounts. That way, if your\napplications have any foreign keys to users, the foreign keys won’t\nbreak. This doesn’t necessarily control whether or not the user can log in.\nAuthentication backends aren’t required to check for the is_active flag but the default backend\n( ModelBackend ) and the RemoteUserBackend do. You can\nuse AllowAllUsersModelBackend or AllowAllUsersRemoteUserBackend if you want to allow inactive users to login. In this case, you’ll also\nwant to customize the AuthenticationForm used by the LoginView as it rejects inactive\nusers. Be aware that the permission-checking methods such as has_perm() and the\nauthentication in the Django admin all return False for inactive\nusers. is_superuser ¶ Boolean. Treats this user as having all permissions without assigning\nany permission to it in particular. last_login ¶ A datetime of the user’s last login. date_joined ¶ The date/time when the account was created. Attributes ¶ class models. User is_authenticated ¶ Read-only attribute which is always True (as opposed to AnonymousUser.is_authenticated which is always False ). This is\na way to tell if the user has been authenticated. This does not imply\nany permissions and doesn’t check if the user is active or has a valid\nsession. Even though normally you will check this attribute on request.user to find out whether it has been populated by the AuthenticationMiddleware (representing the currently logged-in user), you should know this\nattribute is True for any User instance. is_anonymous ¶ Read-only attribute which is always False . This is a way of\ndifferentiating User and AnonymousUser objects. Generally, you should prefer using is_authenticated to this\nattribute. Methods ¶ class models. User get_username () ¶ Returns the username for the user. Since the User model can be\nswapped out, you should use this method instead of referencing the\nusername attribute directly. get_full_name () ¶ Returns the first_name plus\nthe last_name , with a space in\nbetween. get_short_name () ¶ Returns the first_name . set_password ( raw_password ) ¶ Sets the user’s password to the given raw string, taking care of the\npassword hashing. Doesn’t save the User object. When the raw_password is None , the password will be set to an\nunusable password, as if set_unusable_password() were used. check_password ( raw_password ) ¶ acheck_password ( raw_password ) ¶ Asynchronous version : acheck_password() Returns True if the given raw string is the correct password for\nthe user. (This takes care of the password hashing in making the\ncomparison.) Changed in Django 5.0: acheck_password() method was added. set_unusable_password () ¶ Marks the user as having no password set by updating the metadata in\nthe password field. This isn’t\nthe same as having a blank string for a password. check_password() for this user\nwill never return True . Doesn’t save the User object. You may need this if authentication for your application takes place\nagainst an existing external source such as an LDAP directory. Password reset restriction Users having an unusable password will not able to request a\npassword reset email via PasswordResetView . has_usable_password () ¶ Returns False if set_unusable_password() has\nbeen called for this user. get_user_permissions ( obj = None ) ¶ Returns a set of permission strings that the user has directly. If obj is passed in, only returns the user permissions for this\nspecific object. get_group_permissions ( obj = None ) ¶ Returns a set of permission strings that the user has, through their\ngroups. If obj is passed in, only returns the group permissions for\nthis specific object. get_all_permissions ( obj = None ) ¶ Returns a set of permission strings that the user has, both through\ngroup and user permissions. If obj is passed in, only returns the permissions for this\nspecific object. has_perm ( perm , obj = None ) ¶ Returns True if the user has the specified permission, where perm\nis in the format \"<app label>.<permission codename>\" . (see\ndocumentation on permissions ). If the user is\ninactive, this method will always return False . For an active\nsuperuser, this method will always return True . If obj is passed in, this method won’t check for a permission for\nthe model, but for this specific object. has_perms ( perm_list , obj = None ) ¶ Returns True if the user has each of the specified permissions,\nwhere each perm is in the format \"<app label>.<permission codename>\" . If the user is inactive,\nthis method will always return False . For an active superuser, this\nmethod will always return True . If obj is passed in, this method won’t check for permissions for\nthe model, but for the specific object. has_module_perms ( package_name ) ¶ Returns True if the user has any permissions in the given package\n(the Django app label). If the user is inactive, this method will\nalways return False . For an active superuser, this method will\nalways return True . email_user ( subject , message , from_email = None , ** kwargs ) ¶ Sends an email to the user. If from_email is None , Django uses\nthe DEFAULT_FROM_EMAIL . Any **kwargs are passed to the\nunderlying send_mail() call. Manager methods ¶ class models. UserManager ¶ The User model has a custom manager\nthat has the following helper methods (in addition to the methods provided\nby BaseUserManager ): create_user ( username , email = None , password = None , ** extra_fields ) ¶ Creates, saves and returns a User . The username and password are set as given. The\ndomain portion of email is\nautomatically converted to lowercase, and the returned User object will have is_active set to True . If no password is provided, set_unusable_password() will\nbe called. The extra_fields keyword arguments are passed through to the User ’s __init__ method to\nallow setting arbitrary fields on a custom user model . See Creating users for example usage. create_superuser ( username , email = None , password = None , ** extra_fields ) ¶ Same as create_user() , but sets is_staff and is_superuser to True . with_perm ( perm , is_active = True , include_superusers = True , backend = None , obj = None ) ¶ Returns users that have the given permission perm either in the \"<app label>.<permission codename>\" format or as a Permission instance. Returns an\nempty queryset if no users who have the perm found. If is_active is True (default), returns only active users, or\nif False , returns only inactive users. Use None to return all\nusers irrespective of active state. If include_superusers is True (default), the result will\ninclude superusers. If backend is passed in and it’s defined in AUTHENTICATION_BACKENDS , then this method will use it.\nOtherwise, it will use the backend in AUTHENTICATION_BACKENDS , if there is only one, or raise an\nexception. AnonymousUser object ¶ class models. AnonymousUser ¶ django.contrib.auth.models.AnonymousUser is a class that\nimplements the django.contrib.auth.models.User interface, with\nthese differences: id is always None . username is always the empty\nstring. get_username() always returns\nthe empty string. is_anonymous is True instead of False . is_authenticated is False instead of True . is_staff and is_superuser are always False . is_active is always False . groups and user_permissions are always\nempty. set_password() , check_password() , save() and delete() raise NotImplementedError . In practice, you probably won’t need to use AnonymousUser objects on your own, but\nthey’re used by web requests, as explained in the next section. Permission model ¶ class models. Permission ¶ Fields ¶ Permission objects have the following\nfields: class models. Permission name ¶ Required. 255 characters or fewer. Example: 'Can vote' . content_type ¶ Required. A reference to the django_content_type database table,\nwhich contains a record for each installed model. codename ¶ Required. 100 characters or fewer. Example: 'can_vote' . Methods ¶ Permission objects have the standard\ndata-access methods like any other Django model . Group model ¶ class models. Group ¶ Fields ¶ Group objects have the following fields: class models. Group name ¶ Required. 150 characters or fewer. Any characters are permitted.\nExample: 'Awesome Users' . permissions ¶ Many-to-many field to Permission : group . permissions . set ([ permission_list ]) group . permissions . add ( permission , permission , ... ) group . permissions . remove ( permission , permission , ... ) group . permissions . clear () Validators ¶ class validators. ASCIIUsernameValidator ¶ A field validator allowing only ASCII letters and numbers, in addition to @ , . , + , - , and _ . class validators. UnicodeUsernameValidator ¶ A field validator allowing Unicode characters, in addition to @ , . , + , - , and _ . The default validator for User.username . Login and logout signals ¶ The auth framework uses the following signals that\ncan be used for notification when a user logs in or out. user_logged_in ¶ Sent when a user logs in successfully. Arguments sent with this signal: sender The class of the user that just logged in. request The current HttpRequest instance. user The user instance that just logged in. user_logged_out ¶ Sent when the logout method is called. sender As above: the class of the user that just logged out or None if the user was not authenticated. request The current HttpRequest instance. user The user instance that just logged out or None if the\nuser was not authenticated. user_login_failed ¶ Sent when the user failed to login successfully sender The name of the module used for authentication. credentials A dictionary of keyword arguments containing the user credentials that were\npassed to authenticate() or your own custom\nauthentication backend. Credentials matching a set of ‘sensitive’ patterns,\n(including password) will not be sent in the clear as part of the signal. request The HttpRequest object, if one was provided to authenticate() . Authentication backends ¶ This section details the authentication backends that come with Django. For\ninformation on how to use them and how to write your own authentication\nbackends, see the Other authentication sources section of the User authentication guide . Available authentication backends ¶ The following backends are available in django.contrib.auth.backends : class BaseBackend [source] ¶ A base class that provides default implementations for all required\nmethods. By default, it will reject any user and provide no permissions. get_user_permissions ( user_obj , obj = None ) [source] ¶ Returns an empty set. get_group_permissions ( user_obj , obj = None ) [source] ¶ Returns an empty set. get_all_permissions ( user_obj , obj = None ) [source] ¶ Uses get_user_permissions() and get_group_permissions() to\nget the set of permission strings the user_obj has. has_perm ( user_obj , perm , obj = None ) [source] ¶ Uses get_all_permissions() to check if user_obj has the\npermission string perm . class ModelBackend [source] ¶ This is the default authentication backend used by Django.  It\nauthenticates using credentials consisting of a user identifier and\npassword.  For Django’s default user model, the user identifier is the\nusername, for custom user models it is the field specified by\nUSERNAME_FIELD (see Customizing Users and authentication ). It also handles the default permissions model as defined for User and PermissionsMixin . has_perm() , get_all_permissions() , get_user_permissions() ,\nand get_group_permissions() allow an object to be passed as a\nparameter for object-specific permissions, but this backend does not\nimplement them other than returning an empty set of permissions if obj is not None . with_perm() also allows an object to be passed as a parameter, but\nunlike others methods it returns an empty queryset if obj is not None . authenticate ( request , username = None , password = None , ** kwargs ) [source] ¶ Tries to authenticate username with password by calling User.check_password . If no username is provided, it tries to fetch a username from kwargs using the\nkey CustomUser.USERNAME_FIELD . Returns an\nauthenticated user or None . request is an HttpRequest and may be None if it wasn’t provided to authenticate() (which passes it on to the backend). get_user_permissions ( user_obj , obj = None ) [source] ¶ Returns the set of permission strings the user_obj has from their\nown user permissions. Returns an empty set if is_anonymous or is_active is False . get_group_permissions ( user_obj , obj = None ) [source] ¶ Returns the set of permission strings the user_obj has from the\npermissions of the groups they belong. Returns an empty set if is_anonymous or is_active is False . get_all_permissions ( user_obj , obj = None ) [source] ¶ Returns the set of permission strings the user_obj has, including both\nuser permissions and group permissions. Returns an empty set if is_anonymous or is_active is False . has_perm ( user_obj , perm , obj = None ) [source] ¶ Uses get_all_permissions() to check if user_obj has the\npermission string perm . Returns False if the user is not is_active . has_module_perms ( user_obj , app_label ) [source] ¶ Returns whether the user_obj has any permissions on the app app_label . user_can_authenticate () [source] ¶ Returns whether the user is allowed to authenticate. To match the\nbehavior of AuthenticationForm which prohibits inactive users from logging in ,\nthis method returns False for users with is_active=False . Custom user models that\ndon’t have an is_active field are allowed. with_perm ( perm , is_active = True , include_superusers = True , obj = None ) [source] ¶ Returns all active users who have the permission perm either in\nthe form of \"<app label>.<permission codename>\" or a Permission instance. Returns an\nempty queryset if no users who have the perm found. If is_active is True (default), returns only active users, or\nif False , returns only inactive users. Use None to return all\nusers irrespective of active state. If include_superusers is True (default), the result will\ninclude superusers. class AllowAllUsersModelBackend [source] ¶ Same as ModelBackend except that it doesn’t reject inactive users\nbecause user_can_authenticate() always returns True . When using this backend, you’ll likely want to customize the AuthenticationForm used by the LoginView by overriding the confirm_login_allowed() method as it rejects inactive users. class RemoteUserBackend [source] ¶ Use this backend to take advantage of external-to-Django-handled\nauthentication.  It authenticates using usernames passed in request.META['REMOTE_USER'] .  See\nthe Authenticating against REMOTE_USER documentation. If you need more control, you can create your own authentication backend\nthat inherits from this class and override these attributes or methods: create_unknown_user ¶ True or False . Determines whether or not a user object is\ncreated if not already in the database  Defaults to True . authenticate ( request , remote_user ) [source] ¶ The username passed as remote_user is considered trusted. This\nmethod returns the user object with the given username, creating a new\nuser object if create_unknown_user is True . Returns None if create_unknown_user is False and a User object with the given username is not found in\nthe database. request is an HttpRequest and may be None if it wasn’t provided to authenticate() (which passes it on to the backend). clean_username ( username ) [source] ¶ Performs any cleaning on the username (e.g. stripping LDAP DN\ninformation) prior to using it to get or create a user object. Returns\nthe cleaned username. configure_user ( request , user , created = True ) [source] ¶ Configures the user on each authentication attempt. This method is\ncalled immediately after fetching or creating the user being\nauthenticated, and can be used to perform custom setup actions, such as\nsetting the user’s groups based on attributes in an LDAP directory.\nReturns the user object. The setup can be performed either once when the user is created\n( created is True ) or on existing users ( created is False ) as a way of synchronizing attributes between the remote and\nthe local systems. request is an HttpRequest and may be None if it wasn’t provided to authenticate() (which passes it on to the backend). user_can_authenticate () ¶ Returns whether the user is allowed to authenticate. This method\nreturns False for users with is_active=False . Custom user models that\ndon’t have an is_active field are allowed. class AllowAllUsersRemoteUserBackend [source] ¶ Same as RemoteUserBackend except that it doesn’t reject inactive\nusers because user_can_authenticate always\nreturns True . Utility functions ¶ get_user ( request ) [source] ¶ aget_user ( request ) ¶ Asynchronous version : aget_user() Returns the user model instance associated with the given request ’s\nsession. It checks if the authentication backend stored in the session is present in AUTHENTICATION_BACKENDS . If so, it uses the backend’s get_user() method to retrieve the user model instance and then verifies\nthe session by calling the user model’s get_session_auth_hash() method. If the verification fails and SECRET_KEY_FALLBACKS are\nprovided, it verifies the session against each fallback key using get_session_auth_fallback_hash() . Returns an instance of AnonymousUser if the authentication backend stored in the session is no longer in AUTHENTICATION_BACKENDS , if a user isn’t returned by the\nbackend’s get_user() method, or if the session auth hash doesn’t\nvalidate. Changed in Django 5.0: aget_user() function was added.", "keywords": ["state", "dictionary", "permission_list", "permissions", "characters", "attempt", "interface", "material", "implementations", "mysql", "authenticationform", "restriction", "extra_fields", "differences", "django.contrib.auth.backends", "support", "accounts", "obj", "control", "fallback", "baseusermanager", "datetime", "systems", "basebackend", "clean_username", "notimplementederror", "anonymoususer", "documentation", "signal", "place", "subject", "validate", "get_short_name", "username", "utf8mb4", "set_password", "false", "portion", "time", "logout", "user_obj", "application", "exception", "awesome", "break", "_", "method", "customizing", "delete", "queryset", "table", "codename", "is_superuser", "passwordresetview", "behavior", "system", "metadata", "verification", "required", "site", "creates", "asciiusernamevalidator", "d", "boolean", "create_unknown_user", "cases", "use", "manager", "utility", "encoding", "get_username", "create_user", "record", "validator", "information", "get_user", "check_password", "permission", "groups", "raw_password", "topic", "login", "result", "modelbackend", "remoteuserbackend", "fields", "way", "authentication", "django.contrib.auth.models", "section", "confirm_login_allowed", "¶", "user_permissions", "default", "set_unusable_password", "get_user_permissions", "init", "custom", "web", "methods", "domain", "sender", "keyword", "usage", "marks", "credentials", "passwords", "model", "same", "max_length", "none", "character", "format", "package", "include_superusers", "base", "access", "letters", "example", "sent", "reset", "django_content_type", "session", "users", "has_perm", "guide", "n’t", "identifier", "permissionsmixin", "email", "content_type", "configures", "functions", "has_module_perms", "backend", "authorization", "label", "validators", "source", "user_can_authenticate", "treats", "case", "get_full_name", "class", "user_logged_out", "components", "flag", "applications", "numbers", "request", "version", "cleaning", "configure_user", "get_session_auth_fallback_hash", "user.username", "advantage", "app_label", "user.check_password", "attribute", "acheck_password", "function", "authenticationmiddleware", "care", "string", "remote_user", "details", "send_mail", "actions", "dn", "data", "setup", "app", "secret_key_fallbacks", "authenticating", "get_all_permissions", "form", "uses", "group", "object", "i", "name", "customuser", "user", "httprequest", "part", "hash", "read", "first_name", "attributes", "comparison", "admin", "from_email", "returns", "space", "patterns", "usermanager", "addition", "loginview", "optional", "allowallusersremoteuserbackend", "account", "password", "perm", "superuser", "kwargs", "keys", "indexes", "api", "unicodeusernamevalidator", "notification", "others", "signals", "django", "has_perms", "directory", "address", "message", "get_group_permissions", "auth", "user_login_failed", "parameter", "true", "document", "date", "set", "django.contrib.auth", "*", "request.user", "package_name", "field", "backends", "arguments", "practice", "framework", "user_logged_in", "module", "last_name", "strings", "requests", "database", "relationship", "unicode", "get_session_auth_hash", "reference", "instance", "length", "has_usable_password", "=", "models", "usernames", "hashing", "superusers", "objects", "key", "defaults", "with_perm", "call", "helper", "ldap"], "type": "documentation"},
{"title": "The Django admin site", "url": "https://docs.djangoproject.com/en/5.1/ref/contrib/admin/", "content": "The Django admin site ¶ One of the most powerful parts of Django is the automatic admin interface. It\nreads metadata from your models to provide a quick, model-centric interface\nwhere trusted users can manage content on your site. The admin’s recommended\nuse is limited to an organization’s internal management tool. It’s not intended\nfor building your entire front end around. The admin has many hooks for customization, but beware of trying to use those\nhooks exclusively. If you need to provide a more process-centric interface\nthat abstracts away the implementation details of database tables and fields,\nthen it’s probably time to write your own views. In this document we discuss how to activate, use, and customize Django’s admin\ninterface. Overview ¶ The admin is enabled in the default project template used by startproject . If you’re not using the default project template, here are the requirements: Add 'django.contrib.admin' and its dependencies - django.contrib.auth , django.contrib.contenttypes , django.contrib.messages , and django.contrib.sessions - to your INSTALLED_APPS setting. Configure a DjangoTemplates backend in your TEMPLATES setting with django.template.context_processors.request , django.contrib.auth.context_processors.auth , and django.contrib.messages.context_processors.messages in\nthe 'context_processors' option of OPTIONS . If you’ve customized the MIDDLEWARE setting, django.contrib.sessions.middleware.SessionMiddleware , django.contrib.auth.middleware.AuthenticationMiddleware , and django.contrib.messages.middleware.MessageMiddleware must be\nincluded. Hook the admin’s URLs into your URLconf . After you’ve taken these steps, you’ll be able to use the admin site by\nvisiting the URL you hooked it into ( /admin/ , by default). If you need to create a user to login with, use the createsuperuser command. By default, logging in to the admin requires that the user has the is_staff attribute set to True . Finally, determine which of your application’s models should be editable in the\nadmin interface. For each of those models, register them with the admin as\ndescribed in ModelAdmin . Other topics ¶ Admin actions ModelAdmin List Filters The Django admin documentation generator JavaScript customizations in the admin See also For information about serving the static files (images, JavaScript, and\nCSS) associated with the admin in production, see Serving files . Having problems?  Try FAQ: The admin . ModelAdmin objects ¶ class ModelAdmin [source] ¶ The ModelAdmin class is the representation of a model in the admin\ninterface. Usually, these are stored in a file named admin.py in your\napplication. Let’s take a look at an example of the ModelAdmin : from django.contrib import admin from myapp.models import Author class AuthorAdmin ( admin . ModelAdmin ): pass admin . site . register ( Author , AuthorAdmin ) Do you need a ModelAdmin object at all? In the preceding example, the ModelAdmin class doesn’t define any\ncustom values (yet). As a result, the default admin interface will be\nprovided. If you are happy with the default admin interface, you don’t\nneed to define a ModelAdmin object at all – you can register the\nmodel class without providing a ModelAdmin description. The\npreceding example could be simplified to: from django.contrib import admin from myapp.models import Author admin . site . register ( Author ) The register decorator ¶ register ( * models , site = django.contrib.admin.sites.site ) [source] ¶ There is also a decorator for registering your ModelAdmin classes: from django.contrib import admin from .models import Author @admin . register ( Author ) class AuthorAdmin ( admin . ModelAdmin ): pass It’s given one or more model classes to register with the ModelAdmin .\nIf you’re using a custom AdminSite , pass it using the site keyword\nargument: from django.contrib import admin from .models import Author , Editor , Reader from myproject.admin_site import custom_admin_site @admin . register ( Author , Reader , Editor , site = custom_admin_site ) class PersonAdmin ( admin . ModelAdmin ): pass You can’t use this decorator if you have to reference your model admin\nclass in its __init__() method, e.g. super(PersonAdmin, self).__init__(*args, **kwargs) . You can use super().__init__(*args, **kwargs) . Discovery of admin files ¶ When you put 'django.contrib.admin' in your INSTALLED_APPS setting, Django automatically looks for an admin module in each\napplication and imports it. class apps. AdminConfig ¶ This is the default AppConfig class for the admin.\nIt calls autodiscover() when Django starts. class apps. SimpleAdminConfig ¶ This class works like AdminConfig ,\nexcept it doesn’t call autodiscover() . default_site ¶ A dotted import path to the default admin site’s class or to a callable\nthat returns a site instance. Defaults to 'django.contrib.admin.sites.AdminSite' . See Overriding the default admin site for usage. autodiscover () [source] ¶ This function attempts to import an admin module in each installed\napplication. Such modules are expected to register models with the admin. Typically you won’t need to call this function directly as AdminConfig calls it when Django starts. If you are using a custom AdminSite , it is common to import all of the ModelAdmin subclasses into your code and register them to the custom AdminSite . In that case, in order to disable auto-discovery, you should\nput 'django.contrib.admin.apps.SimpleAdminConfig' instead of 'django.contrib.admin' in your INSTALLED_APPS setting. ModelAdmin options ¶ The ModelAdmin is very flexible. It has several options for dealing with\ncustomizing the interface. All options are defined on the ModelAdmin subclass: from django.contrib import admin class AuthorAdmin ( admin . ModelAdmin ): date_hierarchy = \"pub_date\" ModelAdmin. actions ¶ A list of actions to make available on the change list page. See Admin actions for details. ModelAdmin. actions_on_top ¶ ModelAdmin. actions_on_bottom ¶ Controls where on the page the actions bar appears. By default, the admin\nchangelist displays actions at the top of the page ( actions_on_top = True; actions_on_bottom = False ). ModelAdmin. actions_selection_counter ¶ Controls whether a selection counter is displayed next to the action dropdown.\nBy default, the admin changelist will display it\n( actions_selection_counter = True ). ModelAdmin. date_hierarchy ¶ Set date_hierarchy to the name of a DateField or DateTimeField in your model, and the change list page will include a date-based drilldown\nnavigation by that field. Example: date_hierarchy = \"pub_date\" You can also specify a field on a related model using the __ lookup,\nfor example: date_hierarchy = \"author__pub_date\" This will intelligently populate itself based on available data,\ne.g. if all the dates are in one month, it’ll show the day-level\ndrill-down only. Note date_hierarchy uses QuerySet.datetimes() internally. Please refer\nto its documentation for some caveats when time zone support is\nenabled ( USE_TZ = True ). ModelAdmin. empty_value_display ¶ This attribute overrides the default display value for record’s fields that\nare empty ( None , empty string, etc.). The default value is - (a\ndash). For example: from django.contrib import admin class AuthorAdmin ( admin . ModelAdmin ): empty_value_display = \"-empty-\" You can also override empty_value_display for all admin pages with AdminSite.empty_value_display , or for specific fields like this: from django.contrib import admin class AuthorAdmin ( admin . ModelAdmin ): list_display = [ \"name\" , \"title\" , \"view_birth_date\" ] @admin . display ( empty_value = \"???\" ) def view_birth_date ( self , obj ): return obj . birth_date ModelAdmin. exclude ¶ This attribute, if given, should be a list of field names to exclude from\nthe form. For example, let’s consider the following model: from django.db import models class Author ( models . Model ): name = models . CharField ( max_length = 100 ) title = models . CharField ( max_length = 3 ) birth_date = models . DateField ( blank = True , null = True ) If you want a form for the Author model that includes only the name and title fields, you would specify fields or exclude like\nthis: from django.contrib import admin class AuthorAdmin ( admin . ModelAdmin ): fields = [ \"name\" , \"title\" ] class AuthorAdmin ( admin . ModelAdmin ): exclude = [ \"birth_date\" ] Since the Author model only has three fields, name , title , and birth_date , the forms resulting from the above declarations will\ncontain exactly the same fields. ModelAdmin. fields ¶ Use the fields option to make simple layout changes in the forms on\nthe “add” and “change” pages such as showing only a subset of available\nfields, modifying their order, or grouping them into rows. For example, you\ncould define a simpler version of the admin form for the django.contrib.flatpages.models.FlatPage model as follows: class FlatPageAdmin ( admin . ModelAdmin ): fields = [ \"url\" , \"title\" , \"content\" ] In the above example, only the fields url , title and content will be displayed, sequentially, in the form. fields can contain\nvalues defined in ModelAdmin.readonly_fields to be displayed as\nread-only. For more complex layout needs, see the fieldsets option. The fields option accepts the same types of values as list_display , except that callables and __ lookups\nfor related fields aren’t accepted. Names of model and model admin methods\nwill only be used if they’re listed in readonly_fields . To display multiple fields on the same line, wrap those fields in their own\ntuple. In this example, the url and title fields will display on the\nsame line and the content field will be displayed below them on its\nown line: class FlatPageAdmin ( admin . ModelAdmin ): fields = [( \"url\" , \"title\" ), \"content\" ] Possible confusion with the ModelAdmin.fieldsets option This fields option should not be confused with the fields dictionary key that is within the fieldsets option,\nas described in the next section. If neither fields nor fieldsets options are present,\nDjango will default to displaying each field that isn’t an AutoField and\nhas editable=True , in a single fieldset, in the same order as the fields\nare defined in the model. ModelAdmin. fieldsets ¶ Set fieldsets to control the layout of admin “add” and “change” pages. fieldsets is a list of 2-tuples, in which each 2-tuple represents a <fieldset> on the admin form page. (A <fieldset> is a “section” of\nthe form.) The 2-tuples are in the format (name, field_options) , where name is a string representing the title of the fieldset and field_options is\na dictionary of information about the fieldset, including a list of fields\nto be displayed in it. A full example, taken from the django.contrib.flatpages.models.FlatPage model: from django.contrib import admin class FlatPageAdmin ( admin . ModelAdmin ): fieldsets = [ ( None , { \"fields\" : [ \"url\" , \"title\" , \"content\" , \"sites\" ], }, ), ( \"Advanced options\" , { \"classes\" : [ \"collapse\" ], \"fields\" : [ \"registration_required\" , \"template_name\" ], }, ), ] This results in an admin page that looks like: If neither fieldsets nor fields options are present,\nDjango will default to displaying each field that isn’t an AutoField and\nhas editable=True , in a single fieldset, in the same order as the fields\nare defined in the model. The field_options dictionary can have the following keys: fields A list or tuple of field names to display in this fieldset. This key is\nrequired. Example: { \"fields\" : [ \"first_name\" , \"last_name\" , \"address\" , \"city\" , \"state\" ], } As with the fields option, to display multiple\nfields on the same line, wrap those fields in their own tuple. In this\nexample, the first_name and last_name fields will display on\nthe same line: { \"fields\" : [( \"first_name\" , \"last_name\" ), \"address\" , \"city\" , \"state\" ], } fields can contain values defined in readonly_fields to be displayed as read-only. If you add the name of a callable to fields , the same rule applies\nas with the fields option: the callable must be\nlisted in readonly_fields . classes A list or tuple containing extra CSS classes to apply to the fieldset.\nThis can include any custom CSS class defined in the project, as well\nas any of the CSS classes provided by Django. Within the default admin\nsite CSS stylesheet, two particularly useful classes are defined: collapse and wide . Example: { \"classes\" : [ \"wide\" , \"collapse\" ], } Fieldsets with the wide style will be given extra horizontal\nspace in the admin interface.\nFieldsets with a name and the collapse style will be initially\ncollapsed, using an expandable widget with a toggle for switching\ntheir visibility. Changed in Django 5.1: fieldsets using the collapse class now use <details> and <summary> elements, provided they define a name . description A string of optional extra text to be displayed at the top of each\nfieldset, under the heading of the fieldset. Note that this value is not HTML-escaped when it’s displayed in\nthe admin interface. This lets you include HTML if you so desire.\nAlternatively you can use plain text and django.utils.html.escape() to escape any HTML special\ncharacters. TabularInline has limited\nsupport for fieldsets Using fieldsets with TabularInline has limited functionality. You can specify which fields will be\ndisplayed and their order within the TabularInline layout by\ndefining fields in the field_options dictionary. All other features are not supported. This includes the use of name to define a title for a group of fields. ModelAdmin. filter_horizontal ¶ By default, a ManyToManyField is displayed in\nthe admin site with a <select multiple> . However, multiple-select boxes\ncan be difficult to use when selecting many items. Adding a ManyToManyField to this list will instead use\na nifty unobtrusive JavaScript “filter” interface that allows searching\nwithin the options. The unselected and selected options appear in two boxes\nside by side. See filter_vertical to use a vertical\ninterface. ModelAdmin. filter_vertical ¶ Same as filter_horizontal , but uses a vertical display\nof the filter interface with the box of unselected options appearing above\nthe box of selected options. ModelAdmin. form ¶ By default a ModelForm is dynamically created for your model. It is\nused to create the form presented on both the add/change pages. You can\neasily provide your own ModelForm to override any default form behavior\non the add/change pages. Alternatively, you can customize the default\nform rather than specifying an entirely new one by using the ModelAdmin.get_form() method. For an example see the section Adding custom validation to the admin . Omit the Meta.model attribute If you define the Meta.model attribute on a ModelForm , you must also define the Meta.fields attribute (or the Meta.exclude attribute). However,\nsince the admin has its own way of defining fields, the Meta.fields attribute will be ignored. If the ModelForm is only going to be used for the admin, the easiest\nsolution is to omit the Meta.model attribute, since ModelAdmin will provide the correct model to use. Alternatively, you can set fields = [] in the Meta class to satisfy the validation on the ModelForm . ModelAdmin.exclude takes precedence If your ModelForm and ModelAdmin both define an exclude option then ModelAdmin takes precedence: from django import forms from django.contrib import admin from myapp.models import Person class PersonForm ( forms . ModelForm ): class Meta : model = Person exclude = [ \"name\" ] class PersonAdmin ( admin . ModelAdmin ): exclude = [ \"age\" ] form = PersonForm In the above example, the “age” field will be excluded but the “name”\nfield will be included in the generated form. ModelAdmin. formfield_overrides ¶ This provides a quick-and-dirty way to override some of the Field options for use in the admin. formfield_overrides is a dictionary mapping a field class to a dict of\narguments to pass to the field at construction time. Since that’s a bit abstract, let’s look at a concrete example. The most\ncommon use of formfield_overrides is to add a custom widget for a\ncertain type of field. So, imagine we’ve written a RichTextEditorWidget that we’d like to use for large text fields instead of the default <textarea> . Here’s how we’d do that: from django.contrib import admin from django.db import models # Import our custom widget and our model from where they're defined from myapp.models import MyModel from myapp.widgets import RichTextEditorWidget class MyModelAdmin ( admin . ModelAdmin ): formfield_overrides = { models . TextField : { \"widget\" : RichTextEditorWidget }, } Note that the key in the dictionary is the actual field class, not a\nstring. The value is another dictionary; these arguments will be passed to\nthe form field’s __init__() method. See The Forms API for\ndetails. Warning If you want to use a custom widget with a relation field (i.e. ForeignKey or ManyToManyField ), make sure you haven’t\nincluded that field’s name in raw_id_fields , radio_fields , or autocomplete_fields . formfield_overrides won’t let you change the widget on relation\nfields that have raw_id_fields , radio_fields , or autocomplete_fields set. That’s because raw_id_fields , radio_fields , and autocomplete_fields imply custom widgets of\ntheir own. ModelAdmin. inlines ¶ See InlineModelAdmin objects below as well as ModelAdmin.get_formsets_with_inlines() . ModelAdmin. list_display ¶ Set list_display to control which fields are displayed on the change\nlist page of the admin. Example: list_display = [ \"first_name\" , \"last_name\" ] If you don’t set list_display , the admin site will display a single\ncolumn that displays the __str__() representation of each object. There are five types of values that can be used in list_display . All\nbut the simplest may use the display() decorator, which is used to customize how the field is presented: The name of a model field. For example: class PersonAdmin ( admin . ModelAdmin ): list_display = [ \"first_name\" , \"last_name\" ] The name of a related field, using the __ notation. For example: class PersonAdmin ( admin . ModelAdmin ): list_display = [ \"city__name\" ] A callable that accepts one argument, the model instance. For example: @admin . display ( description = \"Name\" ) def upper_case_name ( obj ): return f \" { obj . first_name } { obj . last_name } \" . upper () class PersonAdmin ( admin . ModelAdmin ): list_display = [ upper_case_name ] A string representing a ModelAdmin method that accepts one argument,\nthe model instance. For example: class PersonAdmin ( admin . ModelAdmin ): list_display = [ \"upper_case_name\" ] @admin . display ( description = \"Name\" ) def upper_case_name ( self , obj ): return f \" { obj . first_name } { obj . last_name } \" . upper () A string representing a model attribute or method (without any required\narguments). For example: from django.contrib import admin from django.db import models class Person ( models . Model ): name = models . CharField ( max_length = 50 ) birthday = models . DateField () @admin . display ( description = \"Birth decade\" ) def decade_born_in ( self ): decade = self . birthday . year // 10 * 10 return f \" { decade } ’s\" class PersonAdmin ( admin . ModelAdmin ): list_display = [ \"name\" , \"decade_born_in\" ] Changed in Django 5.1: Support for using __ lookups was added, when targeting related\nfields. A few special cases to note about list_display : If the field is a ForeignKey , Django will display the __str__() of the related object. ManyToManyField fields aren’t supported, because that would\nentail executing a separate SQL statement for each row in the table.\nIf you want to do this nonetheless, give your model a custom method,\nand add that method’s name to list_display . (See below for more\non custom methods in list_display .) If the field is a BooleanField , Django will display a pretty “yes”,\n“no”, or “unknown” icon instead of True , False , or None . If the string given is a method of the model, ModelAdmin or a\ncallable, Django will HTML-escape the output by default. To escape\nuser input and allow your own unescaped tags, use format_html() . Here’s a full example model: from django.contrib import admin from django.db import models from django.utils.html import format_html class Person ( models . Model ): first_name = models . CharField ( max_length = 50 ) last_name = models . CharField ( max_length = 50 ) color_code = models . CharField ( max_length = 6 ) @admin . display def colored_name ( self ): return format_html ( '<span style=\"color: # {} ;\"> {} {} </span>' , self . color_code , self . first_name , self . last_name , ) class PersonAdmin ( admin . ModelAdmin ): list_display = [ \"first_name\" , \"last_name\" , \"colored_name\" ] As some examples have already demonstrated, when using a callable, a\nmodel method, or a ModelAdmin method, you can customize the column’s\ntitle by wrapping the callable with the display() decorator and passing the description argument. If the value of a field is None , an empty string, or an iterable\nwithout elements, Django will display - (a dash). You can override\nthis with AdminSite.empty_value_display : from django.contrib import admin admin . site . empty_value_display = \"(None)\" You can also use ModelAdmin.empty_value_display : class PersonAdmin ( admin . ModelAdmin ): empty_value_display = \"unknown\" Or on a field level: class PersonAdmin ( admin . ModelAdmin ): list_display = [ \"name\" , \"birth_date_view\" ] @admin . display ( empty_value = \"unknown\" ) def birth_date_view ( self , obj ): return obj . birth_date If the string given is a method of the model, ModelAdmin or a\ncallable that returns True , False , or None , Django will\ndisplay a pretty “yes”, “no”, or “unknown” icon if you wrap the method\nwith the display() decorator passing the boolean argument with the value set to True : from django.contrib import admin from django.db import models class Person ( models . Model ): first_name = models . CharField ( max_length = 50 ) birthday = models . DateField () @admin . display ( boolean = True ) def born_in_fifties ( self ): return 1950 <= self . birthday . year < 1960 class PersonAdmin ( admin . ModelAdmin ): list_display = [ \"name\" , \"born_in_fifties\" ] The __str__() method is just as valid in list_display as any\nother model method, so it’s perfectly OK to do this: list_display = [ \"__str__\" , \"some_other_field\" ] Usually, elements of list_display that aren’t actual database\nfields can’t be used in sorting (because Django does all the sorting\nat the database level). However, if an element of list_display represents a certain database\nfield, you can indicate this fact by using the display() decorator on the method, passing\nthe ordering argument: from django.contrib import admin from django.db import models from django.utils.html import format_html class Person ( models . Model ): first_name = models . CharField ( max_length = 50 ) color_code = models . CharField ( max_length = 6 ) @admin . display ( ordering = \"first_name\" ) def colored_first_name ( self ): return format_html ( '<span style=\"color: # {} ;\"> {} </span>' , self . color_code , self . first_name , ) class PersonAdmin ( admin . ModelAdmin ): list_display = [ \"first_name\" , \"colored_first_name\" ] The above will tell Django to order by the first_name field when\ntrying to sort by colored_first_name in the admin. To indicate descending order with the ordering argument you can use a\nhyphen prefix on the field name. Using the above example, this would look\nlike: @admin . display ( ordering = \"-first_name\" ) def colored_first_name ( self ): ... The ordering argument supports query lookups to sort by values on\nrelated models. This example includes an “author first name” column in\nthe list display and allows sorting it by first name: class Blog ( models . Model ): title = models . CharField ( max_length = 255 ) author = models . ForeignKey ( Person , on_delete = models . CASCADE ) class BlogAdmin ( admin . ModelAdmin ): list_display = [ \"title\" , \"author\" , \"author_first_name\" ] @admin . display ( ordering = \"author__first_name\" ) def author_first_name ( self , obj ): return obj . author . first_name Query expressions may be used with the ordering argument: from django.db.models import Value from django.db.models.functions import Concat class Person ( models . Model ): first_name = models . CharField ( max_length = 50 ) last_name = models . CharField ( max_length = 50 ) @admin . display ( ordering = Concat ( \"first_name\" , Value ( \" \" ), \"last_name\" )) def full_name ( self ): return self . first_name + \" \" + self . last_name Elements of list_display can also be properties class Person ( models . Model ): first_name = models . CharField ( max_length = 50 ) last_name = models . CharField ( max_length = 50 ) @property @admin . display ( ordering = \"last_name\" , description = \"Full name of the person\" , boolean = False , ) def full_name ( self ): return self . first_name + \" \" + self . last_name class PersonAdmin ( admin . ModelAdmin ): list_display = [ \"full_name\" ] Note that @property must be above @display . If you’re using the\nold way – setting the display-related attributes directly rather than\nusing the display() decorator –  be aware\nthat the property() function and not the @property decorator\nmust be used: def my_property ( self ): return self . first_name + \" \" + self . last_name my_property . short_description = \"Full name of the person\" my_property . admin_order_field = \"last_name\" my_property . boolean = False full_name = property ( my_property ) Changed in Django 5.0: Support for boolean attribute on properties was added. The field names in list_display will also appear as CSS classes in\nthe HTML output, in the form of column-<field_name> on each <th> element. This can be used to set column widths in a CSS file for example. Django will try to interpret every element of list_display in this\norder: A field of the model or from a related field. A callable. A string representing a ModelAdmin attribute. A string representing a model attribute. For example if you have first_name as a model field and\nas a ModelAdmin attribute, the model field will be used. ModelAdmin. list_display_links ¶ Use list_display_links to control if and which fields in list_display should be linked to the “change” page for an object. By default, the change list page will link the first column – the first\nfield specified in list_display – to the change page for each item.\nBut list_display_links lets you change this: Set it to None to get no links at all. Set it to a list or tuple of fields (in the same format as list_display ) whose columns you want converted to links. You can specify one or many fields. As long as the fields appear in list_display , Django doesn’t care how many (or how few) fields are\nlinked. The only requirement is that if you want to use list_display_links in this fashion, you must define list_display . In this example, the first_name and last_name fields will be\nlinked on the change list page: class PersonAdmin ( admin . ModelAdmin ): list_display = [ \"first_name\" , \"last_name\" , \"birthday\" ] list_display_links = [ \"first_name\" , \"last_name\" ] In this example, the change list page grid will have no links: class AuditEntryAdmin ( admin . ModelAdmin ): list_display = [ \"timestamp\" , \"message\" ] list_display_links = None ModelAdmin. list_editable ¶ Set list_editable to a list of field names on the model which will\nallow editing on the change list page. That is, fields listed in list_editable will be displayed as form widgets on the change list\npage, allowing users to edit and save multiple rows at once. Note list_editable interacts with a couple of other options in\nparticular ways; you should note the following rules: Any field in list_editable must also be in list_display .\nYou can’t edit a field that’s not displayed! The same field can’t be listed in both list_editable and list_display_links – a field can’t be both a form and\na link. You’ll get a validation error if either of these rules are broken. ModelAdmin. list_filter ¶ Set list_filter to activate filters in the right sidebar of the change\nlist page of the admin. At it’s simplest list_filter takes a list or tuple of field names to\nactivate filtering upon, but several more advanced options as available.\nSee ModelAdmin List Filters for the details. ModelAdmin. list_max_show_all ¶ Set list_max_show_all to control how many items can appear on a “Show\nall” admin change list page. The admin will display a “Show all” link on the\nchange list only if the total result count is less than or equal to this\nsetting. By default, this is set to 200 . ModelAdmin. list_per_page ¶ Set list_per_page to control how many items appear on each paginated\nadmin change list page. By default, this is set to 100 . ModelAdmin. list_select_related ¶ Set list_select_related to tell Django to use select_related() in retrieving\nthe list of objects on the admin change list page. This can save you a\nbunch of database queries. The value should be either a boolean, a list or a tuple. Default is False . When value is True , select_related() will always be called. When\nvalue is set to False , Django will look at list_display and call select_related() if any ForeignKey is present. If you need more fine-grained control, use a tuple (or list) as value for list_select_related . Empty tuple will prevent Django from calling select_related at all. Any other tuple will be passed directly to select_related as parameters. For example: class ArticleAdmin ( admin . ModelAdmin ): list_select_related = [ \"author\" , \"category\" ] will call select_related('author', 'category') . If you need to specify a dynamic value based on the request, you can\nimplement a get_list_select_related() method. Note ModelAdmin ignores this attribute when select_related() was already\ncalled on the changelist’s QuerySet . ModelAdmin. ordering ¶ Set ordering to specify how lists of objects should be ordered in the\nDjango admin views. This should be a list or tuple in the same format as a\nmodel’s ordering parameter. If this isn’t provided, the Django admin will use the model’s default\nordering. If you need to specify a dynamic order (for example depending on user or\nlanguage) you can implement a get_ordering() method. Performance considerations with ordering and sorting To ensure a deterministic ordering of results, the changelist adds pk to the ordering if it can’t find a single or unique together set\nof fields that provide total ordering. For example, if the default ordering is by a non-unique name field,\nthen the changelist is sorted by name and pk . This could\nperform poorly if you have a lot of rows and don’t have an index on name and pk . ModelAdmin. paginator ¶ The paginator class to be used for pagination. By default, django.core.paginator.Paginator is used. If the custom paginator\nclass doesn’t have the same constructor interface as django.core.paginator.Paginator , you will also need to\nprovide an implementation for ModelAdmin.get_paginator() . ModelAdmin. prepopulated_fields ¶ Set prepopulated_fields to a dictionary mapping field names to the\nfields it should prepopulate from: class ArticleAdmin ( admin . ModelAdmin ): prepopulated_fields = { \"slug\" : [ \"title\" ]} When set, the given fields will use a bit of JavaScript to populate from\nthe fields assigned. The main use for this functionality is to\nautomatically generate the value for SlugField fields from one or more\nother fields. The generated value is produced by concatenating the values\nof the source fields, and then by transforming that result into a valid\nslug (e.g. substituting dashes for spaces and lowercasing ASCII letters). Prepopulated fields aren’t modified by JavaScript after a value has been\nsaved. It’s usually undesired that slugs change (which would cause an\nobject’s URL to change if the slug is used in it). prepopulated_fields doesn’t accept DateTimeField , ForeignKey , OneToOneField , and ManyToManyField fields. ModelAdmin. preserve_filters ¶ By default, applied filters are preserved on the list view after creating,\nediting, or deleting an object. You can have filters cleared by setting\nthis attribute to False . ModelAdmin. show_facets ¶ New in Django 5.0. Controls whether facet counts are displayed for filters in the admin\nchangelist. Defaults to ShowFacets.ALLOW . When displayed, facet counts update in line with currently applied filters. class ShowFacets ¶ New in Django 5.0. Enum of allowed values for ModelAdmin.show_facets . ALWAYS ¶ Always show facet counts. ALLOW ¶ Show facet counts when the _facets query string parameter is\nprovided. NEVER ¶ Never show facet counts. Set show_facets to the desired ShowFacets value. For example,\nto always show facet counts without needing to provide the query\nparameter: from django.contrib import admin class MyModelAdmin ( admin . ModelAdmin ): ... # Have facets always shown for this model admin. show_facets = admin . ShowFacets . ALWAYS Performance considerations with facets Enabling facet filters will increase the number of queries on the admin\nchangelist page in line with the number of filters. These queries may\ncause performance problems, especially for large datasets. In these\ncases it may be appropriate to set show_facets to ShowFacets.NEVER to disable faceting entirely. ModelAdmin. radio_fields ¶ By default, Django’s admin uses a select-box interface (<select>) for\nfields that are ForeignKey or have choices set. If a field is\npresent in radio_fields , Django will use a radio-button interface\ninstead. Assuming group is a ForeignKey on the Person model: class PersonAdmin ( admin . ModelAdmin ): radio_fields = { \"group\" : admin . VERTICAL } You have the choice of using HORIZONTAL or VERTICAL from the django.contrib.admin module. Don’t include a field in radio_fields unless it’s a ForeignKey or has choices set. ModelAdmin. autocomplete_fields ¶ autocomplete_fields is a list of ForeignKey and/or ManyToManyField fields you would like to change to Select2 autocomplete inputs. By default, the admin uses a select-box interface ( <select> ) for\nthose fields. Sometimes you don’t want to incur the overhead of selecting\nall the related instances to display in the dropdown. The Select2 input looks similar to the default input but comes with a\nsearch feature that loads the options asynchronously. This is faster and\nmore user-friendly if the related model has many instances. You must define search_fields on the related object’s ModelAdmin because the autocomplete search uses it. To avoid unauthorized data disclosure, users must have the view or change permission to the related object in order to use autocomplete. Ordering and pagination of the results are controlled by the related ModelAdmin ’s get_ordering() and get_paginator() methods. In the following example, ChoiceAdmin has an autocomplete field for the ForeignKey to the Question . The results are filtered by the question_text field and ordered by the date_created field: class QuestionAdmin ( admin . ModelAdmin ): ordering = [ \"date_created\" ] search_fields = [ \"question_text\" ] class ChoiceAdmin ( admin . ModelAdmin ): autocomplete_fields = [ \"question\" ] Performance considerations for large datasets Ordering using ModelAdmin.ordering may cause performance\nproblems as sorting on a large queryset will be slow. Also, if your search fields include fields that aren’t indexed by the\ndatabase, you might encounter poor performance on extremely large\ntables. For those cases, it’s a good idea to write your own ModelAdmin.get_search_results() implementation using a\nfull-text indexed search. You may also want to change the Paginator on very large tables\nas the default paginator always performs a count() query.\nFor example, you could override the default implementation of the Paginator.count property. ModelAdmin. raw_id_fields ¶ By default, Django’s admin uses a select-box interface (<select>) for\nfields that are ForeignKey . Sometimes you don’t want to incur the\noverhead of having to select all the related instances to display in the\ndrop-down. raw_id_fields is a list of fields you would like to change\ninto an Input widget for either a ForeignKey or ManyToManyField : class ArticleAdmin ( admin . ModelAdmin ): raw_id_fields = [ \"newspaper\" ] The raw_id_fields Input widget should contain a primary key if the\nfield is a ForeignKey or a comma separated list of values if the field\nis a ManyToManyField .  The raw_id_fields widget shows a magnifying\nglass button next to the field which allows users to search for and select\na value: ModelAdmin. readonly_fields ¶ By default the admin shows all fields as editable. Any fields in this\noption (which should be a list or tuple ) will display its data\nas-is and non-editable; they are also excluded from the ModelForm used for creating and editing. Note that\nwhen specifying ModelAdmin.fields or ModelAdmin.fieldsets the read-only fields must be present to be shown (they are ignored\notherwise). If readonly_fields is used without defining explicit ordering through ModelAdmin.fields or ModelAdmin.fieldsets they will be\nadded last after all editable fields. A read-only field can not only display data from a model’s field, it can\nalso display the output of a model’s method or a method of the ModelAdmin class itself. This is very similar to the way ModelAdmin.list_display behaves. This provides a way to use the\nadmin interface to provide feedback on the status of the objects being\nedited, for example: from django.contrib import admin from django.utils.html import format_html_join from django.utils.safestring import mark_safe class PersonAdmin ( admin . ModelAdmin ): readonly_fields = [ \"address_report\" ] # description functions like a model field's verbose_name @admin . display ( description = \"Address\" ) def address_report ( self , instance ): # assuming get_full_address() returns a list of strings # for each line of the address and you want to separate each # line by a linebreak return format_html_join ( mark_safe ( \"<br>\" ), \" {} \" , (( line ,) for line in instance . get_full_address ()), ) or mark_safe ( \"<span class='errors'>I can't determine this address.</span>\" ) ModelAdmin. save_as ¶ Set save_as to enable a “save as new” feature on admin change forms. Normally, objects have three save options: “Save”, “Save and continue\nediting”, and “Save and add another”. If save_as is True , “Save\nand add another” will be replaced by a “Save as new” button that creates a\nnew object (with a new ID) rather than updating the existing object. By default, save_as is set to False . ModelAdmin. save_as_continue ¶ When save_as=True , the default redirect after saving the\nnew object is to the change view for that object. If you set save_as_continue=False , the redirect will be to the changelist view. By default, save_as_continue is set to True . ModelAdmin. save_on_top ¶ Set save_on_top to add save buttons across the top of your admin change\nforms. Normally, the save buttons appear only at the bottom of the forms. If you\nset save_on_top , the buttons will appear both on the top and the\nbottom. By default, save_on_top is set to False . ModelAdmin. search_fields ¶ Set search_fields to enable a search box on the admin change list page.\nThis should be set to a list of field names that will be searched whenever\nsomebody submits a search query in that text box. These fields should be some kind of text field, such as CharField or TextField . You can also perform a related lookup on a ForeignKey or ManyToManyField with the lookup API “follow” notation: search_fields = [ \"foreign_key__related_fieldname\" ] For example, if you have a blog entry with an author, the following\ndefinition would enable searching blog entries by the email address of the\nauthor: search_fields = [ \"user__email\" ] When somebody does a search in the admin search box, Django splits the\nsearch query into words and returns all objects that contain each of the\nwords, case-insensitive (using the icontains lookup), where each\nword must be in at least one of search_fields . For example, if search_fields is set to ['first_name', 'last_name'] and a user\nsearches for john lennon , Django will do the equivalent of this SQL WHERE clause: WHERE ( first_name ILIKE '%john%' OR last_name ILIKE '%john%' ) AND ( first_name ILIKE '%lennon%' OR last_name ILIKE '%lennon%' ) The search query can contain quoted phrases with spaces. For example, if a\nuser searches for \"john winston\" or 'john winston' , Django will do\nthe equivalent of this SQL WHERE clause: WHERE ( first_name ILIKE '%john winston%' OR last_name ILIKE '%john winston%' ) If you don’t want to use icontains as the lookup, you can use any\nlookup by appending it the field. For example, you could use exact by setting search_fields to ['first_name__exact'] . Some (older) shortcuts for specifying a field lookup are also available.\nYou can prefix a field in search_fields with the following characters\nand it’s equivalent to adding __<lookup> to the field: Prefix Lookup ^ istartswith = iexact @ search None icontains If you need to customize search you can use ModelAdmin.get_search_results() to provide additional or alternate\nsearch behavior. ModelAdmin. search_help_text ¶ Set search_help_text to specify a descriptive text for the search box\nwhich will be displayed below it. ModelAdmin. show_full_result_count ¶ Set show_full_result_count to control whether the full count of objects\nshould be displayed on a filtered admin page (e.g. 99 results (103 total) ).\nIf this option is set to False , a text like 99 results (Show all) is displayed instead. The default of show_full_result_count=True generates a query to perform\na full count on the table which can be expensive if the table contains a\nlarge number of rows. ModelAdmin. sortable_by ¶ By default, the change list page allows sorting by all model fields (and\ncallables that use the ordering argument to the display() decorator or have the admin_order_field attribute) specified in list_display . If you want to disable sorting for some columns, set sortable_by to\na collection (e.g. list , tuple , or set ) of the subset of list_display that you want to be sortable. An empty collection\ndisables sorting for all columns. If you need to specify this list dynamically, implement a get_sortable_by() method instead. ModelAdmin. view_on_site ¶ Set view_on_site to control whether or not to display the “View on site” link.\nThis link should bring you to a URL where you can display the saved object. This value can be either a boolean flag or a callable. If True (the\ndefault), the object’s get_absolute_url() method will be used to generate the url. If your model has a get_absolute_url() method\nbut you don’t want the “View on site” button to appear, you only need to set view_on_site to False : from django.contrib import admin class PersonAdmin ( admin . ModelAdmin ): view_on_site = False In case it is a callable, it accepts the model instance as a parameter.\nFor example: from django.contrib import admin from django.urls import reverse class PersonAdmin ( admin . ModelAdmin ): def view_on_site ( self , obj ): url = reverse ( \"person-detail\" , kwargs = { \"slug\" : obj . slug }) return \"https://example.com\" + url Custom template options ¶ The Overriding admin templates section describes how to override or extend\nthe default admin templates.  Use the following options to override the default\ntemplates used by the ModelAdmin views: ModelAdmin. add_form_template ¶ Path to a custom template, used by add_view() . ModelAdmin. change_form_template ¶ Path to a custom template, used by change_view() . ModelAdmin. change_list_template ¶ Path to a custom template, used by changelist_view() . ModelAdmin. delete_confirmation_template ¶ Path to a custom template, used by delete_view() for displaying a\nconfirmation page when deleting one or more objects. ModelAdmin. delete_selected_confirmation_template ¶ Path to a custom template, used by the delete_selected action method\nfor displaying a confirmation page when deleting one or more objects. See\nthe actions documentation . ModelAdmin. object_history_template ¶ Path to a custom template, used by history_view() . ModelAdmin. popup_response_template ¶ Path to a custom template, used by response_add() , response_change() , and response_delete() . ModelAdmin methods ¶ Warning When overriding ModelAdmin.save_model() and ModelAdmin.delete_model() , your code must save/delete the\nobject. They aren’t meant for veto purposes, rather they allow you to\nperform extra operations. ModelAdmin. save_model ( request , obj , form , change ) [source] ¶ The save_model method is given the HttpRequest , a model instance,\na ModelForm instance, and a boolean value based on whether it is adding\nor changing the object. Overriding this method allows doing pre- or\npost-save operations. Call super().save_model() to save the object\nusing Model.save() . For example to attach request.user to the object prior to saving: from django.contrib import admin class ArticleAdmin ( admin . ModelAdmin ): def save_model ( self , request , obj , form , change ): obj . user = request . user super () . save_model ( request , obj , form , change ) ModelAdmin. delete_model ( request , obj ) [source] ¶ The delete_model method is given the HttpRequest and a model\ninstance. Overriding this method allows doing pre- or post-delete\noperations. Call super().delete_model() to delete the object using Model.delete() . ModelAdmin. delete_queryset ( request , queryset ) [source] ¶ The delete_queryset() method is given the HttpRequest and a QuerySet of objects to be deleted. Override this method to customize\nthe deletion process for the “delete selected objects” action . ModelAdmin. save_formset ( request , form , formset , change ) [source] ¶ The save_formset method is given the HttpRequest , the parent ModelForm instance and a boolean value based on whether it is adding or\nchanging the parent object. For example, to attach request.user to each changed formset\nmodel instance: class ArticleAdmin ( admin . ModelAdmin ): def save_formset ( self , request , form , formset , change ): instances = formset . save ( commit = False ) for obj in formset . deleted_objects : obj . delete () for instance in instances : instance . user = request . user instance . save () formset . save_m2m () See also Saving objects in the formset . Warning All hooks that return a ModelAdmin property return the property itself\nrather than a copy of its value. Dynamically modifying the value can lead\nto surprising results. Let’s take ModelAdmin.get_readonly_fields() as an example: class PersonAdmin ( admin . ModelAdmin ): readonly_fields = [ \"name\" ] def get_readonly_fields ( self , request , obj = None ): readonly = super () . get_readonly_fields ( request , obj ) if not request . user . is_superuser : readonly . append ( \"age\" ) # Edits the class attribute. return readonly This results in readonly_fields becoming [\"name\", \"age\", \"age\", ...] , even for a superuser, as \"age\" is added\neach time non-superuser visits the page. ModelAdmin. get_ordering ( request ) ¶ The get_ordering method takes a request as parameter and\nis expected to return a list or tuple for ordering similar\nto the ordering attribute. For example: class PersonAdmin ( admin . ModelAdmin ): def get_ordering ( self , request ): if request . user . is_superuser : return [ \"name\" , \"rank\" ] else : return [ \"name\" ] ModelAdmin. get_search_results ( request , queryset , search_term ) [source] ¶ The get_search_results method modifies the list of objects displayed\ninto those that match the provided search term. It accepts the request, a\nqueryset that applies the current filters, and the user-provided search term.\nIt returns a tuple containing a queryset modified to implement the search, and\na boolean indicating if the results may contain duplicates. The default implementation searches the fields named in ModelAdmin.search_fields . This method may be overridden with your own custom search method. For\nexample, you might wish to search by an integer field, or use an external\ntool such as Solr or Haystack . You must establish if the queryset\nchanges implemented by your search method may introduce duplicates into the\nresults, and return True in the second element of the return value. For example, to search by name and age , you could use: class PersonAdmin ( admin . ModelAdmin ): list_display = [ \"name\" , \"age\" ] search_fields = [ \"name\" ] def get_search_results ( self , request , queryset , search_term ): queryset , may_have_duplicates = super () . get_search_results ( request , queryset , search_term , ) try : search_term_as_int = int ( search_term ) except ValueError : pass else : queryset |= self . model . objects . filter ( age = search_term_as_int ) return queryset , may_have_duplicates This implementation is more efficient than search_fields = ('name', '=age') which results in a string comparison for the numeric\nfield, for example ... OR UPPER(\"polls_choice\".\"votes\"::text) = UPPER('4') on PostgreSQL. ModelAdmin. save_related ( request , form , formsets , change ) [source] ¶ The save_related method is given the HttpRequest , the parent ModelForm instance, the list of inline formsets and a boolean value\nbased on whether the parent is being added or changed. Here you can do any\npre- or post-save operations for objects related to the parent. Note\nthat at this point the parent object and its form have already been saved. ModelAdmin. get_autocomplete_fields ( request ) ¶ The get_autocomplete_fields() method is given the HttpRequest and is\nexpected to return a list or tuple of field names that will be\ndisplayed with an autocomplete widget as described above in the ModelAdmin.autocomplete_fields section. ModelAdmin. get_readonly_fields ( request , obj = None ) ¶ The get_readonly_fields method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return\na list or tuple of field names that will be displayed as read-only,\nas described above in the ModelAdmin.readonly_fields section. ModelAdmin. get_prepopulated_fields ( request , obj = None ) ¶ The get_prepopulated_fields method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return\na dictionary , as described above in the ModelAdmin.prepopulated_fields section. ModelAdmin. get_list_display ( request ) [source] ¶ The get_list_display method is given the HttpRequest and is\nexpected to return a list or tuple of field names that will be\ndisplayed on the changelist view as described above in the ModelAdmin.list_display section. ModelAdmin. get_list_display_links ( request , list_display ) [source] ¶ The get_list_display_links method is given the HttpRequest and\nthe list or tuple returned by ModelAdmin.get_list_display() .\nIt is expected to return either None or a list or tuple of field\nnames on the changelist that will be linked to the change view, as described\nin the ModelAdmin.list_display_links section. ModelAdmin. get_exclude ( request , obj = None ) ¶ The get_exclude method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a list\nof fields, as described in ModelAdmin.exclude . ModelAdmin. get_fields ( request , obj = None ) ¶ The get_fields method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a list\nof fields, as described above in the ModelAdmin.fields section. ModelAdmin. get_fieldsets ( request , obj = None ) ¶ The get_fieldsets method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a list\nof 2-tuples, in which each 2-tuple represents a <fieldset> on the\nadmin form page, as described above in the ModelAdmin.fieldsets section. ModelAdmin. get_list_filter ( request ) [source] ¶ The get_list_filter method is given the HttpRequest and is expected\nto return the same kind of sequence type as for the list_filter attribute. ModelAdmin. get_list_select_related ( request ) [source] ¶ The get_list_select_related method is given the HttpRequest and\nshould return a boolean or list as ModelAdmin.list_select_related does. ModelAdmin. get_search_fields ( request ) [source] ¶ The get_search_fields method is given the HttpRequest and is expected\nto return the same kind of sequence type as for the search_fields attribute. ModelAdmin. get_sortable_by ( request ) ¶ The get_sortable_by() method is passed the HttpRequest and is\nexpected to return a collection (e.g. list , tuple , or set ) of\nfield names that will be sortable in the change list page. Its default implementation returns sortable_by if it’s set,\notherwise it defers to get_list_display() . For example, to prevent one or more columns from being sortable: class PersonAdmin ( admin . ModelAdmin ): def get_sortable_by ( self , request ): return { * self . get_list_display ( request )} - { \"rank\" } ModelAdmin. get_inline_instances ( request , obj = None ) [source] ¶ The get_inline_instances method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return\na list or tuple of InlineModelAdmin objects, as described below in the InlineModelAdmin section. For example, the following would return inlines without the default\nfiltering based on add, change, delete, and view permissions: class MyModelAdmin ( admin . ModelAdmin ): inlines = [ MyInline ] def get_inline_instances ( self , request , obj = None ): return [ inline ( self . model , self . admin_site ) for inline in self . inlines ] If you override this method, make sure that the returned inlines are\ninstances of the classes defined in inlines or you might encounter\na “Bad Request” error when adding related objects. ModelAdmin. get_inlines ( request , obj ) ¶ The get_inlines method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return\nan iterable of inlines. You can override this method to dynamically add\ninlines based on the request or model instance instead of specifying them\nin ModelAdmin.inlines . ModelAdmin. get_urls () [source] ¶ The get_urls method on a ModelAdmin returns the URLs to be used for\nthat ModelAdmin in the same way as a URLconf.  Therefore you can extend\nthem as documented in URL dispatcher , using the AdminSite.admin_view() wrapper on your views: from django.contrib import admin from django.template.response import TemplateResponse from django.urls import path class MyModelAdmin ( admin . ModelAdmin ): def get_urls ( self ): urls = super () . get_urls () my_urls = [ path ( \"my_view/\" , self . admin_site . admin_view ( self . my_view ))] return my_urls + urls def my_view ( self , request ): # ... context = dict ( # Include common variables for rendering the admin template. self . admin_site . each_context ( request ), # Anything else you want in the context... key = value , ) return TemplateResponse ( request , \"sometemplate.html\" , context ) If you want to use the admin layout, extend from admin/base_site.html : {% extends \"admin/base_site.html\" %} {% block content %} ... {% endblock %} Note Notice how the self.my_view function is wrapped in self.admin_site.admin_view . This is important, since it ensures two\nthings: Permission checks are run, ensuring only active staff users can\naccess the view. The django.views.decorators.cache.never_cache() decorator is\napplied to prevent caching, ensuring the returned information is\nup-to-date. Note Notice that the custom patterns are included before the regular admin\nURLs: the admin URL patterns are very permissive and will match nearly\nanything, so you’ll usually want to prepend your custom URLs to the\nbuilt-in ones. In this example, my_view will be accessed at /admin/myapp/mymodel/my_view/ (assuming the admin URLs are included\nat /admin/ .) If the page is cacheable, but you still want the permission check to be\nperformed, you can pass a cacheable=True argument to AdminSite.admin_view() : path ( \"my_view/\" , self . admin_site . admin_view ( self . my_view , cacheable = True )) ModelAdmin views have model_admin attributes. Other AdminSite views have admin_site attributes. ModelAdmin. get_form ( request , obj = None , ** kwargs ) [source] ¶ Returns a ModelForm class for use in the admin add\nand change views, see add_view() and change_view() . The base implementation uses modelform_factory() to subclass form , modified by attributes such as fields and exclude . So, for example, if you wanted to offer additional\nfields to superusers, you could swap in a different base form like so: class MyModelAdmin ( admin . ModelAdmin ): def get_form ( self , request , obj = None , ** kwargs ): if request . user . is_superuser : kwargs [ \"form\" ] = MySuperuserForm return super () . get_form ( request , obj , ** kwargs ) You may also return a custom ModelForm class\ndirectly. ModelAdmin. get_formsets_with_inlines ( request , obj = None ) [source] ¶ Yields ( FormSet , InlineModelAdmin ) pairs for use in admin add\nand change views. For example if you wanted to display a particular inline only in the change\nview, you could override get_formsets_with_inlines as follows: class MyModelAdmin ( admin . ModelAdmin ): inlines = [ MyInline , SomeOtherInline ] def get_formsets_with_inlines ( self , request , obj = None ): for inline in self . get_inline_instances ( request , obj ): # hide MyInline in the add view if not isinstance ( inline , MyInline ) or obj is not None : yield inline . get_formset ( request , obj ), inline ModelAdmin. formfield_for_foreignkey ( db_field , request , ** kwargs ) ¶ The formfield_for_foreignkey method on a ModelAdmin allows you to\noverride the default formfield for a foreign keys field. For example, to\nreturn a subset of objects for this foreign key field based on the user: class MyModelAdmin ( admin . ModelAdmin ): def formfield_for_foreignkey ( self , db_field , request , ** kwargs ): if db_field . name == \"car\" : kwargs [ \"queryset\" ] = Car . objects . filter ( owner = request . user ) return super () . formfield_for_foreignkey ( db_field , request , ** kwargs ) This uses the HttpRequest instance to filter the Car foreign key\nfield to only display the cars owned by the User instance. For more complex filters, you can use ModelForm.__init__() method to\nfilter based on an instance of your model (see Fields which handle relationships ). For example: class CountryAdminForm ( forms . ModelForm ): def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . fields [ \"capital\" ] . queryset = self . instance . cities . all () class CountryAdmin ( admin . ModelAdmin ): form = CountryAdminForm ModelAdmin. formfield_for_manytomany ( db_field , request , ** kwargs ) ¶ Like the formfield_for_foreignkey method, the formfield_for_manytomany method can be overridden to change the\ndefault formfield for a many to many field. For example, if an owner can\nown multiple cars and cars can belong to multiple owners – a many to\nmany relationship – you could filter the Car foreign key field to\nonly display the cars owned by the User : class MyModelAdmin ( admin . ModelAdmin ): def formfield_for_manytomany ( self , db_field , request , ** kwargs ): if db_field . name == \"cars\" : kwargs [ \"queryset\" ] = Car . objects . filter ( owner = request . user ) return super () . formfield_for_manytomany ( db_field , request , ** kwargs ) ModelAdmin. formfield_for_choice_field ( db_field , request , ** kwargs ) ¶ Like the formfield_for_foreignkey and formfield_for_manytomany methods, the formfield_for_choice_field method can be overridden to\nchange the default formfield for a field that has declared choices. For\nexample, if the choices available to a superuser should be different than\nthose available to regular staff, you could proceed as follows: class MyModelAdmin ( admin . ModelAdmin ): def formfield_for_choice_field ( self , db_field , request , ** kwargs ): if db_field . name == \"status\" : kwargs [ \"choices\" ] = [ ( \"accepted\" , \"Accepted\" ), ( \"denied\" , \"Denied\" ), ] if request . user . is_superuser : kwargs [ \"choices\" ] . append (( \"ready\" , \"Ready for deployment\" )) return super () . formfield_for_choice_field ( db_field , request , ** kwargs ) choices limitations Any choices attribute set on the formfield will be limited to the\nform field only. If the corresponding field on the model has choices\nset, the choices provided to the form must be a valid subset of those\nchoices, otherwise the form submission will fail with\na ValidationError when the model itself\nis validated before saving. ModelAdmin. get_changelist ( request , ** kwargs ) [source] ¶ Returns the Changelist class to be used for listing. By default, django.contrib.admin.views.main.ChangeList is used. By inheriting this\nclass you can change the behavior of the listing. ModelAdmin. get_changelist_form ( request , ** kwargs ) [source] ¶ Returns a ModelForm class for use in the Formset on the changelist page. To use a custom form, for example: from django import forms class MyForm ( forms . ModelForm ): pass class MyModelAdmin ( admin . ModelAdmin ): def get_changelist_form ( self , request , ** kwargs ): return MyForm Omit the Meta.model attribute If you define the Meta.model attribute on a ModelForm , you must also define the Meta.fields attribute (or the Meta.exclude attribute). However, ModelAdmin ignores this value, overriding it with the ModelAdmin.list_editable attribute. The easiest solution is to\nomit the Meta.model attribute, since ModelAdmin will provide the\ncorrect model to use. ModelAdmin. get_changelist_formset ( request , ** kwargs ) [source] ¶ Returns a ModelFormSet class for use on the\nchangelist page if list_editable is used. To use a\ncustom formset, for example: from django.forms import BaseModelFormSet class MyAdminFormSet ( BaseModelFormSet ): pass class MyModelAdmin ( admin . ModelAdmin ): def get_changelist_formset ( self , request , ** kwargs ): kwargs [ \"formset\" ] = MyAdminFormSet return super () . get_changelist_formset ( request , ** kwargs ) ModelAdmin. lookup_allowed ( lookup , value , request ) ¶ The objects in the changelist page can be filtered with lookups from the\nURL’s query string. This is how list_filter works, for example. The\nlookups are similar to what’s used in QuerySet.filter() (e.g. user__email=user@example.com ). Since the lookups in the query string\ncan be manipulated by the user, they must be sanitized to prevent\nunauthorized data exposure. The lookup_allowed() method is given a lookup path from the query string\n(e.g. 'user__email' ), the corresponding value\n(e.g. 'user@example.com' ), and the request, and returns a boolean\nindicating whether filtering the changelist’s QuerySet using the\nparameters is permitted. If lookup_allowed() returns False , DisallowedModelAdminLookup (subclass of SuspiciousOperation ) is raised. By default, lookup_allowed() allows access to a model’s local fields,\nfield paths used in list_filter (but not paths from get_list_filter() ), and lookups required for limit_choices_to to function\ncorrectly in raw_id_fields . Override this method to customize the lookups permitted for your ModelAdmin subclass. Changed in Django 5.0: The request argument was added. ModelAdmin. has_view_permission ( request , obj = None ) ¶ Should return True if viewing obj is permitted, False otherwise.\nIf obj is None , should return True or False to indicate whether\nviewing of objects of this type is permitted in general (e.g., False will be interpreted as meaning that the current user is not permitted to\nview any object of this type). The default implementation returns True if the user has either the\n“change” or “view” permission. ModelAdmin. has_add_permission ( request ) ¶ Should return True if adding an object is permitted, False otherwise. ModelAdmin. has_change_permission ( request , obj = None ) ¶ Should return True if editing obj is permitted, False otherwise. If obj is None , should return True or False to\nindicate whether editing of objects of this type is permitted in general\n(e.g., False will be interpreted as meaning that the current user is\nnot permitted to edit any object of this type). ModelAdmin. has_delete_permission ( request , obj = None ) ¶ Should return True if deleting obj is permitted, False otherwise. If obj is None , should return True or False to\nindicate whether deleting objects of this type is permitted in general\n(e.g., False will be interpreted as meaning that the current user is\nnot permitted to delete any object of this type). ModelAdmin. has_module_permission ( request ) ¶ Should return True if displaying the module on the admin index page and\naccessing the module’s index page is permitted, False otherwise.\nUses User.has_module_perms() by default. Overriding\nit does not restrict access to the view, add, change, or delete views, has_view_permission() , has_add_permission() , has_change_permission() , and has_delete_permission() should be used for that. ModelAdmin. get_queryset ( request ) ¶ The get_queryset method on a ModelAdmin returns a QuerySet of all model instances that\ncan be edited by the admin site. One use case for overriding this method\nis to show objects owned by the logged-in user: class MyModelAdmin ( admin . ModelAdmin ): def get_queryset ( self , request ): qs = super () . get_queryset ( request ) if request . user . is_superuser : return qs return qs . filter ( author = request . user ) ModelAdmin. message_user ( request , message , level = messages.INFO , extra_tags = '' , fail_silently = False ) [source] ¶ Sends a message to the user using the django.contrib.messages backend.  See the custom ModelAdmin example . Keyword arguments allow you to change the message level, add extra CSS\ntags, or fail silently if the contrib.messages framework is not\ninstalled. These keyword arguments match those for django.contrib.messages.add_message() , see that function’s\ndocumentation for more details. One difference is that the level may be\npassed as a string label in addition to integer/constant. ModelAdmin. get_paginator ( request , queryset , per_page , orphans = 0 , allow_empty_first_page = True ) [source] ¶ Returns an instance of the paginator to use for this view. By default,\ninstantiates an instance of paginator . ModelAdmin. response_add ( request , obj , post_url_continue = None ) [source] ¶ Determines the HttpResponse for the add_view() stage. response_add is called after the admin form is submitted and\njust after the object and all the related instances have\nbeen created and saved. You can override it to change the default behavior\nafter the object has been created. ModelAdmin. response_change ( request , obj ) [source] ¶ Determines the HttpResponse for the change_view() stage. response_change is called after the admin form is submitted and\njust after the object and all the related instances have\nbeen saved. You can override it to change the default\nbehavior after the object has been changed. ModelAdmin. response_delete ( request , obj_display , obj_id ) [source] ¶ Determines the HttpResponse for the delete_view() stage. response_delete is called after the object has been\ndeleted. You can override it to change the default\nbehavior after the object has been deleted. obj_display is a string with the name of the deleted\nobject. obj_id is the serialized identifier used to retrieve the object to be\ndeleted. ModelAdmin. get_formset_kwargs ( request , obj , inline , prefix ) [source] ¶ A hook for customizing the keyword arguments passed to the constructor of a\nformset. For example, to pass request to formset forms: class MyModelAdmin ( admin . ModelAdmin ): def get_formset_kwargs ( self , request , obj , inline , prefix ): return { ** super () . get_formset_kwargs ( request , obj , inline , prefix ), \"form_kwargs\" : { \"request\" : request }, } You can also use it to set initial for formset forms. ModelAdmin. get_changeform_initial_data ( request ) [source] ¶ A hook for the initial data on admin change forms. By default, fields are\ngiven initial values from GET parameters. For instance, ?name=initial_value will set the name field’s initial value to be initial_value . This method should return a dictionary in the form {'fieldname': 'fieldval'} : def get_changeform_initial_data ( self , request ): return { \"name\" : \"custom_initial_value\" } ModelAdmin. get_deleted_objects ( objs , request ) [source] ¶ A hook for customizing the deletion process of the delete_view() and\nthe “delete selected” action . The objs argument is a homogeneous iterable of objects (a QuerySet or a list of model instances) to be deleted, and request is the HttpRequest . This method must return a 4-tuple of (deleted_objects, model_count, perms_needed, protected) . deleted_objects is a list of strings representing all the objects that\nwill be deleted. If there are any related objects to be deleted, the list\nis nested and includes those related objects. The list is formatted in the\ntemplate using the unordered_list filter. model_count is a dictionary mapping each model’s verbose_name_plural to the number of\nobjects that will be deleted. perms_needed is a set of verbose_name s\nof the models that the user doesn’t have permission to delete. protected is a list of strings representing of all the protected\nrelated objects that can’t be deleted. The list is displayed in the\ntemplate. Other methods ¶ ModelAdmin. add_view ( request , form_url = '' , extra_context = None ) [source] ¶ Django view for the model instance addition page. See note below. ModelAdmin. change_view ( request , object_id , form_url = '' , extra_context = None ) [source] ¶ Django view for the model instance editing page. See note below. ModelAdmin. changelist_view ( request , extra_context = None ) [source] ¶ Django view for the model instances change list/actions page. See note\nbelow. ModelAdmin. delete_view ( request , object_id , extra_context = None ) [source] ¶ Django view for the model instance(s) deletion confirmation page. See note\nbelow. ModelAdmin. history_view ( request , object_id , extra_context = None ) [source] ¶ Django view for the page that shows the modification history for a given\nmodel instance. Unlike the hook-type ModelAdmin methods detailed in the previous section,\nthese five methods are in reality designed to be invoked as Django views from\nthe admin application URL dispatching handler to render the pages that deal\nwith model instances CRUD operations. As a result, completely overriding these\nmethods will significantly change the behavior of the admin application. One common reason for overriding these methods is to augment the context data\nthat is provided to the template that renders the view. In the following\nexample, the change view is overridden so that the rendered template is\nprovided some extra mapping data that would not otherwise be available: class MyModelAdmin ( admin . ModelAdmin ): # A template for a very customized change view: change_form_template = \"admin/myapp/extras/openstreetmap_change_form.html\" def get_osm_info ( self ): # ... pass def change_view ( self , request , object_id , form_url = \"\" , extra_context = None ): extra_context = extra_context or {} extra_context [ \"osm_data\" ] = self . get_osm_info () return super () . change_view ( request , object_id , form_url , extra_context = extra_context , ) These views return TemplateResponse instances which allow you to easily customize the response data before\nrendering. For more details, see the TemplateResponse documentation . ModelAdmin asset definitions ¶ There are times where you would like add a bit of CSS and/or JavaScript to\nthe add/change views. This can be accomplished by using a Media inner class\non your ModelAdmin : class ArticleAdmin ( admin . ModelAdmin ): class Media : css = { \"all\" : [ \"my_styles.css\" ], } js = [ \"my_code.js\" ] The staticfiles app prepends STATIC_URL (or MEDIA_URL if STATIC_URL is None ) to any asset paths. The same rules apply as regular asset\ndefinitions on forms . jQuery ¶ Django admin JavaScript makes use of the jQuery library. To avoid conflicts with user-supplied scripts or libraries, Django’s jQuery\n(version 3.7.1) is namespaced as django.jQuery . If you want to use jQuery\nin your own admin JavaScript without including a second copy, you can use the django.jQuery object on changelist and add/edit views. Also, your own admin\nforms or widgets depending on django.jQuery must specify js=['admin/js/jquery.init.js', …] when declaring form media assets . Changed in Django 5.0: jQuery was upgraded from 3.6.4 to 3.7.1. The ModelAdmin class requires jQuery by default, so there is no need\nto add jQuery to your ModelAdmin ’s list of media resources unless you have\na specific need. For example, if you require the jQuery library to be in the\nglobal namespace (for example when using third-party jQuery plugins) or if you\nneed a newer version of jQuery, you will have to include your own copy. Django provides both uncompressed and ‘minified’ versions of jQuery, as jquery.js and jquery.min.js respectively. ModelAdmin and InlineModelAdmin have a media property\nthat returns a list of Media objects which store paths to the JavaScript\nfiles for the forms and/or formsets. If DEBUG is True it will\nreturn the uncompressed versions of the various JavaScript files, including jquery.js ; if not, it will return the ‘minified’ versions. Adding custom validation to the admin ¶ You can also add custom validation of data in the admin. The automatic admin\ninterface reuses django.forms , and the ModelAdmin class gives you\nthe ability to define your own form: class ArticleAdmin ( admin . ModelAdmin ): form = MyArticleAdminForm MyArticleAdminForm can be defined anywhere as long as you import where\nneeded. Now within your form you can add your own custom validation for\nany field: class MyArticleAdminForm ( forms . ModelForm ): def clean_name ( self ): # do something that validates your data return self . cleaned_data [ \"name\" ] It is important you use a ModelForm here otherwise things can break. See\nthe forms documentation on custom validation and, more specifically, the model form validation notes for more\ninformation. InlineModelAdmin objects ¶ class InlineModelAdmin ¶ class TabularInline [source] ¶ class StackedInline [source] ¶ The admin interface has the ability to edit models on the same page as a\nparent model. These are called inlines. Suppose you have these two models: from django.db import models class Author ( models . Model ): name = models . CharField ( max_length = 100 ) class Book ( models . Model ): author = models . ForeignKey ( Author , on_delete = models . CASCADE ) title = models . CharField ( max_length = 100 ) You can edit the books authored by an author on the author page. You add\ninlines to a model by specifying them in a ModelAdmin.inlines : from django.contrib import admin class BookInline ( admin . TabularInline ): model = Book class AuthorAdmin ( admin . ModelAdmin ): inlines = [ BookInline , ] Django provides two subclasses of InlineModelAdmin and they are: TabularInline StackedInline The difference between these two is merely the template used to render\nthem. InlineModelAdmin options ¶ InlineModelAdmin shares many of the same features as ModelAdmin , and\nadds some of its own (the shared features are actually defined in the BaseModelAdmin superclass). The shared features are: form fieldsets fields formfield_overrides exclude filter_horizontal filter_vertical ordering prepopulated_fields get_fieldsets() get_queryset() radio_fields readonly_fields raw_id_fields formfield_for_choice_field() formfield_for_foreignkey() formfield_for_manytomany() has_module_permission() The InlineModelAdmin class adds or customizes: InlineModelAdmin. model ¶ The model which the inline is using. This is required. InlineModelAdmin. fk_name ¶ The name of the foreign key on the model. In most cases this will be dealt\nwith automatically, but fk_name must be specified explicitly if there\nare more than one foreign key to the same parent model. InlineModelAdmin. formset ¶ This defaults to BaseInlineFormSet . Using\nyour own formset can give you many possibilities of customization. Inlines\nare built around model formsets . InlineModelAdmin. form ¶ The value for form defaults to ModelForm . This is what is passed\nthrough to inlineformset_factory() when\ncreating the formset for this inline. Warning When writing custom validation for InlineModelAdmin forms, be cautious\nof writing validation that relies on features of the parent model. If the\nparent model fails to validate, it may be left in an inconsistent state as\ndescribed in the warning in Validation on a ModelForm . InlineModelAdmin. classes ¶ A list or tuple containing extra CSS classes to apply to the fieldset that\nis rendered for the inlines. Defaults to None . As with classes\nconfigured in fieldsets , inlines with a collapse class will be initially collapsed using an expandable widget. Changed in Django 5.1: fieldsets using the collapse class now use <details> and <summary> elements, provided they define a name . InlineModelAdmin. extra ¶ This controls the number of extra forms the formset will display in\naddition to the initial forms. Defaults to 3. See the formsets documentation for more\ninformation. For users with JavaScript-enabled browsers, an “Add another” link is\nprovided to enable any number of additional inlines to be added in addition\nto those provided as a result of the extra argument. The dynamic link will not appear if the number of currently displayed forms\nexceeds max_num , or if the user does not have JavaScript enabled. InlineModelAdmin.get_extra() also allows you to customize the number\nof extra forms. InlineModelAdmin. max_num ¶ This controls the maximum number of forms to show in the inline. This\ndoesn’t directly correlate to the number of objects, but can if the value\nis small enough. See Limiting the number of editable objects for more information. InlineModelAdmin.get_max_num() also allows you to customize the\nmaximum number of extra forms. InlineModelAdmin. min_num ¶ This controls the minimum number of forms to show in the inline.\nSee modelformset_factory() for more information. InlineModelAdmin.get_min_num() also allows you to customize the\nminimum number of displayed forms. InlineModelAdmin. raw_id_fields ¶ By default, Django’s admin uses a select-box interface (<select>) for\nfields that are ForeignKey . Sometimes you don’t want to incur the\noverhead of having to select all the related instances to display in the\ndrop-down. raw_id_fields is a list of fields you would like to change into an Input widget for either a ForeignKey or ManyToManyField : class BookInline ( admin . TabularInline ): model = Book raw_id_fields = [ \"pages\" ] InlineModelAdmin. template ¶ The template used to render the inline on the page. InlineModelAdmin. verbose_name ¶ An override to the verbose_name from the\nmodel’s inner Meta class. InlineModelAdmin. verbose_name_plural ¶ An override to the verbose_name_plural from the model’s inner Meta class. If this isn’t given and the InlineModelAdmin.verbose_name is defined, Django will use InlineModelAdmin.verbose_name + 's' . InlineModelAdmin. can_delete ¶ Specifies whether or not inline objects can be deleted in the inline.\nDefaults to True . InlineModelAdmin. show_change_link ¶ Specifies whether or not inline objects that can be changed in the\nadmin have a link to the change form. Defaults to False . InlineModelAdmin. get_formset ( request , obj = None , ** kwargs ) ¶ Returns a BaseInlineFormSet class for use in\nadmin add/change views. obj is the parent object being edited or None when adding a new parent. See the example for ModelAdmin.get_formsets_with_inlines . InlineModelAdmin. get_extra ( request , obj = None , ** kwargs ) ¶ Returns the number of extra inline forms to use. By default, returns the InlineModelAdmin.extra attribute. Override this method to programmatically determine the number of extra\ninline forms. For example, this may be based on the model instance\n(passed as the keyword argument obj ): class BinaryTreeAdmin ( admin . TabularInline ): model = BinaryTree def get_extra ( self , request , obj = None , ** kwargs ): extra = 2 if obj : return extra - obj . binarytree_set . count () return extra InlineModelAdmin. get_max_num ( request , obj = None , ** kwargs ) ¶ Returns the maximum number of extra inline forms to use. By default,\nreturns the InlineModelAdmin.max_num attribute. Override this method to programmatically determine the maximum number of\ninline forms. For example, this may be based on the model instance\n(passed as the keyword argument obj ): class BinaryTreeAdmin ( admin . TabularInline ): model = BinaryTree def get_max_num ( self , request , obj = None , ** kwargs ): max_num = 10 if obj and obj . parent : return max_num - 5 return max_num InlineModelAdmin. get_min_num ( request , obj = None , ** kwargs ) ¶ Returns the minimum number of inline forms to use. By default,\nreturns the InlineModelAdmin.min_num attribute. Override this method to programmatically determine the minimum number of\ninline forms. For example, this may be based on the model instance\n(passed as the keyword argument obj ). InlineModelAdmin. has_add_permission ( request , obj ) ¶ Should return True if adding an inline object is permitted, False otherwise. obj is the parent object being edited or None when\nadding a new parent. InlineModelAdmin. has_change_permission ( request , obj = None ) ¶ Should return True if editing an inline object is permitted, False otherwise. obj is the parent object being edited. InlineModelAdmin. has_delete_permission ( request , obj = None ) ¶ Should return True if deleting an inline object is permitted, False otherwise. obj is the parent object being edited. Note The obj argument passed to InlineModelAdmin methods is the parent\nobject being edited or None when adding a new parent. Working with a model with two or more foreign keys to the same parent model ¶ It is sometimes possible to have more than one foreign key to the same model.\nTake this model for instance: from django.db import models class Friendship ( models . Model ): to_person = models . ForeignKey ( Person , on_delete = models . CASCADE , related_name = \"friends\" ) from_person = models . ForeignKey ( Person , on_delete = models . CASCADE , related_name = \"from_friends\" ) If you wanted to display an inline on the Person admin add/change pages\nyou need to explicitly define the foreign key since it is unable to do so\nautomatically: from django.contrib import admin from myapp.models import Friendship class FriendshipInline ( admin . TabularInline ): model = Friendship fk_name = \"to_person\" class PersonAdmin ( admin . ModelAdmin ): inlines = [ FriendshipInline , ] Working with many-to-many models ¶ By default, admin widgets for many-to-many relations will be displayed\non whichever model contains the actual reference to the ManyToManyField . Depending on your ModelAdmin definition, each many-to-many field in your model will be represented by a\nstandard HTML <select multiple> , a horizontal or vertical filter, or a raw_id_fields widget. However, it is also possible to replace these\nwidgets with inlines. Suppose we have the following models: from django.db import models class Person ( models . Model ): name = models . CharField ( max_length = 128 ) class Group ( models . Model ): name = models . CharField ( max_length = 128 ) members = models . ManyToManyField ( Person , related_name = \"groups\" ) If you want to display many-to-many relations using an inline, you can do\nso by defining an InlineModelAdmin object for the relationship: from django.contrib import admin class MembershipInline ( admin . TabularInline ): model = Group . members . through class PersonAdmin ( admin . ModelAdmin ): inlines = [ MembershipInline , ] class GroupAdmin ( admin . ModelAdmin ): inlines = [ MembershipInline , ] exclude = [ \"members\" ] There are two features worth noting in this example. Firstly - the MembershipInline class references Group.members.through .\nThe through attribute is a reference to the model that manages the\nmany-to-many relation. This model is automatically created by Django when you\ndefine a many-to-many field. Secondly, the GroupAdmin must manually exclude the members field.\nDjango displays an admin widget for a many-to-many field on the model that\ndefines the relation (in this case, Group ). If you want to use an inline\nmodel to represent the many-to-many relationship, you must tell Django’s admin\nto not display this widget - otherwise you will end up with two widgets on\nyour admin page for managing the relation. Note that when using this technique the m2m_changed signals aren’t triggered. This\nis because as far as the admin is concerned, through is just a model with\ntwo foreign key fields rather than a many-to-many relation. In all other respects, the InlineModelAdmin is exactly the same as any\nother. You can customize the appearance using any of the normal ModelAdmin properties. Working with many-to-many intermediary models ¶ When you specify an intermediary model using the through argument to a ManyToManyField , the admin will not display a\nwidget by default. This is because each instance of that intermediary model\nrequires more information than could be displayed in a single widget, and the\nlayout required for multiple widgets will vary depending on the intermediate\nmodel. However, we still want to be able to edit that information inline. Fortunately,\nwe can do this with inline admin models. Suppose we have the following models: from django.db import models class Person ( models . Model ): name = models . CharField ( max_length = 128 ) class Group ( models . Model ): name = models . CharField ( max_length = 128 ) members = models . ManyToManyField ( Person , through = \"Membership\" ) class Membership ( models . Model ): person = models . ForeignKey ( Person , on_delete = models . CASCADE ) group = models . ForeignKey ( Group , on_delete = models . CASCADE ) date_joined = models . DateField () invite_reason = models . CharField ( max_length = 64 ) The first step in displaying this intermediate model in the admin is to\ndefine an inline class for the Membership model: class MembershipInline ( admin . TabularInline ): model = Membership extra = 1 This example uses the default InlineModelAdmin values for the Membership model, and limits the extra add forms to one. This could be\ncustomized using any of the options available to InlineModelAdmin classes. Now create admin views for the Person and Group models: class PersonAdmin ( admin . ModelAdmin ): inlines = [ MembershipInline ] class GroupAdmin ( admin . ModelAdmin ): inlines = [ MembershipInline ] Finally, register your Person and Group models with the admin site: admin . site . register ( Person , PersonAdmin ) admin . site . register ( Group , GroupAdmin ) Now your admin site is set up to edit Membership objects inline from\neither the Person or the Group detail pages. Using generic relations as an inline ¶ It is possible to use an inline with generically related objects. Let’s say\nyou have the following models: from django.contrib.contenttypes.fields import GenericForeignKey from django.db import models class Image ( models . Model ): image = models . ImageField ( upload_to = \"images\" ) content_type = models . ForeignKey ( ContentType , on_delete = models . CASCADE ) object_id = models . PositiveIntegerField () content_object = GenericForeignKey ( \"content_type\" , \"object_id\" ) class Product ( models . Model ): name = models . CharField ( max_length = 100 ) If you want to allow editing and creating an Image instance on the Product , add/change views you can use GenericTabularInline or GenericStackedInline (both\nsubclasses of GenericInlineModelAdmin )\nprovided by admin . They implement tabular\nand stacked visual layouts for the forms representing the inline objects,\nrespectively, just like their non-generic counterparts. They behave just like\nany other inline. In your admin.py for this example app: from django.contrib import admin from django.contrib.contenttypes.admin import GenericTabularInline from myapp.models import Image , Product class ImageInline ( GenericTabularInline ): model = Image class ProductAdmin ( admin . ModelAdmin ): inlines = [ ImageInline , ] admin . site . register ( Product , ProductAdmin ) See the contenttypes documentation for more\nspecific information. Overriding admin templates ¶ You can override many of the templates which the admin module uses to generate\nthe various pages of an admin site. You can even override a few of these\ntemplates for a specific app, or a specific model. Set up your projects admin template directories ¶ The admin template files are located in the django/contrib/admin/templates/admin directory. In order to override one or more of them, first create an admin directory\nin your project’s templates directory. This can be any of the directories\nyou specified in the DIRS option of the DjangoTemplates backend in the TEMPLATES setting. If you have\ncustomized the 'loaders' option, be sure 'django.template.loaders.filesystem.Loader' appears before 'django.template.loaders.app_directories.Loader' so that your custom\ntemplates will be found by the template loading system before those that are\nincluded with django.contrib.admin . Within this admin directory, create sub-directories named after your app.\nWithin these app subdirectories create sub-directories named after your models.\nNote, that the admin app will lowercase the model name when looking for the\ndirectory, so make sure you name the directory in all lowercase if you are\ngoing to run your app on a case-sensitive filesystem. To override an admin template for a specific app, copy and edit the template\nfrom the django/contrib/admin/templates/admin directory, and save it to one\nof the directories you just created. For example, if we wanted to add a tool to the change list view for all the\nmodels in an app named my_app , we would copy contrib/admin/templates/admin/change_list.html to the templates/admin/my_app/ directory of our project, and make any necessary\nchanges. If we wanted to add a tool to the change list view for only a specific model\nnamed ‘Page’, we would copy that same file to the templates/admin/my_app/page directory of our project. Overriding vs. replacing an admin template ¶ Because of the modular design of the admin templates, it is usually neither\nnecessary nor advisable to replace an entire template. It is almost always\nbetter to override only the section of the template which you need to change. To continue the example above, we want to add a new link next to the History tool for the Page model. After looking at change_form.html we determine that we only need to override the object-tools-items block.\nTherefore here is our new change_form.html : {% extends \"admin/change_form.html\" %} {% load i18n admin_urls %} {% block object-tools-items %} < li > < a href = \" {% url opts | admin_urlname :'history' original.pk | admin_urlquote %} \" class = \"historylink\" > {% translate \"History\" %} </ a > </ li > < li > < a href = \"mylink/\" class = \"historylink\" > My Link </ a > </ li > {% if has_absolute_url %} < li > < a href = \" {% url 'admin:view_on_site' content_type_id original.pk %} \" class = \"viewsitelink\" > {% translate \"View on site\" %} </ a > </ li > {% endif %} {% endblock %} And that’s it! If we placed this file in the templates/admin/my_app directory, our link would appear on the change form for all models within\nmy_app. Templates which may be overridden per app or model ¶ Not every template in contrib/admin/templates/admin may be overridden per\napp or per model. The following can: actions.html app_index.html change_form.html change_form_object_tools.html change_list.html change_list_object_tools.html change_list_results.html date_hierarchy.html delete_confirmation.html object_history.html pagination.html popup_response.html prepopulated_fields_js.html search_form.html submit_line.html For those templates that cannot be overridden in this way, you may still\noverride them for your entire project by placing the new version in your templates/admin directory. This is particularly useful to create custom 404\nand 500 pages. Note Some of the admin templates, such as change_list_results.html are used\nto render custom inclusion tags. These may be overridden, but in such cases\nyou are probably better off creating your own version of the tag in\nquestion and giving it a different name. That way you can use it\nselectively. Root and login templates ¶ If you wish to change the index, login or logout templates, you are better off\ncreating your own AdminSite instance (see below), and changing the AdminSite.index_template , AdminSite.login_template or AdminSite.logout_template properties. Theming support ¶ The admin uses CSS variables to define colors and fonts. This allows changing\nthemes without having to override many individual CSS rules. For example, if\nyou preferred purple instead of blue you could add a admin/base.html template override to your project: {% extends 'admin/base.html' %} {% block extrastyle %}{{ block .super }} < style > html [ data-theme = \"light\" ], : root { --primary : #9774d5 ; --secondary : #785cab ; --link-fg : #7c449b ; --link-selected-fg : #8f5bb2 ; } </ style > {% endblock %} The list of CSS variables are defined at django/contrib/admin/static/admin/css/base.css . Dark mode variables, respecting the prefers-color-scheme media query, are\ndefined at django/contrib/admin/static/admin/css/dark_mode.css . This is\nlinked to the document in {% block dark-mode-vars %} . AdminSite objects ¶ class AdminSite ( name = 'admin' ) [source] ¶ A Django administrative site is represented by an instance of django.contrib.admin.sites.AdminSite ; by default, an instance of\nthis class is created as django.contrib.admin.site and you can\nregister your models and ModelAdmin instances with it. If you want to customize the default admin site, you can override it . When constructing an instance of an AdminSite , you can provide\na unique instance name using the name argument to the constructor. This\ninstance name is used to identify the instance, especially when reversing admin URLs . If no instance name is\nprovided, a default instance name of admin will be used.\nSee Customizing the AdminSite class for an example of customizing the AdminSite class. django.contrib.admin.sites. all_sites ¶ A WeakSet contains all admin site instances. AdminSite attributes ¶ Templates can override or extend base admin templates as described in Overriding admin templates . AdminSite. site_header ¶ The text to put at the top of each admin page, as a <div> (a string).\nBy default, this is “Django administration”. Changed in Django 5.0: In older versions, site_header was using an <h1> tag. AdminSite. site_title ¶ The text to put at the end of each admin page’s <title> (a string). By\ndefault, this is “Django site admin”. AdminSite. site_url ¶ The URL for the “View site” link at the top of each admin page. By default, site_url is / . Set it to None to remove the link. For sites running on a subpath, the each_context() method checks if\nthe current request has request.META['SCRIPT_NAME'] set and uses that\nvalue if site_url isn’t set to something other than / . AdminSite. index_title ¶ The text to put at the top of the admin index page (a string). By default,\nthis is “Site administration”. AdminSite. index_template ¶ Path to a custom template that will be used by the admin site main index\nview. AdminSite. app_index_template ¶ Path to a custom template that will be used by the admin site app index view. AdminSite. empty_value_display ¶ The string to use for displaying empty values in the admin site’s change\nlist. Defaults to a dash. The value can also be overridden on a per ModelAdmin basis and on a custom field within a ModelAdmin by\nsetting an empty_value_display attribute on the field. See ModelAdmin.empty_value_display for examples. AdminSite. enable_nav_sidebar ¶ A boolean value that determines whether to show the navigation sidebar\non larger screens. By default, it is set to True . AdminSite. final_catch_all_view ¶ A boolean value that determines whether to add a final catch-all view to\nthe admin that redirects unauthenticated users to the login page. By\ndefault, it is set to True . Warning Setting this to False is not recommended as the view protects\nagainst a potential model enumeration privacy issue. AdminSite. login_template ¶ Path to a custom template that will be used by the admin site login view. AdminSite. login_form ¶ Subclass of AuthenticationForm that\nwill be used by the admin site login view. AdminSite. logout_template ¶ Path to a custom template that will be used by the admin site logout view. AdminSite. password_change_template ¶ Path to a custom template that will be used by the admin site password\nchange view. AdminSite. password_change_done_template ¶ Path to a custom template that will be used by the admin site password\nchange done view. AdminSite methods ¶ AdminSite. each_context ( request ) [source] ¶ Returns a dictionary of variables to put in the template context for\nevery page in the admin site. Includes the following variables and values by default: site_header : AdminSite.site_header site_title : AdminSite.site_title site_url : AdminSite.site_url has_permission : AdminSite.has_permission() available_apps : a list of applications from the application registry available for the current user. Each entry in the\nlist is a dict representing an application with the following keys: app_label : the application label app_url : the URL of the application index in the admin has_module_perms : a boolean indicating if displaying and accessing of\nthe module’s index page is permitted for the current user models : a list of the models available in the application Each model is a dict with the following keys: model : the model class object_name : class name of the model name : plural name of the model perms : a dict tracking add , change , delete , and view permissions admin_url : admin changelist URL for the model add_url : admin URL to add a new model instance is_popup : whether the current page is displayed in a popup window is_nav_sidebar_enabled : AdminSite.enable_nav_sidebar log_entries : AdminSite.get_log_entries() AdminSite. get_app_list ( request , app_label = None ) [source] ¶ Returns a list of applications from the application registry available for the current user. You can optionally\npass an app_label argument to get details for a single app. Each entry\nin the list is a dictionary representing an application with the following\nkeys: app_label : the application label app_url : the URL of the application index in the admin has_module_perms : a boolean indicating if displaying and accessing of\nthe module’s index page is permitted for the current user models : a list of the models available in the application name : name of the application Each model is a dictionary with the following keys: model : the model class object_name : class name of the model name : plural name of the model perms : a dict tracking add , change , delete , and view permissions admin_url : admin changelist URL for the model add_url : admin URL to add a new model instance Lists of applications and models are sorted alphabetically by their names.\nYou can override this method to change the default order on the admin index\npage. AdminSite. has_permission ( request ) [source] ¶ Returns True if the user for the given HttpRequest has permission\nto view at least one page in the admin site. Defaults to requiring both User.is_active and User.is_staff to be True . AdminSite. register ( model_or_iterable , admin_class = None , ** options ) [source] ¶ Registers the given model class (or iterable of classes) with the given admin_class . admin_class defaults to ModelAdmin (the default admin options). If\nkeyword arguments are given – e.g. list_display – they’ll be applied\nas options to the admin class. Raises ImproperlyConfigured if a model is\nabstract. and django.contrib.admin.exceptions.AlreadyRegistered if a\nmodel is already registered. AdminSite. unregister ( model_or_iterable ) [source] ¶ Unregisters the given model class (or iterable of classes). Raises django.contrib.admin.exceptions.NotRegistered if a model isn’t\nalready registered. AdminSite. get_model_admin ( model ) [source] ¶ New in Django 5.0. Returns an admin class for the given model class. Raises django.contrib.admin.exceptions.NotRegistered if a model isn’t registered. AdminSite. get_log_entries ( request ) [source] ¶ New in Django 5.0. Returns a queryset for the related LogEntry instances, shown on the site\nindex page. This method can be overridden to filter the log entries by\nother criteria. Hooking AdminSite instances into your URLconf ¶ The last step in setting up the Django admin is to hook your AdminSite instance into your URLconf. Do this by pointing a given URL at the AdminSite.urls method. It is not necessary to use include() . In this example, we register the default AdminSite instance django.contrib.admin.site at the URL /admin/ # urls.py from django.contrib import admin from django.urls import path urlpatterns = [ path ( \"admin/\" , admin . site . urls ), ] Customizing the AdminSite class ¶ If you’d like to set up your own admin site with custom behavior, you’re free\nto subclass AdminSite and override or add anything you like. Then, create\nan instance of your AdminSite subclass (the same way you’d instantiate any\nother Python class) and register your models and ModelAdmin subclasses with\nit instead of with the default site. Finally, update myproject/urls.py to reference your AdminSite subclass. myapp/admin.py ¶ from django.contrib import admin from .models import MyModel class MyAdminSite ( admin . AdminSite ): site_header = \"Monty Python administration\" admin_site = MyAdminSite ( name = \"myadmin\" ) admin_site . register ( MyModel ) myproject/urls.py ¶ from django.urls import path from myapp.admin import admin_site urlpatterns = [ path ( \"myadmin/\" , admin_site . urls ), ] Note that you may not want autodiscovery of admin modules when using your\nown AdminSite instance since you will likely be importing all the per-app admin modules in your myproject.admin module. This means you need to\nput 'django.contrib.admin.apps.SimpleAdminConfig' instead of 'django.contrib.admin' in your INSTALLED_APPS setting. Overriding the default admin site ¶ You can override the default django.contrib.admin.site by setting the default_site attribute of a custom AppConfig to the dotted import path of either a AdminSite subclass or a callable that\nreturns a site instance. myproject/admin.py ¶ from django.contrib import admin class MyAdminSite ( admin . AdminSite ): ... myproject/apps.py ¶ from django.contrib.admin.apps import AdminConfig class MyAdminConfig ( AdminConfig ): default_site = \"myproject.admin.MyAdminSite\" myproject/settings.py ¶ INSTALLED_APPS = [ # ... \"myproject.apps.MyAdminConfig\" , # replaces 'django.contrib.admin' # ... ] Multiple admin sites in the same URLconf ¶ You can create multiple instances of the admin site on the same Django-powered\nwebsite. Create multiple instances of AdminSite and place each one at a\ndifferent URL. In this example, the URLs /basic-admin/ and /advanced-admin/ feature\nseparate versions of the admin site – using the AdminSite instances myproject.admin.basic_site and myproject.admin.advanced_site ,\nrespectively: # urls.py from django.urls import path from myproject.admin import advanced_site , basic_site urlpatterns = [ path ( \"basic-admin/\" , basic_site . urls ), path ( \"advanced-admin/\" , advanced_site . urls ), ] AdminSite instances take a single argument to their constructor, their\nname, which can be anything you like. This argument becomes the prefix to the\nURL names for the purposes of reversing them . This\nis only necessary if you are using more than one AdminSite . Adding views to admin sites ¶ Just like ModelAdmin , AdminSite provides a get_urls() method\nthat can be overridden to define additional views for the site. To add\na new view to your admin site, extend the base get_urls() method to include\na pattern for your new view. Note Any view you render that uses the admin templates, or extends the base\nadmin template, should set request.current_app before rendering the\ntemplate. It should be set to either self.name if your view is on an AdminSite or self.admin_site.name if your view is on a ModelAdmin . Adding a password reset feature ¶ You can add a password reset feature to the admin site by adding a few lines to\nyour URLconf. Specifically, add these four patterns: from django.contrib import admin from django.contrib.auth import views as auth_views path ( \"admin/password_reset/\" , auth_views . PasswordResetView . as_view ( extra_context = { \"site_header\" : admin . site . site_header } ), name = \"admin_password_reset\" , ), path ( \"admin/password_reset/done/\" , auth_views . PasswordResetDoneView . as_view ( extra_context = { \"site_header\" : admin . site . site_header } ), name = \"password_reset_done\" , ), path ( \"reset/<uidb64>/<token>/\" , auth_views . PasswordResetConfirmView . as_view ( extra_context = { \"site_header\" : admin . site . site_header } ), name = \"password_reset_confirm\" , ), path ( \"reset/done/\" , auth_views . PasswordResetCompleteView . as_view ( extra_context = { \"site_header\" : admin . site . site_header } ), name = \"password_reset_complete\" , ), (This assumes you’ve added the admin at admin/ and requires that you put\nthe URLs starting with ^admin/ before the line that includes the admin app\nitself). The presence of the admin_password_reset named URL will cause a “forgotten\nyour password?” link to appear on the default admin log-in page under the\npassword box. LogEntry objects ¶ class models. LogEntry ¶ The LogEntry class tracks additions, changes, and deletions of objects\ndone through the admin interface. LogEntry attributes ¶ LogEntry. action_time ¶ The date and time of the action. LogEntry. user ¶ The user (an AUTH_USER_MODEL instance) who performed the\naction. LogEntry. content_type ¶ The ContentType of the\nmodified object. LogEntry. object_id ¶ The textual representation of the modified object’s primary key. LogEntry. object_repr ¶ The object`s repr() after the modification. LogEntry. action_flag ¶ The type of action logged: ADDITION , CHANGE , DELETION . For example, to get a list of all additions done through the admin: from django.contrib.admin.models import ADDITION , LogEntry LogEntry . objects . filter ( action_flag = ADDITION ) LogEntry. change_message ¶ The detailed description of the modification. In the case of an edit, for\nexample, the message contains a list of the edited fields. The Django admin\nsite formats this content as a JSON structure, so that get_change_message() can recompose a message translated in the current\nuser language. Custom code might set this as a plain string though. You are\nadvised to use the get_change_message() method to retrieve this value\ninstead of accessing it directly. LogEntry methods ¶ LogEntry. get_edited_object () [source] ¶ A shortcut that returns the referenced object. LogEntry. get_change_message () [source] ¶ Formats and translates change_message into the current user\nlanguage. Messages created before Django 1.10 will always be displayed in\nthe language in which they were logged. Reversing admin URLs ¶ When an AdminSite is deployed, the views provided by that site are\naccessible using Django’s URL reversing system . The AdminSite provides the following named URL patterns: Page URL name Parameters Index index Login login Logout logout Password change password_change Password change done password_change_done i18n JavaScript jsi18n Application index page app_list app_label Redirect to object’s page view_on_site content_type_id , object_id Each ModelAdmin instance provides an additional set of named URLs: Page URL name Parameters Changelist {{ app_label }}_{{ model_name }}_changelist Add {{ app_label }}_{{ model_name }}_add History {{ app_label }}_{{ model_name }}_history object_id Delete {{ app_label }}_{{ model_name }}_delete object_id Change {{ app_label }}_{{ model_name }}_change object_id The UserAdmin provides a named URL: Page URL name Parameters Password change auth_user_password_change user_id These named URLs are registered with the application namespace admin , and\nwith an instance namespace corresponding to the name of the Site instance. So - if you wanted to get a reference to the Change view for a particular Choice object (from the polls application) in the default admin, you would\ncall: >>> from django.urls import reverse >>> c = Choice . objects . get ( ... ) >>> change_url = reverse ( \"admin:polls_choice_change\" , args = ( c . id ,)) This will find the first registered instance of the admin application\n(whatever the instance name), and resolve to the view for changing poll.Choice instances in that instance. If you want to find a URL in a specific admin instance, provide the name of\nthat instance as a current_app hint to the reverse call. For example,\nif you specifically wanted the admin view from the admin instance named custom , you would need to call: >>> change_url = reverse ( \"admin:polls_choice_change\" , args = ( c . id ,), current_app = \"custom\" ) For more details, see the documentation on reversing namespaced URLs . To allow easier reversing of the admin urls in templates, Django provides an admin_urlname filter which takes an action as argument: {% load admin_urls %} < a href = \" {% url opts | admin_urlname :'add' %} \" > Add user </ a > < a href = \" {% url opts | admin_urlname :'delete' user.pk %} \" > Delete this user </ a > The action in the examples above match the last part of the URL names for ModelAdmin instances described above. The opts variable can be any\nobject which has an app_label and model_name attributes and is usually\nsupplied by the admin views for the current model. The display decorator ¶ display ( * , boolean = None , ordering = None , description = None , empty_value = None ) [source] ¶ This decorator can be used for setting specific attributes on custom\ndisplay functions that can be used with list_display or readonly_fields : @admin . display ( boolean = True , ordering = \"-publish_date\" , description = \"Is Published?\" , ) def is_published ( self , obj ): return obj . publish_date is not None This is equivalent to setting some attributes (with the original, longer\nnames) on the function directly: def is_published ( self , obj ): return obj . publish_date is not None is_published . boolean = True is_published . admin_order_field = \"-publish_date\" is_published . short_description = \"Is Published?\" Also note that the empty_value decorator parameter maps to the empty_value_display attribute assigned directly to the function. It\ncannot be used in conjunction with boolean – they are mutually\nexclusive. Use of this decorator is not compulsory to make a display function, but it\ncan be useful to use it without arguments as a marker in your source to\nidentify the purpose of the function: @admin . display def published_year ( self , obj ): return obj . publish_date . year In this case it will add no attributes to the function. The staff_member_required decorator ¶ staff_member_required ( redirect_field_name = 'next' , login_url = 'admin:login' ) [source] ¶ This decorator is used on the admin views that require authorization. A\nview decorated with this function will have the following behavior: If the user is logged in, is a staff member ( User.is_staff=True ), and\nis active ( User.is_active=True ), execute the view normally. Otherwise, the request will be redirected to the URL specified by the login_url parameter, with the originally requested path in a query\nstring variable specified by redirect_field_name . For example: /admin/login/?next=/admin/polls/question/3/ . Example usage: from django.contrib.admin.views.decorators import staff_member_required @staff_member_required def my_view ( request ): ...", "keywords": ["colored_name", "iterable", "inlinemodeladmin.max_num", "django.template.context_processors.request", "base.html", "column", "modeladmin.save_model", "super(personadmin", "colored_first_name", "variable", "get_extra", "authenticationform", "personadmin", "comma", "articleadmin", "login/?next=/admin", "type", "line", "django.contrib.admin.site", ".super", "url", "httpresponse", "from_person", "7c449b", "inlinemodeladmin.get_extra", "manytomanyfield", "book", "register", "marker", "rows", "statement", "password_reset/", "owners", "def", "membership", "question_text", "searches", "django.contrib.admin.views.decorators", "django.core.paginator", "empty_value", "id", "administration", "logout", "reason", "m", "save_formset", "obj_id", "overview", "classes", "day", "format_html_join", "additions", "unregisters", "omit", "method", "info", "party", "imagefield", "baseinlineformset", "my_app/", "appearance", "admin_site", "person", "django.contrib.messages", "get_exclude", "directories", "formfield_overrides", "objs", "performance", "dash", "boolean", "facets", "use", "status", "django.template.loaders.filesystem", "views", "messages", "empty_value_display", "jsi18n", "callables", "ways", "difference", "items", "form_kwargs", "birth_date", "project", "scripts", "object_name", "polls_choice_change", "equivalent", "login", "way", "yields", "newspaper", "preserve_filters", "default", "filters", "option", "model.save", "search_help_text", "media_url", "vertical", "original.pk", "birthday", "requirements", "cars", "need", "django.forms", "page", "default_site", "auth_user_password_change", "block", "purple", "opts", "contrib", "bottom", "kind", "allow_empty_first_page", "top", "isinstance", "respects", "faceting", "age", "base_site.html", "users", "tool", "content_type_id", "content_type", "first_name__exact", "textarea", "stylesheet", "self", "owner", "extra_tags", "boxes", "concat", "label", "pass", "argument", "staff_member_required", "@property", "modeladmin.exclude", "words", "paginator", "auto", "version", "filesystem", "deletion", "images", "tuple", "meta.fields", "basemodeladmin", "can_delete", "integer", "app_label", "personform", "available_apps", "my_view/", "get_full_address", "dict", "conjunction", "modeladmin.inlines", "authenticationmiddleware", "meta", "queryset.filter", "month", "properties", "term", "generator", "delete_view", "questionadmin", "steps", "editor", "django.contrib.messages.context_processors.messages", "staff", "element", "accepted", "openstreetmap_change_form.html", "sorting", "lines", "myapp.models", "apps.py", "user.has_module_perms", "name", "pattern", "relationships", "reversing", "has_add_permission", "adminsite.has_permission", "first_name", "admin", "inlinemodeladmin.verbose_name", "reset/<uidb64>/<token>/", "space", "lookup_allowed", "has_module_permission", "final_catch_all_view", "link", "charfield", "visibility", "above", "addition", "instances", "meta.model", "python", "get_search_fields", "question/3/", "handler", "admin_class", "constructor", "get_formset_kwargs", "formats", "widths", "subclass", "|=", "lookup", "front", "view_on_site", "modeladmin.get_list_display", "extra_context", "user_id", "inlines", "style=\"color", "faq", "rule", "response_add", "myapp.admin", "get_min_num", "tag", "get_list_display", "enum", "address", "look", "namespace", "|", "change_list.html", "topics", "display", "h1", "true", "search_form.html", "*", "framework", "structure", "screens", "relations", "repr", "search", "model_name", "modelform", "radio_fields", "myapp.widgets", "dark_mode.css", "richtexteditorwidget", "modeladmin.search_fields", "django.urls", "change_list_object_tools.html", "sortable_by", "forms", "initial_value", "password_reset", "features", "feature", "myproject.admin", "useradmin", "modeladmin", "key", "collection", "parameters", "change_url", "members", ".", "zone", "state", "dictionary", "fashion", "urlconf", "app_url", "super().__init__(*args", "passwordresetcompleteview", "formfield_for_manytomany", "permissions", "characters", "get_changelist", "assets", "myadminsite", "advanced_site", "modeladmin.list_select_related", "binarytreeadmin", "modelform_factory", "error", "inlinemodeladmin.get_min_num", "save_on_top", "add_view", "design", "template", "inline", "improperlyconfigured", "debug", "control", "istartswith", "has_view_permission", "modeladmin.fieldsets", "change_view", "selection", "django.jquery", "%", "setting", "static", "order", "stage", "django.contrib.sessions", "get_urls", "documentation", "-", "basis", "prepopulated_fields_js.html", "style", "is_staff", "specifies", "pk", "queryset.datetimes", "application", "admin_order_field", "response_delete", "my_styles.css", "get_change_message", "fk_name", "modelformset_factory", "adminsite.get_log_entries", "table", "customization", "get_prepopulated_fields", "iexact", "unordered_list", "get_form", "behavior", "get_edited_object", "system", "changelist", "content_object", "maps", "conflicts", "modules", "str", "list_filter", "files", "query", "choiceadmin", "navigation", "phrases", "popup_response_template", "super().save_model", "following", "author_first_name", "import", "adminsite.admin_view", "instance(s", "bar", "'", "datefield", "information", "get_fields", "upload_to", "paths", "json", "class='errors'>i", "result", "#", "get_absolute_url", "to_person", "point", "section", "idea", "self.my_view", "versions", "counterparts", "¶", "request.current_app", "log_entries", "init", "urls.py", "autodiscovery", "has_change_permission", "fg", "user.is_active", "adminsite", "prepends", "max_num", "tracks", "definition", "member", "born_in_fifties", "couple", "get_app_list", "django.contrib.admin.models", "layout", "change", "search_term_as_int", "basic_site", "sites", "precedence", "format", "haystack", "word", "list_display_links", "example", "flatpageadmin", "actions_on_top", "ordering", "@display", "djangotemplates", "year", "identifier", "min_num", "has_permission", "value", "functions", "full_name", "get_autocomplete_fields", "icon", "definitions", "int", "showfacets", "facet", "source", "genericstackedinline", "birth", "short_description", "exclude", "behaves", "cities", "custom_admin_site", "blog", "indicating", "deleted_objects", "save", "imageinline", "c", "html", "positiveintegerfield", "needs", "examples", "city", "django.db", "slugs", "things", "exposure", "modeladmin.get_readonly_fields", "vars", "details", "slug", "adminsite.urls", "inlinemodeladmin", "modeladmin.fields", "clean_name", "prefers", "override", "form", "slugfield", "my_view", "object", "genericinlinemodeladmin", "root", "deletions", "poll", "httprequest", "warning", "asset", "one", "attributes", "comparison", "postgresql", "my_code.js", "library", "privacy", "someotherinline", "returns", "down", "car", "friendship", "django.contrib.admin.sites", "tracking", "actions_selection_counter", "parent", "db_field", "window", "response_change", "issue", "modeladmin.autocomplete_fields", "my_urls", "post_url_continue", "div", "myapp", "store", "multiple", "password", "admin_password_reset", "drill", "modeladmin.readonly_fields", "sequence", "dates", "api", "note", "box", "horizontal", "upper(\"polls_choice\"", "jquery.min.js", "inlinemodeladmin.extra", "admin.py", "get_log_entries", "valueerror", "level", "projects", "django", "message", "fact", "genericforeignkey", "has_absolute_url", "linebreak", "save_model", "get_readonly_fields", "parameter", "validation", "lot", "text", "get_osm_info", "request.user", "field", "get_inlines", "inclusion", "strings", "jquery.init.js", "relation", "self.name", "password_change_done", "weakset", "formsets", "libraries", "get_formsets_with_inlines", "superclass", "=", "column-<field_name", "myinline", "objects", "language", "user__email=user@example.com", "django.db.models.functions", "monty", "defaults", ".models", "scheme", "verbose_name", "ability", "password_change_template", "django.utils.html.escape", "implementation", "lists", "index", "hook", "wrapper", "callable", "counts", "interface", "+", "myarticleadminform", "django.views.decorators.cache.never_cache", "declarations", "admin_urlname", "login_form", "birth_date_view", "save_as_continue", "app_list", "delete_queryset", "button", "^", "django.contrib.auth.context_processors.auth", "select_related('author", "obj", "see", "staticfiles", "change_list_template", "autodiscover", "total", "widgets", "auditentryadmin", "admin/", "templates", "dropdown", "object_history_template", "reader", "field_options", "list_max_show_all", "inlineformset_factory", "capital", "tabularinline", "myadminformset", "time", "controls", "list_per_page", "reality", "count", "cascade", "loader", "modeladmin.list_display", "property", "middleware", "category", "delete", "queryset", "extras", "glass", "args", "i18n", "decade_born_in", "solr", "list_select_related", "lowercase", "site", "change_list_results.html", "organization", "my_app", "d", "css", "get_changelist_formset", "3.7.1", "sub", "record", "subclasses", "index_template", "get_inline_instances", "app_index_template", "formfield_for_choice_field", "groups", "adminsite.index_template", "john", "customizations", "paginator.count", "get_fieldsets", "load", "startproject", "fields", "output", "myadmin", "action_flag", "django.contrib.flatpages.models", "login_url", "static_url", "icontains", "copy", "custom", "decorator", "f", "books", "methods", "actions_on_bottom", "winston%", "side", "pagination", "keyword", "update", "browsers", "password_change_done_template", "same", "fonts", "none", "urls", "variables", "allow", "shares", "published_year", "base", "process", "plugins", "access", "veto", "command", "javascript", ">", "reset", "js", "auth_views", "show_change_link", "considerations", "modeladmin.get_paginator", "email", "has_module_perms", "production", "authoradmin", "content", "mymodel", "show_facets", "caching", "--primary", "end", "deployment", "color", "user.is_staff", "authorization", "foreign_key__related_fieldname", "bunch", "flag", "applications", "request", "include", "myproject.admin_site", "publish_date", "generictabularinline", "lennon%", "tables", "mapping", "current_app", "has_delete_permission", "search_term", "password_reset_done", "href", "verbose_name_plural", "createsuperuser", "a", "reuses", "data", "adminsite.site_title", "widget", "polls", "passwordresetconfirmview", "contenttype", "modeladmin.empty_value_display", "lookups", "pub_date", "options", "group", "sidebar", "messagemiddleware", "may_have_duplicates", "some_other_field", "is", "dependencies", "filtering", "notes", "references", "submission", "’s", "patterns", "extra", "context_processors", "templateresponse", "drilldown", "formset", "response", "search_fields", "user__email", "shortcut", "editing", "description", "dashes", "kwargs", "blogadmin", "superuser", "keys", "append", "s", "adminsite.site_url", "sql", "flatpage", "toggle", "self.admin_site.name", "author", "path", "defining", "tools", "directory", "site_header", "get_formset", "dirs", "contenttypes", "elements", "get_changeform_initial_data", "countryadminform", "module", "apps", "arguments", "john%", "pagination.html", "subpath", "criteria", "last_name", "themes", "modeladmin.show_facets", "/admin/", "delete_confirmation_template", "context", "add", "friends", "hooks", "get_list_filter", "purpose", "layouts", "models", "disclosure", "orphans", "pages", "detail", "superusers", "caveats", "jquery", "sometemplate.html", "model_count", "registry", "get_queryset", "row", "title", "call", "obj_display", "get_paginator", "subset", "django.contrib.admin", "site_title", "log", "edit", "perms", "website", "limit_choices_to", "onetoonefield", "confirmation", "inlinemodeladmin.get_max_num", "readonly_fields", "bookinline", "shortcuts", "image", "support", "viewsitelink", "counter", "types", "collapse", "js=['admin", "changes", "suspiciousoperation", "django.contrib", "filter", "problems", "grid", "booleanfield", "rules", "show_full_result_count", "formfield_for_foreignkey", "false", "save_as", "product", "unregister", "self.admin_site.admin_view", "management", "filter_vertical", "prefix", "group.members.through", "winston", "stackedinline", "_", "password_change", "heading", "feedback", "radio", "model.delete", "check", "adminconfig", "requirement", "inputs", "is_superuser", "passwordresetview", "metadata", "delete_selected_confirmation_template", "values", "cases", "solution", "change_form.html", "lennon", "rank", "fieldval", "new", "productadmin", "notation", "times", "super", "logentry", "redirect_field_name", "item", "permission", "django.contrib.admin.views.main", "friendshipinline", "get_changelist_form", "media", "^admin/", "autocomplete_fields", "prepopulated_fields", "subdirectories", "logout_template", "spaces", "inlinemodeladmin.min_num", "duplicates", "list_display", "fieldsets", "show", "auth_user_model", "listing", "format_html", "raw_id_fields", "input", "fieldset", "contrib.messages", "usage", "django.contrib.messages.add_message", "modeladmin.get_formsets_with_inlines", "entries", "model", "my_property", "max_length", "adminsite.site_header", "validationerror", "countryadmin", "choice", "sessionmiddleware", "modeladmin.ordering", "letters", "purposes", "get_ordering", "results", "osm_data", "span", "get_deleted_objects", "use_tz", "change_form_object_tools.html", "modeladmin.delete_model", "checks", "date_hierarchy", "n’t", "possibilities", "groupadmin", "get_search_results", "jquery.js", "installed_apps", "get_max_num", "discovery", "case", "address.</span", "get_model_admin", "class", "number", "choices", "redirect", "password_reset_complete", "return", "tuples", "decade", "constant", "columns", "is_popup", "super().delete_model", "simpleadminconfig", "action", "attribute", "filter_horizontal", "function", "ones", "registers", "li", "string", "city__name", "drop", "list", "bit", "get_list_display_links", "question", "history_view", "actions", "loading", "django.contrib.admin.apps", "confusion", "view", "app", "change_message", "uses", "parts", "list_editable", "presence", "formfield", "datetimefield", "i", "blue", "user", "binarytree", "part", "file", "read", "queries", "buttons", "hyphen", "changelist_view", "modeladmin.get_search_results", "modeladmin.list_display_links", "datasets", "operations", "upper_case_name", "notice", "get", "custom_initial_value", "enable_nav_sidebar", "history", "password_reset_confirm", "fieldname", "model_or_iterable", "hint", "saving", "mode", "timestamp", "django.contrib.admin.exceptions", "names", "technique", "signals", "enumeration", "clause", "meta.exclude", "object_id", "modification", "expressions", "bad", "django.template.loaders.app_directories", "myform", "get_sortable_by", "delete_model", "membershipinline", "extrastyle", "adminsite.enable_nav_sidebar", "document", "representation", "tags", "date", "set", "django.contrib.auth", "from_friends", "autofield", "django.contrib.auth.middleware", "functionality", "textfield", "modelform.__init", "foreignkey", "cleaned_data", "database", "relationship", "construction", "crud", "reverse", "color_code", "loaders", "modeladmin.get_form", "select2", "theme", "reference", "instance", "resources", "code", "overhead", "endblock", "basemodelformset", "links", "appconfig", "modeladmin.prepopulated_fields", "myproject.apps", "customizes", "entry", "step", "@admin", "catch", "django.contrib.contenttypes", "colors"], "type": "documentation"},
{"title": " packages", "url": "https://docs.djangoproject.com/en/5.1/ref/contrib/", "content": "contrib packages ¶ Django aims to follow Python’s “batteries included” philosophy . It ships with a variety of extra, optional tools\nthat solve common web development problems. This code lives in django/contrib in the Django distribution. This document\ngives a rundown of the packages in contrib , along with any dependencies\nthose packages have. Including contrib packages in INSTALLED_APPS For most of these add-ons – specifically, the add-ons that include either\nmodels or template tags – you’ll need to add the package name (e.g., 'django.contrib.redirects' ) to your INSTALLED_APPS setting\nand rerun manage.py migrate . The Django admin site django.contrib.auth The contenttypes framework The flatpages app GeoDjango django.contrib.humanize The messages framework django.contrib.postgres The redirects app The sitemap framework The “sites” framework The staticfiles app The syndication feed framework admin ¶ The automatic Django administrative interface. For more information, see Tutorial 2 and the admin documentation . Requires the auth and contenttypes contrib packages to be installed. auth ¶ Django’s authentication framework. See User authentication in Django . contenttypes ¶ A light framework for hooking into “types” of content, where each installed\nDjango model is a separate content type. See the contenttypes documentation . flatpages ¶ A framework for managing “flat” HTML content in a database. See the flatpages documentation . Requires the sites contrib package to be installed as well. gis ¶ A world-class geospatial framework built on top of Django, that enables\nstorage, manipulation and display of spatial data. See the GeoDjango documentation for more. humanize ¶ A set of Django template filters useful for adding a “human touch” to data. See the humanize documentation . messages ¶ A framework for storing and retrieving temporary cookie- or session-based\nmessages See the messages documentation . postgres ¶ A collection of PostgreSQL specific features. See the contrib.postgres documentation . redirects ¶ A framework for managing redirects. See the redirects documentation . sessions ¶ A framework for storing data in anonymous sessions. See the sessions documentation . sites ¶ A light framework that lets you operate multiple websites off of the same\ndatabase and Django installation. It gives you hooks for associating objects to\none or more sites. See the sites documentation . sitemaps ¶ A framework for generating Google sitemap XML files. See the sitemaps documentation . syndication ¶ A framework for generating syndication feeds, in RSS and Atom, quite easily. See the syndication documentation . Other add-ons ¶ If you have an idea for functionality to include in contrib , let us know!\nCode it up, and post it to the django-users mailing list.", "keywords": ["google", "interface", "type", "feed", "template", "staticfiles", "types", "documentation", "distribution", "problems", "development", "sitemaps", "django.contrib.redirects", "migrate", "site", "files", "messages", "information", "manipulation", "philosophy", "variety", "idea", "authentication", "¶", "rundown", "atom", "web", "geodjango", "rss", "tutorial", "model", "sites", "package", "postgres", "contrib", "top", "cookie-", "session", "users", "installed_apps", "syndication", "content", "ons", "class", "xml", "redirects", "touch", "html", "gis", "list", "data", "app", "name", "user", "flatpages", "world", "postgresql", "dependencies", "admin", "contrib.postgres", "installation", "python", "batteries", "sitemap", "sessions", "storage", "django", "tools", "feeds", "auth", "display", "contenttypes", "document", "tags", "set", "django.contrib.auth", "framework", "functionality", "packages", "mailing", "database", "humanize", "add", "websites", "hooks", "features", "code", "models", "objects", "collection"], "type": "documentation"},
{"title": "Clickjacking Protection", "url": "https://docs.djangoproject.com/en/5.1/ref/clickjacking/", "content": "Clickjacking Protection ¶ The clickjacking middleware and decorators provide easy-to-use protection\nagainst clickjacking .  This type of attack occurs when a malicious site\ntricks a user into clicking on a concealed element of another site which they\nhave loaded in a hidden frame or iframe. An example of clickjacking ¶ Suppose an online store has a page where a logged in user can click “Buy Now” to\npurchase an item. A user has chosen to stay logged into the store all the time\nfor convenience. An attacker site might create an “I Like Ponies” button on one\nof their own pages, and load the store’s page in a transparent iframe such that\nthe “Buy Now” button is invisibly overlaid on the “I Like Ponies” button. If the\nuser visits the attacker’s site, clicking “I Like Ponies” will cause an\ninadvertent click on the “Buy Now” button and an unknowing purchase of the item. Preventing clickjacking ¶ Modern browsers honor the X-Frame-Options HTTP header that indicates whether\nor not a resource is allowed to load within a frame or iframe. If the response\ncontains the header with a value of SAMEORIGIN then the browser will only\nload the resource in a frame if the request originated from the same site. If\nthe header is set to DENY then the browser will block the resource from\nloading in a frame no matter which site made the request. Django provides a few ways to include this header in responses from your site: A middleware that sets the header in all responses. A set of view decorators that can be used to override the middleware or to\nonly set the header for certain views. The X-Frame-Options HTTP header will only be set by the middleware or view\ndecorators if it is not already present in the response. How to use it ¶ Setting X-Frame-Options for all responses ¶ To set the same X-Frame-Options value for all responses in your site, put 'django.middleware.clickjacking.XFrameOptionsMiddleware' to MIDDLEWARE : MIDDLEWARE = [ ... , \"django.middleware.clickjacking.XFrameOptionsMiddleware\" , ... , ] This middleware is enabled in the settings file generated by startproject . By default, the middleware will set the X-Frame-Options header to DENY for every outgoing HttpResponse . If you want any other value for\nthis header instead, set the X_FRAME_OPTIONS setting: X_FRAME_OPTIONS = \"SAMEORIGIN\" When using the middleware there may be some views where you do not want the X-Frame-Options header set. For those cases, you can use a view decorator\nthat tells the middleware not to set the header: from django.http import HttpResponse from django.views.decorators.clickjacking import xframe_options_exempt @xframe_options_exempt def ok_to_load_in_a_frame ( request ): return HttpResponse ( \"This page is safe to load in a frame on any site.\" ) Note If you want to submit a form or access a session cookie within a frame or\niframe, you may need to modify the CSRF_COOKIE_SAMESITE or SESSION_COOKIE_SAMESITE settings. Changed in Django 5.0: Support for wrapping asynchronous view functions was added to the @xframe_options_exempt decorator. Setting X-Frame-Options per view ¶ To set the X-Frame-Options header on a per view basis, Django provides these\ndecorators: from django.http import HttpResponse from django.views.decorators.clickjacking import xframe_options_deny from django.views.decorators.clickjacking import xframe_options_sameorigin @xframe_options_deny def view_one ( request ): return HttpResponse ( \"I won't display in any frame!\" ) @xframe_options_sameorigin def view_two ( request ): return HttpResponse ( \"Display in a frame if it's from the same origin as me.\" ) Note that you can use the decorators in conjunction with the middleware. Use of\na decorator overrides the middleware. Changed in Django 5.0: Support for wrapping asynchronous view functions was added to the @xframe_options_deny and @xframe_options_sameorigin decorators. Limitations ¶ The X-Frame-Options header will only protect against clickjacking in modern browsers .", "keywords": ["response", "views", "import", "iframe", "store", "ways", "limitations", "item", "view_one", "browser", "request", "attacker", "type", "ponies", "xframe_options_exempt", "button", "django.middleware.clickjacking", "startproject", "buy", "django", "httpresponse", "return", "¶", "clicking", "default", "csrf_cookie_samesite", "support", "resource", "attack", "xframe_options_sameorigin", "conjunction", "purchase", "decorator", "set", "basis", "-", "def", "ok_to_load_in_a_frame", "x", "protection", "inadvertent", "browsers", "settings", "element", "time", "http", "page", "view", "decorators", "form", "middleware", "suppose", "options", "access", "cookie", "user", "origin", "header", "example", "convenience", "=", "pages", "file", "sameorigin", "session", "session_cookie_samesite", "frame", "site", "value", "x_frame_options", "responses", "functions", "xframe_options_deny", "cases", "clickjacking", "use"], "type": "documentation"},
{"title": "Class-based generic views - flattened index", "url": "https://docs.djangoproject.com/en/5.1/ref/class-based-views/flattened-index/", "content": "Class-based generic views - flattened index ¶ This index provides an alternate organization of the reference documentation\nfor class-based views. For each view, the effective attributes and methods from\nthe class tree are represented under that view. For the reference\ndocumentation organized by the class which defines the behavior, see Class-based views . See also Classy Class-Based Views provides a nice interface\nto navigate the class hierarchy of the built-in class-based views. Simple generic views ¶ View ¶ class View ¶ Attributes (with optional accessor): http_method_names Methods as_view() dispatch() head() http_method_not_allowed() setup() TemplateView ¶ class TemplateView ¶ Attributes (with optional accessor): content_type extra_context http_method_names response_class [ render_to_response() ] template_engine template_name [ get_template_names() ] Methods as_view() dispatch() get() get_context_data() head() http_method_not_allowed() render_to_response() setup() RedirectView ¶ class RedirectView ¶ Attributes (with optional accessor): http_method_names pattern_name permanent query_string url [ get_redirect_url() ] Methods as_view() delete() dispatch() get() head() http_method_not_allowed() options() post() put() setup() Detail Views ¶ DetailView ¶ class DetailView ¶ Attributes (with optional accessor): content_type context_object_name [ get_context_object_name() ] extra_context http_method_names model pk_url_kwarg query_pk_and_slug queryset [ get_queryset() ] response_class [ render_to_response() ] slug_field [ get_slug_field() ] slug_url_kwarg template_engine template_name [ get_template_names() ] template_name_field template_name_suffix Methods as_view() dispatch() get() get_context_data() get_object() head() http_method_not_allowed() render_to_response() setup() List Views ¶ ListView ¶ class ListView ¶ Attributes (with optional accessor): allow_empty [ get_allow_empty() ] content_type context_object_name [ get_context_object_name() ] extra_context http_method_names model ordering [ get_ordering() ] paginate_by [ get_paginate_by() ] paginate_orphans [ get_paginate_orphans() ] paginator_class queryset [ get_queryset() ] response_class [ render_to_response() ] template_engine template_name [ get_template_names() ] template_name_suffix Methods as_view() dispatch() get() get_context_data() get_paginator() head() http_method_not_allowed() paginate_queryset() render_to_response() setup() Editing views ¶ FormView ¶ class FormView ¶ Attributes (with optional accessor): content_type extra_context form_class [ get_form_class() ] http_method_names initial [ get_initial() ] prefix [ get_prefix() ] response_class [ render_to_response() ] success_url [ get_success_url() ] template_engine template_name [ get_template_names() ] Methods as_view() dispatch() form_invalid() form_valid() get() get_context_data() get_form() get_form_kwargs() http_method_not_allowed() post() put() setup() CreateView ¶ class CreateView ¶ Attributes (with optional accessor): content_type context_object_name [ get_context_object_name() ] extra_context fields form_class [ get_form_class() ] http_method_names initial [ get_initial() ] model pk_url_kwarg prefix [ get_prefix() ] query_pk_and_slug queryset [ get_queryset() ] response_class [ render_to_response() ] slug_field [ get_slug_field() ] slug_url_kwarg success_url [ get_success_url() ] template_engine template_name [ get_template_names() ] template_name_field template_name_suffix Methods as_view() dispatch() form_invalid() form_valid() get() get_context_data() get_form() get_form_kwargs() get_object() head() http_method_not_allowed() post() put() render_to_response() setup() UpdateView ¶ class UpdateView ¶ Attributes (with optional accessor): content_type context_object_name [ get_context_object_name() ] extra_context fields form_class [ get_form_class() ] http_method_names initial [ get_initial() ] model pk_url_kwarg prefix [ get_prefix() ] query_pk_and_slug queryset [ get_queryset() ] response_class [ render_to_response() ] slug_field [ get_slug_field() ] slug_url_kwarg success_url [ get_success_url() ] template_engine template_name [ get_template_names() ] template_name_field template_name_suffix Methods as_view() dispatch() form_invalid() form_valid() get() get_context_data() get_form() get_form_kwargs() get_object() head() http_method_not_allowed() post() put() render_to_response() setup() DeleteView ¶ class DeleteView ¶ Attributes (with optional accessor): content_type context_object_name [ get_context_object_name() ] extra_context http_method_names model pk_url_kwarg query_pk_and_slug queryset [ get_queryset() ] response_class [ render_to_response() ] slug_field [ get_slug_field() ] slug_url_kwarg success_url [ get_success_url() ] template_engine template_name [ get_template_names() ] template_name_field template_name_suffix Methods as_view() delete() dispatch() get() get_context_data() get_object() head() http_method_not_allowed() post() render_to_response() setup() Date-based views ¶ ArchiveIndexView ¶ class ArchiveIndexView ¶ Attributes (with optional accessor): allow_empty [ get_allow_empty() ] allow_future [ get_allow_future() ] content_type context_object_name [ get_context_object_name() ] date_field [ get_date_field() ] extra_context http_method_names model ordering [ get_ordering() ] paginate_by [ get_paginate_by() ] paginate_orphans [ get_paginate_orphans() ] paginator_class queryset [ get_queryset() ] response_class [ render_to_response() ] template_engine template_name [ get_template_names() ] template_name_suffix Methods as_view() dispatch() get() get_context_data() get_date_list() get_dated_items() get_dated_queryset() get_paginator() head() http_method_not_allowed() paginate_queryset() render_to_response() setup() YearArchiveView ¶ class YearArchiveView ¶ Attributes (with optional accessor): allow_empty [ get_allow_empty() ] allow_future [ get_allow_future() ] content_type context_object_name [ get_context_object_name() ] date_field [ get_date_field() ] extra_context http_method_names make_object_list [ get_make_object_list() ] model ordering [ get_ordering() ] paginate_by [ get_paginate_by() ] paginate_orphans [ get_paginate_orphans() ] paginator_class queryset [ get_queryset() ] response_class [ render_to_response() ] template_engine template_name [ get_template_names() ] template_name_suffix year [ get_year() ] year_format [ get_year_format() ] Methods as_view() dispatch() get() get_context_data() get_date_list() get_dated_items() get_dated_queryset() get_paginator() head() http_method_not_allowed() paginate_queryset() render_to_response() setup() MonthArchiveView ¶ class MonthArchiveView ¶ Attributes (with optional accessor): allow_empty [ get_allow_empty() ] allow_future [ get_allow_future() ] content_type context_object_name [ get_context_object_name() ] date_field [ get_date_field() ] extra_context http_method_names model month [ get_month() ] month_format [ get_month_format() ] ordering [ get_ordering() ] paginate_by [ get_paginate_by() ] paginate_orphans [ get_paginate_orphans() ] paginator_class queryset [ get_queryset() ] response_class [ render_to_response() ] template_engine template_name [ get_template_names() ] template_name_suffix year [ get_year() ] year_format [ get_year_format() ] Methods as_view() dispatch() get() get_context_data() get_date_list() get_dated_items() get_dated_queryset() get_next_month() get_paginator() get_previous_month() head() http_method_not_allowed() paginate_queryset() render_to_response() setup() WeekArchiveView ¶ class WeekArchiveView ¶ Attributes (with optional accessor): allow_empty [ get_allow_empty() ] allow_future [ get_allow_future() ] content_type context_object_name [ get_context_object_name() ] date_field [ get_date_field() ] extra_context http_method_names model ordering [ get_ordering() ] paginate_by [ get_paginate_by() ] paginate_orphans [ get_paginate_orphans() ] paginator_class queryset [ get_queryset() ] response_class [ render_to_response() ] template_engine template_name [ get_template_names() ] template_name_suffix week [ get_week() ] week_format [ get_week_format() ] year [ get_year() ] year_format [ get_year_format() ] Methods as_view() dispatch() get() get_context_data() get_date_list() get_dated_items() get_dated_queryset() get_paginator() head() http_method_not_allowed() paginate_queryset() render_to_response() setup() DayArchiveView ¶ class DayArchiveView ¶ Attributes (with optional accessor): allow_empty [ get_allow_empty() ] allow_future [ get_allow_future() ] content_type context_object_name [ get_context_object_name() ] date_field [ get_date_field() ] day [ get_day() ] day_format [ get_day_format() ] extra_context http_method_names model month [ get_month() ] month_format [ get_month_format() ] ordering [ get_ordering() ] paginate_by [ get_paginate_by() ] paginate_orphans [ get_paginate_orphans() ] paginator_class queryset [ get_queryset() ] response_class [ render_to_response() ] template_engine template_name [ get_template_names() ] template_name_suffix year [ get_year() ] year_format [ get_year_format() ] Methods as_view() dispatch() get() get_context_data() get_date_list() get_dated_items() get_dated_queryset() get_next_day() get_next_month() get_paginator() get_previous_day() get_previous_month() head() http_method_not_allowed() paginate_queryset() render_to_response() setup() TodayArchiveView ¶ class TodayArchiveView ¶ Attributes (with optional accessor): allow_empty [ get_allow_empty() ] allow_future [ get_allow_future() ] content_type context_object_name [ get_context_object_name() ] date_field [ get_date_field() ] day [ get_day() ] day_format [ get_day_format() ] extra_context http_method_names model month [ get_month() ] month_format [ get_month_format() ] ordering [ get_ordering() ] paginate_by [ get_paginate_by() ] paginate_orphans [ get_paginate_orphans() ] paginator_class queryset [ get_queryset() ] response_class [ render_to_response() ] template_engine template_name [ get_template_names() ] template_name_suffix year [ get_year() ] year_format [ get_year_format() ] Methods as_view() dispatch() get() get_context_data() get_date_list() get_dated_items() get_dated_queryset() get_next_day() get_next_month() get_paginator() get_previous_day() get_previous_month() head() http_method_not_allowed() paginate_queryset() render_to_response() setup() DateDetailView ¶ class DateDetailView ¶ Attributes (with optional accessor): allow_future [ get_allow_future() ] content_type context_object_name [ get_context_object_name() ] date_field [ get_date_field() ] day [ get_day() ] day_format [ get_day_format() ] extra_context http_method_names model month [ get_month() ] month_format [ get_month_format() ] pk_url_kwarg query_pk_and_slug queryset [ get_queryset() ] response_class [ render_to_response() ] slug_field [ get_slug_field() ] slug_url_kwarg template_engine template_name [ get_template_names() ] template_name_field template_name_suffix year [ get_year() ] year_format [ get_year_format() ] Methods as_view() dispatch() get() get_context_data() get_next_day() get_next_month() get_object() get_previous_day() get_previous_month() head() http_method_not_allowed() render_to_response() setup()", "keywords": ["pk_url_kwarg", "index", "listview", "query_string", "interface", "get_template_names", "get_day_format", "template_name_suffix", "url", "detailview", "get_month", "documentation", "get_dated_items", "paginate_queryset", "day", "dispatch", "template_engine", "queryset", "render_to_response", "form_class", "yeararchiveview", "get_success_url", "query_pk_and_slug", "behavior", "get_form", "datedetailview", "put", "organization", "templateview", "paginate_by", "views", "get_form_class", "updateview", "get_make_object_list", "get_dated_queryset", "archiveindexview", "redirectview", "get_date_list", "¶", "montharchiveview", "paginate_orphans", "get_day", "methods", "model", "get_slug_field", "deleteview", "get_ordering", "template_name_field", "response_class", "year", "content_type", "formview", "tree", "get_object", "week", "get_date_field", "accessor", "class", "http_method_names", "get_paginate_orphans", "get_week_format", "get_month_format", "get_context_data", "slug_url_kwarg", "get_year_format", "list", "month", "get_previous_month", "dayarchiveview", "setup", "view", "as_view", "classy", "options", "attributes", "hierarchy", "success_url", "get_previous_day", "get", "get_year", "editing", "template_name", "get_allow_future", "make_object_list", "get_prefix", "get_form_kwargs", "get_next_month", "post", "get_redirect_url", "get_paginate_by", "get_week", "date", "form_valid", "week_format", "head", "weekarchiveview", "get_next_day", "reference", "day_format", "todayarchiveview", "detail", "createview", "get_context_object_name", "get_queryset", "context_object_name", "get_paginator"], "type": "documentation"},
{"title": "Class-based views mixins", "url": "https://docs.djangoproject.com/en/5.1/ref/class-based-views/mixins/", "content": "Class-based views mixins ¶ Class-based views API reference. For introductory material, see Using mixins with class-based views . Simple mixins Single object mixins Multiple object mixins Editing mixins Date-based mixins", "keywords": ["views", "mixins", "class", "material", "api", "date", "object", "reference"], "type": "documentation"},
{"title": "Generic date views", "url": "https://docs.djangoproject.com/en/5.1/ref/class-based-views/generic-date-based/", "content": "Generic date views ¶ Date-based generic views, provided in django.views.generic.dates , are\nviews for displaying drilldown pages for date-based data. Note Some of the examples on this page assume that an Article model has been\ndefined as follows in myapp/models.py : from django.db import models from django.urls import reverse class Article ( models . Model ): title = models . CharField ( max_length = 200 ) pub_date = models . DateField () def get_absolute_url ( self ): return reverse ( \"article-detail\" , kwargs = { \"pk\" : self . pk }) ArchiveIndexView ¶ class ArchiveIndexView [source] ¶ A top-level index page showing the “latest” objects, by date. Objects with\na date in the future are not included unless you set allow_future to True . Ancestors (MRO) django.views.generic.list.MultipleObjectTemplateResponseMixin django.views.generic.base.TemplateResponseMixin django.views.generic.dates.BaseArchiveIndexView django.views.generic.dates.BaseDateListView django.views.generic.list.MultipleObjectMixin django.views.generic.dates.DateMixin django.views.generic.base.View Context In addition to the context provided by django.views.generic.list.MultipleObjectMixin (via django.views.generic.dates.BaseDateListView ), the template’s\ncontext will be: date_list : A QuerySet object containing all years that have objects available according to queryset , represented as datetime.datetime objects, in\ndescending order. Notes Uses a default context_object_name of latest . Uses a default template_name_suffix of _archive . Defaults to providing date_list by year, but this can be altered to\nmonth or day using the attribute date_list_period . This also applies\nto all subclass views. Example myapp/urls.py : from django.urls import path from django.views.generic.dates import ArchiveIndexView from myapp.models import Article urlpatterns = [ path ( \"archive/\" , ArchiveIndexView . as_view ( model = Article , date_field = \"pub_date\" ), name = \"article_archive\" , ), ] Example myapp/article_archive.html : < ul > {% for article in latest %} < li > {{ article.pub_date }} : {{ article.title }} </ li > {% endfor %} </ ul > This will output all articles. YearArchiveView ¶ class YearArchiveView [source] ¶ A yearly archive page showing all available months in a given year. Objects\nwith a date in the future are not displayed unless you set allow_future to True . Ancestors (MRO) django.views.generic.list.MultipleObjectTemplateResponseMixin django.views.generic.base.TemplateResponseMixin django.views.generic.dates.BaseYearArchiveView django.views.generic.dates.YearMixin django.views.generic.dates.BaseDateListView django.views.generic.list.MultipleObjectMixin django.views.generic.dates.DateMixin django.views.generic.base.View make_object_list ¶ A boolean specifying whether to retrieve the full list of objects for\nthis year and pass those to the template. If True , the list of\nobjects will be made available to the context. If False , the None queryset will be used as the object list. By default, this is False . get_make_object_list () ¶ Determine if an object list will be returned as part of the context.\nReturns make_object_list by default. Context In addition to the context provided by django.views.generic.list.MultipleObjectMixin (via django.views.generic.dates.BaseDateListView ), the template’s\ncontext will be: date_list : A QuerySet object containing all months that have objects available according to queryset , represented as datetime.datetime objects, in\nascending order. year : A date object\nrepresenting the given year. next_year : A date object\nrepresenting the first day of the next year, according to allow_empty and allow_future . previous_year : A date object\nrepresenting the first day of the previous year, according to allow_empty and allow_future . Notes Uses a default template_name_suffix of _archive_year . Example myapp/views.py : from django.views.generic.dates import YearArchiveView from myapp.models import Article class ArticleYearArchiveView ( YearArchiveView ): queryset = Article . objects . all () date_field = \"pub_date\" make_object_list = True allow_future = True Example myapp/urls.py : from django.urls import path from myapp.views import ArticleYearArchiveView urlpatterns = [ path ( \"<int:year>/\" , ArticleYearArchiveView . as_view (), name = \"article_year_archive\" ), ] Example myapp/article_archive_year.html : < ul > {% for date in date_list %} < li > {{ date | date }} </ li > {% endfor %} </ ul > < div > < h1 > All Articles for {{ year | date :\"Y\" }} </ h1 > {% for obj in object_list %} < p > {{ obj.title }} - {{ obj.pub_date | date :\"F j, Y\" }} </ p > {% endfor %} </ div > MonthArchiveView ¶ class MonthArchiveView [source] ¶ A monthly archive page showing all objects in a given month. Objects with a\ndate in the future are not displayed unless you set allow_future to True . Ancestors (MRO) django.views.generic.list.MultipleObjectTemplateResponseMixin django.views.generic.base.TemplateResponseMixin django.views.generic.dates.BaseMonthArchiveView django.views.generic.dates.YearMixin django.views.generic.dates.MonthMixin django.views.generic.dates.BaseDateListView django.views.generic.list.MultipleObjectMixin django.views.generic.dates.DateMixin django.views.generic.base.View Context In addition to the context provided by MultipleObjectMixin (via BaseDateListView ), the template’s\ncontext will be: date_list : A QuerySet object containing all days that have objects available in the given month,\naccording to queryset , represented as datetime.datetime objects, in ascending order. month : A date object\nrepresenting the given month. next_month : A date object\nrepresenting the first day of the next month, according to allow_empty and allow_future . previous_month : A date object\nrepresenting the first day of the previous month, according to allow_empty and allow_future . Notes Uses a default template_name_suffix of _archive_month . Example myapp/views.py : from django.views.generic.dates import MonthArchiveView from myapp.models import Article class ArticleMonthArchiveView ( MonthArchiveView ): queryset = Article . objects . all () date_field = \"pub_date\" allow_future = True Example myapp/urls.py : from django.urls import path from myapp.views import ArticleMonthArchiveView urlpatterns = [ # Example: /2012/08/ path ( \"<int:year>/<int:month>/\" , ArticleMonthArchiveView . as_view ( month_format = \"%m\" ), name = \"archive_month_numeric\" , ), # Example: /2012/aug/ path ( \"<int:year>/<str:month>/\" , ArticleMonthArchiveView . as_view (), name = \"archive_month\" , ), ] Example myapp/article_archive_month.html : < ul > {% for article in object_list %} < li > {{ article.pub_date | date :\"F j, Y\" }} : {{ article.title }} </ li > {% endfor %} </ ul > < p > {% if previous_month %} Previous Month: {{ previous_month | date :\"F Y\" }} {% endif %} {% if next_month %} Next Month: {{ next_month | date :\"F Y\" }} {% endif %} </ p > WeekArchiveView ¶ class WeekArchiveView [source] ¶ A weekly archive page showing all objects in a given week. Objects with a\ndate in the future are not displayed unless you set allow_future to True . Ancestors (MRO) django.views.generic.list.MultipleObjectTemplateResponseMixin django.views.generic.base.TemplateResponseMixin django.views.generic.dates.BaseWeekArchiveView django.views.generic.dates.YearMixin django.views.generic.dates.WeekMixin django.views.generic.dates.BaseDateListView django.views.generic.list.MultipleObjectMixin django.views.generic.dates.DateMixin django.views.generic.base.View Context In addition to the context provided by MultipleObjectMixin (via BaseDateListView ), the template’s\ncontext will be: week : A date object\nrepresenting the first day of the given week. next_week : A date object\nrepresenting the first day of the next week, according to allow_empty and allow_future . previous_week : A date object\nrepresenting the first day of the previous week, according to allow_empty and allow_future . Notes Uses a default template_name_suffix of _archive_week . The week_format attribute is a strptime() format string\nused to parse the week number. The following values are supported: '%U' : Based on the United States week system where the week\nbegins on Sunday. This is the default value. '%W' : Similar to '%U' , except it assumes that the week\nbegins on Monday. This is not the same as the ISO 8601 week number. '%V' : ISO 8601 week number where the week begins on Monday. Example myapp/views.py : from django.views.generic.dates import WeekArchiveView from myapp.models import Article class ArticleWeekArchiveView ( WeekArchiveView ): queryset = Article . objects . all () date_field = \"pub_date\" week_format = \"%W\" allow_future = True Example myapp/urls.py : from django.urls import path from myapp.views import ArticleWeekArchiveView urlpatterns = [ # Example: /2012/week/23/ path ( \"<int:year>/week/<int:week>/\" , ArticleWeekArchiveView . as_view (), name = \"archive_week\" , ), ] Example myapp/article_archive_week.html : < h1 > Week {{ week | date :'W' }} </ h1 > < ul > {% for article in object_list %} < li > {{ article.pub_date | date :\"F j, Y\" }} : {{ article.title }} </ li > {% endfor %} </ ul > < p > {% if previous_week %} Previous Week: {{ previous_week | date :\"W\" }} of year {{ previous_week | date :\"Y\" }} {% endif %} {% if previous_week and next_week %} -- {% endif %} {% if next_week %} Next week: {{ next_week | date :\"W\" }} of year {{ next_week | date :\"Y\" }} {% endif %} </ p > In this example, you are outputting the week number. Keep in mind that week\nnumbers computed by the date template filter with the 'W' format character are not always the same as those computed by strftime() and strptime() with the '%W' format\nstring. For year 2015, for example, week numbers output by date are higher by one compared to those output by strftime() . There\nisn’t an equivalent for the '%U' strftime() format string\nin date . Therefore, you should avoid using date to\ngenerate URLs for WeekArchiveView . DayArchiveView ¶ class DayArchiveView [source] ¶ A day archive page showing all objects in a given day. Days in the future\nthrow a 404 error, regardless of whether any objects exist for future days,\nunless you set allow_future to True . Ancestors (MRO) django.views.generic.list.MultipleObjectTemplateResponseMixin django.views.generic.base.TemplateResponseMixin django.views.generic.dates.BaseDayArchiveView django.views.generic.dates.YearMixin django.views.generic.dates.MonthMixin django.views.generic.dates.DayMixin django.views.generic.dates.BaseDateListView django.views.generic.list.MultipleObjectMixin django.views.generic.dates.DateMixin django.views.generic.base.View Context In addition to the context provided by MultipleObjectMixin (via BaseDateListView ), the template’s\ncontext will be: day : A date object\nrepresenting the given day. next_day : A date object\nrepresenting the next day, according to allow_empty and allow_future . previous_day : A date object\nrepresenting the previous day, according to allow_empty and allow_future . next_month : A date object\nrepresenting the first day of the next month, according to allow_empty and allow_future . previous_month : A date object\nrepresenting the first day of the previous month, according to allow_empty and allow_future . Notes Uses a default template_name_suffix of _archive_day . Example myapp/views.py : from django.views.generic.dates import DayArchiveView from myapp.models import Article class ArticleDayArchiveView ( DayArchiveView ): queryset = Article . objects . all () date_field = \"pub_date\" allow_future = True Example myapp/urls.py : from django.urls import path from myapp.views import ArticleDayArchiveView urlpatterns = [ # Example: /2012/nov/10/ path ( \"<int:year>/<str:month>/<int:day>/\" , ArticleDayArchiveView . as_view (), name = \"archive_day\" , ), ] Example myapp/article_archive_day.html : < h1 > {{ day }} </ h1 > < ul > {% for article in object_list %} < li > {{ article.pub_date | date :\"F j, Y\" }} : {{ article.title }} </ li > {% endfor %} </ ul > < p > {% if previous_day %} Previous Day: {{ previous_day }} {% endif %} {% if previous_day and next_day %} -- {% endif %} {% if next_day %} Next Day: {{ next_day }} {% endif %} </ p > TodayArchiveView ¶ class TodayArchiveView [source] ¶ A day archive page showing all objects for today . This is exactly the\nsame as django.views.generic.dates.DayArchiveView , except today’s\ndate is used instead of the year / month / day arguments. Ancestors (MRO) django.views.generic.list.MultipleObjectTemplateResponseMixin django.views.generic.base.TemplateResponseMixin django.views.generic.dates.BaseTodayArchiveView django.views.generic.dates.BaseDayArchiveView django.views.generic.dates.YearMixin django.views.generic.dates.MonthMixin django.views.generic.dates.DayMixin django.views.generic.dates.BaseDateListView django.views.generic.list.MultipleObjectMixin django.views.generic.dates.DateMixin django.views.generic.base.View Notes Uses a default template_name_suffix of _archive_today . Example myapp/views.py : from django.views.generic.dates import TodayArchiveView from myapp.models import Article class ArticleTodayArchiveView ( TodayArchiveView ): queryset = Article . objects . all () date_field = \"pub_date\" allow_future = True Example myapp/urls.py : from django.urls import path from myapp.views import ArticleTodayArchiveView urlpatterns = [ path ( \"today/\" , ArticleTodayArchiveView . as_view (), name = \"archive_today\" ), ] Where is the example template for TodayArchiveView ? This view uses by default the same template as the DayArchiveView , which is in the previous example. If you need\na different template, set the template_name attribute to be the\nname of the new template. DateDetailView ¶ class DateDetailView [source] ¶ A page representing an individual object. If the object has a date value in\nthe future, the view will throw a 404 error by default, unless you set allow_future to True . Ancestors (MRO) django.views.generic.detail.SingleObjectTemplateResponseMixin django.views.generic.base.TemplateResponseMixin django.views.generic.dates.BaseDateDetailView django.views.generic.dates.YearMixin django.views.generic.dates.MonthMixin django.views.generic.dates.DayMixin django.views.generic.dates.DateMixin django.views.generic.detail.BaseDetailView django.views.generic.detail.SingleObjectMixin django.views.generic.base.View Context Includes the single object associated with the model specified in\nthe DateDetailView . Notes Uses a default template_name_suffix of _detail . Example myapp/urls.py : from django.urls import path from django.views.generic.dates import DateDetailView urlpatterns = [ path ( \"<int:year>/<str:month>/<int:day>/<int:pk>/\" , DateDetailView . as_view ( model = Article , date_field = \"pub_date\" ), name = \"archive_date_detail\" , ), ] Example myapp/article_detail.html : < h1 > {{ object.title }} </ h1 > Note All of the generic views listed above have matching Base views that\nonly differ in that they do not include the MultipleObjectTemplateResponseMixin (for the archive views) or SingleObjectTemplateResponseMixin (for the DateDetailView ): class BaseArchiveIndexView [source] ¶ class BaseYearArchiveView [source] ¶ class BaseMonthArchiveView [source] ¶ class BaseWeekArchiveView [source] ¶ class BaseDayArchiveView [source] ¶ class BaseTodayArchiveView [source] ¶ class BaseDateDetailView [source] ¶", "keywords": ["strptime", "multipleobjecttemplateresponsemixin", "myapp.views", "index", "v", "error", "article.title", "template_name_suffix", "template", "obj", "%", "p", "year>/<str", "article_archive_day.html", "order", "django.views.generic.detail", "datemixin", "filter", "templateresponsemixin", "month>/<int", "pk", "django.views.generic.list", "day", "archive_month_numeric", "monthmixin", "ul", "_", "week/23/", "queryset", "yeararchiveview", "datedetailview", "/2012/08/", "system", "ancestors", "views.py", "values", "multipleobjectmixin", "day>/", "boolean", "mro", "yearmixin", "strftime", "views", "import", "get_make_object_list", "w", "j", "datefield", "urlpatterns", "basedatedetailview", "allow_future", "article", "archiveindexview", "equivalent", "today", "articledayarchiveview", "#", "next", "get_absolute_url", "articleweekarchiveview", "output", "date_list", "singleobjecttemplateresponsemixin", "¶", "default", "day>/<int", "montharchiveview", "f", "basetodayarchiveview", "week>/", "model", "max_length", "page", "none", "y", "basearchiveindexview", "character", "iso", "article_archive_week.html", "archive_month", "urls", "format", "base", "article_year_archive", "mind", "example", "object.title", "archive_date_detail", "n’t", "year", "value", "obj.title", "article_archive_year.html", "daymixin", "baseyeararchiveview", "django.views.generic.dates", "years", "self", "int", "basedayarchiveview", "month>/", "source", "week", "article_detail.html", "class", "number", "archive_today", "article_archive.html", "numbers", "previous", "months", "articlemontharchiveview", "return", "year>/week/<int", "object_list", "attribute", "examples", "future", "li", "django.db", "string", "month", "list", "determine", "dayarchiveview", "nov/10/", "archive_day", "data", "next_week", "view", "as_view", "myapp.models", "django.views.generic.base", "articles", "name", "pub_date", "object", "next_day", "obj.pub_date", "monday", "part", "states", "notes", "returns", "pk>/", "endfor", "charfield", "addition", "drilldown", "sunday", "articletodayarchiveview", "div", "myapp", "template_name", "kwargs", "make_object_list", "subclass", "basedatelistview", "year>/", "path", "level", "archive", "days", "singleobjectmixin", "|", "weekmixin", "basemontharchiveview", "h1", "true", "date", "next_month", "week_format", "arguments", "weekarchiveview", "u", "date_list_period", "baseweekarchiveview", "reverse", "context", "django.urls", "previous_day", "article_archive", "united", "year>/<int", "=", "models", "todayarchiveview", "pages", "detail", "objects", "previous_year", "defaults", "previous_month", "title", "context_object_name", "articleyeararchiveview"], "type": "documentation"},
{"title": "Generic editing views", "url": "https://docs.djangoproject.com/en/5.1/ref/class-based-views/generic-editing/", "content": "Generic editing views ¶ The following views are described on this page and provide a foundation for\nediting content: django.views.generic.edit.FormView django.views.generic.edit.CreateView django.views.generic.edit.UpdateView django.views.generic.edit.DeleteView See also The messages framework contains SuccessMessageMixin , which\nfacilitates presenting messages about successful form submissions. Note Some of the examples on this page assume that an Author model has been\ndefined as follows in myapp/models.py : from django.db import models from django.urls import reverse class Author ( models . Model ): name = models . CharField ( max_length = 200 ) def get_absolute_url ( self ): return reverse ( \"author-detail\" , kwargs = { \"pk\" : self . pk }) FormView ¶ class django.views.generic.edit. FormView ¶ A view that displays a form. On error, redisplays the form with validation\nerrors; on success, redirects to a new URL. Ancestors (MRO) This view inherits methods and attributes from the following views: django.views.generic.base.TemplateResponseMixin django.views.generic.edit.BaseFormView django.views.generic.edit.FormMixin django.views.generic.edit.ProcessFormView django.views.generic.base.View Example myapp/forms.py : from django import forms class ContactForm ( forms . Form ): name = forms . CharField () message = forms . CharField ( widget = forms . Textarea ) def send_email ( self ): # send email using the self.cleaned_data dictionary pass Example myapp/views.py : from myapp.forms import ContactForm from django.views.generic.edit import FormView class ContactFormView ( FormView ): template_name = \"contact.html\" form_class = ContactForm success_url = \"/thanks/\" def form_valid ( self , form ): # This method is called when valid form data has been POSTed. # It should return an HttpResponse. form . send_email () return super () . form_valid ( form ) Example myapp/contact.html : < form method = \"post\" > {% csrf_token %} {{ form.as_p }} < input type = \"submit\" value = \"Send message\" > </ form > class django.views.generic.edit. BaseFormView ¶ A base view for displaying a form. It is not intended to be used directly,\nbut rather as a parent class of the django.views.generic.edit.FormView or other views displaying a\nform. Ancestors (MRO) This view inherits methods and attributes from the following views: django.views.generic.edit.FormMixin django.views.generic.edit.ProcessFormView CreateView ¶ class django.views.generic.edit. CreateView ¶ A view that displays a form for creating an object, redisplaying the form\nwith validation errors (if there are any) and saving the object. Ancestors (MRO) This view inherits methods and attributes from the following views: django.views.generic.detail.SingleObjectTemplateResponseMixin django.views.generic.base.TemplateResponseMixin django.views.generic.edit.BaseCreateView django.views.generic.edit.ModelFormMixin django.views.generic.edit.FormMixin django.views.generic.detail.SingleObjectMixin django.views.generic.edit.ProcessFormView django.views.generic.base.View Attributes template_name_suffix ¶ The CreateView page displayed to a GET request uses a template_name_suffix of '_form' . For\nexample, changing this attribute to '_create_form' for a view\ncreating objects for the example Author model would cause the\ndefault template_name to be 'myapp/author_create_form.html' . object ¶ When using CreateView you have access to self.object , which is\nthe object being created. If the object hasn’t been created yet, the\nvalue will be None . Example myapp/views.py : from django.views.generic.edit import CreateView from myapp.models import Author class AuthorCreateView ( CreateView ): model = Author fields = [ \"name\" ] Example myapp/author_form.html : < form method = \"post\" > {% csrf_token %} {{ form.as_p }} < input type = \"submit\" value = \"Save\" > </ form > class django.views.generic.edit. BaseCreateView ¶ A base view for creating a new object instance. It is not intended to be\nused directly, but rather as a parent class of the django.views.generic.edit.CreateView . Ancestors (MRO) This view inherits methods and attributes from the following views: django.views.generic.edit.ModelFormMixin django.views.generic.edit.ProcessFormView Methods get ( request , * args , ** kwargs ) ¶ Sets the current object instance ( self.object ) to None . post ( request , * args , ** kwargs ) ¶ Sets the current object instance ( self.object ) to None . UpdateView ¶ class django.views.generic.edit. UpdateView ¶ A view that displays a form for editing an existing object, redisplaying\nthe form with validation errors (if there are any) and saving changes to\nthe object. This uses a form automatically generated from the object’s\nmodel class (unless a form class is manually specified). Ancestors (MRO) This view inherits methods and attributes from the following views: django.views.generic.detail.SingleObjectTemplateResponseMixin django.views.generic.base.TemplateResponseMixin django.views.generic.edit.BaseUpdateView django.views.generic.edit.ModelFormMixin django.views.generic.edit.FormMixin django.views.generic.detail.SingleObjectMixin django.views.generic.edit.ProcessFormView django.views.generic.base.View Attributes template_name_suffix ¶ The UpdateView page displayed to a GET request uses a template_name_suffix of '_form' . For\nexample, changing this attribute to '_update_form' for a view\nupdating objects for the example Author model would cause the\ndefault template_name to be 'myapp/author_update_form.html' . object ¶ When using UpdateView you have access to self.object , which is\nthe object being updated. Example myapp/views.py : from django.views.generic.edit import UpdateView from myapp.models import Author class AuthorUpdateView ( UpdateView ): model = Author fields = [ \"name\" ] template_name_suffix = \"_update_form\" Example myapp/author_update_form.html : < form method = \"post\" > {% csrf_token %} {{ form.as_p }} < input type = \"submit\" value = \"Update\" > </ form > class django.views.generic.edit. BaseUpdateView ¶ A base view for updating an existing object instance. It is not intended to\nbe used directly, but rather as a parent class of the django.views.generic.edit.UpdateView . Ancestors (MRO) This view inherits methods and attributes from the following views: django.views.generic.edit.ModelFormMixin django.views.generic.edit.ProcessFormView Methods get ( request , * args , ** kwargs ) ¶ Sets the current object instance ( self.object ). post ( request , * args , ** kwargs ) ¶ Sets the current object instance ( self.object ). DeleteView ¶ class django.views.generic.edit. DeleteView ¶ A view that displays a confirmation page and deletes an existing object.\nThe given object will only be deleted if the request method is POST . If\nthis view is fetched via GET , it will display a confirmation page that\nshould contain a form that POSTs to the same URL. Ancestors (MRO) This view inherits methods and attributes from the following views: django.views.generic.detail.SingleObjectTemplateResponseMixin django.views.generic.base.TemplateResponseMixin django.views.generic.edit.BaseDeleteView django.views.generic.edit.DeletionMixin django.views.generic.edit.FormMixin django.views.generic.base.ContextMixin django.views.generic.detail.BaseDetailView django.views.generic.detail.SingleObjectMixin django.views.generic.base.View Attributes form_class ¶ Inherited from BaseDeleteView . The\nform class that will be used to confirm the request. By default django.forms.Form , resulting in an empty form that is always\nvalid. By providing your own Form subclass, you can add additional\nrequirements, such as a confirmation checkbox, for example. template_name_suffix ¶ The DeleteView page displayed to a GET request uses a template_name_suffix of '_confirm_delete' . For\nexample, changing this attribute to '_check_delete' for a view\ndeleting objects for the example Author model would cause the\ndefault template_name to be 'myapp/author_check_delete.html' . Example myapp/views.py : from django.urls import reverse_lazy from django.views.generic.edit import DeleteView from myapp.models import Author class AuthorDeleteView ( DeleteView ): model = Author success_url = reverse_lazy ( \"author-list\" ) Example myapp/author_confirm_delete.html : < form method = \"post\" > {% csrf_token %} < p > Are you sure you want to delete \" {{ object }} \"? </ p > {{ form }} < input type = \"submit\" value = \"Confirm\" > </ form > class django.views.generic.edit. BaseDeleteView ¶ A base view for deleting an object instance. It is not intended to be used\ndirectly, but rather as a parent class of the django.views.generic.edit.DeleteView . Ancestors (MRO) This view inherits methods and attributes from the following views: django.views.generic.edit.DeletionMixin django.views.generic.edit.FormMixin django.views.generic.detail.BaseDetailView", "keywords": ["confirmation", "error", "self.object", "type", "template_name_suffix", "url", "httpresponse", "author_create_form.html", "%", "p", "basedeleteview", "django.views.generic.detail", "changes", "author_check_delete.html", "def", "formmixin", "authorupdateview", "update_form", "pk", "successmessagemixin", "_", "method", "form_class", "author_confirm_delete.html", "args", "checkbox", "ancestors", "views.py", "mro", "basecreateview", "contextmixin", "views", "messages", "submissions", "updateview", "import", "baseformview", "'", "contactformview", "#", "get_absolute_url", "contact.html", "fields", "check_delete", "singleobjecttemplateresponsemixin", "¶", "default", "methods", "input", "requirements", "contactform", "update", "model", "django.forms", "max_length", "page", "none", "base", "deleteview", "access", "example", "deletionmixin", "formview", "email", "form.as_p", "value", "textarea", "content", "/thanks/", "self", "pass", "class", "authordeleteview", "request", "return", "save", "posted", "attribute", "examples", "django.db", "myapp.forms", "list", "self.cleaned_data", "data", "widget", "view", "myapp.models", "form", "django.views.generic.base", "name", "object", "attributes", "processformview", "reverse_lazy", "errors", "success_url", "charfield", "parent", "get", "myapp", "editing", "django.views.generic.edit", "template_name", "kwargs", "send_email", "subclass", "confirm_delete", "author", "post", "django", "foundation", "singleobjectmixin", "message", "validation", "*", "framework", "authorcreateview", "modelformmixin", "reverse", "django.urls", "forms", "instance", "=", "models", "detail", "baseupdateview", "createview", "objects", "create_form", "success", "author_update_form.html"], "type": "documentation"},
{"title": "Generic display views", "url": "https://docs.djangoproject.com/en/5.1/ref/class-based-views/generic-display/", "content": "Generic display views ¶ The two following generic class-based views are designed to display data. On\nmany projects they are typically the most commonly used views. DetailView ¶ class django.views.generic.detail. DetailView ¶ While this view is executing, self.object will contain the object that\nthe view is operating upon. Ancestors (MRO) This view inherits methods and attributes from the following views: django.views.generic.detail.SingleObjectTemplateResponseMixin django.views.generic.base.TemplateResponseMixin django.views.generic.detail.BaseDetailView django.views.generic.detail.SingleObjectMixin django.views.generic.base.View Method Flowchart setup() dispatch() http_method_not_allowed() get_template_names() get_slug_field() get_queryset() get_object() get_context_object_name() get_context_data() get() render_to_response() Example myapp/views.py : from django.utils import timezone from django.views.generic.detail import DetailView from articles.models import Article class ArticleDetailView ( DetailView ): model = Article def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ \"now\" ] = timezone . now () return context Example myapp/urls.py : from django.urls import path from article.views import ArticleDetailView urlpatterns = [ path ( \"<slug:slug>/\" , ArticleDetailView . as_view (), name = \"article-detail\" ), ] Example myapp/article_detail.html : < h1 > {{ object.headline }} </ h1 > < p > {{ object.content }} </ p > < p > Reporter: {{ object.reporter }} </ p > < p > Published: {{ object.pub_date | date }} </ p > < p > Date: {{ now | date }} </ p > class django.views.generic.detail. BaseDetailView ¶ A base view for displaying a single object. It is not intended to be used\ndirectly, but rather as a parent class of the django.views.generic.detail.DetailView or other views representing\ndetails of a single object. Ancestors (MRO) This view inherits methods and attributes from the following views: django.views.generic.detail.SingleObjectMixin django.views.generic.base.View Methods get ( request , * args , ** kwargs ) ¶ Adds object to the context. ListView ¶ class django.views.generic.list. ListView ¶ A page representing a list of objects. While this view is executing, self.object_list will contain the list of\nobjects (usually, but not necessarily a queryset) that the view is\noperating upon. Ancestors (MRO) This view inherits methods and attributes from the following views: django.views.generic.list.MultipleObjectTemplateResponseMixin django.views.generic.base.TemplateResponseMixin django.views.generic.list.BaseListView django.views.generic.list.MultipleObjectMixin django.views.generic.base.View Method Flowchart setup() dispatch() http_method_not_allowed() get_template_names() get_queryset() get_context_object_name() get_context_data() get() render_to_response() Example views.py : from django.utils import timezone from django.views.generic.list import ListView from articles.models import Article class ArticleListView ( ListView ): model = Article paginate_by = 100 # if pagination is desired def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ \"now\" ] = timezone . now () return context Example myapp/urls.py : from django.urls import path from article.views import ArticleListView urlpatterns = [ path ( \"\" , ArticleListView . as_view (), name = \"article-list\" ), ] Example myapp/article_list.html : < h1 > Articles </ h1 > < ul > {% for article in object_list %} < li > {{ article.pub_date | date }} - {{ article.headline }} </ li > {% empty %} < li > No articles yet. </ li > {% endfor %} </ ul > If you’re using pagination, you can adapt the example template from\nthe pagination docs . class django.views.generic.list. BaseListView ¶ A base view for displaying a list of objects. It is not intended to be used\ndirectly, but rather as a parent class of the django.views.generic.list.ListView or other views representing\nlists of objects. Ancestors (MRO) This view inherits methods and attributes from the following views: django.views.generic.list.MultipleObjectMixin django.views.generic.base.View Methods get ( request , * args , ** kwargs ) ¶ Adds object_list to the context. If allow_empty is True then display an empty list. If allow_empty is\nFalse then raise a 404 error.", "keywords": ["multipleobjecttemplateresponsemixin", "lists", "listview", "get_template_names", "error", "self.object", "template", "reporter", "%", "detailview", "p", "docs", "django.views.generic.detail", "templateresponsemixin", "django.views.generic.list", "dispatch", "object.reporter", "ul", "method", "article.views", "queryset", "render_to_response", "args", "ancestors", "views.py", "multipleobjectmixin", "mro", "paginate_by", "views", "import", "article", "baselistview", "#", "singleobjecttemplateresponsemixin", "¶", "methods", "timezone", "pagination", "model", "page", "get_slug_field", "base", "example", "get_object", "self", "basedetailview", "article_detail.html", "class", "request", "return", "object_list", "get_context_data", "li", "list", "details", "data", "articlelistview", "setup", "view", "as_view", "django.views.generic.base", "articles", "name", "object", "attributes", "articles.models", "endfor", "parent", "get", "self.object_list", "myapp", "kwargs", "slug>/", "path", "projects", "singleobjectmixin", "|", "django.utils", "object.pub_date", "h1", "display", "*", "flowchart", "date", "context", "django.urls", "articledetailview", "=", "detail", "objects", "get_context_object_name", "get_queryset", "object.content"], "type": "documentation"},
{"title": "Base views", "url": "https://docs.djangoproject.com/en/5.1/ref/class-based-views/base/", "content": "Base views ¶ The following three classes provide much of the functionality needed to create\nDjango views. You may think of them as parent views, which can be used by\nthemselves or inherited from. They may not provide all the capabilities\nrequired for projects, in which case there are Mixins and Generic class-based\nviews. Many of Django’s built-in class-based views inherit from other class-based\nviews or various mixins. Because this inheritance chain is very important, the\nancestor classes are  documented under the section title of Ancestors (MRO) .\nMRO is an acronym for Method Resolution Order. View ¶ class django.views.generic.base. View ¶ The base view class. All other class-based views inherit from this base\nclass. It isn’t strictly a generic view and thus can also be imported from django.views . Method Flowchart setup() dispatch() http_method_not_allowed() options() Example views.py : from django.http import HttpResponse from django.views import View class MyView ( View ): def get ( self , request , * args , ** kwargs ): return HttpResponse ( \"Hello, World!\" ) Example urls.py : from django.urls import path from myapp.views import MyView urlpatterns = [ path ( \"mine/\" , MyView . as_view (), name = \"my-view\" ), ] Attributes http_method_names ¶ The list of HTTP method names that this view will accept. Default: [ \"get\" , \"post\" , \"put\" , \"patch\" , \"delete\" , \"head\" , \"options\" , \"trace\" ] Methods classmethod as_view ( ** initkwargs ) ¶ Returns a callable view that takes a request and returns a response: response = MyView . as_view ()( request ) The returned view has view_class and view_initkwargs attributes. When the view is called during the request/response cycle, the setup() method assigns the HttpRequest to\nthe view’s request attribute, and any positional and/or keyword\narguments captured from the URL pattern to the args and kwargs attributes, respectively. Then dispatch() is called. If a View subclass defines asynchronous ( async def ) method\nhandlers, as_view() will mark the returned callable as a coroutine\nfunction. An ImproperlyConfigured exception will be raised if both\nasynchronous ( async def ) and synchronous ( def ) handlers are\ndefined on a single view-class. setup ( request , * args , ** kwargs ) ¶ Performs key view initialization prior to dispatch() . If overriding this method, you must call super() . dispatch ( request , * args , ** kwargs ) ¶ The view part of the view – the method that accepts a request argument plus arguments, and returns an HTTP response. The default implementation will inspect the HTTP method and attempt to\ndelegate to a method that matches the HTTP method; a GET will be\ndelegated to get() , a POST to post() , and so on. By default, a HEAD request will be delegated to get() .\nIf you need to handle HEAD requests in a different way than GET ,\nyou can override the head() method. See Supporting other HTTP methods for an example. http_method_not_allowed ( request , * args , ** kwargs ) ¶ If the view was called with an HTTP method it doesn’t support, this\nmethod is called instead. The default implementation returns HttpResponseNotAllowed with a\nlist of allowed methods in plain text. options ( request , * args , ** kwargs ) ¶ Handles responding to requests for the OPTIONS HTTP verb. Returns a\nresponse with the Allow header containing a list of the view’s\nallowed HTTP method names. If the other HTTP methods handlers on the class are asynchronous\n( async def ) then the response will be wrapped in a coroutine\nfunction for use with await . TemplateView ¶ class django.views.generic.base. TemplateView ¶ Renders a given template, with the context containing parameters captured\nin the URL. Ancestors (MRO) This view inherits methods and attributes from the following views: django.views.generic.base.TemplateResponseMixin django.views.generic.base.ContextMixin django.views.generic.base.View Method Flowchart setup() dispatch() http_method_not_allowed() get_context_data() Example views.py : from django.views.generic.base import TemplateView from articles.models import Article class HomePageView ( TemplateView ): template_name = \"home.html\" def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ \"latest_articles\" ] = Article . objects . all ()[: 5 ] return context Example urls.py : from django.urls import path from myapp.views import HomePageView urlpatterns = [ path ( \"\" , HomePageView . as_view (), name = \"home\" ), ] Context Populated (through ContextMixin ) with\nthe keyword arguments captured from the URL pattern that served the view. You can also add context using the extra_context keyword\nargument for as_view() . RedirectView ¶ class django.views.generic.base. RedirectView ¶ Redirects to a given URL. The given URL may contain dictionary-style string formatting, which will be\ninterpolated against the parameters captured in the URL. Because keyword\ninterpolation is always done (even if no arguments are passed in), any \"%\" characters in the URL must be written as \"%%\" so that Python\nwill convert them to a single percent sign on output. If the given URL is None , Django will return an HttpResponseGone (410). Ancestors (MRO) This view inherits methods and attributes from the following view: django.views.generic.base.View Method Flowchart setup() dispatch() http_method_not_allowed() get_redirect_url() Example views.py : from django.shortcuts import get_object_or_404 from django.views.generic.base import RedirectView from articles.models import Article class ArticleCounterRedirectView ( RedirectView ): permanent = False query_string = True pattern_name = \"article-detail\" def get_redirect_url ( self , * args , ** kwargs ): article = get_object_or_404 ( Article , pk = kwargs [ \"pk\" ]) article . update_counter () return super () . get_redirect_url ( * args , ** kwargs ) Example urls.py : from django.urls import path from django.views.generic.base import RedirectView from article.views import ArticleCounterRedirectView , ArticleDetailView urlpatterns = [ path ( \"counter/<int:pk>/\" , ArticleCounterRedirectView . as_view (), name = \"article-counter\" , ), path ( \"details/<int:pk>/\" , ArticleDetailView . as_view (), name = \"article-detail\" ), path ( \"go-to-django/\" , RedirectView . as_view ( url = \"https://www.djangoproject.com/\" ), name = \"go-to-django\" , ), ] Attributes url ¶ The URL to redirect to, as a string. Or None to raise a 410 (Gone)\nHTTP error. pattern_name ¶ The name of the URL pattern to redirect to. Reversing will be done\nusing the same args and kwargs as are passed in for this view. permanent ¶ Whether the redirect should be permanent. The only difference here is\nthe HTTP status code returned. If True , then the redirect will use\nstatus code 301. If False , then the redirect will use status code\n302. By default, permanent is False . query_string ¶ Whether to pass along the GET query string to the new location. If True , then the query string is appended to the URL. If False ,\nthen the query string is discarded. By default, query_string is False . Methods get_redirect_url ( * args , ** kwargs ) ¶ Constructs the target URL for redirection. The args and kwargs arguments are positional and/or keyword\narguments captured from the URL pattern , respectively. The default implementation uses url as a starting\nstring and performs expansion of % named parameters in that string\nusing the named groups captured in the URL. If url is not set, get_redirect_url() tries to reverse the pattern_name using what was captured in the URL (both named and\nunnamed groups are used). If requested by query_string , it will also append the query\nstring to the generated URL.\nSubclasses may implement any behavior they wish, as long as the method\nreturns a redirect-ready URL string.", "keywords": ["expansion", "implementation", "myapp.views", "characters", "[:", "query_string", "resolution", "await", "initkwargs", "error", "template", "improperlyconfigured", "httpresponse", "url", "handles", "counter", "%", "order", "def", "style", "pk", "exception", "classes", "dispatch", "method", "article.views", "args", "mixins", "behavior", "ancestors", "query", "mro", "templateview", "use", "status", "contextmixin", "latest_articles", "views", "import", "subclasses", "generic", "difference", "async", "article", "groups", "acronym", "redirectview", "homepageview", "output", "section", "way", "¶", "default", "inherit", "methods", "location", "keyword", "target", "renders", "verb", "none", "details/<int", "allow", "counter/<int", "trace", "base", "populated", "capabilities", "home.html", "example", "starting", "formatting", "self", "handlers", "ancestor", "case", "argument", "class", "http_method_names", "request", "redirect", "inheritance", "redirects", "gone", "return", "cycle", "chain", "get_context_data", "attribute", "function", "string", "interpolation", "list", "django.views", "pattern_name", "setup", "myview", "view", "as_view", "get_object_or_404", "django.views.generic.base", "name", "options", "pattern", "home", "httprequest", "articlecounterredirectview", "header", "part", "world", "attributes", "articles.models", "httpresponsenotallowed", "returns", "pk>/", "percent", "python", "parent", "get", "response", "sign", "initialization", "kwargs", "subclass", "defines", "path", "projects", "names", "post", "django", "get_redirect_url", "coroutine", "*", "flowchart", "text", "httpresponsegone", "arguments", "functionality", "head", "requests", "http", "view_initkwargs", "context", "django.urls", "articledetailview", "redirection", "=", "view_class", "code", "detail", "objects", "django.shortcuts", "parameters", "title"], "type": "documentation"},
{"title": "Built-in class-based views API", "url": "https://docs.djangoproject.com/en/5.1/ref/class-based-views/", "content": "Built-in class-based views API ¶ Class-based views API reference. For introductory material, see the Class-based views topic guide. Base views View TemplateView RedirectView Generic display views DetailView ListView Generic editing views FormView CreateView UpdateView DeleteView Generic date views ArchiveIndexView YearArchiveView MonthArchiveView WeekArchiveView DayArchiveView TodayArchiveView DateDetailView Class-based views mixins Simple mixins ContextMixin TemplateResponseMixin Single object mixins SingleObjectMixin SingleObjectTemplateResponseMixin Multiple object mixins MultipleObjectMixin MultipleObjectTemplateResponseMixin Editing mixins FormMixin ModelFormMixin ProcessFormView DeletionMixin Date-based mixins YearMixin MonthMixin DayMixin WeekMixin DateMixin BaseDateListView Class-based generic views - flattened index Simple generic views View TemplateView RedirectView Detail Views DetailView List Views ListView Editing views FormView CreateView UpdateView DeleteView Date-based views ArchiveIndexView YearArchiveView MonthArchiveView WeekArchiveView DayArchiveView TodayArchiveView DateDetailView Specification ¶ Each request served by a class-based view has an independent state; therefore,\nit is safe to store state variables on the instance (i.e., self.foo = 3 is\na thread-safe operation). A class-based view is deployed into a URL pattern using the as_view() classmethod: urlpatterns = [ path ( \"view/\" , MyView . as_view ( size = 42 )), ] Thread safety with view arguments Arguments passed to a view are shared between every instance of a view.\nThis means that you shouldn’t use a list, dictionary, or any other\nmutable object as an argument to a view. If you do and the shared object\nis modified, the actions of one user visiting your view could have an\neffect on subsequent users visiting the same view. Arguments passed into as_view() will\nbe assigned onto the instance that is used to service a request. Using the\nprevious example, this means that every request on MyView is able to use self.size . Arguments must correspond to attributes that already exist on\nthe class (return True on a hasattr check). Base vs Generic views ¶ Base class-based views can be thought of as parent views, which can be\nused by themselves or inherited from. They may not provide all the\ncapabilities required for projects, in which case there are Mixins which\nextend what base views can do. Django’s generic views are built off of those base views, and were developed\nas a shortcut for common usage patterns such as displaying the details of an\nobject. They take certain common idioms and patterns found in view\ndevelopment and abstract them so that you can quickly write common views of\ndata without having to repeat yourself. Most generic views require the queryset key, which is a QuerySet instance; see Making queries for more information about QuerySet objects.", "keywords": ["state", "dictionary", "multipleobjecttemplateresponsemixin", "index", "listview", "material", "url", "detailview", "datemixin", "development", "templateresponsemixin", "formmixin", "monthmixin", "queryset", "yeararchiveview", "check", "mixins", "datedetailview", "multipleobjectmixin", "templateview", "contextmixin", "yearmixin", "views", "updateview", "generic", "urlpatterns", "information", "specification", "redirectview", "topic", "safety", "¶", "montharchiveview", "self.foo", "usage", "variables", "base", "deleteview", "capabilities", "example", "users", "deletionmixin", "guide", "formview", "daymixin", "self.size", "case", "classmethod", "argument", "class", "request", "idioms", "list", "details", "actions", "data", "myview", "view", "as_view", "object", "pattern", "user", "queries", "processformview", "attributes", "hasattr", "size", "patterns", "parent", "shortcut", "editing", "api", "basedatelistview", "path", "projects", "django", "weekmixin", "thread", "display", "date", "arguments", "modelformmixin", "weekarchiveview", "operation", "reference", "instance", "effect", "=", "todayarchiveview", "detail", "createview", "objects", "key"], "type": "documentation"},
{"title": "System check framework", "url": "https://docs.djangoproject.com/en/5.1/ref/checks/", "content": "System check framework ¶ The system check framework is a set of static checks for validating Django\nprojects. It detects common problems and provides hints for how to fix them.\nThe framework is extensible so you can easily add your own checks. For details on how to add your own checks and integrate them with Django’s\nsystem checks, see the System check topic guide . API reference ¶ CheckMessage ¶ class CheckMessage ( level , msg , hint = None , obj = None , id = None ) [source] ¶ The warnings and errors raised by system checks must be instances of CheckMessage . An instance encapsulates a single reportable error or\nwarning. It also provides context and hints applicable to the message, and a\nunique identifier that is used for filtering purposes. Constructor arguments are: level The severity of the message. Use one of the predefined values: DEBUG , INFO , WARNING , ERROR , CRITICAL . If the level is greater or\nequal to ERROR , then Django will prevent management commands from\nexecuting. Messages with level lower than ERROR (i.e. warnings) are\nreported to the console, but can be silenced. msg A short (less than 80 characters) string describing the problem. The string\nshould not contain newlines. hint A single-line string providing a hint for fixing the problem. If no hint\ncan be provided, or the hint is self-evident from the error message, the\nhint can be omitted, or a value of None can be used. obj Optional. An object providing context for the message (for example, the\nmodel where the problem was discovered). The object should be a model,\nfield, or manager or any other object that defines a __str__() method.\nThe method is used while reporting all messages and its result precedes the\nmessage. id Optional string. A unique identifier for the issue. Identifiers should\nfollow the pattern applabel.X001 , where X is one of the letters CEWID , indicating the message severity ( C for criticals, E for\nerrors and so). The number can be allocated by the application, but should\nbe unique within that application. There are subclasses to make creating messages with common levels easier. When\nusing them you can omit the level argument because it is implied by the\nclass name. class Debug ( msg , hint = None , obj = None , id = None ) [source] ¶ class Info ( msg , hint = None , obj = None , id = None ) [source] ¶ class Warning ( msg , hint=None obj=None , id=None ) [source] ¶ class Error ( msg , hint = None , obj = None , id = None ) [source] ¶ class Critical ( msg , hint = None , obj = None , id = None ) [source] ¶ Builtin tags ¶ Django’s system checks are organized using the following tags: admin : Checks of any admin site declarations. async_support : Checks asynchronous-related configuration. caches : Checks cache related configuration. compatibility : Flags potential problems with version upgrades. database : Checks database-related configuration issues. Database checks\nare not run by default because they do more than static code analysis as\nregular checks do. They are only run by the migrate command or if\nyou specify configured database aliases using the --database option when\ncalling the check command. files : Checks files related configuration. models : Checks of model, field, and manager definitions. security : Checks security related configuration. signals : Checks on signal declarations and handler registrations. sites : Checks django.contrib.sites configuration. staticfiles : Checks django.contrib.staticfiles configuration. templates : Checks template related configuration. translation : Checks translation related configuration. urls : Checks URL configuration. Some checks may be registered with multiple tags. Core system checks ¶ Asynchronous support ¶ The following checks verify your setup for Asynchronous support : async.E001 : You should not set the DJANGO_ALLOW_ASYNC_UNSAFE environment variable in deployment. This disables async safety\nprotection . Backwards compatibility ¶ Compatibility checks warn of potential problems that might occur after\nupgrading Django. 2_0.W001 : Your URL pattern <pattern> has a route that contains (?P< , begins with a ^ , or ends with a $ . This was likely an\noversight when migrating from url() to path() . 4_0.E001 : As of Django 4.0, the values in the CSRF_TRUSTED_ORIGINS setting must start with a scheme (usually http:// or https:// ) but found <hostname> . Caches ¶ The following checks verify that your CACHES setting is correctly\nconfigured: caches.E001 : You must define a 'default' cache in your CACHES setting. caches.W002 : Your <cache> configuration might expose your cache or\nlead to corruption of your data because its LOCATION matches/is inside/contains MEDIA_ROOT / STATIC_ROOT / STATICFILES_DIRS . caches.W003 : Your <cache> cache LOCATION is relative. Use an absolute path instead. Database ¶ MySQL and MariaDB ¶ If you’re using MySQL or MariaDB, the following checks will be performed: mysql.E001 : MySQL/MariaDB does not allow unique CharField s to have a max_length > 255. This check was changed to mysql.W003 in Django\n3.1 as the real maximum size depends on many factors. mysql.W002 : MySQL/MariaDB Strict Mode is not set for database connection <alias> . See also Setting sql_mode . mysql.W003 : MySQL/MariaDB may not allow unique CharField s to have a max_length > 255. Managing files ¶ The following checks verify your setup for Managing files : files.E001 : The FILE_UPLOAD_TEMP_DIR setting refers to the\nnonexistent directory <path> . Model fields ¶ fields.E001 : Field names must not end with an underscore. fields.E002 : Field names must not contain \"__\" . fields.E003 : pk is a reserved word that cannot be used as a field\nname. fields.E004 : choices must be a mapping (e.g. a dictionary) or an\niterable (e.g. a list or tuple). fields.E005 : choices must be a mapping of actual values to human\nreadable names or an iterable containing (actual value, human readable name) tuples. fields.E006 : db_index must be None , True or False . fields.E007 : Primary keys must not have null=True . fields.E008 : All validators must be callable. fields.E009 : max_length is too small to fit the longest value in choices ( <count> characters). fields.E010 : <field> default should be a callable instead of an\ninstance so that it’s not shared between all field instances. fields.E011 : <database> does not support default database values with\nexpressions ( db_default ). fields.E012 : <expression> cannot be used in db_default . fields.E100 : AutoField s must set primary_key=True. fields.E110 : BooleanField s do not accept null values. This check\nappeared before support for null values was added in Django 2.1. fields.E120 : CharField s must define a max_length attribute. fields.E121 : max_length must be a positive integer. fields.W122 : max_length is ignored when used with <integer field type> . fields.E130 : DecimalField s must define a decimal_places attribute. fields.E131 : decimal_places must be a non-negative integer. fields.E132 : DecimalField s must define a max_digits attribute. fields.E133 : max_digits must be a positive integer. fields.E134 : max_digits must be greater or equal to decimal_places . fields.E140 : FilePathField s must have either allow_files or allow_folders set to True. fields.E150 : GenericIPAddressField s cannot have blank=True if null=False , as blank values are stored as nulls. fields.E160 : The options auto_now , auto_now_add , and default are mutually exclusive. Only one of these options may be present. fields.W161 : Fixed default value provided. fields.W162 : <database> does not support a database index on <field data type> columns. fields.W163 : <database> does not support comments on columns\n( db_comment ). fields.E170 : BinaryField ’s default cannot be a string. Use bytes\ncontent instead. fields.E180 : <database> does not support JSONField s. fields.E190 : <database> does not support a database collation on <field_type> s. fields.E220 : <database> does not support GeneratedField s. fields.E221 : <database> does not support non-persisted GeneratedField s. fields.E222 : <database> does not support persisted GeneratedField s. fields.E223 : GeneratedField.output_field has errors: … fields.W224 : GeneratedField.output_field has warnings: … fields.E900 : IPAddressField has been removed except for support in\nhistorical migrations. fields.W900 : IPAddressField has been deprecated. Support for it\n(except in historical migrations) will be removed in Django 1.9. This check\nappeared in Django 1.7 and 1.8 . fields.W901 : CommaSeparatedIntegerField has been deprecated. Support\nfor it (except in historical migrations) will be removed in Django 2.0. This\ncheck appeared in Django 1.10 and 1.11 . fields.E901 : CommaSeparatedIntegerField is removed except for support\nin historical migrations. fields.W902 : FloatRangeField is deprecated and will be removed in\nDjango 3.1. This check appeared in Django 2.2 and 3.0 . fields.W903 : NullBooleanField is deprecated. Support for it (except\nin historical migrations) will be removed in Django 4.0. This check appeared\nin Django 3.1 and 3.2 . fields.E903 : NullBooleanField is removed except for support in\nhistorical migrations. fields.W904 : django.contrib.postgres.fields.JSONField is deprecated.\nSupport for it (except in historical migrations) will be removed in Django\n4.0. This check appeared in Django 3.1 and 3.2 . fields.E904 : django.contrib.postgres.fields.JSONField is removed\nexcept for support in historical migrations. fields.W905 : django.contrib.postgres.fields.CICharField is\ndeprecated. Support for it (except in historical migrations) will be removed\nin Django 5.1. This check appeared in Django 4.2 and 5.0 . fields.E905 : django.contrib.postgres.fields.CICharField is removed\nexcept for support in historical migrations. fields.W906 : django.contrib.postgres.fields.CIEmailField is\ndeprecated. Support for it (except in historical migrations) will be removed\nin Django 5.1. This check appeared in Django 4.2 and 5.0 . fields.E906 : django.contrib.postgres.fields.CIEmailField is removed\nexcept for support in historical migrations. fields.W907 : django.contrib.postgres.fields.CITextField is\ndeprecated. Support for it (except in historical migrations) will be removed\nin Django 5.1. This check appeared in Django 4.2 and 5.0 . fields.E907 : django.contrib.postgres.fields.CITextField is removed\nexcept for support for historical migrations. File fields ¶ fields.E200 : unique is not a valid argument for a FileField . This check is removed in Django 1.11 . fields.E201 : primary_key is not a valid argument for a FileField . fields.E202 : FileField ’s upload_to argument must be a relative\npath, not an absolute path. fields.E210 : Cannot use ImageField because Pillow is not installed. Related fields ¶ fields.E300 : Field defines a relation with model <model> , which is\neither not installed, or is abstract. fields.E301 : Field defines a relation with the model <app_label>.<model> which has been swapped out. fields.E302 : Reverse accessor <related model>.<accessor name> for <app_label>.<model>.<field name> clashes with field name <app_label>.<model>.<field name> . fields.E303 : Reverse query name for <app_label>.<model>.<field name> clashes with field name <app_label>.<model>.<field name> . fields.E304 : Reverse accessor <related model>.<accessor name> for <app_label>.<model>.<field name> clashes with reverse accessor for <app_label>.<model>.<field name> . fields.E305 : Reverse query name for <app_label>.<model>.<field name> clashes with reverse query name for <app_label>.<model>.<field name> . fields.E306 : The name <name> is invalid related_name for field <model>.<field name> . fields.E307 : The field <app label>.<model>.<field name> was declared\nwith a lazy reference to <app label>.<model> , but app <app label> isn’t installed or doesn’t provide model <model> . fields.E308 : Reverse query name <related query name> must not end\nwith an underscore. fields.E309 : Reverse query name <related query name> must not contain '__' . fields.E310 : No subset of the fields <field1> , <field2> , … on\nmodel <model> is unique. fields.E311 : <model>.<field name> must be unique because it is\nreferenced by a ForeignKey . fields.E312 : The to_field <field name> doesn’t exist on the\nrelated model <app label>.<model> . fields.E320 : Field specifies on_delete=SET_NULL , but cannot be null. fields.E321 : The field specifies on_delete=SET_DEFAULT , but has no\ndefault value. fields.E330 : ManyToManyField s cannot be unique. fields.E331 : Field specifies a many-to-many relation through model <model> , which has not been installed. fields.E332 : Many-to-many fields with intermediate tables must not be\nsymmetrical. This check appeared before Django 3.0. fields.E333 : The model is used as an intermediate model by <model> ,\nbut it has more than two foreign keys to <model> , which is ambiguous.\nYou must specify which two foreign keys Django should use via the through_fields keyword argument. fields.E334 : The model is used as an intermediate model by <model> ,\nbut it has more than one foreign key from <model> , which is ambiguous.\nYou must specify which foreign key Django should use via the through_fields keyword argument. fields.E335 : The model is used as an intermediate model by <model> ,\nbut it has more than one foreign key to <model> , which is ambiguous.\nYou must specify which foreign key Django should use via the through_fields keyword argument. fields.E336 : The model is used as an intermediary model by <model> ,\nbut it does not have foreign key to <model> or <model> . fields.E337 : Field specifies through_fields but does not provide the\nnames of the two link fields that should be used for the relation through <model> . fields.E338 : The intermediary model <through model> has no field <field name> . fields.E339 : <model>.<field name> is not a foreign key to <model> . fields.E340 : The field’s intermediary table <table name> clashes with\nthe table name of <model> / <model>.<field name> . fields.W340 : null has no effect on ManyToManyField . fields.W341 : ManyToManyField does not support validators . fields.W342 : Setting unique=True on a ForeignKey has the same\neffect as using a OneToOneField . fields.W343 : limit_choices_to has no effect on ManyToManyField with a through model. This check appeared before Django 4.0. fields.W344 : The field’s intermediary table <table name> clashes with\nthe table name of <model> / <model>.<field name> . fields.W345 : related_name has no effect on ManyToManyField with a\nsymmetrical relationship, e.g. to “self”. fields.W346 : db_comment has no effect on ManyToManyField . Models ¶ models.E001 : <swappable> is not of the form app_label.app_name . models.E002 : <SETTING> references <model> , which has not been\ninstalled, or is abstract. models.E003 : The model has two identical many-to-many relations through\nthe intermediate model <app_label>.<model> . models.E004 : id can only be used as a field name if the field also\nsets primary_key=True . models.E005 : The field <field name> from parent model <model> clashes with the field <field name> from parent model <model> . models.E006 : The field <field name> clashes with the field <field name> from model <model> . models.E007 : Field <field name> has column name <column name> that is used by another field. models.E008 : index_together must be a list or tuple. This check\nappeared before Django 5.1. models.E009 : All index_together elements must be lists or tuples. This check appeared before Django 5.1. models.E010 : unique_together must be a list or tuple. models.E011 : All unique_together elements must be lists or tuples. models.E012 : constraints/indexes/unique_together refers to the\nnonexistent field <field name> . models.E013 : constraints/indexes/unique_together refers to a ManyToManyField <field name> , but ManyToManyField s are not\nsupported for that option. models.E014 : ordering must be a tuple or list (even if you want to\norder by only one field). models.E015 : ordering refers to the nonexistent field, related field,\nor lookup <field name> . models.E016 : constraints/indexes/unique_together refers to field <field_name> which is not local to model <model> . models.E017 : Proxy model <model> contains model fields. models.E018 : Autogenerated column name too long for field <field> .\nMaximum length is <maximum length> for database <alias> . models.E019 : Autogenerated column name too long for M2M field <M2M field> . Maximum length is <maximum length> for database <alias> . models.E020 : The <model>.check() class method is currently overridden. models.E021 : ordering and order_with_respect_to cannot be used\ntogether. models.E022 : <function> contains a lazy reference to <app label>.<model> , but app <app label> isn’t installed or\ndoesn’t provide model <model> . models.E023 : The model name <model> cannot start or end with an\nunderscore as it collides with the query lookup syntax. models.E024 : The model name <model> cannot contain double underscores\nas it collides with the query lookup syntax. models.E025 : The property <property name> clashes with a related\nfield accessor. models.E026 : The model cannot have more than one field with primary_key=True . models.W027 : <database> does not support check constraints. models.E028 : db_table <db_table> is used by multiple models: <model list> . models.E029 : index name <index> is not unique for model <model> . models.E030 : index name <index> is not unique among models: <model list> . models.E031 : constraint name <constraint> is not unique for model <model> . models.E032 : constraint name <constraint> is not unique among\nmodels: <model list> . models.E033 : The index name <index> cannot start with an underscore\nor a number. models.E034 : The index name <index> cannot be longer than <max_length> characters. models.W035 : db_table <db_table> is used by multiple models: <model list> . models.W036 : <database> does not support unique constraints with\nconditions. models.W037 : <database> does not support indexes with conditions. models.W038 : <database> does not support deferrable unique\nconstraints. models.W039 : <database> does not support unique constraints with\nnon-key columns. models.W040 : <database> does not support indexes with non-key\ncolumns. models.E041 : constraints refers to the joined field <field name> . models.W042 : Auto-created primary key used when not defining a primary\nkey type, by default django.db.models.AutoField . models.W043 : <database> does not support indexes on expressions. models.W044 : <database> does not support unique constraints on\nexpressions. models.W045 : Check constraint <constraint> contains RawSQL() expression and won’t be validated during the model full_clean() . models.W046 : <database> does not support comments on tables\n( db_table_comment ). models.W047 : <database> does not support unique constraints with\nnulls distinct. Security ¶ The security checks do not make your site secure. They do not audit code, do\nintrusion detection, or do anything particularly complex. Rather, they help\nperform an automated, low-hanging-fruit checklist, that can help you to improve\nyour site’s security. Some of these checks may not be appropriate for your particular deployment\nconfiguration. For instance, if you do your HTTP to HTTPS redirection in a load\nbalancer, it’d be irritating to be constantly warned about not having enabled SECURE_SSL_REDIRECT . Use SILENCED_SYSTEM_CHECKS to\nsilence unneeded checks. The following checks are run if you use the check --deploy option: security.W001 : You do not have django.middleware.security.SecurityMiddleware in your MIDDLEWARE so the SECURE_HSTS_SECONDS , SECURE_CONTENT_TYPE_NOSNIFF , SECURE_REFERRER_POLICY , SECURE_CROSS_ORIGIN_OPENER_POLICY , and SECURE_SSL_REDIRECT settings will have no effect. security.W002 : You do not have django.middleware.clickjacking.XFrameOptionsMiddleware in your MIDDLEWARE , so your pages will not be served with an 'x-frame-options' header. Unless there is a good reason for your\nsite to be served in a frame, you should consider enabling this\nheader to help prevent clickjacking attacks. security.W003 : You don’t appear to be using Django’s built-in cross-site\nrequest forgery protection via the middleware\n( django.middleware.csrf.CsrfViewMiddleware is not in your MIDDLEWARE ). Enabling the middleware is the safest\napproach to ensure you don’t leave any holes. security.W004 : You have not set a value for the SECURE_HSTS_SECONDS setting. If your entire site is served only\nover SSL, you may want to consider setting a value and enabling HTTP\nStrict Transport Security . Be sure to read\nthe documentation first; enabling HSTS carelessly can cause serious,\nirreversible problems. security.W005 : You have not set the SECURE_HSTS_INCLUDE_SUBDOMAINS setting to True . Without this,\nyour site is potentially vulnerable to attack via an insecure connection to a\nsubdomain. Only set this to True if you are certain that all subdomains of\nyour domain should be served exclusively via SSL. security.W006 : Your SECURE_CONTENT_TYPE_NOSNIFF setting is not\nset to True , so your pages will not be served with an 'X-Content-Type-Options: nosniff' header. You should consider enabling\nthis header to prevent the browser from identifying content types incorrectly. security.W007 : Your SECURE_BROWSER_XSS_FILTER setting is not\nset to True , so your pages will not be served with an 'X-XSS-Protection: 1; mode=block' header. You should consider enabling\nthis header to activate the browser’s XSS filtering and help prevent XSS\nattacks. This check is removed in Django 3.0 as the X-XSS-Protection header is no longer honored by modern browsers. security.W008 : Your SECURE_SSL_REDIRECT setting is not set to True . Unless your site should be available over both SSL and non-SSL\nconnections, you may want to either set this setting to True or configure\na load balancer or reverse-proxy server  to redirect all connections to HTTPS. security.W009 : Your SECRET_KEY has less than 50 characters,\nless than 5 unique characters, or it’s prefixed with 'django-insecure-' indicating that it was generated automatically by Django. Please generate a\nlong and random value, otherwise many of Django’s security-critical features\nwill be vulnerable to attack. security.W010 : You have django.contrib.sessions in your INSTALLED_APPS but you have not set SESSION_COOKIE_SECURE to True . Using a secure-only session\ncookie makes it more difficult for network traffic sniffers to hijack user\nsessions. security.W011 : You have django.contrib.sessions.middleware.SessionMiddleware in your MIDDLEWARE , but you have not set SESSION_COOKIE_SECURE to True . Using a secure-only session cookie makes it more difficult for\nnetwork traffic sniffers to hijack user sessions. security.W012 : SESSION_COOKIE_SECURE is not set to True .\nUsing a secure-only session cookie makes it more difficult for network traffic\nsniffers to hijack user sessions. security.W013 : You have django.contrib.sessions in your INSTALLED_APPS , but you have not set SESSION_COOKIE_HTTPONLY to True . Using an HttpOnly session\ncookie makes it more difficult for cross-site scripting attacks to hijack user\nsessions. security.W014 : You have django.contrib.sessions.middleware.SessionMiddleware in your MIDDLEWARE , but you have not set SESSION_COOKIE_HTTPONLY to True . Using an HttpOnly session cookie makes it more difficult for\ncross-site scripting attacks to hijack user sessions. security.W015 : SESSION_COOKIE_HTTPONLY is not set to True .\nUsing an HttpOnly session cookie makes it more difficult for cross-site\nscripting attacks to hijack user sessions. security.W016 : CSRF_COOKIE_SECURE is not set to True .\nUsing a secure-only CSRF cookie makes it more difficult for network traffic\nsniffers to steal the CSRF token. security.W017 : CSRF_COOKIE_HTTPONLY is not set to True .\nUsing an HttpOnly CSRF cookie makes it more difficult for cross-site\nscripting attacks to steal the CSRF token. This check is removed in Django\n1.11 as the CSRF_COOKIE_HTTPONLY setting offers no practical\nbenefit. security.W018 : You should not have DEBUG set to True in\ndeployment. security.W019 : You have django.middleware.clickjacking.XFrameOptionsMiddleware in your MIDDLEWARE , but X_FRAME_OPTIONS is not set to 'DENY' . Unless there is a good reason for your site to serve other parts\nof itself in a frame, you should change it to 'DENY' . security.W020 : ALLOWED_HOSTS must not be empty in deployment. security.W021 : You have not set the SECURE_HSTS_PRELOAD setting to True . Without this, your site\ncannot be submitted to the browser preload list. security.W022 : You have not set the SECURE_REFERRER_POLICY setting. Without this, your site will not send a Referrer-Policy header. You\nshould consider enabling this header to protect user privacy. security.E023 : You have set the SECURE_REFERRER_POLICY setting\nto an invalid value. security.E024 : You have set the SECURE_CROSS_ORIGIN_OPENER_POLICY setting to an invalid value. security.W025 : Your SECRET_KEY_FALLBACKS[n] has less than 50\ncharacters, less than 5 unique characters, or it’s prefixed with 'django-insecure-' indicating that it was generated automatically by\nDjango. Please generate a long and random value, otherwise many of Django’s\nsecurity-critical features will be vulnerable to attack. The following checks verify that your security-related settings are correctly\nconfigured: security.E100 : DEFAULT_HASHING_ALGORITHM must be 'sha1' or 'sha256' . This check appeared in Django 3.1 and 3.2 . security.E101 : The CSRF failure view 'path.to.view' does not take the\ncorrect number of arguments. security.E102 : The CSRF failure view 'path.to.view' could not be\nimported. Signals ¶ signals.E001 : <handler> was connected to the <signal> signal with\na lazy reference to the sender <app label>.<model> , but app <app label> isn’t installed or doesn’t provide model <model> . Templates ¶ The following checks verify that your TEMPLATES setting is correctly\nconfigured: templates.E001 : You have 'APP_DIRS': True in your TEMPLATES but also specify 'loaders' in OPTIONS . Either\nremove APP_DIRS or remove the 'loaders' option. This check is\nremoved in Django 5.1 as system checks may now raise ImproperlyConfigured instead. templates.E002 : string_if_invalid in TEMPLATES OPTIONS must be a string but got: {value} ( {type} ). templates.E003 : <name> is used for multiple template tag modules: <module list> . This check was changed to templates.W003 in Django\n4.1.2 . templates.W003 : <name> is used for multiple template tag modules: <module list> . Translation ¶ The following checks are performed on your translation configuration: translation.E001 : You have provided an invalid value for the LANGUAGE_CODE setting: <value> . translation.E002 : You have provided an invalid language code in the LANGUAGES setting: <value> . translation.E003 : You have provided an invalid language code in the LANGUAGES_BIDI setting: <value> . translation.E004 : You have provided a value for the LANGUAGE_CODE setting that is not in the LANGUAGES setting. URLs ¶ The following checks are performed on your URL configuration: urls.W001 : Your URL pattern <pattern> uses include() with a route ending with a $ . Remove the\ndollar from the route to avoid problems including URLs. urls.W002 : Your URL pattern <pattern> has a route beginning with\na / . Remove this slash as it is unnecessary. If this pattern is targeted\nin an include() , ensure the include() pattern has a trailing / . urls.W003 : Your URL pattern <pattern> has a name including a : . Remove the colon, to avoid ambiguous namespace\nreferences. urls.E004 : Your URL pattern <pattern> is invalid. Ensure that urlpatterns is a list of path() and/or re_path() instances. urls.W005 : URL namespace <namespace> isn’t unique. You may not be\nable to reverse all URLs in this namespace. urls.E006 : The MEDIA_URL / STATIC_URL setting must\nend with a slash. urls.E007 : The custom handlerXXX view 'path.to.view' does not\ntake the correct number of arguments (…). urls.E008 : The custom handlerXXX view 'path.to.view' could not be\nimported. urls.E009 : Your URL pattern <pattern> has an invalid view, pass <view>.as_view() instead of <view> . urls.W010 : Your URL pattern <pattern> has an unmatched <angle bracket> . contrib app checks ¶ admin ¶ Admin checks are all performed as part of the admin tag. The following checks are performed on any ModelAdmin (or subclass) that is registered\nwith the admin site: admin.E001 : The value of raw_id_fields must be a list or tuple. admin.E002 : The value of raw_id_fields[n] refers to <field name> ,\nwhich is not a field of <model> . admin.E003 : The value of raw_id_fields[n] must be a foreign key or\na many-to-many field. admin.E004 : The value of fields must be a list or tuple. admin.E005 : Both fieldsets and fields are specified. admin.E006 : The value of fields contains duplicate field(s). admin.E007 : The value of fieldsets must be a list or tuple. admin.E008 : The value of fieldsets[n] must be a list or tuple. admin.E009 : The value of fieldsets[n] must be of length 2. admin.E010 : The value of fieldsets[n][1] must be a dictionary. admin.E011 : The value of fieldsets[n][1] must contain the key fields . admin.E012 : There are duplicate field(s) in fieldsets[n][1] . admin.E013 : The value of fields[n]/filter_horizontal[n]/filter_vertical[n]/fieldsets[n][m] cannot\ninclude the ManyToManyField <field name> , because that field manually\nspecifies a relationship model. admin.E014 : The value of exclude must be a list or tuple. admin.E015 : The value of exclude contains duplicate field(s). admin.E016 : The value of form must inherit from BaseModelForm . admin.E017 : The value of filter_vertical must be a list or tuple. admin.E018 : The value of filter_horizontal must be a list or tuple. admin.E019 : The value of filter_vertical[n]/filter_horizontal[n] refers to <field name> , which is not a field of <model> . admin.E020 : The value of filter_vertical[n]/filter_horizontal[n] must be a many-to-many field. admin.E021 : The value of radio_fields must be a dictionary. admin.E022 : The value of radio_fields refers to <field name> ,\nwhich is not a field of <model> . admin.E023 : The value of radio_fields refers to <field name> ,\nwhich is not an instance of ForeignKey , and does not have a choices definition. admin.E024 : The value of radio_fields[<field name>] must be either admin.HORIZONTAL or admin.VERTICAL . admin.E025 : The value of view_on_site must be either a callable or a\nboolean value. admin.E026 : The value of prepopulated_fields must be a dictionary. admin.E027 : The value of prepopulated_fields refers to <field name> , which is not a field of <model> . admin.E028 : The value of prepopulated_fields refers to <field name> , which must not be a DateTimeField , a ForeignKey ,\na OneToOneField , or a ManyToManyField field. admin.E029 : The value of prepopulated_fields[<field name>] must be a\nlist or tuple. admin.E030 : The value of prepopulated_fields refers to <field name> , which is not a field of <model> . admin.E031 : The value of ordering must be a list or tuple. admin.E032 : The value of ordering has the random ordering marker ? , but contains other fields as well. admin.E033 : The value of ordering refers to <field name> , which\nis not a field of <model> . admin.E034 : The value of readonly_fields must be a list or tuple. admin.E035 : The value of readonly_fields[n] refers to <field_name> , which is not a callable, an attribute of <ModelAdmin class> , or an attribute of <model> . admin.E036 : The value of autocomplete_fields must be a list or tuple. admin.E037 : The value of autocomplete_fields[n] refers to <field name> , which is not a field of <model> . admin.E038 : The value of autocomplete_fields[n] must be a foreign\nkey or a many-to-many field. admin.E039 : An admin for model <model> has to be registered to be\nreferenced by <modeladmin>.autocomplete_fields . admin.E040 : <modeladmin> must define search_fields , because\nit’s referenced by <other_modeladmin>.autocomplete_fields . ModelAdmin ¶ The following checks are performed on any ModelAdmin that is registered\nwith the admin site: admin.E101 : The value of save_as must be a boolean. admin.E102 : The value of save_on_top must be a boolean. admin.E103 : The value of inlines must be a list or tuple. admin.E104 : <InlineModelAdmin class> must inherit from InlineModelAdmin . admin.E105 : <InlineModelAdmin class> must have a model attribute. admin.E106 : The value of <InlineModelAdmin class>.model must be a Model . admin.E107 : The value of list_display must be a list or tuple. admin.E108 : The value of list_display[n] refers to <label> , which\nis not a callable or attribute of <ModelAdmin class> , or an attribute,\nmethod, or field on <model> . admin.E109 : The value of list_display[n] must not be a many-to-many\nfield or a reverse foreign key. admin.E110 : The value of list_display_links must be a list, a tuple,\nor None . admin.E111 : The value of list_display_links[n] refers to <label> ,\nwhich is not defined in list_display . admin.E112 : The value of list_filter must be a list or tuple. admin.E113 : The value of list_filter[n] must inherit from ListFilter . admin.E114 : The value of list_filter[n] must not inherit from FieldListFilter . admin.E115 : The value of list_filter[n][1] must inherit from FieldListFilter . admin.E116 : The value of list_filter[n] refers to <label> ,\nwhich does not refer to a Field. admin.E117 : The value of list_select_related must be a boolean,\ntuple or list. admin.E118 : The value of list_per_page must be an integer. admin.E119 : The value of list_max_show_all must be an integer. admin.E120 : The value of list_editable must be a list or tuple. admin.E121 : The value of list_editable[n] refers to <label> ,\nwhich is not a field of <model> . admin.E122 : The value of list_editable[n] refers to <label> ,\nwhich is not contained in list_display . admin.E123 : The value of list_editable[n] cannot be in both list_editable and list_display_links . admin.E124 : The value of list_editable[n] refers to the first field\nin list_display ( <label> ), which cannot be used unless list_display_links is set. admin.E125 : The value of list_editable[n] refers to <field name> ,\nwhich is not editable through the admin. admin.E126 : The value of search_fields must be a list or tuple. admin.E127 : The value of date_hierarchy refers to <field name> ,\nwhich does not refer to a Field. admin.E128 : The value of date_hierarchy must be a DateField or DateTimeField . admin.E129 : <modeladmin> must define a has_<foo>_permission() method for the <action> action. admin.E130 : __name__ attributes of actions defined in <modeladmin> must be unique. Name <name> is not unique. InlineModelAdmin ¶ The following checks are performed on any InlineModelAdmin that is registered as an\ninline on a ModelAdmin . admin.E201 : Cannot exclude the field <field name> , because it is the\nforeign key to the parent model <app_label>.<model> . admin.E202 : <model> has no ForeignKey to <parent model> ./ <model> has more than one ForeignKey to <parent model> . You must\nspecify a fk_name attribute. admin.E203 : The value of extra must be an integer. admin.E204 : The value of max_num must be an integer. admin.E205 : The value of min_num must be an integer. admin.E206 : The value of formset must inherit from BaseModelFormSet . GenericInlineModelAdmin ¶ The following checks are performed on any GenericInlineModelAdmin that is\nregistered as an inline on a ModelAdmin . admin.E301 : 'ct_field' references <label> , which is not a field\non <model> . admin.E302 : 'ct_fk_field' references <label> , which is not a\nfield on <model> . admin.E303 : <model> has no GenericForeignKey . admin.E304 : <model> has no GenericForeignKey using content type\nfield <field name> and object ID field <field name> . AdminSite ¶ The following checks are performed on the default AdminSite : admin.E401 : django.contrib.contenttypes must be in INSTALLED_APPS in order to use the admin application. admin.E402 : django.contrib.auth.context_processors.auth must be enabled in DjangoTemplates ( TEMPLATES ) if using the default auth backend in order to use the\nadmin application. admin.E403 : A django.template.backends.django.DjangoTemplates instance must be configured in TEMPLATES in order to use the\nadmin application. admin.E404 : django.contrib.messages.context_processors.messages must be enabled in DjangoTemplates ( TEMPLATES ) in order to use the admin application. admin.E405 : django.contrib.auth must be in INSTALLED_APPS in order to use the admin application. admin.E406 : django.contrib.messages must be in INSTALLED_APPS in order to use the admin application. admin.E408 : django.contrib.auth.middleware.AuthenticationMiddleware must be in MIDDLEWARE in order to use the admin application. admin.E409 : django.contrib.messages.middleware.MessageMiddleware must be in MIDDLEWARE in order to use the admin application. admin.E410 : django.contrib.sessions.middleware.SessionMiddleware must be in MIDDLEWARE in order to use the admin application. admin.W411 : django.template.context_processors.request must be\nenabled in DjangoTemplates ( TEMPLATES ) in order to use the admin navigation sidebar. auth ¶ auth.E001 : REQUIRED_FIELDS must be a list or tuple. auth.E002 : The field named as the USERNAME_FIELD for a custom user\nmodel must not be included in REQUIRED_FIELDS . auth.E003 : <field> must be unique because it is named as the USERNAME_FIELD . auth.W004 : <field> is named as the USERNAME_FIELD , but it is not\nunique. auth.E005 : The permission codenamed <codename> clashes with a builtin\npermission for model <model> . auth.E006 : The permission codenamed <codename> is duplicated for model <model> . auth.E007 : The verbose_name of model <model> must be at most\n244 characters for its builtin permission names\nto be at most 255 characters. auth.E008 : The permission named <name> of model <model> is longer\nthan 255 characters. auth.C009 : <User model>.is_anonymous must be an attribute or property\nrather than a method. Ignoring this is a security issue as anonymous users\nwill be treated as authenticated! auth.C010 : <User model>.is_authenticated must be an attribute or\nproperty rather than a method. Ignoring this is a security issue as anonymous\nusers will be treated as authenticated! auth.E011 : The name of model <model> must be at most 93 characters\nfor its builtin permission names to be at most 100 characters. auth.E012 : The permission codenamed <codename> of model <model> is longer than 100 characters. auth.E013 : In order to use django.contrib.auth.middleware.LoginRequiredMiddleware , django.contrib.auth.middleware.AuthenticationMiddleware must be\ndefined before it in MIDDLEWARE. contenttypes ¶ The following checks are performed when a model contains a GenericForeignKey or GenericRelation : contenttypes.E001 : The GenericForeignKey object ID references the\nnonexistent field <field> . contenttypes.E002 : The GenericForeignKey content type references the\nnonexistent field <field> . contenttypes.E003 : <field> is not a ForeignKey . contenttypes.E004 : <field> is not a ForeignKey to contenttypes.ContentType . contenttypes.E005 : Model names must be at most 100 characters. postgres ¶ The following checks are performed on django.contrib.postgres model\nfields: postgres.E001 : Base field for array has errors: … postgres.E002 : Base field for array cannot be a related field. postgres.E003 : <field> default should be a callable instead of an\ninstance so that it’s not shared between all field instances. This check was\nchanged to fields.E010 in Django 3.1 . postgres.W004 : Base field for array has warnings: … sites ¶ The following checks are performed on any model using a CurrentSiteManager : sites.E001 : CurrentSiteManager could not find a field named <field name> . sites.E002 : CurrentSiteManager cannot use <field> as it is not a\nforeign key or a many-to-many field. The following checks verify that django.contrib.sites is correctly\nconfigured: sites.E101 : The SITE_ID setting must be an integer. staticfiles ¶ The following checks verify that django.contrib.staticfiles is correctly\nconfigured: staticfiles.E001 : The STATICFILES_DIRS setting is not a tuple\nor list. staticfiles.E002 : The STATICFILES_DIRS setting should not\ncontain the STATIC_ROOT setting. staticfiles.E003 : The prefix <prefix> in the STATICFILES_DIRS setting must not end with a slash. staticfiles.W004 : The directory <directory> in the STATICFILES_DIRS does not exist. staticfiles.E005 : The STORAGES setting must define a staticfiles storage.", "keywords": ["e023", "async_support", "model>.check", "column", "bracket", "comments", "e101", "registrations", "variable", "field_type", "e001", "hints", "https://", "type", "line", "subdomain", "url", "manytomanyfield", "marker", "e103", "w901", "signal", "4_0.e001", "intrusion", "e303", "e900", "e007", "critical", "id", "w342", "secure_ssl_redirect", "settings", "reason", "m", "e115", "e338", "null", "info", "method", "imagefield", "colon", "e310", "secret_key", "django.contrib.messages", "factors", "e223", "radio_fields[<field", "w025", "boolean", "e122", "e321", "use", "messages", "e107", "django.contrib.messages.middleware", "topic", "c009", "e312", "default", "option", "e309", "media_url", "vertical", "w004", "referrer", "e105", "domain", "sender", "e409", "e205", "e014", "username_field", "block", "clashes", "postgres", "contrib", "e127", "constraints", "django.contrib.sessions.middleware", "users", "guide", "e003", "<", "backend", "self", "label", "argument", "w036", "accessor", "nulls", "django.contrib.postgres", "auto", "django.contrib.staticfiles", "version", "checkmessage", "w018", "tuple", "integer", "allow_files", "authenticationmiddleware", "w016", "path.to.view", "x", "pillow", "e030", "e320", "e", "policy", "e150", "django.contrib.messages.context_processors.messages", "w906", "angle", "name", "pattern", "securitymiddleware", "e340", "header", "e200", "admin", "size", "secret_key_fallbacks[n", "e118", "django.contrib.contenttypes", "on_delete", "link", "charfield", "w903", "w017", "instances", "secure_hsts_seconds", "handler", "modeladmin>.autocomplete_fields", "e031", "subclass", "indexes", "lookup", "view_on_site", "sessions", "inlines", "storage", "sniffers", "tag", "namespace", "true", "e019", "through_fields", "framework", "relations", "e012", "nosniff", "radio_fields", "decimalfield", "e402", "ct_field", "currentsitemanager", "autocomplete_fields[n", "length", "features", "w021", "e330", "e336", "traffic", "benefit", "modeladmin", "key", "frame", "levels", "generatedfield", ".", "alias", "issues", "dictionary", "e308", "characters", "browser", "warnings", "error", "sha1", "save_on_top", "basemodelform", "xss", "template", "improperlyconfigured", "inline", "debug", "cache", "migrations", "set_null", "setting", "order", "app_label.app_name", "django.contrib.sessions", "e106", "documentation", "-", "e009", "field_name", "secure_referrer_policy", "transport", "insecure", "pk", "e204", "e121", "application", "scripting", "other_modeladmin>.autocomplete_fields", "migrate", "table", "system", "4.1.2", "preload", "aliases", "w020", "e306", "executing", "mode", "str", "ipaddressfield", "files", "query", "modules", "mariadb", "list_filter", "navigation", "e008", "e037", "list_display_links[n", "slash", "datefield", "languages_bidi", "m2", "result", "e307", "¶", "order_with_respect_to", "max_num", "e170", "adminsite", "w900", "field(s", "definition", "binaryfield", "w003", "e026", "server", "fieldsets[n][1", "e040", "sites", "e335", "word", "list_display_links", "w012", "example", "full_clean", "django.db.models", "session", "ordering", "djangotemplates", "identifier", "min_num", "django.middleware.security", "e311", "value", "e133", "e131", "w037", "w047", "definitions", "source", "exclude", "languages", "e113", "c", "subdomains", "e201", "ssl", "w005", "secure_content_type_nosniff", "e021", "details", "proxy", "inlinemodeladmin", "setup", "e119", "e904", "form", "object", "cookie", "e029", "genericinlinemodeladmin", "generatedfield.output_field", "warning", "attributes", "privacy", "w046", "w904", "parent", "w008", "e038", "e903", "issue", "e013", "array", "w010", "w163", "api", "listfilter", "e404", "projects", "level", "conditions", "django", "message", "genericforeignkey", "failure", "csrf_cookie_httponly", "syntax", "e907", "csrf", "approach", "field", "e332", "e126", "relation", "http", "e301", "effect", "e339", "=", "console", "w009", "e403", "language", "e221", "scheme", "e405", "verbose_name", "strict", "matches", "field1", "index", "lists", "nullbooleanfield", "connection", "w162", "https", "declarations", "mysql", "w346", "w014", "e006", "^", "django.contrib.auth.context_processors.auth", "obj", "staticfiles", "w015", "translation", "raw_id_fields[n", "citextfield", "templates", "max_digits", "app_label>.<model>.<field", "label>.<model", "list_max_show_all", "w340", "list_per_page", "count", "newlines", "http://", "w038", "secure_cross_origin_opener_policy", "property", "middleware", "e111", "codename", "model>.<accessor", "builtin", "balancer", "commands", "list_select_related", "site", "x_frame_options", "d", "e220", "manager", "corruption", "e304", "problem", "bytes", "fruit", "subclasses", "db_comment", "load", "upgrades", "file_upload_temp_dir", "fields", "e128", "static_url", "e337", "class>.model", "e018", "custom", "static_root", "collation", "e032", "oversight", "django.contrib.sites", "browsers", "keyword", "has_<foo>_permission", "genericipaddressfield", "none", "urls", "msg", "e906", "e016", "string_if_invalid", "list_editable[n", "command", "e035", ">", "readonly_fields[n", "e015", "e004", "content", "validators", "deployment", "e130", "route", "e034", "fieldsets[n", "app_label>.<model", "request", "include", "decimal_places", "db_default", "attacks", "cicharfield", "tables", "e017", "list_filter[n", "list_filter[n][1", "mapping", "attack", "list_display[n", "holes", "session_cookie_secure", "e140", "w022", "protection", "data", "e100", "w011", "constraint", "w019", "e125", "contenttype", "options", "w013", "environment", "messagemiddleware", "sidebar", "e027", "django_allow_async_unsafe", "filtering", "references", "storages", "clickjacking", "optional", "formset", "search_fields", "network", "s", "keys", "configuration", "floatrangefield", "e905", "e302", "e180", "csrf_trusted_origins", "path", "severity", "directory", "e041", "auth", "contenttypes", "elements", "rawsql", "e210", "module", "dollar", "arguments", "context", "e129", "e110", "security", "redirection", "prepopulated_fields[<field", "models", "ct_fk_field", "underscores", "pages", "criticals", "e102", "e104", "e333", "w344", "subset", "e410", "default_hashing_algorithm", "e408", "fieldlistfilter", "limit_choices_to", "onetoonefield", "readonly_fields", "e036", "app_dirs", "support", "w044", "types", "deny", "ciemailfield", "p", "to_field", "e108", "e406", "problems", "booleanfield", "django.middleware.csrf", "w002", "false", "save_as", "w006", "management", "filefield", "w341", "filter_vertical", "prefix", "_", "e002", "duplicate", "check", "w122", "w902", "e024", "values", "analysis", "sql_mode", "caches", "permission", "async", "e202", "prepopulated_fields", "compatibility", "safety", "autocomplete_fields", "underscore", "e401", "staticfiles_dirs", "e160", "list_display", "re_path", "fieldsets", "forgery", "location", "hostname", "httponly", "raw_id_fields", "e033", "filepathfield", "model", "e222", "max_length", "e132", "insecure-", "sessionmiddleware", "detection", "c010", "letters", "purposes", "w345", "checks", "date_hierarchy", "n’t", "e025", "checklist", "w027", "installed_apps", "class", "number", "site_id", "w343", "choices", "x001", "django.contrib.postgres.fields", "e109", "w411", "tuples", "columns", "e123", "secure_hsts_preload", "csrf_cookie_secure", "fields[n]/filter_horizontal[n]/filter_vertical[n]/fieldsets[n][m", "w001", "field2", "e028", "connections", "action", "attribute", "filter_horizontal", "w035", "string", "handlerxxx", "list", "e190", "hsts", "e020", "actions", "commaseparatedintegerfield", "app", "view", "parts", "model>.<field", "i", "list_editable", "datetimefield", "identifiers", "flags", "user", "secure_hsts_include_subdomains", "part", "file", "sha256", "e114", "jsonfield", "errors", "core", "./", "e005", "cewid", "unique_together", "hint", "e203", "e022", "w040", "trailing", "names", "signals", "--database", "expressions", "e039", "tags", "s.", "set", "django.contrib.auth", "autofield", "filter_vertical[n]/filter_horizontal[n", "django.contrib.auth.middleware", "foreignkey", "database", "relationship", "reverse", "loaders", "w224", "expression", "e901", "e112", "non", "db_index", "reference", "instance", "code", "basemodelformset", "primary_key", "e334", "genericrelation", "applabel", "csrfviewmiddleware", "session_cookie_httponly"], "type": "documentation"},
{"title": "Applications", "url": "https://docs.djangoproject.com/en/5.1/ref/applications/", "content": "Applications ¶ Django contains a registry of installed applications that stores configuration\nand provides introspection. It also maintains a list of available models . This registry is called apps and it’s available in django.apps : >>> from django.apps import apps >>> apps . get_app_config ( \"admin\" ) . verbose_name 'Administration' Projects and applications ¶ The term project describes a Django web application. The project Python\npackage is defined primarily by a settings module, but it usually contains\nother things. For example, when you run django-admin startproject mysite you’ll get a mysite project directory that contains a mysite Python\npackage with settings.py , urls.py , asgi.py and wsgi.py . The\nproject package is often extended to include things like fixtures, CSS, and\ntemplates which aren’t tied to a particular application. A project’s root directory (the one that contains manage.py ) is usually\nthe container for all of a project’s applications which aren’t installed\nseparately. The term application describes a Python package that provides some set of\nfeatures. Applications may be reused in various\nprojects. Applications include some combination of models, views, templates, template\ntags, static files, URLs, middleware, etc. They’re generally wired into\nprojects with the INSTALLED_APPS setting and optionally with other\nmechanisms such as URLconfs, the MIDDLEWARE setting, or template\ninheritance. It is important to understand that a Django application is a set of code\nthat interacts with various parts of the framework. There’s no such thing as\nan Application object. However, there’s a few places where Django needs to\ninteract with installed applications, mainly for configuration and also for\nintrospection. That’s why the application registry maintains metadata in an AppConfig instance for each installed application. There’s no restriction that a project package can’t also be considered an\napplication and have models, etc. (which would require adding it to INSTALLED_APPS ). Configuring applications ¶ To configure an application, create an apps.py module inside the\napplication, then define a subclass of AppConfig there. When INSTALLED_APPS contains the dotted path to an application\nmodule, by default, if Django finds exactly one AppConfig subclass in\nthe apps.py submodule, it uses that configuration for the application. This\nbehavior may be disabled by setting AppConfig.default to False . If the apps.py module contains more than one AppConfig subclass,\nDjango will look for a single one where AppConfig.default is True . If no AppConfig subclass is found, the base AppConfig class\nwill be used. Alternatively, INSTALLED_APPS may contain the dotted path to a\nconfiguration class to specify it explicitly: INSTALLED_APPS = [ ... , \"polls.apps.PollsAppConfig\" , ... , ] For application authors ¶ If you’re creating a pluggable app called “Rock ’n’ roll”, here’s how you\nwould provide a proper name for the admin: # rock_n_roll/apps.py from django.apps import AppConfig class RockNRollConfig ( AppConfig ): name = \"rock_n_roll\" verbose_name = \"Rock ’n’ roll\" RockNRollConfig will be loaded automatically when INSTALLED_APPS contains 'rock_n_roll' . If you need to prevent this, set default to False in the class definition. You can provide several AppConfig subclasses with different behaviors.\nTo tell Django which one to use by default, set default to True in its definition. If your users want to pick a non-default\nconfiguration, they must replace 'rock_n_roll' with the dotted path to that\nspecific class in their INSTALLED_APPS setting. The AppConfig.name attribute tells Django which application this\nconfiguration applies to. You can define any other attribute documented in the AppConfig API reference. AppConfig subclasses may be defined anywhere. The apps.py convention merely allows Django to load them automatically when INSTALLED_APPS contains the path to an application module rather\nthan the path to a configuration class. Note If your code imports the application registry in an application’s __init__.py , the name apps will clash with the apps submodule.\nThe best practice is to move that code to a submodule and import it. A\nworkaround is to import the registry under a different name: from django.apps import apps as django_apps For application users ¶ If you’re using “Rock ’n’ roll” in a project called anthology , but you\nwant it to show up as “Jazz Manouche” instead, you can provide your own\nconfiguration: # anthology/apps.py from rock_n_roll.apps import RockNRollConfig class JazzManoucheConfig ( RockNRollConfig ): verbose_name = \"Jazz Manouche\" # anthology/settings.py INSTALLED_APPS = [ \"anthology.apps.JazzManoucheConfig\" , # ... ] This example shows project-specific configuration classes located in a\nsubmodule called apps.py . This is a convention, not a requirement. AppConfig subclasses may be defined anywhere. In this situation, INSTALLED_APPS must contain the dotted path to\nthe configuration class because it lives outside of an application and thus\ncannot be automatically detected. Application configuration ¶ class AppConfig [source] ¶ Application configuration objects store metadata for an application. Some\nattributes can be configured in AppConfig subclasses. Others are set by Django and read-only. Configurable attributes ¶ AppConfig. name ¶ Full Python path to the application, e.g. 'django.contrib.admin' . This attribute defines which application the configuration applies to. It\nmust be set in all AppConfig subclasses. It must be unique across a Django project. AppConfig. label ¶ Short name for the application, e.g. 'admin' This attribute allows relabeling an application when two applications\nhave conflicting labels. It defaults to the last component of name .\nIt should be a valid Python identifier. It must be unique across a Django project. Warning Changing this attribute after migrations have been applied for an\napplication will result in breaking changes to a project or, in the\ncase of a reusable app, any existing installs of that app. This is\nbecause AppConfig.label is used in database tables and migration\nfiles when referencing an app in the dependencies list. AppConfig. verbose_name ¶ Human-readable name for the application, e.g. “Administration”. This attribute defaults to label.title() . AppConfig. path ¶ Filesystem path to the application directory, e.g. '/usr/lib/pythonX.Y/dist-packages/django/contrib/admin' . In most cases, Django can automatically detect and set this, but you can\nalso provide an explicit override as a class attribute on your AppConfig subclass. In a few situations this is\nrequired; for instance if the app package is a namespace package with\nmultiple paths. AppConfig. default ¶ Set this attribute to False to prevent Django from selecting a\nconfiguration class automatically. This is useful when apps.py defines\nonly one AppConfig subclass but you don’t want Django to use it by\ndefault. Set this attribute to True to tell Django to select a configuration\nclass automatically. This is useful when apps.py defines more than one AppConfig subclass and you want Django to use one of them by\ndefault. By default, this attribute isn’t set. AppConfig. default_auto_field [source] ¶ The implicit primary key type to add to models within this app. You can\nuse this to keep AutoField as the primary key\ntype for third party applications. By default, this is the value of DEFAULT_AUTO_FIELD . Read-only attributes ¶ AppConfig. module ¶ Root module for the application, e.g. <module 'django.contrib.admin' from 'django/contrib/admin/__init__.py'> . AppConfig. models_module ¶ Module containing the models, e.g. <module 'django.contrib.admin.models' from 'django/contrib/admin/models.py'> . It may be None if the application doesn’t contain a models module.\nNote that the database related signals such as pre_migrate and post_migrate are only emitted for applications that have a models module. Methods ¶ AppConfig. get_models ( include_auto_created = False , include_swapped = False ) [source] ¶ Returns an iterable of Model classes for this\napplication. Requires the app registry to be fully populated. AppConfig. get_model ( model_name , require_ready = True ) [source] ¶ Returns the Model with the given model_name . model_name is case-insensitive. Raises LookupError if no such model exists in this application. Requires the app registry to be fully populated unless the require_ready argument is set to False . require_ready behaves\nexactly as in apps.get_model() . AppConfig. ready () [source] ¶ Subclasses can override this method to perform initialization tasks such\nas registering signals. It is called as soon as the registry is fully\npopulated. Although you can’t import models at the module-level where AppConfig classes are defined, you can import them in ready() , using either an import statement or get_model() . If you’re registering model signals , you\ncan refer to the sender by its string label instead of using the model\nclass itself. Example: from django.apps import AppConfig from django.db.models.signals import pre_save class RockNRollConfig ( AppConfig ): # ... def ready ( self ): # importing model classes from .models import MyModel # or... MyModel = self . get_model ( \"MyModel\" ) # registering signals with the model's string label pre_save . connect ( receiver , sender = \"app_label.MyModel\" ) Warning Although you can access model classes as described above, avoid\ninteracting with the database in your ready() implementation.\nThis includes model methods that execute queries\n( save() , delete() , manager methods etc.), and\nalso raw SQL queries via django.db.connection . Your ready() method will run during startup of every management\ncommand. For example, even though the test database configuration is\nseparate from the production settings, manage.py test would still\nexecute some queries against your production database! Note In the usual initialization process, the ready method is only called\nonce by Django. But in some corner cases, particularly in tests which\nare fiddling with installed applications, ready might be called more\nthan once. In that case, either write idempotent methods, or put a flag\non your AppConfig classes to prevent rerunning code which should\nbe executed exactly one time. Namespace packages as apps ¶ Python packages without an __init__.py file are known as “namespace\npackages” and may be spread across multiple directories at different locations\non sys.path (see PEP 420 ). Django applications require a single base filesystem path where Django\n(depending on configuration) will search for templates, static assets,\netc. Thus, namespace packages may only be Django applications if one of the\nfollowing is true: The namespace package actually has only a single location (i.e. is not\nspread across more than one directory.) The AppConfig class used to configure the application\nhas a path class attribute, which is the\nabsolute directory path Django will use as the single base path for the\napplication. If neither of these conditions is met, Django will raise ImproperlyConfigured . Application registry ¶ apps ¶ The application registry provides the following public API. Methods that\naren’t listed below are considered private and may change without notice. apps. ready ¶ Boolean attribute that is set to True after the registry is fully\npopulated and all AppConfig.ready() methods are called. apps. get_app_configs () ¶ Returns an iterable of AppConfig instances. apps. get_app_config ( app_label ) ¶ Returns an AppConfig for the application with the\ngiven app_label . Raises LookupError if no such application\nexists. apps. is_installed ( app_name ) ¶ Checks whether an application with the given name exists in the registry. app_name is the full name of the app, e.g. 'django.contrib.admin' . apps. get_model ( app_label , model_name , require_ready = True ) ¶ Returns the Model with the given app_label and model_name . As a shortcut, this method also accepts a single\nargument in the form app_label.model_name . model_name is\ncase-insensitive. Raises LookupError if no such application or model exists. Raises ValueError when called with a single argument that doesn’t contain\nexactly one dot. Requires the app registry to be fully populated unless the require_ready argument is set to False . Setting require_ready to False allows looking up models while the app registry is being populated ,\nspecifically during the second phase where it imports models. Then get_model() has the same effect as importing the model. The main use\ncase is to configure model classes with settings, such as AUTH_USER_MODEL . When require_ready is False , get_model() returns a model class\nthat may not be fully functional (reverse accessors may be missing, for\nexample) until the app registry is fully populated. For this reason, it’s\nbest to leave require_ready to the default value of True whenever\npossible. Initialization process ¶ How applications are loaded ¶ When Django starts, django.setup() is responsible for populating the\napplication registry. setup ( set_prefix = True ) [source] ¶ Configures Django by: Loading the settings. Setting up logging. If set_prefix is True, setting the URL resolver script prefix to FORCE_SCRIPT_NAME if defined, or / otherwise. Initializing the application registry. This function is called automatically: When running an HTTP server via Django’s ASGI or WSGI support. When invoking a management command. It must be called explicitly in other cases, for instance in plain Python\nscripts. Changed in Django 5.0: Raises a RuntimeWarning when apps interact with the database before\nthe app registry has been fully populated. The application registry is initialized in three stages. At each stage, Django\nprocesses all applications in the order of INSTALLED_APPS . First Django imports each item in INSTALLED_APPS . If it’s an application configuration class, Django imports the root package\nof the application, defined by its name attribute. If\nit’s a Python package, Django looks for an application configuration in an apps.py submodule, or else creates a default application configuration. At this stage, your code shouldn’t import any models! In other words, your applications’ root packages and the modules that\ndefine your application configuration classes shouldn’t import any models,\neven indirectly. Strictly speaking, Django allows importing models once their application\nconfiguration is loaded. However, in order to avoid needless constraints on\nthe order of INSTALLED_APPS , it’s strongly recommended not\nimport any models at this stage. Once this stage completes, APIs that operate on application configurations\nsuch as get_app_config() become usable. Then Django attempts to import the models submodule of each application,\nif there is one. You must define or import all models in your application’s models.py or models/__init__.py . Otherwise, the application registry may not be fully\npopulated at this point, which could cause the ORM to malfunction. Once this stage completes, APIs that operate on models such as get_model() become usable. Finally Django runs the ready() method of each application\nconfiguration. Troubleshooting ¶ Here are some common problems that you may encounter during initialization: AppRegistryNotReady : This happens when\nimporting an application configuration or a models module triggers code that\ndepends on the app registry. For example, gettext() uses the app\nregistry to look up translation catalogs in applications. To translate at\nimport time, you need gettext_lazy() instead. (Using gettext() would be a bug,\nbecause the translation would happen at import time, rather than at each\nrequest depending on the active language.) Executing database queries with the ORM at import time in models modules\nwill also trigger this exception. The ORM cannot function properly until all\nmodels are available. This exception also happens if you forget to call django.setup() in\na standalone Python script. ImportError: cannot import name ... This happens if the import sequence\nends up in a loop. To eliminate such problems, you should minimize dependencies between your\nmodels modules and do as little work as possible at import time. To avoid\nexecuting code at import time, you can move it into a function and cache its\nresults. The code will be executed when you first need its results. This\nconcept is known as “lazy evaluation”. django.contrib.admin automatically performs autodiscovery of admin modules in installed applications. To prevent it, change your INSTALLED_APPS to contain 'django.contrib.admin.apps.SimpleAdminConfig' instead of 'django.contrib.admin' . RuntimeWarning: Accessing the database during app initialization is discouraged. This warning is triggered for database queries executed before\napps are ready, such as during module imports or in the AppConfig.ready() method. Such premature database queries are\ndiscouraged because they will run during the startup of every management\ncommand, which will slow down your project startup, potentially cache stale\ndata, and can even fail if migrations are pending. For example, a common mistake is making a database query to populate form\nfield choices: class LocationForm ( forms . Form ): country = forms . ChoiceField ( choices = [ c . name for c in Country . objects . all ()]) In the example above, the query from Country.objects.all() is executed\nduring module import, because the QuerySet is iterated over. To avoid the\nwarning, the form could use a ModelChoiceField instead: class LocationForm ( forms . Form ): country = forms . ModelChoiceField ( queryset = Country . objects . all ()) To make it easier to find the code that triggered this warning, you can make\nPython treat warnings as errors to reveal the\nstack trace, for example with python -Werror manage.py shell .", "keywords": ["implementation", "iterable", "assets", "script", "work", "anthology.apps", "warnings", "restriction", "type", "template", "improperlyconfigured", "url", "force_script_name", "support", "cache", "migrations", "translation", "-werror", "country", "introspection", "admin/__init__.py", "statement", "setting", "django.db.models.signals", "tasks", "stage", "changes", "templates", "order", "problems", "stack", "rocknrollconfig", "administration", "settings", "places", "submodule", "false", "time", "reason", "set_prefix", "application", "exception", "management", "classes", "country.objects.all", "mysite", "middleware", "default_auto_field", "party", "method", "shell", "queryset", "mechanisms", "tests", "mistake", "catalogs", "configurations", "requirement", "behavior", "metadata", "startup", "authors", "directories", "concept", "modules", "labels", "files", "cases", "css", "query", "corner", "manager", "following", "use", "pythonx.y", "get_app_config", "import", "views", "models/__init__.py", "subclasses", "'", "item", "project", "paths", "scripts", "anthology", "#", "point", "startproject", "test", "apis", "behaviors", "¶", "default", "autodiscovery", "require_ready", "auth_user_model", "django.setup", "resolver", "web", "pre_save", "definition", "methods", "appconfig.name", "sender", "location", "gettext_lazy", "model", "django.contrib.admin.models", "server", "none", "urls", "apps.get_model", "loop", "runtimewarning", "package", "base", "get_model", "process", "contrib", "trace", "results", "command", "modelchoicefield", "django_apps", "example", "constraints", "checks", "roll", "users", "n’t", "identifier", "configures", "component", "importerror", "value", "convention", "installed_apps", "allows", "mymodel", "production", "dot", "first", "self", "label", "source", "case", "argument", "imports", "class", "words", "lookuperror", "applications", "short", "behaves", "flag", "app_label.model_name", "filesystem", "inheritance", "receiver", "request", "sys.path", "locationform", "malfunction", "save", "rock_n_roll.apps", "c", "app_label", "tables", "simpleadminconfig", "attribute", "function", "thing", "rock", "string", "things", "label.title", "list", "bug", "term", "gettext", "lib", "data", "setup", "locations", "app", "override", "exists", "django.apps", "jazz", "form", "django.contrib.admin.apps", "human", "parts", "apps.py", "installs", "name", "object", "pollsappconfig", "root", "post_migrate", "warning", "file", "queries", "stages", "one", "attributes", "idempotent", "admin", "dependencies", "returns", "errors", "python", "combination", "notice", "instances", "phase", "shortcut", "initialization", "store", "fixtures", "appregistrynotready", "sequence", "choices", "configuration", "subclass", "api", "defines", "situations", "migration", "sql", "orm", "path", "projects", "others", "dist", "django", "signals", "level", "conditions", "valueerror", "directory", "namespace", "evaluation", "pep", "true", "tags", "asgi", "set", "framework", "autofield", "module", "apps", "rock_n_roll", "practice", "urlconfs", "jazzmanoucheconfig", "packages", "field", "database", "model_name", "http", "pre_migrate", "get_models", "forms", "reference", "instance", "effect", "features", "code", "models", "=", "manouche", "accessors", "wsgi", "registry", "appconfig", "language", "include_auto_created", "situation", "defaults", ".models", "choicefield", ".", "container", "workaround", "verbose_name", "django.contrib.admin"], "type": "documentation"},
{"title": "API Reference", "url": "https://docs.djangoproject.com/en/5.1/ref/", "content": "API Reference ¶ Applications System check framework Built-in class-based views API Clickjacking Protection contrib packages Cross Site Request Forgery protection Databases django-admin and manage.py Running management commands from your code Django Exceptions File handling Forms Logging Middleware Migration Operations Models Paginator Request and response objects SchemaEditor Settings Signals Templates TemplateResponse and SimpleTemplateResponse Unicode data django.urls utility functions django.urls functions for use in URLconfs django.conf.urls functions for use in URLconfs Django Utils Validators Built-in Views", "keywords": ["response", "utility", "views", "class", "django.conf.urls", "paginator", "exceptions", "applications", "api", "request", "migration", "django", "schemaeditor", "¶", "cross", "forgery", "templates", "framework", "protection", "packages", "urlconfs", "settings", "data", "management", "templateresponse", "unicode", "validators", "django.urls", "middleware", "contrib", "forms", "reference", "simpletemplateresponse", "check", "code", "models", "file", "system", "utils", "commands", "operations", "site", "functions", "clickjacking", "use", "logging"], "type": "documentation"},
{"title": "Troubleshooting", "url": "https://docs.djangoproject.com/en/5.1/faq/troubleshooting/", "content": "Troubleshooting ¶ This page contains some advice about errors and problems commonly encountered\nduring the development of Django applications. Problems running django-admin ¶ command not found: django-admin ¶ django-admin should be on your system path if you\ninstalled Django via pip . If it’s not in your path, ensure you have your\nvirtual environment activated and you can try running the equivalent command python -m django . macOS permissions ¶ If you’re using macOS, you may see the message “permission denied” when\nyou try to run django-admin . This is because, on Unix-based systems like\nmacOS, a file must be marked as “executable” before it can be run as a program.\nTo do this, open Terminal.app and navigate (using the cd command) to the\ndirectory where django-admin is installed, then\nrun the command sudo chmod +x django-admin . Miscellaneous ¶ I’m getting a UnicodeDecodeError . What am I doing wrong? ¶ This class of errors happen when a bytestring containing non-ASCII sequences is\ntransformed into a Unicode string and the specified encoding is incorrect. The\noutput generally looks like this: UnicodeDecodeError: 'ascii' codec can't decode byte 0x?? in position ?: ordinal not in range(128) The resolution mostly depends on the context, however here are two common\npitfalls producing this error: Your system locale may be a default ASCII locale, like the “C” locale on\nUNIX-like systems (can be checked by the locale command). If it’s the\ncase, please refer to your system documentation to learn how you can change\nthis to a UTF-8 locale. Related resources: Unicode in Django https://wiki.python.org/moin/UnicodeDecodeError", "keywords": ["unix", "0x", "encoding", "case", "macos", "permissions", "class", "chmod", "cd", "+", "advice", "permission", "applications", "position", "unicodedecodeerror", "resolution", "error", "sequences", "terminal.app", "path", "output", "c", "django", "¶", "message", "directory", "default", "systems", "string", "documentation", "-", "problems", "development", "sudo", "program", "locale", "pitfalls", "page", "context", "unicode", "i", "range(128", "environment", "ascii", "codec", "command", "resources", "file", "system", "admin", "wrong", "pip", "errors", "python"], "type": "documentation"},
{"title": "FAQ: Contributing code", "url": "https://docs.djangoproject.com/en/5.1/faq/contributing/", "content": "FAQ: Contributing code ¶ How can I get started contributing code to Django? ¶ Thanks for asking! We’ve written an entire document devoted to this question.\nIt’s titled Contributing to Django . I submitted a bug fix several weeks ago. Why are you ignoring my contribution? ¶ Don’t worry: We’re not ignoring you! It’s important to understand there is a difference between “a ticket is being\nignored” and “a ticket has not been attended to yet.” Django’s ticket system\ncontains hundreds of open tickets, of various degrees of impact on end-user\nfunctionality, and Django’s developers have to review and prioritize. On top of that: the people who work on Django are all volunteers. As a result,\nthe amount of time that we have to work on the framework is limited and will\nvary from week to week depending on our spare time. If we’re busy, we may not\nbe able to spend as much time on Django as we might want. The best way to make sure tickets do not get hung up on the way to checkin is\nto make it dead easy, even for someone who may not be intimately familiar with\nthat area of the code, to understand the problem and verify the fix: Are there clear instructions on how to reproduce the bug? If this\ntouches a dependency (such as Pillow), a contrib module, or a specific\ndatabase, are those instructions clear enough even for someone not\nfamiliar with it? If there are several branches linked to the ticket, is it clear what each one\ndoes, which ones can be ignored and which matter? Does the change include a unit test? If not, is there a very clear\nexplanation why not? A test expresses succinctly what the problem is,\nand shows that the branch actually fixes it. If your contribution is not suitable for inclusion in Django, we won’t ignore\nit – we’ll close the ticket. So if your ticket is still open, it doesn’t mean\nwe’re ignoring you; it just means we haven’t had time to look at it yet. When and how might I remind the team of a change I care about? ¶ A polite, well-timed message in the forum/branch is one way to get attention.\nTo determine the right time, you need to keep an eye on the schedule. If you\npost your message right before a release deadline, you’re not likely to get the\nsort of attention you require. Gentle reminders in the #contributing-getting-started channel in the Django Discord server can work. Another way to get traction is to pull several related tickets together. When\nsomeone sits down to review a bug in an area they haven’t touched for\na while, it can take a few minutes to remember all the fine details of how\nthat area of code works. If you collect several minor bug fixes together into\na similarly themed group, you make an attractive target, as the cost of coming\nup to speed on an area of code can be spread over multiple tickets. Please refrain from emailing anyone personally or repeatedly raising the same\nissue over and over again. This sort of behavior will not gain you any\nadditional attention – certainly not the attention that you need in order to\nget your issue addressed. But I’ve reminded you several times and you keep ignoring my contribution! ¶ Seriously - we’re not ignoring you. If your contribution is not suitable for\ninclusion in Django, we will close the ticket. For all the other tickets, we\nneed to prioritize our efforts, which means that some tickets will be\naddressed before others. One of the criteria that is used to prioritize bug fixes is the number of\npeople that will likely be affected by a given bug. Bugs that have the\npotential to affect many people will generally get priority over those that\nare edge cases. Another reason that a bug might be ignored for a while is if the bug is a\nsymptom of a larger problem. While we can spend time writing, testing and\napplying lots of little changes, sometimes the right solution is to rebuild. If\na rebuild or refactor of a particular component has been proposed or is\nunderway, you may find that bugs affecting that component will not get as much\nattention. Again, this is a matter of prioritizing scarce resources. By\nconcentrating on the rebuild, we can close all the little bugs at once, and\nhopefully prevent other little bugs from appearing in the future. Whatever the reason, please keep in mind that while you may hit a particular\nbug regularly, it doesn’t necessarily follow that every single Django user\nwill hit the same bug. Different users use Django in different ways, stressing\ndifferent parts of the code under different conditions. When we evaluate the\nrelative priorities, we are generally trying to consider the needs of the\nentire community, instead of prioritizing the impact on one particular user.\nThis doesn’t mean that we think your problem is unimportant – just that in the\nlimited time we have available, we will always err on the side of making 10\npeople happy rather than making a single person happy. I’m sure my ticket is absolutely 100% perfect, can I mark it as “Ready For Checkin” myself? ¶ Sorry, no. It’s always better to get another set of eyes on a ticket. If\nyou’re having trouble getting that second set of eyes, see questions above.", "keywords": ["explanation", "rebuild", "instructions", "eyes", "branches", "ready", "%", "schedule", "discord", "order", "changes", "questions", "degrees", "lots", "reminders", "checkin", "time", "works", "reason", "release", "symptom", "bugs", "testing", "person", "behavior", "system", "dependency", "branch", "cases", "solution", "weeks", "area", "problem", "times", "for", "ways", "difference", "sort", "minutes", "result", "test", "way", "¶", "eye", "contributing", "attention", "side", "target", "server", "change", "hundreds", "contrib", "top", "mind", "fixes", "users", "unit", "priorities", "component", "channel", "fix", "impact", "end", "week", "people", "community", "number", "tickets", "writing", "deadline", "efforts", "needs", "ones", "developers", "future", "bug", "details", "trouble", "pillow", "question", "volunteers", "ticket", "potential", "parts", "group", "team", "priority", "user", "one", "amount", "issue", "matter", "edge", "while", "faq", "others", "conditions", "django", "thanks", "message", "contribution", "speed", "forum", "document", "set", "framework", "criteria", "module", "functionality", "inclusion", "cost", "database", "sorry", "refactor", "code", "resources", "traction"], "type": "documentation"},
{"title": "FAQ: The admin", "url": "https://docs.djangoproject.com/en/5.1/faq/admin/", "content": "FAQ: The admin ¶ I can’t log in. When I enter a valid username and password, it just brings up the login page again, with no error messages. ¶ The login cookie isn’t being set correctly, because the domain of the cookie\nsent out by Django doesn’t match the domain in your browser. Try setting the SESSION_COOKIE_DOMAIN setting to match your domain. For example, if\nyou’re going to “ https://www.example.com/admin/ ” in your browser, set SESSION_COOKIE_DOMAIN = 'www.example.com' . I can’t log in. When I enter a valid username and password, it brings up the login page again, with a “Please enter a correct username and password” error. ¶ If you’re sure your username and password are correct, make sure your user\naccount has is_active and is_staff set to True. The admin site\nonly allows access to users with those two fields both set to True. How do I automatically set a field’s value to the user who last edited the object in the admin? ¶ The ModelAdmin class provides customization hooks\nthat allow you to transform an object as it saved, using details from the\nrequest. By extracting the current user from the request, and customizing the save_model() hook, you can update an\nobject to reflect the user that edited it. See the documentation on\nModelAdmin methods for an example. How do I limit admin access so that objects can only be edited by the users who created them? ¶ The ModelAdmin class also provides customization\nhooks that allow you to control the visibility and editability of objects in the\nadmin. Using the same trick of extracting the user from the request, the get_queryset() and has_change_permission() can be used to\ncontrol the visibility and editability of objects in the admin. My admin-site CSS and images showed up fine using the development server, but they’re not displaying when using mod_wsgi. ¶ See serving the admin files in the “How to use Django with mod_wsgi” documentation. My “list_filter” contains a ManyToManyField, but the filter doesn’t display. ¶ Django won’t bother displaying the filter for a ManyToManyField if there\nare no related objects. For example, if your list_filter includes sites , and there are no sites in your\ndatabase, it won’t display a “Site” filter. In that case, filtering by site\nwould be meaningless. Some objects aren’t appearing in the admin. ¶ Inconsistent row counts may be caused by missing foreign key values or a\nforeign key field incorrectly set to null=False . If you have a record with a ForeignKey pointing to a nonexistent object and\nthat foreign key is included is list_display , the record will not be\nshown in the admin changelist because the Django model is declaring an\nintegrity constraint that is not implemented at the database level. How can I customize the functionality of the admin interface? ¶ You’ve got several options. If you want to piggyback on top of an add/change\nform that Django automatically generates, you can attach arbitrary JavaScript\nmodules to the page via the model’s class Admin js parameter . That parameter is a list of URLs, as strings,\npointing to JavaScript modules that will be included within the admin form via\na <script> tag. If you want more flexibility than is feasible by tweaking the auto-generated\nforms, feel free to write custom views for the admin. The admin is powered by\nDjango itself, and you can write custom views that hook into the authentication\nsystem, check permissions and do whatever else they need to do. If you want to customize the look-and-feel of the admin interface, read the\nnext question. The dynamically-generated admin site is ugly! How can I change it? ¶ We like it, but if you don’t agree, you can modify the admin site’s\npresentation by editing the CSS stylesheet and/or associated image files. The\nsite is built using semantic HTML and plenty of CSS hooks, so any changes you’d\nlike to make should be possible by editing the stylesheet. What browsers are supported for using the admin? ¶ The admin provides a fully-functional experience to the recent versions of\nmodern, web standards compliant browsers. On desktop this means Chrome, Edge,\nFirefox, Opera, Safari, and others. On mobile and tablet devices, the admin provides a responsive experience for\nweb standards compliant browsers. This includes the major browsers on both\nAndroid and iOS. Depending on feature support, there may be minor stylistic differences\nbetween browsers. These are considered acceptable variations in rendering. What assistive technologies are supported for using the admin? ¶ The admin is intended to be compatible with a wide range of assistive\ntechnologies, but there are currently many blockers. The support target is all\nlatest versions of major assistive technologies, including Dragon, JAWS, NVDA,\nOrca, TalkBack, Voice Control, VoiceOver iOS, VoiceOver macOS, Windows Contrast\nThemes, ZoomText, and screen magnifiers.", "keywords": ["experience", "contrast", "hook", "permissions", "counts", "interface", "script", "browser", "error", "differences", "range", "image", "support", "control", "manytomanyfield", "setting", "changes", "documentation", "filter", "development", "dragon", "trick", "mod_wsgi", "username", "null", "editability", "tablet", "variations", "customization", "system", "changelist", "flexibility", "values", "blockers", "site", "list_filter", "modules", "files", "css", "views", "messages", "macos", "record", "feel", "voiceover", "login", "fields", "authentication", "versions", "¶", "list_display", "firefox", "has_change_permission", "custom", "web", "standards", "methods", "session_cookie_domain", "domain", "browsers", "devices", "www.example.com", "target", "model", "server", "page", "change", "urls", "sites", "opera", "access", "top", "example", "javascript", "safari", "users", "js", "n’t", "value", "stylesheet", "case", "class", "request", "auto", "images", "windows", "zoomtext", "html", "list", "details", "question", "screen", "constraint", "form", "jaws", "orca", "object", "cookie", "options", "user", "plenty", "admin", "visibility", "account", "chrome", "edge", "password", "desktop", "ios", "faq", "others", "level", "django", "tag", "voice", "nvda", "save_model", "parameter", "true", "pointing", "field", "inconsistent", "presentation", "functionality", "strings", "themes", "foreignkey", "database", "add", "android", "hooks", "forms", "=", "integrity", "feature", "objects", "modeladmin", "key", "get_queryset", "talkback", "magnifiers", "row", "technologies"], "type": "documentation"},
{"title": "FAQ: Databases and models", "url": "https://docs.djangoproject.com/en/5.1/faq/models/", "content": "FAQ: Databases and models ¶ How can I see the raw SQL queries Django is running? ¶ Make sure your Django DEBUG setting is set to True .\nThen do this: >>> from django.db import connection >>> connection . queries [{'sql': 'SELECT polls_polls.id, polls_polls.question, polls_polls.pub_date FROM polls_polls', 'time': '0.002'}] connection.queries is only available if DEBUG is True .\nIt’s a list of dictionaries in order of query execution. Each dictionary has\nthe following: sql - The raw SQL statement time - How long the statement took to execute, in seconds. connection.queries includes all SQL statements – INSERTs, UPDATES,\nSELECTs, etc. Each time your app hits the database, the query will be recorded. If you are using multiple databases , you can use the\nsame interface on each member of the connections dictionary: >>> from django.db import connections >>> connections [ \"my_db_alias\" ] . queries If you need to clear the query list manually at any point in your functions,\ncall reset_queries() , like this: from django.db import reset_queries reset_queries () Can I use Django with a preexisting database? ¶ Yes. See Integrating with a legacy database . If I make changes to a model, how do I update the database? ¶ Take a look at Django’s support for schema migrations . If you don’t mind clearing data, your project’s manage.py utility has a flush option to reset the database to the state it was in\nimmediately after migrate was executed. Do Django models support multiple-column primary keys? ¶ No. Only single-column primary keys are supported. But this isn’t an issue in practice, because there’s nothing stopping you from\nadding other constraints (using the unique_together model option or\ncreating the constraint directly in your database), and enforcing the\nuniqueness at that level. Single-column primary keys are needed for things such\nas the admin interface to work; e.g., you need a single value to specify\nan object to edit or delete. Does Django support NoSQL databases? ¶ NoSQL databases are not officially supported by Django itself. There are,\nhowever, a number of side projects and forks which allow NoSQL functionality in\nDjango. You can take a look on the wiki page which discusses some projects. How do I add database-specific options to my CREATE TABLE statements, such as specifying MyISAM as the table type? ¶ We try to avoid adding special cases in the Django code to accommodate all the\ndatabase-specific options such as table type, etc. If you’d like to use any of\nthese options, create a migration with a RunSQL operation that contains ALTER TABLE statements that do what you want to do. For example, if you’re using MySQL and want your tables to use the MyISAM table\ntype, use the following SQL: ALTER TABLE myapp_mytable ENGINE = MyISAM ;", "keywords": ["state", "dictionary", "alter", "connection", "column", "inserts", "interface", "mysql", "statements", "reset_queries", "type", "debug", "support", "migrations", "statement", "order", "changes", "legacy", "time", "connection.queries", "myisam", "forks", "migrate", "table", "query", "cases", "utility", "import", "project", "point", "¶", "option", "member", "side", "preexisting", "model", "page", "select", "uniqueness", "example", ">", "constraints", "n’t", "functions", "value", "seconds", "number", "nosql", "tables", "engine", "connections", "polls_polls.id", "django.db", "things", "list", "data", "app", "constraint", "runsql", "object", "options", "selects", "clearing", "polls_polls", "dictionaries", "issue", "polls_polls.question", "execution", "keys", "unique_together", "sql", "migration", "faq", "projects", "level", "django", "look", "my_db_alias", "true", "practice", "functionality", "database", "databases", "operation", "schema", "code", "models", "updates"], "type": "documentation"},
{"title": "FAQ: Getting Help", "url": "https://docs.djangoproject.com/en/5.1/faq/help/", "content": "FAQ: Getting Help ¶ How do I do X? Why doesn’t Y work? Where can I go to get help? ¶ First, please check if your question is answered on the FAQ . Also, search for answers using your favorite search engine, and\nin the forum . If you can’t find an answer, please take a few minutes to formulate your\nquestion well. Explaining the problems you are facing clearly will help others\nhelp you. See the StackOverflow guide on asking good questions . Then, please post it in one of the following channels: The Django Forum section “Using Django” . This is for web-based\ndiscussions. The django-users mailing list. This is for email-based discussions. The Django Discord server for chat-based discussions. The #django IRC channel on the Libera.Chat IRC network. This is for\nchat-based discussions. If you’re new to IRC, see the Libera.Chat\ndocumentation for different ways to connect. In all these channels please abide by the Django Code of Conduct . In\nsummary, being friendly and patient, considerate, respectful, and careful in\nyour choice of words. Why hasn’t my message appeared on django-users ? ¶ django-users has a lot of subscribers. This is good for the community, as\nit means many people are available to contribute answers to questions.\nUnfortunately, it also means that django-users is an attractive target for\nspammers. In order to combat the spam problem, when you join the django-users mailing\nlist, we manually moderate the first message you send to the list. This means\nthat spammers get caught, but it also means that your first question to the\nlist might take a little longer to get answered. We apologize for any\ninconvenience that this policy may cause. Nobody answered my question! What should I do? ¶ Try making your question more specific, or provide a better example of your\nproblem. As with most open-source projects, the folks on these channels are volunteers.\nIf nobody has answered your question, it may be because nobody knows the\nanswer, it may be because nobody can understand the question, or it may be that\neverybody that can help is busy. You can also try asking on a different channel. But please don’t post your\nquestion in all three channels in quick succession. You might notice we have a second mailing list, called django-developers .\nThis list is for discussion of the development of Django itself. Please don’t\nemail support questions to this mailing list. Asking a tech support question\nthere is considered impolite, and you will likely be directed to ask on django-users . I think I’ve found a bug! What should I do? ¶ Detailed instructions on how to handle a potential bug can be found in our Guide to contributing to Django . I think I’ve found a security problem! What should I do? ¶ If you think you’ve found a security problem with Django, please send a message\nto security @ djangoproject . com . This is a private list only open to long-time,\nhighly trusted Django developers, and its archives are not publicly readable. Due to the sensitive nature of security issues, we ask that if you think you\nhave found a security problem, please don’t post a message on the forum, the\nDiscord server, IRC, or one of the public mailing lists. Django has a policy for handling security issues ;\nwhile a defect is outstanding, we would like to minimize any damage that\ncould be inflicted through public knowledge of that defect.", "keywords": ["lists", "instructions", "work", "tech", "support", "inconvenience", "nature", "archives", "discord", "order", "questions", "documentation", "problems", "development", "help", "time", "answer", "djangoproject", "spam", "irc", "damage", "problem", "ways", "minutes", "defect", "com", "section", "succession", "¶", "answers", "channels", "web", "folks", "target", "server", "discussions", "y", "choice", "conduct", "example", "users", "guide", "n’t", "email", "channel", "source", "people", "knowledge", "libera", "community", "words", "subscribers", "engine", "developers", "list", "bug", "x", "question", "volunteers", "policy", "chat", "network", "faq", "others", "summary", "projects", "django", "message", "forum", "lot", "stackoverflow", "mailing", "search", "spammers", "detailed", "security", "code", "discussion", "issues"], "type": "documentation"},
{"title": "FAQ: Using Django", "url": "https://docs.djangoproject.com/en/5.1/faq/usage/", "content": "FAQ: Using Django ¶ Why do I get an error about importing DJANGO_SETTINGS_MODULE ? ¶ Make sure that: The environment variable DJANGO_SETTINGS_MODULE is set to a\nfully-qualified Python module (i.e. mysite.settings ). Said module is on sys.path ( import mysite.settings should work). The module doesn’t contain syntax errors. I can’t stand your template language. Do I have to use it? ¶ We happen to think our template engine is the best thing since chunky bacon,\nbut we recognize that choosing a template language runs close to religion.\nThere’s nothing about Django that requires using the template language, so\nif you’re attached to Jinja2, Mako, or whatever, feel free to use those. Do I have to use your model/database layer? ¶ Nope. Just like the template system, the model/database layer is decoupled from\nthe rest of the framework. The one exception is: If you use a different database library, you won’t get to\nuse Django’s automatically-generated admin site. That app is coupled to the\nDjango database layer. How do I use image and file fields? ¶ Using a FileField or an ImageField in a model takes a few steps: In your settings file, you’ll need to define MEDIA_ROOT as\nthe full path to a directory where you’d like Django to store uploaded\nfiles. (For performance, these files are not stored in the database.)\nDefine MEDIA_URL as the base public URL of that directory.\nMake sure that this directory is writable by the web server’s user\naccount. Add the FileField or ImageField to your model, defining the upload_to option to specify a\nsubdirectory of MEDIA_ROOT to use for uploaded files. All that will be stored in your database is a path to the file\n(relative to MEDIA_ROOT ). You’ll most likely want to use the\nconvenience url attribute\nprovided by Django. For example, if your ImageField is called mug_shot , you can get\nthe absolute path to your image in a template with {{ object.mug_shot.url }} . How do I make a variable available to all my templates? ¶ Sometimes your templates all need the same thing. A common example would be\ndynamically generated menus. At first glance, it seems logical to add a common\ndictionary to the template context. The best way to do this in Django is to use a RequestContext . Details on\nhow to do this are here: Using RequestContext .", "keywords": ["religion", "account", "dictionary", "import", "mako", "upload_to", "variable", "menus", "error", "sys.path", "subdirectory", "faq", "template", "fields", "path", "django", "jinja2", "image", "url", "¶", "engine", "chunky", "nope", "directory", "object.mug_shot.url", "option", "way", "attribute", "thing", "mysite.settings", "syntax", "media_url", "web", "framework", "templates", "module", "details", "steps", "settings", "model", "server", "database", "app", "requestcontext", "exception", "filefield", "context", "django_settings_module", "glance", "environment", "imagefield", "user", "layer", "convenience", "example", "file", "files", "library", "bacon", "system", "admin", "language", "rest", "define", "site", "performance", "errors", "python"], "type": "documentation"},
{"title": "FAQ: Installation", "url": "https://docs.djangoproject.com/en/5.1/faq/install/", "content": "FAQ: Installation ¶ How do I get started? ¶ Download the code . Install Django (read the installation guide ). Walk through the tutorial . Check out the rest of the documentation , and ask questions if you\nrun into trouble. What are Django’s prerequisites? ¶ Django requires Python. See the table in the next question for the versions of\nPython that work with each version of Django. Other Python libraries may be\nrequired for some use cases, but you’ll receive an error about them as they’re\nneeded. For a development environment – if you just want to experiment with Django –\nyou don’t need to have a separate web server installed or database server. Django comes with its own lightweight development server .\nFor a production environment, Django follows the WSGI spec, PEP 3333 , which\nmeans it can run on a variety of web servers. See Deploying Django for more information. Django runs SQLite by default, which is included in Python installations.\nFor a production environment, we recommend PostgreSQL ; but we also officially\nsupport MariaDB , MySQL , SQLite , and Oracle . See Supported Databases for more information. What Python version can I use with Django? ¶ Django version Python versions 3.2 3.6, 3.7, 3.8, 3.9, 3.10 (added in 3.2.9) 4.0 3.8, 3.9, 3.10 4.1 3.8, 3.9, 3.10, 3.11 (added in 4.1.3) 4.2 3.8, 3.9, 3.10, 3.11, 3.12 (added in 4.2.8) 5.0 3.10, 3.11, 3.12 5.1 3.10, 3.11, 3.12, 3.13 (added in 5.1.3) For each version of Python, only the latest micro release (A.B.C) is officially\nsupported. You can find the latest micro version for each series on the Python\ndownload page . Typically, we will support a Python version up to and including the first\nDjango LTS release whose security support ends after security support for that\nversion of Python ends. For example, Python 3.9 security support ends in\nOctober 2025 and Django 4.2 LTS security support ends in April 2026. Therefore\nDjango 4.2 is the last version to support Python 3.9. What Python version should I use with Django? ¶ Since newer versions of Python are often faster, have more features, and are\nbetter supported, the latest version of Python 3 is recommended. You don’t lose anything in Django by using an older release, but you don’t take\nadvantage of the improvements and optimizations in newer Python releases.\nThird-party applications for use with Django are free to set their own version\nrequirements. Should I use the stable version or development version? ¶ Generally, if you’re using code in production, you should be using a\nstable release. The Django project publishes a full stable release\nevery eight months or so, with bugfix updates in between. These stable\nreleases contain the API that is covered by our backwards\ncompatibility guarantees; if you write code against stable releases,\nyou shouldn’t have any problems upgrading when the next official\nversion is released.", "keywords": ["releases", "installations", "information", "project", "applications", "api", "version", "error", "mysql", "october", "months", "faq", "install", "variety", "advantage", "django", "versions", "support", "compatibility", "¶", "default", "pep", "bugfix", "lts", "web", "questions", "documentation", "series", "development", "trouble", "servers", "deploying", "question", "a.b.c", "requirements", "problems", "optimizations", "tutorial", "server", "database", "sqlite", "page", "april", "databases", "release", "oracle", "libraries", "prerequisites", "environment", "party", "guarantees", "table", "download", "spec", "code", "security", "example", "features", "wsgi", "guide", "n’t", "rest", "improvements", "installation", "python", "cases", "production", "mariadb", "use"], "type": "documentation"},
{"title": "FAQ: General", "url": "https://docs.djangoproject.com/en/5.1/faq/general/", "content": "FAQ: General ¶ Why does this project exist? ¶ Django grew from a very practical need: World Online, a newspaper web\noperation, is responsible for building intensive web applications on journalism\ndeadlines. In the fast-paced newsroom, World Online often has only a matter of\nhours to take a complicated web application from concept to public launch. At the same time, the World Online web developers have consistently been\nperfectionists when it comes to following best practices of web development. In fall 2003, the World Online developers (Adrian Holovaty and Simon Willison)\nditched PHP and began using Python to develop its websites. As they built\nintensive, richly interactive sites such as Lawrence.com, they began to extract\na generic web development framework that let them build web applications more\nand more quickly. They tweaked this framework constantly, adding improvements\nover two years. In summer 2005, World Online decided to open-source the resulting software,\nDjango. Django would not be possible without a whole host of open-source\nprojects – Apache , Python , and PostgreSQL to name a few – and we’re\nthrilled to be able to give something back to the open-source community. What does “Django” mean, and how do you pronounce it? ¶ Django is named after Django Reinhardt , a jazz manouche guitarist from the 1930s\nto early 1950s. To this day, he’s considered one of the best guitarists of all time. Listen to his music. You’ll like it. Django is pronounced JANG -oh. Rhymes with FANG-oh. The “D” is silent. We’ve also recorded an audio clip of the pronunciation . Is Django stable? ¶ Yes, it’s quite stable. Companies like Disqus, Instagram, Pinterest, and\nMozilla have been using Django for many years. Sites built on Django have\nweathered traffic spikes of over 50 thousand hits per second. Does Django scale? ¶ Yes. Compared to development time, hardware is cheap, and so Django is\ndesigned to take advantage of as much hardware as you can throw at it. Django uses a “shared-nothing” architecture, which means you can add hardware\nat any level – database servers, caching servers or web/application servers. The framework cleanly separates components such as its database layer and\napplication layer. And it ships with a simple-yet-powerful cache framework . Who’s behind this? ¶ Django was originally developed at World Online, the web department of a\nnewspaper in Lawrence, Kansas, USA. Django’s now run by an international team of volunteers . How is Django licensed? ¶ Django is distributed under the 3-clause BSD license . This\nis an open source license granting broad permissions to modify and redistribute\nDjango. Why does Django include Python’s license file? ¶ Django includes code from the Python standard library. Python is distributed\nunder a permissive open source license. A copy of the Python license is included with Django for compliance with Python’s terms. Which sites use Django? ¶ BuiltWithDjango.com features a constantly growing list of Django-powered\nsites. Django appears to be a MVC framework, but you call the Controller the “view”, and the View the “template”. How come you don’t use the standard names? ¶ Well, the standard names are debatable. In our interpretation of MVC, the “view” describes the data that gets presented\nto the user. It’s not necessarily how the data looks , but which data is\npresented. The view describes which data you see , not how you see it. It’s\na subtle distinction. So, in our case, a “view” is the Python callback function for a particular URL,\nbecause that callback function describes which data is presented. Furthermore, it’s sensible to separate content from presentation – which is\nwhere templates come in. In Django, a “view” describes which data is presented,\nbut a view normally delegates to a template, which describes how the data is\npresented. Where does the “controller” fit in, then? In Django’s case, it’s probably the\nframework itself: the machinery that sends a request to the appropriate view,\naccording to the Django URL configuration. If you’re hungry for acronyms, you might say that Django is a “MTV” framework\n– that is, “model”, “template”, and “view.” That breakdown makes much more\nsense. At the end of the day, it comes down to getting stuff done. And, regardless of\nhow things are named, Django gets stuff done in a way that’s most logical to\nus. <Framework X> does <feature Y> – why doesn’t Django? ¶ We’re well aware that there are other awesome web frameworks out there, and\nwe’re not averse to borrowing ideas where appropriate. However, Django was\ndeveloped precisely because we were unhappy with the status quo, so please be\naware that “because <Framework X> does it” is not going to be sufficient reason\nto add a given feature to Django. Why did you write all of Django from scratch, instead of using other Python libraries? ¶ When Django was originally written, Adrian and Simon spent quite a bit of time\nexploring the various Python web frameworks available. In our opinion, none of them were completely up to snuff. We’re picky. You might even call us perfectionists. (With deadlines.) Over time, we stumbled across open-source libraries that did things we’d\nalready implemented. It was reassuring to see other people solving similar\nproblems in similar ways, but it was too late to integrate outside code: We’d\nalready written, tested and implemented our own framework bits in several\nproduction settings – and our own code met our needs delightfully. In most cases, however, we found that existing frameworks/tools inevitably had\nsome sort of fundamental, fatal flaw that made us squeamish. No tool fit our\nphilosophies 100%. Like we said: We’re picky. We’ve documented our philosophies on the design philosophies page . Is Django a content-management-system (CMS)? ¶ No, Django is not a CMS, or any sort of “turnkey product” in and of itself.\nIt’s a web framework; it’s a programming tool that lets you build websites. For example, it doesn’t make much sense to compare Django to something like Drupal , because Django is something you use to create things like Drupal. Yes, Django’s automatic admin site is fantastic and timesaving – but the admin\nsite is one module of Django the framework. Furthermore, although Django has\nspecial conveniences for building “CMS-y” apps, that doesn’t mean it’s not just\nas appropriate for building “non-CMS-y” apps (whatever that means!). How can I download the Django documentation to read it offline? ¶ The Django docs are available in the docs directory of each Django tarball\nrelease. These docs are in reST (reStructuredText) format, and each text file\ncorresponds to a web page on the official Django site. Because the documentation is stored in revision control , you\ncan browse documentation changes just like you can browse code changes. Technically, the docs on Django’s site are generated from the latest development\nversions of those reST documents, so the docs on the Django site may offer more\ninformation than the docs that come with the latest Django release. How do I cite Django? ¶ It’s difficult to give an official citation format, for two reasons: citation\nformats can vary wildly between publications, and citation standards for\nsoftware are still a matter of some debate. For example, APA style ,  would dictate something like: Django (Version 1.5) [Computer Software]. (2013). Retrieved from https://www.djangoproject.com/. However, the only true guide is what your publisher will accept, so get a copy\nof those guidelines and fill in the gaps as best you can. If your referencing style guide requires a publisher name, use “Django Software\nFoundation”. If you need a publishing location, use “Lawrence, Kansas”. If you need a web address, use https://www.djangoproject.com/ . If you need a name, just use “Django”, without any tagline. If you need a publication date, use the year of release of the version you’re\nreferencing (e.g., 2013 for v1.5)", "keywords": ["1950s", "permissions", "opinion", "mvc", "debate", "software", "frameworks", "builtwithdjango.com", "interpretation", "newsroom", "adrian", "template", "url", "design", "fit", "cache", "control", "rhymes", "%", "docs", "changes", "lawrence.com", "templates", "documentation", "referencing", "publishing", "development", "problems", "servers", "style", "publications", "general", "settings", "sense", "reason", "time", "guitarist", "product", "application", "computer", "management", "pronunciation", "day", "snuff", "music", "perfectionists", "release", "conveniences", "quo", "cms", "php", "system", "concept", "rest", "site", "d", "cases", "status", "architecture", "bsd", "machinery", "delegates", "ways", "information", "sort", "project", "lawrence", "gaps", "guidelines", "publisher", "instagram", "mozilla", "way", "newspaper", "versions", "¶", "companies", "kansas", "copy", "web", "standards", "location", "clip", "citation", "need", "journalism", "model", "apache", "terms", "none", "well", "y", "page", "documents", "sites", "callback", "format", "technically", "mean", "spikes", "example", ">", "jang", "second", "tool", "guide", "year", "license", "production", "content", "years", "compliance", "end", "source", "people", "case", "scratch", "community", "online", "components", "applications", "ideas", "request", "version", "advantage", "publication", "needs", "flaw", "turnkey", "summer", "function", "developers", "things", "practices", "list", "apa", "bit", "x", "volunteers", "breakdown", "data", "mtv", "view", "jazz", "hits", "name", "bits", "team", "user", "file", "world", "usa", "library", "admin", "https://www.djangoproject.com/.", "fang", "department", "programming", "drupal", "python", "reasons", "deadlines", "disqus", "guitarists", "matter", "formats", "pinterest", "distinction", "configuration", "host", "faq", "simon", "projects", "level", "django", "willison", "clause", "names", "tools", "directory", "restructuredtext", "foundation", "address", "holovaty", "stuff", "date", "text", "framework", "module", "apps", "launch", "presentation", "1930s", "database", "no", "websites", "libraries", "operation", "hardware", "layer", "code", "reinhardt", "manouche", "feature", "philosophies", "fall", "traffic", "hours", "revision", "acronyms", "tagline", "improvements", "controller"], "type": "documentation"},
{"title": "Django FAQ", "url": "https://docs.djangoproject.com/en/5.1/faq/", "content": "Django FAQ ¶ FAQ: General Why does this project exist? What does “Django” mean, and how do you pronounce it? Is Django stable? Does Django scale? Who’s behind this? How is Django licensed? Why does Django include Python’s license file? Which sites use Django? Django appears to be a MVC framework, but you call the Controller the “view”, and the View the “template”. How come you don’t use the standard names? <Framework X> does <feature Y> – why doesn’t Django? Why did you write all of Django from scratch, instead of using other Python libraries? Is Django a content-management-system (CMS)? How can I download the Django documentation to read it offline? How do I cite Django? FAQ: Installation How do I get started? What are Django’s prerequisites? What Python version can I use with Django? What Python version should I use with Django? Should I use the stable version or development version? FAQ: Using Django Why do I get an error about importing DJANGO_SETTINGS_MODULE ? I can’t stand your template language. Do I have to use it? Do I have to use your model/database layer? How do I use image and file fields? How do I make a variable available to all my templates? FAQ: Getting Help How do I do X? Why doesn’t Y work? Where can I go to get help? Why hasn’t my message appeared on django-users ? Nobody answered my question! What should I do? I think I’ve found a bug! What should I do? I think I’ve found a security problem! What should I do? FAQ: Databases and models How can I see the raw SQL queries Django is running? Can I use Django with a preexisting database? If I make changes to a model, how do I update the database? Do Django models support multiple-column primary keys? Does Django support NoSQL databases? How do I add database-specific options to my CREATE TABLE statements, such as specifying MyISAM as the table type? FAQ: The admin I can’t log in. When I enter a valid username and password, it just brings up the login page again, with no error messages. I can’t log in. When I enter a valid username and password, it brings up the login page again, with a “Please enter a correct username and password” error. How do I automatically set a field’s value to the user who last edited the object in the admin? How do I limit admin access so that objects can only be edited by the users who created them? My admin-site CSS and images showed up fine using the development server, but they’re not displaying when using mod_wsgi. My “list_filter” contains a ManyToManyField, but the filter doesn’t display. Some objects aren’t appearing in the admin. How can I customize the functionality of the admin interface? The dynamically-generated admin site is ugly! How can I change it? What browsers are supported for using the admin? What assistive technologies are supported for using the admin? FAQ: Contributing code How can I get started contributing code to Django? I submitted a bug fix several weeks ago. Why are you ignoring my contribution? When and how might I remind the team of a change I care about? But I’ve reminded you several times and you keep ignoring my contribution! I’m sure my ticket is absolutely 100% perfect, can I mark it as “Ready For Checkin” myself? Troubleshooting Problems running django-admin Miscellaneous", "keywords": ["column", "mvc", "interface", "work", "variable", "error", "statements", "type", "template", "image", "manytomanyfield", "ready", "%", "changes", "templates", "documentation", "filter", "development", "problems", "mod_wsgi", "username", "general", "help", "checkin", "management", "django_settings_module", "myisam", "table", "cms", "system", "site", "list_filter", "css", "weeks", "problem", "messages", "times", "for", "project", "login", "fields", "¶", "browsers", "preexisting", "model", "server", "page", "y", "change", "sites", "access", "mean", ">", "users", "n’t", "license", "value", "fix", "content", "scratch", "nosql", "version", "images", "bug", "x", "question", "ticket", "view", "object", "prerequisites", "options", "team", "user", "file", "admin", "installation", "python", "password", "keys", "sql", "faq", "names", "django", "message", "contribution", "framework", "field", "functionality", "database", "databases", "libraries", "layer", "security", "code", "models", "objects", "language", "controller", "technologies"], "type": "documentation"},
{"title": "How to write a custom storage class", "url": "https://docs.djangoproject.com/en/5.1/howto/custom-file-storage/", "content": "How to write a custom storage class ¶ If you need to provide custom file storage – a common example is storing files\non some remote system – you can do so by defining a custom storage class.\nYou’ll need to follow these steps: Your custom storage system must be a subclass of django.core.files.storage.Storage : from django.core.files.storage import Storage class MyStorage ( Storage ): ... Django must be able to instantiate your storage system without any arguments.\nThis means that any settings should be taken from django.conf.settings : from django.conf import settings from django.core.files.storage import Storage class MyStorage ( Storage ): def __init__ ( self , option = None ): if not option : option = settings . CUSTOM_STORAGE_OPTIONS ... Your storage class must implement the _open() and _save() methods, along with any other methods appropriate to your storage class. See\nbelow for more on these methods. In addition, if your class provides local file storage, it must override\nthe path() method. Your storage class must be deconstructible so it can be serialized when it’s used on a field in a migration. As long\nas your field has arguments that are themselves serializable , you can use the django.utils.deconstruct.deconstructible class decorator for this\n(that’s what Django uses on FileSystemStorage). By default, the following methods raise NotImplementedError and will\ntypically have to be overridden: Storage.delete() Storage.exists() Storage.listdir() Storage.size() Storage.url() Note however that not all these methods are required and may be deliberately\nomitted. As it happens, it is possible to leave each method unimplemented and\nstill have a working Storage. By way of example, if listing the contents of certain storage backends turns\nout to be expensive, you might decide not to implement Storage.listdir() . Another example would be a backend that only handles writing to files. In this\ncase, you would not need to implement any of the above methods. Ultimately, which of these methods are implemented is up to you. Leaving some\nmethods unimplemented will result in a partial (possibly broken) interface. You’ll also usually want to use hooks specifically designed for custom storage\nobjects. These are: _open ( name , mode = 'rb' ) ¶ Required . Called by Storage.open() , this is the actual mechanism the storage class\nuses to open the file. This must return a File object, though in most cases,\nyou’ll want to return some subclass here that implements logic specific to the\nbackend storage system. The FileNotFoundError exception should be raised\nwhen a file doesn’t exist. _save ( name , content ) ¶ Called by Storage.save() . The name will already have gone through get_valid_name() and get_available_name() , and the content will be a File object itself. Should return the actual name of the file saved (usually the name passed\nin, but if the storage needs to change the file name return the new name\ninstead). get_valid_name ( name ) ¶ Returns a filename suitable for use with the underlying storage system. The name argument passed to this method is either the original filename sent to\nthe server or, if upload_to is a callable, the filename returned by that\nmethod after any path information is removed. Override this to customize how\nnon-standard characters are converted to safe filenames. The code provided on Storage retains only alpha-numeric characters, periods\nand underscores from the original filename, removing everything else. get_alternative_name ( file_root , file_ext ) ¶ Returns an alternative filename based on the file_root and file_ext parameters. By default, an underscore plus a random 7 character alphanumeric\nstring is appended to the filename before the extension. get_available_name ( name , max_length = None ) ¶ Returns a filename that is available in the storage mechanism, possibly taking\nthe provided filename into account. The name argument passed to this method\nwill have already cleaned to a filename valid for the storage system, according\nto the get_valid_name() method described above. The length of the filename will not exceed max_length , if provided. If a\nfree unique filename cannot be found, a SuspiciousFileOperation exception is raised. If a file with name already exists, get_alternative_name() is called to\nobtain an alternative name. Use your custom storage engine ¶ The first step to using your custom storage with Django is to tell Django about\nthe file storage backend you’ll be using. This is done using the STORAGES setting. This setting maps storage aliases, which are a way\nto refer to a specific storage throughout Django, to a dictionary of settings\nfor that specific storage backend. The settings in the inner dictionaries are\ndescribed fully in the STORAGES documentation. Storages are then accessed by alias from the django.core.files.storage.storages dictionary: from django.core.files.storage import storages example_storage = storages [ \"example\" ]", "keywords": ["dictionary", "characters", "filenames", "interface", "django.core.files.storage.storages", "handles", "mystorage", "notimplementederror", "documentation", "def", "settings", "exception", "storage.listdir", "alphanumeric", "_", "method", "system", "maps", "aliases", "required", "mode", "files", "cases", "use", "import", "example_storage", "information", "django.core.files.storage", "underscore", "way", "¶", "default", "init", "option", "get_available_name", "custom", "decorator", "methods", "rb", "server", "max_length", "none", "character", "example", "storage.save", "content", "backend", "self", "django.conf.settings", "case", "argument", "class", "get_alternative_name", "custom_storage_options", "save", "engine", "alpha", "string", "filename", "steps", "open", "storage.exists", "name", "object", "extension", "storage.open", "storage.delete", "suspiciousfileoperation", "file", "returns", "storages", "dictionaries", "addition", "account", "mechanism", "subclass", "migration", "storage", "path", "storage.size", "django", "filesystemstorage", "periods", "field", "backends", "arguments", "contents", "hooks", "logic", "length", "code", "file_ext", "=", "underscores", "storage.url", "objects", "filenotfounderror", "parameters", "step", "alias", "get_valid_name"], "type": "documentation"},
{"title": "How to create custom ", "url": "https://docs.djangoproject.com/en/5.1/howto/custom-management-commands/", "content": "How to create custom django-admin commands ¶ Applications can register their own actions with manage.py . For example,\nyou might want to add a manage.py action for a Django app that you’re\ndistributing. In this document, we will be building a custom closepoll command for the polls application from the tutorial . To do this, add a management/commands directory to the application. Django\nwill register a manage.py command for each Python module in that directory\nwhose name doesn’t begin with an underscore. For example: polls/\n    __init__.py\n    models.py\n    management/\n        __init__.py\n        commands/\n            __init__.py\n            _private.py\n            closepoll.py\n    tests.py\n    views.py In this example, the closepoll command will be made available to any project\nthat includes the polls application in INSTALLED_APPS . The _private.py module will not be available as a management command. The closepoll.py module has only one requirement – it must define a class Command that extends BaseCommand or one of its subclasses . Standalone scripts Custom management commands are especially useful for running standalone\nscripts or for scripts that are periodically executed from the UNIX crontab\nor from Windows scheduled tasks control panel. To implement the command, edit polls/management/commands/closepoll.py to\nlook like this: from django.core.management.base import BaseCommand , CommandError from polls.models import Question as Poll class Command ( BaseCommand ): help = \"Closes the specified poll for voting\" def add_arguments ( self , parser ): parser . add_argument ( \"poll_ids\" , nargs = \"+\" , type = int ) def handle ( self , * args , ** options ): for poll_id in options [ \"poll_ids\" ]: try : poll = Poll . objects . get ( pk = poll_id ) except Poll . DoesNotExist : raise CommandError ( 'Poll \" %s \" does not exist' % poll_id ) poll . opened = False poll . save () self . stdout . write ( self . style . SUCCESS ( 'Successfully closed poll \" %s \"' % poll_id ) ) Note When you are using management commands and wish to provide console\noutput, you should write to self.stdout and self.stderr ,\ninstead of printing to stdout and stderr directly. By\nusing these proxies, it becomes much easier to test your custom\ncommand. Note also that you don’t need to end messages with a newline\ncharacter, it will be added automatically, unless you specify the ending parameter: self . stdout . write ( \"Unterminated line\" , ending = \"\" ) The new custom command can be called using python manage.py closepoll <poll_ids> . The handle() method takes one or more poll_ids and sets poll.opened to False for each one. If the user referenced any nonexistent polls, a CommandError is raised. The poll.opened attribute does not exist in\nthe tutorial and was added to polls.models.Question for this example. Accepting optional arguments ¶ The same closepoll could be easily modified to delete a given poll instead\nof closing it by accepting additional command line options. These custom\noptions can be added in the add_arguments() method like this: class Command ( BaseCommand ): def add_arguments ( self , parser ): # Positional arguments parser . add_argument ( \"poll_ids\" , nargs = \"+\" , type = int ) # Named (optional) arguments parser . add_argument ( \"--delete\" , action = \"store_true\" , help = \"Delete poll instead of closing it\" , ) def handle ( self , * args , ** options ): # ... if options [ \"delete\" ]: poll . delete () # ... The option ( delete in our example) is available in the options dict\nparameter of the handle method. See the argparse Python documentation\nfor more about add_argument usage. In addition to being able to add custom command line options, all management commands can accept some default options\nsuch as --verbosity and --traceback . Management commands and locales ¶ By default, management commands are executed with the current active locale. If, for some reason, your custom management command must run without an active\nlocale (for example, to prevent translated content from being inserted into\nthe database), deactivate translations using the @no_translations decorator on your handle() method: from django.core.management.base import BaseCommand , no_translations class Command ( BaseCommand ): ... @no_translations def handle ( self , * args , ** options ): ... Since translation deactivation requires access to configured settings, the\ndecorator can’t be used for commands that work without configured settings. Testing ¶ Information on how to test custom management commands can be found in the testing docs . Overriding commands ¶ Django registers the built-in commands and then searches for commands in INSTALLED_APPS in reverse. During the search, if a command name\nduplicates an already registered command, the newly discovered command\noverrides the first. In other words, to override a command, the new command must have the same name\nand its app must be before the overridden command’s app in INSTALLED_APPS . Management commands from third-party apps that have been unintentionally\noverridden can be made available under a new name by creating a new command in\none of your project’s apps (ordered before the third-party app in INSTALLED_APPS ) which imports the Command of the overridden\ncommand. Command objects ¶ class BaseCommand [source] ¶ The base class from which all management commands ultimately derive. Use this class if you want access to all of the mechanisms which\nparse the command-line arguments and work out what code to call in\nresponse; if you don’t need to change any of that behavior,\nconsider using one of its subclasses . Subclassing the BaseCommand class requires that you implement the handle() method. Attributes ¶ All attributes can be set in your derived class and can be used in BaseCommand ’s subclasses . BaseCommand. help ¶ A short description of the command, which will be printed in the\nhelp message when the user runs the command python manage.py help <command> . BaseCommand. missing_args_message ¶ If your command defines mandatory positional arguments, you can customize\nthe message error returned in the case of missing arguments. The default is\noutput by argparse (“too few arguments”). BaseCommand. output_transaction ¶ A boolean indicating whether the command outputs SQL statements; if True , the output will automatically be wrapped with BEGIN; and COMMIT; . Default value is False . BaseCommand. requires_migrations_checks ¶ A boolean; if True , the command prints a warning if the set of\nmigrations on disk don’t match the migrations in the database. A warning\ndoesn’t prevent the command from executing. Default value is False . BaseCommand. requires_system_checks ¶ A list or tuple of tags, e.g. [Tags.staticfiles, Tags.models] . System\nchecks registered in the chosen tags will be checked for errors prior to executing the command. The value '__all__' can be used to specify that all system checks should be\nperformed. Default value is '__all__' . BaseCommand. style ¶ An instance attribute that helps create colored output when writing to stdout or stderr . For example: self . stdout . write ( self . style . SUCCESS ( \"...\" )) See Syntax coloring to learn how to modify the color palette and to\nsee the available styles (use uppercased versions of the “roles” described\nin that section). If you pass the --no-color option when running your command, all self.style() calls will return the original string uncolored. BaseCommand. suppressed_base_arguments ¶ The default command options to suppress in the help output. This should be\na set of option names (e.g. '--verbosity' ). The default values for the\nsuppressed options are still passed. Methods ¶ BaseCommand has a few methods that can be overridden but only\nthe handle() method must be implemented. Implementing a constructor in a subclass If you implement __init__ in your subclass of BaseCommand ,\nyou must call BaseCommand ’s __init__ : class Command ( BaseCommand ): def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) # ... BaseCommand. create_parser ( prog_name , subcommand , ** kwargs ) [source] ¶ Returns a CommandParser instance, which is an ArgumentParser subclass with a few customizations for\nDjango. You can customize the instance by overriding this method and calling super() with kwargs of ArgumentParser parameters. BaseCommand. add_arguments ( parser ) [source] ¶ Entry point to add parser arguments to handle command line arguments passed\nto the command. Custom commands should override this method to add both\npositional and optional arguments accepted by the command. Calling super() is not needed when directly subclassing BaseCommand . BaseCommand. get_version () [source] ¶ Returns the Django version, which should be correct for all built-in Django\ncommands. User-supplied commands can override this method to return their\nown version. BaseCommand. execute ( * args , ** options ) [source] ¶ Tries to execute this command, performing system checks if needed (as\ncontrolled by the requires_system_checks attribute). If the command\nraises a CommandError , it’s intercepted and printed to stderr . Calling a management command in your code execute() should not be called directly from your code to execute a\ncommand. Use call_command() instead. BaseCommand. handle ( * args , ** options ) [source] ¶ The actual logic of the command. Subclasses must implement this method. It may return a string which will be printed to stdout (wrapped\nby BEGIN; and COMMIT; if output_transaction is True ). BaseCommand. check ( app_configs = None , tags = None , display_num_errors = False , include_deployment_checks = False , fail_level = checks.ERROR , databases = None ) [source] ¶ Uses the system check framework to inspect the entire Django project for\npotential problems. Serious problems are raised as a CommandError ;\nwarnings are output to stderr ; minor notifications are output to stdout . If app_configs and tags are both None , all system checks are\nperformed except deployment and database related checks. tags can be a\nlist of check tags, like compatibility or models . You can pass include_deployment_checks=True to also perform deployment\nchecks, and list of database aliases in the databases to run database\nrelated checks against them. BaseCommand subclasses ¶ class AppCommand ¶ A management command which takes one or more installed application labels as\narguments, and does something with each of them. Rather than implementing handle() , subclasses must\nimplement handle_app_config() , which will be called once for\neach application. AppCommand. handle_app_config ( app_config , ** options ) ¶ Perform the command’s actions for app_config , which will be an AppConfig instance corresponding to an application\nlabel given on the command line. class LabelCommand ¶ A management command which takes one or more arbitrary arguments (labels) on\nthe command line, and does something with each of them. Rather than implementing handle() , subclasses must implement handle_label() , which will be called once for each label. LabelCommand. label ¶ A string describing the arbitrary arguments passed to the command. The\nstring is used in the usage text and error messages of the command.\nDefaults to 'label' . LabelCommand. handle_label ( label , ** options ) ¶ Perform the command’s actions for label , which will be the string as\ngiven on the command line. Command exceptions ¶ exception CommandError ( returncode = 1 ) [source] ¶ Exception class indicating a problem while executing a management command. If this exception is raised during the execution of a management command from a\ncommand line console, it will be caught and turned into a nicely-printed error\nmessage to the appropriate output stream (i.e., stderr ); as a result,\nraising this exception (with a sensible description of the error) is the\npreferred way to indicate that something has gone wrong in the execution of a\ncommand. It accepts the optional returncode argument to customize the exit\nstatus for the management command to exit with, using sys.exit() . If a management command is called from code through call_command() , it’s up to you to catch the\nexception when needed.", "keywords": ["disk", "edit", "doesnotexist", "crontab", "warnings", "error", "statements", "type", "line", "commanderror", "panel", "control", "migrations", "translation", "returncode", "requires_system_checks", "%", "tasks", "docs", "labelcommand", "documentation", "problems", "style", "closepoll.py", "help", "settings", "false", "pk", "sets", "reason", "application", "exception", "management", "_", "method", "party", "output_transaction", "mechanisms", "check", "args", "requirement", "testing", "behavior", "system", "commands", "values", "aliases", "notifications", "boolean", "labels", "proxies", "fail_level", "use", "status", "import", "messages", "problem", "subclasses", "'", "super", "information", "project", "scripts", "translations", "customizations", "#", "result", "point", "compatibility", "output", "underscore", "handle", "versions", "section", "way", "¶", "default", "init", "@no_translations", "option", "suppressed_base_arguments", "locales", "custom", "decorator", "call_command", "methods", "usage", "tutorial", "none", "character", "base", "commandparser", "execute", "access", "commit", "command", "polls.models", "example", "checks", "include_deployment_checks", "calls", "n’t", "parser", "display_num_errors", "value", "color", "content", "int", "self", "label", "unix", "source", "deployment", "case", "argument", "class", "begin", "words", "stream", "closepoll", "applications", "handle_app_config", "version", "tuple", "palette", "windows", "get_version", "action", "attribute", "string", "list", "question", "actions", "styles", "add_arguments", "polls", "app", "name", "poll", "options", "user", "init__.py", "warning", "exit", "attributes", "argumentparser", "admin", "returns", "errors", "python", "app_configs", "addition", "self.style", "optional", "response", "sys.exit", "constructor", "execution", "description", "kwargs", "subclass", "exceptions", "sql", "names", "subcommand", "django", "standalone", "poll_id", "directory", "self.stdout", "message", "parameter", "document", "tags", "syntax", "*", "set", "text", "framework", "module", "apps", "arguments", "locale", "self.stderr", "database", "search", "reverse", "handle_label", "databases", "roles", "no_translations", "poll_ids", "basecommand", "logic", "prog_name", "instance", "=", "code", "models", "console", "deactivation", "appcommand", "objects", "create_parser", "appconfig", "parameters", "app_config", "defaults", "entry", "success", "coloring", "nargs"], "type": "documentation"},
{"title": "How to use Django’s CSRF protection", "url": "https://docs.djangoproject.com/en/5.1/howto/csrf/", "content": "How to use Django’s CSRF protection ¶ To take advantage of CSRF protection in your views, follow these steps: The CSRF middleware is activated by default in the MIDDLEWARE setting. If you override that setting, remember that 'django.middleware.csrf.CsrfViewMiddleware' should come before any view\nmiddleware that assume that CSRF attacks have been dealt with. If you disabled it, which is not recommended, you can use csrf_protect() on particular views\nyou want to protect (see below). In any template that uses a POST form, use the csrf_token tag inside\nthe <form> element if the form is for an internal URL, e.g.: < form method = \"post\" > {% csrf_token %} This should not be done for POST forms that target external URLs, since\nthat would cause the CSRF token to be leaked, leading to a vulnerability. In the corresponding view functions, ensure that RequestContext is used to render the response so\nthat {% csrf_token %} will work properly. If you’re using the render() function, generic views, or contrib apps,\nyou are covered already since these all use RequestContext . Using CSRF protection with AJAX ¶ While the above method can be used for AJAX POST requests, it has some\ninconveniences: you have to remember to pass the CSRF token in as POST data with\nevery POST request. For this reason, there is an alternative method: on each\nXMLHttpRequest, set a custom X-CSRFToken header (as specified by the CSRF_HEADER_NAME setting) to the value of the CSRF token. This is\noften easier because many JavaScript frameworks provide hooks that allow\nheaders to be set on every request. First, you must get the CSRF token. How to do that depends on whether or not\nthe CSRF_USE_SESSIONS and CSRF_COOKIE_HTTPONLY settings\nare enabled. Acquiring the token if CSRF_USE_SESSIONS and CSRF_COOKIE_HTTPONLY are False ¶ The recommended source for the token is the csrftoken cookie, which will be\nset if you’ve enabled CSRF protection for your views as outlined above. The CSRF token cookie is named csrftoken by default, but you can control\nthe cookie name via the CSRF_COOKIE_NAME setting. You can acquire the token like this: function getCookie ( name ) { let cookieValue = null ; if ( document . cookie && document . cookie !== '' ) { const cookies = document . cookie . split ( ';' ); for ( let i = 0 ; i < cookies . length ; i ++ ) { const cookie = cookies [ i ]. trim (); // Does this cookie string begin with the name we want? if ( cookie . substring ( 0 , name . length + 1 ) === ( name + '=' )) { cookieValue = decodeURIComponent ( cookie . substring ( name . length + 1 )); break ; } } } return cookieValue ; } const csrftoken = getCookie ( 'csrftoken' ); The above code could be simplified by using the JavaScript Cookie library to replace getCookie : const csrftoken = Cookies . get ( 'csrftoken' ); Note The CSRF token is also present in the DOM in a masked form, but only if\nexplicitly included using csrf_token in a template. The cookie\ncontains the canonical, unmasked token. The CsrfViewMiddleware will accept either.\nHowever, in order to protect against BREACH attacks, it’s recommended to\nuse a masked token. Warning If your view is not rendering a template containing the csrf_token template tag, Django might not set the CSRF token cookie. This is common in\ncases where forms are dynamically added to the page. To address this case,\nDjango provides a view decorator which forces setting of the cookie: ensure_csrf_cookie() . Acquiring the token if CSRF_USE_SESSIONS or CSRF_COOKIE_HTTPONLY is True ¶ If you activate CSRF_USE_SESSIONS or CSRF_COOKIE_HTTPONLY , you must include the CSRF token in your HTML\nand read the token from the DOM with JavaScript: {% csrf_token %} < script > const csrftoken = document . querySelector ( '[name=csrfmiddlewaretoken]' ). value ; </ script > Setting the token on the AJAX request ¶ Finally, you’ll need to set the header on your AJAX request. Using the fetch() API: const request = new Request ( /* URL */ , { method : 'POST' , headers : { 'X-CSRFToken' : csrftoken }, mode : 'same-origin' // Do not send CSRF token to another domain. } ); fetch ( request ). then ( function ( response ) { // ... }); Using CSRF protection in Jinja2 templates ¶ Django’s Jinja2 template backend\nadds {{ csrf_input }} to the context of all templates which is equivalent\nto {% csrf_token %} in the Django template language. For example: < form method = \"post\" > {{ csrf_input }} Using the decorator method ¶ Rather than adding CsrfViewMiddleware as a blanket protection, you can use\nthe csrf_protect() decorator, which has\nexactly the same functionality, on particular views that need the protection.\nIt must be used both on views that insert the CSRF token in the output, and\non those that accept the POST form data. (These are often the same view\nfunction, but not always). Use of the decorator by itself is not recommended , since if you forget to\nuse it, you will have a security hole. The ‘belt and braces’ strategy of using\nboth is fine, and will incur minimal overhead. Handling rejected requests ¶ By default, a ‘403 Forbidden’ response is sent to the user if an incoming\nrequest fails the checks performed by CsrfViewMiddleware . This should\nusually only be seen when there is a genuine Cross Site Request Forgery, or\nwhen, due to a programming error, the CSRF token has not been included with a\nPOST form. The error page, however, is not very friendly, so you may want to provide your\nown view for handling this condition. To do this, set the CSRF_FAILURE_VIEW setting. CSRF failures are logged as warnings to the django.security.csrf logger. Using CSRF protection with caching ¶ If the csrf_token template tag is used by a template (or the get_token function is called some other way), CsrfViewMiddleware will\nadd a cookie and a Vary: Cookie header to the response. This means that the\nmiddleware will play well with the cache middleware if it is used as instructed\n( UpdateCacheMiddleware goes before all other middleware). However, if you use cache decorators on individual views, the CSRF middleware\nwill not yet have been able to set the Vary header or the CSRF cookie, and the\nresponse will be cached without either one. In this case, on any views that\nwill require a CSRF token to be inserted you should use the django.views.decorators.csrf.csrf_protect() decorator first: from django.views.decorators.cache import cache_page from django.views.decorators.csrf import csrf_protect @cache_page ( 60 * 15 ) @csrf_protect def my_view ( request ): ... If you are using class-based views, you can refer to Decorating\nclass-based views . Testing and CSRF protection ¶ The CsrfViewMiddleware will usually be a big hindrance to testing view\nfunctions, due to the need for the CSRF token which must be sent with every POST\nrequest. For this reason, Django’s HTTP client for tests has been modified to\nset a flag on requests which relaxes the middleware and the csrf_protect decorator so that they no longer rejects requests. In every other respect\n(e.g. sending cookies etc.), they behave the same. If, for some reason, you want the test client to perform CSRF\nchecks, you can create an instance of the test client that enforces\nCSRF checks: >>> from django.test import Client >>> csrf_client = Client ( enforce_csrf_checks = True ) Edge cases ¶ Certain views can have unusual requirements that mean they don’t fit the normal\npattern envisaged here. A number of utilities can be useful in these\nsituations. The scenarios they might be needed in are described in the following\nsection. Disabling CSRF protection for just a few views ¶ Most views requires CSRF protection, but a few do not. Solution: rather than disabling the middleware and applying csrf_protect to\nall the views that need it, enable the middleware and use csrf_exempt() . Setting the token when CsrfViewMiddleware.process_view() is not used ¶ There are cases when CsrfViewMiddleware.process_view may not have run\nbefore your view is run - 404 and 500 handlers, for example - but you still\nneed the CSRF token in a form. Solution: use requires_csrf_token() Including the CSRF token in an unprotected view ¶ There may be some views that are unprotected and have been exempted by csrf_exempt , but still need to include the CSRF token. Solution: use csrf_exempt() followed by requires_csrf_token() . (i.e. requires_csrf_token should be the innermost decorator). Protecting a view for only one path ¶ A view needs CSRF protection under one set of conditions only, and mustn’t have\nit for the rest of the time. Solution: use csrf_exempt() for the whole\nview function, and csrf_protect() for the\npath within it that needs protection. Example: from django.views.decorators.csrf import csrf_exempt , csrf_protect @csrf_exempt def my_view ( request ): @csrf_protect def protected_path ( request ): do_something () if some_condition (): return protected_path ( request ) else : do_something_else () Protecting a page that uses AJAX without an HTML form ¶ A page makes a POST request via AJAX, and the page does not have an HTML form\nwith a csrf_token that would cause the required CSRF cookie to be sent. Solution: use ensure_csrf_cookie() on the\nview that sends the page. CSRF protection in reusable applications ¶ Because it is possible for the developer to turn off the CsrfViewMiddleware ,\nall relevant views in contrib apps use the csrf_protect decorator to ensure\nthe security of these applications against CSRF. It is recommended that the\ndevelopers of other reusable apps that want the same guarantees also use the csrf_protect decorator on their views.", "keywords": ["xmlhttprequest", "csrf_exempt", "inconveniences", "+", "script", "frameworks", "warnings", "error", "ajax", "developer", "substring", "template", "url", "logger", "csrfviewmiddleware.process_view", "cache", "hindrance", "forbidden", "%", "setting", "order", "templates", "queryselector", "django.middleware.csrf", "settings", "reason", "false", "time", "updatecachemiddleware", "csrf_use_sessions", "null", "middleware", "method", "tests", "split", "testing", "csrf_failure_view", "cookievalue", "rest", "site", "mode", "cases", "solution", "use", "views", "import", "cookies", "respect", "condition", "output", "test", "way", "hole", "jinja2", "section", "¶", "csrf_client", "default", "csrf_input", "forgery", "custom", "decorator", "client", "domain", "requirements", "need", "@cache_page", "page", "urls", "vary", "origin", "render", "contrib", "requires_csrf_token", "example", "javascript", "checks", "csrf_token", "functions", "value", "backend", "decorating", "cache_page", "source", "handlers", "case", "class", "number", "protected_path", "decodeuricomponent", "flag", "applications", "request", "attacks", "advantage", "return", "html", "getcookie", "dom", "cross", "function", "developers", "string", "csrf_protect", "x", "protection", "steps", "data", "scenarios", "element", "view", "form", "csrftoken", "my_view", "name", "cookie", "pattern", "django.views.decorators.csrf.csrf_protect", "user", "guarantees", "header", "csrf_cookie_name", "library", "programming", "response", "edge", "braces", "api", "situations", "failures", "post", "const", "path", "conditions", "django", "tag", "vulnerability", "token", "true", "document", "csrf_cookie_httponly", "fetch", "csrf", "set", "apps", "functionality", "csrf_header_name", "requests", "django.views.decorators.cache", "http", "requestcontext", "ensure_csrf_cookie", "context", "decorators", "breach", "hooks", "headers", "forms", "instance", "length", "security", "=", "code", "overhead", "utilities", "do_something_else", "blanket", "language", "strategy", "belt", "enforce_csrf_checks", "csrfviewmiddleware", "some_condition"], "type": "documentation"},
{"title": "How to authenticate using ", "url": "https://docs.djangoproject.com/en/5.1/howto/auth-remote-user/", "content": "How to authenticate using REMOTE_USER ¶ This document describes how to make use of external authentication sources\n(where the web server sets the REMOTE_USER environment variable) in your\nDjango applications.  This type of authentication solution is typically seen on\nintranet sites, with single sign-on solutions such as IIS and Integrated\nWindows Authentication or Apache and mod_authnz_ldap , CAS , WebAuth , mod_auth_sspi , etc. When the web server takes care of authentication it typically sets the REMOTE_USER environment variable for use in the underlying application.  In\nDjango, REMOTE_USER is made available in the request.META attribute.  Django can be configured to make\nuse of the REMOTE_USER value using the RemoteUserMiddleware or PersistentRemoteUserMiddleware , and RemoteUserBackend classes found in django.contrib.auth . Configuration ¶ First, you must add the django.contrib.auth.middleware.RemoteUserMiddleware to the MIDDLEWARE setting after the django.contrib.auth.middleware.AuthenticationMiddleware : MIDDLEWARE = [ \"...\" , \"django.contrib.auth.middleware.AuthenticationMiddleware\" , \"django.contrib.auth.middleware.RemoteUserMiddleware\" , \"...\" , ] Next, you must replace the ModelBackend with RemoteUserBackend in the AUTHENTICATION_BACKENDS setting: AUTHENTICATION_BACKENDS = [ \"django.contrib.auth.backends.RemoteUserBackend\" , ] With this setup, RemoteUserMiddleware will detect the username in request.META['REMOTE_USER'] and will authenticate and auto-login that user\nusing the RemoteUserBackend . Be aware that this particular setup disables authentication with the default ModelBackend . This means that if the REMOTE_USER value is not set\nthen the user is unable to log in, even using Django’s admin interface.\nAdding 'django.contrib.auth.backends.ModelBackend' to the AUTHENTICATION_BACKENDS list will use ModelBackend as a fallback\nif REMOTE_USER is absent, which will solve these issues. Django’s user management, such as the views in contrib.admin and\nthe createsuperuser management command, doesn’t integrate with\nremote users. These interfaces work with users stored in the database\nregardless of AUTHENTICATION_BACKENDS . Note Since the RemoteUserBackend inherits from ModelBackend , you will\nstill have all of the same permissions checking that is implemented in ModelBackend . Users with is_active=False won’t be allowed to\nauthenticate. Use AllowAllUsersRemoteUserBackend if\nyou want to allow them to. If your authentication mechanism uses a custom HTTP header and not REMOTE_USER , you can subclass RemoteUserMiddleware and set the header attribute to the desired request.META key.  For example: from django.contrib.auth.middleware import RemoteUserMiddleware class CustomHeaderMiddleware ( RemoteUserMiddleware ): header = \"HTTP_AUTHUSER\" Warning Be very careful if using a RemoteUserMiddleware subclass with a custom\nHTTP header. You must be sure that your front-end web server always sets or\nstrips that header based on the appropriate authentication checks, never\npermitting an end-user to submit a fake (or “spoofed”) header value. Since\nthe HTTP headers X-Auth-User and X-Auth_User (for example) both\nnormalize to the HTTP_X_AUTH_USER key in request.META , you must\nalso check that your web server doesn’t allow a spoofed header using\nunderscores in place of dashes. This warning doesn’t apply to RemoteUserMiddleware in its default\nconfiguration with header = 'REMOTE_USER' , since a key that doesn’t\nstart with HTTP_ in request.META can only be set by your WSGI\nserver, not directly from an HTTP request header. If you need more control, you can create your own authentication backend\nthat inherits from RemoteUserBackend and\noverride one or more of its attributes and methods. Using REMOTE_USER on login pages only ¶ The RemoteUserMiddleware authentication middleware assumes that the HTTP\nrequest header REMOTE_USER is present with all authenticated requests. That\nmight be expected and practical when Basic HTTP Auth with htpasswd or\nsimilar mechanisms are used, but with Negotiate (GSSAPI/Kerberos) or other\nresource intensive authentication methods, the authentication in the front-end\nHTTP server is usually only set up for one or a few login URLs, and after\nsuccessful authentication, the application is supposed to maintain the\nauthenticated session itself. PersistentRemoteUserMiddleware provides support for this use case. It will maintain the authenticated session\nuntil explicit logout by the user. The class can be used as a drop-in\nreplacement of RemoteUserMiddleware in the documentation above.", "keywords": ["permissions", "interface", "variable", "gssapi", "type", "django.contrib.auth.backends", "support", "control", "fallback", "remoteusermiddleware", "setting", "cas", "documentation", "-", "place", "username", "false", "sets", "application", "management", "classes", "middleware", "_", "mechanisms", "solutions", "mod_auth_sspi", "solution", "use", "views", "import", "'", "login", "remoteuserbackend", "modelbackend", "contrib.admin", "authentication", "¶", "default", "resource", "custom", "web", "negotiate", "methods", "http_x_auth_user", "webauth", "server", "apache", "customheadermiddleware", "urls", "htpasswd", "sites", "command", "example", "checks", "session", "users", "n’t", "auth_user", "value", "end", "case", "class", "replacement", "http_authuser", "applications", "strips", "request", "auto", "kerberos", "windows", "iis", "attribute", "authenticationmiddleware", "meta", "care", "drop", "list", "remote_user", "x", "createsuperuser", "interfaces", "setup", "environment", "user", "warning", "header", "attributes", "sources", "allowallusersremoteuserbackend", "mechanism", "sign", "dashes", "configuration", "subclass", "django", "mod_authnz_ldap", "auth", "document", "django.contrib.auth", "django.contrib.auth.middleware", "intranet", "requests", "database", "http", "headers", "basic", "=", "underscores", "pages", "key", "persistentremoteusermiddleware", "wsgi", "integrated", "issues"], "type": "documentation"},
{"title": "How to deploy static files", "url": "https://docs.djangoproject.com/en/5.1/howto/static-files/deployment/", "content": "How to deploy static files ¶ See also For an introduction to the use of django.contrib.staticfiles , see How to manage static files (e.g. images, JavaScript, CSS) . Serving static files in production ¶ The basic outline of putting static files into production consists of two\nsteps: run the collectstatic command when static files change, then\narrange for the collected static files directory ( STATIC_ROOT ) to be\nmoved to the static file server and served. Depending on the staticfiles STORAGES alias, files may need to be moved to a new location\nmanually or the post_process method of\nthe Storage class might take care of that. As with all deployment tasks, the devil’s in the details. Every production\nsetup will be a bit different, so you’ll need to adapt the basic outline to fit\nyour needs. Below are a few common patterns that might help. Serving the site and your static files from the same server ¶ If you want to serve your static files from the same server that’s already\nserving your site, the process may look something like: Push your code up to the deployment server. On the server, run collectstatic to copy all the static files\ninto STATIC_ROOT . Configure your web server to serve the files in STATIC_ROOT under the URL STATIC_URL . For example, here’s how to do this with Apache and mod_wsgi . You’ll probably want to automate this process, especially if you’ve got\nmultiple web servers. Serving static files from a dedicated server ¶ Most larger Django sites use a separate web server – i.e., one that’s not also\nrunning Django – for serving static files. This server often runs a different\ntype of web server – faster but less full-featured. Some common choices are: Nginx A stripped-down version of Apache Configuring these servers is out of scope of this document; check each\nserver’s respective documentation for instructions. Since your static file server won’t be running Django, you’ll need to modify\nthe deployment strategy to look something like: When your static files change, run collectstatic locally. Push your local STATIC_ROOT up to the static file server into the\ndirectory that’s being served. rsync is a\ncommon choice for this step since it only needs to transfer the bits of\nstatic files that have changed. Serving static files from a cloud service or CDN ¶ Another common tactic is to serve static files from a cloud storage provider\nlike Amazon’s S3 and/or a CDN (content delivery network). This lets you\nignore the problems of serving static files and can often make for\nfaster-loading web pages (especially when using a CDN). When using these services, the basic workflow would look a bit like the above,\nexcept that instead of using rsync to transfer your static files to the\nserver you’d need to transfer the static files to the storage provider or CDN. There’s any number of ways you might do this, but if the provider has an API,\nyou can use a custom file storage backend to integrate the CDN with your Django project. If you’ve written or are using a\n3rd party custom storage backend, you can tell collectstatic to use\nit by setting staticfiles in STORAGES . For example, if you’ve written an S3 storage backend in myproject.storage.S3Storage you could use it with: STORAGES = { # ... \"staticfiles\" : { \"BACKEND\" : \"myproject.storage.S3Storage\" } } Once that’s done, all you have to do is run collectstatic and your\nstatic files would be pushed through your storage package up to S3. If you\nlater needed to switch to a different storage provider, you may only have to\nchange staticfiles in the STORAGES setting. For details on how you’d write one of these backends, see How to write a custom storage class . There are 3rd party apps available that\nprovide storage backends for many common file storage APIs. A good starting\npoint is the overview at djangopackages.org . Learn more ¶ For complete details on all the settings, commands, template tags, and other\npieces included in django.contrib.staticfiles , see the\nstaticfiles reference .", "keywords": ["instructions", "type", "template", "url", "staticfiles", "tasks", "documentation", "problems", "servers", "mod_wsgi", "settings", "overview", "method", "party", "consists", "commands", "site", "pieces", "files", "css", "use", "delivery", "ways", "project", "collectstatic", "#", "nginx", "point", "apis", "¶", "service", "outline", "static_url", "services", "custom", "web", "static_root", "location", "server", "apache", "workflow", "change", "choice", "sites", "rsync", "package", "process", "tactic", "command", "example", "javascript", "starting", "cdn", "myproject.storage", "production", "content", "backend", "deployment", "class", "number", "choices", "django.contrib.staticfiles", "introduction", "version", "images", "needs", "care", "details", "bit", "steps", "setup", "bits", "file", "one", "storages", "patterns", "post_process", "network", "provider", "api", "storage", "django", "directory", "scope", "document", "tags", "backends", "apps", "amazon", "devil", "reference", "code", "=", "pages", "strategy", "alias", "step", "s3"], "type": "documentation"},
{"title": "How to deploy Django", "url": "https://docs.djangoproject.com/en/5.1/howto/deployment/", "content": "How to deploy Django ¶ Django is full of shortcuts to make web developers’ lives easier, but all\nthose tools are of no use if you can’t easily deploy your sites. Since Django’s\ninception, ease of deployment has been a major goal. There are many options for deploying your Django application, based on your\narchitecture or your particular business needs, but that discussion is outside\nthe scope of what Django can give you as guidance. Django, being a web framework, needs a web server in order to operate. And\nsince most web servers don’t natively speak Python, we need an interface to\nmake that communication happen. The runserver command starts a\nlightweight development server, which is not suitable for production. Django currently supports two interfaces: WSGI and ASGI. WSGI is the main Python standard for communicating between web servers and\napplications, but it only supports synchronous code. ASGI is the new, asynchronous-friendly standard that will allow your\nDjango site to use asynchronous Python features, and asynchronous Django\nfeatures as they are developed. You should also consider how you will handle static files for your application, and how to handle error reporting . Finally, before you deploy your application to production, you should run\nthrough our deployment checklist to ensure that your\nconfigurations are suitable. How to deploy with WSGI How to use Django with Gunicorn How to use Django with uWSGI How to use Django with Apache and mod_wsgi How to authenticate against Django’s user database from Apache The application object Configuring the settings module Applying WSGI middleware How to deploy with ASGI How to use Django with Daphne How to use Django with Hypercorn How to use Django with Uvicorn The application object Configuring the settings module Applying ASGI middleware Deployment checklist Run manage.py check --deploy Switch away from manage.py runserver Critical settings Environment-specific settings HTTPS Performance optimizations Error reporting", "keywords": ["reporting", "deployment", "ease", "hypercorn", "business", "interface", "applications", "https", "communication", "error", "python", "standard", "shortcuts", "django", "tools", "¶", "needs", "applying", "developers", "scope", "order", "asgi", "guidance", "web", "framework", "development", "module", "servers", "goal", "optimizations", "settings", "server", "interfaces", "apache", "database", "application", "sites", "uwsgi", "object", "options", "environment", "daphne", "user", "command", "features", "code", "check", "configurations", "runserver", "files", "discussion", "wsgi", "communicating", "checklist", "site", "gunicorn", "performance", "inception", "production", "use", "uvicorn", "architecture"], "type": "documentation"},
{"title": "How to install Django on Windows", "url": "https://docs.djangoproject.com/en/5.1/howto/windows/", "content": "How to install Django on Windows ¶ This document will guide you through installing Python 3.13 and Django on\nWindows. It also provides instructions for setting up a virtual environment,\nwhich makes it easier to work on Python projects. This is meant as a beginner’s\nguide for users working on Django projects and does not reflect how Django\nshould be installed when developing changes for Django itself. The steps in this guide have been tested with Windows 10. In other\nversions, the steps would be similar. You will need to be familiar with using\nthe Windows command prompt. Install Python ¶ Django is a Python web framework, thus requiring Python to be installed on your\nmachine. At the time of writing, Python 3.13 is the latest version. To install Python on your machine go to https://www.python.org/downloads/ . The\nwebsite should offer you a download button for the latest Python version.\nDownload the executable installer and run it. Check the boxes next to “Install\nlauncher for all users (recommended)” then click “Install Now”. After installation, open the command prompt and check that the Python version\nmatches the version you installed by executing: ...\\> py --version py is not recognized or found Depending on how you’ve installed Python (such as via the Microsoft Store), py may not be available in the command prompt. You will then need to use python instead of py when entering\ncommands. See also For more details, see Using Python on Windows documentation. About pip ¶ pip is a package manager for Python and is included by default with the\nPython installer. It helps to install and uninstall Python packages\n(such as Django!). For the rest of the installation, we’ll use pip to\ninstall Python packages from the command line. Setting up a virtual environment ¶ It is best practice to provide a dedicated environment for each Django project\nyou create. There are many options to manage environments and packages within\nthe Python ecosystem, some of which are recommended in the Python\ndocumentation .\nPython itself comes with venv for managing\nenvironments which we will use for this guide. To create a virtual environment for your project, open a new command prompt,\nnavigate to the folder where you want to create your project and then enter the\nfollowing: ...\\> py -m venv project-name This will create a folder called ‘project-name’ if it does not already exist\nand set up the virtual environment. To activate the environment, run: ...\\> project-name\\Scripts\\activate.bat The virtual environment will be activated and you’ll see “(project-name)” next\nto the command prompt to designate that. Each time you start a new command\nprompt, you’ll need to activate the environment again. Install Django ¶ Django can be installed easily using pip within your virtual environment. In the command prompt, ensure your virtual environment is active, and execute\nthe following command: ...\\> py -m pip install Django This will download and install the latest Django release. After the installation has completed, you can verify your Django installation\nby executing django-admin --version in the command prompt. See Get your database running for information on database installation\nwith Django. Colored terminal output ¶ A quality-of-life feature adds colored (rather than monochrome) output to the\nterminal. In modern terminals this should work for both CMD and PowerShell. If\nfor some reason this needs to be disabled, set the environmental variable DJANGO_COLORS to nocolor . On older Windows versions, or legacy terminals, colorama 0.4.6+ must be\ninstalled to enable syntax coloring: ...\\> py -m pip install \"colorama >= 0.4.6\" See Syntax coloring for more information on color settings. Common pitfalls ¶ If django-admin only displays the help text no matter what arguments\nit is given, there is probably a problem with the file association in\nWindows. Check if there is more than one environment variable set for\nrunning Python scripts in PATH . This usually occurs when there is more\nthan one Python version installed. If you are connecting to the internet behind a proxy, there might be problems\nin running the command py -m pip install Django . Set the environment\nvariables for proxy configuration in the command prompt as follows: ...\\> set http_proxy = http://username:password@proxyserver:proxyport ...\\> set https_proxy = https://username:password@proxyserver:proxyport In general, Django assumes that UTF-8 encoding is used for I/O. This may\ncause problems if your system is set to use a different encoding. Recent\nversions of Python allow setting the PYTHONUTF8 environment\nvariable in order to force a UTF-8 encoding. Windows 10 also provides a\nsystem-wide setting by checking Use Unicode UTF-8 for worldwide language support in Language ‣ Administrative Language Settings\n‣ Change system locale in system settings.", "keywords": ["website", "instructions", "py", "variable", "terminal", "line", "pythonutf8", "button", "support", "setting", "\\", "changes", "order", "documentation", "-", "problems", "utf-8", "settings", "legacy", "reason", "help", "time", "0.4.6", "release", "system", "commands", "rest", "use", "manager", "following", "encoding", "problem", "powershell", "information", "project", "scripts", "proxyport", "output", "administrative", "versions", "¶", "default", "https://username", "web", "venv", "machine", "https://www.python.org/downloads/", "pitfalls", "change", "--version", "variables", "package", "command", "users", "guide", "pip", "color", "boxes", "microsoft", "http_proxy", "launcher", "version", "writing", "install", "windows", "environments", "https_proxy", "django_colors", "details", "internet", "proxy", "cmd", "steps", "name", "‣", "options", "environment", "file", "admin", "ecosystem", "quality", "installation", "python", "life", "store", "beginner", "configuration", "folder", "prompt", "path", "projects", "django", "colorama", "name\\scripts\\activate.bat", "document", "syntax", "text", "framework", "arguments", "practice", "packages", "terminals", "locale", "database", "unicode", "installer", "download", "=", "feature", "language", "nocolor", "o.", "coloring", "association"], "type": "documentation"},
{"title": "How to upgrade Django to a newer version", "url": "https://docs.djangoproject.com/en/5.1/howto/upgrade-version/", "content": "How to upgrade Django to a newer version ¶ While it can be a complex process at times, upgrading to the latest Django\nversion has several benefits: New features and improvements are added. Bugs are fixed. Older version of Django will eventually no longer receive security updates.\n(see Supported versions ). Upgrading as each new Django release is available makes future upgrades less\npainful by keeping your code base up to date. Here are some things to consider to help make your upgrade process as smooth as\npossible. Required Reading ¶ If it’s your first time doing an upgrade, it is useful to read the guide\non the different release processes . Afterward, you should familiarize yourself with the changes that were made in\nthe new Django version(s): Read the release notes for each ‘final’ release from\nthe one after your current Django version, up to and including the version to\nwhich you plan to upgrade. Look at the deprecation timeline for the\nrelevant versions. Pay particular attention to backwards incompatible changes to get a clear idea\nof what will be needed for a successful upgrade. If you’re upgrading through more than one feature version (e.g. 2.0 to 2.2),\nit’s usually easier to upgrade through each feature release incrementally\n(2.0 to 2.1 to 2.2) rather than to make all the changes for each feature\nrelease at once. For each feature release, use the latest patch release (e.g.\nfor 2.1, use 2.1.15). The same incremental upgrade approach is recommended when upgrading from one\nLTS to the next. Dependencies ¶ In most cases it will be necessary to upgrade to the latest version of your\nDjango-related dependencies as well. If the Django version was recently\nreleased or if some of your dependencies are not well-maintained, some of your\ndependencies may not yet support the new Django version. In these cases you may\nhave to wait until new versions of your dependencies are released. Resolving deprecation warnings ¶ Before upgrading, it’s a good idea to resolve any deprecation warnings raised\nby your project while using your current version of Django. Fixing these\nwarnings before upgrading ensures that you’re informed about areas of the code\nthat need altering. In Python, deprecation warnings are silenced by default. You must turn them on\nusing the -Wa Python command line option or the PYTHONWARNINGS environment variable. For example, to show warnings while running tests: /  $ python -Wa manage.py test ...\\> py -Wa manage.py test If you’re not using the Django test runner, you may need to also ensure that\nany console output is not captured which would hide deprecation warnings. For\nexample, if you use pytest : $ PYTHONWARNINGS = always pytest tests --capture = no Resolve any deprecation warnings with your current version of Django before\ncontinuing the upgrade process. Third party applications might use deprecated APIs in order to support multiple\nversions of Django, so deprecation warnings in packages you’ve installed don’t\nnecessarily indicate a problem. If a package doesn’t support the latest version\nof Django, consider raising an issue or sending a pull request for it. Installation ¶ Once you’re ready, it is time to install the new Django version . If you are using a virtual environment and it\nis a major upgrade, you might want to set up a new environment with all the\ndependencies first. If you installed Django with pip , you can use the --upgrade or -U flag: /  $ python -m pip install -U Django ...\\> py -m pip install -U Django Testing ¶ When the new environment is set up, run the full test suite for your application. Again, it’s useful to turn\non deprecation warnings on so they’re shown in the test output (you can also\nuse the flag if you test your app manually using manage.py runserver ): /  $ python -Wa manage.py test ...\\> py -Wa manage.py test After you have run the tests, fix any failures. While you have the release\nnotes fresh in your mind, it may also be a good time to take advantage of new\nfeatures in Django by refactoring your code to eliminate any deprecation\nwarnings. Deployment ¶ When you are sufficiently confident your app works with the new version of\nDjango, you’re ready to go ahead and deploy your upgraded Django project. If you are using caching provided by Django, you should consider clearing your\ncache after upgrading. Otherwise you may run into problems, for example, if you\nare caching pickled objects as these objects are not guaranteed to be\npickle-compatible across Django versions. A past instance of incompatibility\nwas caching pickled HttpResponse objects, either\ndirectly or indirectly via the cache_page() decorator.", "keywords": ["py", "variable", "warnings", "line", "httpresponse", "cache", "version(s", "altering", "order", "lts", "changes", "\\", "deprecation", "patch", "problems", "-u", "time", "application", "release", "party", "tests", "bugs", "testing", "cases", "runner", "pickle", "problem", "times", "processes", "project", "upgrade", "upgrades", "upgrading", "test", "idea", "versions", "output", "apis", "¶", "default", "suite", "option", "decorator", "/", "attention", "incompatibility", "package", "base", "process", "command", "mind", "example", "timeline", "runserver", "guide", "n’t", "pip", "cache_page", "deployment", "flag", "applications", "request", "version", "pythonwarnings", "advantage", "benefits", "-wa", "things", "areas", "app", "environment", "one", "dependencies", "notes", "installation", "python", "issue", "failures", "reading", "django", "date", "approach", "packages", "instance", "security", "features", "=", "code", "feature", "console", "objects", "updates", "improvements"], "type": "documentation"},
{"title": "How to delete a Django application", "url": "https://docs.djangoproject.com/en/5.1/howto/delete-app/", "content": "How to delete a Django application ¶ Django provides the ability to group sets of features into Python packages\ncalled applications . When requirements change, apps\nmay become obsolete or unnecessary. The following steps will help you delete an\napplication safely. Remove all references to the app (imports, foreign keys etc.). Remove all models from the corresponding models.py file. Create relevant migrations by running makemigrations . This step\ngenerates a migration that deletes tables for the removed models, and any\nother required migration for updating relationships connected to those\nmodels. Squash out references to the app in other apps’\nmigrations. Apply migrations locally, runs tests, and verify the correctness of your\nproject. Deploy/release your updated Django project. Remove the app from INSTALLED_APPS . Finally, remove the app’s directory.", "keywords": ["imports", "makemigrations", "keys", "project", "applications", "migration", "correctness", "django", "tables", "¶", "migrations", "directory", "apps", "requirements", "packages", "steps", "sets", "app", "application", "group", "relationships", "tests", "features", "models", "file", "references", "deploy", "step", "python", "ability"], "type": "documentation"},
{"title": "How to manage error reporting", "url": "https://docs.djangoproject.com/en/5.1/howto/error-reporting/", "content": "How to manage error reporting ¶ When you’re running a public site you should always turn off the DEBUG setting. That will make your server run much faster, and will\nalso prevent malicious users from seeing details of your application that can be\nrevealed by the error pages. However, running with DEBUG set to False means you’ll never see\nerrors generated by your site – everyone will instead see your public error\npages. You need to keep track of errors that occur in deployed sites, so Django\ncan be configured to create reports with details about those errors. Email reports ¶ Server errors ¶ When DEBUG is False , Django will email the users listed in the ADMINS setting whenever your code raises an unhandled exception and\nresults in an internal server error (strictly speaking, for any response with\nan HTTP status code of 500 or greater). This gives the administrators immediate\nnotification of any errors. The ADMINS will get a description of the\nerror, a complete Python traceback, and details about the HTTP request that\ncaused the error. Note In order to send email, Django requires a few settings telling it\nhow to connect to your mail server. At the very least, you’ll need\nto specify EMAIL_HOST and possibly EMAIL_HOST_USER and EMAIL_HOST_PASSWORD ,\nthough other settings may be also required depending on your mail\nserver’s configuration. Consult the Django settings\ndocumentation for a full list of email-related\nsettings. By default, Django will send email from root @ localhost . However, some mail\nproviders reject all email from this address. To use a different sender\naddress, modify the SERVER_EMAIL setting. To activate this behavior, put the email addresses of the recipients in the ADMINS setting. See also Server error emails are sent using the logging framework, so you can\ncustomize this behavior by customizing your logging configuration . 404 errors ¶ Django can also be configured to email errors about broken links (404 “page\nnot found” errors). Django sends emails about 404 errors when: DEBUG is False ; Your MIDDLEWARE setting includes django.middleware.common.BrokenLinkEmailsMiddleware . If those conditions are met, Django will email the users listed in the MANAGERS setting whenever your code raises a 404 and the request has\na referer. It doesn’t bother to email for 404s that don’t have a referer –\nthose are usually people typing in broken URLs or broken web bots. It also\nignores 404s when the referer is equal to the requested URL, since this\nbehavior is from broken web bots too. Note BrokenLinkEmailsMiddleware must appear\nbefore other middleware that intercepts 404 errors, such as LocaleMiddleware or FlatpageFallbackMiddleware .\nPut it toward the top of your MIDDLEWARE setting. You can tell Django to stop reporting particular 404s by tweaking the IGNORABLE_404_URLS setting. It should be a list of compiled\nregular expression objects. For example: import re IGNORABLE_404_URLS = [ re . compile ( r \"\\.(php|cgi)$\" ), re . compile ( r \"^/phpmyadmin/\" ), ] In this example, a 404 to any URL ending with .php or .cgi will not be\nreported. Neither will any URL starting with /phpmyadmin/ . The following example shows how to exclude some conventional URLs that browsers and\ncrawlers often request: import re IGNORABLE_404_URLS = [ re . compile ( r \"^/apple-touch-icon.*\\.png$\" ), re . compile ( r \"^/favicon\\.ico$\" ), re . compile ( r \"^/robots\\.txt$\" ), ] (Note that these are regular expressions, so we put a backslash in front of\nperiods to escape them.) If you’d like to customize the behavior of django.middleware.common.BrokenLinkEmailsMiddleware further (for\nexample to ignore requests coming from web crawlers), you should subclass it\nand override its methods. See also 404 errors are logged using the logging framework. By default, these log\nrecords are ignored, but you can use them for error reporting by writing a\nhandler and configuring logging appropriately. Filtering error reports ¶ Warning Filtering sensitive data is a hard problem, and it’s nearly impossible to\nguarantee that sensitive data won’t leak into an error report. Therefore,\nerror reports should only be available to trusted team members and you\nshould avoid transmitting error reports unencrypted over the internet\n(such as through email). Filtering sensitive information ¶ Error reports are really helpful for debugging errors, so it is generally\nuseful to record as much relevant information about those errors as possible.\nFor example, by default Django records the full traceback for the\nexception raised, each traceback frame ’s local variables, and the HttpRequest ’s attributes . However, sometimes certain types of information may be too sensitive and thus\nmay not be appropriate to be kept track of, for example a user’s password or\ncredit card number. So in addition to filtering out settings that appear to be\nsensitive as described in the DEBUG documentation, Django offers a\nset of function decorators to help you control which information should be\nfiltered out of error reports in a production environment (that is, where DEBUG is set to False ): sensitive_variables() and sensitive_post_parameters() . sensitive_variables ( * variables ) [source] ¶ If a function (either a view or any regular callback) in your code uses\nlocal variables susceptible to contain sensitive information, you may\nprevent the values of those variables from being included in error reports\nusing the sensitive_variables decorator: from django.views.decorators.debug import sensitive_variables @sensitive_variables ( \"user\" , \"pw\" , \"cc\" ) def process_info ( user ): pw = user . pass_word cc = user . credit_card_number name = user . name ... In the above example, the values for the user , pw and cc variables will be hidden and replaced with stars ( ********** )\nin the error reports, whereas the value of the name variable will be\ndisclosed. To systematically hide all local variables of a function from error logs,\ndo not provide any argument to the sensitive_variables decorator: @sensitive_variables () def my_function (): ... When using multiple decorators If the variable you want to hide is also a function argument (e.g.\n‘ user ’ in the following example), and if the decorated function has\nmultiple decorators, then make sure to place @sensitive_variables at the top of the decorator chain. This way it will also hide the\nfunction argument as it gets passed through the other decorators: @sensitive_variables ( \"user\" , \"pw\" , \"cc\" ) @some_decorator @another_decorator def process_info ( user ): ... Changed in Django 5.0: Support for wrapping async functions was added. sensitive_post_parameters ( * parameters ) [source] ¶ If one of your views receives an HttpRequest object\nwith POST parameters susceptible to\ncontain sensitive information, you may prevent the values of those\nparameters from being included in the error reports using the sensitive_post_parameters decorator: from django.views.decorators.debug import sensitive_post_parameters @sensitive_post_parameters ( \"pass_word\" , \"credit_card_number\" ) def record_user_profile ( request ): UserProfile . create ( user = request . user , password = request . POST [ \"pass_word\" ], credit_card = request . POST [ \"credit_card_number\" ], name = request . POST [ \"name\" ], ) ... In the above example, the values for the pass_word and credit_card_number POST parameters will be hidden and replaced with\nstars ( ********** ) in the request’s representation inside the\nerror reports, whereas the value of the name parameter will be\ndisclosed. To systematically hide all POST parameters of a request in error reports,\ndo not provide any argument to the sensitive_post_parameters decorator: @sensitive_post_parameters () def my_view ( request ): ... All POST parameters are systematically filtered out of error reports for\ncertain django.contrib.auth.views views ( login , password_reset_confirm , password_change , and add_view and user_change_password in the auth admin) to prevent the leaking of\nsensitive information such as user passwords. Changed in Django 5.0: Support for wrapping async functions was added. Custom error reports ¶ All sensitive_variables() and sensitive_post_parameters() do is,\nrespectively, annotate the decorated function with the names of sensitive\nvariables and annotate the HttpRequest object with the names of sensitive\nPOST parameters, so that this sensitive information can later be filtered out\nof reports when an error occurs. The actual filtering is done by Django’s\ndefault error reporter filter: django.views.debug.SafeExceptionReporterFilter . This filter uses the\ndecorators’ annotations to replace the corresponding values with stars\n( ********** ) when the error reports are produced. If you wish to\noverride or customize this default behavior for your entire site, you need to\ndefine your own filter class and tell Django to use it via the DEFAULT_EXCEPTION_REPORTER_FILTER setting: DEFAULT_EXCEPTION_REPORTER_FILTER = \"path.to.your.CustomExceptionReporterFilter\" You may also control in a more granular way which filter to use within any\ngiven view by setting the HttpRequest ’s exception_reporter_filter attribute: def my_view ( request ): if request . user . is_authenticated : request . exception_reporter_filter = CustomExceptionReporterFilter () ... Your custom filter class needs to inherit from django.views.debug.SafeExceptionReporterFilter and may override the\nfollowing attributes and methods: class SafeExceptionReporterFilter [source] ¶ cleansed_substitute ¶ The string value to replace sensitive value with. By default it\nreplaces the values of sensitive variables with stars\n( ********** ). hidden_settings ¶ A compiled regular expression object used to match settings and request.META values considered as sensitive. By default equivalent\nto: import re re . compile ( r \"API|TOKEN|KEY|SECRET|PASS|SIGNATURE|HTTP_COOKIE\" , flags = re . IGNORECASE ) is_active ( request ) [source] ¶ Returns True to activate the filtering in get_post_parameters() and get_traceback_frame_variables() .\nBy default the filter is active if DEBUG is False . Note\nthat sensitive request.META values are always filtered along with\nsensitive setting values, as described in the DEBUG documentation. get_post_parameters ( request ) [source] ¶ Returns the filtered dictionary of POST parameters. Sensitive values\nare replaced with cleansed_substitute . get_traceback_frame_variables ( request , tb_frame ) [source] ¶ Returns the filtered dictionary of local variables for the given\ntraceback frame. Sensitive values are replaced with cleansed_substitute . If you need to customize error reports beyond filtering you may specify a\ncustom error reporter class by defining the DEFAULT_EXCEPTION_REPORTER setting: DEFAULT_EXCEPTION_REPORTER = \"path.to.your.CustomExceptionReporter\" The exception reporter is responsible for compiling the exception report data,\nand formatting it as text or HTML appropriately. (The exception reporter uses DEFAULT_EXCEPTION_REPORTER_FILTER when preparing the exception\nreport data.) Your custom reporter class needs to inherit from django.views.debug.ExceptionReporter . class ExceptionReporter [source] ¶ html_template_path [source] ¶ Property that returns a pathlib.Path representing the absolute\nfilesystem path to a template for rendering the HTML representation of\nthe exception. Defaults to the Django provided template. text_template_path [source] ¶ Property that returns a pathlib.Path representing the absolute\nfilesystem path to a template for rendering the plain-text\nrepresentation of the exception. Defaults to the Django provided\ntemplate. get_traceback_data () [source] ¶ Return a dictionary containing traceback information. This is the main extension point for customizing exception reports, for\nexample: from django.views.debug import ExceptionReporter class CustomExceptionReporter ( ExceptionReporter ): def get_traceback_data ( self ): data = super () . get_traceback_data () # ... remove/add something here ... return data get_traceback_html () [source] ¶ Return HTML version of exception report. Used for HTML version of debug 500 HTTP error page. get_traceback_text () [source] ¶ Return plain text version of exception report. Used for plain text version of debug 500 HTTP error page and email\nreports. As with the filter class, you may control which exception reporter class to use\nwithin any given view by setting the HttpRequest ’s exception_reporter_class attribute: def my_view ( request ): if request . user . is_authenticated : request . exception_reporter_class = CustomExceptionReporter () ... See also You can also set up custom error reporting by writing a custom piece of exception middleware . If you do write custom\nerror handling, it’s a good idea to emulate Django’s built-in error handling\nand only report/log errors if DEBUG is False .", "keywords": ["dictionary", "record_user_profile", "addresses", "log", "\\.(php|cgi)$", "variable", "track", "error", "add_view", "template", "customexceptionreporter", "url", "debug", "@sensitive_post_parameters", "support", "localemiddleware", "types", "reporter", "/phpmyadmin/", "setting", "handling", "credit_card", "order", "documentation", "filter", "def", "recipients", "exception_reporter_filter", "settings", "false", "get_traceback_text", "application", "exception", "brokenlinkemailsmiddleware", "card", "user_change_password", "property", "middleware", "records", "password_change", "default_exception_reporter_filter", "django.views.decorators.debug", "^/robots\\.txt$", "behavior", "values", "site", "reports", "email_host_password", "status", "get_traceback_data", "import", "problem", "views", "localhost", "information", "stars", "async", "equivalent", "customexceptionreporterfilter", "my_function", "login", "annotations", "pathlib", "#", "point", "way", "idea", "¶", "default", "^/phpmyadmin/", "^/apple", "referer", "piece", "decorator", "web", "custom", "admins", "methods", "sender", "browsers", "passwords", "server", "ignorable_404_urls", "page", "urls", "default_exception_reporter", "sites", "variables", "callback", "userprofile", "results", "top", "consult", "cc", "example", "users", "n’t", "email", "html_template_path", "value", "compile", "functions", "production", "@sensitive_variables", "get_post_parameters", "self", "reporting", "source", "people", "credit_card_number", "argument", "ignorecase", "class", "number", "sensitive_post_parameters", "request", "@another_decorator", "safeexceptionreporterfilter", "filesystem", "version", "touch", "return", "html", "report", "chain", "attribute", "function", "flatpagefallbackmiddleware", "string", "list", "details", "internet", "bots", "data", "view", "my_view", "name", "object", "root", "environment", "team", "flags", "user", "httprequest", "extension", "warning", "api|token|key|secret|pass|signature|http_cookie", "get_traceback_html", "get_traceback_frame_variables", "attributes", "exception_reporter_class", "tb_frame", "admin", "administrators", "filtering", "returns", "emails", "errors", "python", "crawlers", "backslash", "addition", "process_info", "r", "logs", "response", "handler", "traceback", "password_reset_confirm", "description", "password", "leaking", "configuration", "means", "icon.*\\.png$", "front", "hidden_settings", "exceptionreporter", "notification", "post", "conditions", "names", "path", "django", "providers", "address", "expressions", "mail", "pass_word", "django.middleware.common", "managers", "auth", "parameter", "path.to.your", "representation", "*", "periods", "set", "framework", "text", "^/favicon\\.ico$", "requests", "http", "decorators", "credit", "expression", "404s", "code", ".php", "=", "django.views.debug", "pages", "objects", "links", "frame", "pw", "parameters", "server_email", "re", "members", "cleansed_substitute", "defaults", ".cgi", "django.contrib.auth.views", "sensitive_variables"], "type": "documentation"},
{"title": "How to configure and use logging", "url": "https://docs.djangoproject.com/en/5.1/howto/logging/", "content": "How to configure and use logging ¶ See also Django logging reference Django logging overview Django provides a working default logging configuration that is readily extended. Make a basic logging call ¶ To send a log message from within your code, you place a logging call into it. Don’t be tempted to use logging calls in settings.py . The way that Django logging is configured as part of the setup() function means that logging calls placed in settings.py may not work as\nexpected, because logging will not be set up at that point . To explore\nlogging, use a view function as suggested in the example below. First, import the Python logging library, and then obtain a logger instance\nwith logging.getLogger() . Provide the getLogger() method with a\nname to identify it and the records it emits. A good option is to use __name__ (see Use logger namespacing below for more on this) which will\nprovide the name of the current Python module as a dotted path: import logging logger = logging . getLogger ( __name__ ) It’s a good convention to perform this declaration at module level. And then in a function, for example in a view, send a record to the logger: def some_view ( request ): ... if some_risky_state : logger . warning ( \"Platform is running at risk\" ) When this code is executed, a LogRecord containing that\nmessage will be sent to the logger. If you’re using Django’s default logging\nconfiguration, the message will appear in the console. The WARNING level used in the example above is one of several logging severity levels : DEBUG , INFO , WARNING , ERROR , CRITICAL . So, another example might be: logger . critical ( \"Payment system is not responding\" ) Important Records with a level lower than WARNING will not appear in the console\nby default. Changing this behavior requires additional configuration. Customize logging configuration ¶ Although Django’s logging configuration works out of the box, you can control\nexactly how your logs are sent to various destinations - to log files, external\nservices, email and so on - with some additional configuration. You can configure: logger mappings, to determine which records are sent to which handlers handlers, to determine what they do with the records they receive filters, to provide additional control over the transfer of records, and\neven modify records in-place formatters, to convert LogRecord objects to a string or\nother form for consumption by human beings or another system There are various ways of configuring logging. In Django, the LOGGING setting is most commonly used. The setting uses the dictConfig format , and extends the default logging configuration . See Configuring logging for an explanation of how your custom settings\nare merged with Django’s defaults. See the Python logging documentation for\ndetails of other ways of configuring logging. For the sake of simplicity, this\ndocumentation will only consider configuration via the LOGGING setting. Basic logging configuration ¶ When configuring logging, it makes sense to Create a LOGGING dictionary ¶ In your settings.py : LOGGING = { \"version\" : 1 , # the dictConfig format version \"disable_existing_loggers\" : False , # retain the default loggers } It nearly always makes sense to retain and extend the default logging\nconfiguration by setting disable_existing_loggers to False . Configure a handler ¶ This example configures a single handler named file , that uses Python’s FileHandler to save logs of level DEBUG and higher to the\nfile general.log (at the project root): LOGGING = { # ... \"handlers\" : { \"file\" : { \"class\" : \"logging.FileHandler\" , \"filename\" : \"general.log\" , }, }, } Different handler classes take different configuration options. For more\ninformation on available handler classes, see the AdminEmailHandler provided by Django and the various handler classes provided by Python. Logging levels can also be set on the handlers (by default, they accept log\nmessages of all levels). Using the example above, adding: { \"class\" : \"logging.FileHandler\" , \"filename\" : \"general.log\" , \"level\" : \"DEBUG\" , } would define a handler configuration that only accepts records of level DEBUG and higher. Configure a logger mapping ¶ To send records to this handler, configure a logger mapping to use it for\nexample: LOGGING = { # ... \"loggers\" : { \"\" : { \"level\" : \"DEBUG\" , \"handlers\" : [ \"file\" ], }, }, } The mapping’s name determines which log records it will process. This\nconfiguration ( '' ) is unnamed . That means that it will process records\nfrom all loggers (see Use logger namespacing below on how to use the mapping\nname to determine the loggers for which it will process records). It will forward messages of levels DEBUG and higher to the handler named file . Note that a logger can forward messages to multiple handlers, so the relation\nbetween loggers and handlers is many-to-many. If you execute: logger . debug ( \"Attempting to connect to API\" ) in your code, you will find that message in the file general.log in the\nroot of the project. Configure a formatter ¶ By default, the final log output contains the message part of each log record . Use a formatter if you want to include additional\ndata. First name and define your formatters - this example defines\nformatters named verbose and simple : LOGGING = { # ... \"formatters\" : { \"verbose\" : { \"format\" : \" {name} {levelname} {asctime} {module} {process:d} {thread:d} {message} \" , \"style\" : \"{\" , }, \"simple\" : { \"format\" : \" {levelname} {message} \" , \"style\" : \"{\" , }, }, } The style keyword allows you to specify { for str.format() or $ for string.Template formatting; the default is $ . See LogRecord attributes for the LogRecord attributes\nyou can include. To apply a formatter to a handler, add a formatter entry to the handler’s\ndictionary referring to the formatter by name, for example: \"handlers\" : { \"file\" : { \"class\" : \"logging.FileHandler\" , \"filename\" : \"general.log\" , \"formatter\" : \"verbose\" , }, } Use logger namespacing ¶ The unnamed logging configuration '' captures logs from any Python\napplication. A named logging configuration will capture logs only from loggers\nwith matching names. The namespace of a logger instance is defined using getLogger() . For example in views.py of my_app : logger = logging . getLogger ( __name__ ) will create a logger in the my_app.views namespace. __name__ allows you\nto organize log messages according to their provenance within your project’s\napplications automatically. It also ensures that you will not experience name\ncollisions. A logger mapping named my_app.views will capture records from this logger: LOGGING = { # ... \"loggers\" : { \"my_app.views\" : { ... }, }, } A logger mapping named my_app will be more permissive, capturing records\nfrom loggers anywhere within the my_app namespace (including my_app.views , my_app.utils , and so on): LOGGING = { # ... \"loggers\" : { \"my_app\" : { ... }, }, } You can also define logger namespacing explicitly: logger = logging . getLogger ( \"project.payment\" ) and set up logger mappings accordingly. Using logger hierarchies and propagation ¶ Logger naming is hierarchical . my_app is the parent of my_app.views ,\nwhich is the parent of my_app.views.private . Unless specified otherwise,\nlogger mappings will propagate the records they process to their parents - a\nrecord from a logger in the my_app.views.private namespace will be handled\nby a mapping for both my_app and my_app.views . To manage this behavior, set the propagation key on the mappings you define: LOGGING = { # ... \"loggers\" : { \"my_app\" : { # ... }, \"my_app.views\" : { # ... }, \"my_app.views.private\" : { # ... \"propagate\" : False , }, }, } propagate defaults to True . In this example, the logs from my_app.views.private will not be handled by the parent, but logs from my_app.views will. Configure responsive logging ¶ Logging is most useful when it contains as much information as possible, but\nnot information that you don’t need - and how much you need depends upon what\nyou’re doing. When you’re debugging, you need a level of information that would\nbe excessive and unhelpful if you had to deal with it in production. You can configure logging to provide you with the level of detail you need,\nwhen you need it. Rather than manually change configuration to achieve this, a\nbetter way is to apply configuration automatically according to the\nenvironment. For example, you could set an environment variable DJANGO_LOG_LEVEL appropriately in your development and staging environments, and make use of it\nin a logger mapping thus: \"level\" : os . getenv ( \"DJANGO_LOG_LEVEL\" , \"WARNING\" ) - so that unless the environment specifies a lower log level, this\nconfiguration will only forward records of severity WARNING and above to\nits handler. Other options in the configuration (such as the level or formatter option of handlers) can be similarly managed.", "keywords": ["dictionary", "explanation", "log", "filehandler", "error", "template", "logger", "debug", "control", "project.payment", "setting", "logging.getlogger", "documentation", "def", "development", "place", "style", "critical", "settings", "sense", "declaration", "false", "application", "overview", "classes", "records", "method", "info", "payment", "important", "behavior", "system", "my_app", "risk", "files", "getenv", "use", "import", "messages", "collisions", "record", "ways", "provenance", "information", "project", "#", "point", "consumption", "output", "way", "¶", "default", "filters", "option", "formatter", "services", "custom", "naming", "mappings", "some_risky_state", "keyword", "parents", "format", "disable_existing_loggers", "process", "beings", "formatters", "example", "general.log", "calls", "n’t", "formatting", "email", "getlogger", "convention", "production", "hierarchies", "handlers", "class", "logrecord", "applications", "request", "version", "destinations", "platform", "mapping", "environments", "function", "string", "details", "filename", "data", "simplicity", "setup", "view", "matching", "form", "name", "options", "root", "environment", "sake", "warning", "part", "file", "library", "propagation", "python", "parent", "logs", "logging", "verbose", "str.format", "loggers", "handler", "customize", "configuration", "my_app.utils", "api", "box", "transfer", "staging", "path", "level", "severity", "django", "names", "my_app.views", "message", "levelname", "thread", "namespace", "django_log_level", "true", "module", "relation", "adminemailhandler", "reference", "instance", "code", "=", "console", "detail", "namespacing", "key", "levels", "defaults", "my_app.views.private", "entry", "call", "configuring", "will"], "type": "documentation"},
{"title": "How to manage static files (e.g. images, JavaScript, CSS)", "url": "https://docs.djangoproject.com/en/5.1/howto/static-files/", "content": "How to manage static files (e.g. images, JavaScript, CSS) ¶ Websites generally need to serve additional files such as images, JavaScript,\nor CSS. In Django, we refer to these files as “static files”.  Django provides django.contrib.staticfiles to help you manage them. This page describes how you can serve these static files. Configuring static files ¶ Make sure that django.contrib.staticfiles is included in your INSTALLED_APPS . In your settings file, define STATIC_URL , for example: STATIC_URL = \"static/\" In your templates, use the static template tag to build the URL for\nthe given relative path using the configured staticfiles STORAGES alias. {% load static %} < img src = \" {% static 'my_app/example.jpg' %} \" alt = \"My image\" > Store your static files in a folder called static in your app. For\nexample my_app/static/my_app/example.jpg . Serving the files In addition to these configuration steps, you’ll also need to actually\nserve the static files. During development, if you use django.contrib.staticfiles , this will\nbe done automatically by runserver when DEBUG is set\nto True (see django.contrib.staticfiles.views.serve() ). This method is grossly inefficient and probably insecure ,\nso it is unsuitable for production . See How to deploy static files for proper strategies to serve\nstatic files in production environments. Your project will probably also have static assets that aren’t tied to a\nparticular app. In addition to using a static/ directory inside your apps,\nyou can define a list of directories ( STATICFILES_DIRS ) in your\nsettings file where Django will also look for static files. For example: STATICFILES_DIRS = [ BASE_DIR / \"static\" , \"/var/www/static/\" , ] See the documentation for the STATICFILES_FINDERS setting for\ndetails on how staticfiles finds your files. Static file namespacing Now we might be able to get away with putting our static files directly\nin my_app/static/ (rather than creating another my_app subdirectory), but it would actually be a bad idea. Django will use the\nfirst static file it finds whose name matches, and if you had a static file\nwith the same name in a different application, Django would be unable to\ndistinguish between them. We need to be able to point Django at the right\none, and the best way to ensure this is by namespacing them. That is,\nby putting those static files inside another directory named for the\napplication itself. You can namespace static assets in STATICFILES_DIRS by\nspecifying prefixes . Serving static files during development ¶ If you use django.contrib.staticfiles as explained above, runserver will do this automatically when DEBUG is set\nto True . If you don’t have django.contrib.staticfiles in INSTALLED_APPS , you can still manually serve static files using the django.views.static.serve() view. This is not suitable for production use! For some common deployment\nstrategies, see How to deploy static files . For example, if your STATIC_URL is defined as static/ , you can\ndo this by adding the following snippet to your urls.py : from django.conf import settings from django.conf.urls.static import static urlpatterns = [ # ... the rest of your URLconf goes here ... ] + static ( settings . STATIC_URL , document_root = settings . STATIC_ROOT ) Note This helper function works only in debug mode and only if\nthe given prefix is local (e.g. static/ ) and not a URL (e.g. http://static.example.com/ ). Also this helper function only serves the actual STATIC_ROOT folder; it doesn’t perform static files discovery like django.contrib.staticfiles . Finally, static files are served via a wrapper at the WSGI application\nlayer. As a consequence, static files requests do not pass through the\nnormal middleware chain . Serving files uploaded by a user during development ¶ During development, you can serve user-uploaded media files from MEDIA_ROOT using the django.views.static.serve() view. This is not suitable for production use! For some common deployment\nstrategies, see How to deploy static files . For example, if your MEDIA_URL is defined as media/ , you can do\nthis by adding the following snippet to your ROOT_URLCONF : from django.conf import settings from django.conf.urls.static import static urlpatterns = [ # ... the rest of your URLconf goes here ... ] + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) Note This helper function works only in debug mode and only if\nthe given prefix is local (e.g. media/ ) and not a URL (e.g. http://media.example.com/ ). Testing ¶ When running tests that use actual HTTP requests instead of the built-in\ntesting client (i.e. when using the built-in LiveServerTestCase ) the static assets need to be served along\nthe rest of the content so the test environment reproduces the real one as\nfaithfully as possible, but LiveServerTestCase has only very basic static\nfile-serving functionality: It doesn’t know about the finders feature of the staticfiles application and assumes the static content has already been\ncollected under STATIC_ROOT . Because of this, staticfiles ships its own django.contrib.staticfiles.testing.StaticLiveServerTestCase , a subclass\nof the built-in one that has the ability to transparently serve all the assets\nduring execution of these tests in a way very similar to what we get at\ndevelopment time with DEBUG = True , i.e. without having to collect them\nusing collectstatic first. Deployment ¶ django.contrib.staticfiles provides a convenience management command\nfor gathering static files in a single directory so you can serve them easily. Set the STATIC_ROOT setting to the directory from which you’d\nlike to serve these files, for example: STATIC_ROOT = \"/var/www/example.com/static/\" Run the collectstatic management command: $ python manage.py collectstatic This will copy all files from your static folders into the STATIC_ROOT directory. Use a web server of your choice to serve the\nfiles. How to deploy static files covers some common deployment\nstrategies for static files. Learn more ¶ This document has covered the basics and some common usage patterns. For\ncomplete details on all the settings, commands, template tags, and other pieces\nincluded in django.contrib.staticfiles , see the staticfiles\nreference .", "keywords": ["matches", "urlconf", "assets", "wrapper", "template", "url", "debug", "image", "staticfiles", "%", "static", "templates", "documentation", "development", "settings", "time", "application", "management", "prefix", "ships", "middleware", "method", "tests", "convenience", "testing", "directories", "commands", "django.contrib.staticfiles.views.serve", "rest", "my_app", "mode", "pieces", "files", "css", "use", "strategies", "import", "urlpatterns", "project", "collectstatic", "media", "staticliveservertestcase", "#", "folders", "test", "idea", "way", "¶", "static_url", "urls.py", "src", "media_url", "web", "static_root", "img", "client", "usage", "django.contrib.staticfiles.testing", "server", "page", "http://media.example.com/", "choice", "snippet", "finders", "consequence", "command", "example", "javascript", "runserver", "installed_apps", "basics", "production", "content", "deployment", "discovery", "prefixes", "django.contrib.staticfiles", "images", "subdirectory", "chain", "environments", "function", "list", "details", "liveservertestcase", "steps", "app", "www", "view", "name", "environment", "user", "file", "one", "storages", "patterns", "python", "addition", "django.views.static.serve", "execution", "configuration", "subclass", "folder", "staticfiles_finders", "path", "django", "tag", "directory", "true", "document", "tags", "apps", "functionality", "requests", "http://static.example.com/", "http", "/var", "websites", "reference", "layer", "=", "namespacing", "wsgi", "alias", "root_urlconf", "helper", "ability"], "type": "documentation"},
{"title": "How to create custom template tags and filters", "url": "https://docs.djangoproject.com/en/5.1/howto/custom-template-tags/", "content": "How to create custom template tags and filters ¶ Django’s template language comes with a wide variety of built-in\ntags and filters designed to address the\npresentation logic needs of your application. Nevertheless, you may\nfind yourself needing functionality that is not covered by the core\nset of template primitives. You can extend the template engine by\ndefining custom tags and filters using Python, and then make them\navailable to your templates using the {% load %} tag. Code layout ¶ The most common place to specify custom template tags and filters is inside\na Django app. If they relate to an existing app, it makes sense to bundle them\nthere; otherwise, they can be added to a new app. When a Django app is added\nto INSTALLED_APPS , any tags it defines in the conventional location\ndescribed below are automatically made available to load within templates. The app should contain a templatetags directory, at the same level as models.py , views.py , etc. If this doesn’t already exist, create it -\ndon’t forget the __init__.py file to ensure the directory is treated as a\nPython package. Development server won’t automatically restart After adding the templatetags module, you will need to restart your\nserver before you can use the tags or filters in templates. Your custom tags and filters will live in a module inside the templatetags directory. The name of the module file is the name you’ll use to load the tags\nlater, so be careful to pick a name that won’t clash with custom tags and\nfilters in another app. For example, if your custom tags/filters are in a file called poll_extras.py , your app layout might look like this: polls/\n    __init__.py\n    models.py\n    templatetags/\n        __init__.py\n        poll_extras.py\n    views.py And in your template you would use the following: {% load poll_extras %} The app that contains the custom tags must be in INSTALLED_APPS in\norder for the {% load %} tag to work. This is a security feature:\nIt allows you to host Python code for many template libraries on a single host\nmachine without enabling access to all of them for every Django installation. There’s no limit on how many modules you put in the templatetags package.\nJust keep in mind that a {% load %} statement will load\ntags/filters for the given Python module name, not the name of the app. To be a valid tag library, the module must contain a module-level variable\nnamed register that is a template.Library instance, in which all the\ntags and filters are registered. So, near the top of your module, put the\nfollowing: from django import template register = template . Library () Alternatively, template tag modules can be registered through the 'libraries' argument to DjangoTemplates . This is useful if\nyou want to use a different label from the template tag module name when\nloading template tags. It also enables you to register tags without installing\nan application. Behind the scenes For a ton of examples, read the source code for Django’s default filters\nand tags. They’re in django/template/defaultfilters.py and django/template/defaulttags.py , respectively. For more information on the load tag, read its documentation. Writing custom template filters ¶ Custom filters are Python functions that take one or two arguments: The value of the variable (input) – not necessarily a string. The value of the argument – this can have a default value, or be left\nout altogether. For example, in the filter {{ var|foo:\"bar\" }} , the filter foo would be\npassed the variable var and the argument \"bar\" . Since the template language doesn’t provide exception handling, any exception\nraised from a template filter will be exposed as a server error. Thus, filter\nfunctions should avoid raising exceptions if there is a reasonable fallback\nvalue to return. In case of input that represents a clear bug in a template,\nraising an exception may still be better than silent failure which hides the\nbug. Here’s an example filter definition: def cut ( value , arg ): \"\"\"Removes all values of arg from the given string\"\"\" return value . replace ( arg , \"\" ) And here’s an example of how that filter would be used: {{ somevariable | cut :\"0\" }} Most filters don’t take arguments. In this case, leave the argument out of your\nfunction: def lower ( value ): # Only one argument. \"\"\"Converts a string into all lowercase\"\"\" return value . lower () Registering custom filters ¶ django.template.Library. filter () ¶ Once you’ve written your filter definition, you need to register it with\nyour Library instance, to make it available to Django’s template language: register . filter ( \"cut\" , cut ) register . filter ( \"lower\" , lower ) The Library.filter() method takes two arguments: The name of the filter – a string. The compilation function – a Python function (not the name of the\nfunction as a string). You can use register.filter() as a decorator instead: @register . filter ( name = \"cut\" ) def cut ( value , arg ): return value . replace ( arg , \"\" ) @register . filter def lower ( value ): return value . lower () If you leave off the name argument, as in the second example above, Django\nwill use the function’s name as the filter name. Finally, register.filter() also accepts three keyword arguments, is_safe , needs_autoescape , and expects_localtime . These arguments\nare described in filters and auto-escaping and filters and time zones below. Template filters that expect strings ¶ django.template.defaultfilters. stringfilter () ¶ If you’re writing a template filter that only expects a string as the first\nargument, you should use the decorator stringfilter . This will\nconvert an object to its string value before being passed to your function: from django import template from django.template.defaultfilters import stringfilter register = template . Library () @register . filter @stringfilter def lower ( value ): return value . lower () This way, you’ll be able to pass, say, an integer to this filter, and it\nwon’t cause an AttributeError (because integers don’t have lower() methods). Filters and auto-escaping ¶ When writing a custom filter, give some thought to how the filter will interact\nwith Django’s auto-escaping behavior. Note that two types of strings can be\npassed around inside the template code: Raw strings are the native Python strings. On output, they’re escaped if\nauto-escaping is in effect and presented unchanged, otherwise. Safe strings are strings that have been marked safe from further\nescaping at output time. Any necessary escaping has already been done.\nThey’re commonly used for output that contains raw HTML that is intended\nto be interpreted as-is on the client side. Internally, these strings are of type SafeString . You can test for them\nusing code like: from django.utils.safestring import SafeString if isinstance ( value , SafeString ): # Do something with the \"safe\" string. ... Template filter code falls into one of two situations: Your filter does not introduce any HTML-unsafe characters ( < , > , ' , \" or & ) into the result that were not already present. In\nthis case, you can let Django take care of all the auto-escaping\nhandling for you. All you need to do is set the is_safe flag to True when you register your filter function, like so: @register . filter ( is_safe = True ) def myfilter ( value ): return value This flag tells Django that if a “safe” string is passed into your\nfilter, the result will still be “safe” and if a non-safe string is\npassed in, Django will automatically escape it, if necessary. You can think of this as meaning “this filter is safe – it doesn’t\nintroduce any possibility of unsafe HTML.” The reason is_safe is necessary is because there are plenty of\nnormal string operations that will turn a SafeData object back into\na normal str object and, rather than try to catch them all, which would\nbe very difficult, Django repairs the damage after the filter has completed. For example, suppose you have a filter that adds the string xx to\nthe end of any input. Since this introduces no dangerous HTML characters\nto the result (aside from any that were already present), you should\nmark your filter with is_safe : @register . filter ( is_safe = True ) def add_xx ( value ): return \" %s xx\" % value When this filter is used in a template where auto-escaping is enabled,\nDjango will escape the output whenever the input is not already marked\nas “safe”. By default, is_safe is False , and you can omit it from any filters\nwhere it isn’t required. Be careful when deciding if your filter really does leave safe strings\nas safe. If you’re removing characters, you might inadvertently leave\nunbalanced HTML tags or entities in the result. For example, removing a > from the input might turn <a> into <a , which would need to\nbe escaped on output to avoid causing problems. Similarly, removing a\nsemicolon ( ; ) can turn &amp; into &amp , which is no longer a\nvalid entity and thus needs further escaping. Most cases won’t be nearly\nthis tricky, but keep an eye out for any problems like that when\nreviewing your code. Marking a filter is_safe will coerce the filter’s return value to\na string.  If your filter should return a boolean or other non-string\nvalue, marking it is_safe will probably have unintended\nconsequences (such as converting a boolean False to the string\n‘False’). Alternatively, your filter code can manually take care of any necessary\nescaping. This is necessary when you’re introducing new HTML markup into\nthe result. You want to mark the output as safe from further\nescaping so that your HTML markup isn’t escaped further, so you’ll need\nto handle the input yourself. To mark the output as a safe string, use django.utils.safestring.mark_safe() . Be careful, though. You need to do more than just mark the output as\nsafe. You need to ensure it really is safe, and what you do depends on\nwhether auto-escaping is in effect. The idea is to write filters that\ncan operate in templates where auto-escaping is either on or off in\norder to make things easier for your template authors. In order for your filter to know the current auto-escaping state, set the needs_autoescape flag to True when you register your filter function.\n(If you don’t specify this flag, it defaults to False ). This flag tells\nDjango that your filter function wants to be passed an extra keyword\nargument, called autoescape , that is True if auto-escaping is in\neffect and False otherwise. It is recommended to set the default of the autoescape parameter to True , so that if you call the function\nfrom Python code it will have escaping enabled by default. For example, let’s write a filter that emphasizes the first character of\na string: from django import template from django.utils.html import conditional_escape from django.utils.safestring import mark_safe register = template . Library () @register . filter ( needs_autoescape = True ) def initial_letter_filter ( text , autoescape = True ): first , other = text [ 0 ], text [ 1 :] if autoescape : esc = conditional_escape else : esc = lambda x : x result = \"<strong> %s </strong> %s \" % ( esc ( first ), esc ( other )) return mark_safe ( result ) The needs_autoescape flag and the autoescape keyword argument mean\nthat our function will know whether automatic escaping is in effect when the\nfilter is called. We use autoescape to decide whether the input data\nneeds to be passed through django.utils.html.conditional_escape or not.\n(In the latter case, we use the identity function as the “escape” function.)\nThe conditional_escape() function is like escape() except it only\nescapes input that is not a SafeData instance. If a SafeData instance is passed to conditional_escape() , the data is returned\nunchanged. Finally, in the above example, we remember to mark the result as safe\nso that our HTML is inserted directly into the template without further\nescaping. There’s no need to worry about the is_safe flag in this case\n(although including it wouldn’t hurt anything). Whenever you manually\nhandle the auto-escaping issues and return a safe string, the is_safe flag won’t change anything either way. Warning Avoiding XSS vulnerabilities when reusing built-in filters Django’s built-in filters have autoescape=True by default in order to\nget the proper autoescaping behavior and avoid a cross-site script\nvulnerability. In older versions of Django, be careful when reusing Django’s built-in\nfilters as autoescape defaults to None . You’ll need to pass autoescape=True to get autoescaping. For example, if you wanted to write a custom filter called urlize_and_linebreaks that combined the urlize and linebreaksbr filters, the filter would look like: from django.template.defaultfilters import linebreaksbr , urlize @register . filter ( needs_autoescape = True ) def urlize_and_linebreaks ( text , autoescape = True ): return linebreaksbr ( urlize ( text , autoescape = autoescape ), autoescape = autoescape ) Then: {{ comment | urlize_and_linebreaks }} would be equivalent to: {{ comment | urlize | linebreaksbr }} Filters and time zones ¶ If you write a custom filter that operates on datetime objects, you’ll usually register it with the expects_localtime flag set to True : @register . filter ( expects_localtime = True ) def businesshours ( value ): try : return 9 <= value . hour < 17 except AttributeError : return \"\" When this flag is set, if the first argument to your filter is a time zone\naware datetime, Django will convert it to the current time zone before passing\nit to your filter when appropriate, according to rules for time zones\nconversions in templates . Writing custom template tags ¶ Tags are more complex than filters, because tags can do anything. Django\nprovides a number of shortcuts that make writing most types of tags easier.\nFirst we’ll explore those shortcuts, then explain how to write a tag from\nscratch for those cases when the shortcuts aren’t powerful enough. Simple tags ¶ django.template.Library. simple_tag () ¶ Many template tags take a number of arguments – strings or template variables\n– and return a result after doing some processing based solely on\nthe input arguments and some external information. For example, a current_time tag might accept a format string and return the time as a\nstring formatted accordingly. To ease the creation of these types of tags, Django provides a helper function, simple_tag . This function, which is a method of django.template.Library , takes a function that accepts any number of\narguments, wraps it in a render function and the other necessary bits\nmentioned above and registers it with the template system. Our current_time function could thus be written like this: import datetime from django import template register = template . Library () @register . simple_tag def current_time ( format_string ): return datetime . datetime . now () . strftime ( format_string ) A few things to note about the simple_tag helper function: Checking for the required number of arguments, etc., has already been\ndone by the time our function is called, so we don’t need to do that. The quotes around the argument (if any) have already been stripped away,\nso we receive a plain string. If the argument was a template variable, our function is passed the\ncurrent value of the variable, not the variable itself. Unlike other tag utilities, simple_tag passes its output through conditional_escape() if the template context is in\nautoescape mode, to ensure correct HTML and protect you from XSS\nvulnerabilities. If additional escaping is not desired, you will need to use mark_safe() if you are absolutely sure that your\ncode does not contain XSS vulnerabilities. For building small HTML snippets,\nuse of format_html() instead of mark_safe() is\nstrongly recommended. If your template tag needs to access the current context, you can use the takes_context argument when registering your tag: @register . simple_tag ( takes_context = True ) def current_time ( context , format_string ): timezone = context [ \"timezone\" ] return your_get_current_time_method ( timezone , format_string ) Note that the first argument must be called context . For more information on how the takes_context option works, see the section\non inclusion tags . If you need to rename your tag, you can provide a custom name for it: register . simple_tag ( lambda x : x - 1 , name = \"minusone\" ) @register . simple_tag ( name = \"minustwo\" ) def some_function ( value ): return value - 2 simple_tag functions may accept any number of positional or keyword\narguments. For example: @register . simple_tag def my_tag ( a , b , * args , ** kwargs ): warning = kwargs [ \"warning\" ] profile = kwargs [ \"profile\" ] ... return ... Then in the template any number of arguments, separated by spaces, may be\npassed to the template tag. Like in Python, the values for keyword arguments\nare set using the equal sign (” = ”) and must be provided after the\npositional arguments. For example: {% my_tag 123 \"abcd\" book.title warning = message | lower profile = user.profile %} It’s possible to store the tag results in a template variable rather than\ndirectly outputting it. This is done by using the as argument followed by\nthe variable name. Doing so enables you to output the content yourself where\nyou see fit: {% current_time \"%Y-%m-%d %I:%M %p\" as the_time %} < p > The time is {{ the_time }} . </ p > Inclusion tags ¶ django.template.Library. inclusion_tag () ¶ Another common type of template tag is the type that displays some data by\nrendering another template. For example, Django’s admin interface uses custom\ntemplate tags to display the buttons along the bottom of the “add/change” form\npages. Those buttons always look the same, but the link targets change\ndepending on the object being edited – so they’re a perfect case for using a\nsmall template that is filled with details from the current object. (In the\nadmin’s case, this is the submit_row tag.) These sorts of tags are called “inclusion tags”. Writing inclusion tags is probably best demonstrated by example. Let’s write a\ntag that outputs a list of choices for a given Poll object, such as was\ncreated in the tutorials . We’ll use the tag like this: {% show_results poll %} …and the output will be something like this: < ul > < li > First choice </ li > < li > Second choice </ li > < li > Third choice </ li > </ ul > First, define the function that takes the argument and produces a dictionary of\ndata for the result. The important point here is we only need to return a\ndictionary, not anything more complex. This will be used as a template context\nfor the template fragment. Example: def show_results ( poll ): choices = poll . choice_set . all () return { \"choices\" : choices } Next, create the template used to render the tag’s output. This template is a\nfixed feature of the tag: the tag writer specifies it, not the template\ndesigner. Following our example, the template is very short: < ul > {% for choice in choices %} < li > {{ choice }} </ li > {% endfor %} </ ul > Now, create and register the inclusion tag by calling the inclusion_tag() method on a Library object. Following our example, if the above template is\nin a file called results.html in a directory that’s searched by the\ntemplate loader, we’d register the tag like this: # Here, register is a django.template.Library instance, as before @register . inclusion_tag ( \"results.html\" ) def show_results ( poll ): ... Alternatively it is possible to register the inclusion tag using a django.template.Template instance: from django.template.loader import get_template t = get_template ( \"results.html\" ) register . inclusion_tag ( t )( show_results ) …when first creating the function. Sometimes, your inclusion tags might require a large number of arguments,\nmaking it a pain for template authors to pass in all the arguments and remember\ntheir order. To solve this, Django provides a takes_context option for\ninclusion tags. If you specify takes_context in creating a template tag,\nthe tag will have no required arguments, and the underlying Python function\nwill have one argument – the template context as of when the tag was called. For example, say you’re writing an inclusion tag that will always be used in a\ncontext that contains home_link and home_title variables that point\nback to the main page. Here’s what the Python function would look like: @register . inclusion_tag ( \"link.html\" , takes_context = True ) def jump_link ( context ): return { \"link\" : context [ \"home_link\" ], \"title\" : context [ \"home_title\" ], } Note that the first parameter to the function must be called context . In that register.inclusion_tag() line, we specified takes_context=True and the name of the template. Here’s what the template link.html might look\nlike: Jump directly to < a href = \" {{ link }} \" > {{ title }} </ a > . Then, any time you want to use that custom tag, load its library and call it\nwithout any arguments, like so: {% jump_link %} Note that when you’re using takes_context=True , there’s no need to pass\narguments to the template tag. It automatically gets access to the context. The takes_context parameter defaults to False . When it’s set to True , the tag is passed the context object, as in this example. That’s the\nonly difference between this case and the previous inclusion_tag example. inclusion_tag functions may accept any number of positional or keyword\narguments. For example: @register . inclusion_tag ( \"my_template.html\" ) def my_tag ( a , b , * args , ** kwargs ): warning = kwargs [ \"warning\" ] profile = kwargs [ \"profile\" ] ... return ... Then in the template any number of arguments, separated by spaces, may be\npassed to the template tag. Like in Python, the values for keyword arguments\nare set using the equal sign (” = ”) and must be provided after the\npositional arguments. For example: {% my_tag 123 \"abcd\" book.title warning = message | lower profile = user.profile %} Advanced custom template tags ¶ Sometimes the basic features for custom template tag creation aren’t enough.\nDon’t worry, Django gives you complete access to the internals required to build\na template tag from the ground up. A quick overview ¶ The template system works in a two-step process: compiling and rendering. To\ndefine a custom template tag, you specify how the compilation works and how\nthe rendering works. When Django compiles a template, it splits the raw template text into\n‘’nodes’’. Each node is an instance of django.template.Node and has\na render() method. A compiled template is a list of Node objects. When\nyou call render() on a compiled template object, the template calls render() on each Node in its node list, with the given context.  The\nresults are all concatenated together to form the output of the template. Thus, to define a custom template tag, you specify how the raw template tag is\nconverted into a Node (the compilation function), and what the node’s render() method does. Writing the compilation function ¶ For each template tag the template parser encounters, it calls a Python\nfunction with the tag contents and the parser object itself. This function is\nresponsible for returning a Node instance based on the contents of the tag. For example, let’s write a full implementation of our template tag, {% current_time %} , that displays the current date/time, formatted according\nto a parameter given in the tag, in strftime() syntax. It’s a good\nidea to decide the tag syntax before anything else. In our case, let’s say the\ntag should be used like this: < p > The time is {% current_time \"%Y-%m-%d %I:%M %p\" %} . </ p > The parser for this function should grab the parameter and create a Node object: from django import template def do_current_time ( parser , token ): try : # split_contents() knows not to split quoted strings. tag_name , format_string = token . split_contents () except ValueError : raise template . TemplateSyntaxError ( \" %r tag requires a single argument\" % token . contents . split ()[ 0 ] ) if not ( format_string [ 0 ] == format_string [ - 1 ] and format_string [ 0 ] in ( '\"' , \"'\" )): raise template . TemplateSyntaxError ( \" %r tag's argument should be in quotes\" % tag_name ) return CurrentTimeNode ( format_string [ 1 : - 1 ]) Notes: parser is the template parser object. We don’t need it in this\nexample. token.contents is a string of the raw contents of the tag. In our\nexample, it’s 'current_time \"%Y-%m-%d %I:%M %p\"' . The token.split_contents() method separates the arguments on spaces\nwhile keeping quoted strings together. The more straightforward token.contents.split() wouldn’t be as robust, as it would naively\nsplit on all spaces, including those within quoted strings. It’s a good\nidea to always use token.split_contents() . This function is responsible for raising django.template.TemplateSyntaxError , with helpful messages, for\nany syntax error. The TemplateSyntaxError exceptions use the tag_name variable.\nDon’t hard-code the tag’s name in your error messages, because that\ncouples the tag’s name to your function. token.contents.split()[0] will ‘’always’’ be the name of your tag – even when the tag has no\narguments. The function returns a CurrentTimeNode with everything the node needs\nto know about this tag. In this case, it passes the argument – \"%Y-%m-%d %I:%M %p\" . The leading and trailing quotes from the\ntemplate tag are removed in format_string[1:-1] . The parsing is very low-level. The Django developers have experimented\nwith writing small frameworks on top of this parsing system, using\ntechniques such as EBNF grammars, but those experiments made the template\nengine too slow. It’s low-level because that’s fastest. Writing the renderer ¶ The second step in writing custom tags is to define a Node subclass that\nhas a render() method. Continuing the above example, we need to define CurrentTimeNode : import datetime from django import template class CurrentTimeNode ( template . Node ): def __init__ ( self , format_string ): self . format_string = format_string def render ( self , context ): return datetime . datetime . now () . strftime ( self . format_string ) Notes: __init__() gets the format_string from do_current_time() .\nAlways pass any options/parameters/arguments to a Node via its __init__() . The render() method is where the work actually happens. render() should generally fail silently, particularly in a production\nenvironment. In some cases however, particularly if context.template.engine.debug is True , this method may raise an\nexception to make debugging easier. For example, several core tags raise django.template.TemplateSyntaxError if they receive the wrong number or\ntype of arguments. Ultimately, this decoupling of compilation and rendering results in an\nefficient template system, because a template can render multiple contexts\nwithout having to be parsed multiple times. Auto-escaping considerations ¶ The output from template tags is not automatically run through the\nauto-escaping filters (with the exception of simple_tag() as described above). However, there\nare still a couple of things you should keep in mind when writing a template\ntag. If the render() method of your template tag stores the result in a context\nvariable (rather than returning the result in a string), it should take care\nto call mark_safe() if appropriate. When the variable is ultimately\nrendered, it will be affected by the auto-escape setting in effect at the\ntime, so content that should be safe from further escaping needs to be marked\nas such. Also, if your template tag creates a new context for performing some\nsub-rendering, set the auto-escape attribute to the current context’s value.\nThe __init__ method for the Context class takes a parameter called autoescape that you can use for this purpose. For example: from django.template import Context def render ( self , context ): # ... new_context = Context ({ \"var\" : obj }, autoescape = context . autoescape ) # ... Do something with new_context ... This is not a very common situation, but it’s useful if you’re rendering a\ntemplate yourself. For example: def render ( self , context ): t = context . template . engine . get_template ( \"small_fragment.html\" ) return t . render ( Context ({ \"var\" : obj }, autoescape = context . autoescape )) If we had neglected to pass in the current context.autoescape value to our\nnew Context in this example, the results would have always been\nautomatically escaped, which may not be the desired behavior if the template\ntag is used inside a {% autoescape off %} block. Thread-safety considerations ¶ Once a node is parsed, its render method may be called any number of times.\nSince Django is sometimes run in multi-threaded environments, a single node may\nbe simultaneously rendering with different contexts in response to two separate\nrequests. Therefore, it’s important to make sure your template tags are thread\nsafe. To make sure your template tags are thread safe, you should never store state\ninformation on the node itself. For example, Django provides a builtin cycle template tag that cycles among a list of given strings each time\nit’s rendered: {% for o in some_list %} < tr class = \" {% cycle 'row1' 'row2' %} \" > ... </ tr > {% endfor %} A naive implementation of CycleNode might look something like this: import itertools from django import template class CycleNode ( template . Node ): def __init__ ( self , cyclevars ): self . cycle_iter = itertools . cycle ( cyclevars ) def render ( self , context ): return next ( self . cycle_iter ) But, suppose we have two templates rendering the template snippet from above at\nthe same time: Thread 1 performs its first loop iteration, CycleNode.render() returns ‘row1’ Thread 2 performs its first loop iteration, CycleNode.render() returns ‘row2’ Thread 1 performs its second loop iteration, CycleNode.render() returns ‘row1’ Thread 2 performs its second loop iteration, CycleNode.render() returns ‘row2’ The CycleNode is iterating, but it’s iterating globally. As far as Thread 1\nand Thread 2 are concerned, it’s always returning the same value. This is\nnot what we want! To address this problem, Django provides a render_context that’s associated\nwith the context of the template that is currently being rendered. The render_context behaves like a Python dictionary, and should be used to\nstore Node state between invocations of the render method. Let’s refactor our CycleNode implementation to use the render_context : class CycleNode ( template . Node ): def __init__ ( self , cyclevars ): self . cyclevars = cyclevars def render ( self , context ): if self not in context . render_context : context . render_context [ self ] = itertools . cycle ( self . cyclevars ) cycle_iter = context . render_context [ self ] return next ( cycle_iter ) Note that it’s perfectly safe to store global information that will not change\nthroughout the life of the Node as an attribute. In the case of CycleNode , the cyclevars argument doesn’t change after the Node is\ninstantiated, so we don’t need to put it in the render_context . But state\ninformation that is specific to the template that is currently being rendered,\nlike the current iteration of the CycleNode , should be stored in the render_context . Note Notice how we used self to scope the CycleNode specific information\nwithin the render_context . There may be multiple CycleNodes in a\ngiven template, so we need to be careful not to clobber another node’s\nstate information. The easiest way to do this is to always use self as\nthe key into render_context . If you’re keeping track of several state\nvariables, make render_context[self] a dictionary. Registering the tag ¶ Finally, register the tag with your module’s Library instance, as explained\nin writing custom template tags above. Example: register . tag ( \"current_time\" , do_current_time ) The tag() method takes two arguments: The name of the template tag – a string. If this is left out, the\nname of the compilation function will be used. The compilation function – a Python function (not the name of the\nfunction as a string). As with filter registration, it is also possible to use this as a decorator: @register . tag ( name = \"current_time\" ) def do_current_time ( parser , token ): ... @register . tag def shout ( parser , token ): ... If you leave off the name argument, as in the second example above, Django\nwill use the function’s name as the tag name. Passing template variables to the tag ¶ Although you can pass any number of arguments to a template tag using token.split_contents() , the arguments are all unpacked as\nstring literals. A little more work is required in order to pass dynamic\ncontent (a template variable) to a template tag as an argument. While the previous examples have formatted the current time into a string and\nreturned the string, suppose you wanted to pass in a DateTimeField from an object and have the template\ntag format that date-time: < p > This post was last updated at {% format_time blog_entry.date_updated \"%Y-%m-%d %I:%M %p\" %} . </ p > Initially, token.split_contents() will return three values: The tag name format_time . The string 'blog_entry.date_updated' (without the surrounding\nquotes). The formatting string '\"%Y-%m-%d %I:%M %p\"' . The return value from split_contents() will include the leading and trailing quotes for\nstring literals like this. Now your tag should begin to look like this: from django import template def do_format_time ( parser , token ): try : # split_contents() knows not to split quoted strings. tag_name , date_to_be_formatted , format_string = token . split_contents () except ValueError : raise template . TemplateSyntaxError ( \" %r tag requires exactly two arguments\" % token . contents . split ()[ 0 ] ) if not ( format_string [ 0 ] == format_string [ - 1 ] and format_string [ 0 ] in ( '\"' , \"'\" )): raise template . TemplateSyntaxError ( \" %r tag's argument should be in quotes\" % tag_name ) return FormatTimeNode ( date_to_be_formatted , format_string [ 1 : - 1 ]) You also have to change the renderer to retrieve the actual contents of the date_updated property of the blog_entry object.  This can be\naccomplished by using the Variable() class in django.template . To use the Variable class, instantiate it with the name of the variable to\nbe resolved, and then call variable.resolve(context) . So, for example: class FormatTimeNode ( template . Node ): def __init__ ( self , date_to_be_formatted , format_string ): self . date_to_be_formatted = template . Variable ( date_to_be_formatted ) self . format_string = format_string def render ( self , context ): try : actual_date = self . date_to_be_formatted . resolve ( context ) return actual_date . strftime ( self . format_string ) except template . VariableDoesNotExist : return \"\" Variable resolution will throw a VariableDoesNotExist exception if it\ncannot resolve the string passed to it in the current context of the page. Setting a variable in the context ¶ The above examples output a value. Generally, it’s more flexible if your\ntemplate tags set template variables instead of outputting values. That way,\ntemplate authors can reuse the values that your template tags create. To set a variable in the context, use dictionary assignment on the context\nobject in the render() method. Here’s an updated version of CurrentTimeNode that sets a template variable current_time instead of\noutputting it: import datetime from django import template class CurrentTimeNode2 ( template . Node ): def __init__ ( self , format_string ): self . format_string = format_string def render ( self , context ): context [ \"current_time\" ] = datetime . datetime . now () . strftime ( self . format_string ) return \"\" Note that render() returns the empty string. render() should always\nreturn string output. If all the template tag does is set a variable, render() should return the empty string. Here’s how you’d use this new version of the tag: {% current_time \"%Y-%m-%d %I:%M %p\" %} < p > The time is {{ current_time }} . </ p > Variable scope in context Any variable set in the context will only be available in the same block of the template in which it was assigned. This behavior is\nintentional; it provides a scope for variables so that they don’t conflict\nwith context in other blocks. But, there’s a problem with CurrentTimeNode2 : The variable name current_time is hard-coded. This means you’ll need to make sure your\ntemplate doesn’t use {{ current_time }} anywhere else, because the {% current_time %} will blindly overwrite that variable’s value. A cleaner\nsolution is to make the template tag specify the name of the output variable,\nlike so: {% current_time \"%Y-%m-%d %I:%M %p\" as my_current_time %} < p > The current time is {{ my_current_time }} . </ p > To do that, you’ll need to refactor both the compilation function and Node class, like so: import re class CurrentTimeNode3 ( template . Node ): def __init__ ( self , format_string , var_name ): self . format_string = format_string self . var_name = var_name def render ( self , context ): context [ self . var_name ] = datetime . datetime . now () . strftime ( self . format_string ) return \"\" def do_current_time ( parser , token ): # This version uses a regular expression to parse tag contents. try : # Splitting by None == splitting by spaces. tag_name , arg = token . contents . split ( None , 1 ) except ValueError : raise template . TemplateSyntaxError ( \" %r tag requires arguments\" % token . contents . split ()[ 0 ] ) m = re . search ( r \"(.*?) as (\\w+)\" , arg ) if not m : raise template . TemplateSyntaxError ( \" %r tag had invalid arguments\" % tag_name ) format_string , var_name = m . groups () if not ( format_string [ 0 ] == format_string [ - 1 ] and format_string [ 0 ] in ( '\"' , \"'\" )): raise template . TemplateSyntaxError ( \" %r tag's argument should be in quotes\" % tag_name ) return CurrentTimeNode3 ( format_string [ 1 : - 1 ], var_name ) The difference here is that do_current_time() grabs the format string and\nthe variable name, passing both to CurrentTimeNode3 . Finally, if you only need to have a simple syntax for your custom\ncontext-updating template tag, consider using the simple_tag() shortcut, which supports assigning\nthe tag results to a template variable. Parsing until another block tag ¶ Template tags can work in tandem. For instance, the standard {% comment %} tag hides everything until {% endcomment %} .\nTo create a template tag such as this, use parser.parse() in your\ncompilation function. Here’s how a simplified {% comment %} tag might be implemented: def do_comment ( parser , token ): nodelist = parser . parse (( \"endcomment\" ,)) parser . delete_first_token () return CommentNode () class CommentNode ( template . Node ): def render ( self , context ): return \"\" Note The actual implementation of {% comment %} is slightly\ndifferent in that it allows broken template tags to appear between {% comment %} and {% endcomment %} . It does so by calling parser.skip_past('endcomment') instead of parser.parse(('endcomment',)) followed by parser.delete_first_token() , thus avoiding the generation of a\nnode list. parser.parse() takes a tuple of names of block tags ‘’to parse until’’. It\nreturns an instance of django.template.NodeList , which is a list of\nall Node objects that the parser encountered ‘’before’’ it encountered\nany of the tags named in the tuple. In \"nodelist = parser.parse(('endcomment',))\" in the above example, nodelist is a list of all nodes between the {% comment %} and {% endcomment %} , not counting {% comment %} and {% endcomment %} themselves. After parser.parse() is called, the parser hasn’t yet “consumed” the {% endcomment %} tag, so the code needs to explicitly call parser.delete_first_token() . CommentNode.render() returns an empty string. Anything between {% comment %} and {% endcomment %} is ignored. Parsing until another block tag, and saving contents ¶ In the previous example, do_comment() discarded everything between {% comment %} and {% endcomment %} . Instead of doing that, it’s\npossible to do something with the code between block tags. For example, here’s a custom template tag, {% upper %} , that capitalizes\neverything between itself and {% endupper %} . Usage: {% upper %} This will appear in uppercase, {{ your_name }} . {% endupper %} As in the previous example, we’ll use parser.parse() . But this time, we\npass the resulting nodelist to the Node : def do_upper ( parser , token ): nodelist = parser . parse (( \"endupper\" ,)) parser . delete_first_token () return UpperNode ( nodelist ) class UpperNode ( template . Node ): def __init__ ( self , nodelist ): self . nodelist = nodelist def render ( self , context ): output = self . nodelist . render ( context ) return output . upper () The only new concept here is the self.nodelist.render(context) in UpperNode.render() . For more examples of complex rendering, see the source code of {% for %} in django/template/defaulttags.py and {% if %} in django/template/smartif.py .", "keywords": ["work", "variable", "type", "line", "fallback", "register", "split_contents", "statement", "parser.delete_first_token", "def", "place", "scenes", "renderer", "reason", "m", "overview", "stringfilter", "@register", "method", "o", "authors", "damage", "minusone", "register.inclusion_tag", "use", "messages", "compilation", "escaping", "difference", "currenttimenode", "way", "filters", "default", "cyclevars", "library.filter", "option", "iteration", "techniques", "client", "ground", "need", "page", "block", "package", "bottom", "uppernode.render", "top", "isinstance", "mind", "format_string[1:-1", "parser", "autoescaping", "label", "self", "semicolon", "argument", "t", "auto", "version", "primitives", "date_to_be_formatted", "autoescape", "tuple", "integer", "link.html", "environments", "templatesyntaxerror", "x", "comment", "name", "experiments", "jump_link", "parser.skip_past('endcomment", "admin", "python", "link", "your_get_current_time_method", "django.utils.safestring.mark_safe", "subclass", "poll_extras.py", "host", "get_template", "blog_entry", "tag", "|", "true", "*", "presentation", "formattimenode", "requests", "search", "amp", "raise", "logic", "utilities", "features", "feature", "initial_letter_filter", "key", "parameters", "nodelist", "situation", "blocks", "issues", "helper", "zone", "state", "dictionary", "ebnf", "characters", "resolution", "script", "error", "identity", "xss", "template", "literals", "datetime", "esc", "%", "rendering", "setting", "order", "documentation", "development", "creation", "sense", "application", "behavior", "system", "concept", "modules", "str", "mode", "sorts", "var", "following", "strftime", "import", "some_list", "needs_autoescape", "bar", "information", "cycle_iter", "#", "result", "point", "idea", "versions", "section", "uppernode", "¶", "init", "eye", "definition", "couple", "server", "layout", "change", "encounters", "format", "profile", "render", "token.contents.split", "example", "parsing", "row2", "djangotemplates", "functions", "value", "format_time", "takes_context", "source", "html", "needs", "examples", "grammars", "things", "details", "current_time", "nodes", "do_format_time", "form", "object", "poll", "do_upper", "currenttimenode2", "init__.py", "plenty", "warning", "context.autoescape", "library", "home_link", "writer", "do_comment", "assignment", "post", "valueerror", "level", "django", "message", "thread", "vulnerability", "failure", "tandem", "parameter", "syntax", "text", "inclusion", "contents", "strings", "shout", "self.nodelist.render(context", "show_results", "libraries", "itertools", "effect", "=", "objects", "language", "defaults", "my_template.html", "implementation", "var|foo:\"bar", "ton", "interface", "thought", "obj", "handling", "templates", "parser.parse(('endcomment", "businesshours", "render_context", "entity", "works", "time", "exception", "loader", "property", "args", "lowercase", "simple_tag", "generation", "sub", "problem", "registration", "invocations", "groups", "var_name", "load", "output", "templatetags", "conditional_escape", "custom", "decorator", "cyclenodes", "methods", "safestring", "side", "machine", "keyword", "none", "new_context", "variables", "loop", "expects_localtime", "process", "access", "abcd", "considerations", "production", "content", "end", "splitting", "variabledoesnotexist", "urlize_and_linebreaks", "flag", "b", "cycle", "inclusion_tag", "engine", "django.template.defaultfilters", "django.utils.html.conditional_escape", "href", "my_tag", "data", "bits", "options", "environment", "conflict", "node", "endupper", "notes", "’s", "safedata", "life", "response", "shortcut", "s", "kwargs", "directory", "parser.parse", "tutorials", "mark_safe", "module", "markup", "arguments", "vulnerabilities", "parse", "context", "add", "endcomment", "purpose", "defaulttags.py", "security", "designer", "pages", "re", "title", "myfilter", "register.filter", "frameworks", "track", "do_current_time", "shortcuts", "types", "p", "filter", "problems", "rules", "escape", "false", "snippets", "ul", "linebreaksbr", "integers", "values", "quotes", "cases", "solution", "tag_name", "times", "row1", "conversions", "lambda", "attributeerror", "safety", "variety", "contexts", "zones", "spaces", "fragment", "stores", "format_html", "arg", "django.template", "location", "timezone", "input", "consequences", "usage", "cyclenode.render", "context.template.engine.debug", "character", "processing", "choice", "snippet", "defaultfilters.py", "format_string", "results", "entities", "n’t", "internals", "token.contents", "case", "book.title", "decoupling", "@stringfilter", "scratch", "class", "number", "choices", "currenttimenode3", "return", "attribute", "function", "developers", "care", "string", "minustwo", "li", "list", "bug", "variable.resolve(context", "uppercase", "pain", "is_safe", "app", "datetimefield", "file", "buttons", "operations", "installation", "i:%m", "core", "endfor", "notice", "r", "sign", "exceptions", "situations", "results.html", "cyclenode", "possibility", "my_current_time", "names", "token.split_contents", "scope", "tags", "date", "set", "functionality", "foo", "commentnode", "limit", "expression", "hour", "instance", "code", "step", "cut"], "type": "documentation"},
{"title": "How to implement a custom template backend", "url": "https://docs.djangoproject.com/en/5.1/howto/custom-template-backend/", "content": "How to implement a custom template backend ¶ Custom backends ¶ Here’s how to implement a custom template backend in order to use another\ntemplate system. A template backend is a class that inherits django.template.backends.base.BaseEngine . It must implement get_template() and optionally from_string() . Here’s an example for a\nfictional foobar template library: from django.template import TemplateDoesNotExist , TemplateSyntaxError from django.template.backends.base import BaseEngine from django.template.backends.utils import csrf_input_lazy , csrf_token_lazy import foobar class FooBar ( BaseEngine ): # Name of the subdirectory containing the templates for this engine # inside an installed application. app_dirname = \"foobar\" def __init__ ( self , params ): params = params . copy () options = params . pop ( \"OPTIONS\" ) . copy () super () . __init__ ( params ) self . engine = foobar . Engine ( ** options ) def from_string ( self , template_code ): try : return Template ( self . engine . from_string ( template_code )) except foobar . TemplateCompilationFailed as exc : raise TemplateSyntaxError ( exc . args ) def get_template ( self , template_name ): try : return Template ( self . engine . get_template ( template_name )) except foobar . TemplateNotFound as exc : raise TemplateDoesNotExist ( exc . args , backend = self ) except foobar . TemplateCompilationFailed as exc : raise TemplateSyntaxError ( exc . args ) class Template : def __init__ ( self , template ): self . template = template def render ( self , context = None , request = None ): if context is None : context = {} if request is not None : context [ \"request\" ] = request context [ \"csrf_input\" ] = csrf_input_lazy ( request ) context [ \"csrf_token\" ] = csrf_token_lazy ( request ) return self . template . render ( context ) See DEP 182 for more information. Debug integration for custom engines ¶ The Django debug page has hooks to provide detailed information when a template\nerror arises. Custom template engines can use these hooks to enhance the\ntraceback information that appears to users. The following hooks are available: Template postmortem ¶ The postmortem appears when TemplateDoesNotExist is\nraised. It lists the template engines and loaders that were used when trying to\nfind a given template. For example, if two Django engines are configured, the\npostmortem will appear like: Custom engines can populate the postmortem by passing the backend and tried arguments when raising TemplateDoesNotExist .\nBackends that use the postmortem should specify an origin on the template object. Contextual line information ¶ If an error happens during template parsing or rendering, Django can display\nthe line the error happened on. For example: Custom engines can populate this information by setting a template_debug attribute on exceptions raised during parsing and rendering. This attribute is\na dict with the following values: 'name' : The name of the template in which the exception occurred. 'message' : The exception message. 'source_lines' : The lines before, after, and including the line the\nexception occurred on. This is for context, so it shouldn’t contain more than\n20 lines or so. 'line' : The line number on which the exception occurred. 'before' : The content on the error line before the token that raised the\nerror. 'during' : The token that raised the error. 'after' : The content on the error line after the token that raised the\nerror. 'total' : The number of lines in source_lines . 'top' : The line number where source_lines starts. 'bottom' : The line number where source_lines ends. Given the above template error, template_debug would look like: { \"name\" : \"/path/to/template.html\" , \"message\" : \"Invalid block tag: 'syntax'\" , \"source_lines\" : [ ( 1 , \"some \\n \" ), ( 2 , \"lines \\n \" ), ( 3 , \"before \\n \" ), ( 4 , \"Hello { % s yntax error %} {{ world }} \\n \" ), ( 5 , \"some \\n \" ), ( 6 , \"lines \\n \" ), ( 7 , \"after \\n \" ), ( 8 , \"\" ), ], \"line\" : 4 , \"before\" : \"Hello \" , \"during\" : \"{ % s yntax error %}\" , \"after\" : \" {{ world }} \\n \" , \"total\" : 9 , \"bottom\" : 9 , \"top\" : 1 , } Origin API and 3rd-party integration ¶ Django templates have an Origin object available\nthrough the template.origin attribute. This enables debug information to be\ndisplayed in the template postmortem , as well as\nin 3rd-party libraries, like the Django Debug Toolbar . Custom engines can provide their own template.origin information by\ncreating an object that specifies the following attributes: 'name' : The full path to the template. 'template_name' : The relative path to the template as passed into the\ntemplate loading methods. 'loader_name' : An optional string identifying the function or class used\nto load the template, e.g. django.template.loaders.filesystem.Loader .", "keywords": ["template.html", "loader_name", "error", "line", "template", "debug", "foobar", "total", "rendering", "%", "order", "templates", "exc", "def", "postmortem", "application", "exception", "loader", "party", "args", "system", "values", "\\n", "import", "information", "#", "integration", "¶", "init", "csrf_input", "csrf_input_lazy", "custom", "methods", "none", "page", "block", "origin", "render", "bottom", "top", "example", "parsing", "users", "templatenotfound", "content", "backend", "self", "toolbar", "source_lines", "template.origin", "class", "number", "dep", "request", "subdirectory", "engine", "attribute", "function", "string", "templatesyntaxerror", "loading", "app_dirname", "lines", "name", "object", "options", "templatedoesnotexist", "world", "library", "attributes", "params", "django.template.backends.utils", "csrf_token_lazy", "exceptions", "template_debug", "api", "baseengine", "get_template", "path", "django", "tag", "message", "token", "syntax", "*", "backends", "arguments", "context", "loaders", "hooks", "libraries", "engines", "=", "template_code", "yntax"], "type": "documentation"},
{"title": "How to override templates", "url": "https://docs.djangoproject.com/en/5.1/howto/overriding-templates/", "content": "How to override templates ¶ In your project, you might want to override a template in another Django\napplication, whether it be a third-party application or a contrib application\nsuch as django.contrib.admin . You can either put template overrides in your\nproject’s templates directory or in an application’s templates directory. If you have app and project templates directories that both contain overrides,\nthe default Django template loader will try to load the template from the\nproject-level directory first. In other words, DIRS is searched before APP_DIRS . See also Read Overriding built-in widget templates if you’re looking to\ndo that. Overriding from the project’s templates directory ¶ First, we’ll explore overriding templates by creating replacement templates in\nyour project’s templates directory. Let’s say you’re trying to override the templates for a third-party application\ncalled blog , which provides the templates blog/post.html and blog/list.html . The relevant settings for your project would look like: from pathlib import Path BASE_DIR = Path ( __file__ ) . resolve () . parent . parent INSTALLED_APPS = [ ... , \"blog\" , ... , ] TEMPLATES = [ { \"BACKEND\" : \"django.template.backends.django.DjangoTemplates\" , \"DIRS\" : [ BASE_DIR / \"templates\" ], \"APP_DIRS\" : True , # ... }, ] The TEMPLATES setting and BASE_DIR will already exist if you\ncreated your project using the default project template. The setting that needs\nto be modified is DIRS . These settings assume you have a templates directory in the root of your\nproject. To override the templates for the blog app, create a folder\nin the templates directory, and add the template files to that folder: templates/\n    blog/\n        list.html\n        post.html The template loader first looks for templates in the DIRS directory. When\nthe views in the blog app ask for the blog/post.html and blog/list.html templates, the loader will return the files you just created. Overriding from an app’s template directory ¶ Since you’re overriding templates located outside of one of your project’s\napps, it’s more common to use the first method and put template overrides in a\nproject’s templates folder. If you prefer, however, it’s also possible to put\nthe overrides in an app’s template directory. First, make sure your template settings are checking inside app directories: TEMPLATES = [ { # ... \"APP_DIRS\" : True , # ... }, ] If you want to put the template overrides in an app called myapp and the\ntemplates to override are named blog/list.html and blog/post.html ,\nthen your directory structure will look like: myapp/\n    templates/\n        blog/\n            list.html\n            post.html With APP_DIRS set to True , the template\nloader will look in the app’s templates directory and find the templates. Extending an overridden template ¶ With your template loaders configured, you can extend a template using the {% extends %} template tag whilst at the same time overriding\nit. This can allow you to make small customizations without needing to\nreimplement the entire template. For example, you can use this technique to add a custom logo to the admin/base_site.html template: templates/admin/base_site.html ¶ {% extends \"admin/base_site.html\" %} {% block branding %} < img src = \"link/to/logo.png\" alt = \"logo\" > {{ block .super }} {% endblock %} Key points to note: The example creates a file at templates/admin/base_site.html that uses\nthe configured project-level templates directory to override admin/base_site.html . The new template extends admin/base_site.html , which is the same template\nas is being overridden. The template replaces just the branding block, adding a custom logo, and\nusing block.super to retain the prior content. The rest of the template is inherited unchanged from admin/base_site.html . This technique works because the template loader does not consider the already\nloaded override template (at templates/admin/base_site.html ) when\nresolving the extends tag. Combined with block.super it is a powerful\ntechnique to make small customizations.", "keywords": ["base_dir", "import", "views", "myapp", "replacement", "words", "project", "logo", "folder", "pathlib", "overriding", "blog", "#", "customizations", ".super", "path", "template", "level", "technique", "django", "app_dirs", "list.html", "tag", "¶", "directory", "default", "src", "%", "setting", "dirs", "true", "extends", "templates", "custom", "structure", "img", "apps", "settings", "widget", "time", "block.super", "app", "application", "override", "loaders", "loader", "block", "_", "contrib", "party", "root", "method", "points", "=", "example", "base_site.html", "file", "endblock", "overrides", "directories", "djangotemplates", "post.html", "ask", "admin", "rest", "files", "link", "parent", "content", "backend", "django.contrib.admin"], "type": "documentation"},
{"title": "How to create PDF files", "url": "https://docs.djangoproject.com/en/5.1/howto/outputting-pdf/", "content": "How to create PDF files ¶ This document explains how to output PDF files dynamically using Django views.\nThis is made possible by the excellent, open-source ReportLab Python PDF\nlibrary. The advantage of generating PDF files dynamically is that you can create\ncustomized PDFs for different purposes – say, for different users or different\npieces of content. For example, Django was used at kusports.com to generate customized,\nprinter-friendly NCAA tournament brackets, as PDF files, for people\nparticipating in a March Madness contest. Install ReportLab ¶ The ReportLab library is available on PyPI . A user guide (not coincidentally, a PDF file) is also available for download.\nYou can install ReportLab with pip : /  $ python -m pip install reportlab ...\\> py -m pip install reportlab Test your installation by importing it in the Python interactive interpreter: >>> import reportlab If that command doesn’t raise any errors, the installation worked. Write your view ¶ The key to generating PDFs dynamically with Django is that the ReportLab API\nacts on file-like objects, and Django’s FileResponse objects accept file-like objects. Here’s a “Hello World” example: import io from django.http import FileResponse from reportlab.pdfgen import canvas def some_view ( request ): # Create a file-like buffer to receive PDF data. buffer = io . BytesIO () # Create the PDF object, using the buffer as its \"file.\" p = canvas . Canvas ( buffer ) # Draw things on the PDF. Here's where the PDF generation happens. # See the ReportLab documentation for the full list of functionality. p . drawString ( 100 , 100 , \"Hello world.\" ) # Close the PDF object cleanly, and we're done. p . showPage () p . save () # FileResponse sets the Content-Disposition header so that browsers # present the option to save the file. buffer . seek ( 0 ) return FileResponse ( buffer , as_attachment = True , filename = \"hello.pdf\" ) The code and comments should be self-explanatory, but a few things deserve a\nmention: The response will automatically set the MIME type application/pdf based on the filename extension. This tells browsers that the document is a\nPDF file, rather than an HTML file or a generic application/octet-stream binary content. When as_attachment=True is passed to FileResponse , it sets the\nappropriate Content-Disposition header and that tells web browsers to\npop-up a dialog box prompting/confirming how to handle the document even if a\ndefault is set on the machine. If the as_attachment parameter is omitted,\nbrowsers will handle the PDF using whatever program/plugin they’ve been\nconfigured to use for PDFs. You can provide an arbitrary filename parameter. It’ll be used by browsers\nin the “Save as…” dialog. You can hook into the ReportLab API: The same buffer passed as the first\nargument to canvas.Canvas can be fed to the FileResponse class. Note that all subsequent PDF-generation methods are called on the PDF\nobject (in this case, p ) – not on buffer . Finally, it’s important to call showPage() and save() on the PDF\nfile. Note ReportLab is not thread-safe. Some of our users have reported odd issues\nwith building PDF-generating Django views that are accessed by many people\nat the same time. Other formats ¶ Notice that there isn’t a lot in these examples that’s PDF-specific – just the\nbits using reportlab . You can use a similar technique to generate any\narbitrary format that you can find a Python library for. Also see How to create CSV output for another example and some techniques you can use\nwhen generated text-based formats. See also Django Packages provides a comparison of packages that help generate PDF files\nfrom Django.", "keywords": ["tournament", "py", "comments", "octet", "type", "interpreter", "p", "printer", "\\", "documentation", "def", "time", "application", "contest", "plugin", "pieces", "files", "generation", "views", "import", "#", "dialog", "showpage", "output", "¶", "default", "disposition", "option", "buffer", "techniques", "mime", "/", "web", "methods", "hello", "browsers", "machine", "ncaa", "pdfs", "format", "purposes", "command", "example", "users", "guide", "n’t", "pip", "content", "self", "source", "people", "case", "argument", "class", "stream", "request", "madness", "advantage", "install", "save", "html", "as_attachment", "examples", "things", "list", "filename", "data", "view", "brackets", "canvas", "object", "bits", "extension", "user", "header", "file", "world", "library", "comparison", "installation", "errors", "python", "notice", "response", "reportlab", "formats", "api", "box", "note", "pdf", "django", "technique", "parameter", "document", "prompting", "csv", "lot", "text", "program", "functionality", "packages", "mention", "reportlab.pdfgen", "fileresponse", "download", "code", "=", "io", "march", "objects", "key", "issues", "pypi"], "type": "documentation"},
{"title": "How to create CSV output", "url": "https://docs.djangoproject.com/en/5.1/howto/outputting-csv/", "content": "How to create CSV output ¶ This document explains how to output CSV (Comma Separated Values) dynamically\nusing Django views. To do this, you can either use the Python CSV library or the\nDjango template system. Using the Python CSV library ¶ Python comes with a CSV library, csv . The key to using it with Django is\nthat the csv module’s CSV-creation capability acts on file-like objects,\nand Django’s HttpResponse objects are file-like objects. Here’s an example: import csv from django.http import HttpResponse def some_view ( request ): # Create the HttpResponse object with the appropriate CSV header. response = HttpResponse ( content_type = \"text/csv\" , headers = { \"Content-Disposition\" : 'attachment; filename=\"somefilename.csv\"' }, ) writer = csv . writer ( response ) writer . writerow ([ \"First row\" , \"Foo\" , \"Bar\" , \"Baz\" ]) writer . writerow ([ \"Second row\" , \"A\" , \"B\" , \"C\" , '\"Testing\"' , \"Here's a quote\" ]) return response The code and comments should be self-explanatory, but a few things deserve a\nmention: The response gets a special MIME type, text/csv . This tells\nbrowsers that the document is a CSV file, rather than an HTML file. If\nyou leave this off, browsers will probably interpret the output as HTML,\nwhich will result in ugly, scary gobbledygook in the browser window. The response gets an additional Content-Disposition header, which\ncontains the name of the CSV file. This filename is arbitrary; call it\nwhatever you want. It’ll be used by browsers in the “Save as…” dialog, etc. You can hook into the CSV-generation API by passing response as the first\nargument to csv.writer . The csv.writer function expects a file-like\nobject, and HttpResponse objects fit the bill. For each row in your CSV file, call writer.writerow , passing it an iterable . The CSV module takes care of quoting for you, so you don’t have to worry\nabout escaping strings with quotes or commas in them. Pass writerow() your raw strings, and it’ll do the right thing. Streaming large CSV files ¶ When dealing with views that generate very large responses, you might want to\nconsider using Django’s StreamingHttpResponse instead.\nFor example, by streaming a file that takes a long time to generate you can\navoid a load balancer dropping a connection that might have otherwise timed out\nwhile the server was generating the response. In this example, we make full use of Python generators to efficiently handle\nthe assembly and transmission of a large CSV file: import csv from django.http import StreamingHttpResponse class Echo : \"\"\"An object that implements just the write method of the file-like interface. \"\"\" def write ( self , value ): \"\"\"Write the value by returning it, instead of storing in a buffer.\"\"\" return value def some_streaming_csv_view ( request ): \"\"\"A view that streams a large CSV file.\"\"\" # Generate a sequence of rows. The range is based on the maximum number of # rows that can be handled by a single sheet in most spreadsheet # applications. rows = ([ \"Row {} \" . format ( idx ), str ( idx )] for idx in range ( 65536 )) pseudo_buffer = Echo () writer = csv . writer ( pseudo_buffer ) return StreamingHttpResponse ( ( writer . writerow ( row ) for row in rows ), content_type = \"text/csv\" , headers = { \"Content-Disposition\" : 'attachment; filename=\"somefilename.csv\"' }, ) Using the template system ¶ Alternatively, you can use the Django template system to generate CSV. This is lower-level than using the convenient Python csv module, but the solution is presented here for completeness. The idea here is to pass a list of items to your template, and have the\ntemplate output the commas in a for loop. Here’s an example, which generates the same CSV file as above: from django.http import HttpResponse from django.template import loader def some_view ( request ): # Create the HttpResponse object with the appropriate CSV header. response = HttpResponse ( content_type = \"text/csv\" , headers = { \"Content-Disposition\" : 'attachment; filename=\"somefilename.csv\"' }, ) # The data is hard-coded here, but you could load it from a database or # some other source. csv_data = ( ( \"First row\" , \"Foo\" , \"Bar\" , \"Baz\" ), ( \"Second row\" , \"A\" , \"B\" , \"C\" , '\"Testing\"' , \"Here's a quote\" ), ) t = loader . get_template ( \"my_template_name.txt\" ) c = { \"data\" : csv_data } response . write ( t . render ( c )) return response The only difference between this example and the previous example is that this\none uses template loading instead of the CSV module. The rest of the code –\nsuch as the content_type='text/csv' – is the same. Then, create the template my_template_name.txt , with this template code: {% for row in data %} \" {{ row.0 | addslashes }} \", \" {{ row.1 | addslashes }} \", \" {{ row.2 | addslashes }} \", \" {{ row.3 | addslashes }} \", \" {{ row.4 | addslashes }} \" {% endfor %} This short template iterates over the given data and displays a line of CSV for\neach row. It uses the addslashes template filter to ensure there\naren’t any problems with quotes. Other text-based formats ¶ Notice that there isn’t very much specific to CSV here – just the specific\noutput format. You can use either of these techniques to output any text-based\nformat you can dream of. You can also use a similar technique to generate\narbitrary binary data; see How to create PDF files for an example.", "keywords": ["connection", "comments", "interface", "browser", "comma", "echo", "type", "range", "line", "csv_data", "template", "httpresponse", "acts", "rows", "%", "def", "filter", "problems", "creation", "quote", "writerow", "time", "sheet", "loader", "method", "testing", "balancer", "system", "values", "rest", "quotes", "responses", "str", "files", "row.0", "solution", "generation", "use", "views", "import", "baz", "bar", "difference", "items", "#", "load", "dialog", "row.3", "output", "idea", "¶", "some_streaming_csv_view", "disposition", "buffer", "techniques", "mime", "django.template", "browsers", "server", "generators", "writer.writerow", "loop", "format", "idx", "example", "transmission", "content_type", "streaminghttpresponse", "value", "my_template_name.txt", "content", "self", "source", "argument", "class", "number", "t", "applications", "request", "return", "b", "c", "save", "html", "function", "thing", "row.2", "care", "things", "row.1", "list", "filename", "loading", "a", "completeness", "data", "view", "row.4", "attachment", "name", "object", "header", "file", "library", "gobbledygook", "one", "window", "python", "endfor", "notice", "writer", "response", "formats", "sequence", "api", "get_template", "assembly", "level", "django", "content_type='text", "technique", "pdf", "|", "document", "csv", "text", "module", "commas", "strings", "foo", "capability", "mention", "database", "headers", "spreadsheet", "write", "=", "code", "objects", "key", "addslashes", "bill", "row"], "type": "documentation"},
{"title": "How to write custom lookups", "url": "https://docs.djangoproject.com/en/5.1/howto/custom-lookups/", "content": "How to write custom lookups ¶ Django offers a wide variety of built-in lookups for\nfiltering (for example, exact and icontains ). This documentation\nexplains how to write custom lookups and how to alter the working of existing\nlookups. For the API references of lookups, see the Lookup API reference . A lookup example ¶ Let’s start with a small custom lookup. We will write a custom lookup ne which works opposite to exact . Author.objects.filter(name__ne='Jack') will translate to the SQL: \"author\" . \"name\" <> 'Jack' This SQL is backend independent, so we don’t need to worry about different\ndatabases. There are two steps to making this work. Firstly we need to implement the\nlookup, then we need to tell Django about it: from django.db.models import Lookup class NotEqual ( Lookup ): lookup_name = \"ne\" def as_sql ( self , compiler , connection ): lhs , lhs_params = self . process_lhs ( compiler , connection ) rhs , rhs_params = self . process_rhs ( compiler , connection ) params = lhs_params + rhs_params return \" %s <> %s \" % ( lhs , rhs ), params To register the NotEqual lookup we will need to call register_lookup on\nthe field class we want the lookup to be available for. In this case, the lookup\nmakes sense on all Field subclasses, so we register it with Field directly: from django.db.models import Field Field . register_lookup ( NotEqual ) Lookup registration can also be done using a decorator pattern: from django.db.models import Field @Field . register_lookup class NotEqualLookup ( Lookup ): ... We can now use foo__ne for any field foo . You will need to ensure that\nthis registration happens before you try to create any querysets using it. You\ncould place the implementation in a models.py file, or register the lookup\nin the ready() method of an AppConfig . Taking a closer look at the implementation, the first required attribute is lookup_name . This allows the ORM to understand how to interpret name__ne and use NotEqual to generate the SQL. By convention, these names are always\nlowercase strings containing only letters, but the only hard requirement is\nthat it must not contain the string __ . We then need to define the as_sql method. This takes a SQLCompiler object, called compiler ,  and the active database connection. SQLCompiler objects are not documented, but the only thing we need to know\nabout them is that they have a compile() method which returns a tuple\ncontaining an SQL string, and the parameters to be interpolated into that\nstring. In most cases, you don’t need to use it directly and can pass it on to process_lhs() and process_rhs() . A Lookup works against two values, lhs and rhs , standing for\nleft-hand side and right-hand side. The left-hand side is usually a field\nreference, but it can be anything implementing the query expression API . The right-hand is the value given by the user. In the\nexample Author.objects.filter(name__ne='Jack') , the left-hand side is a\nreference to the name field of the Author model, and 'Jack' is the\nright-hand side. We call process_lhs and process_rhs to convert them into the values we\nneed for SQL using the compiler object described before. These methods\nreturn tuples containing some SQL and the parameters to be interpolated into\nthat SQL, just as we need to return from our as_sql method. In the above\nexample, process_lhs returns ('\"author\".\"name\"', []) and process_rhs returns ('\"%s\"', ['Jack']) . In this example there were no\nparameters for the left hand side, but this would depend on the object we have,\nso we still need to include them in the parameters we return. Finally we combine the parts into an SQL expression with <> , and supply all\nthe parameters for the query. We then return a tuple containing the generated\nSQL string and the parameters. A transformer example ¶ The custom lookup above is great, but in some cases you may want to be able to\nchain lookups together. For example, let’s suppose we are building an\napplication where we want to make use of the abs() operator.\nWe have an Experiment model which records a start value, end value, and the\nchange (start - end). We would like to find all experiments where the change\nwas equal to a certain amount ( Experiment.objects.filter(change__abs=27) ),\nor where it did not exceed a certain amount\n( Experiment.objects.filter(change__abs__lt=27) ). Note This example is somewhat contrived, but it nicely demonstrates the range of\nfunctionality which is possible in a database backend independent manner,\nand without duplicating functionality already in Django. We will start by writing an AbsoluteValue transformer. This will use the SQL\nfunction ABS() to transform the value before comparison: from django.db.models import Transform class AbsoluteValue ( Transform ): lookup_name = \"abs\" function = \"ABS\" Next, let’s register it for IntegerField : from django.db.models import IntegerField IntegerField . register_lookup ( AbsoluteValue ) We can now run the queries we had before. Experiment.objects.filter(change__abs=27) will generate the following SQL: SELECT ... WHERE ABS ( \"experiments\" . \"change\" ) = 27 By using Transform instead of Lookup it means we are able to chain\nfurther lookups afterward. So Experiment.objects.filter(change__abs__lt=27) will generate the following\nSQL: SELECT ... WHERE ABS ( \"experiments\" . \"change\" ) < 27 Note that in case there is no other lookup specified, Django interprets change__abs=27 as change__abs__exact=27 . This also allows the result to be used in ORDER BY and DISTINCT ON clauses. For example Experiment.objects.order_by('change__abs') generates: SELECT ... ORDER BY ABS ( \"experiments\" . \"change\" ) ASC And on databases that support distinct on fields (such as PostgreSQL), Experiment.objects.distinct('change__abs') generates: SELECT ... DISTINCT ON ABS ( \"experiments\" . \"change\" ) When looking for which lookups are allowable after the Transform has been\napplied, Django uses the output_field attribute. We didn’t need to specify\nthis here as it didn’t change, but supposing we were applying AbsoluteValue to some field which represents a more complex type (for example a point\nrelative to an origin, or a complex number) then we may have wanted to specify\nthat the transform returns a FloatField type for further lookups. This can\nbe done by adding an output_field attribute to the transform: from django.db.models import FloatField , Transform class AbsoluteValue ( Transform ): lookup_name = \"abs\" function = \"ABS\" @property def output_field ( self ): return FloatField () This ensures that further lookups like abs__lte behave as they would for\na FloatField . Writing an efficient abs__lt lookup ¶ When using the above written abs lookup, the SQL produced will not use\nindexes efficiently in some cases. In particular, when we use change__abs__lt=27 , this is equivalent to change__gt=-27 AND change__lt=27 . (For the lte case we could use the SQL BETWEEN ). So we would like Experiment.objects.filter(change__abs__lt=27) to generate\nthe following SQL: SELECT .. WHERE \"experiments\" . \"change\" < 27 AND \"experiments\" . \"change\" > - 27 The implementation is: from django.db.models import Lookup class AbsoluteValueLessThan ( Lookup ): lookup_name = \"lt\" def as_sql ( self , compiler , connection ): lhs , lhs_params = compiler . compile ( self . lhs . lhs ) rhs , rhs_params = self . process_rhs ( compiler , connection ) params = lhs_params + rhs_params + lhs_params + rhs_params return \" %s < %s AND %s > - %s \" % ( lhs , rhs , lhs , rhs ), params AbsoluteValue . register_lookup ( AbsoluteValueLessThan ) There are a couple of notable things going on. First, AbsoluteValueLessThan isn’t calling process_lhs() . Instead it skips the transformation of the lhs done by AbsoluteValue and uses the original lhs . That is, we\nwant to get \"experiments\".\"change\" not ABS(\"experiments\".\"change\") .\nReferring directly to self.lhs.lhs is safe as AbsoluteValueLessThan can be accessed only from the AbsoluteValue lookup, that is the lhs is always an instance of AbsoluteValue . Notice also that  as both sides are used multiple times in the query the params\nneed to contain lhs_params and rhs_params multiple times. The final query does the inversion ( 27 to -27 ) directly in the\ndatabase. The reason for doing this is that if the self.rhs is something else\nthan a plain integer value (for example an F() reference) we can’t do the\ntransformations in Python. Note In fact, most lookups with __abs could be implemented as range queries\nlike this, and on most database backends it is likely to be more sensible to\ndo so as you can make use of the indexes. However with PostgreSQL you may\nwant to add an index on abs(change) which would allow these queries to\nbe very efficient. A bilateral transformer example ¶ The AbsoluteValue example we discussed previously is a transformation which\napplies to the left-hand side of the lookup. There may be some cases where you\nwant the transformation to be applied to both the left-hand side and the\nright-hand side. For instance, if you want to filter a queryset based on the\nequality of the left and right-hand side insensitively to some SQL function. Let’s examine case-insensitive transformations here. This transformation isn’t\nvery useful in practice as Django already comes with a bunch of built-in\ncase-insensitive lookups, but it will be a nice demonstration of bilateral\ntransformations in a database-agnostic way. We define an UpperCase transformer which uses the SQL function UPPER() to\ntransform the values before comparison. We define bilateral = True to indicate that\nthis transformation should apply to both lhs and rhs : from django.db.models import Transform class UpperCase ( Transform ): lookup_name = \"upper\" function = \"UPPER\" bilateral = True Next, let’s register it: from django.db.models import CharField , TextField CharField . register_lookup ( UpperCase ) TextField . register_lookup ( UpperCase ) Now, the queryset Author.objects.filter(name__upper=\"doe\") will generate a case\ninsensitive query like this: SELECT ... WHERE UPPER ( \"author\" . \"name\" ) = UPPER ( 'doe' ) Writing alternative implementations for existing lookups ¶ Sometimes different database vendors require different SQL for the same\noperation. For this example we will rewrite a custom implementation for\nMySQL for the NotEqual operator. Instead of <> we will be using != operator. (Note that in reality almost all databases support both, including\nall the official databases supported by Django). We can change the behavior on a specific backend by creating a subclass of NotEqual with an as_mysql method: class MySQLNotEqual ( NotEqual ): def as_mysql ( self , compiler , connection , ** extra_context ): lhs , lhs_params = self . process_lhs ( compiler , connection ) rhs , rhs_params = self . process_rhs ( compiler , connection ) params = lhs_params + rhs_params return \" %s != %s \" % ( lhs , rhs ), params Field . register_lookup ( MySQLNotEqual ) We can then register it with Field . It takes the place of the original NotEqual class as it has the same lookup_name . When compiling a query, Django first looks for as_%s % connection.vendor methods, and then falls back to as_sql . The vendor names for the in-built\nbackends are sqlite , postgresql , oracle and mysql . How Django determines the lookups and transforms which are used ¶ In some cases you may wish to dynamically change which Transform or Lookup is returned based on the name passed in, rather than fixing it. As\nan example, you could have a field which stores coordinates or an arbitrary\ndimension, and wish to allow a syntax like .filter(coords__x7=4) to return\nthe objects where the 7th coordinate has value 4. In order to do this, you\nwould override get_lookup with something like: class CoordinatesField ( Field ): def get_lookup ( self , lookup_name ): if lookup_name . startswith ( \"x\" ): try : dimension = int ( lookup_name . removeprefix ( \"x\" )) except ValueError : pass else : return get_coordinate_lookup ( dimension ) return super () . get_lookup ( lookup_name ) You would then define get_coordinate_lookup appropriately to return a Lookup subclass which handles the relevant value of dimension . There is a similarly named method called get_transform() . get_lookup() should always return a Lookup subclass, and get_transform() a Transform subclass. It is important to remember that Transform objects can be further filtered on, and Lookup objects cannot. When filtering, if there is only one lookup name remaining to be resolved, we\nwill look for a Lookup . If there are multiple names, it will look for a Transform . In the situation where there is only one name and a Lookup is not found, we look for a Transform and then the exact lookup on that Transform . All call sequences always end with a Lookup . To clarify: .filter(myfield__mylookup) will call myfield.get_lookup('mylookup') . .filter(myfield__mytransform__mylookup) will call myfield.get_transform('mytransform') , and then mytransform.get_lookup('mylookup') . .filter(myfield__mytransform) will first call myfield.get_lookup('mytransform') , which will fail, so it will fall back\nto calling myfield.get_transform('mytransform') and then mytransform.get_lookup('exact') .", "keywords": ["relative", "implementation", "index", "connection", "work", "implementations", "mysql", "type", "range", "self.lhs.lhs", "querysets", "change__lt=27", "%", "order", "documentation", "def", "place", "get_coordinate_lookup", "experiments\"", "sense", "reason", "reality", "application", "oracle", "_", "method", "abs(\"experiments\"", "transformer", "queryset", "as_mysql", "hand", "requirement", "on", "behavior", "dimension", "lowercase", "values", "change__abs=27", "cases", "lhs_params", "query", "use", "asc", "import", "times", "subclasses", "registration", "startswith", "ne", "vendors", "myfield.get_lookup('mytransform", "absolutevaluelessthan", "result", "point", "variety", "fields", "way", "¶", "experiment.objects.distinct('change__abs", "icontains", "custom", "decorator", "f", "methods", "side", "output_field", "process_lhs", "floatfield", "couple", "model", "change__gt=-27", "as_%s", "process_rhs", "coordinates", "change", "equality", "abs", "experiment.objects.filter(change__abs=27", "origin", "letters", "experiment.objects.order_by('change__abs", "example", "absolutevalue", "n’t", "value", "convention", "compile", "connection.vendor", "as_sql", "upper", "author.objects.filter(name__ne='jack", "backend", "self", "int", "myfield.get_lookup('mylookup", "end", "experiment.objects.filter(change__abs__lt=27", "removeprefix", "case", "transforms", "class", "@property", "number", "inversion", "bunch", "coordinate", "tuple", "tuples", "return", "integer", "chain", "rhs_params", "attribute", "function", "thing", "transformation", "string", "things", "uppercase", "x", "start", ".filter(coords__x7=4", "lhs", "steps", "get_lookup", "call", "rhs", "parts", "name", "lookups", "object", "pattern", "experiments", "user", "lte", "sides", "file", "sqlcompiler", "operator", "queries", "postgresql", "comparison", "filtering", "references", "returns", "’s", "params", "abs__lte", "python", "charfield", "demonstration", "vendor", "notice", "amount", "change__abs__lt=27", "mysqlnotequal", "s", "manner", "working", "jack", "@field", "api", "lookup", "sql", "orm", "indexes", "subclass", "sequences", "author", "valueerror", "names", "myfield.get_transform('mytransform", "django", "compiler", "clauses", "fact", "look", "syntax", "experiment", "field", "backends", "practice", "functionality", "textfield", "mytransform.get_lookup('mylookup", "lookup_name", "strings", "foo", "\"name", "database", "integerfield", "transform", "databases", "expression", "author.objects.filter(name__upper=\"doe", "get_transform", "register_lookup", "operation", "reference", "instance", "=", "foo__ne", "transformations", "objects", "appconfig", "parameters", "situation", "\"change", "abs(change", "doe", "coordinatesfield", "notequal"], "type": "documentation"},
{"title": "How to create database migrations", "url": "https://docs.djangoproject.com/en/5.1/howto/writing-migrations/", "content": "How to create database migrations ¶ This document explains how to structure and write database migrations for\ndifferent scenarios you might encounter. For introductory material on\nmigrations, see the topic guide . Data migrations and multiple databases ¶ When using multiple databases, you may need to figure out whether or not to\nrun a migration against a particular database. For example, you may want to only run a migration on a particular database. In order to do that you can check the database connection’s alias inside a RunPython operation by looking at the schema_editor.connection.alias attribute: from django.db import migrations def forwards ( apps , schema_editor ): if schema_editor . connection . alias != \"default\" : return # Your migration code goes here class Migration ( migrations . Migration ): dependencies = [ # Dependencies to other migrations ] operations = [ migrations . RunPython ( forwards ), ] You can also provide hints that will be passed to the allow_migrate() method of database routers as **hints : myapp/dbrouters.py ¶ class MyRouter : def allow_migrate ( self , db , app_label , model_name = None , ** hints ): if \"target_db\" in hints : return db == hints [ \"target_db\" ] return True Then, to leverage this in your migrations, do the following: from django.db import migrations def forwards ( apps , schema_editor ): # Your migration code goes here ... class Migration ( migrations . Migration ): dependencies = [ # Dependencies to other migrations ] operations = [ migrations . RunPython ( forwards , hints = { \"target_db\" : \"default\" }), ] If your RunPython or RunSQL operation only affects one model, it’s good\npractice to pass model_name as a hint to make it as transparent as possible\nto the router. This is especially important for reusable and third-party apps. Migrations that add unique fields ¶ Applying a “plain” migration that adds a unique non-nullable field to a table\nwith existing rows will raise an error because the value used to populate\nexisting rows is generated only once, thus breaking the unique constraint. Therefore, the following steps should be taken. In this example, we’ll add a\nnon-nullable UUIDField with a default value. Modify\nthe respective field according to your needs. Add the field on your model with default=uuid.uuid4 and unique=True arguments (choose an appropriate default for the type of the field you’re\nadding). Run the makemigrations command. This should generate a migration\nwith an AddField operation. Generate two empty migration files for the same app by running makemigrations myapp --empty twice. We’ve renamed the migration files to\ngive them meaningful names in the examples below. Copy the AddField operation from the auto-generated migration (the first\nof the three new files) to the last migration, change AddField to AlterField , and add imports of uuid and models . For example: 0006_remove_uuid_null.py ¶ # Generated by Django A.B on YYYY-MM-DD HH:MM from django.db import migrations , models import uuid class Migration ( migrations . Migration ): dependencies = [ ( \"myapp\" , \"0005_populate_uuid_values\" ), ] operations = [ migrations . AlterField ( model_name = \"mymodel\" , name = \"uuid\" , field = models . UUIDField ( default = uuid . uuid4 , unique = True ), ), ] Edit the first migration file. The generated migration class should look\nsimilar to this: 0004_add_uuid_field.py ¶ class Migration ( migrations . Migration ): dependencies = [ ( \"myapp\" , \"0003_auto_20150129_1705\" ), ] operations = [ migrations . AddField ( model_name = \"mymodel\" , name = \"uuid\" , field = models . UUIDField ( default = uuid . uuid4 , unique = True ), ), ] Change unique=True to null=True – this will create the intermediary\nnull field and defer creating the unique constraint until we’ve populated\nunique values on all the rows. In the first empty migration file, add a RunPython or RunSQL operation to generate a\nunique value (UUID in the example) for each existing row. Also add an import\nof uuid . For example: 0005_populate_uuid_values.py ¶ # Generated by Django A.B on YYYY-MM-DD HH:MM from django.db import migrations import uuid def gen_uuid ( apps , schema_editor ): MyModel = apps . get_model ( \"myapp\" , \"MyModel\" ) for row in MyModel . objects . all (): row . uuid = uuid . uuid4 () row . save ( update_fields = [ \"uuid\" ]) class Migration ( migrations . Migration ): dependencies = [ ( \"myapp\" , \"0004_add_uuid_field\" ), ] operations = [ # omit reverse_code=... if you don't want the migration to be reversible. migrations . RunPython ( gen_uuid , reverse_code = migrations . RunPython . noop ), ] Now you can apply the migrations as usual with the migrate command. Note there is a race condition if you allow objects to be created while this\nmigration is running. Objects created after the AddField and before RunPython will have their original uuid ’s overwritten. Non-atomic migrations ¶ On databases that support DDL transactions (SQLite and PostgreSQL), migrations\nwill run inside a transaction by default. For use cases such as performing data\nmigrations on large tables, you may want to prevent a migration from running in\na transaction by setting the atomic attribute to False : from django.db import migrations class Migration ( migrations . Migration ): atomic = False Within such a migration, all operations are run without a transaction. It’s\npossible to execute parts of the migration inside a transaction using atomic() or by passing atomic=True to RunPython . Here’s an example of a non-atomic data migration that updates a large table in\nsmaller batches: import uuid from django.db import migrations , transaction def gen_uuid ( apps , schema_editor ): MyModel = apps . get_model ( \"myapp\" , \"MyModel\" ) while MyModel . objects . filter ( uuid__isnull = True ) . exists (): with transaction . atomic (): for row in MyModel . objects . filter ( uuid__isnull = True )[: 1000 ]: row . uuid = uuid . uuid4 () row . save () class Migration ( migrations . Migration ): atomic = False operations = [ migrations . RunPython ( gen_uuid ), ] The atomic attribute doesn’t have an effect on databases that don’t support\nDDL transactions (e.g. MySQL, Oracle). (MySQL’s atomic DDL statement support refers to individual\nstatements rather than multiple statements wrapped in a transaction that can be\nrolled back.) Controlling the order of migrations ¶ Django determines the order in which migrations should be applied not by the\nfilename of each migration, but by building a graph using two properties on the Migration class: dependencies and run_before . If you’ve used the makemigrations command you’ve probably\nalready seen dependencies in action because auto-created\nmigrations have this defined as part of their creation process. The dependencies property is declared like this: from django.db import migrations class Migration ( migrations . Migration ): dependencies = [ ( \"myapp\" , \"0123_the_previous_migration\" ), ] Usually this will be enough, but from time to time you may need to\nensure that your migration runs before other migrations. This is\nuseful, for example, to make third-party apps’ migrations run after your AUTH_USER_MODEL replacement. To achieve this, place all migrations that should depend on yours in\nthe run_before attribute on your Migration class: class Migration ( migrations . Migration ): ... run_before = [ ( \"third_party_app\" , \"0001_do_awesome\" ), ] Prefer using dependencies over run_before when possible. You should\nonly use run_before if it is undesirable or impractical to specify dependencies in the migration which you want to run after the one you are\nwriting. Migrating data between third-party apps ¶ You can use a data migration to move data from one third-party application to\nanother. If you plan to remove the old app later, you’ll need to set the dependencies property based on whether or not the old app is installed. Otherwise, you’ll\nhave missing dependencies once you uninstall the old app. Similarly, you’ll\nneed to catch LookupError in the apps.get_model() call that\nretrieves models from the old app. This approach allows you to deploy your\nproject anywhere without first installing and then uninstalling the old app. Here’s a sample migration: myapp/migrations/0124_move_old_app_to_new_app.py ¶ from django.apps import apps as global_apps from django.db import migrations def forwards ( apps , schema_editor ): try : OldModel = apps . get_model ( \"old_app\" , \"OldModel\" ) except LookupError : # The old app isn't installed. return NewModel = apps . get_model ( \"new_app\" , \"NewModel\" ) NewModel . objects . bulk_create ( NewModel ( new_attribute = old_object . old_attribute ) for old_object in OldModel . objects . all () ) class Migration ( migrations . Migration ): operations = [ migrations . RunPython ( forwards , migrations . RunPython . noop ), ] dependencies = [ ( \"myapp\" , \"0123_the_previous_migration\" ), ( \"new_app\" , \"0001_initial\" ), ] if global_apps . is_installed ( \"old_app\" ): dependencies . append (( \"old_app\" , \"0001_initial\" )) Also consider what you want to happen when the migration is unapplied. You\ncould either do nothing (as in the example above) or remove some or all of the\ndata from the new application. Adjust the second argument of the RunPython operation accordingly. Changing a ManyToManyField to use a through model ¶ If you change a ManyToManyField to use a through model, the default migration will delete the existing table and create a new\none, losing the existing relations. To avoid this, you can use SeparateDatabaseAndState to rename the existing table to the new\ntable name while telling the migration autodetector that the new model has\nbeen created. You can check the existing table name through sqlmigrate or dbshell . You can check the new table name\nwith the through model’s _meta.db_table property. Your new through model should use the same names for the ForeignKey s as Django did. Also if\nit needs any extra fields, they should be added in operations after SeparateDatabaseAndState . For example, if we had a Book model with a ManyToManyField linking to Author , we could add a through model AuthorBook with a new field is_primary , like so: from django.db import migrations , models import django.db.models.deletion class Migration ( migrations . Migration ): dependencies = [ ( \"core\" , \"0001_initial\" ), ] operations = [ migrations . SeparateDatabaseAndState ( database_operations = [ # Old table name from checking with sqlmigrate, new table # name from AuthorBook._meta.db_table. migrations . RunSQL ( sql = \"ALTER TABLE core_book_authors RENAME TO core_authorbook\" , reverse_sql = \"ALTER TABLE core_authorbook RENAME TO core_book_authors\" , ), ], state_operations = [ migrations . CreateModel ( name = \"AuthorBook\" , fields = [ ( \"id\" , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = \"ID\" , ), ), ( \"author\" , models . ForeignKey ( on_delete = django . db . models . deletion . DO_NOTHING , to = \"core.Author\" , ), ), ( \"book\" , models . ForeignKey ( on_delete = django . db . models . deletion . DO_NOTHING , to = \"core.Book\" , ), ), ], ), migrations . AlterField ( model_name = \"book\" , name = \"authors\" , field = models . ManyToManyField ( to = \"core.Author\" , through = \"core.AuthorBook\" , ), ), ], ), migrations . AddField ( model_name = \"authorbook\" , name = \"is_primary\" , field = models . BooleanField ( default = False ), ), ] Changing an unmanaged model to managed ¶ If you want to change an unmanaged model ( managed=False ) to managed, you must remove managed=False and generate a migration before making other schema-related\nchanges to the model, since schema changes that appear in the migration that\ncontains the operation to change Meta.managed may not be applied.", "keywords": ["batches", "alter", "connection", "addfield", "[:", "django.db.models.deletion", "material", "transactions", "mysql", "error", "hints", "statements", "update_fields", "type", "dd", "support", "migrations", "manytomanyfield", "book", "newmodel", "a.b", "rows", "intermediary", "statement", "order", "changes", "def", "filter", "booleanfield", "creation", "id", "false", "time", "application", "0004_add_uuid_field.py", "oracle", "property", "omit", "method", "party", "_", "table", "reverse_code=", "noop", "authors", "values", "d", "files", "cases", "use", "following", "import", "condition", "project", "sample", "runpython", "topic", "#", "sqlmigrate", "fields", "¶", "atomic", "default", "run_before", "auth_user_model", "alterfield", "myrouter", "schema_editor", "transaction", "model", "none", "apps.get_model", "get_model", "process", "command", "example", "guide", "n’t", "value", "overwritten", "uuid4", "migrations/0124_move_old_app_to_new_app.py", "sqlite", "uuidfield", "mymodel", "uuid", "self", "router", "0005_populate_uuid_values", "imports", "argument", "race", "class", "makemigrations", "replacement", "is_primary", "lookuperror", "auto", "rename", "deletion", "autodetector", "old_app", "tables", "needs", "bulk_create", "action", "attribute", "0001_do_awesome", "examples", "django.db", "properties", "filename", "steps", "authorbook", "data", "scenarios", "app", "constraint", "django.apps", "schema_editor.connection.alias", "parts", "runsql", "name", "i", "reverse_code", "part", "file", "new_attribute", "yyyy", "postgresql", "one", "uuid.uuid4", "dependencies", "target_db", "operations", "graph", "on_delete", "core", "reverse_sql", "allow_migrate", "myapp", "gen_uuid", "authorbook._meta.db_table", "s", "hint", "migration", "third_party_app", "author", "names", "new_app", "django", "createmodel", "old_object", "do_nothing", "true", "document", "*", "approach", "autofield", "field", "apps", "arguments", "practice", "state_operations", "ddl", "relations", "foreignkey", "database", "model_name", "databases", "mm", "global_apps", "dbshell", "operation", "db", "oldmodel", "effect", "schema", "=", "code", "models", "database_operations", "primary_key", "objects", "hh", "alias", "row", "call", "verbose_name"], "type": "documentation"},
{"title": "How to create custom model fields", "url": "https://docs.djangoproject.com/en/5.1/howto/custom-model-fields/", "content": "How to create custom model fields ¶ Introduction ¶ The model reference documentation explains how to use\nDjango’s standard field classes – CharField , DateField , etc. For many purposes, those classes are\nall you’ll need. Sometimes, though, the Django version won’t meet your precise\nrequirements, or you’ll want to use a field that is entirely different from\nthose shipped with Django. Django’s built-in field types don’t cover every possible database column type –\nonly the common types, such as VARCHAR and INTEGER . For more obscure\ncolumn types, such as geographic polygons or even user-created types such as PostgreSQL custom types , you can define your own Django Field subclasses. Alternatively, you may have a complex Python object that can somehow be\nserialized to fit into a standard database column type. This is another case\nwhere a Field subclass will help you use your object with your models. Our example object ¶ Creating custom fields requires a bit of attention to detail. To make things\neasier to follow, we’ll use a consistent example throughout this document:\nwrapping a Python object representing the deal of cards in a hand of Bridge .\nDon’t worry, you don’t have to know how to play Bridge to follow this example.\nYou only need to know that 52 cards are dealt out equally to four players, who\nare traditionally called north , east , south and west .  Our class looks\nsomething like this: class Hand : \"\"\"A hand of cards (bridge style)\"\"\" def __init__ ( self , north , east , south , west ): # Input parameters are lists of cards ('Ah', '9s', etc.) self . north = north self . east = east self . south = south self . west = west # ... (other possibly useful methods omitted) ... This is an ordinary Python class, with nothing Django-specific about it.\nWe’d like to be able to do things like this in our models (we assume the hand attribute on the model is an instance of Hand ): example = MyModel . objects . get ( pk = 1 ) print ( example . hand . north ) new_hand = Hand ( north , east , south , west ) example . hand = new_hand example . save () We assign to and retrieve from the hand attribute in our model just like\nany other Python class. The trick is to tell Django how to handle saving and\nloading such an object. In order to use the Hand class in our models, we do not have to change\nthis class at all. This is ideal, because it means you can easily write\nmodel support for existing classes where you cannot change the source code. Note You might only be wanting to take advantage of custom database column\ntypes and deal with the data as standard Python types in your models;\nstrings, or floats, for example. This case is similar to our Hand example and we’ll note any differences as we go along. Background theory ¶ Database storage ¶ Let’s start with model fields. If you break it down, a model field provides a\nway to take a normal Python object – string, boolean, datetime , or\nsomething more complex like Hand – and convert it to and from a format\nthat is useful when dealing with the database. (Such a format is also useful\nfor serialization, but as we’ll see later, that is easier once you have the\ndatabase side under control). Fields in a model must somehow be converted to fit into an existing database\ncolumn type. Different databases provide different sets of valid column types,\nbut the rule is still the same: those are the only types you have to work\nwith. Anything you want to store in the database must fit into one of\nthose types. Normally, you’re either writing a Django field to match a particular database\ncolumn type, or you will need a way to convert your data to, say, a string. For our Hand example, we could convert the card data to a string of 104\ncharacters by concatenating all the cards together in a predetermined order –\nsay, all the north cards first, then the east , south and west cards. So Hand objects can be saved to text or character columns in the database. What does a field class do? ¶ All of Django’s fields (and when we say fields in this document, we always\nmean model fields and not form fields ) are subclasses\nof django.db.models.Field . Most of the information that Django records\nabout a field is common to all fields – name, help text, uniqueness and so\nforth. Storing all that information is handled by Field . We’ll get into the\nprecise details of what Field can do later on; for now, suffice it to say\nthat everything descends from Field and then customizes key pieces of the\nclass behavior. It’s important to realize that a Django field class is not what is stored in\nyour model attributes. The model attributes contain normal Python objects. The\nfield classes you define in a model are actually stored in the Meta class\nwhen the model class is created (the precise details of how this is done are\nunimportant here). This is because the field classes aren’t necessary when\nyou’re just creating and modifying attributes. Instead, they provide the\nmachinery for converting between the attribute value and what is stored in the\ndatabase or sent to the serializer . Keep this in mind when creating your own custom fields. The Django Field subclass you write provides the machinery for converting between your Python\ninstances and the database/serializer values in various ways (there are\ndifferences between storing a value and using a value for lookups, for\nexample). If this sounds a bit tricky, don’t worry – it will become clearer in\nthe examples below. Just remember that you will often end up creating two\nclasses when you want a custom field: The first class is the Python object that your users will manipulate.\nThey will assign it to the model attribute, they will read from it for\ndisplaying purposes, things like that. This is the Hand class in our\nexample. The second class is the Field subclass. This is the class that knows\nhow to convert your first class back and forth between its permanent\nstorage form and the Python form. Writing a field subclass ¶ When planning your Field subclass, first give some\nthought to which existing Field class your new field\nis most similar to. Can you subclass an existing Django field and save yourself\nsome work? If not, you should subclass the Field class, from which everything is descended. Initializing your new field is a matter of separating out any arguments that are\nspecific to your case from the common arguments and passing the latter to the __init__() method of Field (or your parent\nclass). In our example, we’ll call our field HandField . (It’s a good idea to call\nyour Field subclass <Something>Field , so it’s\neasily identifiable as a Field subclass.) It doesn’t\nbehave like any existing field, so we’ll subclass directly from Field : from django.db import models class HandField ( models . Field ): description = \"A hand of cards (bridge style)\" def __init__ ( self , * args , ** kwargs ): kwargs [ \"max_length\" ] = 104 super () . __init__ ( * args , ** kwargs ) Our HandField accepts most of the standard field options (see the list\nbelow), but we ensure it has a fixed length, since it only needs to hold 52\ncard values plus their suits; 104 characters in total. Note Many of Django’s model fields accept options that they don’t do anything\nwith. For example, you can pass both editable and auto_now to a django.db.models.DateField and it will ignore the editable parameter\n( auto_now being set implies editable=False ). No error is raised in this case. This behavior simplifies the field classes, because they don’t need to\ncheck for options that aren’t necessary. They pass all the options to\nthe parent class and then don’t use them later on. It’s up to you whether\nyou want your fields to be more strict about the options they select, or to\nuse the more permissive behavior of the current fields. The Field.__init__() method takes the following parameters: verbose_name name primary_key max_length unique blank null db_index rel : Used for related fields (like ForeignKey ). For advanced\nuse only. default editable serialize : If False , the field will not be serialized when the model\nis passed to Django’s serializers . Defaults to True . unique_for_date unique_for_month unique_for_year choices help_text db_column db_tablespace : Only for index creation, if the\nbackend supports tablespaces . You can usually\nignore this option. auto_created : True if the field was\nautomatically created, as for the OneToOneField used by model inheritance. For advanced use only. All of the options without an explanation in the above list have the same\nmeaning they do for normal Django fields. See the field documentation for examples and details. Field deconstruction ¶ The counterpoint to writing your __init__() method is writing the deconstruct() method. It’s used during model migrations to tell Django how to take an instance of your new field\nand reduce it to a serialized form - in particular, what arguments to pass to __init__() to recreate it. If you haven’t added any extra options on top of the field you inherited from,\nthen there’s no need to write a new deconstruct() method. If, however,\nyou’re changing the arguments passed in __init__() (like we are in HandField ), you’ll need to supplement the values being passed. deconstruct() returns a tuple of four items: the field’s attribute name,\nthe full import path of the field class, the positional arguments (as a list),\nand the keyword arguments (as a dict). Note this is different from the deconstruct() method for custom classes which returns a tuple of three things. As a custom field author, you don’t need to care about the first two values;\nthe base Field class has all the code to work out the field’s attribute\nname and import path. You do, however, have to care about the positional\nand keyword arguments, as these are likely the things you are changing. For example, in our HandField class we’re always forcibly setting\nmax_length in __init__() . The deconstruct() method on the base Field class will see this and try to return it in the keyword arguments; thus,\nwe can drop it from the keyword arguments for readability: from django.db import models class HandField ( models . Field ): def __init__ ( self , * args , ** kwargs ): kwargs [ \"max_length\" ] = 104 super () . __init__ ( * args , ** kwargs ) def deconstruct ( self ): name , path , args , kwargs = super () . deconstruct () del kwargs [ \"max_length\" ] return name , path , args , kwargs If you add a new keyword argument, you need to write code in deconstruct() that puts its value into kwargs yourself. You should also omit the value\nfrom kwargs when it isn’t necessary to reconstruct the state of the field,\nsuch as when the default value is being used: from django.db import models class CommaSepField ( models . Field ): \"Implements comma-separated storage of lists\" def __init__ ( self , separator = \",\" , * args , ** kwargs ): self . separator = separator super () . __init__ ( * args , ** kwargs ) def deconstruct ( self ): name , path , args , kwargs = super () . deconstruct () # Only include kwarg if it's not the default if self . separator != \",\" : kwargs [ \"separator\" ] = self . separator return name , path , args , kwargs More complex examples are beyond the scope of this document, but remember -\nfor any configuration of your Field instance, deconstruct() must return\narguments that you can pass to __init__ to reconstruct that state. Pay extra attention if you set new default values for arguments in the Field superclass; you want to make sure they’re always included, rather\nthan disappearing if they take on the old default value. In addition, try to avoid returning values as positional arguments; where\npossible, return values as keyword arguments for maximum future compatibility.\nIf you change the names of things more often than their position in the\nconstructor’s argument list, you might prefer positional, but bear in mind that\npeople will be reconstructing your field from the serialized version for quite\na while (possibly years), depending how long your migrations live for. You can see the results of deconstruction by looking in migrations that include\nthe field, and you can test deconstruction in unit tests by deconstructing and\nreconstructing the field: name , path , args , kwargs = my_field_instance . deconstruct () new_instance = MyField ( * args , ** kwargs ) self . assertEqual ( my_field_instance . some_attribute , new_instance . some_attribute ) Field attributes not affecting database column definition ¶ You can override Field.non_db_attrs to customize attributes of a field that\ndon’t affect a column definition. It’s used during model migrations to detect\nno-op AlterField operations. For example: class CommaSepField ( models . Field ): @property def non_db_attrs ( self ): return super () . non_db_attrs + ( \"separator\" ,) Changing a custom field’s base class ¶ You can’t change the base class of a custom field because Django won’t detect\nthe change and make a migration for it. For example, if you start with: class CustomCharField ( models . CharField ): ... and then decide that you want to use TextField instead, you can’t change\nthe subclass like this: class CustomCharField ( models . TextField ): ... Instead, you must create a new custom field class and update your models to\nreference it: class CustomCharField ( models . CharField ): ... class CustomTextField ( models . TextField ): ... As discussed in removing fields , you\nmust retain the original CustomCharField class as long as you have\nmigrations that reference it. Documenting your custom field ¶ As always, you should document your field type, so users will know what it is.\nIn addition to providing a docstring for it, which is useful for developers,\nyou can also allow users of the admin app to see a short description of the\nfield type via the django.contrib.admindocs application. To do this provide descriptive\ntext in a description class attribute of your custom field. In\nthe above example, the description displayed by the admindocs application\nfor a HandField will be ‘A hand of cards (bridge style)’. In the django.contrib.admindocs display, the field description is\ninterpolated with field.__dict__ which allows the description to\nincorporate arguments of the field. For example, the description for CharField is: description = _ ( \"String (up to %(max_length)s )\" ) Useful methods ¶ Once you’ve created your Field subclass, you might\nconsider overriding a few standard methods, depending on your field’s behavior.\nThe list of methods below is in approximately decreasing order of importance,\nso start from the top. Custom database types ¶ Say you’ve created a PostgreSQL custom type called mytype . You can\nsubclass Field and implement the db_type() method, like so: from django.db import models class MytypeField ( models . Field ): def db_type ( self , connection ): return \"mytype\" Once you have MytypeField , you can use it in any model, just like any other Field type: class Person ( models . Model ): name = models . CharField ( max_length = 80 ) something_else = MytypeField () If you aim to build a database-agnostic application, you should account for\ndifferences in database column types. For example, the date/time column type\nin PostgreSQL is called timestamp , while the same column in MySQL is called datetime . You can handle this in a db_type() method by\nchecking the connection.vendor attribute. Current built-in vendor names\nare: sqlite , postgresql , mysql , and oracle . For example: class MyDateField ( models . Field ): def db_type ( self , connection ): if connection . vendor == \"mysql\" : return \"datetime\" else : return \"timestamp\" The db_type() and rel_db_type() methods are called by\nDjango when the framework constructs the CREATE TABLE statements for your\napplication – that is, when you first create your tables. The methods are also\ncalled when constructing a WHERE clause that includes the model field –\nthat is, when you retrieve data using QuerySet methods like get() , filter() , and exclude() and have the model field as an argument. Some database column types accept parameters, such as CHAR(25) , where the\nparameter 25 represents the maximum column length. In cases like these,\nit’s more flexible if the parameter is specified in the model rather than being\nhard-coded in the db_type() method. For example, it wouldn’t make much\nsense to have a CharMaxlength25Field , shown here: # This is a silly example of hard-coded parameters. class CharMaxlength25Field ( models . Field ): def db_type ( self , connection ): return \"char(25)\" # In the model: class MyModel ( models . Model ): # ... my_field = CharMaxlength25Field () The better way of doing this would be to make the parameter specifiable at run\ntime – i.e., when the class is instantiated. To do that, implement Field.__init__() , like so: # This is a much more flexible example. class BetterCharField ( models . Field ): def __init__ ( self , max_length , * args , ** kwargs ): self . max_length = max_length super () . __init__ ( * args , ** kwargs ) def db_type ( self , connection ): return \"char( %s )\" % self . max_length # In the model: class MyModel ( models . Model ): # ... my_field = BetterCharField ( 25 ) Finally, if your column requires truly complex SQL setup, return None from db_type() . This will cause Django’s SQL creation code to skip\nover this field. You are then responsible for creating the column in the right\ntable in some other way, but this gives you a way to tell Django to get out of\nthe way. The rel_db_type() method is called by fields such as ForeignKey and OneToOneField that point to another field to determine their database\ncolumn data types. For example, if you have an UnsignedAutoField , you also\nneed the foreign keys that point to that field to use the same data type: # MySQL unsigned integer (range 0 to 4294967295). class UnsignedAutoField ( models . AutoField ): def db_type ( self , connection ): return \"integer UNSIGNED AUTO_INCREMENT\" def rel_db_type ( self , connection ): return \"integer UNSIGNED\" Converting values to Python objects ¶ If your custom Field class deals with data structures that are more\ncomplex than strings, dates, integers, or floats, then you may need to override from_db_value() and to_python() . If present for the field subclass, from_db_value() will be called in all\ncircumstances when the data is loaded from the database, including in\naggregates and values() calls. to_python() is called by deserialization and during the clean() method used from forms. As a general rule, to_python() should deal gracefully with any of the\nfollowing arguments: An instance of the correct type (e.g., Hand in our ongoing example). A string None (if the field allows null=True ) In our HandField class, we’re storing the data as a VARCHAR field in\nthe database, so we need to be able to process strings and None in the from_db_value() . In to_python() , we need to also handle Hand instances: import re from django.core.exceptions import ValidationError from django.db import models from django.utils.translation import gettext_lazy as _ def parse_hand ( hand_string ): \"\"\"Takes a string of cards and splits into a full hand.\"\"\" p1 = re . compile ( \". {26} \" ) p2 = re . compile ( \"..\" ) args = [ p2 . findall ( x ) for x in p1 . findall ( hand_string )] if len ( args ) != 4 : raise ValidationError ( _ ( \"Invalid input for a Hand instance\" )) return Hand ( * args ) class HandField ( models . Field ): # ... def from_db_value ( self , value , expression , connection ): if value is None : return value return parse_hand ( value ) def to_python ( self , value ): if isinstance ( value , Hand ): return value if value is None : return value return parse_hand ( value ) Notice that we always return a Hand instance from these methods. That’s the\nPython object type we want to store in the model’s attribute. For to_python() , if anything goes wrong during value conversion, you should\nraise a ValidationError exception. Converting Python objects to query values ¶ Since using a database requires conversion in both ways, if you override from_db_value() you also have to override get_prep_value() to convert Python objects back to query values. For example: class HandField ( models . Field ): # ... def get_prep_value ( self , value ): return \"\" . join ( [ \"\" . join ( l ) for l in ( value . north , value . east , value . south , value . west )] ) Warning If your custom field uses the CHAR , VARCHAR or TEXT types for MySQL, you must make sure that get_prep_value() always returns a string type. MySQL performs flexible and unexpected\nmatching when a query is performed on these types and the provided\nvalue is an integer, which can cause queries to include unexpected\nobjects in their results. This problem cannot occur if you always\nreturn a string type from get_prep_value() . Converting query values to database values ¶ Some data types (for example, dates) need to be in a specific format\nbefore they can be used by a database backend. get_db_prep_value() is the method where those conversions should\nbe made. The specific connection that will be used for the query is\npassed as the connection parameter. This allows you to use\nbackend-specific conversion logic if it is required. For example, Django uses the following method for its BinaryField : def get_db_prep_value ( self , value , connection , prepared = False ): value = super () . get_db_prep_value ( value , connection , prepared ) if value is not None : return connection . Database . Binary ( value ) return value In case your custom field needs a special conversion when being saved that is\nnot the same as the conversion used for normal query parameters, you can\noverride get_db_prep_save() . Preprocessing values before saving ¶ If you want to preprocess the value just before saving, you can use pre_save() . For example, Django’s DateTimeField uses this method to set the attribute\ncorrectly in the case of auto_now or auto_now_add . If you do override this method, you must return the value of the attribute at\nthe end. You should also update the model’s attribute if you make any changes\nto the value so that code holding references to the model will always see the\ncorrect value. Specifying the form field for a model field ¶ To customize the form field used by ModelForm , you can\noverride formfield() . The form field class can be specified via the form_class and choices_form_class arguments; the latter is used if the field has choices\nspecified, the former otherwise. If these arguments are not provided, CharField or TypedChoiceField will be used. All of the kwargs dictionary is passed directly to the form field’s __init__() method. Normally, all you need to do is set up a good default\nfor the form_class (and maybe choices_form_class ) argument and then\ndelegate further handling to the parent class. This might require you to write\na custom form field (and even a form widget). See the forms documentation for information about this. Continuing our ongoing example, we can write the formfield() method\nas: class HandField ( models . Field ): # ... def formfield ( self , ** kwargs ): # This is a fairly standard way to set up some defaults # while letting the caller override them. defaults = { \"form_class\" : MyFormField } defaults . update ( kwargs ) return super () . formfield ( ** defaults ) This assumes we’ve imported a MyFormField field class (which has its own\ndefault widget). This document doesn’t cover the details of writing custom form\nfields. Emulating built-in field types ¶ If you have created a db_type() method, you don’t need to worry about get_internal_type() – it won’t be used much. Sometimes, though, your\ndatabase storage is similar in type to some other field, so you can use that\nother field’s logic to create the right column. For example: class HandField ( models . Field ): # ... def get_internal_type ( self ): return \"CharField\" No matter which database backend we are using, this will mean that migrate and other SQL commands create the right column type for\nstoring a string. If get_internal_type() returns a string that is not known to Django for\nthe database backend you are using – that is, it doesn’t appear in django.db.backends.<db_name>.base.DatabaseWrapper.data_types – the string\nwill still be used by the serializer, but the default db_type() method will return None . See the documentation of db_type() for reasons why this might be useful. Putting a descriptive string in as the\ntype of the field for the serializer is a useful idea if you’re ever going to\nbe using the serializer output in some other place, outside of Django. Converting field data for serialization ¶ To customize how the values are serialized by a serializer, you can override value_to_string() . Using value_from_object() is the\nbest way to get the field’s value prior to serialization. For example, since HandField uses strings for its data storage anyway, we can reuse some\nexisting conversion code: class HandField ( models . Field ): # ... def value_to_string ( self , obj ): value = self . value_from_object ( obj ) return self . get_prep_value ( value ) Some general advice ¶ Writing a custom field can be a tricky process, particularly if you’re doing\ncomplex conversions between your Python types and your database and\nserialization formats. Here are a couple of tips to make things go more\nsmoothly: Look at the existing Django fields (in django/db/models/fields/__init__.py ) for inspiration. Try to find\na field that’s similar to what you want and extend it a little bit,\ninstead of creating an entirely new field from scratch. Put a __str__() method on the class you’re wrapping up as a field. There\nare a lot of places where the default behavior of the field code is to call str() on the value. (In our examples in this document, value would\nbe a Hand instance, not a HandField ). So if your __str__() method automatically converts to the string form of your Python object, you\ncan save yourself a lot of work. Writing a FileField subclass ¶ In addition to the above methods, fields that deal with files have a few other\nspecial requirements which must be taken into account. The majority of the\nmechanics provided by FileField , such as controlling database storage and\nretrieval, can remain unchanged, leaving subclasses to deal with the challenge\nof supporting a particular type of file. Django provides a File class, which is used as a proxy to the file’s\ncontents and operations. This can be subclassed to customize how the file is\naccessed, and what methods are available. It lives at django.db.models.fields.files , and its default behavior is explained in the file documentation . Once a subclass of File is created, the new FileField subclass must be\ntold to use it. To do so, assign the new File subclass to the special attr_class attribute of the FileField subclass. A few suggestions ¶ In addition to the above details, there are a few guidelines which can greatly\nimprove the efficiency and readability of the field’s code. The source for Django’s own ImageField (in django/db/models/fields/files.py ) is a great example of how to\nsubclass FileField to support a particular type of file, as it\nincorporates all of the techniques described above. Cache file attributes wherever possible. Since files may be stored in\nremote storage systems, retrieving them may cost extra time, or even\nmoney, that isn’t always necessary. Once a file is retrieved to obtain\nsome data about its content, cache as much of that data as possible to\nreduce the number of times the file must be retrieved on subsequent\ncalls for that information.", "keywords": ["django.core.exceptions", "column", "work", "l", "comma", "new_hand", "type", "majority", "suits", "def", "place", "serializers", "non_db_attrs", "classes", "null", "method", "imagefield", "form_class", "person", "use", "ways", "items", "advice", "way", "customtextfield", "default", "option", "op", "techniques", "bettercharfield", "gettext_lazy", "attention", "requirements", "need", "django.db.models.fields.files", "east", "top", "isinstance", "mind", "field.__init", "users", "char", "connection.vendor", "backend", "self", "people", "circumstances", "argument", "@property", "version", "tuple", "integer", "parse_hand", "dict", "meta", "x", "tablespaces", "name", "deals", "typedchoicefield", "python", "supports", "charfield", "addition", "instances", "field.non_db_attrs", "constructor", "formats", "myfield", "subclass", "migration", "storage", "rule", "display", "true", "*", "framework", "field.__dict", "importance", "charmaxlength25field", "my_field_instance", "modelform", "logic", "forms", "length", "deconstruct", "parameters", "rel", "counterpoint", "django.db.backends.<db_name>.base", "state", "dictionary", "explanation", "structures", "characters", "error", "differences", "cache", "control", "migrations", "datetime", "systems", "%", "order", "documentation", "style", "creation", "attr_class", "sense", "application", "migrate", "table", "behavior", "auto_increment", "str", "files", "query", "machinery", "import", "databasewrapper.data_types", "datefield", "information", "#", "idea", "mytype", "¶", "init", "pre_save", "definition", "binaryfield", "couple", "db_tablespace", "change", "choices_form_class", "auto_now", "format", "example", "django.db.models", "kwarg", "unit", "value", "compile", "challenge", "db_type", "source", "print", "position", "introduction", "money", "create", "tips", "examples", "get_prep_value", "django.db", "things", "details", "proxy", "mytypefield", "setup", "deserialization", "form", "object", "postgresql", "attributes", "efficiency", "help_text", "vendor", "retrieval", "parent", "conversion", "to_python", "matter", "dates", "django", "admindocs", "caller", "parameter", "new_instance", "lot", "text", "field", "contents", "strings", "unsignedautofield", "superclass", "=", "objects", "defaults", "verbose_name", "lists", "index", "connection", "run", "mysql", "statements", "range", "thought", "obj", "):", "total", "serialization", "trick", "places", "players", "sets", "time", "card", "exception", "west", "oracle", "queryset", "args", "commands", "pieces", "north", "unique_for_month", "some_attribute", "problem", "subclasses", "meaning", "django.utils.translation", "output", "fields", "south", "custom", "methods", "side", "keyword", "bridge", "none", "join", "customcharfield", "base", "process", ">", "implements", "p2", "mymodel", "content", "end", "inheritance", "advantage", "tables", "mechanics", "findall", "data", "widget", "matching", "lookups", "options", "references", "readability", "reasons", "description", "kwargs", "keys", "configuration", "sql", "author", "path", "arguments", "deal", "floats", "mydatefield", "db", "models", "detail", "hand_string", "get_internal_type", "varchar", "polygons", "max_length)s", "onetoonefield", "char(25", "support", "types", "background", "changes", "filter", "value_from_object", "filefield", "docstring", "serialize", "_", "tests", "hand", "integers", "values", "cases", "times", "super", "inspiration", "conversions", "guidelines", "compatibility", "len", "from_db_value", "alterfield", "input", "handfield", "value_to_string", "model", "max_length", "suggestions", "character", "validationerror", "serializer", "purposes", "results", "p1", "calls", "n’t", "theory", "unsigned", "sqlite", "years", "fields/__init__.py", "my_field", "cards", "case", "scratch", "class", "number", "choices", "return", "columns", "attribute", "developers", "string", "list", "bit", "deconstruction", "app", "django.contrib.admindocs", "commasepfield", "formfield", "datetimefield", "user", "myformfield", "unique_for_year", "file", "queries", "operations", "notice", "get", "account", "while", "names", "rel_db_type", "clause", "aggregates", "separator", "scope", "document", "date", "autofield", "textfield", "foreignkey", "database", "databases", "get_db_prep_value", "expression", "db_index", "reference", "instance", "code", "primary_key", "del", "timestamp"], "type": "documentation"},
{"title": "How to integrate Django with a legacy database", "url": "https://docs.djangoproject.com/en/5.1/howto/legacy-databases/", "content": "How to integrate Django with a legacy database ¶ While Django is best suited for developing new applications, it’s quite\npossible to integrate it into legacy databases. Django includes a couple of\nutilities to automate as much of this process as possible. This document assumes you know the Django basics, as covered in the tutorial . Once you’ve got Django set up, you’ll follow this general process to integrate\nwith an existing database. Give Django your database parameters ¶ You’ll need to tell Django what your database connection parameters are, and\nwhat the name of the database is. Do that by editing the DATABASES setting and assigning values to the following keys for the 'default' connection: NAME ENGINE USER PASSWORD HOST PORT Auto-generate the models ¶ Django comes with a utility called inspectdb that can create models\nby introspecting an existing database. You can view the output by running this\ncommand: $ python manage.py inspectdb Save this as a file by using standard Unix output redirection: $ python manage.py inspectdb > models.py This feature is meant as a shortcut, not as definitive model generation. See the documentation of inspectdb for more information. Once you’ve cleaned up your models, name the file models.py and put it in\nthe Python package that holds your app. Then add the app to your INSTALLED_APPS setting. By default, inspectdb creates unmanaged models. That is, managed = False in the model’s Meta class tells Django not to manage\neach table’s creation, modification, and deletion: class Person ( models . Model ): id = models . IntegerField ( primary_key = True ) first_name = models . CharField ( max_length = 70 ) class Meta : managed = False db_table = \"CENSUS_PERSONS\" If you do want to allow Django to manage the table’s lifecycle, you’ll need to\nchange the managed option above to True (or remove it because True is its default value). Install the core Django tables ¶ Next, run the migrate command to install any extra needed database\nrecords such as admin permissions and content types: $ python manage.py migrate Test and tweak ¶ Those are the basic steps – from here you’ll want to tweak the models Django\ngenerated until they work the way you’d like. Try accessing your data via the\nDjango database API, and try editing objects via Django’s admin site, and edit\nthe models file accordingly.", "keywords": ["lifecycle", "utility", "unix", "shortcut", "connection", "class", "permissions", "information", "keys", "applications", "api", "auto", "host", "deletion", "next", "output", "test", "way", "django", "¶", "engine", "default", "modification", "types", "option", "true", "document", "meta", "inspectdb", "documentation", "creation", "couple", "steps", "legacy", "tutorial", "model", "database", "integerfield", "app", "max_length", "data", "databases", "package", "name", "process", "i", "core", "records", "port", "user", "table", "utilities", "command", "redirection", "models", "feature", "file", "primary_key", "migrate", "person", "first_name", "objects", "admin", "parameters", "values", "site", "value", "installed_apps", "d", "python", "basics", "charfield", "content", "generation"], "type": "documentation"},
{"title": "How to provide initial data for models", "url": "https://docs.djangoproject.com/en/5.1/howto/initial-data/", "content": "How to provide initial data for models ¶ It’s sometimes useful to prepopulate your database with hard-coded data when\nyou’re first setting up an app. You can provide initial data with migrations or\nfixtures. Provide initial data with migrations ¶ To automatically load initial data for an app, create a data migration . Migrations are run when setting up the\ntest database, so the data will be available there, subject to some\nlimitations . Provide data with fixtures ¶ You can also provide data using fixtures ,\nhowever, this data isn’t loaded automatically, except if you use TransactionTestCase.fixtures . A fixture is a collection of data that Django knows how to import into a\ndatabase. The most straightforward way of creating a fixture if you’ve already\ngot some data is to use the manage.py dumpdata command.\nOr, you can write fixtures by hand; fixtures can be written as JSON, XML or YAML\n(with PyYAML installed) documents. The serialization documentation has more details about each of these supported serialization formats . As an example, though, here’s what a fixture for a Person model might look\nlike in JSON: [ { \"model\" : \"myapp.person\" , \"pk\" : 1 , \"fields\" : { \"first_name\" : \"John\" , \"last_name\" : \"Lennon\" } }, { \"model\" : \"myapp.person\" , \"pk\" : 2 , \"fields\" : { \"first_name\" : \"Paul\" , \"last_name\" : \"McCartney\" } } ] And here’s that same fixture as YAML: - model : myapp.person pk : 1 fields : first_name : John last_name : Lennon - model : myapp.person pk : 2 fields : first_name : Paul last_name : McCartney You’ll store this data in a fixtures directory inside your app. You can load data by calling manage.py loaddata <fixturename> , where <fixturename> is the name of the fixture file\nyou’ve created. Each time you run loaddata , the data will be read\nfrom the fixture and reloaded into the database. Note this means that if you\nchange one of the rows created by a fixture and then run loaddata again, you’ll wipe out any changes you’ve made. Tell Django where to look for fixture files ¶ By default, Django looks for fixtures in the fixtures directory inside each\napp, so the command loaddata sample will find the file my_app/fixtures/sample.json . This works with relative paths as well, so loaddata my_app/sample will find the file my_app/fixtures/my_app/sample.json . Django also looks for fixtures in the list of directories provided in the FIXTURE_DIRS setting. To completely prevent default search from happening, use an absolute path to\nspecify the location of your fixture file, e.g. loaddata /path/to/sample . Namespace your fixture files Django will use the first fixture file it finds whose name matches, so if\nyou have fixture files with the same name in different applications, you\nwill be unable to distinguish between them in your loaddata commands.\nThe easiest way to avoid this problem is by namespacing your fixture\nfiles. That is, by putting them inside a directory named for their\napplication, as in the relative path example above. See also Fixtures are also used by the testing framework to help set up a consistent test environment.", "keywords": ["mccartney", "matches", "problem", "formats", "fixtures", "dumpdata", "xml", "pyyaml", "sample", "json", "paths", "applications", "john", "migration", "paul", "test", "transactiontestcase.fixtures", "way", "django", "fields", "limitations", "path", "migrations", "¶", "directory", "default", "rows", "setting", "serialization", "changes", "documentation", "list", "framework", "details", "location", "myapp.person", "fixture", "last_name", "data", "model", "pk", "database", "yaml", "app", "documents", "time", "fixture_dirs", "search", "application", "name", "fixturename", "environment", "command", "models", "hand", "example", "loaddata", "file", "person", "first_name", "sample.json", "testing", "directories", "collection", "commands", "my_app", "files", "lennon"], "type": "documentation"},
{"title": "How-to guides", "url": "https://docs.djangoproject.com/en/5.1/howto/", "content": "How-to guides ¶ Practical guides covering common tasks and problems. Models, data and databases ¶ How to provide initial data for models How to integrate Django with a legacy database How to create custom model fields How to create database migrations How to write custom lookups Templates and output ¶ How to create CSV output How to create PDF files How to override templates How to implement a custom template backend How to create custom template tags and filters Project configuration and management ¶ How to manage static files (e.g. images, JavaScript, CSS) How to configure and use logging How to manage error reporting How to delete a Django application Installing, deploying and upgrading ¶ How to upgrade Django to a newer version How to install Django on Windows How to deploy Django How to deploy static files Other guides ¶ How to authenticate using REMOTE_USER How to use Django’s CSRF protection How to create custom django-admin commands How to write a custom storage class See also The Django community aggregator , where we aggregate content from the\nglobal Django community. Many writers in the aggregator write this sort of\nhow-to material.", "keywords": ["aggregator", "class", "community", "configuration", "project", "sort", "material", "version", "error", "storage", "images", "output", "fields", "pdf", "django", "template", "windows", "writers", "migrations", "filters", "installing", "tasks", "tags", "guides", "csv", "custom", "templates", "csrf", "remote_user", "problems", "protection", "data", "legacy", "model", "database", "application", "management", "databases", "lookups", "models", "javascript", "admin", "files", "css", "content", "backend"], "type": "documentation"},
{"title": "Asynchronous support", "url": "https://docs.djangoproject.com/en/5.1/topics/async/", "content": "Asynchronous support ¶ Django has support for writing asynchronous (“async”) views, along with an\nentirely async-enabled request stack if you are running under ASGI . Async views will still work under\nWSGI, but with performance penalties, and without the ability to have efficient\nlong-running requests. We’re still working on async support for the ORM and other parts of Django.\nYou can expect to see this in future releases. For now, you can use the sync_to_async() adapter to interact with the sync parts of Django.\nThere is also a whole range of async-native Python libraries that you can\nintegrate with. Async views ¶ Any view can be declared async by making the callable part of it return a\ncoroutine - commonly, this is done using async def . For a function-based\nview, this means declaring the whole view using async def . For a\nclass-based view, this means declaring the HTTP method handlers, such as get() and post() as async def (not its __init__() , or as_view() ). Note Django uses asgiref.sync.iscoroutinefunction to test if your view is\nasynchronous or not. If you implement your own method of returning a\ncoroutine, ensure you use asgiref.sync.markcoroutinefunction so this\nfunction returns True . Under a WSGI server, async views will run in their own, one-off event loop.\nThis means you can use async features, like concurrent async HTTP requests,\nwithout any issues, but you will not get the benefits of an async stack. The main benefits are the ability to service hundreds of connections without\nusing Python threads. This allows you to use slow streaming, long-polling, and\nother exciting response types. If you want to use these, you will need to deploy Django using ASGI instead. Warning You will only get the benefits of a fully-asynchronous request stack if you\nhave no synchronous middleware loaded into your site. If there is a piece\nof synchronous middleware, then Django must use a thread per request to\nsafely emulate a synchronous environment for it. Middleware can be built to support both sync and async contexts. Some of Django’s middleware is built like\nthis, but not all. To see what middleware Django has to adapt for, you can\nturn on debug logging for the django.request logger and look for log\nmessages about “Asynchronous handler adapted for middleware …” . In both ASGI and WSGI mode, you can still safely use asynchronous support to\nrun code concurrently rather than serially. This is especially handy when\ndealing with external APIs or data stores. If you want to call a part of Django that is still synchronous, you will need\nto wrap it in a sync_to_async() call. For example: from asgiref.sync import sync_to_async results = await sync_to_async ( sync_function , thread_sensitive = True )( pk = 123 ) If you accidentally try to call a part of Django that is synchronous-only\nfrom an async view, you will trigger Django’s asynchronous safety protection to protect your data from\ncorruption. Decorators ¶ New in Django 5.0. The following decorators can be used with both synchronous and asynchronous\nview functions: cache_control() never_cache() no_append_slash() csrf_exempt() csrf_protect() ensure_csrf_cookie() requires_csrf_token() sensitive_variables() sensitive_post_parameters() gzip_page() condition() conditional_page() etag() last_modified() require_http_methods() require_GET() require_POST() require_safe() vary_on_cookie() vary_on_headers() xframe_options_deny() xframe_options_sameorigin() xframe_options_exempt() For example: from django.views.decorators.cache import never_cache @never_cache def my_sync_view ( request ): ... @never_cache async def my_async_view ( request ): ... Queries & the ORM ¶ With some exceptions, Django can run ORM queries asynchronously as well: async for author in Author . objects . filter ( name__startswith = \"A\" ): book = await author . books . afirst () Detailed notes can be found in Asynchronous queries , but in short: All QuerySet methods that cause an SQL query to occur have an a -prefixed asynchronous variant. async for is supported on all QuerySets (including the output of values() and values_list() .) Django also supports some asynchronous model methods that use the database: async def make_book ( * args , ** kwargs ): book = Book ( ... ) await book . asave ( using = \"secondary\" ) async def make_book_with_tags ( tags , * args , ** kwargs ): book = await Book . objects . acreate ( ... ) await book . tags . aset ( tags ) Transactions do not yet work in async mode. If you have a piece of code that\nneeds transactions behavior, we recommend you write that piece as a single\nsynchronous function and call it using sync_to_async() . Performance ¶ When running in a mode that does not match the view (e.g. an async view under\nWSGI, or a traditional sync view under ASGI), Django must emulate the other\ncall style to allow your code to run. This context-switch causes a small\nperformance penalty of around a millisecond. This is also true of middleware. Django will attempt to minimize the number of\ncontext-switches between sync and async. If you have an ASGI server, but all\nyour middleware and views are synchronous, it will switch just once, before it\nenters the middleware stack. However, if you put synchronous middleware between an ASGI server and an\nasynchronous view, it will have to switch into sync mode for the middleware and\nthen back to async mode for the view. Django will also hold the sync thread\nopen for middleware exception propagation. This may not be noticeable at first,\nbut adding this penalty of one thread per request can remove any async\nperformance advantage. You should do your own performance testing to see what effect ASGI versus WSGI\nhas on your code. In some cases, there may be a performance increase even for\na purely synchronous codebase under ASGI because the request-handling code is\nstill all running asynchronously. In general you will only want to enable ASGI\nmode if you have asynchronous code in your project. Handling disconnects ¶ New in Django 5.0. For long-lived requests, a client may disconnect before the view returns a\nresponse. In this case, an asyncio.CancelledError will be raised in the\nview. You can catch this error and handle it if you need to perform any\ncleanup: async def my_view ( request ): try : # Do some work ... except asyncio . CancelledError : # Handle disconnect raise You can also handle client disconnects in streaming responses . Async safety ¶ DJANGO_ALLOW_ASYNC_UNSAFE ¶ Certain key parts of Django are not able to operate safely in an async\nenvironment, as they have global state that is not coroutine-aware. These parts\nof Django are classified as “async-unsafe”, and are protected from execution in\nan async environment. The ORM is the main example, but there are other parts\nthat are also protected in this way. If you try to run any of these parts from a thread where there is a running\nevent loop , you will get a SynchronousOnlyOperation error. Note that you\ndon’t have to be inside an async function directly to have this error occur. If\nyou have called a sync function directly from an async function,\nwithout using sync_to_async() or similar, then it can also occur. This is\nbecause your code is still running in a thread with an active event loop, even\nthough it may not be declared as async code. If you encounter this error, you should fix your code to not call the offending\ncode from an async context. Instead, write your code that talks to async-unsafe\nfunctions in its own, sync function, and call that using asgiref.sync.sync_to_async() (or any other way of running sync code in\nits own thread). The async context can be imposed upon you by the environment in which you are\nrunning your Django code. For example, Jupyter notebooks and IPython interactive shells both transparently provide an active event loop so that it is\neasier to interact with asynchronous APIs. If you’re using an IPython shell, you can disable this event loop by running: %autoawait off as a command at the IPython prompt. This will allow you to run synchronous code\nwithout generating SynchronousOnlyOperation errors; however, you also won’t be able to await asynchronous APIs. To turn\nthe event loop back on, run: %autoawait on If you’re in an environment other than IPython (or you can’t turn off autoawait in IPython for some reason), you are certain there is no chance\nof your code being run concurrently, and you absolutely need to run your sync\ncode from an async context, then you can disable the warning by setting the DJANGO_ALLOW_ASYNC_UNSAFE environment variable to any value. Warning If you enable this option and there is concurrent access to the\nasync-unsafe parts of Django, you may suffer data loss or corruption. Be\nvery careful and do not use this in production environments. If you need to do this from within Python, do that with os.environ : import os os . environ [ \"DJANGO_ALLOW_ASYNC_UNSAFE\" ] = \"true\" Async adapter functions ¶ It is necessary to adapt the calling style when calling sync code from an async\ncontext, or vice-versa. For this there are two adapter functions, from the asgiref.sync module: async_to_sync() and sync_to_async() . They\nare used to transition between the calling styles while preserving\ncompatibility. These adapter functions are widely used in Django. The asgiref package\nitself is part of the Django project, and it is automatically installed as a\ndependency when you install Django with pip . async_to_sync() ¶ async_to_sync ( async_function , force_new_loop = False ) ¶ Takes an async function and returns a sync function that wraps it. Can be used\nas either a direct wrapper or a decorator: from asgiref.sync import async_to_sync async def get_data (): ... sync_get_data = async_to_sync ( get_data ) @async_to_sync async def get_other_data (): ... The async function is run in the event loop for the current thread, if one is\npresent. If there is no current event loop, a new event loop is spun up\nspecifically for the single async invocation and shut down again once it\ncompletes. In either situation, the async function will execute on a different\nthread to the calling code. Threadlocals and contextvars values are preserved across the boundary in both\ndirections. async_to_sync() is essentially a more powerful version of the asyncio.run() function in Python’s standard library. As well\nas ensuring threadlocals work, it also enables the thread_sensitive mode of sync_to_async() when that wrapper is used below it. sync_to_async() ¶ sync_to_async ( sync_function , thread_sensitive = True ) ¶ Takes a sync function and returns an async function that wraps it. Can be used\nas either a direct wrapper or a decorator: from asgiref.sync import sync_to_async async_function = sync_to_async ( sync_function , thread_sensitive = False ) async_function = sync_to_async ( sensitive_sync_function , thread_sensitive = True ) @sync_to_async def sync_function (): ... Threadlocals and contextvars values are preserved across the boundary in both\ndirections. Sync functions tend to be written assuming they all run in the main\nthread, so sync_to_async() has two threading modes: thread_sensitive=True (the default): the sync function will run in the\nsame thread as all other thread_sensitive functions. This will be the\nmain thread, if the main thread is synchronous and you are using the async_to_sync() wrapper. thread_sensitive=False : the sync function will run in a brand new thread\nwhich is then closed once the invocation completes. Warning asgiref version 3.3.0 changed the default value of the thread_sensitive parameter to True . This is a safer default, and in\nmany cases interacting with Django the correct value, but be sure to\nevaluate uses of sync_to_async() if updating asgiref from a prior\nversion. Thread-sensitive mode is quite special, and does a lot of work to run all\nfunctions in the same thread. Note, though, that it relies on usage of async_to_sync() above it in the stack to correctly run things on the\nmain thread. If you use asyncio.run() or similar, it will fall back to\nrunning thread-sensitive functions in a single, shared thread, but this will\nnot be the main thread. The reason this is needed in Django is that many libraries, specifically\ndatabase adapters, require that they are accessed in the same thread that they\nwere created in. Also a lot of existing Django code assumes it all runs in the\nsame thread, e.g. middleware adding things to a request for later use in views. Rather than introduce potential compatibility issues with this code, we instead\nopted to add this mode so that all existing Django sync code runs in the same\nthread and thus is fully compatible with async mode. Note that sync code will\nalways be in a different thread to any async code that is calling it, so you\nshould avoid passing raw database handles or other thread-sensitive references\naround. In practice this restriction means that you should not pass features of the\ndatabase connection object when calling sync_to_async() . Doing so will\ntrigger the thread safety checks: # DJANGO_SETTINGS_MODULE=settings.py python -m asyncio >>> import asyncio >>> from asgiref.sync import sync_to_async >>> from django.db import connection >>> # In an async context so you cannot use the database directly: >>> connection . cursor () django.core.exceptions.SynchronousOnlyOperation: You cannot call this from an async context - use a thread or sync_to_async. >>> # Nor can you pass resolved connection attributes across threads: >>> await sync_to_async ( connection . cursor )() django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 4371465600 and this is thread id 6131478528. Rather, you should encapsulate all database access within a helper function\nthat can be called with sync_to_async() without relying on the connection\nobject in the calling code.", "keywords": ["state", "sensitive_sync_function", "log", "django.core.exceptions", "connection", "wrapper", "await", "transactions", "asyncio", "work", "restriction", "error", "range", "boundary", "logger", "debug", "querysets", "support", "xframe_options_sameorigin", "handles", "types", "gzip_page", "book", "increase", "directions", "notebooks", "make_book_with_tags", "threading", "def", "filter", "stack", "style", "pk", "reason", "false", "exception", "django_settings_module", "middleware", "method", "shell", "queryset", "@sync_to_async", "variant", "args", "testing", "behavior", "dependency", "values", "get_other_data", "site", "xframe_options_deny", "performance", "mode", "responses", "sync_get_data", "query", "cases", "d", "use", "corruption", "views", "messages", "import", "new", "releases", "penalties", "millisecond", "condition", "project", "async", "require_post", "#", "cursor", "safety", "compatibility", "apis", "output", "handle", "way", "disconnect", "asgiref", "¶", "async_function", "default", "init", "option", "helper", "piece", "decorator", "cache_control", "asgiref.sync.iscoroutinefunction", "stores", "cleanup", "books", "penalty", "async_to_sync", "methods", "client", "require_http_methods", "force_new_loop", "usage", "model", "server", "environ", "etag", "loop", "hundreds", "no_append_slash", "switches", "vary_on_cookie", "package", "threadlocals", "access", "requires_csrf_token", "results", "command", "example", "vice", "sync_function", "checks", "pip", "event", "@async_to_sync", "functions", "value", "production", "handlers", "case", "class", "occur", "number", "sensitive_post_parameters", "request", "version", "get_data", "values_list", "advantage", "asgiref.sync.sync_to_async", "benefits", "databaseerror", "connections", "environments", "function", "things", "csrf_protect", "never_cache", "protection", "styles", "a", "disconnects", "data", "vary_on_headers", "view", "uses", "parts", "jupyter", "my_view", "ipython", "object", "cancellederror", "i", "environment", "contextvars", "warning", "part", "django_allow_async_unsafe", "queries", "library", "asgiref.sync", "conditional_page", "transition", "notes", "attributes", "references", "adapter", "databasewrapper", "propagation", "errors", "threads", "python", "sync", "invocation", "get", "response", "shells", "handler", "synchronousonlyoperation", "execution", "kwargs", "exceptions", "switch", "sql", "note", "orm", "prompt", "make_book", "chance", "brand", "author", "post", "xframe_options_exempt", "my_sync_view", "os.environ", "django", "coroutine", "thread", "adapters", "parameter", "true", "tags", "asgi", "*", "lot", "require_safe", "module", "practice", "polling", "loss", "requests", "django.views.decorators.cache", "http", "database", "asgiref.sync.markcoroutinefunction", "decorators", "context", "libraries", "codebase", "effect", "features", "code", "=", "sync_to_async", "modes", "objects", "wsgi", "situation", "alias", "issues", "call", "streaming", "ability", "sensitive_variables"], "type": "documentation"},
{"title": "External packages", "url": "https://docs.djangoproject.com/en/5.1/topics/external-packages/", "content": "External packages ¶ Django ships with a variety of extra, optional tools that solve common\nproblems ( contrib.* ). For easier maintenance and to trim the size of the\ncodebase, a few of those applications have been moved out to separate projects. Localflavor ¶ django-localflavor is a collection of utilities for particular countries\nand cultures. GitHub Documentation PyPI Comments ¶ django-contrib-comments can be used to attach comments to any model, so you\ncan use it for comments on blog entries, photos, book chapters, or anything\nelse. Most users will be better served with a custom solution, or a hosted\nproduct like Disqus. GitHub Documentation PyPI Formtools ¶ django-formtools is a collection of assorted utilities to work with forms. GitHub Documentation PyPI", "keywords": ["disqus", "countries", "comments", "applications", "github", "blog", "variety", "projects", "django", "maintenance", "tools", "¶", "book", "cultures", "custom", "documentation", "-", "problems", "packages", "entries", "model", "product", "ships", "contrib", "formtools", "codebase", "forms", "utilities", "photos", "chapters", "users", "size", "collection", "solution", "pypi", "localflavor"], "type": "documentation"},
{"title": "System check framework", "url": "https://docs.djangoproject.com/en/5.1/topics/checks/", "content": "System check framework ¶ The system check framework is a set of static checks for validating Django\nprojects. It detects common problems and provides hints for how to fix them.\nThe framework is extensible so you can easily add your own checks. Checks can be triggered explicitly via the check command. Checks are\ntriggered implicitly before most commands, including runserver and migrate . For performance reasons, checks are not run as part of the\nWSGI stack that is used in deployment. If you need to run system checks on your\ndeployment server, trigger them explicitly using check . Serious errors will prevent Django commands (such as runserver ) from\nrunning at all. Minor problems are reported to the console. If you have inspected\nthe cause of a warning and are happy to ignore it, you can hide specific warnings\nusing the SILENCED_SYSTEM_CHECKS setting in your project settings file. A full list of all checks that can be raised by Django can be found in the System check reference . Writing your own checks ¶ The framework is flexible and allows you to write functions that perform\nany other kind of check you may require. The following is an example stub\ncheck function: from django.core.checks import Error , register @register () def example_check ( app_configs , ** kwargs ): errors = [] # ... your check logic here if check_failed : errors . append ( Error ( \"an error\" , hint = \"A hint.\" , obj = checked_object , id = \"myapp.E001\" , ) ) return errors The check function must accept an app_configs argument; this argument is\nthe list of applications that should be inspected. If None , the check must\nbe run on all installed apps in the project. The check will receive a databases keyword argument. This is a list of\ndatabase aliases whose connections may be used to inspect database level\nconfiguration. If databases is None , the check must not use any\ndatabase connections. The **kwargs argument is required for future expansion. Messages ¶ The function must return a list of messages. If no problems are found as a result\nof the check, the check function must return an empty list. The warnings and errors raised by the check method must be instances of CheckMessage . An instance of CheckMessage encapsulates a single reportable\nerror or warning. It also provides context and hints applicable to the\nmessage, and a unique identifier that is used for filtering purposes. The concept is very similar to messages from the message framework or the logging framework .\nMessages are tagged with a level indicating the severity of the message. There are also shortcuts to make creating messages with common levels easier.\nWhen using these classes you can omit the level argument because it is\nimplied by the class name. Debug Info Warning Error Critical Registering and labeling checks ¶ Lastly, your check function must be registered explicitly with system check\nregistry. Checks should be registered in a file that’s loaded when your\napplication is loaded; for example, in the AppConfig.ready() method. register ( *tags)(function ) ¶ You can pass as many tags to register as you want in order to label your\ncheck. Tagging checks is useful since it allows you to run only a certain\ngroup of checks. For example, to register a compatibility check, you would\nmake the following call: from django.core.checks import register , Tags @register ( Tags . compatibility ) def my_check ( app_configs , ** kwargs ): # ... perform compatibility checks and collect errors return errors You can register “deployment checks” that are only relevant to a production\nsettings file like this: @register ( Tags . security , deploy = True ) def my_check ( app_configs , ** kwargs ): ... These checks will only be run if the check --deploy option is used. You can also use register as a function rather than a decorator by\npassing a callable object (usually a function) as the first argument\nto register . The code below is equivalent to the code above: def my_check ( app_configs , ** kwargs ): ... register ( my_check , Tags . security , deploy = True ) Field, model, manager, template engine, and database checks ¶ In some cases, you won’t need to register your check function – you can\npiggyback on an existing registration. Fields, models, model managers, template engines, and database backends all\nimplement a check() method that is already registered with the check\nframework. If you want to add extra checks, you can extend the implementation\non the base class, perform any extra checks you need, and append any messages\nto those generated by the base class. It’s recommended that you delegate each\ncheck to separate methods. Consider an example where you are implementing a custom field named RangedIntegerField . This field adds min and max arguments to the\nconstructor of IntegerField . You may want to add a check to ensure that users\nprovide a min value that is less than or equal to the max value. The following\ncode snippet shows how you can implement this check: from django.core import checks from django.db import models class RangedIntegerField ( models . IntegerField ): def __init__ ( self , min = None , max = None , ** kwargs ): super () . __init__ ( ** kwargs ) self . min = min self . max = max def check ( self , ** kwargs ): # Call the superclass errors = super () . check ( ** kwargs ) # Do some custom checks and add messages to `errors`: errors . extend ( self . _check_min_max_values ( ** kwargs )) # Return all errors and warnings return errors def _check_min_max_values ( self , ** kwargs ): if self . min is not None and self . max is not None and self . min > self . max : return [ checks . Error ( \"min greater than max.\" , hint = \"Decrease min or increase max.\" , obj = self , id = \"myapp.E001\" , ) ] # When no error, return an empty list return [] If you wanted to add checks to a model manager, you would take the same\napproach on your subclass of Manager . If you want to add a check to a model class, the approach is almost the same:\nthe only difference is that the check is a classmethod, not an instance method: class MyModel ( models . Model ): @classmethod def check ( cls , ** kwargs ): errors = super () . check ( ** kwargs ) # ... your own checks ... return errors Changed in Django 5.1: In older versions, template engines didn’t implement a check() method. Writing tests ¶ Messages are comparable. That allows you to easily write tests: from django.core.checks import Error errors = checked_object . check () expected_errors = [ Error ( \"an error\" , hint = \"A hint.\" , obj = checked_object , id = \"myapp.E001\" , ) ] self . assertEqual ( errors , expected_errors ) Writing integration tests ¶ Given the need to register certain checks when the application loads, it can be\nuseful to test their integration within the system checks framework. This can\nbe accomplished by using the call_command() function. For example, this test demonstrates that the SITE_ID setting must be\nan integer, a built-in check from the sites framework : from django.core.management import call_command from django.core.management.base import SystemCheckError from django.test import SimpleTestCase , modify_settings , override_settings class SystemCheckIntegrationTest ( SimpleTestCase ): @override_settings ( SITE_ID = \"non_integer\" ) @modify_settings ( INSTALLED_APPS = { \"prepend\" : \"django.contrib.sites\" }) def test_non_integer_site_id ( self ): message = \"(sites.E101) The SITE_ID setting must be an integer.\" with self . assertRaisesMessage ( SystemCheckError , message ): call_command ( \"check\" ) Consider the following check which issues a warning on deployment if a custom\nsetting named ENABLE_ANALYTICS is not set to True : from django.conf import settings from django.core.checks import Warning , register @register ( \"myapp\" , deploy = True ) def check_enable_analytics_is_true_on_deploy ( app_configs , ** kwargs ): errors = [] if getattr ( settings , \"ENABLE_ANALYTICS\" , None ) is not True : errors . append ( Warning ( \"The ENABLE_ANALYTICS setting should be set to True in deployment.\" , id = \"myapp.W001\" , ) ) return errors Given that this check will not raise a SystemCheckError , the presence of\nthe warning message in the stderr output can be asserted like so: from io import StringIO from django.core.management import call_command from django.test import SimpleTestCase , override_settings class EnableAnalyticsDeploymentCheckTest ( SimpleTestCase ): @override_settings ( ENABLE_ANALYTICS = None ) def test_when_set_to_none ( self ): stderr = StringIO () call_command ( \"check\" , \"-t\" , \"myapp\" , \"--deploy\" , stderr = stderr ) message = ( \"(myapp.W001) The ENABLE_ANALYTICS setting should be set \" \"to True in deployment.\" ) self . assertIn ( message , stderr . getvalue ())", "keywords": ["getattr", "expansion", "implementation", "stub", "e101", "django.core.checks", "warnings", "error", "hints", "e001", "modify_settings", "@modify_settings", "template", "debug", "obj", "systemcheckerror", "register", "getvalue", "setting", "order", "def", "stack", "problems", "stderr", "critical", "settings", "labeling", "application", "classes", "@register", "info", "method", "migrate", "tests", "check", "system", "commands", "aliases", "concept", "performance", "d", "cases", "manager", "following", "import", "messages", "@override_settings", "registration", "super", "difference", "check_enable_analytics_is_true_on_deploy", "systemcheckintegrationtest", "project", "#", "result", "compatibility", "integration", "test", "fields", "output", "versions", "¶", "init", "option", "decorator", "custom", "call_command", "methods", "django.contrib.sites", "keyword", "need", "assertin", "model", "server", "none", "decrease", "snippet", "sites", "base", "prepend", "kind", "purposes", "command", "example", "runserver", "checks", "users", "identifier", "functions", "value", "installed_apps", "production", "mymodel", "loads", "self", "deployment", "argument", "classmethod", "class", "site_id", "applications", "check_min_max_values", "stringio", "checkmessage", "@classmethod", "return", "silenced_system_checks", "integer", "engine", "w001", "connections", "function", "list", "registering", "cause", "presence", "i", "check_failed", "name", "group", "object", "assertraisesmessage", "warning", "part", "file", "expected_errors", "errors", "app_configs", "instances", "reasons", "django.core", "myapp", "constructor", "checked_object", "kwargs", "append", "configuration", "subclass", "hint", "enableanalyticsdeploymentchecktest", "projects", "level", "severity", "django", "message", "managers", "tags", "simpletestcase", "*", "set", "max", "framework", "approach", "field", "apps", "backends", "arguments", "tags)(function", "min", "database", "integerfield", "context", "databases", "test_non_integer_site_id", "my_check", "logic", "rangedintegerfield", "reference", "instance", "security", "engines", "=", "code", "models", "console", "superclass", "io", "wsgi", "levels", "registry", "call"], "type": "documentation"},
{"title": "Signals", "url": "https://docs.djangoproject.com/en/5.1/topics/signals/", "content": "Signals ¶ Django includes a “signal dispatcher” which helps decoupled applications get\nnotified when actions occur elsewhere in the framework. In a nutshell, signals\nallow certain senders to notify a set of receivers that some action has\ntaken place. They’re especially useful when many pieces of code may be\ninterested in the same events. For example, a third-party app can register to be notified of settings\nchanges: from django.apps import AppConfig from django.core.signals import setting_changed def my_callback ( sender , ** kwargs ): print ( \"Setting changed!\" ) class MyAppConfig ( AppConfig ): ... def ready ( self ): setting_changed . connect ( my_callback ) Django’s built-in signals let user code get notified of\ncertain actions. You can also define and send your own custom signals. See Defining and sending signals below. Warning Signals give the appearance of loose coupling, but they can quickly lead to\ncode that is hard to understand, adjust and debug. Where possible you should opt for directly calling the handling code,\nrather than dispatching via a signal. Listening to signals ¶ To receive a signal, register a receiver function using the Signal.connect() method. The receiver function is called when the signal\nis sent. All of the signal’s receiver functions are called one at a time, in\nthe order they were registered. Signal. connect ( receiver , sender = None , weak = True , dispatch_uid = None ) [source] ¶ Parameters : receiver – The callback function which will be connected to this\nsignal. See Receiver functions for more information. sender – Specifies a particular sender to receive signals from. See Connecting to signals sent by specific senders for more information. weak – Django stores signal handlers as weak references by\ndefault. Thus, if your receiver is a local function, it may be\ngarbage collected. To prevent this, pass weak=False when you call\nthe signal’s connect() method. dispatch_uid – A unique identifier for a signal receiver in cases\nwhere duplicate signals may be sent. See Preventing duplicate signals for more information. Let’s see how this works by registering a signal that\ngets called after each HTTP request is finished. We’ll be connecting to the request_finished signal. Receiver functions ¶ First, we need to define a receiver function. A receiver can be any Python\nfunction or method: def my_callback ( sender , ** kwargs ): print ( \"Request finished!\" ) Notice that the function takes a sender argument, along with wildcard\nkeyword arguments ( **kwargs ); all signal handlers must take these arguments. We’ll look at senders a bit later , but\nright now look at the **kwargs argument. All signals send keyword\narguments, and may change those keyword arguments at any time. In the case of request_finished , it’s documented as sending no\narguments, which means we might be tempted to write our signal handling as my_callback(sender) . This would be wrong – in fact, Django will throw an error if you do so. That’s\nbecause at any point arguments could get added to the signal and your receiver\nmust be able to handle those new arguments. Receivers may also be asynchronous functions, with the same signature but\ndeclared using async def : async def my_callback ( sender , ** kwargs ): await asyncio . sleep ( 5 ) print ( \"Request finished!\" ) Signals can be sent either synchronously or asynchronously, and receivers will\nautomatically be adapted to the correct call-style. See sending signals for more information. Changed in Django 5.0: Support for asynchronous receivers was added. Connecting receiver functions ¶ There are two ways you can connect a receiver to a signal. You can take the\nmanual connect route: from django.core.signals import request_finished request_finished . connect ( my_callback ) Alternatively, you can use a receiver() decorator: receiver ( signal , ** kwargs ) [source] ¶ Parameters : signal – A signal or a list of signals to connect a function to. kwargs – Wildcard keyword arguments to pass to a function . Here’s how you connect with the decorator: from django.core.signals import request_finished from django.dispatch import receiver @receiver ( request_finished ) def my_callback ( sender , ** kwargs ): print ( \"Request finished!\" ) Now, our my_callback function will be called each time a request finishes. Where should this code live? Strictly speaking, signal handling and registration code can live anywhere\nyou like, although it’s recommended to avoid the application’s root module\nand its models module to minimize side-effects of importing code. In practice, signal handlers are usually defined in a signals submodule of the application they relate to. Signal receivers are\nconnected in the ready() method of your\napplication configuration class . If\nyou’re using the receiver() decorator, import the signals submodule inside ready() , this will implicitly\nconnect signal handlers: from django.apps import AppConfig from django.core.signals import request_finished class MyAppConfig ( AppConfig ): ... def ready ( self ): # Implicitly connect signal handlers decorated with @receiver. from . import signals # Explicitly connect a signal handler. request_finished . connect ( signals . my_callback ) Note The ready() method may be executed more than\nonce during testing, so you may want to guard your signals from\nduplication , especially if you’re planning\nto send them within tests. Connecting to signals sent by specific senders ¶ Some signals get sent many times, but you’ll only be interested in receiving a\ncertain subset of those signals. For example, consider the django.db.models.signals.pre_save signal sent before a model gets saved.\nMost of the time, you don’t need to know when any model gets saved – just\nwhen one specific model is saved. In these cases, you can register to receive signals sent only by particular\nsenders. In the case of django.db.models.signals.pre_save , the sender\nwill be the model class being saved, so you can indicate that you only want\nsignals sent by some model: from django.db.models.signals import pre_save from django.dispatch import receiver from myapp.models import MyModel @receiver ( pre_save , sender = MyModel ) def my_handler ( sender , ** kwargs ): ... The my_handler function will only be called when an instance of MyModel is saved. Different signals use different objects as their senders; you’ll need to consult\nthe built-in signal documentation for details of each\nparticular signal. Preventing duplicate signals ¶ In some circumstances, the code connecting receivers to signals may run\nmultiple times. This can cause your receiver function to be registered more\nthan once, and thus called as many times for a signal event. For example, the ready() method may be executed more than once\nduring testing. More generally, this occurs everywhere your project imports the\nmodule where you define the signals, because signal registration runs as many\ntimes as it is imported. If this behavior is problematic (such as when using signals to\nsend an email whenever a model is saved), pass a unique identifier as\nthe dispatch_uid argument to identify your receiver function. This\nidentifier will usually be a string, although any hashable object will\nsuffice. The end result is that your receiver function will only be\nbound to the signal once for each unique dispatch_uid value: from django.core.signals import request_finished request_finished . connect ( my_callback , dispatch_uid = \"my_unique_identifier\" ) Defining and sending signals ¶ Your applications can take advantage of the signal infrastructure and provide\nits own signals. When to use custom signals Signals are implicit function calls which make debugging harder. If the\nsender and receiver of your custom signal are both within your project,\nyou’re better off using an explicit function call. Defining signals ¶ class Signal [source] ¶ All signals are django.dispatch.Signal instances. For example: import django.dispatch pizza_done = django . dispatch . Signal () This declares a pizza_done signal. Sending signals ¶ There are two ways to send signals synchronously in Django. Signal. send ( sender , ** kwargs ) [source] ¶ Signal. send_robust ( sender , ** kwargs ) [source] ¶ Signals may also be sent asynchronously. Signal. asend ( sender , ** kwargs ) ¶ Signal. asend_robust ( sender , ** kwargs ) ¶ To send a signal, call either Signal.send() , Signal.send_robust() , await Signal.asend() , or await Signal.asend_robust() . You must provide the sender argument (which is a class most of the time) and may provide as many\nother keyword arguments as you like. For example, here’s how sending our pizza_done signal might look: class PizzaStore : ... def send_pizza ( self , toppings , size ): pizza_done . send ( sender = self . __class__ , toppings = toppings , size = size ) ... All four methods return a list of tuple pairs [(receiver, response), ...] ,\nrepresenting the list of called receiver functions and their response values. send() differs from send_robust() in how exceptions raised by receiver\nfunctions are handled. send() does not catch any exceptions raised by\nreceivers; it simply allows errors to propagate. Thus not all receivers may\nbe notified of a signal in the face of an error. send_robust() catches all errors derived from Python’s Exception class,\nand ensures all receivers are notified of the signal. If an error occurs, the\nerror instance is returned in the tuple pair for the receiver that raised the error. The tracebacks are present on the __traceback__ attribute of the errors\nreturned when calling send_robust() . asend() is similar to send() , but it is a coroutine that must be\nawaited: async def asend_pizza ( self , toppings , size ): await pizza_done . asend ( sender = self . __class__ , toppings = toppings , size = size ) ... Whether synchronous or asynchronous, receivers will be correctly adapted to\nwhether send() or asend() is used. Synchronous receivers will be\ncalled using sync_to_async() when invoked via asend() . Asynchronous\nreceivers will be called using async_to_sync() when invoked via sync() . Similar to the case for middleware ,\nthere is a small performance cost to adapting receivers in this way. Note that\nin order to reduce the number of sync/async calling-style switches within a send() or asend() call, the receivers are grouped by whether or not\nthey are async before being called. This means that an asynchronous receiver\nregistered before a synchronous receiver may be executed after the synchronous\nreceiver. In addition, async receivers are executed concurrently using asyncio.gather() . All built-in signals, except those in the async request-response cycle, are\ndispatched using Signal.send() . Changed in Django 5.0: Support for asynchronous signals was added. Disconnecting signals ¶ Signal. disconnect ( receiver = None , sender = None , dispatch_uid = None ) [source] ¶ To disconnect a receiver from a signal, call Signal.disconnect() . The\narguments are as described in Signal.connect() . The method returns True if a receiver was disconnected and False if not. When sender is passed as a lazy reference to <app label>.<model> , this method always\nreturns None . The receiver argument indicates the registered receiver to disconnect. It\nmay be None if dispatch_uid is used to identify the receiver.", "keywords": ["signal.send", "await", "asyncio", "error", "pizza_done", "debug", "my_callback", "support", "sleep", "setting", "django.db.models.signals", "handling", "order", "changes", "documentation", "signal", "def", "place", "my_handler", "style", "label>.<model", "specifies", "receivers", "settings", "pairs", "submodule", "time", "application", "exception", "dispatch", "_", "method", "party", "signal.asend", "middleware", "tests", "appearance", "testing", "behavior", "values", "performance", "pieces", "cases", "signal.send_robust", "import", "times", "registration", "ways", "information", "project", "async", "senders", "#", "my_callback(sender", "result", "point", "way", "disconnect", "¶", "signature", "default", "dispatch_uid", "wildcard", "pair", "custom", "stores", "decorator", "pre_save", "async_to_sync", "methods", "sender", "side", "keyword", "model", "none", "signal.asend_robust", "tracebacks", "switches", "callback", "toppings", "infrastructure", "example", "calls", "identifier", "event", "email", "functions", "value", "mymodel", "self", "handlers", "source", "end", "circumstances", "case", "argument", "route", "class", "signal.disconnect", "number", "applications", "print", "request", "receiver", "django.core.signals", "tuple", "advantage", "cycle", "action", "attribute", "function", "asend_robust", "string", "list", "details", "bit", "actions", "call", "runs", "app", "effects", "django.apps", "request_finished", "myapp.models", "pizzastore", "asyncio.gather", "object", "root", "user", "dispatcher", "warning", "coupling", "size", "references", "@receiver", "’s", "errors", "python", "sync", "addition", "instances", "response", "django.db.models.signals.pre_save", "signal.connect", "handler", "traceback", "kwargs", "configuration", "exceptions", "events", "asend_pizza", "signals", "django", "duplication", "send_robust", "coroutine", "fact", "*", "set", "framework", "module", "arguments", "practice", "connect", "cost", "http", "nutshell", "reference", "instance", "code", "=", "models", "sync_to_async", "objects", "send", "appconfig", "parameters", "face", "garbage", "subset", "asend"], "type": "documentation"},
{"title": "Django settings", "url": "https://docs.djangoproject.com/en/5.1/topics/settings/", "content": "Django settings ¶ A Django settings file contains all the configuration of your Django\ninstallation. This document explains how settings work and which settings are\navailable. The basics ¶ A settings file is just a Python module with module-level variables. Here are a couple of example settings: ALLOWED_HOSTS = [ \"www.example.com\" ] DEBUG = False DEFAULT_FROM_EMAIL = \"webmaster@example.com\" Note If you set DEBUG to False , you also need to properly set\nthe ALLOWED_HOSTS setting. Because a settings file is a Python module, the following apply: It doesn’t allow for Python syntax errors. It can assign settings dynamically using normal Python syntax.\nFor example: MY_SETTING = [ str ( i ) for i in range ( 30 )] It can import values from other settings files. Designating the settings ¶ DJANGO_SETTINGS_MODULE ¶ When you use Django, you have to tell it which settings you’re using. Do this\nby using an environment variable, DJANGO_SETTINGS_MODULE . The value of DJANGO_SETTINGS_MODULE should be in Python path syntax,\ne.g. mysite.settings . Note that the settings module should be on the\nPython sys.path . The django-admin utility ¶ When using django-admin , you can either set the\nenvironment variable once, or explicitly pass in the settings module each time\nyou run the utility. Example (Unix Bash shell): export DJANGO_SETTINGS_MODULE = mysite.settings\ndjango-admin runserver Example (Windows shell): set DJANGO_SETTINGS_MODULE=mysite.settings django-admin runserver Use the --settings command-line argument to specify the settings manually: django-admin runserver --settings = mysite.settings On the server ( mod_wsgi ) ¶ In your live server environment, you’ll need to tell your WSGI\napplication what settings file to use. Do that with os.environ : import os os . environ [ \"DJANGO_SETTINGS_MODULE\" ] = \"mysite.settings\" Read the Django mod_wsgi documentation for more information and other common\nelements to a Django WSGI application. Default settings ¶ A Django settings file doesn’t have to define any settings if it doesn’t need\nto. Each setting has a sensible default value. These defaults live in the\nmodule django/conf/global_settings.py . Here’s the algorithm Django uses in compiling settings: Load settings from global_settings.py . Load settings from the specified settings file, overriding the global\nsettings as necessary. Note that a settings file should not import from global_settings , because\nthat’s redundant. Seeing which settings you’ve changed ¶ The command python manage.py diffsettings displays differences between the\ncurrent settings file and Django’s default settings. For more, see the diffsettings documentation. Using settings in Python code ¶ In your Django apps, use settings by importing the object django.conf.settings . Example: from django.conf import settings if settings . DEBUG : # Do something ... Note that django.conf.settings isn’t a module – it’s an object. So\nimporting individual settings is not possible: from django.conf.settings import DEBUG # This won't work. Also note that your code should not import from either global_settings or\nyour own settings file. django.conf.settings abstracts the concepts of\ndefault settings and site-specific settings; it presents a single interface.\nIt also decouples the code that uses settings from the location of your\nsettings. Altering settings at runtime ¶ You shouldn’t alter settings in your applications at runtime. For example,\ndon’t do this in a view: from django.conf import settings settings . DEBUG = True # Don't do this! The only place you should assign to settings is in a settings file. Security ¶ Because a settings file contains sensitive information, such as the database\npassword, you should make every attempt to limit access to it. For example,\nchange its file permissions so that only you and your web server’s user can\nread it. This is especially important in a shared-hosting environment. Available settings ¶ For a full list of available settings, see the settings reference . Creating your own settings ¶ There’s nothing stopping you from creating your own settings, for your own\nDjango apps, but follow these guidelines: Setting names must be all uppercase. Don’t reinvent an already-existing setting. For settings that are sequences, Django itself uses lists, but this is only\na convention. Using settings without setting DJANGO_SETTINGS_MODULE ¶ In some cases, you might want to bypass the DJANGO_SETTINGS_MODULE environment variable. For example, if you’re using the template system by\nitself, you likely don’t want to have to set up an environment variable\npointing to a settings module. In these cases, you can configure Django’s settings manually. Do this by\ncalling: django.conf.settings. configure ( default_settings , ** settings ) ¶ Example: from django.conf import settings settings . configure ( DEBUG = True ) Pass configure() as many keyword arguments as you’d like, with each keyword\nargument representing a setting and its value. Each argument name should be all\nuppercase, with the same name as the settings described above. If a particular\nsetting is not passed to configure() and is needed at some later point,\nDjango will use the default setting value. Configuring Django in this fashion is mostly necessary – and, indeed,\nrecommended – when you’re using a piece of the framework inside a larger\napplication. Consequently, when configured via settings.configure() , Django will not\nmake any modifications to the process environment variables (see the\ndocumentation of TIME_ZONE for why this would normally occur). It’s\nassumed that you’re already in full control of your environment in these\ncases. Custom default settings ¶ If you’d like default values to come from somewhere other than django.conf.global_settings , you can pass in a module or class that\nprovides the default settings as the default_settings argument (or as the\nfirst positional argument) in the call to configure() . In this example, default settings are taken from myapp_defaults , and the DEBUG setting is set to True , regardless of its value in myapp_defaults : from django.conf import settings from myapp import myapp_defaults settings . configure ( default_settings = myapp_defaults , DEBUG = True ) The following example, which uses myapp_defaults as a positional argument,\nis equivalent: settings . configure ( myapp_defaults , DEBUG = True ) Normally, you will not need to override the defaults in this fashion. The\nDjango defaults are sufficiently tame that you can safely use them. Be aware\nthat if you do pass in a new default module, it entirely replaces the Django\ndefaults, so you must specify a value for every possible setting that might be\nused in the code you are importing. Check in django.conf.settings.global_settings for the full list. Either configure() or DJANGO_SETTINGS_MODULE is required ¶ If you’re not setting the DJANGO_SETTINGS_MODULE environment\nvariable, you must call configure() at some point before using any code\nthat reads settings. If you don’t set DJANGO_SETTINGS_MODULE and don’t call configure() , Django will raise an ImportError exception the first time\na setting is accessed. If you set DJANGO_SETTINGS_MODULE , access settings values somehow, then call configure() , Django will raise a RuntimeError indicating\nthat settings have already been configured. There is a property for this\npurpose: django.conf.settings. configured ¶ For example: from django.conf import settings if not settings . configured : settings . configure ( myapp_defaults , DEBUG = True ) Also, it’s an error to call configure() more than once, or to call configure() after any setting has been accessed. It boils down to this: Use exactly one of either configure() or DJANGO_SETTINGS_MODULE . Not both, and not neither. Calling django.setup() is required for “standalone” Django usage ¶ If you’re using components of Django “standalone” – for example, writing a\nPython script which loads some Django templates and renders them, or uses the\nORM to fetch some data – there’s one more step you’ll need in addition to\nconfiguring settings. After you’ve either set DJANGO_SETTINGS_MODULE or called configure() , you’ll need to call django.setup() to load your\nsettings and populate Django’s application registry. For example: import django from django.conf import settings from myapp import myapp_defaults settings . configure ( default_settings = myapp_defaults , DEBUG = True ) django . setup () # Now this script or any imported module can use any part of Django it needs. from myapp import models Note that calling django.setup() is only necessary if your code is truly\nstandalone. When invoked by your web server, or through django-admin , Django will handle this for you. django.setup() may only be called once. Therefore, avoid putting reusable application logic in standalone scripts\nso that you have to import from the script elsewhere in your application.\nIf you can’t avoid that, put the call to django.setup() inside an if block: if __name__ == \"__main__\" : import django django . setup () See also The Settings Reference Contains the complete list of core and contrib app settings.", "keywords": ["fashion", "lists", "permissions", "attempt", "interface", "script", "my_setting", "variable", "error", "differences", "range", "line", "template", "debug", "control", "myapp_defaults", "setting", "apply", "altering", "documentation", "-", "place", "mod_wsgi", "settings", "false", "time", "application", "exception", "django_settings_module", "property", "_", "shell", "allowed_hosts", "system", "values", "site", "str", "files", "cases", "utility", "import", "runtime", "information", "scripts", "default_settings", "#", "load", "global_settings", "guidelines", "point", "settings.configure", "¶", "default", "piece", "django.setup", "mysite.settings", "custom", "web", "location", "conf", "keyword", "couple", "configure", "environ", "server", "modifications", "variables", "block", "process", "access", "contrib", "django.conf.settings.global_settings", "command", "example", "runserver", "n’t", "importerror", "value", "convention", "basics", "diffsettings", "unix", "django.conf.settings", "argument", "class", "components", "applications", "sys.path", "bash", "windows", "runtimeerror", "--settings", "list", "uppercase", "concepts", "data", "setup", "view", "app", "i", "object", "name", "environment", "user", "global_settings.py", "file", "part", "admin", "algorithm", "installation", "errors", "python", "webmaster@example.com", "core", "addition", "export", "myapp", "password", "configuration", "note", "orm", "sequences", "path", "os.environ", "level", "names", "django", "standalone", "true", "document", "elements", "syntax", "*", "pointing", "framework", "module", "apps", "arguments", "calling", "django.conf.global_settings", "database", "purpose", "logic", "reference", "security", "=", "code", "models", "wsgi", "registry", "defaults", "step", "call"], "type": "documentation"},
{"title": "Serializing Django objects", "url": "https://docs.djangoproject.com/en/5.1/topics/serialization/", "content": "Serializing Django objects ¶ Django’s serialization framework provides a mechanism for “translating” Django\nmodels into other formats. Usually these other formats will be text-based and\nused for sending Django data over a wire, but it’s possible for a\nserializer to handle any format (text-based or not). See also If you just want to get some data from your tables into a serialized\nform, you could use the dumpdata management command. Serializing data ¶ At the highest level, you can serialize data like this: from django.core import serializers data = serializers . serialize ( \"xml\" , SomeModel . objects . all ()) The arguments to the serialize function are the format to serialize the data\nto (see Serialization formats ) and a QuerySet to serialize. (Actually, the second\nargument can be any iterator that yields Django model instances, but it’ll\nalmost always be a QuerySet). django.core.serializers. get_serializer ( format ) ¶ You can also use a serializer object directly: XMLSerializer = serializers . get_serializer ( \"xml\" ) xml_serializer = XMLSerializer () xml_serializer . serialize ( queryset ) data = xml_serializer . getvalue () This is useful if you want to serialize data directly to a file-like object\n(which includes an HttpResponse ): with open ( \"file.xml\" , \"w\" ) as out : xml_serializer . serialize ( SomeModel . objects . all (), stream = out ) Note Calling get_serializer() with an unknown format will raise a django.core.serializers.SerializerDoesNotExist exception. Subset of fields ¶ If you only want a subset of fields to be serialized, you can\nspecify a fields argument to the serializer: from django.core import serializers data = serializers . serialize ( \"xml\" , SomeModel . objects . all (), fields = [ \"name\" , \"size\" ]) In this example, only the name and size attributes of each model will\nbe serialized. The primary key is always serialized as the pk element in the\nresulting output; it never appears in the fields part. Note Depending on your model, you may find that it is not possible to\ndeserialize a model that only serializes a subset of its fields. If a\nserialized object doesn’t specify all the fields that are required by a\nmodel, the deserializer will not be able to save deserialized instances. Inherited models ¶ If you have a model that is defined using an abstract base class , you don’t have to do anything special to serialize\nthat model. Call the serializer on the object (or objects) that you want to\nserialize, and the output will be a complete representation of the serialized\nobject. However, if you have a model that uses multi-table inheritance , you also need to serialize all of the base classes\nfor the model. This is because only the fields that are locally defined on the\nmodel will be serialized. For example, consider the following models: class Place ( models . Model ): name = models . CharField ( max_length = 50 ) class Restaurant ( Place ): serves_hot_dogs = models . BooleanField ( default = False ) If you only serialize the Restaurant model: data = serializers . serialize ( \"xml\" , Restaurant . objects . all ()) the fields on the serialized output will only contain the serves_hot_dogs attribute. The name attribute of the base class will be ignored. In order to fully serialize your Restaurant instances, you will need to\nserialize the Place models as well: all_objects = [ * Restaurant . objects . all (), * Place . objects . all ()] data = serializers . serialize ( \"xml\" , all_objects ) Deserializing data ¶ Deserializing data is very similar to serializing it: for obj in serializers . deserialize ( \"xml\" , data ): do_something_with ( obj ) As you can see, the deserialize function takes the same format argument as serialize , a string or stream of data, and returns an iterator. However, here it gets slightly complicated. The objects returned by the deserialize iterator aren’t regular Django objects. Instead, they are\nspecial DeserializedObject instances that wrap a created – but unsaved –\nobject and any associated relationship data. Calling DeserializedObject.save() saves the object to the database. Note If the pk attribute in the serialized data doesn’t exist or is\nnull, a new instance will be saved to the database. This ensures that deserializing is a non-destructive operation even if the\ndata in your serialized representation doesn’t match what’s currently in the\ndatabase. Usually, working with these DeserializedObject instances looks\nsomething like: for deserialized_object in serializers . deserialize ( \"xml\" , data ): if object_should_be_saved ( deserialized_object ): deserialized_object . save () In other words, the usual use is to examine the deserialized objects to make\nsure that they are “appropriate” for saving before doing so. If you trust your\ndata source you can instead save the object directly and move on. The Django object itself can be inspected as deserialized_object.object .\nIf fields in the serialized data do not exist on a model, a DeserializationError will be raised unless the ignorenonexistent argument is passed in as True : serializers . deserialize ( \"xml\" , data , ignorenonexistent = True ) Serialization formats ¶ Django supports a number of serialization formats, some of which require you\nto install third-party Python modules: Identifier Information xml Serializes to and from a simple XML dialect. json Serializes to and from JSON . jsonl Serializes to and from JSONL . yaml Serializes to YAML (YAML Ain’t a Markup Language). This\nserializer is only available if PyYAML is installed. XML ¶ The basic XML serialization format looks like this: <?xml version=\"1.0\" encoding=\"utf-8\"?> <django-objects version= \"1.0\" > <object pk= \"123\" model= \"sessions.session\" > <field type= \"DateTimeField\" name= \"expire_date\" > 2013-01-16T08:16:59.844560+00:00 </field> <!-- ... --> </object> </django-objects> The whole collection of objects that is either serialized or deserialized is\nrepresented by a <django-objects> -tag which contains multiple <object> -elements. Each such object has two attributes: “pk” and “model”,\nthe latter being represented by the name of the app (“sessions”) and the\nlowercase name of the model (“session”) separated by a dot. Each field of the object is serialized as a <field> -element sporting the\nfields “type” and “name”. The text content of the element represents the value\nthat should be stored. Foreign keys and other relational fields are treated a little bit differently: <object pk= \"27\" model= \"auth.permission\" > <!-- ... --> <field to= \"contenttypes.contenttype\" name= \"content_type\" rel= \"ManyToOneRel\" > 9 </field> <!-- ... --> </object> In this example we specify that the auth.Permission object with the PK 27\nhas a foreign key to the contenttypes.ContentType instance with the PK 9. ManyToMany-relations are exported for the model that binds them. For instance,\nthe auth.User model has such a relation to the auth.Permission model: <object pk= \"1\" model= \"auth.user\" > <!-- ... --> <field to= \"auth.permission\" name= \"user_permissions\" rel= \"ManyToManyRel\" > <object pk= \"46\" ></object> <object pk= \"47\" ></object> </field> </object> This example links the given user with the permission models with PKs 46 and 47. Control characters If the content to be serialized contains control characters that are not\naccepted in the XML 1.0 standard, the serialization will fail with a ValueError exception. Read also the W3C’s explanation of HTML,\nXHTML, XML and Control Codes . JSON ¶ When staying with the same example data as before it would be serialized as\nJSON in the following way: [ { \"pk\" : \"4b678b301dfd8a4e0dad910de3ae245b\" , \"model\" : \"sessions.session\" , \"fields\" : { \"expire_date\" : \"2013-01-16T08:16:59.844Z\" , # ... }, } ] The formatting here is a bit simpler than with XML. The whole collection\nis just represented as an array and the objects are represented by JSON objects\nwith three properties: “pk”, “model” and “fields”. “fields” is again an object\ncontaining each field’s name and value as property and property-value\nrespectively. Foreign keys have the PK of the linked object as property value.\nManyToMany-relations are serialized for the model that defines them and are\nrepresented as a list of PKs. Be aware that not all Django output can be passed unmodified to json .\nFor example, if you have some custom type in an object to be serialized, you’ll\nhave to write a custom json encoder for it. Something like this will\nwork: from django.core.serializers.json import DjangoJSONEncoder class LazyEncoder ( DjangoJSONEncoder ): def default ( self , obj ): if isinstance ( obj , YourCustomType ): return str ( obj ) return super () . default ( obj ) You can then pass cls=LazyEncoder to the serializers.serialize() function: from django.core.serializers import serialize serialize ( \"json\" , SomeModel . objects . all (), cls = LazyEncoder ) Also note that GeoDjango provides a customized GeoJSON serializer . DjangoJSONEncoder ¶ class django.core.serializers.json. DjangoJSONEncoder ¶ The JSON serializer uses DjangoJSONEncoder for encoding. A subclass of JSONEncoder , it handles these additional types: datetime A string of the form YYYY-MM-DDTHH:mm:ss.sssZ or YYYY-MM-DDTHH:mm:ss.sss+HH:MM as defined in ECMA-262 . date A string of the form YYYY-MM-DD as defined in ECMA-262 . time A string of the form HH:MM:ss.sss as defined in ECMA-262 . timedelta A string representing a duration as defined in ISO-8601. For example, timedelta(days=1, hours=2, seconds=3.4) is represented as 'P1DT02H00M03.400000S' . Decimal , Promise ( django.utils.functional.lazy() objects), UUID A string representation of the object. JSONL ¶ JSONL stands for JSON Lines . With this format, objects are separated by new\nlines, and each line contains a valid JSON object. JSONL serialized data looks\nlike this: { \"pk\" : \"4b678b301dfd8a4e0dad910de3ae245b\" , \"model\" : \"sessions.session\" , \"fields\" : { ... }} { \"pk\" : \"88bea72c02274f3c9bf1cb2bb8cee4fc\" , \"model\" : \"sessions.session\" , \"fields\" : { ... }} { \"pk\" : \"9cf0e26691b64147a67e2a9f06ad7a53\" , \"model\" : \"sessions.session\" , \"fields\" : { ... }} JSONL can be useful for populating large databases, since the data can be\nprocessed line by line, rather than being loaded into memory all at once. YAML ¶ YAML serialization looks quite similar to JSON. The object list is serialized\nas a sequence mappings with the keys “pk”, “model” and “fields”. Each field is\nagain a mapping with the key being name of the field and the value the value: - model : sessions.session pk : 4b678b301dfd8a4e0dad910de3ae245b fields : expire_date : 2013-01-16 08:16:59.844560+00:00 Referential fields are again represented by the PK or sequence of PKs. Natural keys ¶ The default serialization strategy for foreign keys and many-to-many relations\nis to serialize the value of the primary key(s) of the objects in the relation.\nThis strategy works well for most objects, but it can cause difficulty in some\ncircumstances. Consider the case of a list of objects that have a foreign key referencing ContentType . If you’re going to\nserialize an object that refers to a content type, then you need to have a way\nto refer to that content type to begin with. Since ContentType objects are\nautomatically created by Django during the database synchronization process,\nthe primary key of a given content type isn’t easy to predict; it will\ndepend on how and when migrate was executed. This is true for all\nmodels which automatically generate objects, notably including Permission , Group , and User . Warning You should never include automatically generated objects in a fixture or\nother serialized data. By chance, the primary keys in the fixture\nmay match those in the database and loading the fixture will\nhave no effect. In the more likely case that they don’t match, the fixture\nloading will fail with an IntegrityError . There is also the matter of convenience. An integer id isn’t always\nthe most convenient way to refer to an object; sometimes, a\nmore natural reference would be helpful. It is for these reasons that Django provides natural keys . A natural\nkey is a tuple of values that can be used to uniquely identify an\nobject instance without using the primary key value. Deserialization of natural keys ¶ Consider the following two models: from django.db import models class Person ( models . Model ): first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) birthdate = models . DateField () class Meta : constraints = [ models . UniqueConstraint ( fields = [ \"first_name\" , \"last_name\" ], name = \"unique_first_last_name\" , ), ] class Book ( models . Model ): name = models . CharField ( max_length = 100 ) author = models . ForeignKey ( Person , on_delete = models . CASCADE ) Ordinarily, serialized data for Book would use an integer to refer to\nthe author. For example, in JSON, a Book might be serialized as: ... { \"pk\" : 1 , \"model\" : \"store.book\" , \"fields\" : { \"name\" : \"Mostly Harmless\" , \"author\" : 42 }} ... This isn’t a particularly natural way to refer to an author. It\nrequires that you know the primary key value for the author; it also\nrequires that this primary key value is stable and predictable. However, if we add natural key handling to Person, the fixture becomes\nmuch more humane. To add natural key handling, you define a default\nManager for Person with a get_by_natural_key() method. In the case\nof a Person, a good natural key might be the pair of first and last\nname: from django.db import models class PersonManager ( models . Manager ): def get_by_natural_key ( self , first_name , last_name ): return self . get ( first_name = first_name , last_name = last_name ) class Person ( models . Model ): first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) birthdate = models . DateField () objects = PersonManager () class Meta : constraints = [ models . UniqueConstraint ( fields = [ \"first_name\" , \"last_name\" ], name = \"unique_first_last_name\" , ), ] Now books can use that natural key to refer to Person objects: ... { \"pk\" : 1 , \"model\" : \"store.book\" , \"fields\" : { \"name\" : \"Mostly Harmless\" , \"author\" : [ \"Douglas\" , \"Adams\" ]}, } ... When you try to load this serialized data, Django will use the get_by_natural_key() method to resolve [\"Douglas\", \"Adams\"] into the primary key of an actual Person object. Note Whatever fields you use for a natural key must be able to uniquely\nidentify an object. This will usually mean that your model will\nhave a uniqueness clause (either unique=True on a single field, or a UniqueConstraint or unique_together over multiple fields) for the\nfield or fields in your natural key. However, uniqueness doesn’t need to be\nenforced at the database level. If you are certain that a set of fields\nwill be effectively unique, you can still use those fields as a natural\nkey. Deserialization of objects with no primary key will always check whether the\nmodel’s manager has a get_by_natural_key() method and if so, use it to\npopulate the deserialized object’s primary key. Serialization of natural keys ¶ So how do you get Django to emit a natural key when serializing an object?\nFirstly, you need to add another method – this time to the model itself: class Person ( models . Model ): first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) birthdate = models . DateField () objects = PersonManager () class Meta : constraints = [ models . UniqueConstraint ( fields = [ \"first_name\" , \"last_name\" ], name = \"unique_first_last_name\" , ), ] def natural_key ( self ): return ( self . first_name , self . last_name ) That method should always return a natural key tuple – in this\nexample, (first name, last name) . Then, when you call serializers.serialize() , you provide use_natural_foreign_keys=True or use_natural_primary_keys=True arguments: >>> serializers . serialize ( ... \"json\" , ... [ book1 , book2 ], ... indent = 2 , ... use_natural_foreign_keys = True , ... use_natural_primary_keys = True , ... ) When use_natural_foreign_keys=True is specified, Django will use the natural_key() method to serialize any foreign key reference to objects\nof the type that defines the method. When use_natural_primary_keys=True is specified, Django will not provide the\nprimary key in the serialized data of this object since it can be calculated\nduring deserialization: ... { \"model\" : \"store.person\" , \"fields\" : { \"first_name\" : \"Douglas\" , \"last_name\" : \"Adams\" , \"birth_date\" : \"1952-03-11\" , }, } ... This can be useful when you need to load serialized data into an existing\ndatabase and you cannot guarantee that the serialized primary key value is not\nalready in use, and do not need to ensure that deserialized objects retain the\nsame primary keys. If you are using dumpdata to generate serialized data, use the dumpdata --natural-foreign and dumpdata --natural-primary command line flags to generate natural keys. Note You don’t need to define both natural_key() and get_by_natural_key() . If you don’t want Django to output\nnatural keys during serialization, but you want to retain the\nability to load natural keys, then you can opt to not implement\nthe natural_key() method. Conversely, if (for some strange reason) you want Django to output\nnatural keys during serialization, but not be able to load those\nkey values, just don’t define the get_by_natural_key() method. Natural keys and forward references ¶ Sometimes when you use natural foreign keys you’ll need to deserialize data where\nan object has a foreign key referencing another object that hasn’t yet been\ndeserialized. This is called a “forward reference”. For instance, suppose you have the following objects in your fixture: ... { \"model\" : \"store.book\" , \"fields\" : { \"name\" : \"Mostly Harmless\" , \"author\" : [ \"Douglas\" , \"Adams\" ]}, }, ... { \"model\" : \"store.person\" , \"fields\" : { \"first_name\" : \"Douglas\" , \"last_name\" : \"Adams\" }}, ... In order to handle this situation, you need to pass handle_forward_references=True to serializers.deserialize() . This will\nset the deferred_fields attribute on the DeserializedObject instances.\nYou’ll need to keep track of DeserializedObject instances where this\nattribute isn’t None and later call save_deferred_fields() on them. Typical usage looks like this: objs_with_deferred_fields = [] for obj in serializers . deserialize ( \"xml\" , data , handle_forward_references = True ): obj . save () if obj . deferred_fields is not None : objs_with_deferred_fields . append ( obj ) for obj in objs_with_deferred_fields : obj . save_deferred_fields () For this to work, the ForeignKey on the referencing model must have null=True . Dependencies during serialization ¶ It’s often possible to avoid explicitly having to handle forward references by\ntaking care with the ordering of objects within a fixture. To help with this, calls to dumpdata that use the dumpdata --natural-foreign option will serialize any model with a natural_key() method before serializing standard primary key objects. However, this may not always be enough. If your natural key refers to\nanother object (by using a foreign key or natural key to another object\nas part of a natural key), then you need to be able to ensure that\nthe objects on which a natural key depends occur in the serialized data\nbefore the natural key requires them. To control this ordering, you can define dependencies on your natural_key() methods. You do this by setting a dependencies attribute on the natural_key() method itself. For example, let’s add a natural key to the Book model from the\nexample above: class Book ( models . Model ): name = models . CharField ( max_length = 100 ) author = models . ForeignKey ( Person , on_delete = models . CASCADE ) def natural_key ( self ): return ( self . name ,) + self . author . natural_key () The natural key for a Book is a combination of its name and its\nauthor. This means that Person must be serialized before Book .\nTo define this dependency, we add one extra line: def natural_key ( self ): return ( self . name ,) + self . author . natural_key () natural_key . dependencies = [ \"example_app.person\" ] This definition ensures that all Person objects are serialized before\nany Book objects. In turn, any object referencing Book will be\nserialized after both Person and Book have been serialized.", "keywords": ["deserialized_object", "explanation", "use_natural_foreign_keys", "characters", "+", "work", "track", "contenttypes.contenttype", "type", "line", "example_app.person", "dd", "httpresponse", "obj", "):", "control", "types", "book", "deserializing", "douglas", "ss.sss", "getvalue", "handling", "order", "serialization", "referencing", "-", "deserialized_object.object", "def", "place", "booleanfield", "dialect", "serializers", "difficulty", "pk", "integrityerror", "yaml", "time", "deserialize", "book1", "exception", "management", "classes", "adams", "store.person", "somemodel", "serialize", "get_serializer", "property", "django.core.serializers.json", "party", "method", "migrate", "queryset", "restaurant", "xml_serializer", "handle_forward_references", "convenience", "uniqueconstraint", "person", "codes", "lowercase", "dependency", "xmlserializer", "values", "modules", "str", "geojson", "d", "encoder", "use", "manager", "import", "iterator", "-element", "store.book", "w", "datefield", "dumpdata", "information", "deserializedobject", "xhtml", "permission", "birth_date", "json", "manytomany", "#", "pk=", "decimal", "output", "fields", "standard", "serves_hot_dogs", "way", "lazyencoder", "¶", "user_permissions", "default", "option", "88bea72c02274f3c9bf1cb2bb8cee4fc", "name=", "save_deferred_fields", "pair", "custom", "books", "ignorenonexistent", "methods", "definition", "mappings", "iso-8601", "geodjango", "usage", "fixture", "model", "max_length", "personmanager", "none", "uniqueness", "ddthh", "format", "django.core.serializers", "serializer", "base", "process", "django.utils.functional.lazy", "command", "expire_date", "djangojsonencoder", "example", "isinstance", "constraints", "session", "ordering", "deserializationerror", "n’t", "identifier", "formatting", "refers", "content_type", "value", "<", "dot", "content", "uuid", "self", "source", "circumstances", "case", "argument", "jsonl", "do_something_with", "class", "number", "-elements", "xml", "stream", "words", "manytomanyrel", "use_natural_primary_keys", "inheritance", "ss.sss+hh", "tuple", "return", "save", "manytoonerel", "html", "integer", "tables", "mapping", "attribute", "function", "deserializedobject.save", "meta", "indent", "string", "django.db", "care", "list", "properties", "bit", "loading", "auth.permission", "data", "relational", "element", "duration", "auth.user", "app", "timedelta(days=1", "deserialization", "lines", "form", "deferred_fields", "contenttype", "name", "object", "datetimefield", "group", "i", "--natural", "flags", "user", "key(s", "harmless", "part", "file", "sessions.session", "yyyy", "attributes", "first_name", "dependencies", "size", "references", "serializerdoesnotexist", "synchronization", "python", "combination", "charfield", "instances", "ss.sssz", "deserializer", "seconds=3.4", "reasons", "mechanism", "django.core", "jsonencoder", "matter", "array", "formats", "append", "sequence", "keys", "all_objects", "pyyaml", "pks", "subclass", "wire", "unique_together", "note", "serializers.serialize", "sessions", "natural_key", "chance", "author", "rel=", "valueerror", "level", "django", "promise", "clause", "birthdate", "reason", "being", "auth", "contenttypes", "representation", "*", "date", "text", "framework", "set", "markup", "field", "arguments", "version=\"1.0", "last_name", "relations", "relation", "foreignkey", "database", "relationship", "objs_with_deferred_fields", "memory", "databases", "turn", "mm", "operation", "effect", "instance", "reference", "get_by_natural_key", "=", "models", "w3c", "cls", "encoding=\"utf-8", "objects", "depends", "key", "collection", "language", "yourcustomtype", "hh", "ecma-262", "9cf0e26691b64147a67e2a9f06ad7a53", "situation", "strategy", "ability", "subset"], "type": "documentation"},
{"title": "Performance and optimization", "url": "https://docs.djangoproject.com/en/5.1/topics/performance/", "content": "Performance and optimization ¶ This document provides an overview of techniques and tools that can help get\nyour Django code running more efficiently - faster, and using fewer system\nresources. Introduction ¶ Generally one’s first concern is to write code that works , whose logic\nfunctions as required to produce the expected output. Sometimes, however, this\nwill not be enough to make the code work as efficiently as one would like. In this case, what’s needed is something - and in practice, often a collection\nof things - to improve the code’s performance without, or only minimally,\naffecting its behavior. General approaches ¶ What are you optimizing for ? ¶ It’s important to have a clear idea what you mean by ‘performance’. There is\nnot just one metric of it. Improved speed might be the most obvious aim for a program, but sometimes other\nperformance improvements might be sought, such as lower memory consumption or\nfewer demands on the database or network. Improvements in one area will often bring about improved performance in\nanother, but not always; sometimes one can even be at the expense of another.\nFor example, an improvement in a program’s speed might cause it to use more\nmemory. Even worse, it can be self-defeating - if the speed improvement is so\nmemory-hungry that the system starts to run out of memory, you’ll have done\nmore harm than good. There are other trade-offs to bear in mind. Your own time is a valuable\nresource, more precious than CPU time. Some improvements might be too difficult\nto be worth implementing, or might affect the portability or maintainability of\nthe code. Not all performance improvements are worth the effort. So, you need to know what performance improvements you are aiming for, and you\nalso need to know that you have a good reason for aiming in that direction -\nand for that you need: Performance benchmarking ¶ It’s no good just guessing or assuming where the inefficiencies lie in your\ncode. Django tools ¶ django-debug-toolbar is a very handy tool that provides insights into\nwhat your code is doing and how much time it spends doing it. In particular it\ncan show you all the SQL queries your page is generating, and how long each one\nhas taken. Third-party panels are also available for the toolbar, that can (for example)\nreport on cache performance and template rendering times. Third-party services ¶ There are a number of free services that will analyze and report on the\nperformance of your site’s pages from the perspective of a remote HTTP client,\nin effect simulating the experience of an actual user. These can’t report on the internals of your code, but can provide a useful\ninsight into your site’s overall performance, including aspects that can’t be\nadequately measured from within Django environment. There are also several paid-for services that perform a similar analysis,\nincluding some that are Django-aware and can integrate with your codebase to\nprofile its performance far more comprehensively. Get things right from the start ¶ Some work in optimization involves tackling performance shortcomings, but some\nof the work can be built-in to what you’d do anyway, as part of the good\npractices you should adopt even before you start thinking about improving\nperformance. In this respect Python is an excellent language to work with, because solutions\nthat look elegant and feel right usually are the best performing ones. As with\nmost skills, learning what “looks right” takes practice, but one of the most\nuseful guidelines is: Work at the appropriate level ¶ Django offers many different ways of approaching things, but just because it’s\npossible to do something in a certain way doesn’t mean that it’s the most\nappropriate way to do it. For example, you might find that you could calculate\nthe same thing - the number of items in a collection, perhaps - in a QuerySet , in Python, or in a template. However, it will almost always be faster to do this work at lower rather than\nhigher levels. At higher levels the system has to deal with objects through\nmultiple levels of abstraction and layers of machinery. That is, the database can typically do things faster than Python can, which can\ndo them faster than the template language can: # QuerySet operation on the database # fast, because that's what databases are good at my_bicycles . count () # counting Python objects # slower, because it requires a database query anyway, and processing # of the Python objects len ( my_bicycles ) <!-- Django template filter slower still, because it will have to count them in Python anyway, and because of template language overheads --> {{ my_bicycles | length }} Generally speaking, the most appropriate level for the job is the lowest-level\none that it is comfortable to code for. Note The example above is merely illustrative. Firstly, in a real-life case you need to consider what is happening before\nand after your count to work out what’s an optimal way of doing it in that\nparticular context . The database optimization document describes a\ncase where counting in the template would be better . Secondly, there are other options to consider: in a real-life case, {{ my_bicycles.count }} , which invokes the QuerySet count() method\ndirectly from the template, might be the most appropriate choice. Caching ¶ Often it is expensive (that is, resource-hungry and slow) to compute a value,\nso there can be huge benefit in saving the value to a quickly accessible cache,\nready for the next time it’s required. It’s a sufficiently significant and powerful technique that Django includes a\ncomprehensive caching framework, as well as other smaller pieces of caching\nfunctionality. The caching framework ¶ Django’s caching framework offers very significant\nopportunities for performance gains, by saving dynamic content so that it\ndoesn’t need to be calculated for each request. For convenience, Django offers different levels of cache granularity: you can\ncache the output of specific views, or only the pieces that are difficult to\nproduce, or even an entire site. Implementing caching should not be regarded as an alternative to improving code\nthat’s performing poorly because it has been written badly. It’s one of the\nfinal steps toward producing well-performing code, not a shortcut. cached_property ¶ It’s common to have to call a class instance’s method more than once. If\nthat function is expensive, then doing so can be wasteful. Using the cached_property decorator saves the\nvalue returned by a property; the next time the function is called on that\ninstance, it will return the saved value rather than re-computing it. Note that\nthis only works on methods that take self as their only argument and that\nit changes the method to a property. Certain Django components also have their own caching functionality; these are\ndiscussed below in the sections related to those components. Understanding laziness ¶ Laziness is a strategy complementary to caching. Caching avoids\nrecomputation by saving results; laziness delays computation until it’s\nactually required. Laziness allows us to refer to things before they are instantiated, or even\nbefore it’s possible to instantiate them. This has numerous uses. For example, lazy translation can be used before the\ntarget language is even known, because it doesn’t take place until the\ntranslated string is actually required, such as in a rendered template. Laziness is also a way to save effort by trying to avoid work in the first\nplace. That is, one aspect of laziness is not doing anything until it has to be\ndone, because it may not turn out to be necessary after all. Laziness can\ntherefore have performance implications, and the more expensive the work\nconcerned, the more there is to gain through laziness. Python provides a number of tools for lazy evaluation, particularly through the generator and generator expression constructs. It’s worth\nreading up on laziness in Python to discover opportunities for making use of\nlazy patterns in your code. Laziness in Django ¶ Django is itself quite lazy. A good example of this can be found in the\nevaluation of QuerySets . QuerySets are lazy .\nThus a QuerySet can be created, passed around and combined with other QuerySets , without actually incurring any trips to the database to fetch\nthe items it describes. What gets passed around is the QuerySet object, not\nthe collection of items that - eventually - will be required from the database. On the other hand, certain operations will force the evaluation of a\nQuerySet . Avoiding the premature evaluation of\na QuerySet can save making an expensive and unnecessary trip to the\ndatabase. Django also offers a keep_lazy() decorator.\nThis allows a function that has been called with a lazy argument to behave\nlazily itself, only being evaluated when it needs to be. Thus the lazy argument\n- which could be an expensive one - will not be called upon for evaluation\nuntil it’s strictly required. Databases ¶ Database optimization ¶ Django’s database layer provides various ways to help developers get the best\nperformance from their databases. The database optimization documentation gathers together links to the relevant\ndocumentation and adds various tips that outline the steps to take when\nattempting to optimize your database usage. Other database-related tips ¶ Enabling Persistent connections can speed up connections to the\ndatabase accounts for a significant part of the request processing time. This helps a lot on virtualized hosts with limited network performance, for example. HTTP performance ¶ Middleware ¶ Django comes with a few helpful pieces of middleware that can help optimize your site’s performance. They include: ConditionalGetMiddleware ¶ Adds support for modern browsers to conditionally GET responses based on the ETag and Last-Modified headers. It also calculates and sets an ETag if\nneeded. GZipMiddleware ¶ Compresses responses for all modern browsers, saving bandwidth and transfer\ntime. Note that GZipMiddleware is currently considered a security risk, and is\nvulnerable to attacks that nullify the protection provided by TLS/SSL. See the\nwarning in GZipMiddleware for more information. Sessions ¶ Using cached sessions ¶ Using cached sessions may be a way to increase\nperformance by eliminating the need to load session data from a slower storage\nsource like the database and instead storing frequently used session data in\nmemory. Static files ¶ Static files, which by definition are not dynamic, make an excellent target for\noptimization gains. ManifestStaticFilesStorage ¶ By taking advantage of web browsers’ caching abilities, you can\neliminate network hits entirely for a given file after the initial download. ManifestStaticFilesStorage appends a\ncontent-dependent tag to the filenames of static files to make it safe for browsers to cache them\nlong-term without missing future changes - when a file changes, so will the\ntag, so browsers will reload the asset automatically. “Minification” ¶ Several third-party Django tools and packages provide the ability to “minify”\nHTML, CSS, and JavaScript. They remove unnecessary whitespace, newlines, and\ncomments, and shorten variable names, and thus reduce the size of the documents\nthat your site publishes. Template performance ¶ Note that: using {% block %} is faster than using {% include %} heavily-fragmented templates, assembled from many small pieces, can affect\nperformance The cached template loader ¶ Enabling the cached template loader often improves performance\ndrastically, as it avoids compiling each template every time it needs to be\nrendered. Using different versions of available software ¶ It can sometimes be worth checking whether different and better-performing\nversions of the software that you’re using are available. These techniques are targeted at more advanced users who want to push the\nboundaries of performance of an already well-optimized Django site. However, they are not magic solutions to performance problems, and they’re\nunlikely to bring better than marginal gains to sites that don’t already do the\nmore basic things the right way. Note It’s worth repeating: reaching for alternatives to software you’re\nalready using is never the first answer to performance problems . When\nyou reach this level of optimization, you need a formal benchmarking\nsolution. Newer is often - but not always - better ¶ It’s fairly rare for a new release of well-maintained software to be less\nefficient, but the maintainers can’t anticipate every possible use-case - so\nwhile being aware that newer versions are likely to perform better, don’t\nassume that they always will. This is true of Django itself. Successive releases have offered a number of\nimprovements across the system, but you should still check the real-world\nperformance of your application, because in some cases you may find that\nchanges mean it performs worse rather than better. Newer versions of Python, and also of Python packages, will often perform\nbetter too - but measure, rather than assume. Note Unless you’ve encountered an unusual performance problem in a particular\nversion, you’ll generally find better features, reliability, and security\nin a new release and that these benefits are far more significant than any\nperformance you might win or lose. Alternatives to Django’s template language ¶ For nearly all cases, Django’s built-in template language is perfectly\nadequate. However, if the bottlenecks in your Django project seem to lie in the\ntemplate system and you have exhausted other opportunities to remedy this, a\nthird-party alternative may be the answer. Jinja2 can offer performance improvements, particularly when it comes to\nspeed. Alternative template systems vary in the extent to which they share Django’s\ntemplating language. Note If you experience performance issues in templates, the first thing to do\nis to understand exactly why. Using an alternative template system may\nprove faster, but the same gains may also be available without going to\nthat trouble - for example, expensive processing and logic in your\ntemplates could be done more efficiently in your views. Alternative software implementations ¶ It may be worth checking whether Python software you’re using has been\nprovided in a different implementation that can execute the same code faster. However: most performance problems in well-written Django sites aren’t at the\nPython execution level, but rather in inefficient database querying, caching,\nand templates. If you’re relying on poorly-written Python code, your\nperformance problems are unlikely to be solved by having it execute faster. Using an alternative implementation may introduce compatibility, deployment,\nportability, or maintenance issues. It goes without saying that before adopting\na non-standard implementation you should ensure it provides sufficient\nperformance gains for your application to outweigh the potential risks. With these caveats in mind, you should be aware of: PyPy ¶ PyPy is an implementation of Python in Python itself\n(the ‘standard’ Python implementation is in C). PyPy can offer substantial\nperformance gains, typically for heavyweight applications. A key aim of the PyPy project is compatibility with existing Python APIs and libraries.\nDjango is compatible, but you will need to check the compatibility of other\nlibraries you rely on. C implementations of Python libraries ¶ Some Python libraries are also implemented in C, and can be much faster. They\naim to offer the same APIs. Note that compatibility issues and behavior\ndifferences are not unknown (and not always immediately evident).", "keywords": ["experience", "implementation", "reliability", "filenames", "comments", "manifeststaticfilesstorage", "work", "portability", "software", "implementations", "newer", "differences", "template", "opportunities", "recomputation", "querysets", "maintenance", "cache", "support", "translation", "measure", "systems", "rendering", "%", "delays", "trip", "changes", "templates", "documentation", "filter", "problems", "place", "abilities", "cpu", "general", "reason", "time", "application", "perspective", "count", "overview", "newlines", "loader", "answer", "release", "property", "middleware", "method", "party", "cached_property", "aspects", "queryset", "solutions", "convenience", "hand", "behavior", "inefficiencies", "system", "compresses", "maintainers", "analysis", "site", "performance", "insights", "pieces", "responses", "harm", "query", "risk", "files", "use", "gzipmiddleware", "area", "css", "solution", "cases", "machinery", "views", "problem", "times", "respect", "releases", "ways", "information", "items", "aim", "project", "guidelines", "#", "compatibility", "output", "consumption", "idea", "way", "len", "versions", "jinja2", "¶", "standard", "apis", "alternatives", "overheads", "resource", "services", "conditionalgetmiddleware", "techniques", "tls", "decorator", "laziness", "persistent", "web", "methods", "effort", "client", "definition", "browsers", "usage", "target", "need", "extent", "concern", "improvement", "page", "documents", "trips", "processing", "choice", "etag", "sites", "block", "querying", "results", "mind", "example", "javascript", "session", "users", "abstraction", "tool", "n’t", "functions", "value", "boundaries", "counting", "content", "toolbar", "internals", "self", "caching", "source", "deployment", "case", "argument", "bottlenecks", "class", "panels", "number", "components", "offs", "alternative", "applications", "request", "introduction", "version", "optimization", "attacks", "advantage", "c", "aspect", "html", "benefits", "templating", "report", "ssl", "connections", "ones", "tips", "function", "developers", "thing", "enabling", "string", "things", "practices", "trouble", "term", "generator", "start", "protection", "steps", "data", "my_bicycles", "uses", "object", "options", "hosts", "environment", "gains", "user", "insight", "shortcomings", "implications", "part", "warning", "file", "asset", "minification", "one", "world", "pypy", "size", "benchmarking", "operations", "risks", "patterns", "python", "direction", "job", "life", "trade", "shortcut", "network", "execution", "sections", "sql", "note", "sessions", "maintainability", "storage", "granularity", "level", "technique", "django", "names", "layers", "tools", "|", "evaluation", "tag", "speed", "demands", "document", "lot", "in", "framework", "practice", "program", "functionality", "skills", "packages", "database", "http", "memory", "databases", "expense", "context", "whitespace", "headers", "expression", "libraries", "operation", "logic", "codebase", "effect", "instance", "length", "resources", "code", "layer", "security", "download", "pages", "features", "objects", "benefit", "links", "caveats", "collection", "language", "levels", "improvements", "strategy", "issues", "ability"], "type": "documentation"},
{"title": "Security in Django", "url": "https://docs.djangoproject.com/en/5.1/topics/security/", "content": "Security in Django ¶ This document is an overview of Django’s security features. It includes advice\non securing a Django-powered site. Cross site scripting (XSS) protection ¶ XSS attacks allow a user to inject client side scripts into the browsers of\nother users. This is usually achieved by storing the malicious scripts in the\ndatabase where it will be retrieved and displayed to other users, or by getting\nusers to click a link which will cause the attacker’s JavaScript to be executed\nby the user’s browser. However, XSS attacks can originate from any untrusted\nsource of data, such as cookies or web services, whenever the data is not\nsufficiently sanitized before including in a page. Using Django templates protects you against the majority of XSS attacks.\nHowever, it is important to understand what protections it provides\nand its limitations. Django templates escape specific characters which are particularly dangerous to HTML. While this protects users from most\nmalicious input, it is not entirely foolproof. For example, it will not\nprotect the following: <style class={{ var }}>...</style> If var is set to 'class1 onmouseover=javascript:func()' , this can result\nin unauthorized JavaScript execution, depending on how the browser renders\nimperfect HTML. (Quoting the attribute value would fix this case.) It is also important to be particularly careful when using is_safe with\ncustom template tags, the safe template tag, mark_safe , and when autoescape is turned off. In addition, if you are using the template system to output something other\nthan HTML, there may be entirely separate characters and words which require\nescaping. You should also be very careful when storing HTML in the database, especially\nwhen that HTML is retrieved and displayed. Cross site request forgery (CSRF) protection ¶ CSRF attacks allow a malicious user to execute actions using the credentials\nof another user without that user’s knowledge or consent. Django has built-in protection against most types of CSRF attacks, providing you\nhave enabled and used it where appropriate. However, as with\nany mitigation technique, there are limitations. For example, it is possible to\ndisable the CSRF module globally or for particular views. You should only do\nthis if you know what you are doing. There are other limitations if your site has subdomains that are outside of your\ncontrol. CSRF protection works by checking for a secret in each\nPOST request. This ensures that a malicious user cannot “replay” a form POST to\nyour website and have another logged in user unwittingly submit that form. The\nmalicious user would have to know the secret, which is user specific (using a\ncookie). When deployed with HTTPS , CsrfViewMiddleware will check that the HTTP referer header is set to a\nURL on the same origin (including subdomain and port). Because HTTPS\nprovides additional security, it is imperative to ensure connections use HTTPS\nwhere it is available by forwarding insecure connection requests and using\nHSTS for supported browsers. Be very careful with marking views with the csrf_exempt decorator unless\nit is absolutely necessary. SQL injection protection ¶ SQL injection is a type of attack where a malicious user is able to execute\narbitrary SQL code on a database. This can result in records\nbeing deleted or data leakage. Django’s querysets are protected from SQL injection since their queries are\nconstructed using query parameterization. A query’s SQL code is defined\nseparately from the query’s parameters. Since parameters may be user-provided\nand therefore unsafe, they are escaped by the underlying database driver. Django also gives developers power to write raw queries or execute custom sql .\nThese capabilities should be used sparingly and you should always be careful to\nproperly escape any parameters that the user can control. In addition, you\nshould exercise caution when using extra() and RawSQL . Clickjacking protection ¶ Clickjacking is a type of attack where a malicious site wraps another site\nin a frame. This attack can result in an unsuspecting user being tricked\ninto performing unintended actions on the target site. Django contains clickjacking protection in\nthe form of the X-Frame-Options middleware which in a supporting browser can prevent a site from being rendered inside\na frame. It is possible to disable the protection on a per view basis\nor to configure the exact header value sent. The middleware is strongly recommended for any site that does not need to have\nits pages wrapped in a frame by third party sites, or only needs to allow that\nfor a small section of the site. SSL/HTTPS ¶ It is always better for security to deploy your site behind HTTPS. Without\nthis, it is possible for malicious network users to sniff authentication\ncredentials or any other information transferred between client and server, and\nin some cases – active network attackers – to alter data that is sent in\neither direction. If you want the protection that HTTPS provides, and have enabled it on your\nserver, there are some additional steps you may need: If necessary, set SECURE_PROXY_SSL_HEADER , ensuring that you have\nunderstood the warnings there thoroughly. Failure to do this can result\nin CSRF vulnerabilities, and failure to do it correctly can also be\ndangerous! Set SECURE_SSL_REDIRECT to True , so that requests over HTTP\nare redirected to HTTPS. Please note the caveats under SECURE_PROXY_SSL_HEADER . For the\ncase of a reverse proxy, it may be easier or more secure to configure the\nmain web server to do the redirect to HTTPS. Use ‘secure’ cookies. If a browser connects initially via HTTP, which is the default for most\nbrowsers, it is possible for existing cookies to be leaked. For this reason,\nyou should set your SESSION_COOKIE_SECURE and CSRF_COOKIE_SECURE settings to True . This instructs the browser\nto only send these cookies over HTTPS connections. Note that this will mean\nthat sessions will not work over HTTP, and the CSRF protection will prevent\nany POST data being accepted over HTTP (which will be fine if you are\nredirecting all HTTP traffic to HTTPS). Use HTTP Strict Transport Security (HSTS) HSTS is an HTTP header that informs a browser that all future connections\nto a particular site should always use HTTPS. Combined with redirecting\nrequests over HTTP to HTTPS, this will ensure that connections always enjoy\nthe added security of SSL provided one successful connection has occurred.\nHSTS may either be configured with SECURE_HSTS_SECONDS , SECURE_HSTS_INCLUDE_SUBDOMAINS , and SECURE_HSTS_PRELOAD ,\nor on the web server. Host header validation ¶ Django uses the Host header provided by the client to construct URLs in\ncertain cases. While these values are sanitized to prevent Cross Site Scripting\nattacks, a fake Host value can be used for Cross-Site Request Forgery,\ncache poisoning attacks, and poisoning links in emails. Because even seemingly-secure web server configurations are susceptible to fake Host headers, Django validates Host headers against the ALLOWED_HOSTS setting in the django.http.HttpRequest.get_host() method. This validation only applies via get_host() ;\nif your code accesses the Host header directly from request.META you\nare bypassing this security protection. For more details see the full ALLOWED_HOSTS documentation. Warning Previous versions of this document recommended configuring your web server to\nensure it validates incoming HTTP Host headers. While this is still\nrecommended, in many common web servers a configuration that seems to\nvalidate the Host header may not in fact do so. For instance, even if\nApache is configured such that your Django site is served from a non-default\nvirtual host with the ServerName set, it is still possible for an HTTP\nrequest to match this virtual host and supply a fake Host header. Thus,\nDjango now requires that you set ALLOWED_HOSTS explicitly rather\nthan relying on web server configuration. Additionally, Django requires you to explicitly enable support for the X-Forwarded-Host header (via the USE_X_FORWARDED_HOST setting)\nif your configuration requires it. Referrer policy ¶ Browsers use the Referer header as a way to send information to a site\nabout how users got there. By setting a Referrer Policy you can help to\nprotect the privacy of your users, restricting under which circumstances the Referer header is set. See the referrer policy section of the\nsecurity middleware reference for details. Cross-origin opener policy ¶ The cross-origin opener policy (COOP) header allows browsers to isolate a\ntop-level window from other documents by putting them in a different context\ngroup so that they cannot directly interact with the top-level window. If a\ndocument protected by COOP opens a cross-origin popup window, the popup’s window.opener property will be null . COOP protects against cross-origin\nattacks. See the cross-origin opener policy section of the security\nmiddleware reference for details. Session security ¶ Similar to the CSRF limitations requiring a site to\nbe deployed such that untrusted users don’t have access to any subdomains, django.contrib.sessions also has limitations. See the session\ntopic guide section on security for details. User-uploaded content ¶ Note Consider serving static files from a cloud service or CDN to avoid some of these issues. If your site accepts file uploads, it is strongly advised that you limit\nthese uploads in your web server configuration to a reasonable\nsize in order to prevent denial of service (DOS) attacks. In Apache, this\ncan be easily set using the LimitRequestBody directive. If you are serving your own static files, be sure that handlers like Apache’s mod_php , which would execute static files as code, are disabled. You don’t\nwant users to be able to execute arbitrary code by uploading and requesting a\nspecially crafted file. Django’s media upload handling poses some vulnerabilities when that media is\nserved in ways that do not follow security best practices. Specifically, an\nHTML file can be uploaded as an image if that file contains a valid PNG\nheader followed by malicious HTML. This file will pass verification of the\nlibrary that Django uses for ImageField image\nprocessing (Pillow). When this file is subsequently displayed to a\nuser, it may be displayed as HTML depending on the type and configuration of\nyour web server. No bulletproof technical solution exists at the framework level to safely\nvalidate all user uploaded file content, however, there are some other steps\nyou can take to mitigate these attacks: One class of attacks can be prevented by always serving user uploaded\ncontent from a distinct top-level or second-level domain. This prevents\nany exploit blocked by same-origin policy protections such as cross\nsite scripting. For example, if your site runs on example.com , you\nwould want to serve uploaded content (the MEDIA_URL setting)\nfrom something like usercontent-example.com . It’s not sufficient to\nserve content from a subdomain like usercontent.example.com . Beyond this, applications may choose to define a list of allowable\nfile extensions for user uploaded files and configure the web server\nto only serve such files. Additional security topics ¶ While Django provides good security protection out of the box, it is still\nimportant to properly deploy your application and take advantage of the\nsecurity protection of the web server, operating system and other components. Make sure that your Python code is outside of the web server’s root. This\nwill ensure that your Python code is not accidentally served as plain text\n(or accidentally executed). Take care with any user uploaded files . Django does not throttle requests to authenticate users. To protect against\nbrute-force attacks against the authentication system, you may consider\ndeploying a Django plugin or web server module to throttle these requests. Keep your SECRET_KEY , and SECRET_KEY_FALLBACKS if in\nuse, secret. It is a good idea to limit the accessibility of your caching system and\ndatabase using a firewall. Take a look at the Open Web Application Security Project (OWASP) Top 10\nlist which identifies some common vulnerabilities in web applications. While\nDjango has tools to address some of the issues, other issues must be\naccounted for in the design of your project. Mozilla discusses various topics regarding web security . Their\npages also include security principles that apply to any system.", "keywords": ["strict", "website", "connection", "characters", "driver", "browser", "https", "warnings", "similar", "type", "secret", "xss", "template", "class1", "url", "subdomain", "querysets", "cache", "support", "majority", "control", "types", "image", "setting", "order", "templates", "basis", "documentation", "-", "django.contrib.sessions", "get_host", "servers", "style", "popup", "uploads", "secure_ssl_redirect", "insecure", "settings", "transport", "reason", "secure_proxy_ssl_header", "application", "scripting", "overview", "property", "records", "middleware", "party", "method", "port", "imagefield", "png", "configurations", "httprequest.get_host", "secret_key", "verification", "system", "mozilla", "upload", "values", "site", "files", "query", "cases", "dos", "solution", "use", "var", "following", "views", "cookies", "escaping", "protects", "ways", "information", "advice", "scripts", "project", "media", "topic", "attacker", "owasp", "section", "authentication", "versions", "limitations", "way", "¶", "service", "default", "idea", "design", "referer", "services", "forgery", "media_url", "custom", "web", "decorator", "client", "referrer", "input", "side", "browsers", "domain", "credentials", "injection", "target", "server", "apache", "page", "documents", "urls", "processing", "sites", "origin", "window.opener", "access", "capabilities", "usercontent-example.com", "bulletproof", "example", "javascript", "session", "users", "mitigation", "guide", "n’t", "value", "cdn", "content", "handlers", "source", "knowledge", "use_x_forwarded_host", "case", "class", "words", "components", "applications", "request", "firewall", "redirect", "attacks", "autoescape", "advantage", "html", "subdomains", "ssl", "csrf_cookie_secure", "protections", "exploit", "connections", "attack", "attribute", "cross", "developers", "class=", "session_cookie_secure", "meta", "care", "practices", "list", "details", "hsts", "x", "proxy", "protection", "coop", "actions", "pillow", "policy", "steps", "open", "data", "view", "secret_key_fallbacks", "form", "group", "cookie", "options", "root", "user", "secure_hsts_include_subdomains", "header", "file", "queries", "library", "privacy", "size", "window", "emails", "python", "link", "direction", "clickjacking", "addition", "secure_hsts_seconds", "extensions", "network", "execution", "configuration", "force", "sql", "note", "box", "leakage", "sessions", "host", "directive", "post", "principles", "level", "technique", "django", "consent", "tag", "tools", "fact", "look", "servername", "failure", "accessibility", "topics", "usercontent.example.com", "true", "document", "tags", "validation", "csrf", "mark_safe", "rawsql", "set", "opener", "module", "framework", "vulnerabilities", "text", "requests", "database", "http", "operating", "func", "caution", "context", "django.http", "headers", "poisoning", "parameterization", "onmouseover", "instance", "security", "features", "code", "reference", "denial", "pages", "traffic", "caveats", "links", "frame", "attackers", "parameters", "issues", "mod_php", "csrfviewmiddleware", "power"], "type": "documentation"},
{"title": "Pagination", "url": "https://docs.djangoproject.com/en/5.1/topics/pagination/", "content": "Pagination ¶ Django provides high-level and low-level ways to help you manage paginated data\n– that is, data that’s split across several pages, with “Previous/Next” links. The Paginator class ¶ Under the hood, all methods of pagination use the Paginator class. It does all the heavy lifting\nof actually splitting a QuerySet into Page objects. Example ¶ Give Paginator a list of objects, plus the\nnumber of items you’d like to have on each page, and it gives you methods for\naccessing the items for each page: >>> from django.core.paginator import Paginator >>> objects = [ \"john\" , \"paul\" , \"george\" , \"ringo\" ] >>> p = Paginator ( objects , 2 ) >>> p . count 4 >>> p . num_pages 2 >>> type ( p . page_range ) <class 'range_iterator'> >>> p . page_range range(1, 3) >>> page1 = p . page ( 1 ) >>> page1 <Page 1 of 2> >>> page1 . object_list ['john', 'paul'] >>> page2 = p . page ( 2 ) >>> page2 . object_list ['george', 'ringo'] >>> page2 . has_next () False >>> page2 . has_previous () True >>> page2 . has_other_pages () True >>> page2 . next_page_number () Traceback (most recent call last): ... EmptyPage : That page contains no results >>> page2 . previous_page_number () 1 >>> page2 . start_index () # The 1-based index of the first item on this page 3 >>> page2 . end_index () # The 1-based index of the last item on this page 4 >>> p . page ( 0 ) Traceback (most recent call last): ... EmptyPage : That page number is less than 1 >>> p . page ( 3 ) Traceback (most recent call last): ... EmptyPage : That page contains no results Note Note that you can give Paginator a list/tuple, a Django QuerySet ,\nor any other object with a count() or __len__() method. When\ndetermining the number of objects contained in the passed object, Paginator will first try calling count() , then fallback to using len() if the passed object has no count() method. This allows\nobjects such as Django’s QuerySet to use a more efficient count() method when available. Paginating a ListView ¶ django.views.generic.list.ListView provides a builtin way to paginate\nthe displayed list. You can do this by adding a paginate_by attribute to\nyour view class, for example: from django.views.generic import ListView from myapp.models import Contact class ContactListView ( ListView ): paginate_by = 2 model = Contact This limits the number of objects per page and adds a paginator and page_obj to the context . To allow your users to navigate between pages,\nadd links to the next and previous page, in your template like this: {% for contact in page_obj %} {# Each \"contact\" is a Contact model object. #} {{ contact.full_name | upper }} < br > ... {% endfor %} < div class = \"pagination\" > < span class = \"step-links\" > {% if page_obj.has_previous %} < a href = \"?page=1\" > &laquo; first </ a > < a href = \"?page= {{ page_obj.previous_page_number }} \" > previous </ a > {% endif %} < span class = \"current\" > Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }} . </ span > {% if page_obj.has_next %} < a href = \"?page= {{ page_obj.next_page_number }} \" > next </ a > < a href = \"?page= {{ page_obj.paginator.num_pages }} \" > last &raquo; </ a > {% endif %} </ span > </ div > Using Paginator in a view function ¶ Here’s an example using Paginator in a view\nfunction to paginate a queryset: from django.core.paginator import Paginator from django.shortcuts import render from myapp.models import Contact def listing ( request ): contact_list = Contact . objects . all () paginator = Paginator ( contact_list , 25 ) # Show 25 contacts per page. page_number = request . GET . get ( \"page\" ) page_obj = paginator . get_page ( page_number ) return render ( request , \"list.html\" , { \"page_obj\" : page_obj }) In the template list.html , you can include navigation between pages in\nthe same way as in the template for the ListView above.", "keywords": ["index", "end_index", "listview", "type", "paul", "template", "contactlistview", "give", "%", "p", "def", "django.core.paginator", "false", "has_previous", "django.views.generic.list", "count", "_", "method", "queryset", "lifting", "contact", "paginate_by", "navigation", "page_range", "import", "'", "ways", "has_other_pages", "page_obj.has_previous", "items", "item", "john", "#", "len", "way", "¶", "listing", "page1", "methods", "pagination", "model", "page_obj", "page", "george", "page_obj.previous_page_number", "render", "results", "span", "example", "users", "contacts", "class", "page_obj.has_next", "number", "paginator", "raquo", "request", "tuple", "return", "list.html", "attribute", "function", "laquo", "list", "href", "page_obj.next_page_number", "data", "get_page", "view", "myapp.models", "hood", "object", "endfor", "page2", "div", "traceback", "contact_list", "level", "django", "|", "contact.full_name", "start_index", "num_pages", "true", "range(1", "ringo", "emptypage", "range_iterator", "page_number", "page_obj.paginator.num_pages", "has_next", "context", "=", "pages", "page_obj.number", "objects", "links", "step", "call"], "type": "documentation"},
{"title": "Logging", "url": "https://docs.djangoproject.com/en/5.1/topics/logging/", "content": "Logging ¶ See also How to configure and use logging Django logging reference Python programmers will often use print() in their code as a quick and\nconvenient debugging tool. Using the logging framework is only a little more\neffort than that, but it’s much more elegant and flexible. As well as being\nuseful for debugging, logging can also provide you with more - and better\nstructured - information about the state and health of your application. Overview ¶ Django uses and extends Python’s builtin logging module to perform\nsystem logging. This module is discussed in detail in Python’s own\ndocumentation; this section provides a quick overview. The cast of players ¶ A Python logging configuration consists of four parts: Loggers Handlers Filters Formatters Loggers ¶ A logger is the entry point into the logging system. Each logger is a named\nbucket to which messages can be written for processing. A logger is configured to have a log level . This log level describes\nthe severity of the messages that the logger will handle. Python\ndefines the following log levels: DEBUG : Low level system information for debugging purposes INFO : General system information WARNING : Information describing a minor problem that has\noccurred. ERROR : Information describing a major problem that has\noccurred. CRITICAL : Information describing a critical problem that has\noccurred. Each message that is written to the logger is a Log Record . Each log\nrecord also has a log level indicating the severity of that specific\nmessage. A log record can also contain useful metadata that describes\nthe event that is being logged. This can include details such as a\nstack trace or an error code. When a message is given to the logger, the log level of the message is\ncompared to the log level of the logger. If the log level of the\nmessage meets or exceeds the log level of the logger itself, the\nmessage will undergo further processing. If it doesn’t, the message\nwill be ignored. Once a logger has determined that a message needs to be processed,\nit is passed to a Handler . Handlers ¶ The handler is the engine that determines what happens to each message\nin a logger. It describes a particular logging behavior, such as\nwriting a message to the screen, to a file, or to a network socket. Like loggers, handlers also have a log level. If the log level of a\nlog record doesn’t meet or exceed the level of the handler, the\nhandler will ignore the message. A logger can have multiple handlers, and each handler can have a\ndifferent log level. In this way, it is possible to provide different\nforms of notification depending on the importance of a message. For\nexample, you could install one handler that forwards ERROR and CRITICAL messages to a paging service, while a second handler\nlogs all messages (including ERROR and CRITICAL messages) to a\nfile for later analysis. Filters ¶ A filter is used to provide additional control over which log records\nare passed from logger to handler. By default, any log message that meets log level requirements will be\nhandled. However, by installing a filter, you can place additional\ncriteria on the logging process. For example, you could install a\nfilter that only allows ERROR messages from a particular source to\nbe emitted. Filters can also be used to modify the logging record prior to being\nemitted. For example, you could write a filter that downgrades ERROR log records to WARNING records if a particular set of\ncriteria are met. Filters can be installed on loggers or on handlers; multiple filters\ncan be used in a chain to perform multiple filtering actions. Formatters ¶ Ultimately, a log record needs to be rendered as text. Formatters describe the exact format of that text. A formatter usually consists\nof a Python formatting string containing LogRecord attributes ; however,\nyou can also write custom formatters to implement specific formatting behavior. Security implications ¶ The logging system handles potentially sensitive information. For example, the\nlog record may contain information about a web request or a stack trace, while\nsome of the data you collect in your own loggers may also have security\nimplications. You need to be sure you know: what information is collected where it will subsequently be stored how it will be transferred who might have access to it. To help control the collection of sensitive information, you can explicitly\ndesignate certain sensitive information to be filtered out of error reports –\nread more about how to filter error reports . AdminEmailHandler ¶ The built-in AdminEmailHandler deserves a mention in\nthe context of security. If its include_html option is enabled, the email\nmessage it sends will contain a full traceback, with names and values of local\nvariables at each level of the stack, plus the values of your Django settings\n(in other words, the same level of detail that is exposed in a web page when DEBUG is True ). It’s generally not considered a good idea to send such potentially sensitive\ninformation over email. Consider instead using one of the many third-party\nservices to which detailed logs can be sent to get the best of multiple worlds\n– the rich information of full tracebacks, clear management of who is notified\nand has access to the information, and so on. Configuring logging ¶ Python’s logging library provides several techniques to configure\nlogging, ranging from a programmatic interface to configuration files.\nBy default, Django uses the dictConfig format . In order to configure logging, you use LOGGING to define a\ndictionary of logging settings. These settings describe the loggers,\nhandlers, filters and formatters that you want in your logging setup,\nand the log levels and other properties that you want those components\nto have. By default, the LOGGING setting is merged with Django’s\ndefault logging configuration using the\nfollowing scheme. If the disable_existing_loggers key in the LOGGING dictConfig is\nset to True (which is the dictConfig default if the key is missing)\nthen all loggers from the default configuration will be disabled. Disabled\nloggers are not the same as removed; the logger will still exist, but will\nsilently discard anything logged to it, not even propagating entries to a\nparent logger. Thus you should be very careful using 'disable_existing_loggers': True ; it’s probably not what you want. Instead,\nyou can set disable_existing_loggers to False and redefine some or all\nof the default loggers; or you can set LOGGING_CONFIG to None and handle logging config yourself . Logging is configured as part of the general Django setup() function.\nTherefore, you can be certain that loggers are always ready for use in your\nproject code. Examples ¶ The full documentation for dictConfig format is the best source of information about logging configuration dictionaries.\nHowever, to give you a taste of what is possible, here are several examples. To begin, here’s a small configuration that will allow you to output all log\nmessages to the console: settings.py ¶ import os LOGGING = { \"version\" : 1 , \"disable_existing_loggers\" : False , \"handlers\" : { \"console\" : { \"class\" : \"logging.StreamHandler\" , }, }, \"root\" : { \"handlers\" : [ \"console\" ], \"level\" : \"WARNING\" , }, } This configures the parent root logger to send messages with the WARNING level and higher to the console handler. By adjusting the level to INFO or DEBUG you can display more messages. This may be useful during\ndevelopment. Next we can add more fine-grained logging. Here’s an example of how to make the\nlogging system print more messages from just the django named\nlogger: settings.py ¶ import os LOGGING = { \"version\" : 1 , \"disable_existing_loggers\" : False , \"handlers\" : { \"console\" : { \"class\" : \"logging.StreamHandler\" , }, }, \"root\" : { \"handlers\" : [ \"console\" ], \"level\" : \"WARNING\" , }, \"loggers\" : { \"django\" : { \"handlers\" : [ \"console\" ], \"level\" : os . getenv ( \"DJANGO_LOG_LEVEL\" , \"INFO\" ), \"propagate\" : False , }, }, } By default, this config sends messages from the django logger of level INFO or higher to the console. This is the same level as Django’s default\nlogging config, except that the default config only displays log records when DEBUG=True . Django does not log many such INFO level messages. With\nthis config, however, you can also set the environment variable DJANGO_LOG_LEVEL=DEBUG to see all of Django’s debug logging which is very\nverbose as it includes all database queries. You don’t have to log to the console. Here’s a configuration which writes all\nlogging from the django named logger to a local file: settings.py ¶ LOGGING = { \"version\" : 1 , \"disable_existing_loggers\" : False , \"handlers\" : { \"file\" : { \"level\" : \"DEBUG\" , \"class\" : \"logging.FileHandler\" , \"filename\" : \"/path/to/django/debug.log\" , }, }, \"loggers\" : { \"django\" : { \"handlers\" : [ \"file\" ], \"level\" : \"DEBUG\" , \"propagate\" : True , }, }, } If you use this example, be sure to change the 'filename' path to a\nlocation that’s writable by the user that’s running the Django application. Finally, here’s an example of a fairly complex logging setup: settings.py ¶ LOGGING = { \"version\" : 1 , \"disable_existing_loggers\" : False , \"formatters\" : { \"verbose\" : { \"format\" : \" {levelname} {asctime} {module} {process:d} {thread:d} {message} \" , \"style\" : \"{\" , }, \"simple\" : { \"format\" : \" {levelname} {message} \" , \"style\" : \"{\" , }, }, \"filters\" : { \"special\" : { \"()\" : \"project.logging.SpecialFilter\" , \"foo\" : \"bar\" , }, \"require_debug_true\" : { \"()\" : \"django.utils.log.RequireDebugTrue\" , }, }, \"handlers\" : { \"console\" : { \"level\" : \"INFO\" , \"filters\" : [ \"require_debug_true\" ], \"class\" : \"logging.StreamHandler\" , \"formatter\" : \"simple\" , }, \"mail_admins\" : { \"level\" : \"ERROR\" , \"class\" : \"django.utils.log.AdminEmailHandler\" , \"filters\" : [ \"special\" ], }, }, \"loggers\" : { \"django\" : { \"handlers\" : [ \"console\" ], \"propagate\" : True , }, \"django.request\" : { \"handlers\" : [ \"mail_admins\" ], \"level\" : \"ERROR\" , \"propagate\" : False , }, \"myproject.custom\" : { \"handlers\" : [ \"console\" , \"mail_admins\" ], \"level\" : \"INFO\" , \"filters\" : [ \"special\" ], }, }, } This logging configuration does the following things: Identifies the configuration as being in ‘dictConfig version 1’\nformat. At present, this is the only dictConfig format version. Defines two formatters: simple , that outputs the log level name (e.g., DEBUG ) and the log\nmessage. The format string is a normal Python formatting string\ndescribing the details that are to be output on each logging\nline. The full list of detail that can be output can be\nfound in Formatter Objects . verbose , that outputs the log level name, the log\nmessage, plus the time, process, thread and module that\ngenerate the log message. Defines two filters: project.logging.SpecialFilter , using the alias special . If this\nfilter required additional arguments, they can be provided as additional\nkeys in the filter configuration dictionary. In this case, the argument foo will be given a value of bar when instantiating SpecialFilter . django.utils.log.RequireDebugTrue , which passes on records when DEBUG is True . Defines two handlers: console , a StreamHandler , which prints any INFO (or higher) message to sys.stderr . This handler uses the simple output format. mail_admins , an AdminEmailHandler , which\nemails any ERROR (or higher) message to the site ADMINS .\nThis handler uses the special filter. Configures three loggers: django , which passes all messages to the console handler. django.request , which passes all ERROR messages to\nthe mail_admins handler. In addition, this logger is\nmarked to not propagate messages. This means that log\nmessages written to django.request will not be handled\nby the django logger. myproject.custom , which passes all messages at INFO or higher that also pass the special filter to two\nhandlers – the console , and mail_admins . This\nmeans that all INFO level messages (or higher) will be\nprinted to the console; ERROR and CRITICAL messages will also be output via email. Custom logging configuration ¶ If you don’t want to use Python’s dictConfig format to configure your\nlogger, you can specify your own configuration scheme. The LOGGING_CONFIG setting defines the callable that will\nbe used to configure Django’s loggers. By default, it points at\nPython’s logging.config.dictConfig() function. However, if you want to\nuse a different configuration process, you can use any other callable\nthat takes a single argument. The contents of LOGGING will\nbe provided as the value of that argument when logging is configured. Disabling logging configuration ¶ If you don’t want to configure logging at all (or you want to manually\nconfigure logging using your own approach), you can set LOGGING_CONFIG to None . This will disable the\nconfiguration process for Django’s default logging . Setting LOGGING_CONFIG to None only means that the automatic\nconfiguration process is disabled, not logging itself. If you disable the\nconfiguration process, Django will still make logging calls, falling back to\nwhatever default logging behavior is defined. Here’s an example that disables Django’s logging configuration and then\nmanually configures logging: settings.py ¶ LOGGING_CONFIG = None import logging.config logging . config . dictConfig ( ... ) Note that the default configuration process only calls LOGGING_CONFIG once settings are fully-loaded. In contrast, manually\nconfiguring the logging in your settings file will load your logging config\nimmediately. As such, your logging config must appear after any settings on\nwhich it depends.", "keywords": ["state", "dictionary", "contrast", "log", "callable", "interface", "filehandler", "error", "line", "logger", "debug", "control", "setting", "order", "documentation", "filter", "stack", "socket", "development", "style", "critical", "settings", "players", "false", "time", "application", "require_debug_true", "management", "overview", "info", "records", "party", "behavior", "system", "metadata", "values", "analysis", "reports", "site", "files", "getenv", "use", "special", "import", "messages", "problem", "record", "bar", "information", "project", "forwards", "point", "output", "section", "way", "idea", "¶", "service", "filters", "default", "formatter", "option", "services", "techniques", "custom", "web", "location", "effort", "requirements", "mail_admins", "entries", "configure", "page", "none", "processing", "variables", "tracebacks", "format", "trace", "process", "disable_existing_loggers", "access", "purposes", "formatters", "example", "displays", "worlds", "calls", "tool", "formatting", "os", "event", "email", "value", "configures", "handlers", "source", "requiredebugtrue", "case", "argument", "class", "logrecord", "words", "components", "print", "programmers", "request", "version", "engine", "chain", "config", "function", "examples", "string", "health", "things", "list", "details", "properties", "bucket", "screen", "filename", "actions", "data", "setup", "parts", "name", "root", "environment", "user", "warning", "implications", "part", "file", "queries", "library", "python", "parent", "dictionaries", "present", "addition", "logs", "logging", "verbose", "logging.config", "loggers", "handler", "network", "traceback", "taste", "streamhandler", "keys", "configuration", "myproject.custom", "defines", "notification", "path", "level", "severity", "django", "names", "specialfilter", "cast", "message", "django_log_level", "levelname", "thread", "dictconfig", "true", "set", "text", "framework", "criteria", "approach", "module", "arguments", "contents", "importance", "foo", "mention", "database", "context", "adminemailhandler", "forms", "reference", "security", "code", "=", "console", "detail", "logging.config.dictconfig", "objects", "key", "levels", "collection", "django.utils.log", "scheme", "entry", "alias", "project.logging"], "type": "documentation"},
{"title": "Internationalization and localization", "url": "https://docs.djangoproject.com/en/5.1/topics/i18n/", "content": "Internationalization and localization ¶ Overview ¶ The goal of internationalization and localization is to allow a single web\napplication to offer its content in languages and formats tailored to the\naudience. Django has full support for translation of text , formatting of dates, times and numbers , and time zones . Essentially, Django does two things: It allows developers and template authors to specify which parts of their apps\nshould be translated or formatted for local languages and cultures. It uses these hooks to localize web apps for particular users according to\ntheir preferences. Translation depends on the target language, and formatting usually depends on\nthe target country. This information is provided by browsers in the Accept-Language header. However, the time zone isn’t readily available. Definitions ¶ The words “internationalization” and “localization” often cause confusion;\nhere’s a simplified definition: internationalization ¶ Preparing the software for localization. Usually done by developers. localization ¶ Writing the translations and local formats. Usually done by translators. More details can be found in the W3C Web Internationalization FAQ , the Wikipedia article or the GNU gettext documentation . Warning Translation is controlled by the USE_I18N setting. However, it\ninvolves internationalization and localization. The name of the setting is\nan unfortunate result of Django’s history. Here are some other terms that will help us to handle a common language: locale name ¶ A locale name, either a language specification of the form ll or a\ncombined language and country specification of the form ll_CC .\nExamples: it , de_AT , es , pt_BR , sr_Latn . The language\npart is always in lowercase. The country part is in titlecase if it has\nmore than 2 characters, otherwise it’s in uppercase. The separator is an\nunderscore. language code ¶ Represents the name of a language. Browsers send the names of the\nlanguages they accept in the Accept-Language HTTP header using this\nformat. Examples: it , de-at , es , pt-br . Language codes\nare generally represented in lowercase, but the HTTP Accept-Language header is case-insensitive. The separator is a dash. message file ¶ A message file is a plain-text file, representing a single language,\nthat contains all available translation strings and how they should be represented in the given\nlanguage. Message files have a .po file extension. translation string ¶ A literal that can be translated. format file ¶ A format file is a Python module that defines the data formats for a given\nlocale.", "keywords": ["characters", "preferences", "accept", "software", "audience", "template", "support", "translation", "country", "setting", "documentation", "time", "application", "pt", "overview", "es", "authors", "lowercase", "codes", "dash", "files", "times", "information", "article", "translations", "specification", "result", "zones", "underscore", "¶", "cultures", "web", "literal", "definition", "browsers", "target", "gnu", "terms", "format", "users", "formatting", "definitions", "content", "case", "words", "localization", "numbers", "languages", "wikipedia", "internationalization", "br", "developers", "examples", "string", "things", "uppercase", "details", "gettext", "data", "confusion", "form", "parts", "name", "extension", "warning", "header", "part", "file", "translators", "python", "history", "formats", "titlecase", "dates", "faq", "names", "django", "message", "separator", "text", "module", "apps", "goal", "locale", "strings", "http", "hooks", "code", "w3c", "language", "zone"], "type": "documentation"},
{"title": "Sending email", "url": "https://docs.djangoproject.com/en/5.1/topics/email/", "content": "Sending email ¶ Although Python provides a mail sending interface via the smtplib module, Django provides a couple of light wrappers over it. These wrappers are\nprovided to make sending email extra quick, to help test email sending during\ndevelopment, and to provide support for platforms that can’t use SMTP. The code lives in the django.core.mail module. Quick examples ¶ Use send_mail() for straightforward email sending. For example, to send a\nplain text message: from django.core.mail import send_mail send_mail ( \"Subject here\" , \"Here is the message.\" , \"from@example.com\" , [ \"to@example.com\" ], fail_silently = False , ) When additional email sending functionality is needed, use EmailMessage or EmailMultiAlternatives . For example, to send\na multipart email that includes both HTML and plain text versions with a\nspecific template and custom headers, you can use the following approach: from django.core.mail import EmailMultiAlternatives from django.template.loader import render_to_string # First, render the plain text content. text_content = render_to_string ( \"templates/emails/my_email.txt\" , context = { \"my_variable\" : 42 }, ) # Secondly, render the HTML content. html_content = render_to_string ( \"templates/emails/my_email.html\" , context = { \"my_variable\" : 42 }, ) # Then, create a multipart email instance. msg = EmailMultiAlternatives ( \"Subject here\" , text_content , \"from@example.com\" , [ \"to@example.com\" ], headers = { \"List-Unsubscribe\" : \"<mailto:unsub@example.com>\" }, ) # Lastly, attach the HTML content to the email instance and send. msg . attach_alternative ( html_content , \"text/html\" ) msg . send () Mail is sent using the SMTP host and port specified in the EMAIL_HOST and EMAIL_PORT settings. The EMAIL_HOST_USER and EMAIL_HOST_PASSWORD settings, if\nset, are used to authenticate to the SMTP server, and the EMAIL_USE_TLS and EMAIL_USE_SSL settings control whether\na secure connection is used. Note The character set of email sent with django.core.mail will be set to\nthe value of your DEFAULT_CHARSET setting. send_mail() ¶ send_mail ( subject , message , from_email , recipient_list , fail_silently = False , auth_user = None , auth_password = None , connection = None , html_message = None ) [source] ¶ In most cases, you can send email using django.core.mail.send_mail() . The subject , message , from_email and recipient_list parameters\nare required. subject : A string. message : A string. from_email : A string. If None , Django will use the value of the DEFAULT_FROM_EMAIL setting. recipient_list : A list of strings, each an email address. Each\nmember of recipient_list will see the other recipients in the “To:”\nfield of the email message. fail_silently : A boolean. When it’s False , send_mail() will raise\nan smtplib.SMTPException if an error occurs. See the smtplib docs for a list of possible exceptions, all of which are subclasses of SMTPException . auth_user : The optional username to use to authenticate to the SMTP\nserver. If this isn’t provided, Django will use the value of the EMAIL_HOST_USER setting. auth_password : The optional password to use to authenticate to the\nSMTP server. If this isn’t provided, Django will use the value of the EMAIL_HOST_PASSWORD setting. connection : The optional email backend to use to send the mail.\nIf unspecified, an instance of the default backend will be used.\nSee the documentation on Email backends for more details. html_message : If html_message is provided, the resulting email will be a multipart/alternative email with message as the text/plain content type and html_message as the text/html content type. The return value will be the number of successfully delivered messages (which\ncan be 0 or 1 since it can only send one message). send_mass_mail() ¶ send_mass_mail ( datatuple , fail_silently = False , auth_user = None , auth_password = None , connection = None ) [source] ¶ django.core.mail.send_mass_mail() is intended to handle mass emailing. datatuple is a tuple in which each element is in this format: ( subject , message , from_email , recipient_list ) fail_silently , auth_user and auth_password have the same functions\nas in send_mail() . Each separate element of datatuple results in a separate email message.\nAs in send_mail() , recipients in the same recipient_list will all see the other addresses in the email messages’\n“To:” field. For example, the following code would send two different messages to\ntwo different sets of recipients; however, only one connection to the\nmail server would be opened: message1 = ( \"Subject here\" , \"Here is the message\" , \"from@example.com\" , [ \"first@example.com\" , \"other@example.com\" ], ) message2 = ( \"Another Subject\" , \"Here is another message\" , \"from@example.com\" , [ \"second@test.com\" ], ) send_mass_mail (( message1 , message2 ), fail_silently = False ) The return value will be the number of successfully delivered messages. send_mass_mail() vs. send_mail() ¶ The main difference between send_mass_mail() and send_mail() is that send_mail() opens a connection to the mail server\neach time it’s executed, while send_mass_mail() uses\na single connection for all of its messages. This makes send_mass_mail() slightly more efficient. mail_admins() ¶ mail_admins ( subject , message , fail_silently = False , connection = None , html_message = None ) [source] ¶ django.core.mail.mail_admins() is a shortcut for sending an email to the\nsite admins, as defined in the ADMINS setting. mail_admins() prefixes the subject with the value of the EMAIL_SUBJECT_PREFIX setting, which is \"[Django] \" by default. The “From:” header of the email will be the value of the SERVER_EMAIL setting. This method exists for convenience and readability. If html_message is provided, the resulting email will be a multipart/alternative email with message as the text/plain content type and html_message as the text/html content type. mail_managers() ¶ mail_managers ( subject , message , fail_silently = False , connection = None , html_message = None ) [source] ¶ django.core.mail.mail_managers() is just like mail_admins() , except it\nsends an email to the site managers, as defined in the MANAGERS setting. Examples ¶ This sends a single email to john @ example . com and jane @ example . com , with them\nboth appearing in the “To:”: send_mail ( \"Subject\" , \"Message.\" , \"from@example.com\" , [ \"john@example.com\" , \"jane@example.com\" ], ) This sends a message to john @ example . com and jane @ example . com , with them both\nreceiving a separate email: datatuple = ( ( \"Subject\" , \"Message.\" , \"from@example.com\" , [ \"john@example.com\" ]), ( \"Subject\" , \"Message.\" , \"from@example.com\" , [ \"jane@example.com\" ]), ) send_mass_mail ( datatuple ) Preventing header injection ¶ Header injection is a security exploit in which an attacker inserts extra\nemail headers to control the “To:” and “From:” in email messages that your\nscripts generate. The Django email functions outlined above all protect against header injection\nby forbidding newlines in header values. If any subject , from_email or recipient_list contains a newline (in either Unix, Windows or Mac style),\nthe email function (e.g. send_mail() ) will raise django.core.mail.BadHeaderError (a subclass of ValueError ) and, hence,\nwill not send the email. It’s your responsibility to validate all data before\npassing it to the email functions. If a message contains headers at the start of the string, the headers will\nbe printed as the first bit of the email message. Here’s an example view that takes a subject , message and from_email from the request’s POST data, sends that to admin @ example . com and redirects to\n“/contact/thanks/” when it’s done: from django.core.mail import BadHeaderError , send_mail from django.http import HttpResponse , HttpResponseRedirect def send_email ( request ): subject = request . POST . get ( \"subject\" , \"\" ) message = request . POST . get ( \"message\" , \"\" ) from_email = request . POST . get ( \"from_email\" , \"\" ) if subject and message and from_email : try : send_mail ( subject , message , from_email , [ \"admin@example.com\" ]) except BadHeaderError : return HttpResponse ( \"Invalid header found.\" ) return HttpResponseRedirect ( \"/contact/thanks/\" ) else : # In reality we'd use a form class # to get proper validation errors. return HttpResponse ( \"Make sure all fields are entered and valid.\" ) The EmailMessage class ¶ Django’s send_mail() and send_mass_mail() functions are actually thin\nwrappers that make use of the EmailMessage class. Not all features of the EmailMessage class are\navailable through the send_mail() and related\nwrapper functions. If you wish to use advanced features, such as BCC’ed\nrecipients, file attachments, or multi-part email, you’ll need to create EmailMessage instances directly. Note This is a design feature. send_mail() and\nrelated functions were originally the only interface Django provided.\nHowever, the list of parameters they accepted was slowly growing over\ntime. It made sense to move to a more object-oriented design for email\nmessages and retain the original functions only for backwards\ncompatibility. EmailMessage is responsible for creating the email\nmessage itself. The email backend is then\nresponsible for sending the email. For convenience, EmailMessage provides a send() method for sending a single email. If you need to send multiple messages, the\nemail backend API provides an alternative . EmailMessage Objects ¶ class EmailMessage [source] ¶ The EmailMessage class is initialized with the\nfollowing parameters (in the given order, if positional arguments are used).\nAll parameters are optional and can be set at any time prior to calling the send() method. subject : The subject line of the email. body : The body text. This should be a plain text message. from_email : The sender’s address. Both fred@example.com and \"Fred\" <fred@example.com> forms are legal. If omitted, the DEFAULT_FROM_EMAIL setting is used. to : A list or tuple of recipient addresses. bcc : A list or tuple of addresses used in the “Bcc” header when\nsending the email. connection : An email backend instance. Use\nthis parameter if you are sending the EmailMessage via send() and you\nwant to use the same connection for multiple messages. If omitted, a new\nconnection is created when send() is called. This parameter is ignored\nwhen using send_messages() . attachments : A list of attachments to put on the message. These can\nbe either MIMEBase instances, or (filename, content, mimetype) triples. headers : A dictionary of extra headers to put on the message. The\nkeys are the header name, values are the header values. It’s up to the\ncaller to ensure header names and values are in the correct format for\nan email message. The corresponding attribute is extra_headers . cc : A list or tuple of recipient addresses used in the “Cc” header\nwhen sending the email. reply_to : A list or tuple of recipient addresses used in the “Reply-To”\nheader when sending the email. For example: from django.core.mail import EmailMessage email = EmailMessage ( \"Hello\" , \"Body goes here\" , \"from@example.com\" , [ \"to1@example.com\" , \"to2@example.com\" ], [ \"bcc@example.com\" ], reply_to = [ \"another@example.com\" ], headers = { \"Message-ID\" : \"foo\" }, ) The class has the following methods: send(fail_silently=False) sends the message. If a connection was\nspecified when the email was constructed, that connection will be used.\nOtherwise, an instance of the default backend will be instantiated and\nused. If the keyword argument fail_silently is True , exceptions\nraised while sending the message will be quashed. An empty list of\nrecipients will not raise an exception. It will return 1 if the message\nwas sent successfully, otherwise 0 . message() constructs a django.core.mail.SafeMIMEText object (a\nsubclass of Python’s MIMEText class) or a django.core.mail.SafeMIMEMultipart object holding the message to be\nsent. If you ever need to extend the EmailMessage class, you’ll probably want to\noverride this method to put the content you want into the MIME object. recipients() returns a list of all the recipients of the message,\nwhether they’re recorded in the to , cc or bcc attributes. This\nis another method you might need to override when subclassing, because the\nSMTP server needs to be told the full list of recipients when the message\nis sent. If you add another way to specify recipients in your class, they\nneed to be returned from this method as well. attach() creates a new file attachment and adds it to the message.\nThere are two ways to call attach() : You can pass it a single argument that is a MIMEBase instance. This will be inserted directly\ninto the resulting message. Alternatively, you can pass attach() three arguments: filename , content and mimetype . filename is the name\nof the file attachment as it will appear in the email, content is\nthe data that will be contained inside the attachment and mimetype is the optional MIME type for the attachment. If you\nomit mimetype , the MIME content type will be guessed from the\nfilename of the attachment. For example: message . attach ( \"design.png\" , img_data , \"image/png\" ) If you specify a mimetype of message/rfc822 , it will also\naccept django.core.mail.EmailMessage and email.message.Message . For a mimetype starting with text/ , content is expected to\nbe a string. Binary data will be decoded using UTF-8, and if that fails,\nthe MIME type will be changed to application/octet-stream and\nthe data will be attached unchanged. In addition, message/rfc822 attachments will no longer be\nbase64-encoded in violation of RFC 2046 Section 5.2.1 , which can cause\nissues with displaying the attachments in Evolution and Thunderbird . attach_file() creates a new attachment using a file from your\nfilesystem. Call it with the path of the file to attach and, optionally,\nthe MIME type to use for the attachment. If the MIME type is omitted, it\nwill be guessed from the filename. You can use it like this: message . attach_file ( \"/images/weather_map.png\" ) For MIME types starting with text/ , binary data is handled as in attach() . Sending alternative content types ¶ Sending multiple content versions ¶ It can be useful to include multiple versions of the content in an email; the\nclassic example is to send both text and HTML versions of a message. With\nDjango’s email library, you can do this using the EmailMultiAlternatives class. class EmailMultiAlternatives [source] ¶ A subclass of EmailMessage that has an\nadditional attach_alternative() method for including extra versions of\nthe message body in the email. All the other methods (including the class\ninitialization) are inherited directly from EmailMessage . attach_alternative ( content , mimetype ) [source] ¶ Attach an alternative representation of the message body in the email. For example, to send a text and HTML combination, you could write: from django.core.mail import EmailMultiAlternatives subject = \"hello\" from_email = \"from@example.com\" to = \"to@example.com\" text_content = \"This is an important message.\" html_content = \"<p>This is an <strong>important</strong> message.</p>\" msg = EmailMultiAlternatives ( subject , text_content , from_email , [ to ]) msg . attach_alternative ( html_content , \"text/html\" ) msg . send () Updating the default content type ¶ By default, the MIME type of the body parameter in an EmailMessage is \"text/plain\" . It is good\npractice to leave this alone, because it guarantees that any recipient will be\nable to read the email, regardless of their mail client. However, if you are\nconfident that your recipients can handle an alternative content type, you can\nuse the content_subtype attribute on the EmailMessage class to change the main content type.\nThe major type will always be \"text\" , but you can change the\nsubtype. For example: msg = EmailMessage ( subject , html_content , from_email , [ to ]) msg . content_subtype = \"html\" # Main content is now text/html msg . send () Email backends ¶ The actual sending of an email is handled by the email backend. The email backend class has the following methods: open() instantiates a long-lived email-sending connection. close() closes the current email-sending connection. send_messages(email_messages) sends a list of EmailMessage objects. If the connection is\nnot open, this call will implicitly open the connection, and close the\nconnection afterward. If the connection is already open, it will be\nleft open after mail has been sent. It can also be used as a context manager, which will automatically call open() and close() as needed: from django.core import mail with mail . get_connection () as connection : mail . EmailMessage ( subject1 , body1 , from1 , [ to1 ], connection = connection , ) . send () mail . EmailMessage ( subject2 , body2 , from2 , [ to2 ], connection = connection , ) . send () Obtaining an instance of an email backend ¶ The get_connection() function in django.core.mail returns an\ninstance of the email backend that you can use. get_connection ( backend = None , fail_silently = False , * args , ** kwargs ) [source] ¶ By default, a call to get_connection() will return an instance of the\nemail backend specified in EMAIL_BACKEND . If you specify the backend argument, an instance of that backend will be instantiated. The fail_silently argument controls how the backend should handle errors.\nIf fail_silently is True, exceptions during the email sending process\nwill be silently ignored. All other arguments are passed directly to the constructor of the\nemail backend. Django ships with several email sending backends. With the exception of the\nSMTP backend (which is the default), these backends are only useful during\ntesting and development. If you have special email sending requirements, you\ncan write your own email backend . SMTP backend ¶ class backends.smtp. EmailBackend ( host = None , port = None , username = None , password = None , use_tls = None , fail_silently = False , use_ssl = None , timeout = None , ssl_keyfile = None , ssl_certfile = None , ** kwargs ) ¶ This is the default backend. Email will be sent through a SMTP server. The value for each argument is retrieved from the matching setting if the\nargument is None : host : EMAIL_HOST port : EMAIL_PORT username : EMAIL_HOST_USER password : EMAIL_HOST_PASSWORD use_tls : EMAIL_USE_TLS use_ssl : EMAIL_USE_SSL timeout : EMAIL_TIMEOUT ssl_keyfile : EMAIL_SSL_KEYFILE ssl_certfile : EMAIL_SSL_CERTFILE The SMTP backend is the default configuration inherited by Django. If you\nwant to specify it explicitly, put the following in your settings: EMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\" If unspecified, the default timeout will be the one provided by socket.getdefaulttimeout() , which defaults to None (no timeout). Console backend ¶ Instead of sending out real emails the console backend just writes the\nemails that would be sent to the standard output. By default, the console\nbackend writes to stdout . You can use a different stream-like object by\nproviding the stream keyword argument when constructing the connection. To specify this backend, put the following in your settings: EMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\" This backend is not intended for use in production – it is provided as a\nconvenience that can be used during development. File backend ¶ The file backend writes emails to a file. A new file is created for each new\nsession that is opened on this backend. The directory to which the files are\nwritten is either taken from the EMAIL_FILE_PATH setting or from\nthe file_path keyword when creating a connection with get_connection() . To specify this backend, put the following in your settings: EMAIL_BACKEND = \"django.core.mail.backends.filebased.EmailBackend\" EMAIL_FILE_PATH = \"/tmp/app-messages\" # change this to a proper location This backend is not intended for use in production – it is provided as a\nconvenience that can be used during development. In-memory backend ¶ The 'locmem' backend stores messages in a special attribute of the django.core.mail module. The outbox attribute is created when the\nfirst message is sent. It’s a list with an EmailMessage instance for each message that would\nbe sent. To specify this backend, put the following in your settings: EMAIL_BACKEND = \"django.core.mail.backends.locmem.EmailBackend\" This backend is not intended for use in production – it is provided as a\nconvenience that can be used during development and testing. Django’s test runner automatically uses this backend for testing . Dummy backend ¶ As the name suggests the dummy backend does nothing with your messages. To\nspecify this backend, put the following in your settings: EMAIL_BACKEND = \"django.core.mail.backends.dummy.EmailBackend\" This backend is not intended for use in production – it is provided as a\nconvenience that can be used during development. Defining a custom email backend ¶ If you need to change how emails are sent you can write your own email\nbackend. The EMAIL_BACKEND setting in your settings file is then\nthe Python import path for your backend class. Custom email backends should subclass BaseEmailBackend that is located in\nthe django.core.mail.backends.base module. A custom email backend must\nimplement the send_messages(email_messages) method. This method receives a\nlist of EmailMessage instances and returns the\nnumber of successfully delivered messages. If your backend has any concept of\na persistent session or connection, you should also implement the open() and close() methods. Refer to smtp.EmailBackend for a reference\nimplementation. Sending multiple emails ¶ Establishing and closing an SMTP connection (or any other network connection,\nfor that matter) is an expensive process. If you have a lot of emails to send,\nit makes sense to reuse an SMTP connection, rather than creating and\ndestroying a connection every time you want to send an email. There are two ways you tell an email backend to reuse a connection. Firstly, you can use the send_messages() method on a connection. This takes\na list of EmailMessage (or subclass) instances, and sends them all\nusing that single connection. As a consequence, any connection set on an individual message is ignored. For example, if you have a function called get_notification_email() that\nreturns a list of EmailMessage objects representing\nsome periodic email you wish to send out, you could send these emails using\na single call to send_messages: from django.core import mail connection = mail . get_connection () # Use default email connection messages = get_notification_email () connection . send_messages ( messages ) In this example, the call to send_messages() opens a connection on the\nbackend, sends the list of messages, and then closes the connection again. The second approach is to use the open() and close() methods on the\nemail backend to manually control the connection. send_messages() will not\nmanually open or close the connection if it is already open, so if you\nmanually open the connection, you can control when it is closed. For example: from django.core import mail connection = mail . get_connection () # Manually open the connection connection . open () # Construct an email message that uses the connection email1 = mail . EmailMessage ( \"Hello\" , \"Body goes here\" , \"from@example.com\" , [ \"to1@example.com\" ], connection = connection , ) email1 . send () # Send the email # Construct two more messages email2 = mail . EmailMessage ( \"Hello\" , \"Body goes here\" , \"from@example.com\" , [ \"to2@example.com\" ], ) email3 = mail . EmailMessage ( \"Hello\" , \"Body goes here\" , \"from@example.com\" , [ \"to3@example.com\" ], ) # Send the two emails in a single call - connection . send_messages ([ email2 , email3 ]) # The connection was already open so send_messages() doesn't close it. # We need to manually close the connection. connection . close () Configuring email for development ¶ There are times when you do not want Django to send emails at\nall. For example, while developing a website, you probably don’t want\nto send out thousands of emails – but you may want to validate that\nemails will be sent to the right people under the right conditions,\nand that those emails will contain the correct content. The easiest way to configure email for local development is to use the console email backend. This backend\nredirects all email to stdout , allowing you to inspect the content of mail. The file email backend can also be useful\nduring development – this backend dumps the contents of every SMTP connection\nto a file that can be inspected at your leisure. Another approach is to use a “dumb” SMTP server that receives the emails\nlocally and displays them to the terminal, but does not actually send\nanything. The aiosmtpd package provides a way to accomplish this: python -m pip install aiosmtpd\n\npython -m aiosmtpd -n -l localhost:8025 This command will start a minimal SMTP server listening on port 8025 of\nlocalhost. This server prints to standard output all email headers and the\nemail body. You then only need to set the EMAIL_HOST and EMAIL_PORT accordingly. For a more detailed discussion of SMTP\nserver options, see the documentation of the aiosmtpd module. For information about unit-testing the sending of emails in your application,\nsee the Email services section of the testing documentation.", "keywords": ["send_messages(email_messages", "terminal", "smtpexception", "type", "line", "httpresponse", "def", "email_host", "username", "id", "settings", "content_subtype", "auth_password", "method", "omit", "email_host_user", "png", "testing", "attachments", "message2", "boolean", "sending", "use", "messages", "ways", "difference", "scripts", "important</strong", "way", "default", "outbox", "attach_alternative", "django.core.mail.mail_admins", "client", "sender", "requirements", "injection", "subtype", "package", "consequence", "evolution", "render_to_string", "text_content", "backend", "generate", "people", "argument", "mac", "prints", "alternative", "thousands", "filesystem", "wrappers", "tuple", "windows", "exploit", "email3", "html_content", "send_mail", "start", "triples", "element", "name", "email_use_tls", "header", "to3@example.com", "python", "addition", "instances", "constructor", "subclass", "host", "reply", "to1", "address", "*", "headers", "forms", "features", "from1", "socket.getdefaulttimeout", "feature", "send", "parameters", "issues", "smtplib", "dictionary", "octet", "emailmultialternatives", "error", "design", "template", "dummy", "setting", "order", "documentation", "development", "style", "sense", "application", "from2", "email_file_path", "port", "to2@example.com", "convenience", "mimetext", "concept", "files", "following", "import", "stdout", "information", "thanks/", "#", "attach", "newline", "section", "versions", "¶", "plain", "admins", "member", "email1", "datatuple", "couple", "server", "format", "example", "session", "unit", "value", "functions", "ssl_certfile", "source", "stream", "get_notification_email", "html_message", "html", "email_ssl_keyfile", "attach_file", "mass", "examples", "locmem", "details", "send_messages", "rfc", "attachment", "form", "object", "backends.smtp", "attributes", "library", "from_email", "reply_to", "matter", "email_ssl_certfile", "initialization", "password", "fred", "api", "bcc’ed", "post", "valueerror", "timeout", "conditions", "django", "ssl_keyfile", "message", "caller", "django.core.mail.send_mass_mail", "badheadererror", "parameter", "validation", "lot", "text", "approach", "field", "contents", "strings", "smtp", "=", "console", "body1", "discussion", "implementation", "recipient_list", "email_use_ssl", "connection", "wrapper", "interface", "templates", "recipients", "sets", "time", "reality", "exception", "newlines", "my_email.html", "args", "emailmessage", "site", "manager", "subclasses", "john", "com", "output", "fields", "django.core.mail.backends.locmem", "custom", "mime", "methods", "mail_admins", "keyword", "safemimemultipart", "none", "msg", "process", "thunderbird", "command", "responsibility", "email", "auth_user", "recipient", "production", "content", "john@example.com", "unix", "request", "email_subject_prefix", "redirects", "protect", "data", "matching", "message1", "options", "emailbackend", "readability", "combination", "shortcut", "django.core", "default_charset", "network", "email2", "kwargs", "violation", "subject1", "keys", "configuration", "send_mass_mail", "platforms", "subject2", "path", "directory", "managers", "module", "backends", "arguments", "safemimetext", "practice", "context", "memory", "body2", "aiosmtpd", "security", "server_email", "call", "addresses", "website", "get_connection", "my_email.txt", "email_port", "message.</p", "image", "support", "django.core.mail.mail_managers", "types", "docs", "subject", "utf-8", "false", "@", "values", "email_host_password", "cases", "runner", "times", "localhost", "attacker", "compatibility", "test", "services", "stores", "location", "django.core.mail.send_mail", "character", "email.message", "leisure", "results", "jane", "emailing", "cc", "n’t", "pip", "class", "number", "mimetype", "return", "attribute", "function", "rfc822", "string", "list", "bit", "filename", "view", "app", "body", "file", "email_backend", "emails", "errors", "5.2.1", "to1@example.com", "send_email", "exceptions", "bcc", "names", "to@example.com", "mail", "bcc@example.com", "representation", "set", "functionality", "django.core.mail.backends.base", "foo", "localhost:8025", "reference", "instance", "code", "django.core.mail", "unsubscribe"], "type": "documentation"},
{"title": "Cryptographic signing", "url": "https://docs.djangoproject.com/en/5.1/topics/signing/", "content": "Cryptographic signing ¶ The golden rule of web application security is to never trust data from\nuntrusted sources. Sometimes it can be useful to pass data through an\nuntrusted medium. Cryptographically signed values can be passed through an\nuntrusted channel safe in the knowledge that any tampering will be detected. Django provides both a low-level API for signing values and a high-level API\nfor setting and reading signed cookies, one of the most common uses of\nsigning in web applications. You may also find signing useful for the following: Generating “recover my account” URLs for sending to users who have\nlost their password. Ensuring data stored in hidden form fields has not been tampered with. Generating one-time secret URLs for allowing temporary access to a\nprotected resource, for example a downloadable file that a user has\npaid for. Protecting SECRET_KEY and SECRET_KEY_FALLBACKS ¶ When you create a new Django project using startproject , the settings.py file is generated automatically and gets a random SECRET_KEY value. This value is the key to securing signed\ndata – it is vital you keep this secure, or attackers could use it to\ngenerate their own signed values. SECRET_KEY_FALLBACKS can be used to rotate secret keys. The\nvalues will not be used to sign data, but if specified, they will be used to\nvalidate signed data and must be kept secure. Using the low-level API ¶ Django’s signing methods live in the django.core.signing module.\nTo sign a value, first instantiate a Signer instance: >>> from django.core.signing import Signer >>> signer = Signer () >>> value = signer . sign ( \"My string\" ) >>> value 'My string:GdMGD6HNQ_qdgxYP8yBZAdAIV1w' The signature is appended to the end of the string, following the colon.\nYou can retrieve the original value using the unsign method: >>> original = signer . unsign ( value ) >>> original 'My string' If you pass a non-string value to sign , the value will be forced to string\nbefore being signed, and the unsign result will give you that string\nvalue: >>> signed = signer . sign ( 2.5 ) >>> original = signer . unsign ( signed ) >>> original '2.5' If you wish to protect a list, tuple, or dictionary you can do so using the sign_object() and unsign_object() methods: >>> signed_obj = signer . sign_object ({ \"message\" : \"Hello!\" }) >>> signed_obj 'eyJtZXNzYWdlIjoiSGVsbG8hIn0:Xdc-mOFDjs22KsQAqfVfi8PQSPdo3ckWJxPWwQOFhR4' >>> obj = signer . unsign_object ( signed_obj ) >>> obj {'message': 'Hello!'} See Protecting complex data structures for more details. If the signature or value have been altered in any way, a django.core.signing.BadSignature exception will be raised: >>> from django.core import signing >>> value += \"m\" >>> try : ... original = signer . unsign ( value ) ... except signing . BadSignature : ... print ( \"Tampering detected!\" ) ... By default, the Signer class uses the SECRET_KEY setting to\ngenerate signatures. You can use a different secret by passing it to the Signer constructor: >>> signer = Signer ( key = \"my-other-secret\" ) >>> value = signer . sign ( \"My string\" ) >>> value 'My string:EkfQJafvGyiofrdGnuthdxImIJw' class Signer ( * , key = None , sep = ':' , salt = None , algorithm = None , fallback_keys = None ) [source] ¶ Returns a signer which uses key to generate signatures and sep to\nseparate values. sep cannot be in the URL safe base64 alphabet . This alphabet contains alphanumeric characters, hyphens,\nand underscores. algorithm must be an algorithm supported by hashlib , it defaults to 'sha256' . fallback_keys is a list\nof additional values used to validate signed data, defaults to SECRET_KEY_FALLBACKS . Using the salt argument ¶ If you do not wish for every occurrence of a particular string to have the same\nsignature hash, you can use the optional salt argument to the Signer class. Using a salt will seed the signing hash function with both the salt and\nyour SECRET_KEY : >>> signer = Signer () >>> signer . sign ( \"My string\" ) 'My string:GdMGD6HNQ_qdgxYP8yBZAdAIV1w' >>> signer . sign_object ({ \"message\" : \"Hello!\" }) 'eyJtZXNzYWdlIjoiSGVsbG8hIn0:Xdc-mOFDjs22KsQAqfVfi8PQSPdo3ckWJxPWwQOFhR4' >>> signer = Signer ( salt = \"extra\" ) >>> signer . sign ( \"My string\" ) 'My string:Ee7vGi-ING6n02gkcJ-QLHg6vFw' >>> signer . unsign ( \"My string:Ee7vGi-ING6n02gkcJ-QLHg6vFw\" ) 'My string' >>> signer . sign_object ({ \"message\" : \"Hello!\" }) 'eyJtZXNzYWdlIjoiSGVsbG8hIn0:-UWSLCE-oUAHzhkHviYz3SOZYBjFKllEOyVZNuUtM-I' >>> signer . unsign_object ( ... \"eyJtZXNzYWdlIjoiSGVsbG8hIn0:-UWSLCE-oUAHzhkHviYz3SOZYBjFKllEOyVZNuUtM-I\" ... ) {'message': 'Hello!'} Using salt in this way puts the different signatures into different\nnamespaces.  A signature that comes from one namespace (a particular salt\nvalue) cannot be used to validate the same plaintext string in a different\nnamespace that is using a different salt setting. The result is to prevent an\nattacker from using a signed string generated in one place in the code as input\nto another piece of code that is generating (and verifying) signatures using a\ndifferent salt. Unlike your SECRET_KEY , your salt argument does not need to stay\nsecret. Verifying timestamped values ¶ TimestampSigner is a subclass of Signer that appends a signed\ntimestamp to the value. This allows you to confirm that a signed value was\ncreated within a specified period of time: >>> from datetime import timedelta >>> from django.core.signing import TimestampSigner >>> signer = TimestampSigner () >>> value = signer . sign ( \"hello\" ) >>> value 'hello:1NMg5H:oPVuCqlJWmChm1rA2lyTUtelC-c' >>> signer . unsign ( value ) 'hello' >>> signer . unsign ( value , max_age = 10 ) SignatureExpired: Signature age 15.5289158821 > 10 seconds >>> signer . unsign ( value , max_age = 20 ) 'hello' >>> signer . unsign ( value , max_age = timedelta ( seconds = 20 )) 'hello' class TimestampSigner ( * , key = None , sep = ':' , salt = None , algorithm = 'sha256' ) [source] ¶ sign ( value ) [source] ¶ Sign value and append current timestamp to it. unsign ( value , max_age = None ) [source] ¶ Checks if value was signed less than max_age seconds ago,\notherwise raises SignatureExpired . The max_age parameter can\naccept an integer or a datetime.timedelta object. sign_object ( obj , serializer = JSONSerializer , compress = False ) ¶ Encode, optionally compress, append current timestamp, and sign complex\ndata structure (e.g. list, tuple, or dictionary). unsign_object ( signed_obj , serializer = JSONSerializer , max_age = None ) ¶ Checks if signed_obj was signed less than max_age seconds ago,\notherwise raises SignatureExpired . The max_age parameter can\naccept an integer or a datetime.timedelta object. Protecting complex data structures ¶ If you wish to protect a list, tuple or dictionary you can do so using the Signer.sign_object() and unsign_object() methods, or signing module’s dumps() or loads() functions (which are shortcuts for TimestampSigner(salt='django.core.signing').sign_object()/unsign_object() ).\nThese use JSON serialization under the hood. JSON ensures that even if your SECRET_KEY is stolen an attacker will not be able to execute\narbitrary commands by exploiting the pickle format: >>> from django.core import signing >>> signer = signing . TimestampSigner () >>> value = signer . sign_object ({ \"foo\" : \"bar\" }) >>> value 'eyJmb28iOiJiYXIifQ:1kx6R3:D4qGKiptAqo5QW9iv4eNLc6xl4RwiFfes6oOcYhkYnc' >>> signer . unsign_object ( value ) {'foo': 'bar'} >>> value = signing . dumps ({ \"foo\" : \"bar\" }) >>> value 'eyJmb28iOiJiYXIifQ:1kx6Rf:LBB39RQmME-SRvilheUe5EmPYRbuDBgQp2tCAi7KGLk' >>> signing . loads ( value ) {'foo': 'bar'} Because of the nature of JSON (there is no native distinction between lists\nand tuples) if you pass in a tuple, you will get a list from signing.loads(object) : >>> from django.core import signing >>> value = signing . dumps (( \"a\" , \"b\" , \"c\" )) >>> signing . loads ( value ) ['a', 'b', 'c'] dumps ( obj , key = None , salt = 'django.core.signing' , serializer = JSONSerializer , compress = False ) [source] ¶ Returns URL-safe, signed base64 compressed JSON string. Serialized object\nis signed using TimestampSigner . loads ( string , key = None , salt = 'django.core.signing' , serializer = JSONSerializer , max_age = None , fallback_keys = None ) [source] ¶ Reverse of dumps() , raises BadSignature if signature fails.\nChecks max_age (in seconds) if given.", "keywords": ["dictionary", "django.core.signing", "lists", "signed_obj", "structures", "characters", "+", "signing", "secret", "url", "shortcuts", "obj", "xdc", "nature", "eyjtzxnzywdlijoisgvsbg8hin0:-uwslce", "serialization", "signatureexpired", "-", "place", "m", "time", "eyjmb28ioijiyxiifq:1kx6r3", "application", "exception", "gdmgd6hnq_qdgxyp8ybzadaiv1w", "colon", "method", "encode", "timestampsigner(salt='django.core.signing').sign_object()/unsign_object", "mofdjs22ksqaqfvfi8pqspdo3ckwjxpwwqofhr4", "secret_key", "commands", "values", "opvucqljwmchm1ra2lytutelc", "following", "import", "badsignature", "pickle", "cookies", "hyphens", "signer", "bar", "'", "project", "json", "occurrence", "result", "attacker", "timestampsigner", "startproject", "fields", "way", "alphabet", "¶", "signature", "default", "resource", "piece", "srvilheue5empyrbudbgqp2tcai7kglk", "web", "methods", "input", "none", "urls", "signing.loads(object", "format", "serializer", "access", "signatures", "example", "age", "dumps", "checks", "users", "timedelta", "value", "tampering", "unsign", "functions", "channel", "hello:1nmg5h", "sep", "loads", "seconds", "end", "source", "knowledge", "hashlib", "argument", "class", "base64", "applications", "print", "signer.sign_object", "tuple", "tuples", "c", "integer", "function", "ekfqjafvgyiofrdgnuthdximijw", "string", "list", "details", "eyjmb28ioijiyxiifq:1kx6rf", "data", "qlhg6vfw", "ouahzhkhviyz3sozybjfklleoyvznuutm", "secret_key_fallbacks", "medium", "form", "uses", "hood", "i", "object", "user", "ee7vgi", "file", "hash", "sha256", "sources", "algorithm", "returns", "account", "namespaces", "django.core", "sign", "constructor", "password", "keys", "sign_object", "subclass", "distinction", "api", "verifying", "period", "d4qgkiptaqo5qw9iv4enlc6xl4rwiffes6oocyhkync", "salt", "level", "rule", "django", "ing6n02gkcj", "max_age", "message", "namespace", "parameter", "*", "structure", "module", "foo", "reverse", "datetime.timedelta", "instance", "security", "=", "code", "jsonserializer", "underscores", "key", "attackers", "defaults", "timestamp"], "type": "documentation"},
{"title": "Conditional View Processing", "url": "https://docs.djangoproject.com/en/5.1/topics/conditional-view-processing/", "content": "Conditional View Processing ¶ HTTP clients can send a number of headers to tell the server about copies of a\nresource that they have already seen. This is commonly used when retrieving a\nweb page (using an HTTP GET request) to avoid sending all the data for\nsomething the client has already retrieved. However, the same headers can be\nused for all HTTP methods ( POST , PUT , DELETE , etc.). For each page (response) that Django sends back from a view, it might provide\ntwo HTTP headers: the ETag header and the Last-Modified header. These\nheaders are optional on HTTP responses. They can be set by your view function,\nor you can rely on the ConditionalGetMiddleware middleware to set the ETag header. When the client next requests the same resource, it might send along a header\nsuch as either If-Modified-Since or If-Unmodified-Since , containing the date of the\nlast modification time it was sent, or either If-Match or If-None-Match ,\ncontaining the last ETag it was sent. If the current version of the page\nmatches the ETag sent by the client, or if the resource has not been\nmodified, a 304 status code can be sent back, instead of a full response,\ntelling the client that nothing has changed.  Depending on the header, if the\npage has been modified or does not match the ETag sent by the client, a 412\nstatus code (Precondition Failed) may be returned. When you need more fine-grained control you may use per-view conditional\nprocessing functions. The condition decorator ¶ Sometimes (in fact, quite often) you can create functions to rapidly compute\nthe ETag value or the last-modified time for a\nresource, without needing to do all the computations needed to construct\nthe full view. Django can then use these functions to provide an\n“early bailout” option for the view processing. Telling the client that the\ncontent has not been modified since the last request, perhaps. These two functions are passed as parameters to the django.views.decorators.http.condition decorator. This decorator uses\nthe two functions (you only need to supply one, if you can’t compute both\nquantities easily and quickly) to work out if the headers in the HTTP request\nmatch those on the resource. If they don’t match, a new copy of the resource\nmust be computed and your normal view is called. The condition decorator’s signature looks like this: condition ( etag_func = None , last_modified_func = None ) The two functions, to compute the ETag and the last modified time, will be\npassed the incoming request object and the same parameters, in the same\norder, as the view function they are helping to wrap. The function passed last_modified_func should return a standard datetime value specifying the\nlast time the resource was modified, or None if the resource doesn’t\nexist. The function passed to the etag decorator should return a string\nrepresenting the ETag for the resource, or None if it doesn’t exist. The decorator sets the ETag and Last-Modified headers on the response\nif they are not already set by the view and if the request’s method is safe\n( GET or HEAD ). Using this feature usefully is probably best explained with an example.\nSuppose you have this pair of models, representing a small blog system: import datetime from django.db import models class Blog ( models . Model ): ... class Entry ( models . Model ): blog = models . ForeignKey ( Blog , on_delete = models . CASCADE ) published = models . DateTimeField ( default = datetime . datetime . now ) ... If the front page, displaying the latest blog entries, only changes when you\nadd a new blog entry, you can compute the last modified time very quickly. You\nneed the latest published date for every entry associated with that blog.\nOne way to do this would be: def latest_entry ( request , blog_id ): return Entry . objects . filter ( blog = blog_id ) . latest ( \"published\" ) . published You can then use this function to provide early detection of an unchanged page\nfor your front page view: from django.views.decorators.http import condition @condition ( last_modified_func = latest_entry ) def front_page ( request , blog_id ): ... Be careful with the order of decorators When condition() returns a conditional response, any decorators below\nit will be skipped and won’t apply to the response. Therefore, any\ndecorators that need to apply to both the regular view response and a\nconditional response must be above condition() . In particular, vary_on_cookie() , vary_on_headers() , and cache_control() should come first\nbecause RFC 9110 requires that the headers\nthey set be present on 304 responses. Shortcuts for only computing one value ¶ As a general rule, if you can provide functions to compute both the ETag and\nthe last modified time, you should do so. You don’t know which headers any\ngiven HTTP client will send you, so be prepared to handle both. However,\nsometimes only one value is easy to compute and Django provides decorators\nthat handle only ETag or only last-modified computations. The django.views.decorators.http.etag and django.views.decorators.http.last_modified decorators are passed the same\ntype of functions as the condition decorator. Their signatures are: etag ( etag_func ) last_modified ( last_modified_func ) We could write the earlier example, which only uses a last-modified function,\nusing one of these decorators: @last_modified ( latest_entry ) def front_page ( request , blog_id ): ... …or: def front_page ( request , blog_id ): ... front_page = last_modified ( latest_entry )( front_page ) Use condition when testing both conditions ¶ It might look nicer to some people to try and chain the etag and last_modified decorators if you want to test both preconditions. However,\nthis would lead to incorrect behavior. # Bad code. Don't do this! @etag ( etag_func ) @last_modified ( last_modified_func ) def my_view ( request ): ... # End of bad code. The first decorator doesn’t know anything about the second and might\nanswer that the response is not modified even if the second decorators would\ndetermine otherwise. The condition decorator uses both callback functions\nsimultaneously to work out the right action to take. Using the decorators with other HTTP methods ¶ The condition decorator is useful for more than only GET and HEAD requests ( HEAD requests are the same as GET in this\nsituation). It can also be used to provide checking for POST , PUT and DELETE requests. In these situations, the idea isn’t to return\na “not modified” response, but to tell the client that the resource they are\ntrying to change has been altered in the meantime. For example, consider the following exchange between the client and server: Client requests /foo/ . Server responds with some content with an ETag of \"abcd1234\" . Client sends an HTTP PUT request to /foo/ to update the\nresource. It also sends an If-Match: \"abcd1234\" header to specify\nthe version it is trying to update. Server checks to see if the resource has changed, by computing the ETag\nthe same way it does for a GET request (using the same function).\nIf the resource has changed, it will return a 412 status code,\nmeaning “precondition failed”. Client sends a GET request to /foo/ , after receiving a 412\nresponse, to retrieve an updated version of the content before updating\nit. The important thing this example shows is that the same functions can be used\nto compute the ETag and last modification values in all situations. In fact,\nyou should use the same functions, so that the same values are returned\nevery time. Validator headers with non-safe request methods The condition decorator only sets validator headers ( ETag and Last-Modified ) for safe HTTP methods, i.e. GET and HEAD . If you\nwish to return them in other cases, set them in your view. See RFC 9110 Section 9.3.4 to learn about the distinction between setting a\nvalidator header in response to requests made with PUT versus POST . Comparison with middleware conditional processing ¶ Django provides conditional GET handling via django.middleware.http.ConditionalGetMiddleware . While being suitable\nfor many situations, the middleware has limitations for advanced usage: It’s applied globally to all views in your project. It doesn’t save you from generating the response, which may be expensive. It’s only appropriate for HTTP GET requests. You should choose the most appropriate tool for your particular problem here.\nIf you have a way to compute ETags and modification times quickly and if some\nview takes a while to generate the content, you should consider using the condition decorator described in this document. If everything already runs\nfairly quickly, stick to using the middleware and the amount of network\ntraffic sent back to the clients will still be reduced if the view hasn’t\nchanged.", "keywords": ["quantities", "match", "etag_func", "type", "shortcuts", "control", "clients", "datetime", "order", "changes", "filter", "def", "time", "modified", "middleware", "method", "delete", "if", "behavior", "system", "values", "put", "responses", "cases", "use", "status", "precondition", "import", "views", "problem", "times", "validator", "condition", "project", "#", "way", "idea", "section", "limitations", "¶", "signature", "default", "resource", "option", "blog_id", "conditionalgetmiddleware", "copy", "decorator", "web", "pair", "@condition", "methods", "client", "front_page", "usage", "entries", "model", "server", "page", "none", "processing", "etag", "callback", "bailout", "detection", "vary_on_cookie", "copies", "meantime", "signatures", "django.middleware.http", "example", "@etag", "checks", "n’t", "tool", "abcd1234", "functions", "value", "preconditions", "since", "content", "end", "computations", "people", "class", "number", "latest_entry", "request", "version", "blog", "return", "action", "checking", "function", "thing", "string", "data", "vary_on_headers", "view", "django.views.decorators.http.condition", "rfc", "my_view", "object", "datetimefield", "etags", "header", "comparison", "last_modified_func", "amount", "get", "response", "network", "sometimes", "distinction", "situations", "exchange", "while", "post", "conditions", "rule", "django", "modification", "fact", "failed", "document", "date", "head", "requests", "foreignkey", "http", "decorators", "headers", "code", "=", "feature", "models", "traffic", "parameters", "situation", "entry", "django.views.decorators.http.etag", "django.views.decorators.http"], "type": "documentation"},
{"title": "Django’s cache framework", "url": "https://docs.djangoproject.com/en/5.1/topics/cache/", "content": "Django’s cache framework ¶ A fundamental trade-off in dynamic websites is, well, they’re dynamic. Each\ntime a user requests a page, the web server makes all sorts of calculations –\nfrom database queries to template rendering to business logic – to create the\npage that your site’s visitor sees. This is a lot more expensive, from a\nprocessing-overhead perspective, than your standard\nread-a-file-off-the-filesystem server arrangement. For most web applications, this overhead isn’t a big deal. Most web\napplications aren’t washingtonpost.com or slashdot.org ; they’re small-\nto medium-sized sites with so-so traffic. But for medium- to high-traffic\nsites, it’s essential to cut as much overhead as possible. That’s where caching comes in. To cache something is to save the result of an expensive calculation so that\nyou don’t have to perform the calculation next time. Here’s some pseudocode\nexplaining how this would work for a dynamically generated web page: given a URL, try finding that page in the cache\nif the page is in the cache:\n    return the cached page\nelse:\n    generate the page\n    save the generated page in the cache (for next time)\n    return the generated page Django comes with a robust cache system that lets you save dynamic pages so\nthey don’t have to be calculated for each request. For convenience, Django\noffers different levels of cache granularity: You can cache the output of\nspecific views, you can cache only the pieces that are difficult to produce,\nor you can cache your entire site. Django also works well with “downstream” caches, such as Squid and browser-based caches. These are the types\nof caches that you don’t directly control but to which you can provide hints\n(via HTTP headers) about which parts of your site should be cached, and how. See also The Cache Framework design philosophy explains a few of the design decisions of the framework. Setting up the cache ¶ The cache system requires a small amount of setup. Namely, you have to tell it\nwhere your cached data should live – whether in a database, on the filesystem\nor directly in memory. This is an important decision that affects your cache’s\nperformance; yes, some cache types are faster than others. Your cache preference goes in the CACHES setting in your\nsettings file. Here’s an explanation of all available values for CACHES . Memcached ¶ Memcached is an entirely memory-based cache server, originally developed\nto handle high loads at LiveJournal.com and subsequently open-sourced by\nDanga Interactive. It is used by sites such as Facebook and Wikipedia to\nreduce database access and dramatically increase site performance. Memcached runs as a daemon and is allotted a specified amount of RAM. All it\ndoes is provide a fast interface for adding, retrieving and deleting data in\nthe cache. All data is stored directly in memory, so there’s no overhead of\ndatabase or filesystem usage. After installing Memcached itself, you’ll need to install a Memcached\nbinding. There are several Python Memcached bindings available; the\ntwo supported by Django are pylibmc and pymemcache . To use Memcached with Django: Set BACKEND to django.core.cache.backends.memcached.PyMemcacheCache or django.core.cache.backends.memcached.PyLibMCCache (depending on your\nchosen memcached binding) Set LOCATION to ip:port values,\nwhere ip is the IP address of the Memcached daemon and port is the\nport on which Memcached is running, or to a unix:path value, where path is the path to a Memcached Unix socket file. In this example, Memcached is running on localhost (127.0.0.1) port 11211, using\nthe pymemcache binding: CACHES = { \"default\" : { \"BACKEND\" : \"django.core.cache.backends.memcached.PyMemcacheCache\" , \"LOCATION\" : \"127.0.0.1:11211\" , } } In this example, Memcached is available through a local Unix socket file /tmp/memcached.sock using the pymemcache binding: CACHES = { \"default\" : { \"BACKEND\" : \"django.core.cache.backends.memcached.PyMemcacheCache\" , \"LOCATION\" : \"unix:/tmp/memcached.sock\" , } } One excellent feature of Memcached is its ability to share a cache over\nmultiple servers. This means you can run Memcached daemons on multiple\nmachines, and the program will treat the group of machines as a single cache, without the need to duplicate cache values on each machine. To take\nadvantage of this feature, include all server addresses in LOCATION , either as a semicolon or comma\ndelimited string, or as a list. In this example, the cache is shared over Memcached instances running on IP\naddress 172.19.26.240 and 172.19.26.242, both on port 11211: CACHES = { \"default\" : { \"BACKEND\" : \"django.core.cache.backends.memcached.PyMemcacheCache\" , \"LOCATION\" : [ \"172.19.26.240:11211\" , \"172.19.26.242:11211\" , ], } } In the following example, the cache is shared over Memcached instances running\non the IP addresses 172.19.26.240 (port 11211), 172.19.26.242 (port 11212), and\n172.19.26.244 (port 11213): CACHES = { \"default\" : { \"BACKEND\" : \"django.core.cache.backends.memcached.PyMemcacheCache\" , \"LOCATION\" : [ \"172.19.26.240:11211\" , \"172.19.26.242:11212\" , \"172.19.26.244:11213\" , ], } } By default, the PyMemcacheCache backend sets the following options (you can\noverride them in your OPTIONS ): \"OPTIONS\" : { \"allow_unicode_keys\" : True , \"default_noreply\" : False , \"serde\" : pymemcache . serde . pickle_serde , } A final point about Memcached is that memory-based caching has a\ndisadvantage: because the cached data is stored in memory, the data will be\nlost if your server crashes. Clearly, memory isn’t intended for permanent data\nstorage, so don’t rely on memory-based caching as your only data storage.\nWithout a doubt, none of the Django caching backends should be used for\npermanent storage – they’re all intended to be solutions for caching, not\nstorage – but we point this out here because memory-based caching is\nparticularly temporary. Redis ¶ Redis is an in-memory database that can be used for caching. To begin you’ll\nneed a Redis server running either locally or on a remote machine. After setting up the Redis server, you’ll need to install Python bindings for\nRedis. redis-py is the binding supported natively by Django.\nInstalling the hiredis-py package is also recommended. To use Redis as your cache backend with Django: Set BACKEND to django.core.cache.backends.redis.RedisCache . Set LOCATION to the URL pointing to your Redis\ninstance, using the appropriate scheme. See the redis-py docs for details on the available schemes . For example, if Redis is running on localhost (127.0.0.1) port 6379: CACHES = { \"default\" : { \"BACKEND\" : \"django.core.cache.backends.redis.RedisCache\" , \"LOCATION\" : \"redis://127.0.0.1:6379\" , } } Often Redis servers are protected with authentication. In order to supply a\nusername and password, add them in the LOCATION along with the URL: CACHES = { \"default\" : { \"BACKEND\" : \"django.core.cache.backends.redis.RedisCache\" , \"LOCATION\" : \"redis://username:password@127.0.0.1:6379\" , } } If you have multiple Redis servers set up in the replication mode, you can\nspecify the servers either as a semicolon or comma delimited string, or as a\nlist. While using multiple servers, write operations are performed on the first\nserver (leader). Read operations are performed on the other servers (replicas)\nchosen at random: CACHES = { \"default\" : { \"BACKEND\" : \"django.core.cache.backends.redis.RedisCache\" , \"LOCATION\" : [ \"redis://127.0.0.1:6379\" , # leader \"redis://127.0.0.1:6378\" , # read-replica 1 \"redis://127.0.0.1:6377\" , # read-replica 2 ], } } Database caching ¶ Django can store its cached data in your database. This works best if you’ve\ngot a fast, well-indexed database server. To use a database table as your cache backend: Set BACKEND to django.core.cache.backends.db.DatabaseCache Set LOCATION to tablename , the name of the\ndatabase table. This name can be whatever you want, as long as it’s a valid\ntable name that’s not already being used in your database. In this example, the cache table’s name is my_cache_table : CACHES = { \"default\" : { \"BACKEND\" : \"django.core.cache.backends.db.DatabaseCache\" , \"LOCATION\" : \"my_cache_table\" , } } Unlike other cache backends, the database cache does not support automatic\nculling of expired entries at the database level. Instead, expired cache\nentries are culled each time add() , set() , or touch() is called. Creating the cache table ¶ Before using the database cache, you must create the cache table with this\ncommand: python manage.py createcachetable This creates a table in your database that is in the proper format that\nDjango’s database-cache system expects. The name of the table is taken from LOCATION . If you are using multiple database caches, createcachetable creates\none table for each cache. If you are using multiple databases, createcachetable observes the allow_migrate() method of your database routers (see below). Like migrate , createcachetable won’t touch an existing\ntable. It will only create missing tables. To print the SQL that would be run, rather than run it, use the createcachetable --dry-run option. Multiple databases ¶ If you use database caching with multiple databases, you’ll also need\nto set up routing instructions for your database cache table. For the\npurposes of routing, the database cache table appears as a model named CacheEntry , in an application named django_cache . This model\nwon’t appear in the models cache, but the model details can be used\nfor routing purposes. For example, the following router would direct all cache read\noperations to cache_replica , and all write operations to cache_primary . The cache table will only be synchronized onto cache_primary : class CacheRouter : \"\"\"A router to control all database cache operations\"\"\" def db_for_read ( self , model , ** hints ): \"All cache read operations go to the replica\" if model . _meta . app_label == \"django_cache\" : return \"cache_replica\" return None def db_for_write ( self , model , ** hints ): \"All cache write operations go to primary\" if model . _meta . app_label == \"django_cache\" : return \"cache_primary\" return None def allow_migrate ( self , db , app_label , model_name = None , ** hints ): \"Only install the cache model on primary\" if app_label == \"django_cache\" : return db == \"cache_primary\" return None If you don’t specify routing directions for the database cache model,\nthe cache backend will use the default database. And if you don’t use the database cache backend, you don’t need to worry about\nproviding routing instructions for the database cache model. Filesystem caching ¶ The file-based backend serializes and stores each cache value as a separate\nfile. To use this backend set BACKEND to \"django.core.cache.backends.filebased.FileBasedCache\" and LOCATION to a suitable directory. For example,\nto store cached data in /var/tmp/django_cache , use this setting: CACHES = { \"default\" : { \"BACKEND\" : \"django.core.cache.backends.filebased.FileBasedCache\" , \"LOCATION\" : \"/var/tmp/django_cache\" , } } If you’re on Windows, put the drive letter at the beginning of the path,\nlike this: CACHES = { \"default\" : { \"BACKEND\" : \"django.core.cache.backends.filebased.FileBasedCache\" , \"LOCATION\" : \"c:/foo/bar\" , } } The directory path should be absolute – that is, it should start at the root\nof your filesystem. It doesn’t matter whether you put a slash at the end of the\nsetting. Make sure the directory pointed-to by this setting either exists and is\nreadable and writable, or that it can be created by the system user under which\nyour web server runs. Continuing the above example, if your server runs as the\nuser apache , make sure the directory /var/tmp/django_cache exists and\nis readable and writable by the user apache , or that it can be created by\nthe user apache . Warning When the cache LOCATION is contained within MEDIA_ROOT , STATIC_ROOT , or STATICFILES_FINDERS , sensitive data may be exposed. An attacker who gains access to the cache file can not only falsify HTML\ncontent, which your site will trust, but also remotely execute arbitrary\ncode, as the data is serialized using pickle . Warning Filesystem caching may become slow when storing a large number of files. If\nyou run into this problem, consider using a different caching mechanism.\nYou can also subclass FileBasedCache and\nimprove the culling strategy. Local-memory caching ¶ This is the default cache if another is not specified in your settings file. If\nyou want the speed advantages of in-memory caching but don’t have the capability\nof running Memcached, consider the local-memory cache backend. This cache is\nper-process (see below) and thread-safe. To use it, set BACKEND to \"django.core.cache.backends.locmem.LocMemCache\" . For\nexample: CACHES = { \"default\" : { \"BACKEND\" : \"django.core.cache.backends.locmem.LocMemCache\" , \"LOCATION\" : \"unique-snowflake\" , } } The cache LOCATION is used to identify individual\nmemory stores. If you only have one locmem cache, you can omit the LOCATION ; however, if you have more than one local\nmemory cache, you will need to assign a name to at least one of them in\norder to keep them separate. The cache uses a least-recently-used (LRU) culling strategy. Note that each process will have its own private cache instance, which means no\ncross-process caching is possible. This also means the local memory cache isn’t\nparticularly memory-efficient, so it’s probably not a good choice for\nproduction environments. It’s nice for development. Dummy caching (for development) ¶ Finally, Django comes with a “dummy” cache that doesn’t actually cache – it\njust implements the cache interface without doing anything. This is useful if you have a production site that uses heavy-duty caching in\nvarious places but a development/test environment where you don’t want to cache\nand don’t want to have to change your code to special-case the latter. To\nactivate dummy caching, set BACKEND like so: CACHES = { \"default\" : { \"BACKEND\" : \"django.core.cache.backends.dummy.DummyCache\" , } } Using a custom cache backend ¶ While Django includes support for a number of cache backends out-of-the-box,\nsometimes you might want to use a customized cache backend. To use an external\ncache backend with Django, use the Python import path as the BACKEND of the CACHES setting, like so: CACHES = { \"default\" : { \"BACKEND\" : \"path.to.backend\" , } } If you’re building your own backend, you can use the standard cache backends\nas reference implementations. You’ll find the code in the django/core/cache/backends/ directory of the Django source. Note: Without a really compelling reason, such as a host that doesn’t support\nthem, you should stick to the cache backends included with Django. They’ve\nbeen well-tested and are well-documented. Cache arguments ¶ Each cache backend can be given additional arguments to control caching\nbehavior. These arguments are provided as additional keys in the CACHES setting. Valid arguments are as follows: TIMEOUT : The default timeout, in\nseconds, to use for the cache. This argument defaults to 300 seconds (5 minutes).\nYou can set TIMEOUT to None so that, by default, cache keys never\nexpire. A value of 0 causes keys to immediately expire (effectively\n“don’t cache”). OPTIONS : Any options that should be\npassed to the cache backend. The list of valid options will vary\nwith each backend, and cache backends backed by a third-party library\nwill pass their options directly to the underlying cache library. Cache backends that implement their own culling strategy (i.e.,\nthe locmem , filesystem and database backends) will\nhonor the following options: MAX_ENTRIES : The maximum number of entries allowed in\nthe cache before old values are deleted. This argument\ndefaults to 300 . CULL_FREQUENCY : The fraction of entries that are culled\nwhen MAX_ENTRIES is reached. The actual ratio is 1 / CULL_FREQUENCY , so set CULL_FREQUENCY to 2 to\ncull half the entries when MAX_ENTRIES is reached. This argument\nshould be an integer and defaults to 3 . A value of 0 for CULL_FREQUENCY means that the\nentire cache will be dumped when MAX_ENTRIES is reached.\nOn some backends ( database in particular) this makes culling much faster at the expense of more cache misses. The Memcached and Redis backends pass the contents of OPTIONS as keyword arguments to the client constructors, allowing\nfor more advanced control of client behavior. For example usage, see below. KEY_PREFIX : A string that will be\nautomatically included (prepended by default) to all cache keys\nused by the Django server. See the cache documentation for\nmore information. VERSION : The default version number\nfor cache keys generated by the Django server. See the cache documentation for more\ninformation. KEY_FUNCTION A string containing a dotted path to a function that defines how\nto compose a prefix, version and key into a final cache key. See the cache documentation for more information. In this example, a filesystem backend is being configured with a timeout\nof 60 seconds, and a maximum capacity of 1000 items: CACHES = { \"default\" : { \"BACKEND\" : \"django.core.cache.backends.filebased.FileBasedCache\" , \"LOCATION\" : \"/var/tmp/django_cache\" , \"TIMEOUT\" : 60 , \"OPTIONS\" : { \"MAX_ENTRIES\" : 1000 }, } } Here’s an example configuration for a pylibmc based backend that enables\nthe binary protocol, SASL authentication, and the ketama behavior mode: CACHES = { \"default\" : { \"BACKEND\" : \"django.core.cache.backends.memcached.PyLibMCCache\" , \"LOCATION\" : \"127.0.0.1:11211\" , \"OPTIONS\" : { \"binary\" : True , \"username\" : \"user\" , \"password\" : \"pass\" , \"behaviors\" : { \"ketama\" : True , }, }, } } Here’s an example configuration for a pymemcache based backend that enables\nclient pooling (which may improve performance by keeping clients connected),\ntreats memcache/network errors as cache misses, and sets the TCP_NODELAY flag on the connection’s socket: CACHES = { \"default\" : { \"BACKEND\" : \"django.core.cache.backends.memcached.PyMemcacheCache\" , \"LOCATION\" : \"127.0.0.1:11211\" , \"OPTIONS\" : { \"no_delay\" : True , \"ignore_exc\" : True , \"max_pool_size\" : 4 , \"use_pooling\" : True , }, } } Here’s an example configuration for a redis based backend that selects\ndatabase 10 (by default Redis ships with 16 logical databases), and sets a\ncustom connection pool class ( redis.ConnectionPool is used by default): CACHES = { \"default\" : { \"BACKEND\" : \"django.core.cache.backends.redis.RedisCache\" , \"LOCATION\" : \"redis://127.0.0.1:6379\" , \"OPTIONS\" : { \"db\" : \"10\" , \"pool_class\" : \"redis.BlockingConnectionPool\" , }, } } The per-site cache ¶ Once the cache is set up, the simplest way to use caching is to cache your\nentire site. You’ll need to add 'django.middleware.cache.UpdateCacheMiddleware' and 'django.middleware.cache.FetchFromCacheMiddleware' to your MIDDLEWARE setting, as in this example: MIDDLEWARE = [ \"django.middleware.cache.UpdateCacheMiddleware\" , \"django.middleware.common.CommonMiddleware\" , \"django.middleware.cache.FetchFromCacheMiddleware\" , ] Note No, that’s not a typo: the “update” middleware must be first in the list,\nand the “fetch” middleware must be last. The details are a bit obscure, but\nsee Order of MIDDLEWARE below if you’d like the full story. Then, add the following required settings to your Django settings file: CACHE_MIDDLEWARE_ALIAS – The cache alias to use for storage. CACHE_MIDDLEWARE_SECONDS – The integer number of seconds each\npage should be cached. CACHE_MIDDLEWARE_KEY_PREFIX – If the cache is shared across\nmultiple sites using the same Django installation, set this to the name of\nthe site, or some other string that is unique to this Django instance, to\nprevent key collisions. Use an empty string if you don’t care. FetchFromCacheMiddleware caches GET and HEAD responses with status 200,\nwhere the request and response headers allow. Responses to requests for the same\nURL with different query parameters are considered to be unique pages and are\ncached separately. This middleware expects that a HEAD request is answered with\nthe same response headers as the corresponding GET request; in which case it can\nreturn a cached GET response for HEAD request. Additionally, UpdateCacheMiddleware automatically sets a few headers in\neach HttpResponse which affect downstream caches : Sets the Expires header to the current date/time plus the defined CACHE_MIDDLEWARE_SECONDS . Sets the Cache-Control header to give a max age for the page –\nagain, from the CACHE_MIDDLEWARE_SECONDS setting. See Middleware for more on middleware. If a view sets its own cache expiry time (i.e. it has a max-age section in\nits Cache-Control header) then the page will be cached until the expiry\ntime, rather than CACHE_MIDDLEWARE_SECONDS . Using the decorators in django.views.decorators.cache you can easily set a view’s expiry time\n(using the cache_control() decorator) or\ndisable caching for a view (using the never_cache() decorator). See the using other headers section for more on these decorators. If USE_I18N is set to True then the generated cache key will\ninclude the name of the active language – see also How Django discovers language preference ). This allows you to easily\ncache multilingual sites without having to create the cache key yourself. Cache keys also include the current time zone when USE_TZ is set to True . The per-view cache ¶ django.views.decorators.cache. cache_page ( timeout , * , cache = None , key_prefix = None ) ¶ A more granular way to use the caching framework is by caching the output of\nindividual views. django.views.decorators.cache defines a cache_page decorator that will automatically cache the view’s response for you: from django.views.decorators.cache import cache_page @cache_page ( 60 * 15 ) def my_view ( request ): ... cache_page takes a single argument: the cache timeout, in seconds. In the\nabove example, the result of the my_view() view will be cached for 15\nminutes. (Note that we’ve written it as 60 * 15 for the purpose of\nreadability. 60 * 15 will be evaluated to 900 – that is, 15 minutes\nmultiplied by 60 seconds per minute.) The cache timeout set by cache_page takes precedence over the max-age directive from the Cache-Control header. The per-view cache, like the per-site cache, is keyed off of the URL. If\nmultiple URLs point at the same view, each URL will be cached separately.\nContinuing the my_view example, if your URLconf looks like this: urlpatterns = [ path ( \"foo/<int:code>/\" , my_view ), ] then requests to /foo/1/ and /foo/23/ will be cached separately, as\nyou may expect. But once a particular URL (e.g., /foo/23/ ) has been\nrequested, subsequent requests to that URL will use the cache. cache_page can also take an optional keyword argument, cache ,\nwhich directs the decorator to use a specific cache (from your CACHES setting) when caching view results. By default, the default cache will be used, but you can specify any cache you\nwant: @cache_page ( 60 * 15 , cache = \"special_cache\" ) def my_view ( request ): ... You can also override the cache prefix on a per-view basis. cache_page takes an optional keyword argument, key_prefix ,\nwhich works in the same way as the CACHE_MIDDLEWARE_KEY_PREFIX setting for the middleware.  It can be used like this: @cache_page ( 60 * 15 , key_prefix = \"site1\" ) def my_view ( request ): ... The key_prefix and cache arguments may be specified together. The key_prefix argument and the KEY_PREFIX specified under CACHES will be concatenated. Additionally, cache_page automatically sets Cache-Control and Expires headers in the response which affect downstream caches . Specifying per-view cache in the URLconf ¶ The examples in the previous section have hard-coded the fact that the view is\ncached, because cache_page alters the my_view function in place. This\napproach couples your view to the cache system, which is not ideal for several\nreasons. For instance, you might want to reuse the view functions on another,\ncache-less site, or you might want to distribute the views to people who might\nwant to use them without being cached. The solution to these problems is to\nspecify the per-view cache in the URLconf rather than next to the view functions\nthemselves. You can do so by wrapping the view function with cache_page when you refer\nto it in the URLconf. Here’s the old URLconf from earlier: urlpatterns = [ path ( \"foo/<int:code>/\" , my_view ), ] Here’s the same thing, with my_view wrapped in cache_page : from django.views.decorators.cache import cache_page urlpatterns = [ path ( \"foo/<int:code>/\" , cache_page ( 60 * 15 )( my_view )), ] Template fragment caching ¶ If you’re after even more control, you can also cache template fragments using\nthe cache template tag. To give your template access to this tag, put {% load cache %} near the top of your template. The {% cache %} template tag caches the contents of the block for a given\namount of time. It takes at least two arguments: the cache timeout, in seconds,\nand the name to give the cache fragment. The fragment is cached forever if\ntimeout is None . The name will be taken as is, do not use a variable. For\nexample: {% load cache %} {% cache 500 sidebar %} .. sidebar .. {% endcache %} Sometimes you might want to cache multiple copies of a fragment depending on\nsome dynamic data that appears inside the fragment. For example, you might want a\nseparate cached copy of the sidebar used in the previous example for every user\nof your site. Do this by passing one or more additional arguments, which may be\nvariables with or without filters, to the {% cache %} template tag to\nuniquely identify the cache fragment: {% load cache %} {% cache 500 sidebar request.user.username %} .. sidebar for logged in user .. {% endcache %} If USE_I18N is set to True the per-site middleware cache will respect the active language . For the cache template\ntag you could use one of the translation-specific variables available in\ntemplates to achieve the same result: {% load i18n %} {% load cache %} {% get_current_language as LANGUAGE_CODE %} {% cache 600 welcome LANGUAGE_CODE %} {% translate \"Welcome to example.com\" %} {% endcache %} The cache timeout can be a template variable, as long as the template variable\nresolves to an integer value. For example, if the template variable my_timeout is set to the value 600 , then the following two examples are\nequivalent: {% cache 600 sidebar %} ... {% endcache %} {% cache my_timeout sidebar %} ... {% endcache %} This feature is useful in avoiding repetition in templates. You can set the\ntimeout in a variable, in one place, and reuse that value. By default, the cache tag will try to use the cache called “template_fragments”.\nIf no such cache exists, it will fall back to using the default cache. You may\nselect an alternate cache backend to use with the using keyword argument,\nwhich must be the last argument to the tag. {% cache 300 local-thing ... using = \"localcache\" %} It is considered an error to specify a cache name that is not configured. django.core.cache.utils. make_template_fragment_key ( fragment_name , vary_on = None ) ¶ If you want to obtain the cache key used for a cached fragment, you can use make_template_fragment_key . fragment_name is the same as second argument\nto the cache template tag; vary_on is a list of all additional arguments\npassed to the tag. This function can be useful for invalidating or overwriting\na cached item, for example: >>> from django.core.cache import cache >>> from django.core.cache.utils import make_template_fragment_key # cache key for {% cache 500 sidebar username %} >>> key = make_template_fragment_key ( \"sidebar\" , [ username ]) >>> cache . delete ( key ) # invalidates cached template fragment True The low-level cache API ¶ Sometimes, caching an entire rendered page doesn’t gain you very much and is,\nin fact, inconvenient overkill. Perhaps, for instance, your site includes a view whose results depend on\nseveral expensive queries, the results of which change at different intervals.\nIn this case, it would not be ideal to use the full-page caching that the\nper-site or per-view cache strategies offer, because you wouldn’t want to\ncache the entire result (since some of the data changes often), but you’d still\nwant to cache the results that rarely change. For cases like this, Django exposes a low-level cache API. You can use this API\nto store objects in the cache with any level of granularity you like.  You can\ncache any Python object that can be pickled safely: strings, dictionaries,\nlists of model objects, and so forth. (Most common Python objects can be\npickled; refer to the Python documentation for more information about\npickling.) Accessing the cache ¶ django.core.cache. caches ¶ You can access the caches configured in the CACHES setting\nthrough a dict-like object: django.core.cache.caches . Repeated\nrequests for the same alias in the same thread will return the same\nobject. >>> from django.core.cache import caches >>> cache1 = caches [ \"myalias\" ] >>> cache2 = caches [ \"myalias\" ] >>> cache1 is cache2 True If the named key does not exist, InvalidCacheBackendError will be\nraised. To provide thread-safety, a different instance of the cache backend will\nbe returned for each thread. django.core.cache. cache ¶ As a shortcut, the default cache is available as django.core.cache.cache : >>> from django.core.cache import cache This object is equivalent to caches['default'] . Basic usage ¶ The basic interface is: cache. set ( key , value , timeout = DEFAULT_TIMEOUT , version = None ) ¶ >>> cache . set ( \"my_key\" , \"hello, world!\" , 30 ) cache. get ( key , default = None , version = None ) ¶ >>> cache . get ( \"my_key\" ) 'hello, world!' key should be a str , and value can be any picklable Python object. The timeout argument is optional and defaults to the timeout argument\nof the appropriate backend in the CACHES setting (explained above).\nIt’s the number of seconds the value should be stored in the cache. Passing in None for timeout will cache the value forever. A timeout of 0 won’t cache the value. If the object doesn’t exist in the cache, cache.get() returns None : >>> # Wait 30 seconds for 'my_key' to expire... >>> cache . get ( \"my_key\" ) None If you need to determine whether the object exists in the cache and you have\nstored a literal value None , use a sentinel object as the default: >>> sentinel = object () >>> cache . get ( \"my_key\" , sentinel ) is sentinel False >>> # Wait 30 seconds for 'my_key' to expire... >>> cache . get ( \"my_key\" , sentinel ) is sentinel True cache.get() can take a default argument. This specifies which value to\nreturn if the object doesn’t exist in the cache: >>> cache . get ( \"my_key\" , \"has expired\" ) 'has expired' cache. add ( key , value , timeout = DEFAULT_TIMEOUT , version = None ) ¶ To add a key only if it doesn’t already exist, use the add() method.\nIt takes the same parameters as set() , but it will not attempt to\nupdate the cache if the key specified is already present: >>> cache . set ( \"add_key\" , \"Initial value\" ) >>> cache . add ( \"add_key\" , \"New value\" ) >>> cache . get ( \"add_key\" ) 'Initial value' If you need to know whether add() stored a value in the cache, you can\ncheck the return value. It will return True if the value was stored, False otherwise. cache. get_or_set ( key , default , timeout = DEFAULT_TIMEOUT , version = None ) ¶ If you want to get a key’s value or set a value if the key isn’t in the cache,\nthere is the get_or_set() method. It takes the same parameters as get() but the default is set as the new cache value for that key, rather than\nreturned: >>> cache . get ( \"my_new_key\" ) # returns None >>> cache . get_or_set ( \"my_new_key\" , \"my new value\" , 100 ) 'my new value' You can also pass any callable as a default value: >>> import datetime >>> cache . get_or_set ( \"some-timestamp-key\" , datetime . datetime . now ) datetime.datetime(2014, 12, 11, 0, 15, 49, 457920) cache. get_many ( keys , version = None ) ¶ There’s also a get_many() interface that only hits the cache once. get_many() returns a dictionary with all the keys you asked for that\nactually exist in the cache (and haven’t expired): >>> cache . set ( \"a\" , 1 ) >>> cache . set ( \"b\" , 2 ) >>> cache . set ( \"c\" , 3 ) >>> cache . get_many ([ \"a\" , \"b\" , \"c\" ]) {'a': 1, 'b': 2, 'c': 3} cache. set_many ( dict , timeout ) ¶ To set multiple values more efficiently, use set_many() to pass a dictionary\nof key-value pairs: >>> cache . set_many ({ \"a\" : 1 , \"b\" : 2 , \"c\" : 3 }) >>> cache . get_many ([ \"a\" , \"b\" , \"c\" ]) {'a': 1, 'b': 2, 'c': 3} Like cache.set() , set_many() takes an optional timeout parameter. On supported backends (memcached), set_many() returns a list of keys that\nfailed to be inserted. cache. delete ( key , version = None ) ¶ You can delete keys explicitly with delete() to clear the cache for a\nparticular object: >>> cache . delete ( \"a\" ) True delete() returns True if the key was successfully deleted, False otherwise. cache. delete_many ( keys , version = None ) ¶ If you want to clear a bunch of keys at once, delete_many() can take a list\nof keys to be cleared: >>> cache . delete_many ([ \"a\" , \"b\" , \"c\" ]) cache. clear () ¶ Finally, if you want to delete all the keys in the cache, use cache.clear() .  Be careful with this; clear() will remove everything from the cache, not just the keys set by your application: >>> cache . clear () cache. touch ( key , timeout = DEFAULT_TIMEOUT , version = None ) ¶ cache.touch() sets a new expiration for a key. For example, to update a key\nto expire 10 seconds from now: >>> cache . touch ( \"a\" , 10 ) True Like other methods, the timeout argument is optional and defaults to the TIMEOUT option of the appropriate backend in the CACHES setting. touch() returns True if the key was successfully touched, False otherwise. cache. incr ( key , delta = 1 , version = None ) ¶ cache. decr ( key , delta = 1 , version = None ) ¶ You can also increment or decrement a key that already exists using the incr() or decr() methods, respectively. By default, the existing cache\nvalue will be incremented or decremented by 1. Other increment/decrement values\ncan be specified by providing an argument to the increment/decrement call. A\nValueError will be raised if you attempt to increment or decrement a\nnonexistent cache key: >>> cache . set ( \"num\" , 1 ) >>> cache . incr ( \"num\" ) 2 >>> cache . incr ( \"num\" , 10 ) 12 >>> cache . decr ( \"num\" ) 11 >>> cache . decr ( \"num\" , 5 ) 6 Note incr() / decr() methods are not guaranteed to be atomic. On those\nbackends that support atomic increment/decrement (most notably, the\nmemcached backend), increment and decrement operations will be atomic.\nHowever, if the backend doesn’t natively provide an increment/decrement\noperation, it will be implemented using a two-step retrieve/update. cache. close () ¶ You can close the connection to your cache with close() if implemented by\nthe cache backend. >>> cache . close () Note For caches that don’t implement close methods it is a no-op. Note The async variants of base methods are prefixed with a , e.g. cache.aadd() or cache.adelete_many() . See Asynchronous support for more details. Cache key prefixing ¶ If you are sharing a cache instance between servers, or between your\nproduction and development environments, it’s possible for data cached\nby one server to be used by another server. If the format of cached\ndata is different between servers, this can lead to some very hard to\ndiagnose problems. To prevent this, Django provides the ability to prefix all cache keys\nused by a server. When a particular cache key is saved or retrieved,\nDjango will automatically prefix the cache key with the value of the KEY_PREFIX cache setting. By ensuring each Django instance has a different KEY_PREFIX , you can ensure that there will be no\ncollisions in cache values. Cache versioning ¶ When you change running code that uses cached values, you may need to\npurge any existing cached values. The easiest way to do this is to\nflush the entire cache, but this can lead to the loss of cache values\nthat are still valid and useful. Django provides a better way to target individual cache values.\nDjango’s cache framework has a system-wide version identifier,\nspecified using the VERSION cache setting.\nThe value of this setting is automatically combined with the cache\nprefix and the user-provided cache key to obtain the final cache key. By default, any key request will automatically include the site\ndefault cache key version. However, the primitive cache functions all\ninclude a version argument, so you can specify a particular cache\nkey version to set or get. For example: >>> # Set version 2 of a cache key >>> cache . set ( \"my_key\" , \"hello world!\" , version = 2 ) >>> # Get the default version (assuming version=1) >>> cache . get ( \"my_key\" ) None >>> # Get version 2 of the same key >>> cache . get ( \"my_key\" , version = 2 ) 'hello world!' The version of a specific key can be incremented and decremented using\nthe incr_version() and decr_version() methods. This\nenables specific keys to be bumped to a new version, leaving other\nkeys unaffected. Continuing our previous example: >>> # Increment the version of 'my_key' >>> cache . incr_version ( \"my_key\" ) >>> # The default version still isn't available >>> cache . get ( \"my_key\" ) None # Version 2 isn't available, either >>> cache . get ( \"my_key\" , version = 2 ) None >>> # But version 3 *is* available >>> cache . get ( \"my_key\" , version = 3 ) 'hello world!' Cache key transformation ¶ As described in the previous two sections, the cache key provided by a\nuser is not used verbatim – it is combined with the cache prefix and\nkey version to provide a final cache key. By default, the three parts\nare joined using colons to produce a final string: def make_key ( key , key_prefix , version ): return \" %s : %s : %s \" % ( key_prefix , version , key ) If you want to combine the parts in different ways, or apply other\nprocessing to the final key (e.g., taking a hash digest of the key\nparts), you can provide a custom key function. The KEY_FUNCTION cache setting\nspecifies a dotted-path to a function matching the prototype of make_key() above. If provided, this custom key function will\nbe used instead of the default key combining function. Cache key warnings ¶ Memcached, the most commonly-used production cache backend, does not allow\ncache keys longer than 250 characters or containing whitespace or control\ncharacters, and using such keys will cause an exception. To encourage\ncache-portable code and minimize unpleasant surprises, the other built-in cache\nbackends issue a warning ( django.core.cache.backends.base.CacheKeyWarning )\nif a key is used that would cause an error on memcached. If you are using a production backend that can accept a wider range of keys (a\ncustom backend, or one of the non-memcached built-in backends), and want to use\nthis wider range without warnings, you can silence CacheKeyWarning with\nthis code in the management module of one of your INSTALLED_APPS : import warnings from django.core.cache import CacheKeyWarning warnings . simplefilter ( \"ignore\" , CacheKeyWarning ) If you want to instead provide custom key validation logic for one of the\nbuilt-in backends, you can subclass it, override just the validate_key method, and follow the instructions for using a custom cache backend . For\ninstance, to do this for the locmem backend, put this code in a module: from django.core.cache.backends.locmem import LocMemCache class CustomLocMemCache ( LocMemCache ): def validate_key ( self , key ): \"\"\"Custom validation, raising exceptions or warnings as needed.\"\"\" ... …and use the dotted Python path to this class in the BACKEND portion of your CACHES setting. Asynchronous support ¶ Django has developing support for asynchronous cache backends, but does not\nyet support asynchronous caching. It will be coming in a future release. django.core.cache.backends.base.BaseCache has async variants of all\nbase methods . By convention, the asynchronous versions\nof all methods are prefixed with a . By default, the arguments for both\nvariants are the same: >>> await cache . aset ( \"num\" , 1 ) >>> await cache . ahas_key ( \"num\" ) True Downstream caches ¶ So far, this document has focused on caching your own data. But another type\nof caching is relevant to web development, too: caching performed by\n“downstream” caches. These are systems that cache pages for users even before\nthe request reaches your website. Here are a few examples of downstream caches: When using HTTP, your ISP may cache\ncertain pages, so if you requested a page from http://example.com/ , your\nISP would send you the page without having to access example.com directly.\nThe maintainers of example.com have no knowledge of this caching; the ISP\nsits between example.com and your web browser, handling all of the caching\ntransparently. Such caching is not possible under HTTPS as it would\nconstitute a man-in-the-middle attack. Your Django website may sit behind a proxy cache , such as Squid Web\nProxy Cache ( http://www.squid-cache.org/ ), that caches pages for\nperformance. In this case, each request first would be handled by the\nproxy, and it would be passed to your application only if needed. Your web browser caches pages, too. If a web page sends out the\nappropriate headers, your browser will use the local cached copy for\nsubsequent requests to that page, without even contacting the web page\nagain to see whether it has changed. Downstream caching is a nice efficiency boost, but there’s a danger to it:\nMany web pages’ contents differ based on authentication and a host of other\nvariables, and cache systems that blindly save pages based purely on URLs could\nexpose incorrect or sensitive data to subsequent visitors to those pages. For example, if you operate a web email system, then the contents of the\n“inbox” page depend on which user is logged in. If an ISP blindly cached your\nsite, then the first user who logged in through that ISP would have their\nuser-specific inbox page cached for subsequent visitors to the site.  That’s\nnot cool. Fortunately, HTTP provides a solution to this problem. A number of HTTP headers\nexist to instruct downstream caches to differ their cache contents depending on\ndesignated variables, and to tell caching mechanisms not to cache particular\npages. We’ll look at some of these headers in the sections that follow. Using Vary headers ¶ The Vary header defines which request headers a cache\nmechanism should take into account when building its cache key. For example, if\nthe contents of a web page depend on a user’s language preference, the page is\nsaid to “vary on language.” By default, Django’s cache system creates its cache keys using the requested\nfully-qualified URL – e.g., \"https://www.example.com/stories/2005/?order_by=author\" . This means every\nrequest to that URL will use the same cached version, regardless of user-agent\ndifferences such as cookies or language preferences. However, if this page\nproduces different content based on some difference in request headers – such\nas a cookie, or a language, or a user-agent – you’ll need to use the Vary header to tell caching mechanisms that the page output depends on those things. To do this in Django, use the convenient django.views.decorators.vary.vary_on_headers() view decorator, like so: from django.views.decorators.vary import vary_on_headers @vary_on_headers ( \"User-Agent\" ) def my_view ( request ): ... In this case, a caching mechanism (such as Django’s own cache middleware) will\ncache a separate version of the page for each unique user-agent. The advantage to using the vary_on_headers decorator rather than manually\nsetting the Vary header (using something like response.headers['Vary'] = 'user-agent' ) is that the decorator adds to the Vary header (which may\nalready exist), rather than setting it from scratch and potentially overriding\nanything that was already in there. You can pass multiple headers to vary_on_headers() : @vary_on_headers ( \"User-Agent\" , \"Cookie\" ) def my_view ( request ): ... This tells downstream caches to vary on both , which means each combination of\nuser-agent and cookie will get its own cache value. For example, a request with\nthe user-agent Mozilla and the cookie value foo=bar will be considered\ndifferent from a request with the user-agent Mozilla and the cookie value foo=ham . Because varying on cookie is so common, there’s a django.views.decorators.vary.vary_on_cookie() decorator. These two views\nare equivalent: @vary_on_cookie def my_view ( request ): ... @vary_on_headers ( \"Cookie\" ) def my_view ( request ): ... The headers you pass to vary_on_headers are not case sensitive; \"User-Agent\" is the same thing as \"user-agent\" . You can also use a helper function, django.utils.cache.patch_vary_headers() ,\ndirectly. This function sets, or adds to, the Vary header . For example: from django.shortcuts import render from django.utils.cache import patch_vary_headers def my_view ( request ): ... response = render ( request , \"template_name\" , context ) patch_vary_headers ( response , [ \"Cookie\" ]) return response patch_vary_headers takes an HttpResponse instance as\nits first argument and a list/tuple of case-insensitive header names as its\nsecond argument. For more on Vary headers, see the official Vary spec . Controlling cache: Using other headers ¶ Other problems with caching are the privacy of data and the question of where\ndata should be stored in a cascade of caches. A user usually faces two kinds of caches: their own browser cache (a private\ncache) and their provider’s cache (a public cache). A public cache is used by\nmultiple users and controlled by someone else. This poses problems with\nsensitive data–you don’t want, say, your bank account number stored in a\npublic cache. So web applications need a way to tell caches which data is\nprivate and which is public. The solution is to indicate a page’s cache should be “private.” To do this in\nDjango, use the cache_control() view\ndecorator. Example: from django.views.decorators.cache import cache_control @cache_control ( private = True ) def my_view ( request ): ... This decorator takes care of sending out the appropriate HTTP header behind the\nscenes. Note that the cache control settings “private” and “public” are mutually\nexclusive. The decorator ensures that the “public” directive is removed if\n“private” should be set (and vice versa). An example use of the two directives\nwould be a blog site that offers both private and public entries. Public\nentries may be cached on any shared cache. The following code uses patch_cache_control() , the manual way to modify the\ncache control header (it is internally called by the cache_control() decorator): from django.views.decorators.cache import patch_cache_control from django.views.decorators.vary import vary_on_cookie @vary_on_cookie def list_blog_entries_view ( request ): if request . user . is_anonymous : response = render_only_public_entries () patch_cache_control ( response , public = True ) else : response = render_private_and_public_entries ( request . user ) patch_cache_control ( response , private = True ) return response You can control downstream caches in other ways as well (see RFC 9111 for\ndetails on HTTP caching). For example, even if you don’t use Django’s\nserver-side cache framework, you can still tell clients to cache a view for a\ncertain amount of time with the max-age directive: from django.views.decorators.cache import cache_control @cache_control ( max_age = 3600 ) def my_view ( request ): ... (If you do use the caching middleware, it already sets the max-age with\nthe value of the CACHE_MIDDLEWARE_SECONDS setting. In that case,\nthe custom max_age from the cache_control() decorator will take\nprecedence, and the header values will be merged correctly.) Any valid Cache-Control response directive is valid in cache_control() .\nHere are some more examples: no_transform=True must_revalidate=True stale_while_revalidate=num_seconds no_cache=True The full list of known directives can be found in the IANA registry (note that not all of them apply to responses). If you want to use headers to disable caching altogether, never_cache() is a view decorator that\nadds headers to ensure the response won’t be cached by browsers or other\ncaches. Example: from django.views.decorators.cache import never_cache @never_cache def myview ( request ): ... Order of MIDDLEWARE ¶ If you use caching middleware, it’s important to put each half in the right\nplace within the MIDDLEWARE setting. That’s because the cache\nmiddleware needs to know which headers by which to vary the cache storage.\nMiddleware always adds something to the Vary response header when it can. UpdateCacheMiddleware runs during the response phase, where middleware is\nrun in reverse order, so an item at the top of the list runs last during the\nresponse phase. Thus, you need to make sure that UpdateCacheMiddleware appears before any other middleware that might add something to the Vary header. The following middleware modules do so: SessionMiddleware adds Cookie GZipMiddleware adds Accept-Encoding LocaleMiddleware adds Accept-Language FetchFromCacheMiddleware , on the other hand, runs during the request phase,\nwhere middleware is applied first-to-last, so an item at the top of the list\nruns first during the request phase. The FetchFromCacheMiddleware also\nneeds to run after other middleware updates the Vary header, so FetchFromCacheMiddleware must be after any item that does so.", "keywords": ["endcache", "py", "accept", "http://www.squid-cache.org/", "variable", "hints", "comma", "tmp", "type", "url", "httpresponse", "max_entries", "lru", "def", "place", "scenes", "172.19.26.242:11211", "db_for_write", "username", "settings", "reason", "perspective", "locmemcache", "ships", "method", "django.core.cache.backends.locmem", "party", "performance", "responses", "ignore", "repetition", "use", "status", "strategies", "views", "pickle", "collisions", "my_key", "man", "cookies", "encoding", "ways", "code>/", "django_cache", "items", "difference", "minutes", "vary_on", "stale_while_revalidate", "default_noreply", "way", "mozilla", "default", "filters", "option", "op", "num", "half", "cache_control", "make_key", "bank", "client", "need", "page", "clear", "typo", "block", "pooling", "vary", "package", "top", "decr", "age", "users", "databasecache", "backend", "self", "router", "semicolon", "db_for_read", "people", "argument", "danga", "leader", "cachekeywarning", "version", "filesystem", "tuple", "windows", "app_label", "integer", "connectionpool", "constructors", "isp", "environments", "transformation", "my_timeout", "never_cache", "django.core.cache", "runs", "name", "django.core.cache.caches", "header", "diagnose", "world", "python", "downstream", "amount", "instances", "allow_migrate", "dummycache", "sections", "defines", "ram", "host", "storage", "others", "tag", "address", "speed", "cache_middleware_seconds", "true", "*", "framework", "localcache", "make_template_fragment_key", "cache.get", "head", "minute", "requests", "validate_key", "model_name", "delta", "headers", "kinds", "schemes", "site1", "key_function", "logic", "operation", "feature", "traffic", "key", "django.shortcuts", "levels", "parameters", ".", "alias", "helper", "zone", "dictionary", "urlconf", "explanation", "characters", "serializes", "implementations", "browser", "warnings", "error", "differences", "design", "template", "render_private_and_public_entries", "cache", "control", "story", "dummy", "unix:/tmp", "datetime", "systems", "%", "setting", "agent", "order", "daemons", "basis", "documentation", "-", "socket", "development", "specifies", "simplefilter", "pairs", "routers", "application", "cache_middleware_alias", "port", "migrate", "table", "mechanisms", "convenience", "solutions", "behavior", "system", "preference", "mode", "str", "files", "sorts", "query", "modules", "directives", "redis://127.0.0.1:6378", "import", "pseudocode", "slash", "bar", "information", "off", "template_fragments", "result", "#", "point", "django.middleware.cache", "foo/<int", "basecache", "section", "authentication", "versions", "¶", "get_current_language", "web", "@cache_page", "interactive", "server", "change", "expires", "sites", "capacity", "precedence", "format", "render", "beginning", "drive", "squid", "example", "incr", "value", "functions", "cache_replica", "source", "disadvantage", "blog", "primary", "touch", "c", "default_timeout", "html", "path.to.backend", "django.core.cache.utils", "examples", "things", "locmem", "details", "no_cache", "proxy", "cache2", "advantages", "decisions", "setup", "rfc", "colons", "my_view", "no_transform", "object", "cookie", "root", "warning", "hash", "library", "efficiency", "privacy", "overkill", "127.0.0.1:11211", "pool_class", "phase", "django.core.cache.backends.db", "surprises", "password", "disable", "api", "box", "note", "tcp_nodelay", "valueerror", "level", "timeout", "django", "use_pooling", "max_age", "thread", "fact", "parameter", "validation", "lot", "pointing", "approach", "contents", "loss", "strings", "django.views.decorators.cache", "http", "cull_frequency", "cache1", "whitespace", "get_many", "c:/foo", "arrangement", "=", "objects", "fetchfromcachemiddleware", "language", "/foo/23/", "facebook", "defaults", "scheme", "ability", "customlocmemcache", "lists", "connection", "instructions", "run", "interface", "https", "pool", "range", "expiration", "replicas", "translation", "iana", "templates", "replica", "allow_unicode_keys", "places", "my_new_key", "time", "myalias", "sets", "key_prefix", "updatecachemiddleware", "exception", "letter", "release", "cascade", "decrement", "inbox", "middleware", "response.headers['vary", "delete", "hiredis", "cacherouter", "close", "i18n", "maintainers", "site", "expiry", "pieces", "routing", "problem", "doubt", "resolves", "philosophy", "load", "must_revalidate", "output", "snowflake", "copy", "custom", "decorator", "static_root", "fragment_name", "methods", "ham", "to", "machine", "redis://username", "update", "keyword", "django.core.cache.backends.base", "side", "browsers", "apache", "none", "urls", "variants", "variables", "base", "process", "rediscache", "access", "protocol", "command", "memcache", "pylibmccache", ">", "list_blog_entries_view", "email", "convention", "production", "content", "decision", "caching", "seconds", "end", "unix", "cache_page", "knowledge", "redis://127.0.0.1:6377", "fraction", "@vary_on_headers", "bunch", "flag", "applications", "request", "wikipedia", "delete_many", "advantage", "b", "tables", "visitor", "attack", "thing", "prototype", "data", "myview", "group", "options", "sidebar", "environment", "ratio", "culling", "readability", "’s", "intervals", "combination", "reasons", "trade", "response", "shortcut", "network", "keys", "configuration", "django.core.cache.cache", "sql", "directive", "pymemcache", "path", "directory", "max", "backends", "module", "arguments", "program", "@vary_on_cookie", "deal", "memory", "decorators", "expense", "add", "context", "django.utils.cache", "purpose", "visitors", "db", "cache_primary", "models", "pages", "registry", "cacheentry", "patch_vary_headers", "call", "addresses", "serde", "website", "memcached.sock", "preferences", "sasl", "decr_version", "django.core.cache.backends.dummy", "calculations", "retrieve", "support", "clients", "types", "localemiddleware", "directions", "so", "docs", "changes", "problems", "servers", "portion", "false", "boost", "https://www.example.com/stories/2005/?order_by=author", "management", "prefix", "cache.aadd", "hand", "digest", "values", "cases", "solution", "add_key", "gzipmiddleware", "localhost", "caches", "urlpatterns", "item", "attacker", "safety", "test", "django.utils.cache.patch_vary_headers", "behaviors", "fragment", "redis", "render_only_public_entries", "ip", "stores", "livejournal.com", "location", "daemon", "usage", "entries", "model", "processing", "choice", "misses", "sessionmiddleware", "cache.clear", "vary_on_cookie", "copies", "purposes", "results", "use_tz", "ignore_exc", "n’t", "get_or_set", "http://example.com/", "installed_apps", "loads", "case", "request.user.username", "scratch", "class", "number", "business", "bindings", "return", "filebasedcache", "cache_middleware_key_prefix", "danger", "172.19.26.240:11211", "function", "no_delay", "string", "care", "list", "bit", "machines", "question", "vary_on_headers", "view", "memcached", "parts", "user", "replication", "spec", "file", "read", "queries", "sentinel", "password@127.0.0.1:6379", "patch_cache_control", "operations", "installation", "errors", "core", "dictionaries", "get", "calculation", "account", "django.views.decorators.vary.vary_on_headers", "mechanism", "provider", "exceptions", "granularity", "incr_version", "names", "django.middleware.common", "document", "fetch", "date", "set", "duty", "foo", "capability", "database", "/var", "binding", "no", "databases", "ketama", "websites", "commonmiddleware", "increment", "reference", "instance", "overhead", "code", "set_many", "per", "redis://127.0.0.1:6379", "strategy", "step", "timestamp"], "type": "documentation"},
{"title": "User authentication in Django", "url": "https://docs.djangoproject.com/en/5.1/topics/auth/", "content": "User authentication in Django ¶ Django comes with a user authentication system. It handles user accounts,\ngroups, permissions and cookie-based user sessions. This section of the\ndocumentation explains how the default implementation works out of the box, as\nwell as how to extend and customize it to\nsuit your project’s needs. Overview ¶ The Django authentication system handles both authentication and authorization.\nBriefly, authentication verifies a user is who they claim to be, and\nauthorization determines what an authenticated user is allowed to do. Here the\nterm authentication is used to refer to both tasks. The auth system consists of: Users Permissions: Binary (yes/no) flags designating whether a user may perform\na certain task. Groups: A generic way of applying labels and permissions to more than one\nuser. A configurable password hashing system Forms and view tools for logging in users, or restricting content A pluggable backend system The authentication system in Django aims to be very generic and doesn’t provide\nsome features commonly found in web authentication systems. Solutions for some\nof these common problems have been implemented in third-party packages: Password strength checking Throttling of login attempts Authentication against third-parties (OAuth, for example) Object-level permissions Installation ¶ Authentication support is bundled as a Django contrib module in django.contrib.auth . By default, the required configuration is already\nincluded in the settings.py generated by django-admin startproject , these consist of two items listed in your INSTALLED_APPS setting: 'django.contrib.auth' contains the core of the authentication framework,\nand its default models. 'django.contrib.contenttypes' is the Django content type system , which allows permissions to be associated with\nmodels you create. and these items in your MIDDLEWARE setting: SessionMiddleware manages sessions across requests. AuthenticationMiddleware associates\nusers with requests using sessions. With these settings in place, running the command manage.py migrate creates\nthe necessary database tables for auth related models and permissions for any\nmodels defined in your installed apps. Usage ¶ Using Django’s default implementation Working with User objects Permissions and authorization Authentication in web requests Managing users in the admin API reference for the default implementation Customizing Users and authentication Password management in Django", "keywords": ["implementation", "permissions", "binary", "type", "support", "accounts", "systems", "setting", "tasks", "documentation", "problems", "place", "settings", "management", "overview", "middleware", "party", "customizing", "migrate", "solutions", "system", "labels", "briefly", "items", "project", "groups", "associates", "login", "startproject", "section", "authentication", "way", "parties", "¶", "default", "web", "usage", "strength", "sessionmiddleware", "contrib", "command", "example", "users", "installed_apps", "content", "backend", "authorization", "tables", "needs", "authenticationmiddleware", "term", "view", "object", "cookie", "flags", "user", "task", "installation", "core", "attempts", "password", "configuration", "api", "box", "sessions", "level", "django", "throttling", "consist", "tools", "auth", "django.contrib.auth", "framework", "module", "apps", "packages", "requests", "database", "no", "forms", "reference", "features", "models", "oauth", "django.contrib.contenttypes"], "type": "documentation"},
{"title": "Advanced testing topics", "url": "https://docs.djangoproject.com/en/5.1/topics/testing/advanced/", "content": "Advanced testing topics ¶ The request factory ¶ class RequestFactory [source] ¶ The RequestFactory shares the same API as\nthe test client. However, instead of behaving like a browser, the\nRequestFactory provides a way to generate a request instance that can\nbe used as the first argument to any view. This means you can test a\nview function the same way as you would test any other function – as\na black box, with exactly known inputs, testing for specific outputs. The API for the RequestFactory is a slightly\nrestricted subset of the test client API: It only has access to the HTTP methods get() , post() , put() , delete() , head() , options() , and trace() . These methods accept all the same arguments except for follow . Since this is just a factory for producing\nrequests, it’s up to you to handle the response. It does not support middleware. Session and authentication\nattributes must be supplied by the test itself if required\nfor the view to function properly. Changed in Django 5.1: The query_params parameter was added. Example ¶ The following is a unit test using the request factory: from django.contrib.auth.models import AnonymousUser , User from django.test import RequestFactory , TestCase from .views import MyView , my_view class SimpleTest ( TestCase ): def setUp ( self ): # Every test needs access to the request factory. self . factory = RequestFactory () self . user = User . objects . create_user ( username = \"jacob\" , email = \"jacob@…\" , password = \"top_secret\" ) def test_details ( self ): # Create an instance of a GET request. request = self . factory . get ( \"/customer/details\" ) # Recall that middleware are not supported. You can simulate a # logged-in user by setting request.user manually. request . user = self . user # Or you can simulate an anonymous user by setting request.user to # an AnonymousUser instance. request . user = AnonymousUser () # Test my_view() as if it were deployed at /customer/details response = my_view ( request ) # Use this syntax for class-based views. response = MyView . as_view ()( request ) self . assertEqual ( response . status_code , 200 ) AsyncRequestFactory ¶ class AsyncRequestFactory [source] ¶ RequestFactory creates WSGI-like requests. If you want to create ASGI-like\nrequests, including having a correct ASGI scope , you can instead use django.test.AsyncRequestFactory . This class is directly API-compatible with RequestFactory , with the only\ndifference being that it returns ASGIRequest instances rather than WSGIRequest instances. All of its methods are still synchronous callables. Arbitrary keyword arguments in defaults are added directly into the ASGI\nscope. Changed in Django 5.1: The query_params parameter was added. Testing class-based views ¶ In order to test class-based views outside of the request/response cycle you\nmust ensure that they are configured correctly, by calling setup() after instantiation. For example, assuming the following class-based view: views.py ¶ from django.views.generic import TemplateView class HomeView ( TemplateView ): template_name = \"myapp/home.html\" def get_context_data ( self , ** kwargs ): kwargs [ \"environment\" ] = \"Production\" return super () . get_context_data ( ** kwargs ) You may directly test the get_context_data() method by first instantiating\nthe view, then passing a request to setup() , before proceeding with\nyour test’s code: tests.py ¶ from django.test import RequestFactory , TestCase from .views import HomeView class HomePageTest ( TestCase ): def test_environment_set_in_context ( self ): request = RequestFactory () . get ( \"/\" ) view = HomeView () view . setup ( request ) context = view . get_context_data () self . assertIn ( \"environment\" , context ) Tests and multiple host names ¶ The ALLOWED_HOSTS setting is validated when running tests. This\nallows the test client to differentiate between internal and external URLs. Projects that support multitenancy or otherwise alter business logic based on\nthe request’s host and use custom host names in tests must include those hosts\nin ALLOWED_HOSTS . The first option to do so is to add the hosts to your settings file. For\nexample, the test suite for docs.djangoproject.com includes the following: from django.test import TestCase class SearchFormTestCase ( TestCase ): def test_empty_get ( self ): response = self . client . get ( \"/en/dev/search/\" , headers = { \"host\" : \"docs.djangoproject.dev:8000\" }, ) self . assertEqual ( response . status_code , 200 ) and the settings file includes a list of the domains supported by the project: ALLOWED_HOSTS = [ \"www.djangoproject.dev\" , \"docs.djangoproject.dev\" , ... ] Another option is to add the required hosts to ALLOWED_HOSTS using override_settings() or modify_settings() . This option may be\npreferable in standalone apps that can’t package their own settings file or\nfor projects where the list of domains is not static (e.g., subdomains for\nmultitenancy). For example, you could write a test for the domain http://otherserver/ as follows: from django.test import TestCase , override_settings class MultiDomainTestCase ( TestCase ): @override_settings ( ALLOWED_HOSTS = [ \"otherserver\" ]) def test_other_domain ( self ): response = self . client . get ( \"http://otherserver/foo/bar/\" ) Disabling ALLOWED_HOSTS checking ( ALLOWED_HOSTS = ['*'] ) when\nrunning tests prevents the test client from raising a helpful error message if\nyou follow a redirect to an external URL. Tests and multiple databases ¶ Testing primary/replica configurations ¶ If you’re testing a multiple database configuration with primary/replica\n(referred to as master/slave by some databases) replication, this strategy of\ncreating test databases poses a problem.\nWhen the test databases are created, there won’t be any replication,\nand as a result, data created on the primary won’t be seen on the\nreplica. To compensate for this, Django allows you to define that a database is\na test mirror . Consider the following (simplified) example database\nconfiguration: DATABASES = { \"default\" : { \"ENGINE\" : \"django.db.backends.mysql\" , \"NAME\" : \"myproject\" , \"HOST\" : \"dbprimary\" , # ... plus some other settings }, \"replica\" : { \"ENGINE\" : \"django.db.backends.mysql\" , \"NAME\" : \"myproject\" , \"HOST\" : \"dbreplica\" , \"TEST\" : { \"MIRROR\" : \"default\" , }, # ... plus some other settings }, } In this setup, we have two database servers: dbprimary , described\nby the database alias default , and dbreplica described by the\nalias replica . As you might expect, dbreplica has been configured\nby the database administrator as a read replica of dbprimary , so in\nnormal activity, any write to default will appear on replica . If Django created two independent test databases, this would break any\ntests that expected replication to occur. However, the replica database has been configured as a test mirror (using the MIRROR test setting), indicating that under\ntesting, replica should be treated as a mirror of default . When the test environment is configured, a test version of replica will not be created. Instead the connection to replica will be redirected to point at default . As a result, writes to default will appear on replica – but because they are actually\nthe same database, not because there is data replication between the\ntwo databases. As this depends on transactions, the tests must use TransactionTestCase instead of TestCase . Controlling creation order for test databases ¶ By default, Django will assume all databases depend on the default database and therefore always create the default database first.\nHowever, no guarantees are made on the creation order of any other\ndatabases in your test setup. If your database configuration requires a specific creation order, you\ncan specify the dependencies that exist using the DEPENDENCIES test setting. Consider the following (simplified)\nexample database configuration: DATABASES = { \"default\" : { # ... db settings \"TEST\" : { \"DEPENDENCIES\" : [ \"diamonds\" ], }, }, \"diamonds\" : { # ... db settings \"TEST\" : { \"DEPENDENCIES\" : [], }, }, \"clubs\" : { # ... db settings \"TEST\" : { \"DEPENDENCIES\" : [ \"diamonds\" ], }, }, \"spades\" : { # ... db settings \"TEST\" : { \"DEPENDENCIES\" : [ \"diamonds\" , \"hearts\" ], }, }, \"hearts\" : { # ... db settings \"TEST\" : { \"DEPENDENCIES\" : [ \"diamonds\" , \"clubs\" ], }, }, } Under this configuration, the diamonds database will be created first,\nas it is the only database alias without dependencies. The default and clubs alias will be created next (although the order of creation of this\npair is not guaranteed), then hearts , and finally spades . If there are any circular dependencies in the DEPENDENCIES definition, an ImproperlyConfigured exception will be raised. Advanced features of TransactionTestCase ¶ TransactionTestCase. available_apps ¶ Warning This attribute is a private API. It may be changed or removed without\na deprecation period in the future, for instance to accommodate changes\nin application loading. It’s used to optimize Django’s own test suite, which contains hundreds\nof models but no relations between models in different applications. By default, available_apps is set to None . After each test, Django\ncalls flush to reset the database state. This empties all tables\nand emits the post_migrate signal, which\nrecreates one content type and four permissions for each model. This\noperation gets expensive proportionally to the number of models. Setting available_apps to a list of applications instructs Django to\nbehave as if only the models from these applications were available. The\nbehavior of TransactionTestCase changes as follows: post_migrate is fired before each\ntest to create the content types and permissions for each model in\navailable apps, in case they’re missing. After each test, Django empties only tables corresponding to models in\navailable apps. However, at the database level, truncation may cascade to\nrelated models in unavailable apps. Furthermore post_migrate isn’t fired; it will be\nfired by the next TransactionTestCase , after the correct set of\napplications is selected. Since the database isn’t fully flushed, if a test creates instances of\nmodels not included in available_apps , they will leak and they may\ncause unrelated tests to fail. Be careful with tests that use sessions;\nthe default session engine stores them in the database. Since post_migrate isn’t emitted after\nflushing the database, its state after a TransactionTestCase isn’t the\nsame as after a TestCase : it’s missing the rows created by listeners\nto post_migrate . Considering the order in which tests are executed , this isn’t an\nissue, provided either all TransactionTestCase in a given test suite\ndeclare available_apps , or none of them. available_apps is mandatory in Django’s own test suite. TransactionTestCase. reset_sequences ¶ Setting reset_sequences = True on a TransactionTestCase will make\nsure sequences are always reset before the test run: class TestsThatDependsOnPrimaryKeySequences ( TransactionTestCase ): reset_sequences = True def test_animal_pk ( self ): lion = Animal . objects . create ( name = \"lion\" , sound = \"roar\" ) # lion.pk is guaranteed to always be 1 self . assertEqual ( lion . pk , 1 ) Unless you are explicitly testing primary keys sequence numbers, it is\nrecommended that you do not hard code primary key values in tests. Using reset_sequences = True will slow down the test, since the primary\nkey reset is a relatively expensive database operation. Enforce running test classes sequentially ¶ If you have test classes that cannot be run in parallel (e.g. because they\nshare a common resource), you can use django.test.testcases.SerializeMixin to run them sequentially. This mixin uses a filesystem lockfile . For example, you can use __file__ to determine that all test classes in the\nsame file that inherit from SerializeMixin will run sequentially: import os from django.test import TestCase from django.test.testcases import SerializeMixin class ImageTestCaseMixin ( SerializeMixin ): lockfile = __file__ def setUp ( self ): self . filename = os . path . join ( temp_storage_dir , \"my_file.png\" ) self . file = create_file ( self . filename ) class RemoveImageTests ( ImageTestCaseMixin , TestCase ): def test_remove_image ( self ): os . remove ( self . filename ) self . assertFalse ( os . path . exists ( self . filename )) class ResizeImageTests ( ImageTestCaseMixin , TestCase ): def test_resize_image ( self ): resize_image ( self . file , ( 48 , 48 )) self . assertEqual ( get_image_size ( self . file ), ( 48 , 48 )) Using the Django test runner to test reusable applications ¶ If you are writing a reusable application you may want to use the Django test runner to run your own test suite\nand thus benefit from the Django testing infrastructure. A common practice is a tests directory next to the application code, with the\nfollowing structure: runtests.py\npolls/\n    __init__.py\n    models.py\n    ...\ntests/\n    __init__.py\n    models.py\n    test_settings.py\n    tests.py Let’s take a look inside a couple of those files: runtests.py ¶ #!/usr/bin/env python import os import sys import django from django.conf import settings from django.test.utils import get_runner if __name__ == \"__main__\" : os . environ [ \"DJANGO_SETTINGS_MODULE\" ] = \"tests.test_settings\" django . setup () TestRunner = get_runner ( settings ) test_runner = TestRunner () failures = test_runner . run_tests ([ \"tests\" ]) sys . exit ( bool ( failures )) This is the script that you invoke to run the test suite. It sets up the\nDjango environment, creates the test database and runs the tests. For the sake of clarity, this example contains only the bare minimum\nnecessary to use the Django test runner. You may want to add\ncommand-line options for controlling verbosity, passing in specific test\nlabels to run, etc. tests/test_settings.py ¶ SECRET_KEY = \"fake-key\" INSTALLED_APPS = [ \"tests\" , ] This file contains the Django settings required to run your app’s tests. Again, this is a minimal example; your tests may require additional\nsettings to run. Since the tests package is included in INSTALLED_APPS when\nrunning your tests, you can define test-only models in its models.py file. Using different testing frameworks ¶ Clearly, unittest is not the only Python testing framework. While Django\ndoesn’t provide explicit support for alternative frameworks, it does provide a\nway to invoke tests constructed for an alternative framework as if they were\nnormal Django tests. When you run ./manage.py test , Django looks at the TEST_RUNNER setting to determine what to do. By default, TEST_RUNNER points to 'django.test.runner.DiscoverRunner' . This class defines the default Django\ntesting behavior. This behavior involves: Performing global pre-test setup. Looking for tests in any file below the current directory whose name matches\nthe pattern test*.py . Creating the test databases. Running migrate to install models and initial data into the test\ndatabases. Running the system checks . Running the tests that were found. Destroying the test databases. Performing global post-test teardown. If you define your own test runner class and point TEST_RUNNER at\nthat class, Django will execute your test runner whenever you run ./manage.py test . In this way, it is possible to use any test framework\nthat can be executed from Python code, or to modify the Django test execution\nprocess to satisfy whatever testing requirements you may have. Defining a test runner ¶ A test runner is a class defining a run_tests() method. Django ships\nwith a DiscoverRunner class that defines the default Django testing\nbehavior. This class defines the run_tests() entry point, plus a\nselection of other methods that are used by run_tests() to set up, execute\nand tear down the test suite. class DiscoverRunner ( pattern = 'test*.py' , top_level = None , verbosity = 1 , interactive = True , failfast = False , keepdb = False , reverse = False , debug_mode = False , debug_sql = False , parallel = 0 , tags = None , exclude_tags = None , test_name_patterns = None , pdb = False , buffer = False , enable_faulthandler = True , timing = True , shuffle = False , logger = None , durations = None , ** kwargs ) [source] ¶ DiscoverRunner will search for tests in any file matching pattern . top_level can be used to specify the directory containing your\ntop-level Python modules. Usually Django can figure this out automatically,\nso it’s not necessary to specify this option. If specified, it should\ngenerally be the directory containing your manage.py file. verbosity determines the amount of notification and debug information\nthat will be printed to the console; 0 is no output, 1 is normal\noutput, and 2 is verbose output. If interactive is True , the test suite has permission to ask the\nuser for instructions when the test suite is executed. An example of this\nbehavior would be asking for permission to delete an existing test\ndatabase. If interactive is False , the test suite must be able to\nrun without any manual intervention. If failfast is True , the test suite will stop running after the\nfirst test failure is detected. If keepdb is True , the test suite will use the existing database,\nor create one if necessary. If False , a new database will be created,\nprompting the user to remove the existing one, if present. If reverse is True , test cases will be executed in the opposite\norder. This could be useful to debug tests that aren’t properly isolated\nand have side effects. Grouping by test class is\npreserved when using this option. This option can be used in conjunction\nwith --shuffle to reverse the order for a particular random seed. debug_mode specifies what the DEBUG setting should be\nset to prior to running tests. parallel specifies the number of processes.  If parallel is greater\nthan 1 , the test suite will run in parallel processes. If there are\nfewer test case classes than configured processes, Django will reduce the\nnumber of processes accordingly. Each process gets its own database. This\noption requires the third-party tblib package to display tracebacks\ncorrectly. tags can be used to specify a set of tags for filtering tests . May be combined with exclude_tags . exclude_tags can be used to specify a set of tags for excluding tests . May be combined\nwith tags . If debug_sql is True , failing test cases will output SQL queries\nlogged to the django.db.backends logger as well\nas the traceback. If verbosity is 2 , then queries in all tests are\noutput. test_name_patterns can be used to specify a set of patterns for\nfiltering test methods and classes by their names. If pdb is True , a debugger ( pdb or ipdb ) will be spawned at\neach test error or failure. If buffer is True , outputs from passing tests will be discarded. If enable_faulthandler is True , faulthandler will be\nenabled. If timing is True , test timings, including database setup and total\nrun time, will be shown. If shuffle is an integer, test cases will be shuffled in a random order\nprior to execution, using the integer as a random seed. If shuffle is None , the seed will be generated randomly. In both cases, the seed will\nbe logged and set to self.shuffle_seed prior to running tests. This\noption can be used to help detect tests that aren’t properly isolated. Grouping by test class is preserved when using this\noption. logger can be used to pass a Python Logger object .\nIf provided, the logger will be used to log messages instead of printing to\nthe console. The logger object will respect its logging level rather than\nthe verbosity . durations will show a list of the N slowest test cases. Setting this\noption to 0 will result in the duration for all tests being shown.\nRequires Python 3.12+. Django may, from time to time, extend the capabilities of the test runner\nby adding new arguments. The **kwargs declaration allows for this\nexpansion. If you subclass DiscoverRunner or write your own test\nrunner, ensure it accepts **kwargs . Your test runner may also define additional command-line options.\nCreate or override an add_arguments(cls, parser) class method and add\ncustom arguments by calling parser.add_argument() inside the method, so\nthat the test command will be able to use those arguments. New in Django 5.0: The durations argument was added. Attributes ¶ DiscoverRunner. test_suite ¶ The class used to build the test suite. By default it is set to unittest.TestSuite . This can be overridden if you wish to implement\ndifferent logic for collecting tests. DiscoverRunner. test_runner ¶ This is the class of the low-level test runner which is used to execute\nthe individual tests and format the results. By default it is set to unittest.TextTestRunner . Despite the unfortunate similarity in\nnaming conventions, this is not the same type of class as DiscoverRunner , which covers a broader set of responsibilities. You\ncan override this attribute to modify the way tests are run and reported. DiscoverRunner. test_loader ¶ This is the class that loads tests, whether from TestCases or modules or\notherwise and bundles them into test suites for the runner to execute.\nBy default it is set to unittest.defaultTestLoader . You can override\nthis attribute if your tests are going to be loaded in unusual ways. Methods ¶ DiscoverRunner. run_tests ( test_labels , ** kwargs ) [source] ¶ Run the test suite. test_labels allows you to specify which tests to run and supports\nseveral formats (see DiscoverRunner.build_suite() for a list of\nsupported formats). This method should return the number of tests that failed. classmethod DiscoverRunner. add_arguments ( parser ) [source] ¶ Override this class method to add custom arguments accepted by the test management command. See argparse.ArgumentParser.add_argument() for details about adding\narguments to a parser. DiscoverRunner. setup_test_environment ( ** kwargs ) [source] ¶ Sets up the test environment by calling setup_test_environment() and setting DEBUG to self.debug_mode (defaults to False ). DiscoverRunner. build_suite ( test_labels = None , ** kwargs ) [source] ¶ Constructs a test suite that matches the test labels provided. test_labels is a list of strings describing the tests to be run. A test\nlabel can take one of four forms: path.to.test_module.TestCase.test_method – Run a single test method\nin a test case class. path.to.test_module.TestCase – Run all the test methods in a test\ncase. path.to.module – Search for and run all tests in the named Python\npackage or module. path/to/directory – Search for and run all tests below the named\ndirectory. If test_labels has a value of None , the test runner will search for\ntests in all files below the current directory whose names match its pattern (see above). Returns a TestSuite instance ready to be run. DiscoverRunner. setup_databases ( ** kwargs ) [source] ¶ Creates the test databases by calling setup_databases() . DiscoverRunner. run_checks ( databases ) [source] ¶ Runs the system checks on the test databases . DiscoverRunner. run_suite ( suite , ** kwargs ) [source] ¶ Runs the test suite. Returns the result produced by the running the test suite. DiscoverRunner. get_test_runner_kwargs () [source] ¶ Returns the keyword arguments to instantiate the DiscoverRunner.test_runner with. DiscoverRunner. teardown_databases ( old_config , ** kwargs ) [source] ¶ Destroys the test databases, restoring pre-test conditions by calling teardown_databases() . DiscoverRunner. teardown_test_environment ( ** kwargs ) [source] ¶ Restores the pre-test environment. DiscoverRunner. suite_result ( suite , result , ** kwargs ) [source] ¶ Computes and returns a return code based on a test suite, and the result\nfrom that test suite. DiscoverRunner. log ( msg , level = None ) [source] ¶ If a logger is set, logs the message at the given integer logging level (e.g. logging.DEBUG , logging.INFO , or logging.WARNING ). Otherwise, the message is printed to the console,\nrespecting the current verbosity . For example, no message will be\nprinted if the verbosity is 0, INFO and above will be printed if\nthe verbosity is at least 1, and DEBUG will be printed if it is at\nleast 2. The level defaults to logging.INFO . Testing utilities ¶ django.test.utils ¶ To assist in the creation of your own test runner, Django provides a number of\nutility methods in the django.test.utils module. setup_test_environment ( debug = None ) [source] ¶ Performs global pre-test setup, such as installing instrumentation for the\ntemplate rendering system and setting up the dummy email outbox. If debug isn’t None , the DEBUG setting is updated to its\nvalue. teardown_test_environment () [source] ¶ Performs global post-test teardown, such as removing instrumentation from\nthe template system and restoring normal email services. setup_databases ( verbosity , interactive , * , time_keeper = None , keepdb = False , debug_sql = False , parallel = 0 , aliases = None , serialized_aliases = None , ** kwargs ) [source] ¶ Creates the test databases. Returns a data structure that provides enough detail to undo the changes\nthat have been made. This data will be provided to the teardown_databases() function at the conclusion of testing. The aliases argument determines which DATABASES aliases test\ndatabases should be set up for. If it’s not provided, it defaults to all of DATABASES aliases. The serialized_aliases argument determines what subset of aliases test databases should have their state serialized to allow usage of the serialized_rollback feature. If\nit’s not provided, it defaults to aliases . teardown_databases ( old_config , parallel = 0 , keepdb = False ) [source] ¶ Destroys the test databases, restoring pre-test conditions. old_config is a data structure defining the changes in the database\nconfiguration that need to be reversed. It’s the return value of the setup_databases() method. django.db.connection.creation ¶ The creation module of the database backend also provides some utilities that\ncan be useful during testing. create_test_db ( verbosity = 1 , autoclobber = False , serialize = True , keepdb = False ) ¶ Creates a new test database and runs migrate against it. verbosity has the same behavior as in run_tests() . autoclobber describes the behavior that will occur if a\ndatabase with the same name as the test database is discovered: If autoclobber is False , the user will be asked to\napprove destroying the existing database. sys.exit is\ncalled if the user does not approve. If autoclobber is True , the database will be destroyed\nwithout consulting the user. serialize determines if Django serializes the database into an\nin-memory JSON string before running tests (used to restore the database\nstate between tests if you don’t have transactions). You can set this to False to speed up creation time if you don’t have any test classes\nwith serialized_rollback=True . keepdb determines if the test run should use an existing\ndatabase, or create a new one. If True , the existing\ndatabase will be used, or created if not present. If False ,\na new database will be created, prompting the user to remove\nthe existing one, if present. Returns the name of the test database that it created. create_test_db() has the side effect of modifying the value of NAME in DATABASES to match the name of the test\ndatabase. destroy_test_db ( old_database_name , verbosity = 1 , keepdb = False ) ¶ Destroys the database whose name is the value of NAME in DATABASES , and sets NAME to the value of old_database_name . The verbosity argument has the same behavior as for DiscoverRunner . If the keepdb argument is True , then the connection to the\ndatabase will be closed, but the database will not be destroyed. Integration with coverage.py ¶ Code coverage describes how much source code has been tested. It shows which\nparts of your code are being exercised by tests and which are not. It’s an\nimportant part of testing applications, so it’s strongly recommended to check\nthe coverage of your tests. Django can be easily integrated with coverage.py , a tool for measuring code\ncoverage of Python programs. First, install coverage . Next, run the\nfollowing from your project folder containing manage.py : coverage run --source = '.' manage.py test myapp This runs your tests and collects coverage data of the executed files in your\nproject. You can see a report of this data by typing following command: coverage report Note that some Django code was executed while running tests, but it is not\nlisted here because of the source flag passed to the previous command. For more options like annotated HTML listings detailing missed lines, see the coverage.py docs.", "keywords": ["transactions", "conclusion", "modify_settings", "type", "line", "url", "rows", "signal", "def", "programs", "username", "time_keeper", "settings", "multitenancy", "classes", "ships", "teardown", "info", "method", "party", "serialized_aliases", "configurations", "testing", "secret_key", "transactiontestcase", "labels", "utility", "views", "messages", "callables", "ways", "difference", "project", "integration", "animal", "way", "self.shuffle_seed", "default", "suite", "outbox", "option", "buffer", "self.debug_mode", "get_test_runner_kwargs", "client", "naming", "domain", "requirements", "sys", "similarity", "package", "tool", "os", "parser", "backend", "self", "texttestrunner", "label", "argument", "version", "filesystem", "create_test_db", "install", "jacob@", "integer", "available_apps", "conjunction", "future", "test_labels", "lines", "name", "testcase.test_method", "pattern", "coverage", "wsgirequest", "running", "env", "python", "instances", "test_other_domain", "amount", "logging", "sys.exit", "django.test.runner", "formats", "folder", "host", "sessions", "failures", "resize_image", "look", "tests.test_settings", "topics", "exclude_tags", "django.db.connection.creation", "*", "diamonds", "framework", "structure", "spades", "clubs", "serializemixin", "head", "relations", "requests", "verbosity", "run_checks", "computes", "headers", "add_arguments(cls", "operation", "logic", "write", "forms", "utilities", "features", "feature", "instantiation", "test_runner", "key", "conventions", "path.to.test_module", "alias", "state", "instrumentation", "permissions", "script", "browser", "error", "template", "improperlyconfigured", "lion", "debug", "selection", "rendering", "setting", "order", "anonymoususer", "deprecation", "bool", "creation", "specifies", "listeners", "pk", "application", "sound", "migrate", "test_name_patterns", "behavior", "system", "aliases", "minimum", "modules", "files", "following", "import", "'", "information", "testcases", "json", "#", "result", "point", "imagetestcasemixin", "authentication", "¶", "keepdb", "path.to.module", "definition", "couple", "assertin", "environ", "tracebacks", "trace", "asgirequest", "infrastructure", "debugger", "home.html", "temp_storage_dir", "example", "session", "unit", "value", "source", "http://otherserver/", "test_details", "dev", "primary", "timing", "subdomains", "html", "details", "add_arguments", "duration", "setup", "override", "as_view", "my_view", "setup_databases", "hosts", "object", "guarantees", "discoverrunner", "warning", "exit", "attributes", "one", "bar/", "returns", "test_settings.py", "issue", "myapp", "password", "domains", "docs.djangoproject.com", "sequence", "api", "box", "period", "post", "projects", "level", "conditions", "django", "mixin", "asyncrequestfactory", "debug_mode", "message", "failure", "timings", "parameter", "syntax", "request.user", "test_resize_image", "strings", "http", "effect", "declare", "=", "factory", "console", "objects", "parallel", "defaults", "connection", "django.test.utils", "instructions", "run", "+", "jacob", "truncation", "activity", "logger", "testsuite", "replica", "time", "discoverrunner.test_runner", "exception", "follow", "middleware", "views.py", "problem", "slave", "processes", "bin", "output", "ipdb", "inherit", "test_remove_image", "testcase", "custom", "methods", "side", "keyword", "suite_result", "none", "urls", "join", "hundreds", "override_settings", "msg", "process", "access", "capabilities", "command", "reset", "dbreplica", "get_runner", "email", "requestfactory", "production", "content", "testrunner", "administrator", "classmethod", "old_config", "flag", "applications", "request", "cycle", "tables", "engine", "restores", "checking", "suites", "data", "myview", "matching", "effects", "options", "environment", "my_file.png", "clarity", "sake", "dependencies", "filtering", "top_level", "’s", "patterns", "empties", "test_animal_pk", "response", "removeimagetests", "execution", "kwargs", "keys", "query_params", "configuration", "sql", "sequences", "path", "debug_sql", "teststhatdependsonprimarykeysequences", "directory", "intervention", "asgi", "faulthandler", "module", "apps", "arguments", "practice", "shuffle", "run_suite", "context", "memory", "test*.py", "discoverrunner.build_suite", "models", "detail", "subset", "hearts", "expansion", "log", "roar", "coverage.py", "frameworks", "teardown_test_environment", "/en", "support", "types", "multidomaintestcase", "simpletest", "listings", "docs", "changes", "servers", "responsibilities", "otherserver", "false", "declaration", "management", "_", "tests", "inputs", "values", "resizeimagetests", "cases", "templateview", "runner", "@override_settings", "test_environment_set_in_context", "create_file", "durations", "permission", "test", "django.contrib.auth.models", "resource", "services", "pair", "lockfile", "reset_sequences", "old_database_name", "outputs", "usage", "model", "results", "checks", "tblib", "n’t", "installed_apps", "django.test.testcases", "case", "class", "number", "business", "seed", "numbers", "redirect", "return", "serialized_rollback", "report", "get_context_data", "attribute", "function", "setup_test_environment", "string", "list", "django.db.backends.mysql", "enforce", "autoclobber", "filename", "parser.add_argument", "loading", "docs.djangoproject.dev", "view", "app", "post_migrate", "parts", "user", "replication", "part", "file", "read", "queries", "run_tests", "get", "traceback", "mirror", "notification", "names", "teardown_databases", "master", "failfast", "scope", "tags", "test_empty_get", "set", "foo", "pdb", "database", "reverse", "databases", "instance", "status_code", "code", "wsgi", "searchformtestcase", "strategy", "entry", "homeview"], "type": "documentation"},
{"title": "Testing tools", "url": "https://docs.djangoproject.com/en/5.1/topics/testing/tools/", "content": "Testing tools ¶ Django provides a small set of tools that come in handy when writing tests. The test client ¶ The test client is a Python class that acts as a dummy web browser, allowing\nyou to test your views and interact with your Django-powered application\nprogrammatically. Some of the things you can do with the test client are: Simulate GET and POST requests on a URL and observe the response –\neverything from low-level HTTP (result headers and status codes) to\npage content. See the chain of redirects (if any) and check the URL and status code at\neach step. Test that a given request is rendered by a given Django template, with\na template context that contains certain values. Note that the test client is not intended to be a replacement for Selenium or\nother “in-browser” frameworks. Django’s test client has a different focus. In\nshort: Use Django’s test client to establish that the correct template is being\nrendered and that the template is passed the correct context data. Use RequestFactory to test view functions directly,\nbypassing the routing and middleware layers. Use in-browser frameworks like Selenium to test rendered HTML and the behavior of web pages, namely JavaScript functionality. Django also\nprovides special support for those frameworks; see the section on LiveServerTestCase for more details. A comprehensive test suite should use a combination of all of these test types. Overview and a quick example ¶ To use the test client, instantiate django.test.Client and retrieve\nweb pages: >>> from django.test import Client >>> c = Client () >>> response = c . post ( \"/login/\" , { \"username\" : \"john\" , \"password\" : \"smith\" }) >>> response . status_code 200 >>> response = c . get ( \"/customer/details/\" ) >>> response . content b'<!DOCTYPE html...' As this example suggests, you can instantiate Client from within a session\nof the Python interactive interpreter. Note a few important things about how the test client works: The test client does not require the web server to be running. In fact,\nit will run just fine with no web server running at all! That’s because\nit avoids the overhead of HTTP and deals directly with the Django\nframework. This helps make the unit tests run quickly. When retrieving pages, remember to specify the path of the URL, not the\nwhole domain. For example, this is correct: >>> c . get ( \"/login/\" ) This is incorrect: >>> c . get ( \"https://www.example.com/login/\" ) The test client is not capable of retrieving web pages that are not\npowered by your Django project. If you need to retrieve other web pages,\nuse a Python standard library module such as urllib . To resolve URLs, the test client uses whatever URLconf is pointed-to by\nyour ROOT_URLCONF setting. Although the above example would work in the Python interactive\ninterpreter, some of the test client’s functionality, notably the\ntemplate-related functionality, is only available while tests are\nrunning . The reason for this is that Django’s test runner performs a bit of black\nmagic in order to determine which template was loaded by a given view.\nThis black magic (essentially a patching of Django’s template system in\nmemory) only happens during test running. By default, the test client will disable any CSRF checks\nperformed by your site. If, for some reason, you want the test client to perform CSRF\nchecks, you can create an instance of the test client that\nenforces CSRF checks. To do this, pass in the enforce_csrf_checks argument when you construct your\nclient: >>> from django.test import Client >>> csrf_client = Client ( enforce_csrf_checks = True ) Making requests ¶ Use the django.test.Client class to make requests. class Client ( enforce_csrf_checks = False , raise_request_exception = True , json_encoder = DjangoJSONEncoder , * , headers = None , query_params = None , ** defaults ) [source] ¶ A testing HTTP client. Takes several arguments that can customize behavior. headers allows you to specify default headers that will be sent with\nevery request. For example, to set a User-Agent header: client = Client ( headers = { \"user-agent\" : \"curl/7.79.1\" }) query_params allows you to specify the default query string that will\nbe set on every request. Arbitrary keyword arguments in **defaults set WSGI environ variables . For example, to set the\nscript name: client = Client ( SCRIPT_NAME = \"/app/\" ) Note Keyword arguments starting with a HTTP_ prefix are set as headers,\nbut the headers parameter should be preferred for readability. The values from the headers , query_params , and extra keyword\narguments passed to get() , post() , etc. have precedence over\nthe defaults passed to the class constructor. The enforce_csrf_checks argument can be used to test CSRF\nprotection (see above). The raise_request_exception argument allows controlling whether or not\nexceptions raised during the request should also be raised in the test.\nDefaults to True . The json_encoder argument allows setting a custom JSON encoder for\nthe JSON serialization that’s described in post() . Changed in Django 5.1: The query_params argument was added. Once you have a Client instance, you can call any of the following\nmethods: get ( path , data = None , follow = False , secure = False , * , headers = None , query_params = None , ** extra ) [source] ¶ Makes a GET request on the provided path and returns a Response object, which is documented below. The key-value pairs in the query_params dictionary are used to set\nquery strings. For example: >>> c = Client () >>> c . get ( \"/customers/details/\" , query_params = { \"name\" : \"fred\" , \"age\" : 7 }) …will result in the evaluation of a GET request equivalent to: /customers/details/?name=fred&age=7 It is also possible to pass these parameters into the data parameter. However, query_params is preferred as it works for any\nHTTP method. The headers parameter can be used to specify headers to be sent in\nthe request. For example: >>> c = Client () >>> c . get ( ... \"/customers/details/\" , ... query_params = { \"name\" : \"fred\" , \"age\" : 7 }, ... headers = { \"accept\" : \"application/json\" }, ... ) …will send the HTTP header HTTP_ACCEPT to the details view, which\nis a good way to test code paths that use the django.http.HttpRequest.accepts() method. Arbitrary keyword arguments set WSGI environ variables . For example, headers\nto set the script name: >>> c = Client () >>> c . get ( \"/\" , SCRIPT_NAME = \"/app/\" ) If you already have the GET arguments in URL-encoded form, you can\nuse that encoding instead of using the data argument. For example,\nthe previous GET request could also be posed as: >>> c = Client () >>> c . get ( \"/customers/details/?name=fred&age=7\" ) If you provide a URL with both an encoded GET data and either a\nquery_params or data argument these arguments will take precedence. If you set follow to True the client will follow any redirects\nand a redirect_chain attribute will be set in the response object\ncontaining tuples of the intermediate urls and status codes. If you had a URL /redirect_me/ that redirected to /next/ , that\nredirected to /final/ , this is what you’d see: >>> response = c . get ( \"/redirect_me/\" , follow = True ) >>> response . redirect_chain [('http://testserver/next/', 302), ('http://testserver/final/', 302)] If you set secure to True the client will emulate an HTTPS\nrequest. Changed in Django 5.1: The query_params argument was added. post ( path , data = None , content_type = MULTIPART_CONTENT , follow = False , secure = False , * , headers = None , query_params = None , ** extra ) [source] ¶ Makes a POST request on the provided path and returns a Response object, which is documented below. The key-value pairs in the data dictionary are used to submit POST\ndata. For example: >>> c = Client () >>> c . post ( \"/login/\" , { \"name\" : \"fred\" , \"passwd\" : \"secret\" }) …will result in the evaluation of a POST request to this URL: /login/ …with this POST data: name=fred&passwd=secret If you provide content_type as application/json , the data is serialized using json.dumps() if it’s a dict, list,\nor tuple. Serialization is performed with DjangoJSONEncoder by default,\nand can be overridden by providing a json_encoder argument to Client . This serialization also happens for put() , patch() , and delete() requests. If you provide any other content_type (e.g. text/xml for an XML payload), the contents of data are sent as-is in the\nPOST request, using content_type in the HTTP Content-Type header. If you don’t provide a value for content_type , the values in data will be transmitted with a content type of multipart/form-data . In this case, the key-value pairs in data will be encoded as a multipart message and used to create the\nPOST data payload. To submit multiple values for a given key – for example, to specify\nthe selections for a <select multiple> – provide the values as a\nlist or tuple for the required key. For example, this value of data would submit three selected values for the field named choices : { \"choices\" : [ \"a\" , \"b\" , \"d\" ]} Submitting files is a special case. To POST a file, you need only\nprovide the file field name as a key, and a file handle to the file you\nwish to upload as a value. For example, if your form has fields name and attachment , the latter a FileField : >>> c = Client () >>> with open ( \"wishlist.doc\" , \"rb\" ) as fp : ... c . post ( \"/customers/wishes/\" , { \"name\" : \"fred\" , \"attachment\" : fp }) ... You may also provide any file-like object (e.g., StringIO or BytesIO ) as a file handle. If you’re uploading to an ImageField , the object needs a name attribute that passes the validate_image_file_extension validator.\nFor example: >>> from io import BytesIO >>> img = BytesIO ( ... b \"GIF89a \\x01\\x00\\x01\\x00\\x00\\x00\\x00 ! \\xf9\\x04\\x01\\x00\\x00\\x00 \" ... b \" \\x00 , \\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x00\\x02\\x01\\x00\\x00 \" ... ) >>> img . name = \"myimage.gif\" Note that if you wish to use the same file handle for multiple post() calls then you will need to manually reset the file\npointer between posts. The easiest way to do this is to\nmanually close the file after it has been provided to post() , as demonstrated above. You should also ensure that the file is opened in a way that\nallows the data to be read. If your file contains binary data\nsuch as an image, this means you will need to open the file in rb (read binary) mode. The headers , query_params , and extra parameters acts the\nsame as for Client.get() . If the URL you request with a POST contains encoded parameters, these\nparameters will be made available in the request.GET data. For example,\nif you were to make the request: >>> c . post ( ... \"/login/\" , { \"name\" : \"fred\" , \"passwd\" : \"secret\" }, query_params = { \"visitor\" : \"true\" } ... ) … the view handling this request could interrogate request.POST\nto retrieve the username and password, and could interrogate request.GET\nto determine if the user was a visitor. If you set follow to True the client will follow any redirects\nand a redirect_chain attribute will be set in the response object\ncontaining tuples of the intermediate urls and status codes. If you set secure to True the client will emulate an HTTPS\nrequest. Changed in Django 5.1: The query_params argument was added. head ( path , data = None , follow = False , secure = False , * , headers = None , query_params = None , ** extra ) [source] ¶ Makes a HEAD request on the provided path and returns a Response object. This method works just like Client.get() ,\nincluding the follow , secure , headers , query_params ,\nand extra parameters, except it does not return a message body. Changed in Django 5.1: The query_params argument was added. options ( path , data = '' , content_type = 'application/octet-stream' , follow = False , secure = False , * , headers = None , query_params = None , ** extra ) [source] ¶ Makes an OPTIONS request on the provided path and returns a Response object. Useful for testing RESTful interfaces. When data is provided, it is used as the request body, and\na Content-Type header is set to content_type . The follow , secure , headers , query_params , and extra parameters act the same as for Client.get() . Changed in Django 5.1: The query_params argument was added. put ( path , data = '' , content_type = 'application/octet-stream' , follow = False , secure = False , * , headers = None , query_params = None , ** extra ) [source] ¶ Makes a PUT request on the provided path and returns a Response object. Useful for testing RESTful interfaces. When data is provided, it is used as the request body, and\na Content-Type header is set to content_type . The follow , secure , headers , query_params , and extra parameters act the same as for Client.get() . Changed in Django 5.1: The query_params argument was added. patch ( path , data = '' , content_type = 'application/octet-stream' , follow = False , secure = False , * , headers = None , query_params = None , ** extra ) [source] ¶ Makes a PATCH request on the provided path and returns a Response object. Useful for testing RESTful interfaces. The follow , secure , headers , query_params , and extra parameters act the same as for Client.get() . Changed in Django 5.1: The query_params argument was added. delete ( path , data = '' , content_type = 'application/octet-stream' , follow = False , secure = False , * , headers = None , query_params = None , ** extra ) [source] ¶ Makes a DELETE request on the provided path and returns a Response object. Useful for testing RESTful interfaces. When data is provided, it is used as the request body, and\na Content-Type header is set to content_type . The follow , secure , headers , query_params , and extra parameters act the same as for Client.get() . Changed in Django 5.1: The query_params argument was added. trace ( path , follow = False , secure = False , * , headers = None , query_params = None , ** extra ) [source] ¶ Makes a TRACE request on the provided path and returns a Response object. Useful for simulating diagnostic probes. Unlike the other request methods, data is not provided as a keyword\nparameter in order to comply with RFC 9110 Section 9.3.8 , which\nmandates that TRACE requests must not have a body. The follow , secure , headers , query_params , and extra parameters act the same as for Client.get() . Changed in Django 5.1: The query_params argument was added. login ( ** credentials ) ¶ alogin ( ** credentials ) ¶ Asynchronous version : alogin() If your site uses Django’s authentication system and you deal with logging in users, you can use the test client’s login() method to simulate the effect of a user logging into the\nsite. After you call this method, the test client will have all the cookies\nand session data required to pass any login-based tests that may form\npart of a view. The format of the credentials argument depends on which authentication backend you’re using\n(which is configured by your AUTHENTICATION_BACKENDS setting). If you’re using the standard authentication backend provided\nby Django ( ModelBackend ), credentials should be the user’s\nusername and password, provided as keyword arguments: >>> c = Client () >>> c . login ( username = \"fred\" , password = \"secret\" ) # Now you can access a view that's only available to logged-in users. If you’re using a different authentication backend, this method may\nrequire different credentials. It requires whichever credentials are\nrequired by your backend’s authenticate() method. login() returns True if it the credentials were accepted and\nlogin was successful. Finally, you’ll need to remember to create user accounts before you can\nuse this method. As we explained above, the test runner is executed\nusing a test database, which contains no users by default. As a result,\nuser accounts that are valid on your production site will not work\nunder test conditions. You’ll need to create users as part of the test\nsuite – either manually (using the Django model API) or with a test\nfixture. Remember that if you want your test user to have a password,\nyou can’t set the user’s password by setting the password attribute\ndirectly – you must use the set_password() function to\nstore a correctly hashed password. Alternatively, you can use the create_user() helper\nmethod to create a new user with a correctly hashed password. Changed in Django 5.0: alogin() method was added. force_login ( user , backend = None ) ¶ aforce_login ( user , backend = None ) ¶ Asynchronous version : aforce_login() If your site uses Django’s authentication\nsystem , you can use the force_login() method\nto simulate the effect of a user logging into the site. Use this method\ninstead of login() when a test requires a user be logged in and\nthe details of how a user logged in aren’t important. Unlike login() , this method skips the authentication and\nverification steps: inactive users ( is_active=False ) are permitted to login\nand the user’s credentials don’t need to be provided. The user will have its backend attribute set to the value of the backend argument (which should be a dotted Python path string), or\nto settings.AUTHENTICATION_BACKENDS[0] if a value isn’t provided.\nThe authenticate() function called by login() normally annotates the user like this. This method is faster than login() since the expensive\npassword hashing algorithms are bypassed. Also, you can speed up login() by using a weaker hasher while testing . Changed in Django 5.0: aforce_login() method was added. logout () ¶ alogout () ¶ Asynchronous version : alogout() If your site uses Django’s authentication system ,\nthe logout() method can be used to simulate the effect of a user\nlogging out of your site. After you call this method, the test client will have all the cookies\nand session data cleared to defaults. Subsequent requests will appear\nto come from an AnonymousUser . Changed in Django 5.0: alogout() method was added. Testing responses ¶ The get() and post() methods both return a Response object. This Response object is not the same as the HttpResponse object returned\nby Django views; the test response object has some additional data useful for\ntest code to verify. Specifically, a Response object has the following attributes: class Response ¶ client ¶ The test client that was used to make the request that resulted in the\nresponse. content ¶ The body of the response, as a bytestring. This is the final page\ncontent as rendered by the view, or any error message. context ¶ The template Context instance that was used to render the template that\nproduced the response content. If the rendered page used multiple templates, then context will be a\nlist of Context objects, in the order in which they were rendered. Regardless of the number of templates used during rendering, you can\nretrieve context values using the [] operator. For example, the\ncontext variable name could be retrieved using: >>> response = client . get ( \"/foo/\" ) >>> response . context [ \"name\" ] 'Arthur' Not using Django templates? This attribute is only populated when using the DjangoTemplates backend.\nIf you’re using another template engine, context_data may be a suitable alternative on responses with that attribute. exc_info ¶ A tuple of three values that provides information about the unhandled\nexception, if any, that occurred during the view. The values are (type, value, traceback), the same as returned by\nPython’s sys.exc_info() . Their meanings are: type : The type of the exception. value : The exception instance. traceback : A traceback object which encapsulates the call stack at\nthe point where the exception originally occurred. If no exception occurred, then exc_info will be None . json ( ** kwargs ) ¶ The body of the response, parsed as JSON. Extra keyword arguments are\npassed to json.loads() . For example: >>> response = client . get ( \"/foo/\" ) >>> response . json ()[ \"name\" ] 'Arthur' If the Content-Type header is not \"application/json\" , then a ValueError will be raised when trying to parse the response. request ¶ The request data that stimulated the response. wsgi_request ¶ The WSGIRequest instance generated by the test handler that\ngenerated the response. status_code ¶ The HTTP status of the response, as an integer. For a full list\nof defined codes, see the IANA status code registry . templates ¶ A list of Template instances used to render the final content, in\nthe order they were rendered. For each template in the list, use template.name to get the template’s file name, if the template was\nloaded from a file. (The name is a string such as 'admin/index.html' .) Not using Django templates? This attribute is only populated when using the DjangoTemplates backend.\nIf you’re using another template engine, template_name may be a suitable alternative if you only need the name of the\ntemplate used for rendering. resolver_match ¶ An instance of ResolverMatch for the response.\nYou can use the func attribute, for\nexample, to verify the view that served the response: # my_view here is a function based view. self . assertEqual ( response . resolver_match . func , my_view ) # Class-based views need to compare the view_class, as the # functions generated by as_view() won't be equal. self . assertIs ( response . resolver_match . func . view_class , MyView ) If the given URL is not found, accessing this attribute will raise a Resolver404 exception. As with a normal response, you can also access the headers through HttpResponse.headers . For example, you could determine the content\ntype of a response using response.headers['Content-Type'] . Exceptions ¶ If you point the test client at a view that raises an exception and Client.raise_request_exception is True , that exception will be visible\nin the test case. You can then use a standard try ... except block or assertRaises() to test for exceptions. The only exceptions that are not visible to the test client are Http404 , PermissionDenied , SystemExit , and SuspiciousOperation . Django catches these\nexceptions internally and converts them into the appropriate HTTP response\ncodes. In these cases, you can check response.status_code in your test. If Client.raise_request_exception is False , the test client will return a\n500 response as would be returned to a browser. The response has the attribute exc_info to provide information about the unhandled\nexception. Persistent state ¶ The test client is stateful. If a response returns a cookie, then that cookie\nwill be stored in the test client and sent with all subsequent get() and post() requests. Expiration policies for these cookies are not followed. If you want a cookie\nto expire, either delete it manually or create a new Client instance (which\nwill effectively delete all cookies). A test client has attributes that store persistent state information. You can\naccess these properties as part of a test condition. Client. cookies ¶ A Python SimpleCookie object, containing the current\nvalues of all the client cookies. See the documentation of the http.cookies module for more. Client. session ¶ A dictionary-like object containing session information. See the session documentation for full details. To modify the session and then save it, it must be stored in a variable\nfirst (because a new SessionStore is created every time this property\nis accessed): def test_something ( self ): session = self . client . session session [ \"somekey\" ] = \"test\" session . save () Client. asession () ¶ New in Django 5.0. This is similar to the session attribute but it works in async\ncontexts. Setting the language ¶ When testing applications that support internationalization and localization,\nyou might want to set the language for a test client request. The method for\ndoing so depends on whether or not the LocaleMiddleware is enabled. If the middleware is enabled, the language can be set by creating a cookie with\na name of LANGUAGE_COOKIE_NAME and a value of the language code: from django.conf import settings def test_language_using_cookie ( self ): self . client . cookies . load ({ settings . LANGUAGE_COOKIE_NAME : \"fr\" }) response = self . client . get ( \"/\" ) self . assertEqual ( response . content , b \"Bienvenue sur mon site.\" ) or by including the Accept-Language HTTP header in the request: def test_language_using_header ( self ): response = self . client . get ( \"/\" , headers = { \"accept-language\" : \"fr\" }) self . assertEqual ( response . content , b \"Bienvenue sur mon site.\" ) Note When using these methods, ensure to reset the active language at the end of\neach test: def tearDown ( self ): translation . activate ( settings . LANGUAGE_CODE ) More details are in How Django discovers language preference . If the middleware isn’t enabled, the active language may be set using translation.override() : from django.utils import translation def test_language_using_override ( self ): with translation . override ( \"fr\" ): response = self . client . get ( \"/\" ) self . assertEqual ( response . content , b \"Bienvenue sur mon site.\" ) More details are in Explicitly setting the active language . Example ¶ The following is a unit test using the test client: import unittest from django.test import Client class SimpleTest ( unittest . TestCase ): def setUp ( self ): # Every test needs a client. self . client = Client () def test_details ( self ): # Issue a GET request. response = self . client . get ( \"/customer/details/\" ) # Check that the response is 200 OK. self . assertEqual ( response . status_code , 200 ) # Check that the rendered context contains 5 customers. self . assertEqual ( len ( response . context [ \"customers\" ]), 5 ) See also django.test.RequestFactory Provided test case classes ¶ Normal Python unit test classes extend a base class of unittest.TestCase . Django provides a few extensions of this base class: Hierarchy of Django unit testing classes ¶ You can convert a normal unittest.TestCase to any of the subclasses:\nchange the base class of your test from unittest.TestCase to the subclass.\nAll of the standard Python unit test functionality will be available, and it\nwill be augmented with some useful additions as described in each section\nbelow. SimpleTestCase ¶ class SimpleTestCase [source] ¶ A subclass of unittest.TestCase that adds this functionality: Some useful assertions like: Checking that a callable raises a certain exception . Checking that a callable triggers a certain warning . Testing form field rendering and error treatment . Testing HTML responses for the presence/lack of a given fragment . Verifying that a template has/hasn't been used to generate a given response content . Verifying that two URLs are equal. Verifying an HTTP redirect is\nperformed by the app. Robustly testing two HTML fragments for equality/inequality or containment . Robustly testing two XML fragments for equality/inequality. Robustly testing two JSON fragments for equality. The ability to run tests with modified settings . Using the client Client . If your tests make any database queries, use subclasses TransactionTestCase or TestCase . SimpleTestCase. databases ¶ SimpleTestCase disallows database queries by default. This\nhelps to avoid executing write queries which will affect other tests\nsince each SimpleTestCase test isn’t run in a transaction. If you\naren’t concerned about this problem, you can disable this behavior by\nsetting the databases class attribute to '__all__' on your test\nclass. Warning SimpleTestCase and its subclasses (e.g. TestCase , …) rely on setUpClass() and tearDownClass() to perform some class-wide\ninitialization (e.g. overriding settings). If you need to override those\nmethods, don’t forget to call the super implementation: class MyTestCase ( TestCase ): @classmethod def setUpClass ( cls ): super () . setUpClass () ... @classmethod def tearDownClass ( cls ): ... super () . tearDownClass () Be sure to account for Python’s behavior if an exception is raised during setUpClass() . If that happens, neither the tests in the class nor tearDownClass() are run. In the case of django.test.TestCase ,\nthis will leak the transaction created in super() which results in\nvarious symptoms including a segmentation fault on some platforms (reported\non macOS). If you want to intentionally raise an exception such as unittest.SkipTest in setUpClass() , be sure to do it before\ncalling super() to avoid this. TransactionTestCase ¶ class TransactionTestCase [source] ¶ TransactionTestCase inherits from SimpleTestCase to\nadd some database-specific features: Resetting the database to a known state at the beginning of each test to\nease testing and using the ORM. Database fixtures . Test skipping based on database backend features . The remaining specialized assert* methods. Django’s TestCase class is a more commonly used subclass of TransactionTestCase that makes use of database transaction facilities\nto speed up the process of resetting the database to a known state at the\nbeginning of each test. A consequence of this, however, is that some database\nbehaviors cannot be tested within a Django TestCase class. For instance,\nyou cannot test that a block of code is executing within a transaction, as is\nrequired when using select_for_update() . In those cases,\nyou should use TransactionTestCase . TransactionTestCase and TestCase are identical except for the manner\nin which the database is reset to a known state and the ability for test code\nto test the effects of commit and rollback: A TransactionTestCase resets the database after the test runs by\ntruncating all tables. A TransactionTestCase may call commit and rollback\nand observe the effects of these calls on the database. A TestCase , on the other hand, does not truncate tables after a test.\nInstead, it encloses the test code in a database transaction that is rolled\nback at the end of the test. This guarantees that the rollback at the end of\nthe test restores the database to its initial state. Warning TestCase running on a database that does not support rollback (e.g. MySQL\nwith the MyISAM storage engine), and all instances of TransactionTestCase ,\nwill roll back at the end of the test by deleting all data from the test\ndatabase. Apps will not see their data reloaded ;\nif you need this functionality (for example, third-party apps should enable\nthis) you can set serialized_rollback = True inside the TestCase body. TestCase ¶ class TestCase [source] ¶ This is the most common class to use for writing tests in Django. It inherits\nfrom TransactionTestCase (and by extension SimpleTestCase ).\nIf your Django application doesn’t use a database, use SimpleTestCase . The class: Wraps the tests within two nested atomic() blocks: one for the whole class and one for each test. Therefore, if you want\nto test some specific database transaction behavior, use TransactionTestCase . Checks deferrable database constraints at the end of each test. It also provides an additional method: classmethod TestCase. setUpTestData () [source] ¶ The class-level atomic block described above allows the creation of\ninitial data at the class level, once for the whole TestCase . This\ntechnique allows for faster tests as compared to using setUp() . For example: from django.test import TestCase class MyTests ( TestCase ): @classmethod def setUpTestData ( cls ): # Set up data for the whole TestCase cls . foo = Foo . objects . create ( bar = \"Test\" ) ... def test1 ( self ): # Some test using self.foo ... def test2 ( self ): # Some other test using self.foo ... Note that if the tests are run on a database with no transaction support\n(for instance, MySQL with the MyISAM engine), setUpTestData() will be\ncalled before each test, negating the speed benefits. Objects assigned to class attributes in setUpTestData() must support\ncreating deep copies with copy.deepcopy() in order to isolate them\nfrom alterations performed by each test methods. classmethod TestCase. captureOnCommitCallbacks ( using = DEFAULT_DB_ALIAS , execute = False ) [source] ¶ Returns a context manager that captures transaction.on_commit() callbacks for the given database\nconnection. It returns a list that contains, on exit of the context, the\ncaptured callback functions. From this list you can make assertions on the\ncallbacks or call them to invoke their side effects, emulating a commit. using is the alias of the database connection to capture callbacks for. If execute is True , all the callbacks will be called as the context\nmanager exits, if no exception occurred. This emulates a commit after the\nwrapped block of code. For example: from django.core import mail from django.test import TestCase class ContactTests ( TestCase ): def test_post ( self ): with self . captureOnCommitCallbacks ( execute = True ) as callbacks : response = self . client . post ( \"/contact/\" , { \"message\" : \"I like your site\" }, ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( len ( callbacks ), 1 ) self . assertEqual ( len ( mail . outbox ), 1 ) self . assertEqual ( mail . outbox [ 0 ] . subject , \"Contact Form\" ) self . assertEqual ( mail . outbox [ 0 ] . body , \"I like your site\" ) LiveServerTestCase ¶ class LiveServerTestCase [source] ¶ LiveServerTestCase does basically the same as TransactionTestCase with one extra feature: it launches a\nlive Django server in the background on setup, and shuts it down on teardown.\nThis allows the use of automated test clients other than the Django dummy client such as, for example, the Selenium client, to execute a series of functional tests inside a browser and simulate a\nreal user’s actions. The live server listens on localhost and binds to port 0 which uses a free\nport assigned by the operating system. The server’s URL can be accessed with self.live_server_url during the tests. To demonstrate how to use LiveServerTestCase , let’s write a Selenium test.\nFirst of all, you need to install the selenium package: /  $ python -m pip install \"selenium >= 4.8.0\" ...\\> py -m pip install \"selenium >= 4.8.0\" Then, add a LiveServerTestCase -based test to your app’s tests module\n(for example: myapp/tests.py ). For this example, we’ll assume you’re using\nthe staticfiles app and want to have static files served\nduring the execution of your tests similar to what we get at development time\nwith DEBUG=True , i.e. without having to collect them using collectstatic . We’ll use\nthe StaticLiveServerTestCase subclass which provides that functionality. Replace it with django.test.LiveServerTestCase if you don’t need that. The code for this test may look as follows: from django.contrib.staticfiles.testing import StaticLiveServerTestCase from selenium.webdriver.common.by import By from selenium.webdriver.firefox.webdriver import WebDriver class MySeleniumTests ( StaticLiveServerTestCase ): fixtures = [ \"user-data.json\" ] @classmethod def setUpClass ( cls ): super () . setUpClass () cls . selenium = WebDriver () cls . selenium . implicitly_wait ( 10 ) @classmethod def tearDownClass ( cls ): cls . selenium . quit () super () . tearDownClass () def test_login ( self ): self . selenium . get ( f \" { self . live_server_url } /login/\" ) username_input = self . selenium . find_element ( By . NAME , \"username\" ) username_input . send_keys ( \"myuser\" ) password_input = self . selenium . find_element ( By . NAME , \"password\" ) password_input . send_keys ( \"secret\" ) self . selenium . find_element ( By . XPATH , '//input[@value=\"Log in\"]' ) . click () Finally, you may run the test as follows: /  $ ./manage.py test myapp.tests.MySeleniumTests.test_login ...\\> manage.py test myapp.tests.MySeleniumTests.test_login This example will automatically open Firefox then go to the login page, enter\nthe credentials and press the “Log in” button. Selenium offers other drivers in\ncase you do not have Firefox installed or wish to use another browser. The\nexample above is just a tiny fraction of what the Selenium client can do; check\nout the full reference for more details. Note When using an in-memory SQLite database to run the tests, the same database\nconnection will be shared by two threads in parallel: the thread in which\nthe live server is run and the thread in which the test case is run. It’s\nimportant to prevent simultaneous database queries via this shared\nconnection by the two threads, as that may sometimes randomly cause the\ntests to fail. So you need to ensure that the two threads don’t access the\ndatabase at the same time. In particular, this means that in some cases\n(for example, just after clicking a link or submitting a form), you might\nneed to check that a response is received by Selenium and that the next\npage is loaded before proceeding with further test execution.\nDo this, for example, by making Selenium wait until the <body> HTML tag\nis found in the response (requires Selenium > 2.13): def test_login ( self ): from selenium.webdriver.support.wait import WebDriverWait timeout = 2 ... self . selenium . find_element ( By . XPATH , '//input[@value=\"Log in\"]' ) . click () # Wait until the response is received WebDriverWait ( self . selenium , timeout ) . until ( lambda driver : driver . find_element ( By . TAG_NAME , \"body\" ) ) The tricky thing here is that there’s really no such thing as a “page load,”\nespecially in modern web apps that generate HTML dynamically after the\nserver generates the initial document. So, checking for the presence of <body> in the response might not necessarily be appropriate for all use\ncases. Please refer to the Selenium FAQ and Selenium documentation for more information. Test cases features ¶ Default test client ¶ SimpleTestCase. client ¶ Every test case in a django.test.*TestCase instance has access to an\ninstance of a Django test client. This client can be accessed as self.client . This client is recreated for each test, so you don’t have to\nworry about state (such as cookies) carrying over from one test to another. This means, instead of instantiating a Client in each test: import unittest from django.test import Client class SimpleTest ( unittest . TestCase ): def test_details ( self ): client = Client () response = client . get ( \"/customer/details/\" ) self . assertEqual ( response . status_code , 200 ) def test_index ( self ): client = Client () response = client . get ( \"/customer/index/\" ) self . assertEqual ( response . status_code , 200 ) …you can refer to self.client , like so: from django.test import TestCase class SimpleTest ( TestCase ): def test_details ( self ): response = self . client . get ( \"/customer/details/\" ) self . assertEqual ( response . status_code , 200 ) def test_index ( self ): response = self . client . get ( \"/customer/index/\" ) self . assertEqual ( response . status_code , 200 ) Customizing the test client ¶ SimpleTestCase. client_class ¶ If you want to use a different Client class (for example, a subclass\nwith customized behavior), use the client_class class\nattribute: from django.test import Client , TestCase class MyTestClient ( Client ): # Specialized methods for your environment ... class MyTest ( TestCase ): client_class = MyTestClient def test_my_stuff ( self ): # Here self.client is an instance of MyTestClient... call_some_test_code () Fixture loading ¶ TransactionTestCase. fixtures ¶ A test case class for a database-backed website isn’t much use if there isn’t\nany data in the database. Tests are more readable and it’s more maintainable to\ncreate objects using the ORM, for example in TestCase.setUpTestData() ,\nhowever, you can also use fixtures . A fixture is a collection of data that Django knows how to import into a\ndatabase. For example, if your site has user accounts, you might set up a\nfixture of fake user accounts in order to populate your database during tests. The most straightforward way of creating a fixture is to use the manage.py dumpdata command. This assumes you\nalready have some data in your database. See the dumpdata documentation for more details. Once you’ve created a fixture and placed it in a fixtures directory in one\nof your INSTALLED_APPS , you can use it in your unit tests by\nspecifying a fixtures class attribute on your django.test.TestCase subclass: from django.test import TestCase from myapp.models import Animal class AnimalTestCase ( TestCase ): fixtures = [ \"mammals.json\" , \"birds\" ] def setUp ( self ): # Test definitions as before. call_setup_methods () def test_fluffy_animals ( self ): # A test that uses the fixtures. call_some_test_code () Here’s specifically what will happen: At the start of each test, before setUp() is run, Django will flush the\ndatabase, returning the database to the state it was in directly after migrate was called. Then, all the named fixtures are installed. In this example, Django will\ninstall any JSON fixture named mammals , followed by any fixture named birds . See the Fixtures topic for more details on\ndefining and installing fixtures. For performance reasons, TestCase loads fixtures once for the entire\ntest class, before setUpTestData() , instead of before each\ntest, and it uses transactions to clean the database before each test. In any case,\nyou can be certain that the outcome of a test will not be affected by another\ntest or by the order of test execution. By default, fixtures are only loaded into the default database. If you are\nusing multiple databases and set TransactionTestCase.databases ,\nfixtures will be loaded into all specified databases. URLconf configuration ¶ If your application provides views, you may want to include tests that use the\ntest client to exercise those views. However, an end user is free to deploy the\nviews in your application at any URL of their choosing. This means that your\ntests can’t rely upon the fact that your views will be available at a\nparticular URL. Decorate your test class or test method with @override_settings(ROOT_URLCONF=...) for URLconf configuration. Multi-database support ¶ TransactionTestCase. databases ¶ Django sets up a test database corresponding to every database that is\ndefined in the DATABASES definition in your settings and referred to\nby at least one test through databases . However, a big part of the time taken to run a Django TestCase is consumed\nby the call to flush that ensures that you have a clean database at the\nstart of each test run. If you have multiple databases, multiple flushes are\nrequired (one for each database), which can be a time consuming activity –\nespecially if your tests don’t need to test multi-database activity. As an optimization, Django only flushes the default database at\nthe start of each test run. If your setup contains multiple databases,\nand you have a test that requires every database to be clean, you can\nuse the databases attribute on the test suite to request extra databases\nto be flushed. For example: class TestMyViews ( TransactionTestCase ): databases = { \"default\" , \"other\" } def test_index_page_view ( self ): call_some_test_code () This test case class will flush the default and other test databases\nbefore running test_index_page_view . You can also use '__all__' to\nspecify that all of the test databases must be flushed. The databases flag also controls which databases the TransactionTestCase.fixtures are loaded into. By default, fixtures are\nonly loaded into the default database. Queries against databases not in databases will give assertion errors to\nprevent state leaking between tests. TestCase. databases ¶ By default, only the default database will be wrapped in a transaction\nduring a TestCase ’s execution and attempts to query other databases will\nresult in assertion errors to prevent state leaking between tests. Use the databases class attribute on the test class to request transaction\nwrapping against non- default databases. For example: class OtherDBTests ( TestCase ): databases = { \"other\" } def test_other_db_query ( self ): ... This test will only allow queries against the other database. Just like for SimpleTestCase.databases and TransactionTestCase.databases , the '__all__' constant can be used to specify that the test should allow\nqueries to all databases. Overriding settings ¶ Warning Use the functions below to temporarily alter the value of settings in tests.\nDon’t manipulate django.conf.settings directly as Django won’t restore\nthe original values after such manipulations. SimpleTestCase. settings () [source] ¶ For testing purposes it’s often useful to change a setting temporarily and\nrevert to the original value after running the testing code. For this use case\nDjango provides a standard Python context manager (see PEP 343 ) called settings() , which can be used like this: from django.test import TestCase class LoginTestCase ( TestCase ): def test_login ( self ): # First check for the default behavior response = self . client . get ( \"/sekrit/\" ) self . assertRedirects ( response , \"/accounts/login/?next=/sekrit/\" ) # Then override the LOGIN_URL setting with self . settings ( LOGIN_URL = \"/other/login/\" ): response = self . client . get ( \"/sekrit/\" ) self . assertRedirects ( response , \"/other/login/?next=/sekrit/\" ) This example will override the LOGIN_URL setting for the code\nin the with block and reset its value to the previous state afterward. SimpleTestCase. modify_settings () [source] ¶ It can prove unwieldy to redefine settings that contain a list of values. In\npractice, adding or removing values is often sufficient. Django provides the modify_settings() context manager for easier\nsettings changes: from django.test import TestCase class MiddlewareTestCase ( TestCase ): def test_cache_middleware ( self ): with self . modify_settings ( MIDDLEWARE = { \"append\" : \"django.middleware.cache.FetchFromCacheMiddleware\" , \"prepend\" : \"django.middleware.cache.UpdateCacheMiddleware\" , \"remove\" : [ \"django.contrib.sessions.middleware.SessionMiddleware\" , \"django.contrib.auth.middleware.AuthenticationMiddleware\" , \"django.contrib.messages.middleware.MessageMiddleware\" , ], } ): response = self . client . get ( \"/\" ) # ... For each action, you can supply either a list of values or a string. When the\nvalue already exists in the list, append and prepend have no effect;\nneither does remove when the value doesn’t exist. override_settings ( ** kwargs ) [source] ¶ In case you want to override a setting for a test method, Django provides the override_settings() decorator (see PEP 318 ). It’s used\nlike this: from django.test import TestCase , override_settings class LoginTestCase ( TestCase ): @override_settings ( LOGIN_URL = \"/other/login/\" ) def test_login ( self ): response = self . client . get ( \"/sekrit/\" ) self . assertRedirects ( response , \"/other/login/?next=/sekrit/\" ) The decorator can also be applied to TestCase classes: from django.test import TestCase , override_settings @override_settings ( LOGIN_URL = \"/other/login/\" ) class LoginTestCase ( TestCase ): def test_login ( self ): response = self . client . get ( \"/sekrit/\" ) self . assertRedirects ( response , \"/other/login/?next=/sekrit/\" ) modify_settings ( * args , ** kwargs ) [source] ¶ Likewise, Django provides the modify_settings() decorator: from django.test import TestCase , modify_settings class MiddlewareTestCase ( TestCase ): @modify_settings ( MIDDLEWARE = { \"append\" : \"django.middleware.cache.FetchFromCacheMiddleware\" , \"prepend\" : \"django.middleware.cache.UpdateCacheMiddleware\" , } ) def test_cache_middleware ( self ): response = self . client . get ( \"/\" ) # ... The decorator can also be applied to test case classes: from django.test import TestCase , modify_settings @modify_settings ( MIDDLEWARE = { \"append\" : \"django.middleware.cache.FetchFromCacheMiddleware\" , \"prepend\" : \"django.middleware.cache.UpdateCacheMiddleware\" , } ) class MiddlewareTestCase ( TestCase ): def test_cache_middleware ( self ): response = self . client . get ( \"/\" ) # ... Note When given a class, these decorators modify the class directly and return\nit; they don’t create and return a modified copy of it. So if you try to\ntweak the above examples to assign the return value to a different name\nthan LoginTestCase or MiddlewareTestCase , you may be surprised to\nfind that the original test case classes are still equally affected by the\ndecorator. For a given class, modify_settings() is\nalways applied after override_settings() . Warning The settings file contains some settings that are only consulted during\ninitialization of Django internals. If you change them with override_settings , the setting is changed if you access it via the django.conf.settings module, however, Django’s internals access it\ndifferently. Effectively, using override_settings() or modify_settings() with these settings is probably not\ngoing to do what you expect it to do. We do not recommend altering the DATABASES setting. Altering\nthe CACHES setting is possible, but a bit tricky if you are\nusing internals that make using of caching, like django.contrib.sessions . For example, you will have to reinitialize\nthe session backend in a test that uses cached sessions and overrides CACHES . Finally, avoid aliasing your settings as module-level constants as override_settings() won’t work on such values since they are\nonly evaluated the first time the module is imported. You can also simulate the absence of a setting by deleting it after settings\nhave been overridden, like this: @override_settings () def test_something ( self ): del settings . LOGIN_URL ... When overriding settings, make sure to handle the cases in which your app’s\ncode uses a cache or similar feature that retains state even if the setting is\nchanged. Django provides the django.test.signals.setting_changed signal that lets you register callbacks to clean up and otherwise reset state\nwhen settings are changed. Django itself uses this signal to reset various data: Overridden settings Data reset USE_TZ, TIME_ZONE Databases timezone TEMPLATES Template engines FORM_RENDERER Default renderer SERIALIZATION_MODULES Serializers cache LOCALE_PATHS, LANGUAGE_CODE Default translation and loaded translations STATIC_ROOT, STATIC_URL, STORAGES Storages configuration Changed in Django 5.1: Resetting the default renderer when the FORM_RENDERER setting is\nchanged was added. Isolating apps ¶ utils. isolate_apps ( * app_labels , attr_name = None , kwarg_name = None ) ¶ Registers the models defined within a wrapped context into their own\nisolated apps registry. This functionality is useful\nwhen creating model classes for tests, as the classes will be cleanly\ndeleted afterward, and there is no risk of name collisions. The app labels which the isolated registry should contain must be passed as\nindividual arguments. You can use isolate_apps() as a decorator or a\ncontext manager. For example: from django.db import models from django.test import SimpleTestCase from django.test.utils import isolate_apps class MyModelTests ( SimpleTestCase ): @isolate_apps ( \"app_label\" ) def test_model_definition ( self ): class TestModel ( models . Model ): pass ... … or: with isolate_apps ( \"app_label\" ): class TestModel ( models . Model ): pass ... The decorator form can also be applied to classes. Two optional keyword arguments can be specified: attr_name : attribute assigned the isolated registry if used as a\nclass decorator. kwarg_name : keyword argument passing the isolated registry if used as\na function decorator. The temporary Apps instance used to isolate model registration can be\nretrieved as an attribute when used as a class decorator by using the attr_name parameter: @isolate_apps ( \"app_label\" , attr_name = \"apps\" ) class TestModelDefinition ( SimpleTestCase ): def test_model_definition ( self ): class TestModel ( models . Model ): pass self . assertIs ( self . apps . get_model ( \"app_label\" , \"TestModel\" ), TestModel ) … or alternatively as an argument on the test method when used as a method\ndecorator by using the kwarg_name parameter: class TestModelDefinition ( SimpleTestCase ): @isolate_apps ( \"app_label\" , kwarg_name = \"apps\" ) def test_model_definition ( self , apps ): class TestModel ( models . Model ): pass self . assertIs ( apps . get_model ( \"app_label\" , \"TestModel\" ), TestModel ) Emptying the test outbox ¶ If you use any of Django’s custom TestCase classes, the test runner will\nclear the contents of the test email outbox at the start of each test case. For more detail on email services during tests, see Email services below. Assertions ¶ As Python’s normal unittest.TestCase class implements assertion methods\nsuch as assertTrue() and assertEqual() , Django’s custom TestCase class\nprovides a number of custom assertion methods that are useful for testing web\napplications: The failure messages given by most of these assertion methods can be customized\nwith the msg_prefix argument. This string will be prefixed to any failure\nmessage generated by the assertion. This allows you to provide additional\ndetails that may help you to identify the location and cause of a failure in\nyour test suite. SimpleTestCase. assertRaisesMessage ( expected_exception , expected_message , callable , * args , ** kwargs ) [source] ¶ SimpleTestCase. assertRaisesMessage ( expected_exception , expected_message ) Asserts that execution of callable raises expected_exception and\nthat expected_message is found in the exception’s message. Any other\noutcome is reported as a failure. It’s a simpler version of unittest.TestCase.assertRaisesRegex() with the difference that expected_message isn’t treated as a regular expression. If only the expected_exception and expected_message parameters are\ngiven, returns a context manager so that the code being tested can be\nwritten inline rather than as a function: with self . assertRaisesMessage ( ValueError , \"invalid literal for int()\" ): int ( \"a\" ) SimpleTestCase. assertWarnsMessage ( expected_warning , expected_message , callable , * args , ** kwargs ) [source] ¶ SimpleTestCase. assertWarnsMessage ( expected_warning , expected_message ) Analogous to SimpleTestCase.assertRaisesMessage() but for assertWarnsRegex() instead of assertRaisesRegex() . SimpleTestCase. assertFieldOutput ( fieldclass , valid , invalid , field_args = None , field_kwargs = None , empty_value = '' ) [source] ¶ Asserts that a form field behaves correctly with various inputs. Parameters : fieldclass – the class of the field to be tested. valid – a dictionary mapping valid inputs to their expected cleaned\nvalues. invalid – a dictionary mapping invalid inputs to one or more raised\nerror messages. field_args – the args passed to instantiate the field. field_kwargs – the kwargs passed to instantiate the field. empty_value – the expected clean output for inputs in empty_values . For example, the following code tests that an EmailField accepts a@a.com as a valid email address, but rejects aaa with a reasonable\nerror message: self . assertFieldOutput ( EmailField , { \"a@a.com\" : \"a@a.com\" }, { \"aaa\" : [ \"Enter a valid email address.\" ]} ) SimpleTestCase. assertFormError ( form , field , errors , msg_prefix = '' ) [source] ¶ Asserts that a field on a form raises the provided list of errors. form is a Form instance. The form must be bound but not necessarily\nvalidated ( assertFormError() will automatically call full_clean() on the form). field is the name of the field on the form to check. To check the form’s non-field errors , use field=None . errors is a list of all the error strings that the field is expected to\nhave. You can also pass a single error string if you only expect one error\nwhich means that errors='error message' is the same as errors=['error message'] . SimpleTestCase. assertFormSetError ( formset , form_index , field , errors , msg_prefix = '' ) [source] ¶ Asserts that the formset raises the provided list of errors when\nrendered. formset is a FormSet instance. The formset must be bound but not\nnecessarily validated ( assertFormSetError() will automatically call the full_clean() on the formset). form_index is the number of the form within the FormSet (starting\nfrom 0). Use form_index=None to check the formset’s non-form errors,\ni.e. the errors you get when calling formset.non_form_errors() . In that\ncase you must also use field=None . field and errors have the same meaning as the parameters to assertFormError() . SimpleTestCase. assertContains ( response , text , count = None , status_code = 200 , msg_prefix = '' , html = False ) [source] ¶ Asserts that a response produced the\ngiven status_code and that text appears in its content . If count is provided, text must occur exactly count times in the response. Set html to True to handle text as HTML. The comparison with\nthe response content will be based on HTML semantics instead of\ncharacter-by-character equality. Whitespace is ignored in most cases,\nattribute ordering is not significant. See assertHTMLEqual() for more details. Changed in Django 5.1: In older versions, error messages didn’t contain the response content. SimpleTestCase. assertNotContains ( response , text , status_code = 200 , msg_prefix = '' , html = False ) [source] ¶ Asserts that a response produced the\ngiven status_code and that text does not appear in its content . Set html to True to handle text as HTML. The comparison with\nthe response content will be based on HTML semantics instead of\ncharacter-by-character equality. Whitespace is ignored in most cases,\nattribute ordering is not significant. See assertHTMLEqual() for more details. Changed in Django 5.1: In older versions, error messages didn’t contain the response content. SimpleTestCase. assertTemplateUsed ( response , template_name , msg_prefix = '' , count = None ) [source] ¶ Asserts that the template with the given name was used in rendering the\nresponse. response must be a response instance returned by the test client . template_name should be a string such as 'admin/index.html' . The count argument is an integer indicating the number of times the\ntemplate should be rendered. Default is None , meaning that the template\nshould be rendered one or more times. You can use this as a context manager, like this: with self . assertTemplateUsed ( \"index.html\" ): render_to_string ( \"index.html\" ) with self . assertTemplateUsed ( template_name = \"index.html\" ): render_to_string ( \"index.html\" ) SimpleTestCase. assertTemplateNotUsed ( response , template_name , msg_prefix = '' ) [source] ¶ Asserts that the template with the given name was not used in rendering\nthe response. You can use this as a context manager in the same way as assertTemplateUsed() . SimpleTestCase. assertURLEqual ( url1 , url2 , msg_prefix = '' ) [source] ¶ Asserts that two URLs are the same, ignoring the order of query string\nparameters except for parameters with the same name. For example, /path/?x=1&y=2 is equal to /path/?y=2&x=1 , but /path/?a=1&a=2 isn’t equal to /path/?a=2&a=1 . SimpleTestCase. assertRedirects ( response , expected_url , status_code = 302 , target_status_code = 200 , msg_prefix = '' , fetch_redirect_response = True ) [source] ¶ Asserts that the response returned a status_code redirect status, redirected\nto expected_url (including any GET data), and that the final page\nwas received with target_status_code . If your request used the follow argument, the expected_url and target_status_code will be the url and status code for the final\npoint of the redirect chain. If fetch_redirect_response is False , the final page won’t be\nloaded. Since the test client can’t fetch external URLs, this is\nparticularly useful if expected_url isn’t part of your Django app. Scheme is handled correctly when making comparisons between two URLs. If\nthere isn’t any scheme specified in the location where we are redirected to,\nthe original request’s scheme is used. If present, the scheme in expected_url is the one used to make the comparisons to. SimpleTestCase. assertHTMLEqual ( html1 , html2 , msg = None ) [source] ¶ Asserts that the strings html1 and html2 are equal. The comparison\nis based on HTML semantics. The comparison takes following things into\naccount: Whitespace before and after HTML tags is ignored. All types of whitespace are considered equivalent. All open tags are closed implicitly, e.g. when a surrounding tag is\nclosed or the HTML document ends. Empty tags are equivalent to their self-closing version. The ordering of attributes of an HTML element is not significant. Boolean attributes (like checked ) without an argument are equal to\nattributes that equal in name and value (see the examples). Text, character references, and entity references that refer to the same\ncharacter are equivalent. The following examples are valid tests and don’t raise any AssertionError : self . assertHTMLEqual ( \"<p>Hello <b>&#x27;world&#x27;!</p>\" , \"\"\"<p> Hello   <b>&#39;world&#39;! </b> </p>\"\"\" , ) self . assertHTMLEqual ( '<input type=\"checkbox\" checked=\"checked\" id=\"id_accept_terms\" />' , '<input id=\"id_accept_terms\" type=\"checkbox\" checked>' , ) html1 and html2 must contain HTML. An AssertionError will be\nraised if one of them cannot be parsed. Output in case of error can be customized with the msg argument. SimpleTestCase. assertHTMLNotEqual ( html1 , html2 , msg = None ) [source] ¶ Asserts that the strings html1 and html2 are not equal. The\ncomparison is based on HTML semantics. See assertHTMLEqual() for details. html1 and html2 must contain HTML. An AssertionError will be\nraised if one of them cannot be parsed. Output in case of error can be customized with the msg argument. SimpleTestCase. assertXMLEqual ( xml1 , xml2 , msg = None ) [source] ¶ Asserts that the strings xml1 and xml2 are equal. The\ncomparison is based on XML semantics. Similarly to assertHTMLEqual() , the comparison is\nmade on parsed content, hence only semantic differences are considered, not\nsyntax differences. When invalid XML is passed in any parameter, an AssertionError is always raised, even if both strings are identical. XML declaration, document type, processing instructions, and comments are\nignored. Only the root element and its children are compared. Output in case of error can be customized with the msg argument. SimpleTestCase. assertXMLNotEqual ( xml1 , xml2 , msg = None ) [source] ¶ Asserts that the strings xml1 and xml2 are not equal. The\ncomparison is based on XML semantics. See assertXMLEqual() for details. Output in case of error can be customized with the msg argument. SimpleTestCase. assertInHTML ( needle , haystack , count = None , msg_prefix = '' ) [source] ¶ Asserts that the HTML fragment needle is contained in the haystack once. If the count integer argument is specified, then additionally the number\nof needle occurrences will be strictly verified. Whitespace in most cases is ignored, and attribute ordering is not\nsignificant. See assertHTMLEqual() for more details. Changed in Django 5.1: In older versions, error messages didn’t contain the haystack . SimpleTestCase. assertNotInHTML ( needle , haystack , msg_prefix = '' ) [source] ¶ New in Django 5.1. Asserts that the HTML fragment needle is not contained in the haystack . Whitespace in most cases is ignored, and attribute ordering is not\nsignificant. See assertHTMLEqual() for more details. SimpleTestCase. assertJSONEqual ( raw , expected_data , msg = None ) [source] ¶ Asserts that the JSON fragments raw and expected_data are equal.\nUsual JSON non-significant whitespace rules apply as the heavyweight is\ndelegated to the json library. Output in case of error can be customized with the msg argument. SimpleTestCase. assertJSONNotEqual ( raw , expected_data , msg = None ) [source] ¶ Asserts that the JSON fragments raw and expected_data are not equal.\nSee assertJSONEqual() for further details. Output in case of error can be customized with the msg argument. TransactionTestCase. assertQuerySetEqual ( qs , values , transform = None , ordered = True , msg = None ) [source] ¶ Asserts that a queryset qs matches a particular iterable of values values . If transform is provided, values is compared to a list produced by\napplying transform to each member of qs . By default, the comparison is also ordering dependent. If qs doesn’t\nprovide an implicit ordering, you can set the ordered parameter to False , which turns the comparison into a collections.Counter comparison.\nIf the order is undefined (if the given qs isn’t ordered and the\ncomparison is against more than one ordered value), a ValueError is\nraised. Output in case of error can be customized with the msg argument. TransactionTestCase. assertNumQueries ( num , func , * args , ** kwargs ) [source] ¶ Asserts that when func is called with *args and **kwargs that num database queries are executed. If a \"using\" key is present in kwargs it is used as the database\nalias for which to check the number of queries: self . assertNumQueries ( 7 , using = \"non_default_db\" ) If you wish to call a function with a using parameter you can do it by\nwrapping the call with a lambda to add an extra parameter: self . assertNumQueries ( 7 , lambda : my_function ( using = 7 )) You can also use this as a context manager: with self . assertNumQueries ( 2 ): Person . objects . create ( name = \"Aaron\" ) Person . objects . create ( name = \"Daniel\" ) Tagging tests ¶ You can tag your tests so you can easily run a particular subset. For example,\nyou might label fast or slow tests: from django.test import tag class SampleTestCase ( TestCase ): @tag ( \"fast\" ) def test_fast ( self ): ... @tag ( \"slow\" ) def test_slow ( self ): ... @tag ( \"slow\" , \"core\" ) def test_slow_but_core ( self ): ... You can also tag a test case class: @tag ( \"slow\" , \"core\" ) class SampleTestCase ( TestCase ): ... Subclasses inherit tags from superclasses, and methods inherit tags from their\nclass. Given: @tag ( \"foo\" ) class SampleTestCaseChild ( SampleTestCase ): @tag ( \"bar\" ) def test ( self ): ... SampleTestCaseChild.test will be labeled with 'slow' , 'core' , 'bar' , and 'foo' . Then you can choose which tests to run. For example, to run only fast tests: /  $ ./manage.py test --tag = fast ...\\> manage.py test --tag=fast Or to run fast tests and the core one (even though it’s slow): /  $ ./manage.py test --tag = fast --tag = core ...\\> manage.py test --tag=fast --tag=core You can also exclude tests by tag. To run core tests if they are not slow: /  $ ./manage.py test --tag = core --exclude-tag = slow ...\\> manage.py test --tag=core --exclude-tag=slow test --exclude-tag has precedence over test --tag , so if a\ntest has two tags and you select one of them and exclude the other, the test\nwon’t be run. Testing asynchronous code ¶ If you merely want to test the output of your asynchronous views, the standard\ntest client will run them inside their own asynchronous loop without any extra\nwork needed on your part. However, if you want to write fully-asynchronous tests for a Django project,\nyou will need to take several things into account. Firstly, your tests must be async def methods on the test class (in order\nto give them an asynchronous context). Django will automatically detect\nany async def tests and wrap them so they run in their own event loop. If you are testing from an asynchronous function, you must also use the\nasynchronous test client. This is available as django.test.AsyncClient ,\nor as self.async_client on any test. class AsyncClient ( enforce_csrf_checks = False , raise_request_exception = True , * , headers = None , query_params = None , ** defaults ) [source] ¶ AsyncClient has the same methods and signatures as the synchronous (normal)\ntest client, with the following exceptions: In the initialization, arbitrary keyword arguments in defaults are added\ndirectly into the ASGI scope. Headers passed as extra keyword arguments should not have the HTTP_ prefix required by the synchronous client (see Client.get() ). For\nexample, here is how to set an HTTP Accept header: >>> c = AsyncClient () >>> c . get ( \"/customers/details/\" , { \"name\" : \"fred\" , \"age\" : 7 }, ACCEPT = \"application/json\" ) Changed in Django 5.0: Support for the follow parameter was added to the AsyncClient . Changed in Django 5.1: The query_params argument was added. Using AsyncClient any method that makes a request must be awaited: async def test_my_thing ( self ): response = await self . async_client . get ( \"/some-url/\" ) self . assertEqual ( response . status_code , 200 ) The asynchronous client can also call synchronous views; it runs through\nDjango’s asynchronous request path , which supports both.\nAny view called through the AsyncClient will get an ASGIRequest object\nfor its request rather than the WSGIRequest that the normal client\ncreates. Warning If you are using test decorators, they must be async-compatible to ensure\nthey work correctly. Django’s built-in decorators will behave correctly, but\nthird-party ones may appear to not execute (they will “wrap” the wrong part\nof the execution flow and not your test). If you need to use these decorators, then you should decorate your test\nmethods with async_to_sync() inside of them instead: from asgiref.sync import async_to_sync from django.test import TestCase class MyTests ( TestCase ): @mock . patch ( ... ) @async_to_sync async def test_my_thing ( self ): ... Email services ¶ If any of your Django views send email using Django’s email\nfunctionality , you probably don’t want to send email each time\nyou run a test using that view. For this reason, Django’s test runner\nautomatically redirects all Django-sent email to a dummy outbox. This lets you\ntest every aspect of sending email – from the number of messages sent to the\ncontents of each message – without actually sending the messages. The test runner accomplishes this by transparently replacing the normal\nemail backend with a testing backend.\n(Don’t worry – this has no effect on any other email senders outside of\nDjango, such as your machine’s mail server, if you’re running one.) django.core.mail. outbox ¶ During test running, each outgoing email is saved in django.core.mail.outbox . This is a list of all EmailMessage instances that have been sent.  The outbox attribute is a special attribute that is created only when the locmem email backend is used. It doesn’t normally exist as part of the django.core.mail module and you can’t import it directly. The code below\nshows how to access this attribute correctly. Here’s an example test that examines django.core.mail.outbox for length\nand contents: from django.core import mail from django.test import TestCase class EmailTest ( TestCase ): def test_send_email ( self ): # Send message. mail . send_mail ( \"Subject here\" , \"Here is the message.\" , \"from@example.com\" , [ \"to@example.com\" ], fail_silently = False , ) # Test that one message has been sent. self . assertEqual ( len ( mail . outbox ), 1 ) # Verify that the subject of the first message is correct. self . assertEqual ( mail . outbox [ 0 ] . subject , \"Subject here\" ) As noted previously , the test outbox is emptied\nat the start of every test in a Django *TestCase . To empty the outbox\nmanually, assign the empty list to mail.outbox : from django.core import mail # Empty the test outbox mail . outbox = [] Management Commands ¶ Management commands can be tested with the call_command() function. The output can be\nredirected into a StringIO instance: from io import StringIO from django.core.management import call_command from django.test import TestCase class ClosepollTest ( TestCase ): def test_command_output ( self ): out = StringIO () call_command ( \"closepoll\" , poll_ids = [ 1 ], stdout = out ) self . assertIn ( 'Successfully closed poll \"1\"' , out . getvalue ()) Skipping tests ¶ The unittest library provides the @skipIf and @skipUnless decorators to allow you to skip tests\nif you know ahead of time that those tests are going to fail under certain\nconditions. For example, if your test requires a particular optional library in order to\nsucceed, you could decorate the test case with @skipIf . Then, the test runner will report that the test wasn’t\nexecuted and why, instead of failing the test or omitting the test altogether. To supplement these test skipping behaviors, Django provides two\nadditional skip decorators. Instead of testing a generic boolean,\nthese decorators check the capabilities of the database, and skip the\ntest if the database doesn’t support a specific named feature. The decorators use a string identifier to describe database features.\nThis string corresponds to attributes of the database connection\nfeatures class. See django.db.backends.base.features.BaseDatabaseFeatures class for a full list of database features\nthat can be used as a basis for skipping tests. skipIfDBFeature ( * feature_name_strings ) [source] ¶ Skip the decorated test or TestCase if all of the named database features\nare supported. For example, the following test will not be executed if the database\nsupports transactions (e.g., it would not run under PostgreSQL, but\nit would under MySQL with MyISAM tables): class MyTests ( TestCase ): @skipIfDBFeature ( \"supports_transactions\" ) def test_transaction_behavior ( self ): # ... conditional test code pass skipUnlessDBFeature ( * feature_name_strings ) [source] ¶ Skip the decorated test or TestCase if any of the named database features\nare not supported. For example, the following test will only be executed if the database\nsupports transactions (e.g., it would run under PostgreSQL, but not under MySQL with MyISAM tables): class MyTests ( TestCase ): @skipUnlessDBFeature ( \"supports_transactions\" ) def test_transaction_behavior ( self ): # ... conditional test code pass", "keywords": ["expected_warning", "iterable", "analogous", "/sekrit/", "py", "comments", "transactions", "accept", "testmodeldefinition", "xml1", "work", "self.async_client", "modify_settings", "@modify_settings", "type", "url", "httpresponse", "emailfield", "select_for_update", "authenticate", "expected_url", "\\", "def", "signal", "renderer", "username", "empty_value", "serializers", "settings", "logout", "reason", "qs", "middlewaretestcase", "overview", "context_data", "classes", "additions", "teardown", "method", "imagefield", "party", "copy.deepcopy", "assertjsonequal", "testing", "semantics", "verification", "person", "transactiontestcase", "performance", "responses", "boolean", "use", "status", "views", "collisions", "messages", "cookies", "dumpdata", "difference", "condition", "project", "login", "topic", "modelbackend", "animal", "url1", "way", "default", "suite", "outbox", "num", "password_input", "client", "choosing", "domain", "assertxmlnotequal", "credentials", "manipulations", "page", "block", "locale_paths", "package", "consequence", "get_model", "https://www.example.com/login/", "payload", "age", "constraints", "assertxmlequal", "users", "send_keys", "content_type", "event", "backend", "self", "xml2", "pass", "argument", "setuptestdata", "alternative", "localization", "testcase.setuptestdata", "closepoll", "stringio", "version", "@classmethod", "tuple", "assertjsonnotequal", "integer", "benefits", "app_label", "aaa", "chain", "assertwarnsmessage", "authenticationmiddleware", "properties", "user-data.json", "./manage.py", "start", "focus", "steps", "element", "myapp.models", "xpath", "assertfieldoutput", "name", "django.http.httprequest.accepts", "deals", "wsgirequest", "header", "test_cache_middleware", "operator", "python", "link", "http404", "instances", "/contact/", "handler", "constructor", "mammals.json", "manage.py", "fixtures", "subclass", "orm", "sessions", "storage", "transaction.on_commit", "faq", "occurrences", "httpresponse.headers", "evaluation", "smith", "tag", "address", "speed", "pep", "index.html", "selenium", "mail.outbox", "true", "*", "framework", "daniel", "head", "requests", "teardownclass", "headers", "poll_ids", "translation.override", "write", "length", "features", "io", "feature", "probes", "id=\"id_accept_terms", "absence", "django.core.mail.outbox", "key", "collection", "parameters", "blocks", "serialization_modules", ".", "enforce_csrf_checks", "alias", "helper", "test_model_definition", "assertnotinhtml", "state", "dictionary", "urlconf", "\\x01\\x00\\x01\\x00\\x00\\x00\\x00", "binds", "script", "octet", "selections", "browser", "driver", "transactiontestcase.databases", "fp", "empty_values", "error", "differences", "template", "inline", "debug", "cache", "interpreter", "rendering", "setting", "agent", "altering", "order", "test_index_page_view", "anonymoususer", "documentation", "-", "patch", "development", "django.contrib.sessions", "basis", "contacttests", "creation", "comparisons", "details/?name", "pairs", "flush", "application", "myapp.tests", "needle", "errors=['error", "assertion", "port", "containment", "migrate", "basedatabasefeatures", "test2", "supports_transactions", "superclasses", "behavior", "system", "segmentation", "put", "mode", "bytestring", "preference", "files", "query", "risk", "isolate_apps", "live_server_url", "following", "default_db_alias", "import", "macos", "'", "bar", "validator", "information", "captureoncommitcallbacks", "paths", "json", "/login/", "staticliveservertestcase", "#", "result", "point", "django.middleware.cache", "django.db.backends.base.features", "section", "authentication", "versions", "¶", "test_language_using_cookie", "firefox", "inequality", "async_to_sync", "web", "definition", "member", "assertin", "environ", "server", "somekey", "magic", "client_class", "precedence", "format", "trace", "test_my_stuff", "force_login", "beginning", "commit", "msg_prefix", "haystack", "assertions", "asgirequest", "example", "full_clean", "session", "ordering", "unit", "djangotemplates", "outcome", "expected_data", "@async_to_sync", "functions", "value", "definitions", "fault", "int", "source", "--exclude", "django.conf.settings", "assertwarnsregex", "replacement", "stream", "assertformerror", "test_details", "optimization", "c", "html", "otherdbtests", "empty", "@override_settings(root_urlconf=", "/path/?y=2&x=1", "examples", "django.db", "things", "locmem", "details", "url/", "setup", "assertis", "override", "as_view", "fred&age=7", "attachment", "form", "rfc", "url2", "my_view", "object", "cookie", "root", "poll", "testmyviews", "warning", "sur", "exit", "library", "attributes", "comparison", "hierarchy", "try", "one", "django.test", "postgresql", "returns", "client.raise_request_exception", "issue", "arthur", "initialization", "myapp", "password", "multiple", "assertformseterror", "api", "note", "callbacks", "mytestclient", "post", "conditions", "level", "valueerror", "django", "timeout", "fragments", "a@a.com", "fieldclass", "message", "fact", "thread", "failure", "parameter", "syntax", "csrf", "text", "field", "form_index", "contents", "expected_message", "strings", "http", "operating", "@mock", "assertcontains", "whitespace", "asserttemplatenotused", "assertequal", "effect", "=", "raise_request_exception", "objects", "parallel", "login/?next=/sekrit/", "fetch_redirect_response", "drivers", "language", "fetchfromcachemiddleware", "defaults", "scheme", "kwarg_name", "ability", "sampletestcasechild", "implementation", "connection", "django.test.utils", "instructions", "callable", "run", "activity", "mysql", "expected_exception", "button", "expiration", "staticfiles", "accounts", "assertraisesregex", "translation", "mytests", "django.test.*testcase", "getvalue", "iana", "serialization", "templates", "entity", "set_password", "template.name", "time", "updatecachemiddleware", "exception", "count", "follow", "testmodel", "property", "middleware", "queryset", "pointer", "args", "emailtest", "commands", "emailmessage", "site", "contact", "manager", "routing", "problem", "gif89a", "create_user", "mammals", "subclasses", "registration", "meaning", "collectstatic", "john", "senders", "my_function", "load", "heavyweight", "output", "handle", "fields", "skipunlessdbfeature", "assertnotcontains", "login_url", "test_index", "static_url", "asyncclient", "testcase", "custom", "systemexit", "animaltestcase", "decorator", "copy", "static_root", "methods", "literal", "call_command", "to", "side", "keyword", "machine", "html1", "none", "urls", "variables", "loop", "override_settings", "msg", "base", "process", "access", "flushes", "4.8.0", "capabilities", "command", "fred&passwd", "javascript", ">", "reset", "manipulate", "email", "requestfactory", "production", "content", "asession", "html2", "end", "classmethod", "fraction", "assertredirects", "flag", "applications", "request", "enforces", "redirects", "internationalization", "tables", "engine", "mapping", "visitor", "test_fast", "facilities", "thing", "series", "protection", "data", "myview", "effects", "sys.exc_info", "options", "assertraisesmessage", "environment", "messagemiddleware", "simulate", "simplecookie", "webdriver", "self.client", "webdriverwait", "references", "readability", "storages", "combination", "reasons", "treatment", "response", "django.core", "formset", "algorithms", "execution", "leaking", "kwargs", "append", "assertinhtml", "children", "query_params", "configuration", "login/", "json.dumps", "platforms", "path", "transactiontestcase.fixtures", "self.live_server_url", "tools", "birds", "django.utils", "directory", "defining", "skiptest", "@isolate_apps", "assertraises", "9.3.8", "constants", "asgi", "language_cookie_name", "module", "apps", "arguments", "practice", "@skipunlessdbfeature", "http.cookies", "test_command_output", "json.loads", "formset.non_form_errors", "context", "memory", "aforce_login", "decorators", "collections", "/customers", "models", "pages", "detail", "@skipifdbfeature", "registry", "call", "asserttrue", "subset", "website", "resolvermatch", "specialized", "frameworks", "test_transaction_behavior", "/app/", "secret", "retrieve", "image", "support", "counter", "localemiddleware", "types", "symptoms", "clients", "simpletest", "background", "changes", "suspiciousoperation", "@skipif", "stack", "rules", "subject", "policies", "json_encoder", "false", "type=\"checkbox", "declaration", "filefield", "prefix", "errors='error", "test_my_thing", "management", "customers", "myisam", "_", "tests", "check", "hand", "meanings", "inputs", "validate_image_file_extension", "/other", "codes", "utils", "values", "cases", "runner", "encoder", "asserthtmlnotequal", "new", "times", "@override_settings", "localhost", "form_renderer", "super", "\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x00\\x02\\x01\\x00\\x00", "caches", "patching", "async", "translations", "feature_name_strings", "lambda", "assertionerror", "test", "len", "behaviors", "fragment", "atomic", "services", "/", "img", "location", "username_input", "input", "mytest", "exc_info", "assertnumqueries", "fixture", "transaction", "myuser", "model", "attr_name", "fr", "character", "processing", "closepolltest", "sessionmiddleware", "equality", "callback", "execute", "copies", "purposes", "prepend", "signatures", "djangojsonencoder", "use_tz", "--tag", "checks", "calls", "n’t", "pip", "normal", "installed_apps", "sqlite", "alogout", "loads", "internals", "hasher", "case", "class", "skip", "number", "xml", "choices", "simpletestcase.databases", "test_language_using_header", "redirect", "/next/", "tuples", "setupclass", "serialized_rollback", "return", "aspect", "action", "attribute", "ones", "function", "registers", "string", "list", "bit", "actions", "loading", "aaron", "interfaces", "flow", "find_element", "view", "app", "myimage.gif", "assert", "cause", "presence", "body", "rollback", "asserthtmlequal", "extension", "user", "part", "file", "/final/", "sessionstore", "queries", "alterations", "call_some_test_code", "redirect_chain", "permissiondenied", "errors", "threads", "core", "get", "extensions", "account", "test_fluffy_animals", "lack", "manner", "exceptions", "posts", "target_status_code", "technique", "non_default_db", "to@example.com", "layers", "mail", "test1", "myseleniumtests.test_login", "field_kwargs", "scope", "simpletestcase", "document", "tags", "mytestcase", "set", "bienvenue", "mon", "functionality", "response.headers['content", "foo", "database", "func", "transform", "client.get", "databases", "test_slow", "expression", "sampletestcase", "reference", "instance", "engines", "status_code", "code", "overhead", "view_class", "cls", "logintestcase", "del", "wsgi", "django.core.mail", "step", "root_urlconf", "csrf_client"], "type": "documentation"},
{"title": "Writing and running tests", "url": "https://docs.djangoproject.com/en/5.1/topics/testing/overview/", "content": "Writing and running tests ¶ See also The testing tutorial , the testing tools\nreference , and the advanced testing topics . This document is split into two primary sections. First, we explain how to write\ntests with Django. Then, we explain how to run them. Writing tests ¶ Django’s unit tests use a Python standard library module: unittest . This\nmodule defines tests using a class-based approach. Here is an example which subclasses from django.test.TestCase ,\nwhich is a subclass of unittest.TestCase that runs each test inside a\ntransaction to provide isolation: from django.test import TestCase from myapp.models import Animal class AnimalTestCase ( TestCase ): def setUp ( self ): Animal . objects . create ( name = \"lion\" , sound = \"roar\" ) Animal . objects . create ( name = \"cat\" , sound = \"meow\" ) def test_animals_can_speak ( self ): \"\"\"Animals that can speak are correctly identified\"\"\" lion = Animal . objects . get ( name = \"lion\" ) cat = Animal . objects . get ( name = \"cat\" ) self . assertEqual ( lion . speak (), 'The lion says \"roar\"' ) self . assertEqual ( cat . speak (), 'The cat says \"meow\"' ) When you run your tests , the default behavior of the\ntest utility is to find all the test case classes (that is, subclasses of unittest.TestCase ) in any file whose name begins with test ,\nautomatically build a test suite out of those test case classes, and run that\nsuite. For more details about unittest , see the Python documentation. Where should the tests live? The default startapp template creates a tests.py file in the\nnew application. This might be fine if you only have a few tests, but as\nyour test suite grows you’ll likely want to restructure it into a tests\npackage so you can split your tests into different submodules such as test_models.py , test_views.py , test_forms.py , etc. Feel free to\npick whatever organizational scheme you like. See also Using the Django test runner to test reusable applications . Warning If your tests rely on database access such as creating or querying models,\nbe sure to create your test classes as subclasses of django.test.TestCase rather than unittest.TestCase . Using unittest.TestCase avoids the cost of running each test in a\ntransaction and flushing the database, but if your tests interact with\nthe database their behavior will vary based on the order that the test\nrunner executes them. This can lead to unit tests that pass when run in\nisolation but fail when run in a suite. Running tests ¶ Once you’ve written tests, run them using the test command of\nyour project’s manage.py utility: $ ./manage.py test Test discovery is based on the unittest module’s built-in test\ndiscovery .  By default, this will discover tests in\nany file named test*.py under the current working directory. You can specify particular tests to run by supplying any number of “test\nlabels” to ./manage.py test . Each test label can be a full Python dotted\npath to a package, module, TestCase subclass, or test method. For instance: # Run all the tests in the animals.tests module $ ./manage.py test animals.tests # Run all the tests found within the 'animals' package $ ./manage.py test animals # Run just one test case class $ ./manage.py test animals.tests.AnimalTestCase # Run just one test method $ ./manage.py test animals.tests.AnimalTestCase.test_animals_can_speak You can also provide a path to a directory to discover tests below that\ndirectory: $ ./manage.py test animals/ You can specify a custom filename pattern match using the -p (or --pattern ) option, if your test files are named differently from the test*.py pattern: $ ./manage.py test --pattern = \"tests_*.py\" If you press Ctrl-C while the tests are running, the test runner will\nwait for the currently running test to complete and then exit gracefully.\nDuring a graceful exit the test runner will output details of any test\nfailures, report on how many tests were run and how many errors and failures\nwere encountered, and destroy any test databases as usual. Thus pressing Ctrl-C can be very useful if you forget to pass the --failfast option, notice that some tests are unexpectedly failing and\nwant to get details on the failures without waiting for the full test run to\ncomplete. If you do not want to wait for the currently running test to finish, you\ncan press Ctrl-C a second time and the test run will halt immediately,\nbut not gracefully. No details of the tests run before the interruption will\nbe reported, and any test databases created by the run will not be destroyed. Test with warnings enabled It’s a good idea to run your tests with Python warnings enabled: python -Wa manage.py test . The -Wa flag tells Python to\ndisplay deprecation warnings. Django, like many other Python libraries,\nuses these warnings to flag when features are going away. It also might\nflag areas in your code that aren’t strictly wrong but could benefit\nfrom a better implementation. The test database ¶ Tests that require a database (namely, model tests) will not use your “real”\n(production) database. Separate, blank databases are created for the tests. Regardless of whether the tests pass or fail, the test databases are destroyed\nwhen all the tests have been executed. You can prevent the test databases from being destroyed by using the test --keepdb option. This will preserve the test database between\nruns. If the database does not exist, it will first be created. Any migrations\nwill also be applied in order to keep it up to date. As described in the previous section, if a test run is forcefully interrupted,\nthe test database may not be destroyed. On the next run, you’ll be asked\nwhether you want to reuse or destroy the database. Use the test --noinput option to suppress that prompt and automatically destroy the\ndatabase. This can be useful when running tests on a continuous integration\nserver where tests may be interrupted by a timeout, for example. The default test database names are created by prepending test_ to the\nvalue of each NAME in DATABASES . When using SQLite, the\ntests will use an in-memory database by default (i.e., the database will be\ncreated in memory, bypassing the filesystem entirely!). The TEST dictionary in DATABASES offers a number of settings\nto configure your test database. For example, if you want to use a different\ndatabase name, specify NAME in the TEST dictionary for any given database in DATABASES . On PostgreSQL, USER will also need read access to the built-in postgres database. Aside from using a separate database, the test runner will otherwise\nuse all of the same database settings you have in your settings file: ENGINE , USER , HOST , etc. The\ntest database is created by the user specified by USER , so you’ll\nneed to make sure that the given user account has sufficient privileges to\ncreate a new database on the system. For fine-grained control over the character encoding of your test\ndatabase, use the CHARSET TEST option. If you’re using\nMySQL, you can also use the COLLATION option to\ncontrol the particular collation used by the test database. See the settings documentation for details of these\nand other advanced settings. If using an SQLite in-memory database with SQLite, shared cache is enabled, so you can write tests\nwith ability to share the database between threads. Finding data from your production database when running tests? If your code attempts to access the database when its modules are compiled,\nthis will occur before the test database is set up, with potentially\nunexpected results. For example, if you have a database query in\nmodule-level code and a real database exists, production data could pollute\nyour tests. It is a bad idea to have such import-time database queries in\nyour code anyway - rewrite your code so that it doesn’t do this. This also applies to customized implementations of ready() . See also The advanced multi-db testing topics . Order in which tests are executed ¶ In order to guarantee that all TestCase code starts with a clean database,\nthe Django test runner reorders tests in the following way: All TestCase subclasses are run first. Then, all other Django-based tests (test case classes based on SimpleTestCase , including TransactionTestCase ) are run with no particular\nordering guaranteed nor enforced among them. Then any other unittest.TestCase tests (including doctests) that may\nalter the database without restoring it to its original state are run. Note The new ordering of tests may reveal unexpected dependencies on test case\nordering. This is the case with doctests that relied on state left in the\ndatabase by a given TransactionTestCase test, they\nmust be updated to be able to run independently. Note Failures detected when loading tests are ordered before all of the above\nfor quicker feedback. This includes things like test modules that couldn’t\nbe found or that couldn’t be loaded due to syntax errors. You may randomize and/or reverse the execution order inside groups using the test --shuffle and --reverse options. This\ncan help with ensuring your tests are independent from each other. Rollback emulation ¶ Any initial data loaded in migrations will only be available in TestCase tests and not in TransactionTestCase tests, and additionally only on\nbackends where transactions are supported (the most important exception being\nMyISAM). This is also true for tests which rely on TransactionTestCase such as LiveServerTestCase and StaticLiveServerTestCase . Django can reload that data for you on a per-testcase basis by\nsetting the serialized_rollback option to True in the body of the TestCase or TransactionTestCase , but note that this will slow down\nthat test suite by approximately 3x. Third-party apps or those developing against MyISAM will need to set this;\nin general, however, you should be developing your own projects against a\ntransactional database and be using TestCase for most tests, and thus\nnot need this setting. The initial serialization is usually very quick, but if you wish to exclude\nsome apps from this process (and speed up test runs slightly), you may add\nthose apps to TEST_NON_SERIALIZED_APPS . To prevent serialized data from being loaded twice, setting serialized_rollback=True disables the post_migrate signal when flushing the test\ndatabase. Other test conditions ¶ Regardless of the value of the DEBUG setting in your configuration\nfile, all Django tests run with DEBUG =False. This is to ensure that\nthe observed output of your code matches what will be seen in a production\nsetting. Caches are not cleared after each test, and running manage.py test fooapp can insert data from the tests into the cache of a live system if you run your\ntests in production because, unlike databases, a separate “test cache” is not\nused. This behavior may change in the future. Understanding the test output ¶ When you run your tests, you’ll see a number of messages as the test runner\nprepares itself. You can control the level of detail of these messages with the verbosity option on the command line: Creating test database...\nCreating table myapp_animal\nCreating table myapp_mineral This tells you that the test runner is creating a test database, as described\nin the previous section. Once the test database has been created, Django will run your tests.\nIf everything goes well, you’ll see something like this: ----------------------------------------------------------------------\nRan 22 tests in 0 .221s\n\nOK If there are test failures, however, you’ll see full details about which tests\nfailed: ====================================================================== FAIL: test_was_published_recently_with_future_poll ( polls.tests.PollMethodTests ) ----------------------------------------------------------------------\nTraceback ( most recent call last ) : File \"/dev/mysite/polls/tests.py\" , line 16 , in test_was_published_recently_with_future_poll self.assertIs ( future_poll.was_published_recently () , False ) AssertionError: True is not False\n\n----------------------------------------------------------------------\nRan 1 test in 0 .003s\n\nFAILED ( failures = 1 ) A full explanation of this error output is beyond the scope of this document,\nbut it’s pretty intuitive. You can consult the documentation of Python’s unittest library for details. Note that the return code for the test-runner script is 1 for any number of\nfailed tests (whether the failure was caused by an error, a failed assertion,\nor an unexpected success). If all the tests pass, the return code is 0. This\nfeature is useful if you’re using the test-runner script in a shell script and\nneed to test for success or failure at that level. Speeding up the tests ¶ Running tests in parallel ¶ As long as your tests are properly isolated, you can run them in parallel to\ngain a speed up on multi-core hardware. See test --parallel . Password hashing ¶ The default password hasher is rather slow by design. If you’re authenticating\nmany users in your tests, you may want to use a custom settings file and set\nthe PASSWORD_HASHERS setting to a faster hashing algorithm: PASSWORD_HASHERS = [ \"django.contrib.auth.hashers.MD5PasswordHasher\" , ] Don’t forget to also include in PASSWORD_HASHERS any hashing\nalgorithm used in fixtures, if any. Preserving the test database ¶ The test --keepdb option preserves the test database between test\nruns. It skips the create and destroy actions which can greatly decrease the\ntime to run tests. Avoiding disk access for media files ¶ The InMemoryStorage is a convenient way to\nprevent disk access for media files. All data is kept in memory, then it gets\ndiscarded after tests run.", "keywords": ["state", "dictionary", "implementation", "disk", "explanation", "match", "roar", "run", "script", "transactions", "implementations", "interruption", "warnings", "mysql", "error", "line", "design", "template", "lion", "debug", "cache", "migrations", "control", "setting", "order", "serialization", "basis", "documentation", "signal", "deprecation", "/dev", "settings", "false", "time", "application", "exception", "classes", "test_forms.py", "sound", "mysite", "django.contrib.auth.hashers", "myisam", "assertion", "_", "method", "emulation", "party", "feedback", "shell", "table", "tests", "testing", "behavior", "system", "transactiontestcase", "modules", "labels", "files", "query", "runner", "utility", "import", "encoding", "messages", "subclasses", ".221s", "doctests", "caches", "project", "groups", "media", "staticliveservertestcase", "#", "integration", "assertionerror", "test", "animal", "idea", "section", "way", "output", "¶", "default", "suite", "option", "testcase", "custom", "--failfast", "animaltestcase", "collation", "myapp_animal", "test_models.py", "3x", "transaction", "submodules", "tutorial", "model", "server", "character", "package", "postgres", "process", "access", "results", "command", "example", "myapp_mineral", "pollmethodtests", "ordering", "users", "unit", "n’t", "self.assertis", "value", "sqlite", "production", "self", "label", "-p", "ctrl", "hasher", "discovery", "case", "class", "animals.tests", "number", "flag", "applications", "filesystem", "animals", "serialized_rollback", "reorders", "c", "return", "engine", "polls.tests", "create", "charset", "future", "-wa", "things", "details", "areas", "./manage.py", "filename", "isolation", "actions", "test_was_published_recently_with_future_poll", "data", "polls", "runs", "myapp.models", "name", "body", "options", "pattern", "rollback", "fooapp", "user", "file", "exit", "library", "postgresql", "dependencies", "algorithm", "django.test", "errors", "python", "threads", "ran", "account", "startapp", "traceback", "execution", "password", "fixtures", "configuration", "subclass", "sections", "defines", "test_views.py", "note", "prompt", "failures", "host", ".003s", "path", "projects", "timeout", "names", "django", "level", "conditions", "tools", "directory", "speed", "failure", "topics", "tests_*.py", "scope", "true", "document", "simpletestcase", "syntax", "date", "password_hashers", "approach", "module", "backends", "apps", "cost", "database", "verbosity", "memory", "databases", "test*.py", "libraries", "cat", "hardware", "reference", "instance", "features", "=", "models", "code", "feature", "detail", "hashing", "objects", "parallel", "scheme", "success", "call", "privileges", "ability"], "type": "documentation"},
{"title": "Testing in Django", "url": "https://docs.djangoproject.com/en/5.1/topics/testing/", "content": "Testing in Django ¶ Automated testing is an extremely useful bug-killing tool for the modern\nweb developer. You can use a collection of tests – a test suite – to\nsolve, or avoid, a number of problems: When you’re writing new code, you can use tests to validate your code\nworks as expected. When you’re refactoring or modifying old code, you can use tests to\nensure your changes haven’t affected your application’s behavior\nunexpectedly. Testing a web application is a complex task, because a web application is made\nof several layers of logic – from HTTP-level request handling, to form\nvalidation and processing, to template rendering. With Django’s test-execution\nframework and assorted utilities, you can simulate requests, insert test data,\ninspect your application’s output and generally verify your code is doing what\nit should be doing. The preferred way to write tests in Django is using the unittest module\nbuilt-in to the Python standard library. This is covered in detail in the Writing and running tests document. You can also use any other Python test framework; Django provides an API and\ntools for that kind of integration. They are described in the Using different testing frameworks section of Advanced testing topics . Writing and running tests Testing tools Advanced testing topics", "keywords": ["execution", "number", "frameworks", "api", "request", "insert", "developer", "writing", "integration", "test", "level", "output", "django", "way", "layers", "tools", "¶", "section", "suite", "rendering", "topics", "handling", "validation", "document", "changes", "web", "in", "framework", "bug", "problems", "module", "requests", "data", "http", "application", "processing", "kind", "logic", "tests", "task", "code", "utilities", "detail", "testing", "behavior", "library", "collection", "tool", "n’t", "python"], "type": "documentation"},
{"title": "Managing files", "url": "https://docs.djangoproject.com/en/5.1/topics/files/", "content": "Managing files ¶ This document describes Django’s file access APIs for files such as those\nuploaded by a user. The lower level APIs are general enough that you could use\nthem for other purposes. If you want to handle “static files” (JS, CSS, etc.),\nsee How to manage static files (e.g. images, JavaScript, CSS) . By default, Django stores files locally, using the MEDIA_ROOT and MEDIA_URL settings. The examples below assume that you’re using these\ndefaults. However, Django provides ways to write custom file storage systems that\nallow you to completely customize where and how Django stores files. The\nsecond half of this document describes how these storage systems work. Using files in models ¶ When you use a FileField or ImageField , Django provides a set of APIs you can use\nto deal with that file. Consider the following model, using an ImageField to\nstore a photo: from django.db import models class Car ( models . Model ): name = models . CharField ( max_length = 255 ) price = models . DecimalField ( max_digits = 5 , decimal_places = 2 ) photo = models . ImageField ( upload_to = \"cars\" ) specs = models . FileField ( upload_to = \"specs\" ) Any Car instance will have a photo attribute that you can use to get at\nthe details of the attached photo: >>> car = Car . objects . get ( name = \"57 Chevy\" ) >>> car . photo <ImageFieldFile: cars/chevy.jpg> >>> car . photo . name 'cars/chevy.jpg' >>> car . photo . path '/media/cars/chevy.jpg' >>> car . photo . url 'https://media.example.com/cars/chevy.jpg' This object – car.photo in the example – is a File object, which means\nit has all the methods and attributes described below. Note The file is saved as part of saving the model in the database, so the actual\nfile name used on disk cannot be relied on until after the model has been\nsaved. For example, you can change the file name by setting the file’s name to a path relative to the file storage’s\nlocation ( MEDIA_ROOT if you are using the default FileSystemStorage ): >>> import os >>> from django.conf import settings >>> initial_path = car . photo . path >>> car . photo . name = \"cars/chevy_ii.jpg\" >>> new_path = settings . MEDIA_ROOT + car . photo . name >>> # Move the file on the filesystem >>> os . rename ( initial_path , new_path ) >>> car . save () >>> car . photo . path '/media/cars/chevy_ii.jpg' >>> car . photo . path == new_path True To save an existing file on disk to a FileField : >>> from pathlib import Path >>> from django.core.files import File >>> path = Path ( \"/some/external/specs.pdf\" ) >>> car = Car . objects . get ( name = \"57 Chevy\" ) >>> with path . open ( mode = \"rb\" ) as f : ... car . specs = File ( f , name = path . name ) ... car . save () ... Note While ImageField non-image data attributes, such\nas height , width , and size are available on the instance, the\nunderlying image data cannot be used without reopening the image. For\nexample: >>> from PIL import Image >>> car = Car . objects . get ( name = \"57 Chevy\" ) >>> car . photo . width 191 >>> car . photo . height 287 >>> image = Image . open ( car . photo ) # Raises ValueError: seek of closed file. >>> car . photo . open () <ImageFieldFile: cars/chevy.jpg> >>> image = Image . open ( car . photo ) >>> image <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=191x287 at 0x7F99A94E9048> The File object ¶ Internally, Django uses a django.core.files.File instance any time it\nneeds to represent a file. Most of the time you’ll use a File that Django’s given you (i.e. a file\nattached to a model as above, or perhaps an uploaded file). If you need to construct a File yourself, the easiest way is to create one\nusing a Python built-in file object: >>> from django.core.files import File # Create a Python file object using open() >>> f = open ( \"/path/to/hello.world\" , \"w\" ) >>> myfile = File ( f ) Now you can use any of the documented attributes and methods\nof the File class. Be aware that files created in this way are not automatically closed.\nThe following approach may be used to close files automatically: >>> from django.core.files import File # Create a Python file object using open() and the with statement >>> with open ( \"/path/to/hello.world\" , \"w\" ) as f : ... myfile = File ( f ) ... myfile . write ( \"Hello World\" ) ... >>> myfile . closed True >>> f . closed True Closing files is especially important when accessing file fields in a loop\nover a large number of objects. If files are not manually closed after\naccessing them, the risk of running out of file descriptors may arise. This\nmay lead to the following error: OSError: [Errno 24] Too many open files File storage ¶ Behind the scenes, Django delegates decisions about how and where to store files\nto a file storage system. This is the object that actually understands things\nlike file systems, opening and reading files, etc. Django’s default file storage is ' django.core.files.storage.FileSystemStorage ' . If you don’t\nexplicitly provide a storage system in the default key of the STORAGES setting, this is the one that will be used. See below for details of the built-in default file storage system, and see How to write a custom storage class for information on writing your own file\nstorage system. Storage objects ¶ Though most of the time you’ll want to use a File object (which delegates to\nthe proper storage for that file), you can use file storage systems directly.\nYou can create an instance of some custom file storage class, or – often more\nuseful – you can use the global default storage system: >>> from django.core.files.base import ContentFile >>> from django.core.files.storage import default_storage >>> path = default_storage . save ( \"path/to/file\" , ContentFile ( b \"new content\" )) >>> path 'path/to/file' >>> default_storage . size ( path ) 11 >>> default_storage . open ( path ) . read () b'new content' >>> default_storage . delete ( path ) >>> default_storage . exists ( path ) False See File storage API for the file storage API. The built-in filesystem storage class ¶ Django ships with a django.core.files.storage.FileSystemStorage class\nwhich implements basic local filesystem file storage. For example, the following code will store uploaded files under /media/photos regardless of what your MEDIA_ROOT setting is: from django.core.files.storage import FileSystemStorage from django.db import models fs = FileSystemStorage ( location = \"/media/photos\" ) class Car ( models . Model ): ... photo = models . ImageField ( storage = fs ) Custom storage systems work the same way:\nyou can pass them in as the storage argument to a FileField . Using a callable ¶ You can use a callable as the storage parameter for FileField or ImageField . This allows you to modify the used\nstorage at runtime, selecting different storages for different environments,\nfor example. Your callable will be evaluated when your models classes are loaded, and must\nreturn an instance of Storage . For example: from django.conf import settings from django.db import models from .storages import MyLocalStorage , MyRemoteStorage def select_storage (): return MyLocalStorage () if settings . DEBUG else MyRemoteStorage () class MyModel ( models . Model ): my_file = models . FileField ( storage = select_storage ) In order to set a storage defined in the STORAGES setting you can\nuse storages : from django.core.files.storage import storages def select_storage (): return storages [ \"mystorage\" ] class MyModel ( models . Model ): upload = models . FileField ( storage = select_storage )", "keywords": ["disk", "b'new", "my_file", "contentfile", "work", "error", "url", "https://media.example.com/cars/chevy.jpg", "initial_path", "image", "see", "select_storage", "debug", "mystorage", "systems", "statement", "setting", "order", "photo", "price", "seek", "scenes", "closing", "settings", "car.photo", "time", "filefield", "external", "imagefieldfile", "classes", "ships", "imagefield", "system", "upload", "mode", "risk", "files", "css", "media_root", "import", "runtime", "w", "ways", "upload_to", "information", "django.core.files.storage", "pathlib", "#", "size=191x287", "pil.jpegimageplugin", "apis", "fields", "way", "¶", ".storages", "default", "pil", "half", "height", "media_url", "custom", "f", "methods", "location", "chevy_ii.jpg", "cars", "model", "max_length", "descriptors", "loop", "access", "purposes", "default_storage", "example", "javascript", "js", "rgb", "n’t", "os", "mymodel", "content", "hello.world", "argument", "0x7f99a94e9048", "class", "number", "chevy", "rename", "filesystem", "decimal_places", "images", "return", "b", "oserror", "myfile", "attribute", "environments", "examples", "django.db", "things", "details", "data", "decisions", "new_path", "name", "object", "user", "part", "file", "world", "photos", "attributes", "one", "size", "storages", "car", "python", "/path", "charfield", "django.core.files", "api", "storage", "path", "valueerror", "level", "django", "filesystemstorage", "parameter", "true", "document", "set", "approach", "specs", "database", "decimalfield", "opening", "instance", "=", "models", "code", "objects", "key", "defaults"], "type": "documentation"},
{"title": "Migrations", "url": "https://docs.djangoproject.com/en/5.1/topics/migrations/", "content": "Migrations ¶ Migrations are Django’s way of propagating changes you make to your models\n(adding a field, deleting a model, etc.) into your database schema. They’re\ndesigned to be mostly automatic, but you’ll need to know when to make\nmigrations, when to run them, and the common problems you might run into. The Commands ¶ There are several commands which you will use to interact with migrations\nand Django’s handling of database schema: migrate , which is responsible for applying and unapplying\nmigrations. makemigrations , which is responsible for creating new migrations\nbased on the changes you have made to your models. sqlmigrate , which displays the SQL statements for a migration. showmigrations , which lists a project’s migrations and their\nstatus. You should think of migrations as a version control system for your database\nschema. makemigrations is responsible for packaging up your model changes\ninto individual migration files - analogous to commits - and migrate is\nresponsible for applying those to your database. The migration files for each app live in a “migrations” directory inside\nof that app, and are designed to be committed to, and distributed as part\nof, its codebase. You should be making them once on your development machine\nand then running the same migrations on your colleagues’ machines, your\nstaging machines, and eventually your production machines. Note It is possible to override the name of the package which contains the\nmigrations on a per-app basis by modifying the MIGRATION_MODULES setting. Migrations will run the same way on the same dataset and produce consistent\nresults, meaning that what you see in development and staging is, under the\nsame circumstances, exactly what will happen in production. Django will make migrations for any change to your models or fields - even\noptions that don’t affect the database - as the only way it can reconstruct\na field correctly is to have all the changes in the history, and you might\nneed those options in some data migrations later on (for example, if you’ve\nset custom validators). Backend Support ¶ Migrations are supported on all backends that Django ships with, as well\nas any third-party backends if they have programmed in support for schema\nalteration (done via the SchemaEditor class). However, some databases are more capable than others when it comes to\nschema migrations; some of the caveats are covered below. PostgreSQL ¶ PostgreSQL is the most capable of all the databases here in terms of schema\nsupport. MySQL ¶ MySQL lacks support for transactions around schema alteration operations,\nmeaning that if a migration fails to apply you will have to manually unpick\nthe changes in order to try again (it’s impossible to roll back to an\nearlier point). MySQL 8.0 introduced significant performance enhancements for DDL operations , making them more efficient and reducing the need for full\ntable rebuilds. However, it cannot guarantee a complete absence of locks or\ninterruptions. In situations where locks are still necessary, the duration of\nthese operations will be proportionate to the number of rows involved. Finally, MySQL has a relatively small limit on the combined size of all columns\nan index covers. This means that indexes that are possible on other backends\nwill fail to be created under MySQL. SQLite ¶ SQLite has very little built-in schema alteration support, and so Django\nattempts to emulate it by: Creating a new table with the new schema Copying the data across Dropping the old table Renaming the new table to match the original name This process generally works well, but it can be slow and occasionally\nbuggy. It is not recommended that you run and migrate SQLite in a\nproduction environment unless you are very aware of the risks and\nits limitations; the support Django ships with is designed to allow\ndevelopers to use SQLite on their local machines to develop less complex\nDjango projects without the need for a full database. Workflow ¶ Django can create migrations for you. Make changes to your models - say, add a\nfield and remove a model - and then run makemigrations : $ python manage.py makemigrations\nMigrations for 'books' : books/migrations/0003_auto.py: ~ Alter field author on book Your models will be scanned and compared to the versions currently\ncontained in your migration files, and then a new set of migrations\nwill be written out. Make sure to read the output to see what makemigrations thinks you have changed - it’s not perfect, and for\ncomplex changes it might not be detecting what you expect. Once you have your new migration files, you should apply them to your\ndatabase to make sure they work as expected: $ python manage.py migrate\nOperations to perform: Apply all migrations: books\nRunning migrations: Rendering model states... DONE Applying books.0003_auto... OK Once the migration is applied, commit the migration and the models change\nto your version control system as a single commit - that way, when other\ndevelopers (or your production servers) check out the code, they’ll\nget both the changes to your models and the accompanying migration at the\nsame time. If you want to give the migration(s) a meaningful name instead of a generated\none, you can use the makemigrations --name option: $ python manage.py makemigrations --name changed_my_model your_app_label Version control ¶ Because migrations are stored in version control, you’ll occasionally\ncome across situations where you and another developer have both committed\na migration to the same app at the same time, resulting in two migrations\nwith the same number. Don’t worry - the numbers are just there for developers’ reference, Django\njust cares that each migration has a different name. Migrations specify which\nother migrations they depend on - including earlier migrations in the same\napp - in the file, so it’s possible to detect when there’s two new migrations\nfor the same app that aren’t ordered. When this happens, Django will prompt you and give you some options. If it\nthinks it’s safe enough, it will offer to automatically linearize the two\nmigrations for you. If not, you’ll have to go in and modify the migrations\nyourself - don’t worry, this isn’t difficult, and is explained more in Migration files below. Transactions ¶ On databases that support DDL transactions (SQLite and PostgreSQL), all\nmigration operations will run inside a single transaction by default. In\ncontrast, if a database doesn’t support DDL transactions (e.g. MySQL, Oracle)\nthen all operations will run without a transaction. You can prevent a migration from running in a transaction by setting the atomic attribute to False . For example: from django.db import migrations class Migration ( migrations . Migration ): atomic = False It’s also possible to execute parts of the migration inside a transaction using atomic() or by passing atomic=True to RunPython . See Non-atomic migrations for more details. Dependencies ¶ While migrations are per-app, the tables and relationships implied by\nyour models are too complex to be created for one app at a time. When you make\na migration that requires something else to run - for example, you add a ForeignKey in your books app to your authors app - the resulting\nmigration will contain a dependency on a migration in authors . This means that when you run the migrations, the authors migration runs\nfirst and creates the table the ForeignKey references, and then the migration\nthat makes the ForeignKey column runs afterward and creates the constraint.\nIf this didn’t happen, the migration would try to create the ForeignKey column without the table it’s referencing existing and your database would\nthrow an error. This dependency behavior affects most migration operations where you\nrestrict to a single app. Restricting to a single app (either in makemigrations or migrate ) is a best-efforts promise, and not\na guarantee; any other apps that need to be used to get dependencies correct\nwill be. Apps without migrations must not have relations ( ForeignKey , ManyToManyField , etc.) to apps with migrations. Sometimes it may work, but\nit’s not supported. Swappable dependencies ¶ django.db.migrations. swappable_dependency ( value ) ¶ The swappable_dependency() function is used in migrations to declare\n“swappable” dependencies on migrations in the app of the swapped-in model,\ncurrently, on the first migration of this app. As a consequence, the swapped-in\nmodel should be created in the initial migration. The argument value is a\nstring \"<app label>.<model>\" describing an app label and a model name, e.g. \"myapp.MyModel\" . By using swappable_dependency() , you inform the migration framework that\nthe migration relies on another migration which sets up a swappable model,\nallowing for the possibility of substituting the model with a different\nimplementation in the future. This is typically used for referencing models\nthat are subject to customization or replacement, such as the custom user\nmodel ( settings.AUTH_USER_MODEL , which defaults to \"auth.User\" ) in\nDjango’s authentication system. Migration files ¶ Migrations are stored as an on-disk format, referred to here as\n“migration files”. These files are actually normal Python files with an\nagreed-upon object layout, written in a declarative style. A basic migration file looks like this: from django.db import migrations , models class Migration ( migrations . Migration ): dependencies = [( \"migrations\" , \"0001_initial\" )] operations = [ migrations . DeleteModel ( \"Tribble\" ), migrations . AddField ( \"Author\" , \"rating\" , models . IntegerField ( default = 0 )), ] What Django looks for when it loads a migration file (as a Python module) is\na subclass of django.db.migrations.Migration called Migration . It then\ninspects this object for four attributes, only two of which are used\nmost of the time: dependencies , a list of migrations this one depends on. operations , a list of Operation classes that define what this\nmigration does. The operations are the key; they are a set of declarative instructions which\ntell Django what schema changes need to be made. Django scans them and\nbuilds an in-memory representation of all of the schema changes to all apps,\nand uses this to generate the SQL which makes the schema changes. That in-memory structure is also used to work out what the differences are\nbetween your models and the current state of your migrations; Django runs\nthrough all the changes, in order, on an in-memory set of models to come\nup with the state of your models last time you ran makemigrations . It\nthen uses these models to compare against the ones in your models.py files\nto work out what you have changed. You should rarely, if ever, need to edit migration files by hand, but\nit’s entirely possible to write them manually if you need to. Some of the\nmore complex operations are not autodetectable and are only available via\na hand-written migration, so don’t be scared about editing them if you have to. Custom fields ¶ You can’t modify the number of positional arguments in an already migrated\ncustom field without raising a TypeError . The old migration will call the\nmodified __init__ method with the old signature. So if you need a new\nargument, please create a keyword argument and add something like assert 'argument_name' in kwargs in the constructor. Model managers ¶ You can optionally serialize managers into migrations and have them available\nin RunPython operations. This is done\nby defining a use_in_migrations attribute on the manager class: class MyManager ( models . Manager ): use_in_migrations = True class MyModel ( models . Model ): objects = MyManager () If you are using the from_queryset() function to\ndynamically generate a manager class, you need to inherit from the generated\nclass to make it importable: class MyManager ( MyBaseManager . from_queryset ( CustomQuerySet )): use_in_migrations = True class MyModel ( models . Model ): objects = MyManager () Please refer to the notes about Historical models in migrations to see\nthe implications that come along. Initial migrations ¶ Migration. initial ¶ The “initial migrations” for an app are the migrations that create the first\nversion of that app’s tables. Usually an app will have one initial migration,\nbut in some cases of complex model interdependencies it may have two or more. Initial migrations are marked with an initial = True class attribute on the\nmigration class. If an initial class attribute isn’t found, a migration\nwill be considered “initial” if it is the first migration in the app (i.e. if\nit has no dependencies on any other migration in the same app). When the migrate --fake-initial option is used, these initial\nmigrations are treated specially. For an initial migration that creates one or\nmore tables ( CreateModel operation), Django checks that all of those tables\nalready exist in the database and fake-applies the migration if so. Similarly,\nfor an initial migration that adds one or more fields ( AddField operation),\nDjango checks that all of the respective columns already exist in the database\nand fake-applies the migration if so. Without --fake-initial , initial\nmigrations are treated no differently from any other migration. History consistency ¶ As previously discussed, you may need to linearize migrations manually when two\ndevelopment branches are joined. While editing migration dependencies, you can\ninadvertently create an inconsistent history state where a migration has been\napplied but some of its dependencies haven’t. This is a strong indication that\nthe dependencies are incorrect, so Django will refuse to run migrations or make\nnew migrations until it’s fixed. When using multiple databases, you can use the allow_migrate() method of database routers to control which databases makemigrations checks for consistent history. Adding migrations to apps ¶ New apps come preconfigured to accept migrations, and so you can add migrations\nby running makemigrations once you’ve made some changes. If your app already has models and database tables, and doesn’t have migrations\nyet (for example, you created it against a previous Django version), you’ll\nneed to convert it to use migrations by running: $ python manage.py makemigrations your_app_label This will make a new initial migration for your app. Now, run python manage.py migrate --fake-initial , and Django will detect that you have an\ninitial migration and that the tables it wants to create already exist, and\nwill mark the migration as already applied. (Without the migrate --fake-initial flag, the command would error out because the tables it wants\nto create already exist.) Note that this only works given two things: You have not changed your models since you made their tables. For migrations\nto work, you must make the initial migration first and then make changes,\nas Django compares changes against migration files, not the database. You have not manually edited your database - Django won’t be able to detect\nthat your database doesn’t match your models, you’ll just get errors when\nmigrations try to modify those tables. Reversing migrations ¶ Migrations can be reversed with migrate by passing the number of the\nprevious migration. For example, to reverse migration books.0003 : /  $ python manage.py migrate books 0002 Operations to perform: Target specific migration: 0002_auto, from books Running migrations: Rendering model states... DONE Unapplying books.0003_auto... OK ...\\> py manage.py migrate books 0002 Operations to perform: Target specific migration: 0002_auto, from books Running migrations: Rendering model states... DONE Unapplying books.0003_auto... OK If you want to reverse all migrations applied for an app, use the name zero : /  $ python manage.py migrate books zero Operations to perform: Unapply all migrations: books Running migrations: Rendering model states... DONE Unapplying books.0002_auto... OK Unapplying books.0001_initial... OK ...\\> py manage.py migrate books zero Operations to perform: Unapply all migrations: books Running migrations: Rendering model states... DONE Unapplying books.0002_auto... OK Unapplying books.0001_initial... OK A migration is irreversible if it contains any irreversible operations.\nAttempting to reverse such migrations will raise IrreversibleError : /  $ python manage.py migrate books 0002 Operations to perform: Target specific migration: 0002_auto, from books Running migrations: Rendering model states... DONE Unapplying books.0003_auto...Traceback (most recent call last): django.db.migrations.exceptions.IrreversibleError: Operation <RunSQL  sql='DROP TABLE demo_books'> in books.0003_auto is not reversible ...\\> py manage.py migrate books 0002 Operations to perform: Target specific migration: 0002_auto, from books Running migrations: Rendering model states... DONE Unapplying books.0003_auto...Traceback (most recent call last): django.db.migrations.exceptions.IrreversibleError: Operation <RunSQL  sql='DROP TABLE demo_books'> in books.0003_auto is not reversible Historical models ¶ When you run migrations, Django is working from historical versions of your\nmodels stored in the migration files. If you write Python code using the RunPython operation, or if you have allow_migrate methods on your database routers, you need to use these\nhistorical model versions rather than importing them directly. Warning If you import models directly rather than using the historical models,\nyour migrations may work initially but will fail in the future when you\ntry to rerun old migrations (commonly, when you set up a new installation\nand run through all the migrations to set up the database). This means that historical model problems may not be immediately obvious.\nIf you run into this kind of failure, it’s OK to edit the migration to use\nthe historical models rather than direct imports and commit those changes. Because it’s impossible to serialize arbitrary Python code, these historical\nmodels will not have any custom methods that you have defined. They will,\nhowever, have the same fields, relationships, managers (limited to those with use_in_migrations = True ) and Meta options (also versioned, so they may\nbe different from your current ones). Warning This means that you will NOT have custom save() methods called on objects\nwhen you access them in migrations, and you will NOT have any custom\nconstructors or instance methods. Plan appropriately! References to functions in field options such as upload_to and limit_choices_to and model manager declarations with managers having use_in_migrations = True are serialized in migrations, so the functions and\nclasses will need to be kept around for as long as there is a migration\nreferencing them. Any custom model fields will also need to be kept, since these are imported directly by migrations. In addition, the concrete base classes of the model are stored as pointers, so\nyou must always keep base classes around for as long as there is a migration\nthat contains a reference to them. On the plus side, methods and managers from\nthese base classes inherit normally, so if you absolutely need access to these\nyou can opt to move them into a superclass. To remove old references, you can squash migrations or, if there aren’t many references, copy them into the migration files. Considerations when removing model fields ¶ Similar to the “references to historical functions” considerations described in\nthe previous section, removing custom model fields from your project or\nthird-party app will cause a problem if they are referenced in old migrations. To help with this situation, Django provides some model field attributes to\nassist with model field deprecation using the system checks framework . Add the system_check_deprecated_details attribute to your model field\nsimilar to the following: class IPAddressField ( Field ): system_check_deprecated_details = { \"msg\" : ( \"IPAddressField has been deprecated. Support for it (except \" \"in historical migrations) will be removed in Django 1.9.\" ), \"hint\" : \"Use GenericIPAddressField instead.\" , # optional \"id\" : \"fields.W900\" , # pick a unique ID for your field. } After a deprecation period of your choosing (two or three feature releases for\nfields in Django itself), change the system_check_deprecated_details attribute to system_check_removed_details and update the dictionary similar\nto: class IPAddressField ( Field ): system_check_removed_details = { \"msg\" : ( \"IPAddressField has been removed except for support in \" \"historical migrations.\" ), \"hint\" : \"Use GenericIPAddressField instead.\" , \"id\" : \"fields.E900\" , # pick a unique ID for your field. } You should keep the field’s methods that are required for it to operate in\ndatabase migrations such as __init__() , deconstruct() , and get_internal_type() . Keep this stub field for as long as any migrations\nwhich reference the field exist. For example, after squashing migrations and\nremoving the old ones, you should be able to remove the field completely. Data Migrations ¶ As well as changing the database schema, you can also use migrations to change\nthe data in the database itself, in conjunction with the schema if you want. Migrations that alter data are usually called “data migrations”; they’re best\nwritten as separate migrations, sitting alongside your schema migrations. Django can’t automatically generate data migrations for you, as it does with\nschema migrations, but it’s not very hard to write them. Migration files in\nDjango are made up of Operations , and\nthe main operation you use for data migrations is RunPython . To start, make an empty migration file you can work from (Django will put\nthe file in the right place, suggest a name, and add dependencies for you): python manage.py makemigrations --empty yourappname Then, open up the file; it should look something like this: # Generated by Django A.B on YYYY-MM-DD HH:MM from django.db import migrations class Migration ( migrations . Migration ): dependencies = [ ( \"yourappname\" , \"0001_initial\" ), ] operations = [] Now, all you need to do is create a new function and have RunPython use it. RunPython expects a callable as its argument\nwhich takes two arguments - the first is an app registry that has the historical versions of all your models\nloaded into it to match where in your history the migration sits, and the\nsecond is a SchemaEditor , which you can use to\nmanually effect database schema changes (but beware, doing this can confuse\nthe migration autodetector!) Let’s write a migration that populates our new name field with the combined\nvalues of first_name and last_name (we’ve come to our senses and\nrealized that not everyone has first and last names). All we need to do is use\nthe historical model and iterate over the rows: from django.db import migrations def combine_names ( apps , schema_editor ): # We can't import the Person model directly as it may be a newer # version than this migration expects. We use the historical version. Person = apps . get_model ( \"yourappname\" , \"Person\" ) for person in Person . objects . all (): person . name = f \" { person . first_name } { person . last_name } \" person . save () class Migration ( migrations . Migration ): dependencies = [ ( \"yourappname\" , \"0001_initial\" ), ] operations = [ migrations . RunPython ( combine_names ), ] Once that’s done, we can run python manage.py migrate as normal and the\ndata migration will run in place alongside other migrations. You can pass a second callable to RunPython to run whatever logic you\nwant executed when migrating backwards. If this callable is omitted, migrating\nbackwards will raise an exception. Accessing models from other apps ¶ When writing a RunPython function that uses models from apps other than the\none in which the migration is located, the migration’s dependencies attribute should include the latest migration of each app that is involved,\notherwise you may get an error similar to: LookupError: No installed app with label 'myappname' when you try to retrieve the model in the RunPython function using apps.get_model() . In the following example, we have a migration in app1 which needs to use\nmodels in app2 . We aren’t concerned with the details of move_m1 other\nthan the fact it will need to access models from both apps. Therefore we’ve\nadded a dependency that specifies the last migration of app2 : class Migration ( migrations . Migration ): dependencies = [ ( \"app1\" , \"0001_initial\" ), # added dependency to enable using models from app2 in move_m1 ( \"app2\" , \"0004_foobar\" ), ] operations = [ migrations . RunPython ( move_m1 ), ] More advanced migrations ¶ If you’re interested in the more advanced migration operations, or want\nto be able to write your own, see the migration operations reference and the “how-to” on writing migrations . Squashing migrations ¶ You are encouraged to make migrations freely and not worry about how many you\nhave; the migration code is optimized to deal with hundreds at a time without\nmuch slowdown. However, eventually you will want to move back from having\nseveral hundred migrations to just a few, and that’s where squashing comes in. Squashing is the act of reducing an existing set of many migrations down to\none (or sometimes a few) migrations which still represent the same changes. Django does this by taking all of your existing migrations, extracting their Operation s and putting them all in sequence, and then running an optimizer\nover them to try and reduce the length of the list - for example, it knows\nthat CreateModel and DeleteModel cancel each other out,\nand it knows that AddField can be\nrolled into CreateModel . Once the operation sequence has been reduced as much as possible - the amount\npossible depends on how closely intertwined your models are and if you have\nany RunSQL or RunPython operations (which can’t\nbe optimized through unless they are marked as elidable ) - Django will then\nwrite it back out into a new set of migration files. These files are marked to say they replace the previously-squashed migrations,\nso they can coexist with the old migration files, and Django will intelligently\nswitch between them depending where you are in the history. If you’re still\npart-way through the set of migrations that you squashed, it will keep using\nthem until it hits the end and then switch to the squashed history, while new\ninstalls will use the new squashed migration and skip all the old ones. This enables you to squash and not mess up systems currently in production\nthat aren’t fully up-to-date yet. The recommended process is to squash, keeping\nthe old files, commit and release, wait until all systems are upgraded with\nthe new release (or if you’re a third-party project, ensure your users upgrade\nreleases in order without skipping any), and then remove the old files, commit\nand do a second release. The command that backs all this is squashmigrations - pass it the\napp label and migration name you want to squash up to, and it’ll get to work: $ ./manage.py squashmigrations myapp 0004 Will squash the following migrations: - 0001_initial - 0002_some_change - 0003_another_change - 0004_undo_something\nDo you wish to proceed? [ y/N ] y\nOptimizing... Optimized from 12 operations to 7 operations.\nCreated new squashed migration /home/andrew/Programs/DjangoTest/test/migrations/0001_squashed_0004_undo_something.py You should commit this migration but leave the old ones in place ; the new migration will be used for new installs. Once you are sure all instances of the codebase have applied the migrations you squashed, you can delete them. Use the squashmigrations --squashed-name option if you want to set\nthe name of the squashed migration rather than use an autogenerated one. Note that model interdependencies in Django can get very complex, and squashing\nmay result in migrations that do not run; either mis-optimized (in which case\nyou can try again with --no-optimize , though you should also report an issue),\nor with a CircularDependencyError , in which case you can manually resolve it. To manually resolve a CircularDependencyError , break out one of\nthe ForeignKeys in the circular dependency loop into a separate\nmigration, and move the dependency on the other app with it. If you’re unsure,\nsee how makemigrations deals with the problem when asked to create\nbrand new migrations from your models. In a future release of Django, squashmigrations will be updated to attempt to resolve these errors\nitself. Once you’ve squashed your migration, you should then commit it alongside the\nmigrations it replaces and distribute this change to all running instances\nof your application, making sure that they run migrate to store the change\nin their database. You must then transition the squashed migration to a normal migration by: Deleting all the migration files it replaces. Updating all migrations that depend on the deleted migrations to depend on\nthe squashed migration instead. Removing the replaces attribute in the Migration class of the\nsquashed migration (this is how Django tells that it is a squashed migration). Note Once you’ve squashed a migration, you should not then re-squash that squashed\nmigration until you have fully transitioned it to a normal migration. Pruning references to deleted migrations If it is likely that you may reuse the name of a deleted migration in the\nfuture, you should remove references to it from Django’s migrations table\nwith the migrate --prune option. Serializing values ¶ Migrations are Python files containing the old definitions of your models\n- thus, to write them, Django must take the current state of your models and\nserialize them out into a file. While Django can serialize most things, there are some things that we just\ncan’t serialize out into a valid Python representation - there’s no Python\nstandard for how a value can be turned back into code ( repr() only works\nfor basic values, and doesn’t specify import paths). Django can serialize the following: int , float , bool , str , bytes , None , NoneType list , set , tuple , dict , range . datetime.date , datetime.time , and datetime.datetime instances\n(include those that are timezone-aware) decimal.Decimal instances enum.Enum and enum.Flag instances uuid.UUID instances functools.partial() and functools.partialmethod instances\nwhich have serializable func , args , and keywords values. Pure and concrete path objects from pathlib . Concrete paths are\nconverted to their pure path equivalent, e.g. pathlib.PosixPath to pathlib.PurePosixPath . os.PathLike instances, e.g. os.DirEntry , which are\nconverted to str or bytes using os.fspath() . LazyObject instances which wrap a serializable value. Enumeration types (e.g. TextChoices or IntegerChoices ) instances. Any Django field Any function or method reference (e.g. datetime.datetime.today ) (must be\nin module’s top-level scope) Functions may be decorated if wrapped properly, i.e. using functools.wraps() The functools.cache() and functools.lru_cache() decorators are\nexplicitly supported Unbound methods used from within the class body Any class reference (must be in module’s top-level scope) Anything with a custom deconstruct() method ( see below ) Changed in Django 5.0: Serialization support for functions decorated with functools.cache() or functools.lru_cache() was added. Django cannot serialize: Nested classes Arbitrary class instances (e.g. MyClass(4.3, 5.7) ) Lambdas Custom serializers ¶ You can serialize other types by writing a custom serializer. For example, if\nDjango didn’t serialize Decimal by default, you could do\nthis: from decimal import Decimal from django.db.migrations.serializer import BaseSerializer from django.db.migrations.writer import MigrationWriter class DecimalSerializer ( BaseSerializer ): def serialize ( self ): return repr ( self . value ), { \"from decimal import Decimal\" } MigrationWriter . register_serializer ( Decimal , DecimalSerializer ) The first argument of MigrationWriter.register_serializer() is a type or\niterable of types that should use the serializer. The serialize() method of your serializer must return a string of how the\nvalue should appear in migrations and a set of any imports that are needed in\nthe migration. Adding a deconstruct() method ¶ You can let Django serialize your own custom class instances by giving the class\na deconstruct() method. It takes no arguments, and should return a tuple\nof three things (path, args, kwargs) : path should be the Python path to the class, with the class name included\nas the last part (for example, myapp.custom_things.MyClass ). If your\nclass is not available at the top level of a module it is not serializable. args should be a list of positional arguments to pass to your class’ __init__ method. Everything in this list should itself be serializable. kwargs should be a dict of keyword arguments to pass to your class’ __init__ method. Every value should itself be serializable. Note This return value is different from the deconstruct() method for custom fields which returns a\ntuple of four items. Django will write out the value as an instantiation of your class with the\ngiven arguments, similar to the way it writes out references to Django fields. To prevent a new migration from being created each time makemigrations is run, you should also add a __eq__() method to\nthe decorated class. This function will be called by Django’s migration\nframework to detect changes between states. As long as all of the arguments to your class’ constructor are themselves\nserializable, you can use the @deconstructible class decorator from django.utils.deconstruct to add the deconstruct() method: from django.utils.deconstruct import deconstructible @deconstructible class MyCustomClass : def __init__ ( self , foo = 1 ): self . foo = foo ... def __eq__ ( self , other ): return self . foo == other . foo The decorator adds logic to capture and preserve the arguments on their\nway into your constructor, and then returns those arguments exactly when\ndeconstruct() is called. Supporting multiple Django versions ¶ If you are the maintainer of a third-party app with models, you may need to\nship migrations that support multiple Django versions. In this case, you should\nalways run makemigrations with the lowest Django version you wish\nto support . The migrations system will maintain backwards-compatibility according to the\nsame policy as the rest of Django, so migration files generated on Django X.Y\nshould run unchanged on Django X.Y+1. The migrations system does not promise\nforwards-compatibility, however. New features may be added, and migration files\ngenerated with newer versions of Django may not work on older versions. See also The Migrations Operations Reference Covers the schema operations API, special operations, and writing your\nown operations. The Writing Migrations “how-to” Explains how to structure and write database migrations for different\nscenarios you might encounter.", "keywords": ["contrast", "alter", "optimizing", "addfield", "column", "py", "transactions", "type", "tribble", "manytomanyfield", "book", "0003_another_change", "rows", "\\", "pathlike", "place", "e900", "programs", "books.0002_auto", "id", "settings", "classes", "django.utils.deconstruct", "ships", "method", "party", "customqueryset", "person", "authors", "dependency", "performance", "functools.lru_cache", "status", "unapply", "items", "project", "runpython", "mis", "books.0003_auto", "standard", "way", "default", "option", "choosing", "migrations/0001_squashed_0004_undo_something.py", "need", "system_check_deprecated_details", "datetime.datetime.today", "terms", "workflow", "apps.get_model", "package", "consequence", "get_model", "kind", "maintainer", "users", "showmigrations", "backend", "self", "label", "circumstances", "argument", "myappname", "version", "tuple", "constructors", "conjunction", "dict", "future", "rebuilds", "./manage.py", "policy", "name", "relationships", "running", "django.db.migrations.serializer", "implications", "first_name", "lazyobject", "size", "senses", "python", "0004_foobar", "addition", "amount", "instances", "allow_migrate", "constructor", "manage.py", "guarantee", "subclass", "register_serializer", "indexes", "migration", "others", "enum", "framework", "structure", "relations", "operation", "logic", "length", "features", "feature", "absence", "instantiation", "deconstruct", "key", "situation", "squashmigrations", "state", "integerchoices", "error", "differences", "dd", "nonetype", "migrations", "control", "systems", "myapp.custom_things", "order", "basis", "-", "deprecation", "development", "bool", "style", "routers", "application", "act", "os.fspath", "migrate", "table", "customization", "move_m1", "behavior", "system", "django.db.migrations", "rest", "str", "ipaddressfield", "files", "import", "upload_to", "paths", "use_in_migrations", "#", "decimal", "point", "section", "versions", "authentication", "limitations", "andrew", "¶", "init", "sql='drop", "w900", "app1", "pureposixpath", "--fake", "layout", "change", "format", "commit", "example", "value", "functions", "definitions", "int", "n", "replacement", "lookuperror", "writing", "efforts", "django.db", "things", "details", "myclass", "unapplying", "scenarios", "duration", "interruptions", "installs", "object", "postgresql", "attributes", "one", "issue", "myapp", "sequence", "django.db.migrations.writer", "api", "period", "brand", "level", "django", "createmodel", "promise", "fact", "failure", "field", "integerfield", "your_app_label", "locks", "effect", "superclass", "=", "objects", "enhancements", "squashing", "implementation", "irreversibleerror", "index", "stub", "instructions", "mysql", "statements", "declarations", "range", "branches", "django.db.migrations.exceptions", "a.b", "functools.wraps", "handling", "serialization", "label>.<model", "works", "time", "exception", "release", "oracle", "x.y", "slowdown", "args", "commands", "d", "manager", "problem", "books.0003", "bytes", "releases", "forwards", "pathlib", "output", "fields", "signature", "custom", "decorator", "books", "methods", "side", "machine", "keyword", "none", "hundreds", "loop", "direntry", "msg", "base", "process", "access", "command", "foreignkeys", "considerations", "commits", "production", "mymodel", "validators", "uuid", "end", "makemigrations", "dataset", "flag", "0004_undo_something", "tables", "ship", "app2", "/", "rating", "data", "posixpath", "constraint", "--no", "runsql", "options", "environment", "lambdas", "states", "dependencies", "notes", "references", "0002_some_change", "’s", "optional", "optimizer", "kwargs", "sql", "colleagues", "mybasemanager", "staging", "author", "path", "functools.partial", "directory", "changed_my_model", "managers", "auth", "optimize", "backends", "apps", "module", "arguments", "last_name", "textchoices", "consistency", "memory", "decorators", "mm", "x.y+1", "codebase", "models", "caveats", "pointers", "swappable_dependency", "registry", "deletemodel", "get_internal_type", "call", "disk", "limit_choices_to", "developer", "support", "schemaeditor", "types", "changes", "problems", "servers", "false", "serialize", "_", "iterate", "hand", "values", "cases", "sqlmigrate", "compatibility", "test", "atomic", "auth_user_model", "/", "baseserializer", "schema_editor", "transaction", "model", "y", "indication", "serializer", "results", "migrationwriter.register_serializer", "decimalserializer", "checks", "migration(s", "n’t", "second", "sqlite", "case", "imports", "class", "interdependencies", "number", "numbers", "autodetector", "return", "columns", "books.0001_initial", "attribute", "ones", "function", "developers", "argument_name", "string", "list", "alteration", "machines", "djangotest", "replaces", "app", "parts", "i", "body", "user", "part", "file", "yyyy", "circulardependencyerror", "operations", "risks", "installation", "combine_names", "errors", "history", "traceback", "situations", "hint", "possibility", "system_check_removed_details", "names", "enumeration", "typeerror", "migrationwriter", "scope", "representation", "date", "set", "migrations/0003_auto.py", "yourappname", "functools.cache", "ddl", "foo", "foreignkey", "database", "func", "databases", "limit", "mymanager", "reference", "instance", "schema", "code", "hh"], "type": "documentation"},
{"title": "Using mixins with class-based views", "url": "https://docs.djangoproject.com/en/5.1/topics/class-based-views/mixins/", "content": "Using mixins with class-based views ¶ Caution This is an advanced topic. A working knowledge of Django’s\nclass-based views is advised before exploring these\ntechniques. Django’s built-in class-based views provide a lot of functionality,\nbut some of it you may want to use separately. For instance, you may\nwant to write a view that renders a template to make the HTTP\nresponse, but you can’t use TemplateView ; perhaps you need to\nrender a template only on POST , with GET doing something else\nentirely. While you could use TemplateResponse directly, this\nwill likely result in duplicate code. For this reason, Django also provides a number of mixins that provide\nmore discrete functionality. Template rendering, for instance, is\nencapsulated in the TemplateResponseMixin . The Django\nreference documentation contains full documentation of all the\nmixins . Context and template responses ¶ Two central mixins are provided that help in providing a consistent\ninterface to working with templates in class-based views. TemplateResponseMixin Every built in view which returns a TemplateResponse will call the render_to_response() method that TemplateResponseMixin provides. Most of the time this\nwill be called for you (for instance, it is called by the get() method\nimplemented by both TemplateView and DetailView ); similarly, it’s unlikely\nthat you’ll need to override it, although if you want your response to\nreturn something not rendered via a Django template then you’ll want to do\nit. For an example of this, see the JSONResponseMixin example . render_to_response() itself calls get_template_names() ,\nwhich by default will look up template_name on\nthe class-based view; two other mixins\n( SingleObjectTemplateResponseMixin and MultipleObjectTemplateResponseMixin )\noverride this to provide more flexible defaults when dealing with actual\nobjects. ContextMixin Every built in view which needs context data, such as for rendering a\ntemplate (including TemplateResponseMixin above), should call get_context_data() passing\nany data they want to ensure is in there as keyword arguments. get_context_data() returns a dictionary; in ContextMixin it\nreturns its keyword arguments, but it is common to override this to add\nmore members to the dictionary. You can also use the extra_context attribute. Building up Django’s generic class-based views ¶ Let’s look at how two of Django’s generic class-based views are built\nout of mixins providing discrete functionality. We’ll consider DetailView , which renders a\n“detail” view of an object, and ListView , which will render a list\nof objects, typically from a queryset, and optionally paginate\nthem. This will introduce us to four mixins which between them provide\nuseful functionality when working with either a single Django object,\nor multiple objects. There are also mixins involved in the generic edit views\n( FormView , and the model-specific\nviews CreateView , UpdateView and DeleteView ), and in the\ndate-based generic views. These are\ncovered in the mixin reference\ndocumentation . DetailView : working with a single Django object ¶ To show the detail of an object, we basically need to do two things:\nwe need to look up the object and then we need to make a TemplateResponse with a suitable template,\nand that object as context. To get the object, DetailView relies on SingleObjectMixin ,\nwhich provides a get_object() method that figures out the object based on the URL of the request (it\nlooks for pk and slug keyword arguments as declared in the\nURLConf, and looks the object up either from the model attribute\non the view, or the queryset attribute if that’s provided). SingleObjectMixin also overrides get_context_data() ,\nwhich is used across all Django’s built in class-based views to supply\ncontext data for template renders. To then make a TemplateResponse , DetailView uses SingleObjectTemplateResponseMixin ,\nwhich extends TemplateResponseMixin ,\noverriding get_template_names() as discussed above. It actually provides a fairly sophisticated set of options,\nbut the main one that most people are going to use is <app_label>/<model_name>_detail.html . The _detail part can be changed\nby setting template_name_suffix on a subclass to something else. (For instance, the generic edit\nviews use _form for create and update views, and _confirm_delete for delete views.) ListView : working with many Django objects ¶ Lists of objects follow roughly the same pattern: we need a (possibly\npaginated) list of objects, typically a QuerySet , and then we need to make a TemplateResponse with a suitable template\nusing that list of objects. To get the objects, ListView uses MultipleObjectMixin , which\nprovides both get_queryset() and paginate_queryset() . Unlike\nwith SingleObjectMixin , there’s no need\nto key off parts of the URL to figure out the queryset to work with, so the\ndefault uses the queryset or model attribute\non the view class. A common reason to override get_queryset() here would be to dynamically vary the objects, such as depending on\nthe current user or to exclude posts in the future for a blog. MultipleObjectMixin also overrides get_context_data() to\ninclude appropriate context variables for pagination (providing\ndummies if pagination is disabled). It relies on object_list being\npassed in as a keyword argument, which ListView arranges for\nit. To make a TemplateResponse , ListView then uses MultipleObjectTemplateResponseMixin ;\nas with SingleObjectTemplateResponseMixin above, this overrides get_template_names() to provide a range of options ,\nwith the most commonly-used being <app_label>/<model_name>_list.html , with the _list part again\nbeing taken from the template_name_suffix attribute. (The date based generic views use suffixes such as _archive , _archive_year and so on to use different templates for the various\nspecialized date-based list views.) Using Django’s class-based view mixins ¶ Now we’ve seen how Django’s generic class-based views use the provided mixins,\nlet’s look at other ways we can combine them. We’re still going to be combining\nthem with either built-in class-based views, or other generic class-based\nviews, but there are a range of rarer problems you can solve than are provided\nfor by Django out of the box. Warning Not all mixins can be used together, and not all generic class\nbased views can be used with all other mixins. Here we present a\nfew examples that do work; if you want to bring together other\nfunctionality then you’ll have to consider interactions between\nattributes and methods that overlap between the different classes\nyou’re using, and how method resolution order will affect which\nversions of the methods will be called in what order. The reference documentation for Django’s class-based\nviews and class-based view\nmixins will help you in\nunderstanding which attributes and methods are likely to cause\nconflict between different classes and mixins. If in doubt, it’s often better to back off and base your work on View or TemplateView , perhaps with SingleObjectMixin and MultipleObjectMixin . Although you\nwill probably end up writing more code, it is more likely to be clearly\nunderstandable to someone else coming to it later, and with fewer\ninteractions to worry about you will save yourself some thinking. (Of\ncourse, you can always dip into Django’s implementation of the generic\nclass-based views for inspiration on how to tackle problems.) Using SingleObjectMixin with View ¶ If we want to write a class-based view that responds only to POST , we’ll\nsubclass View and write a post() method\nin the subclass. However if we want our processing to work on a particular\nobject, identified from the URL, we’ll want the functionality provided by SingleObjectMixin . We’ll demonstrate this with the Author model we used in the generic class-based views introduction . views.py ¶ from django.http import HttpResponseForbidden , HttpResponseRedirect from django.urls import reverse from django.views import View from django.views.generic.detail import SingleObjectMixin from books.models import Author class RecordInterestView ( SingleObjectMixin , View ): \"\"\"Records the current user's interest in an author.\"\"\" model = Author def post ( self , request , * args , ** kwargs ): if not request . user . is_authenticated : return HttpResponseForbidden () # Look up the author we're interested in. self . object = self . get_object () # Actually record interest somehow here! return HttpResponseRedirect ( reverse ( \"author-detail\" , kwargs = { \"pk\" : self . object . pk }) ) In practice you’d probably want to record the interest in a key-value\nstore rather than in a relational database, so we’ve left that bit\nout. The only bit of the view that needs to worry about using SingleObjectMixin is where we want to\nlook up the author we’re interested in, which it does with a call to self.get_object() . Everything else is taken care of for us by the mixin. We can hook this into our URLs easily enough: urls.py ¶ from django.urls import path from books.views import RecordInterestView urlpatterns = [ # ... path ( \"author/<int:pk>/interest/\" , RecordInterestView . as_view (), name = \"author-interest\" , ), ] Note the pk named group, which get_object() uses\nto look up the Author instance. You could also use a slug, or\nany of the other features of SingleObjectMixin . Using SingleObjectMixin with ListView ¶ ListView provides built-in\npagination, but you might want to paginate a list of objects that are\nall linked (by a foreign key) to another object. In our publishing\nexample, you might want to paginate through all the books by a\nparticular publisher. One way to do this is to combine ListView with SingleObjectMixin , so that the queryset\nfor the paginated list of books can hang off the publisher found as the single\nobject. In order to do this, we need to have two different querysets: Book queryset for use by ListView Since we have access to the Publisher whose books we want to list, we\noverride get_queryset() and use the Publisher ’s reverse\nforeign key manager . Publisher queryset for use in get_object() We’ll rely on the default implementation of get_object() to fetch the\ncorrect Publisher object.\nHowever, we need to explicitly pass a queryset argument because\notherwise the default implementation of get_object() would call get_queryset() which we have overridden to return Book objects\ninstead of Publisher ones. Note We have to think carefully about get_context_data() .\nSince both SingleObjectMixin and ListView will\nput things in the context data under the value of context_object_name if it’s set, we’ll instead explicitly\nensure the Publisher is in the context data. ListView will add in the suitable page_obj and paginator for us\nproviding we remember to call super() . Now we can write a new PublisherDetailView : from django.views.generic import ListView from django.views.generic.detail import SingleObjectMixin from books.models import Publisher class PublisherDetailView ( SingleObjectMixin , ListView ): paginate_by = 2 template_name = \"books/publisher_detail.html\" def get ( self , request , * args , ** kwargs ): self . object = self . get_object ( queryset = Publisher . objects . all ()) return super () . get ( request , * args , ** kwargs ) def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ \"publisher\" ] = self . object return context def get_queryset ( self ): return self . object . book_set . all () Notice how we set self.object within get() so we\ncan use it again later in get_context_data() and get_queryset() .\nIf you don’t set template_name , the template will default to the normal ListView choice, which in this case would be \"books/book_list.html\" because it’s a list of books; ListView knows nothing about SingleObjectMixin , so it doesn’t have\nany clue this view is anything to do with a Publisher . The paginate_by is deliberately small in the example so you don’t\nhave to create lots of books to see the pagination working! Here’s the\ntemplate you’d want to use: {% extends \"base.html\" %} {% block content %} < h2 > Publisher {{ publisher.name }} </ h2 > < ol > {% for book in page_obj %} < li > {{ book.title }} </ li > {% endfor %} </ ol > < div class = \"pagination\" > < span class = \"step-links\" > {% if page_obj.has_previous %} < a href = \"?page= {{ page_obj.previous_page_number }} \" > previous </ a > {% endif %} < span class = \"current\" > Page {{ page_obj.number }} of {{ paginator.num_pages }} . </ span > {% if page_obj.has_next %} < a href = \"?page= {{ page_obj.next_page_number }} \" > next </ a > {% endif %} </ span > </ div > {% endblock %} Avoid anything more complex ¶ Generally you can use TemplateResponseMixin and SingleObjectMixin when you need\ntheir functionality. As shown above, with a bit of care you can even\ncombine SingleObjectMixin with ListView . However things get\nincreasingly complex as you try to do so, and a good rule of thumb is: Hint Each of your views should use only mixins or views from one of the\ngroups of generic class-based views: detail,\nlist , editing and\ndate. For example it’s fine to combine TemplateView (built in view) with MultipleObjectMixin (generic list), but\nyou’re likely to have problems combining SingleObjectMixin (generic\ndetail) with MultipleObjectMixin (generic list). To show what happens when you try to get more sophisticated, we show\nan example that sacrifices readability and maintainability when there\nis a simpler solution. First, let’s look at a naive attempt to combine DetailView with FormMixin to enable us to POST a Django Form to the same URL as we’re\ndisplaying an object using DetailView . Using FormMixin with DetailView ¶ Think back to our earlier example of using View and SingleObjectMixin together. We were\nrecording a user’s interest in a particular author; say now that we want to\nlet them leave a message saying why they like them. Again, let’s assume we’re\nnot going to store this in a relational database but instead in\nsomething more esoteric that we won’t worry about here. At this point it’s natural to reach for a Form to\nencapsulate the information sent from the user’s browser to Django. Say also\nthat we’re heavily invested in REST , so we want to use the same URL for\ndisplaying the author as for capturing the message from the\nuser. Let’s rewrite our AuthorDetailView to do that. We’ll keep the GET handling from DetailView , although\nwe’ll have to add a Form into the context data so we can\nrender it in the template. We’ll also want to pull in form processing\nfrom FormMixin , and write a bit of\ncode so that on POST the form gets called appropriately. Note We use FormMixin and implement post() ourselves rather than try to mix DetailView with FormView (which provides a suitable post() already) because\nboth of the views implement get() , and things would get much more\nconfusing. Our new AuthorDetailView looks like this: # CAUTION: you almost certainly do not want to do this. # It is provided as part of a discussion of problems you can # run into when combining different generic class-based view # functionality that is not designed to be used together. from django import forms from django.http import HttpResponseForbidden from django.urls import reverse from django.views.generic import DetailView from django.views.generic.edit import FormMixin from books.models import Author class AuthorInterestForm ( forms . Form ): message = forms . CharField () class AuthorDetailView ( FormMixin , DetailView ): model = Author form_class = AuthorInterestForm def get_success_url ( self ): return reverse ( \"author-detail\" , kwargs = { \"pk\" : self . object . pk }) def post ( self , request , * args , ** kwargs ): if not request . user . is_authenticated : return HttpResponseForbidden () self . object = self . get_object () form = self . get_form () if form . is_valid (): return self . form_valid ( form ) else : return self . form_invalid ( form ) def form_valid ( self , form ): # Here, we would record the user's interest using the message # passed in form.cleaned_data['message'] return super () . form_valid ( form ) get_success_url() provides somewhere to redirect to, which gets used\nin the default implementation of form_valid() . We have to provide our\nown post() as noted earlier. A better solution ¶ The number of subtle interactions between FormMixin and DetailView is\nalready testing our ability to manage things. It’s unlikely you’d want to\nwrite this kind of class yourself. In this case, you could write the post() method yourself, keeping DetailView as the only generic functionality, although writing Form handling code involves a lot of duplication. Alternatively, it would still be less work than the above approach to\nhave a separate view for processing the form, which could use FormView distinct from DetailView without concerns. An alternative better solution ¶ What we’re really trying to do here is to use two different class\nbased views from the same URL. So why not do just that? We have a very\nclear division here: GET requests should get the DetailView (with the Form added to the context\ndata), and POST requests should get the FormView . Let’s\nset up those views first. The AuthorDetailView view is almost the same as when we\nfirst introduced AuthorDetailView ; we have to\nwrite our own get_context_data() to make the AuthorInterestForm available to the template. We’ll skip the get_object() override from before for clarity: from django import forms from django.views.generic import DetailView from books.models import Author class AuthorInterestForm ( forms . Form ): message = forms . CharField () class AuthorDetailView ( DetailView ): model = Author def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ \"form\" ] = AuthorInterestForm () return context Then the AuthorInterestFormView is a FormView , but we have to\nbring in SingleObjectMixin so we can find\nthe author we’re talking about, and we have to remember to set template_name to ensure that form errors will render the same template as AuthorDetailView is using on GET : from django.http import HttpResponseForbidden from django.urls import reverse from django.views.generic import FormView from django.views.generic.detail import SingleObjectMixin class AuthorInterestFormView ( SingleObjectMixin , FormView ): template_name = \"books/author_detail.html\" form_class = AuthorInterestForm model = Author def post ( self , request , * args , ** kwargs ): if not request . user . is_authenticated : return HttpResponseForbidden () self . object = self . get_object () return super () . post ( request , * args , ** kwargs ) def get_success_url ( self ): return reverse ( \"author-detail\" , kwargs = { \"pk\" : self . object . pk }) Finally we bring this together in a new AuthorView view. We\nalready know that calling as_view() on\na class-based view gives us something that behaves exactly like a function\nbased view, so we can do that at the point we choose between the two subviews. You can pass through keyword arguments to as_view() in the same way you\nwould in your URLconf, such as if you wanted the AuthorInterestFormView behavior to also appear at another URL but using a different template: from django.views import View class AuthorView ( View ): def get ( self , request , * args , ** kwargs ): view = AuthorDetailView . as_view () return view ( request , * args , ** kwargs ) def post ( self , request , * args , ** kwargs ): view = AuthorInterestFormView . as_view () return view ( request , * args , ** kwargs ) This approach can also be used with any other generic class-based\nviews or your own class-based views inheriting directly from View or TemplateView , as it keeps the different\nviews as separate as possible. More than just HTML ¶ Where class-based views shine is when you want to do the same thing many times.\nSuppose you’re writing an API, and every view should return JSON instead of\nrendered HTML. We can create a mixin class to use in all of our views, handling the\nconversion to JSON once. For example, a JSON mixin might look something like this: from django.http import JsonResponse class JSONResponseMixin : \"\"\" A mixin that can be used to render a JSON response. \"\"\" def render_to_json_response ( self , context , ** response_kwargs ): \"\"\" Returns a JSON response, transforming 'context' to make the payload. \"\"\" return JsonResponse ( self . get_data ( context ), ** response_kwargs ) def get_data ( self , context ): \"\"\" Returns an object that will be serialized as JSON by json.dumps(). \"\"\" # Note: This is *EXTREMELY* naive; in reality, you'll need # to do much more complex handling to ensure that arbitrary # objects -- such as Django model instances or querysets # -- can be serialized as JSON. return context Note Check out the Serializing Django objects documentation for more\ninformation on how to correctly transform Django models and querysets into\nJSON. This mixin provides a render_to_json_response() method with the same signature\nas render_to_response() .\nTo use it, we need to mix it into a TemplateView for example, and override render_to_response() to call render_to_json_response() instead: from django.views.generic import TemplateView class JSONView ( JSONResponseMixin , TemplateView ): def render_to_response ( self , context , ** response_kwargs ): return self . render_to_json_response ( context , ** response_kwargs ) Equally we could use our mixin with one of the generic views. We can make our\nown version of DetailView by mixing JSONResponseMixin with the BaseDetailView – (the DetailView before template\nrendering behavior has been mixed in): from django.views.generic.detail import BaseDetailView class JSONDetailView ( JSONResponseMixin , BaseDetailView ): def render_to_response ( self , context , ** response_kwargs ): return self . render_to_json_response ( context , ** response_kwargs ) This view can then be deployed in the same way as any other DetailView , with exactly the\nsame behavior – except for the format of the response. If you want to be really adventurous, you could even mix a DetailView subclass that is able\nto return both HTML and JSON content, depending on some property of\nthe HTTP request, such as a query argument or an HTTP header. Mix in both the JSONResponseMixin and a SingleObjectTemplateResponseMixin ,\nand override the implementation of render_to_response() to defer to the appropriate rendering method depending on the type of response\nthat the user requested: from django.views.generic.detail import SingleObjectTemplateResponseMixin class HybridDetailView ( JSONResponseMixin , SingleObjectTemplateResponseMixin , BaseDetailView ): def render_to_response ( self , context ): # Look for a 'format=json' GET argument if self . request . GET . get ( \"format\" ) == \"json\" : return self . render_to_json_response ( context ) else : return super () . render_to_response ( context ) Because of the way that Python resolves method overloading, the call to super().render_to_response(context) ends up calling the render_to_response() implementation of TemplateResponseMixin .", "keywords": ["dictionary", "implementation", "multipleobjecttemplateresponsemixin", "urlconf", "lists", "edit", "base.html", "attempt", "listview", "resolution", "interface", "work", "recordinterestview", "browser", "get_template_names", "authorinterestformview", "self.object", "type", "template_name_suffix", "range", "template", "url", "querysets", "book", "rendering", "detailview", "%", "self.get_object", "handling", "order", "templates", "documentation", "def", "publishing", "problems", "templateresponsemixin", "formmixin", "lots", "paginate_queryset", "help", "reason", "pk", "time", "reality", "classes", "subviews", "thumb", "_", "method", "records", "property", "queryset", "render_to_response", "form_class", "shine", "args", "mixins", "get_success_url", "get_form", "behavior", "pk>/interest/", "rest", "multipleobjectmixin", "responses", "form.cleaned_data['message", "query", "templateview", "paginate_by", "solution", "use", "manager", "contextmixin", "interest", "views", "import", "times", "updateview", "super", "ways", "page_obj.has_previous", "information", "response_kwargs", "doubt", "groups", "inspiration", "json", "thinking", "topic", "#", "point", "publisher", "rarer", "way", "versions", "singleobjecttemplateresponsemixin", "¶", "signature", "default", "extremely", "techniques", "clue", "books", "division", "methods", "jsonview", "pagination", "keyword", "is_authenticated", "need", "renders", "model", "page_obj", "page", "processing", "urls", "choice", "variables", "block", "page_obj.previous_page_number", "format", "deleteview", "access", "kind", "payload", "span", "example", "dummies", "paginator.num_pages", "n’t", "formview", "get_object", "value", "content", "self", "suffixes", "knowledge", "people", "basedetailview", "case", "argument", "book.title", "note", "class", "page_obj.has_next", "number", "super().render_to_response(context", "paginator", "authorinterestform", "request", "introduction", "authordetailview", "version", "blog", "get_data", "course", "return", "html", "jsonresponsemixin", "publisher.name", "create", "object_list", "interactions", "get_context_data", "attribute", "ones", "authorview", "examples", "function", "thing", "future", "care", "li", "things", "overloading", "list", "href", "bit", "slug", "page_obj.next_page_number", "django.views", "data", "publisherdetailview", "hybriddetailview", "view", "override", "as_view", "form", "publisher_detail.html", "parts", "name", "object", "options", "pattern", "group", "conflict", "user", "clarity", "header", "part", "one", "attributes", "readability", "’s", "books.models", "errors", "endfor", "charfield", "python", "templateresponse", "concerns", "instances", "get", "conversion", "response", "div", "store", "editing", "template_name", "kwargs", "django.views.generic.edit", "subclass", "api", "box", "confirm_delete", "understanding", "hint", "maintainability", "posts", "jsonresponse", "json.dumps", "author", "post", "path", "rule", "django", "mixin", "singleobjectmixin", "archive", "duplication", "message", "books.views", "date", "lot", "set", "*", "approach", "form_valid", "is_valid", "arguments", "practice", "functionality", "serializing", "requests", "http", "database", "h2", "reverse", "caution", "context", "httpresponseforbidden", "ol", "render_to_json_response", "django.urls", "forms", "reference", "instance", "features", "code", "=", "endblock", "models", "detail", "createview", "objects", "links", "key", "page_obj.number", "discussion", "get_queryset", "defaults", "members", "author/<int", "step", "call", "jsondetailview", "ability"], "type": "documentation"},
{"title": "Form handling with class-based views", "url": "https://docs.djangoproject.com/en/5.1/topics/class-based-views/generic-editing/", "content": "Form handling with class-based views ¶ Form processing generally has 3 paths: Initial GET (blank or prepopulated form) POST with invalid data (typically redisplay form with errors) POST with valid data (process the data and typically redirect) Implementing this yourself often results in a lot of repeated boilerplate code\n(see Using a form in a view ). To help avoid\nthis, Django provides a collection of generic class-based views for form\nprocessing. Basic forms ¶ Given a contact form: forms.py ¶ from django import forms class ContactForm ( forms . Form ): name = forms . CharField () message = forms . CharField ( widget = forms . Textarea ) def send_email ( self ): # send email using the self.cleaned_data dictionary pass The view can be constructed using a FormView : views.py ¶ from myapp.forms import ContactForm from django.views.generic.edit import FormView class ContactFormView ( FormView ): template_name = \"contact.html\" form_class = ContactForm success_url = \"/thanks/\" def form_valid ( self , form ): # This method is called when valid form data has been POSTed. # It should return an HttpResponse. form . send_email () return super () . form_valid ( form ) Notes: FormView inherits TemplateResponseMixin so template_name can be used here. The default implementation for form_valid() simply\nredirects to the success_url . Model forms ¶ Generic views really shine when working with models.  These generic\nviews will automatically create a ModelForm , so long as\nthey can work out which model class to use: If the model attribute is\ngiven, that model class will be used. If get_object() returns an object, the class of that object will be used. If a queryset is\ngiven, the model for that queryset will be used. Model form views provide a form_valid() implementation\nthat saves the model automatically.  You can override this if you have any\nspecial requirements; see below for examples. You don’t even need to provide a success_url for CreateView or UpdateView - they will use get_absolute_url() on the model object if available. If you want to use a custom ModelForm (for instance to\nadd extra validation), set form_class on your view. Note When specifying a custom form class, you must still specify the model,\neven though the form_class may\nbe a ModelForm . First we need to add get_absolute_url() to our Author class: models.py ¶ from django.db import models from django.urls import reverse class Author ( models . Model ): name = models . CharField ( max_length = 200 ) def get_absolute_url ( self ): return reverse ( \"author-detail\" , kwargs = { \"pk\" : self . pk }) Then we can use CreateView and friends to do the actual\nwork. Notice how we’re just configuring the generic class-based views\nhere; we don’t have to write any logic ourselves: views.py ¶ from django.urls import reverse_lazy from django.views.generic.edit import CreateView , DeleteView , UpdateView from myapp.models import Author class AuthorCreateView ( CreateView ): model = Author fields = [ \"name\" ] class AuthorUpdateView ( UpdateView ): model = Author fields = [ \"name\" ] class AuthorDeleteView ( DeleteView ): model = Author success_url = reverse_lazy ( \"author-list\" ) Note We have to use reverse_lazy() instead of reverse() , as the urls are not loaded when the file is imported. The fields attribute works the same way as the fields attribute on the\ninner Meta class on ModelForm . Unless you define the\nform class in another way, the attribute is required and the view will raise\nan ImproperlyConfigured exception if it’s not. If you specify both the fields and form_class attributes, an ImproperlyConfigured exception will be raised. Finally, we hook these new views into the URLconf: urls.py ¶ from django.urls import path from myapp.views import AuthorCreateView , AuthorDeleteView , AuthorUpdateView urlpatterns = [ # ... path ( \"author/add/\" , AuthorCreateView . as_view (), name = \"author-add\" ), path ( \"author/<int:pk>/\" , AuthorUpdateView . as_view (), name = \"author-update\" ), path ( \"author/<int:pk>/delete/\" , AuthorDeleteView . as_view (), name = \"author-delete\" ), ] Note These views inherit SingleObjectTemplateResponseMixin which uses template_name_suffix to construct the template_name based on the model. In this example: CreateView and UpdateView use myapp/author_form.html DeleteView uses myapp/author_confirm_delete.html If you wish to have separate templates for CreateView and UpdateView , you can set either template_name or template_name_suffix on your view class. Models and request.user ¶ To track the user that created an object using a CreateView ,\nyou can use a custom ModelForm to do this. First, add\nthe foreign key relation to the model: models.py ¶ from django.contrib.auth.models import User from django.db import models class Author ( models . Model ): name = models . CharField ( max_length = 200 ) created_by = models . ForeignKey ( User , on_delete = models . CASCADE ) # ... In the view, ensure that you don’t include created_by in the list of fields\nto edit, and override form_valid() to add the user: views.py ¶ from django.contrib.auth.mixins import LoginRequiredMixin from django.views.generic.edit import CreateView from myapp.models import Author class AuthorCreateView ( LoginRequiredMixin , CreateView ): model = Author fields = [ \"name\" ] def form_valid ( self , form ): form . instance . created_by = self . request . user return super () . form_valid ( form ) LoginRequiredMixin prevents users who\naren’t logged in from accessing the form. If you omit that, you’ll need to\nhandle unauthorized users in form_valid() . Content negotiation example ¶ Here is an example showing how you might go about implementing a form that\nworks with an API-based workflow as well as ‘normal’ form POSTs: from django.http import JsonResponse from django.views.generic.edit import CreateView from myapp.models import Author class JsonableResponseMixin : \"\"\" Mixin to add JSON support to a form. Must be used with an object-based FormView (e.g. CreateView) \"\"\" def form_invalid ( self , form ): response = super () . form_invalid ( form ) if self . request . accepts ( \"text/html\" ): return response else : return JsonResponse ( form . errors , status = 400 ) def form_valid ( self , form ): # We make sure to call the parent's form_valid() method because # it might do some processing (in the case of CreateView, it will # call form.save() for example). response = super () . form_valid ( form ) if self . request . accepts ( \"text/html\" ): return response else : data = { \"pk\" : self . object . pk , } return JsonResponse ( data ) class AuthorCreateView ( JsonableResponseMixin , CreateView ): model = Author fields = [ \"name\" ]", "keywords": ["implementation", "urlconf", "myapp.views", "work", "template_name_suffix", "improperlyconfigured", "httpresponse", "add/", "support", "templates", "def", "templateresponsemixin", "authorupdateview", "loginrequiredmixin", "pk", "exception", "method", "jsonableresponsemixin", "queryset", "form_class", "views.py", "contact", "status", "views", "import", "boilerplate", "updateview", "paths", "redisplay", "json", "contactformview", "#", "get_absolute_url", "fields", "way", "django.contrib.auth.models", "singleobjecttemplateresponsemixin", "¶", "default", "custom", "requirements", "contactform", "update", "model", "max_length", "workflow", "processing", "urls", "deleteview", "example", "users", "email", "formview", "get_object", "textarea", "/thanks/", "self", "case", "class", "initial", "authordeleteview", "request", "redirects", "return", "html", "posted", "attribute", "examples", "meta", "negotiation", "myapp.forms", "list", "data", "self.cleaned_data", "widget", "view", "override", "as_view", "myapp.models", "form", "name", "object", "user", "file", "reverse_lazy", "attributes", "notes", "pk>/", "created_by", "errors", "success_url", "charfield", "parent", "notice", "get", "response", "myapp", "django.views.generic.edit", "template_name", "kwargs", "send_email", "form.save", "api", "jsonresponse", "posts", "author", "post", "path", "django", "mixin", "message", "validation", "lot", "text", "form_valid", "authorcreateview", "django.contrib.auth.mixins", "relation", "foreignkey", "modelform", "reverse", "friends", "django.urls", "logic", "forms", "instance", "code", "=", "models", "detail", "createview", "collection", "author/<int", "author_confirm_delete.html"], "type": "documentation"},
{"title": "Built-in class-based generic views", "url": "https://docs.djangoproject.com/en/5.1/topics/class-based-views/generic-display/", "content": "Built-in class-based generic views ¶ Writing web applications can be monotonous, because we repeat certain patterns\nagain and again. Django tries to take away some of that monotony at the model\nand template layers, but web developers also experience this boredom at the view\nlevel. Django’s generic views were developed to ease that pain. They take certain\ncommon idioms and patterns found in view development and abstract them so that\nyou can quickly write common views of data without having to write too much\ncode. We can recognize certain common tasks, like displaying a list of objects, and\nwrite code that displays a list of any object. Then the model in question can\nbe passed as an extra argument to the URLconf. Django ships with generic views to do the following: Display list and detail pages for a single object. If we were creating an\napplication to manage conferences then a TalkListView and a RegisteredUserListView would be examples of list views. A single\ntalk page is an example of what we call a “detail” view. Present date-based objects in year/month/day archive pages,\nassociated detail, and “latest” pages. Allow users to create, update, and delete objects – with or\nwithout authorization. Taken together, these views provide interfaces to perform the most common tasks\ndevelopers encounter. Extending generic views ¶ There’s no question that using generic views can speed up development\nsubstantially. In most projects, however, there comes a moment when the\ngeneric views no longer suffice. Indeed, the most common question asked by new\nDjango developers is how to make generic views handle a wider array of\nsituations. This is one of the reasons generic views were redesigned for the 1.3 release -\npreviously, they were view functions with a bewildering array of options; now,\nrather than passing in a large amount of configuration in the URLconf, the\nrecommended way to extend generic views is to subclass them, and override their\nattributes or methods. That said, generic views will have a limit. If you find you’re struggling to\nimplement your view as a subclass of a generic view, then you may find it more\neffective to write just the code you need, using your own class-based or\nfunctional views. More examples of generic views are available in some third party applications,\nor you could write your own as needed. Generic views of objects ¶ TemplateView certainly is useful, but\nDjango’s generic views really shine when it comes to presenting views of your\ndatabase content. Because it’s such a common task, Django comes with a handful\nof built-in generic views to help generate list and detail views of objects. Let’s start by looking at some examples of showing a list of objects or an\nindividual object. We’ll be using these models: # models.py from django.db import models class Publisher ( models . Model ): name = models . CharField ( max_length = 30 ) address = models . CharField ( max_length = 50 ) city = models . CharField ( max_length = 60 ) state_province = models . CharField ( max_length = 30 ) country = models . CharField ( max_length = 50 ) website = models . URLField () class Meta : ordering = [ \"-name\" ] def __str__ ( self ): return self . name class Author ( models . Model ): salutation = models . CharField ( max_length = 10 ) name = models . CharField ( max_length = 200 ) email = models . EmailField () headshot = models . ImageField ( upload_to = \"author_headshots\" ) def __str__ ( self ): return self . name class Book ( models . Model ): title = models . CharField ( max_length = 100 ) authors = models . ManyToManyField ( \"Author\" ) publisher = models . ForeignKey ( Publisher , on_delete = models . CASCADE ) publication_date = models . DateField () Now we need to define a view: # views.py from django.views.generic import ListView from books.models import Publisher class PublisherListView ( ListView ): model = Publisher Finally hook that view into your urls: # urls.py from django.urls import path from books.views import PublisherListView urlpatterns = [ path ( \"publishers/\" , PublisherListView . as_view ()), ] That’s all the Python code we need to write. We still need to write a template,\nhowever. We could explicitly tell the view which template to use by adding a template_name attribute to the view, but in the absence of an explicit\ntemplate Django will infer one from the object’s name. In this case, the\ninferred template will be \"books/publisher_list.html\" – the “books” part\ncomes from the name of the app that defines the model, while the “publisher”\nbit is the lowercased version of the model’s name. Note Thus, when (for example) the APP_DIRS option of a DjangoTemplates backend is set to True in TEMPLATES , a template location could\nbe: /path/to/project/books/templates/books/publisher_list.html This template will be rendered against a context containing a variable called object_list that contains all the publisher objects. A template might look\nlike this: {% extends \"base.html\" %} {% block content %} < h2 > Publishers </ h2 > < ul > {% for publisher in object_list %} < li > {{ publisher.name }} </ li > {% endfor %} </ ul > {% endblock %} That’s really all there is to it. All the cool features of generic views come\nfrom changing the attributes set on the generic view. The generic views reference documents all the\ngeneric views and their options in detail; the rest of this document will\nconsider some of the common ways you might customize and extend generic views. Making “friendly” template contexts ¶ You might have noticed that our sample publisher list template stores all the\npublishers in a variable named object_list . While this works just fine, it\nisn’t all that “friendly” to template authors: they have to “just know” that\nthey’re dealing with publishers here. Well, if you’re dealing with a model object, this is already done for you. When\nyou are dealing with an object or queryset, Django is able to populate the\ncontext using the lowercased version of the model class’ name. This is provided\nin addition to the default object_list entry, but contains exactly the same\ndata, i.e. publisher_list . If this still isn’t a good match, you can manually set the name of the\ncontext variable. The context_object_name attribute on a generic view\nspecifies the context variable to use: # views.py from django.views.generic import ListView from books.models import Publisher class PublisherListView ( ListView ): model = Publisher context_object_name = \"my_favorite_publishers\" Providing a useful context_object_name is always a good idea. Your\ncoworkers who design templates will thank you. Adding extra context ¶ Often you need to present some extra information beyond that provided by the\ngeneric view. For example, think of showing a list of all the books on each\npublisher detail page. The DetailView generic view provides the publisher to the context, but how do we get\nadditional information in that template? The answer is to subclass DetailView and provide your own implementation of the get_context_data method.\nThe default implementation adds the object being displayed to the template, but\nyou can override it to send more: from django.views.generic import DetailView from books.models import Book , Publisher class PublisherDetailView ( DetailView ): model = Publisher def get_context_data ( self , ** kwargs ): # Call the base implementation first to get a context context = super () . get_context_data ( ** kwargs ) # Add in a QuerySet of all the books context [ \"book_list\" ] = Book . objects . all () return context Note Generally, get_context_data will merge the context data of all parent\nclasses with those of the current class. To preserve this behavior in your\nown classes where you want to alter the context, you should be sure to call get_context_data on the super class. When no two classes try to define the\nsame key, this will give the expected results. However if any class\nattempts to override a key after parent classes have set it (after the call\nto super), any children of that class will also need to explicitly set it\nafter super if they want to be sure to override all parents. If you’re\nhaving trouble, review the method resolution order of your view. Another consideration is that the context data from class-based generic\nviews will override data provided by context processors; see get_context_data() for\nan example. Viewing subsets of objects ¶ Now let’s take a closer look at the model argument we’ve been\nusing all along. The model argument, which specifies the database\nmodel that the view will operate upon, is available on all the\ngeneric views that operate on a single object or a collection of\nobjects. However, the model argument is not the only way to\nspecify the objects that the view will operate upon – you can also\nspecify the list of objects using the queryset argument: from django.views.generic import DetailView from books.models import Publisher class PublisherDetailView ( DetailView ): context_object_name = \"publisher\" queryset = Publisher . objects . all () Specifying model = Publisher is shorthand for saying queryset = Publisher.objects.all() . However, by using queryset to define a filtered\nlist of objects you can be more specific about the objects that will be visible\nin the view (see Making queries for more information about QuerySet objects, and see the class-based views reference for the\ncomplete details). To pick an example, we might want to order a list of books by publication date,\nwith the most recent first: from django.views.generic import ListView from books.models import Book class BookListView ( ListView ): queryset = Book . objects . order_by ( \"-publication_date\" ) context_object_name = \"book_list\" That’s a pretty minimal example, but it illustrates the idea nicely. You’ll\nusually want to do more than just reorder objects. If you want to present a\nlist of books by a particular publisher, you can use the same technique: from django.views.generic import ListView from books.models import Book class AcmeBookListView ( ListView ): context_object_name = \"book_list\" queryset = Book . objects . filter ( publisher__name = \"ACME Publishing\" ) template_name = \"books/acme_list.html\" Notice that along with a filtered queryset , we’re also using a custom\ntemplate name. If we didn’t, the generic view would use the same template as the\n“vanilla” object list, which might not be what we want. Also notice that this isn’t a very elegant way of doing publisher-specific\nbooks. If we want to add another publisher page, we’d need another handful of\nlines in the URLconf, and more than a few publishers would get unreasonable.\nWe’ll deal with this problem in the next section. Note If you get a 404 when requesting /books/acme/ , check to ensure you\nactually have a Publisher with the name ‘ACME Publishing’.  Generic\nviews have an allow_empty parameter for this case.  See the class-based-views reference for more\ndetails. Dynamic filtering ¶ Another common need is to filter down the objects given in a list page by some\nkey in the URL. Earlier we hard-coded the publisher’s name in the URLconf, but\nwhat if we wanted to write a view that displayed all the books by some arbitrary\npublisher? Handily, the ListView has a get_queryset() method we\ncan override. By default, it returns the value of the queryset attribute,\nbut we can use it to add more logic. The key part to making this work is that when class-based views are called,\nvarious useful things are stored on self ; as well as the request\n( self.request ) this includes the positional ( self.args ) and name-based\n( self.kwargs ) arguments captured according to the URLconf. Here, we have a URLconf with a single captured group: # urls.py from django.urls import path from books.views import PublisherBookListView urlpatterns = [ path ( \"books/<publisher>/\" , PublisherBookListView . as_view ()), ] Next, we’ll write the PublisherBookListView view itself: # views.py from django.shortcuts import get_object_or_404 from django.views.generic import ListView from books.models import Book , Publisher class PublisherBookListView ( ListView ): template_name = \"books/books_by_publisher.html\" def get_queryset ( self ): self . publisher = get_object_or_404 ( Publisher , name = self . kwargs [ \"publisher\" ]) return Book . objects . filter ( publisher = self . publisher ) Using get_queryset to add logic to the queryset selection is as convenient\nas it is powerful. For instance, if we wanted, we could use self.request.user to filter using the current user, or other more complex\nlogic. We can also add the publisher into the context at the same time, so we can\nuse it in the template: # ... def get_context_data ( self , ** kwargs ): # Call the base implementation first to get a context context = super () . get_context_data ( ** kwargs ) # Add in the publisher context [ \"publisher\" ] = self . publisher return context Performing extra work ¶ The last common pattern we’ll look at involves doing some extra work before\nor after calling the generic view. Imagine we had a last_accessed field on our Author model that we were\nusing to keep track of the last time anybody looked at that author: # models.py from django.db import models class Author ( models . Model ): salutation = models . CharField ( max_length = 10 ) name = models . CharField ( max_length = 200 ) email = models . EmailField () headshot = models . ImageField ( upload_to = \"author_headshots\" ) last_accessed = models . DateTimeField () The generic DetailView class wouldn’t know anything about this field, but\nonce again we could write a custom view to keep that field updated. First, we’d need to add an author detail bit in the URLconf to point to a\ncustom view: from django.urls import path from books.views import AuthorDetailView urlpatterns = [ # ... path ( \"authors/<int:pk>/\" , AuthorDetailView . as_view (), name = \"author-detail\" ), ] Then we’d write our new view – get_object is the method that retrieves the\nobject – so we override it and wrap the call: from django.utils import timezone from django.views.generic import DetailView from books.models import Author class AuthorDetailView ( DetailView ): queryset = Author . objects . all () def get_object ( self ): obj = super () . get_object () # Record the last accessed date obj . last_accessed = timezone . now () obj . save () return obj Note The URLconf here uses the named group pk - this name is the default\nname that DetailView uses to find the value of the primary key used to\nfilter the queryset. If you want to call the group something else, you can set pk_url_kwarg on the view.", "keywords": ["pk_url_kwarg", "implementation", "urlconf", "consideration", "monotony", "website", "base.html", "publisher_list", "listview", "match", "resolution", "work", "author_headshots", "reorder", "urlfield", "variable", "track", "record", "template", "url", "app_dirs", "emailfield", "manytomanyfield", "book", "country", "selection", "%", "detailview", "tasks", "order", "templates", "involves", "def", "filter", "development", "publishing", "self.kwargs", "coworkers", "pk", "time", "application", "answer", "release", "day", "classes", "order_by", "acmebooklistview", "acme", "self.request", "ships", "ul", "method", "party", "imagefield", "queryset", "state_province", "handful", "behavior", "salutation", "authors", "rest", "str", "templateview", "talklistview", "views", "import", "talk", "problem", "conferences", "moment", "upload_to", "datefield", "urlpatterns", "ways", "sample", "project", "information", "super", "generic", "#", "publisher", "way", "idea", "section", "¶", "default", "self.args", "option", "registereduserlistview", "stores", "web", "custom", "books", "methods", "location", "vanilla", "timezone", "update", "parents", "need", "model", "books/<publisher>/", "max_length", "page", "documents", "urls", "subsets", "block", "base", "results", "example", "publisher.objects.all", "users", "djangotemplates", "year", "n’t", "boredom", "email", "self.request.user", "functions", "value", "authors/<int", "get_object", "content", "backend", "authorization", "self", "case", "argument", "publisher__name", "books_by_publisher.html", "class", "applications", "request", "version", "authordetailview", "writing", "return", "publication", "save", "publisher.name", "object_list", "get_context_data", "attribute", "developers", "examples", "city", "idioms", "meta", "li", "my_favorite_publishers", "things", "list", "month", "trouble", "bit", "details", "question", "pain", "data", "publisherdetailview", "interfaces", "view", "app", "as_view", "lines", "get_object_or_404", "acme_list.html", "name", "object", "options", "group", "pattern", "datetimefield", "user", "task", "part", "queries", "attributes", "filtering", "booklistview", "pk>/", "patterns", "books.models", "python", "charfield", "endfor", "parent", "addition", "reasons", "amount", "attempts", "notice", "array", "kwargs", "children", "configuration", "subclass", "headshot", "situations", "note", "publication_date", "author", "path", "projects", "level", "technique", "django", "archive", "layers", "django.utils", "address", "look", "books.views", "display", "parameter", "document", "date", "*", "field", "arguments", "foreignkey", "database", "h2", "context", "publisherbooklistview", "limit", "django.urls", "logic", "reference", "instance", "publishers", "features", "code", "models", "=", "publisherlistview", "detail", "pages", "absence", "objects", "endblock", "key", "django.shortcuts", "collection", "get_queryset", "shorthand", "entry", "title", "call", "context_object_name", "processors"], "type": "documentation"},
{"title": "Introduction to class-based views", "url": "https://docs.djangoproject.com/en/5.1/topics/class-based-views/intro/", "content": "Introduction to class-based views ¶ Class-based views provide an alternative way to implement views as Python\nobjects instead of functions. They do not replace function-based views, but\nhave certain differences and advantages when compared to function-based views: Organization of code related to specific HTTP methods ( GET , POST ,\netc.) can be addressed by separate methods instead of conditional branching. Object oriented techniques such as mixins (multiple inheritance) can be\nused to factor code into reusable components. The relationship and history of generic views, class-based views, and class-based generic views ¶ In the beginning there was only the view function contract, Django passed your\nfunction an HttpRequest and expected back an HttpResponse . This was the extent of what Django provided. Early on it was recognized that there were common idioms and patterns found in\nview development. Function-based generic views were introduced to abstract\nthese patterns and ease view development for the common cases. The problem with function-based generic views is that while they covered the\nsimple cases well, there was no way to extend or customize them beyond some\nconfiguration options, limiting their usefulness in many real-world\napplications. Class-based generic views were created with the same objective as\nfunction-based generic views, to make view development easier. However, the way\nthe solution is implemented, through the use of mixins, provides a toolkit that\nresults in class-based generic views being more extensible and flexible than\ntheir function-based counterparts. If you have tried function based generic views in the past and found them\nlacking, you should not think of class-based generic views as a class-based\nequivalent, but rather as a fresh approach to solving the original problems\nthat generic views were meant to solve. The toolkit of base classes and mixins that Django uses to build class-based\ngeneric views are built for maximum flexibility, and as such have many hooks in\nthe form of default method implementations and attributes that you are unlikely\nto be concerned with in the simplest use cases. For example, instead of\nlimiting you to a class-based attribute for form_class , the implementation\nuses a get_form method, which calls a get_form_class method, which in\nits default implementation returns the form_class attribute of the class.\nThis gives you several options for specifying what form to use, from an\nattribute, to a fully dynamic, callable hook. These options seem to add hollow\ncomplexity for simple situations, but without them, more advanced designs would\nbe limited. Using class-based views ¶ At its core, a class-based view allows you to respond to different HTTP request\nmethods with different class instance methods, instead of with conditionally\nbranching code inside a single view function. So where the code to handle HTTP GET in a view function would look\nsomething like: from django.http import HttpResponse def my_view ( request ): if request . method == \"GET\" : # <view logic> return HttpResponse ( \"result\" ) In a class-based view, this would become: from django.http import HttpResponse from django.views import View class MyView ( View ): def get ( self , request ): # <view logic> return HttpResponse ( \"result\" ) Because Django’s URL resolver expects to send the request and associated\narguments to a callable function, not a class, class-based views have an as_view() class method which returns a\nfunction that can be called when a request arrives for a URL matching the\nassociated pattern. The function creates an instance of the class, calls setup() to initialize its attributes, and\nthen calls its dispatch() method. dispatch looks at the request to determine whether it is a GET , POST , etc, and relays the request to a matching method if one is defined,\nor raises HttpResponseNotAllowed if not: # urls.py from django.urls import path from myapp.views import MyView urlpatterns = [ path ( \"about/\" , MyView . as_view ()), ] It is worth noting that what your method returns is identical to what you\nreturn from a function-based view, namely some form of HttpResponse . This means that http shortcuts or TemplateResponse objects are valid to use\ninside a class-based view. While a minimal class-based view does not require any class attributes to\nperform its job, class attributes are useful in many class-based designs,\nand there are two ways to configure or set class attributes. The first is the standard Python way of subclassing and overriding attributes\nand methods in the subclass. So that if your parent class had an attribute greeting like this: from django.http import HttpResponse from django.views import View class GreetingView ( View ): greeting = \"Good Day\" def get ( self , request ): return HttpResponse ( self . greeting ) You can override that in a subclass: class MorningGreetingView ( GreetingView ): greeting = \"Morning to ya\" Another option is to configure class attributes as keyword arguments to the as_view() call in the URLconf: urlpatterns = [ path ( \"about/\" , GreetingView . as_view ( greeting = \"G'day\" )), ] Note While your class is instantiated for each request dispatched to it, class\nattributes set through the as_view() entry point are\nconfigured only once at the time your URLs are imported. Using mixins ¶ Mixins are a form of multiple inheritance where behaviors and attributes of\nmultiple parent classes can be combined. For example, in the generic class-based views there is a mixin called TemplateResponseMixin whose primary purpose\nis to define the method render_to_response() .\nWhen combined with the behavior of the View base class, the result is a TemplateView class that will dispatch requests to the appropriate matching methods (a\nbehavior defined in the View base class), and that has a render_to_response() method that uses a template_name attribute to return a TemplateResponse object (a behavior defined in the TemplateResponseMixin ). Mixins are an excellent way of reusing code across multiple classes, but they\ncome with some cost. The more your code is scattered among mixins, the harder\nit will be to read a child class and know what exactly it is doing, and the\nharder it will be to know which methods from which mixins to override if you\nare subclassing something that has a deep inheritance tree. Note also that you can only inherit from one generic view - that is, only one\nparent class may inherit from View and\nthe rest (if any) should be mixins. Trying to inherit from more than one class\nthat inherits from View - for example, trying to use a form at the top of a\nlist and combining ProcessFormView and ListView - won’t work as expected. Handling forms with class-based views ¶ A basic function-based view that handles forms may look something like this: from django.http import HttpResponseRedirect from django.shortcuts import render from .forms import MyForm def myview ( request ): if request . method == \"POST\" : form = MyForm ( request . POST ) if form . is_valid (): # <process form cleaned data> return HttpResponseRedirect ( \"/success/\" ) else : form = MyForm ( initial = { \"key\" : \"value\" }) return render ( request , \"form_template.html\" , { \"form\" : form }) A similar class-based view might look like: from django.http import HttpResponseRedirect from django.shortcuts import render from django.views import View from .forms import MyForm class MyFormView ( View ): form_class = MyForm initial = { \"key\" : \"value\" } template_name = \"form_template.html\" def get ( self , request , * args , ** kwargs ): form = self . form_class ( initial = self . initial ) return render ( request , self . template_name , { \"form\" : form }) def post ( self , request , * args , ** kwargs ): form = self . form_class ( request . POST ) if form . is_valid (): # <process form cleaned data> return HttpResponseRedirect ( \"/success/\" ) return render ( request , self . template_name , { \"form\" : form }) This is a minimal case, but you can see that you would then have the option\nof customizing this view by overriding any of the class attributes, e.g. form_class , via URLconf configuration, or subclassing and overriding one or\nmore of the methods (or both!). Decorating class-based views ¶ The extension of class-based views isn’t limited to using mixins. You can also\nuse decorators. Since class-based views aren’t functions, decorating them works\ndifferently depending on if you’re using as_view() or creating a subclass. Decorating in URLconf ¶ You can adjust class-based views by decorating the result of the as_view() method. The easiest place to do\nthis is in the URLconf where you deploy your view: from django.contrib.auth.decorators import login_required , permission_required from django.views.generic import TemplateView from .views import VoteView urlpatterns = [ path ( \"about/\" , login_required ( TemplateView . as_view ( template_name = \"secret.html\" ))), path ( \"vote/\" , permission_required ( \"polls.can_vote\" )( VoteView . as_view ())), ] This approach applies the decorator on a per-instance basis. If you\nwant every instance of a view to be decorated, you need to take a\ndifferent approach. Decorating the class ¶ To decorate every instance of a class-based view, you need to decorate\nthe class definition itself. To do this you apply the decorator to the dispatch() method of the class. A method on a class isn’t quite the same as a standalone function, so you can’t\njust apply a function decorator to the method – you need to transform it into\na method decorator first. The method_decorator decorator transforms a\nfunction decorator into a method decorator so that it can be used on an\ninstance method. For example: from django.contrib.auth.decorators import login_required from django.utils.decorators import method_decorator from django.views.generic import TemplateView class ProtectedView ( TemplateView ): template_name = \"secret.html\" @method_decorator ( login_required ) def dispatch ( self , * args , ** kwargs ): return super () . dispatch ( * args , ** kwargs ) Or, more succinctly, you can decorate the class instead and pass the name\nof the method to be decorated as the keyword argument name : @method_decorator ( login_required , name = \"dispatch\" ) class ProtectedView ( TemplateView ): template_name = \"secret.html\" If you have a set of common decorators used in several places, you can define\na list or tuple of decorators and use this instead of invoking method_decorator() multiple times. These two classes are equivalent: decorators = [ never_cache , login_required ] @method_decorator ( decorators , name = \"dispatch\" ) class ProtectedView ( TemplateView ): template_name = \"secret.html\" @method_decorator ( never_cache , name = \"dispatch\" ) @method_decorator ( login_required , name = \"dispatch\" ) class ProtectedView ( TemplateView ): template_name = \"secret.html\" The decorators will process a request in the order they are passed to the\ndecorator. In the example, never_cache() will process the request before login_required() . In this example, every instance of ProtectedView will have login\nprotection. These examples use login_required , however, the same behavior\ncan be obtained by using LoginRequiredMixin . Note method_decorator passes *args and **kwargs as parameters to the decorated method on the class. If your method\ndoes not accept a compatible set of parameters it will raise a TypeError exception.", "keywords": ["implementation", "myapp.views", "urlconf", "ease", "hook", "listview", "implementations", "secret.html", "django.utils.decorators", "login_required", "differences", "httpresponse", "url", "shortcuts", "voteview", "order", "basis", "def", "development", "problems", "templateresponsemixin", ".forms", "place", "loginrequiredmixin", "places", "time", "exception", "contract", "classes", "day", "dispatch", "method", "render_to_response", "form_class", "form_template.html", "args", "mixins", "get_form", "behavior", "method_decorator", "flexibility", "rest", "organization", "django.contrib.auth.decorators", "cases", "solution", "extent", "templateview", "use", "views", "problem", "get_form_class", "import", "times", "ways", "urlpatterns", "equivalent", "#", "result", "myformview", "login", "point", "designs", "way", "counterparts", "behaviors", "¶", "default", "option", "techniques", "resolver", "toolkit", "morninggreetingview", "decorator", "methods", "definition", "keyword", "urls", "base", "process", "render", "beginning", "results", "top", "example", "lacking", "functions", "tree", "value", "protectedview", "self", "case", "argument", "class", "components", "applications", "objective", "request", "introduction", "inheritance", "tuple", "@method_decorator", "return", "attribute", "function", "examples", "morning", "idioms", "usefulness", "list", "never_cache", "protection", "advantages", "g'day", "django.views", "data", "call", "setup", "myview", "view", "matching", "as_view", "form", "my_view", "name", "object", "options", "pattern", "extension", "httprequest", "world", "attributes", "httpresponsenotallowed", "returns", "httpresponseredirect", "patterns", "python", "core", "parent", "templateresponse", "job", "get", "history", "child", "template_name", "kwargs", "configuration", "subclass", "situations", "note", "post", "path", "django", "complexity", "mixin", "typeerror", "myform", "greetingview", "*", "branching", "set", "approach", "is_valid", "arguments", "cost", "requests", "http", "relationship", "decorators", "hooks", "django.urls", "purpose", "logic", "forms", "past", "instance", "code", "=", "objects", "django.shortcuts", "parameters", "entry", "greeting"], "type": "documentation"},
{"title": "Class-based views", "url": "https://docs.djangoproject.com/en/5.1/topics/class-based-views/", "content": "Class-based views ¶ A view is a callable which takes a request and returns a\nresponse. This can be more than just a function, and Django provides\nan example of some classes which can be used as views. These allow you\nto structure your views and reuse code by harnessing inheritance and\nmixins. There are also some generic views for tasks which we’ll get to later,\nbut you may want to design your own structure of reusable views which suits\nyour use case. For full details, see the class-based views reference\ndocumentation . Introduction to class-based views Built-in class-based generic views Form handling with class-based views Using mixins with class-based views Basic examples ¶ Django provides base view classes which will suit a wide range of applications.\nAll views inherit from the View class, which\nhandles linking the view into the URLs, HTTP method dispatching and other\ncommon features. RedirectView provides a\nHTTP redirect, and TemplateView extends the\nbase class to make it also render a template. Usage in your URLconf ¶ The most direct way to use generic views is to create them directly in your\nURLconf. If you’re only changing a few attributes on a class-based view, you\ncan pass them into the as_view() method\ncall itself: from django.urls import path from django.views.generic import TemplateView urlpatterns = [ path ( \"about/\" , TemplateView . as_view ( template_name = \"about.html\" )), ] Any arguments passed to as_view() will\noverride attributes set on the class. In this example, we set template_name on the TemplateView . A similar overriding pattern can be used for the url attribute on RedirectView . Subclassing generic views ¶ The second, more powerful way to use generic views is to inherit from an\nexisting view and override attributes (such as the template_name ) or\nmethods (such as get_context_data ) in your subclass to provide new values\nor methods. Consider, for example, a view that just displays one template, about.html . Django has a generic view to do this - TemplateView - so we can subclass it, and\noverride the template name: # some_app/views.py from django.views.generic import TemplateView class AboutView ( TemplateView ): template_name = \"about.html\" Then we need to add this new view into our URLconf. TemplateView is a class, not a function, so\nwe point the URL to the as_view() class\nmethod instead, which provides a function-like entry to class-based views: # urls.py from django.urls import path from some_app.views import AboutView urlpatterns = [ path ( \"about/\" , AboutView . as_view ()), ] For more information on how to use the built in generic views, consult the next\ntopic on generic class-based views . Supporting other HTTP methods ¶ Suppose somebody wants to access our book library over HTTP using the views\nas an API. The API client would connect every now and then and download book\ndata for the books published since last visit. But if no new books appeared\nsince then, it is a waste of CPU time and bandwidth to fetch the books from the\ndatabase, render a full response and send it to the client. It might be\npreferable to ask the API when the most recent book was published. We map the URL to book list view in the URLconf: from django.urls import path from books.views import BookListView urlpatterns = [ path ( \"books/\" , BookListView . as_view ()), ] And the view: from django.http import HttpResponse from django.views.generic import ListView from books.models import Book class BookListView ( ListView ): model = Book def head ( self , * args , ** kwargs ): last_book = self . get_queryset () . latest ( \"publication_date\" ) response = HttpResponse ( # RFC 1123 date format. headers = { \"Last-Modified\" : last_book . publication_date . strftime ( \" %a , %d %b %Y %H:%M:%S GMT\" ) }, ) return response If the view is accessed from a GET request, an object list is returned in\nthe response (using the book_list.html template). But if the client issues\na HEAD request, the response has an empty body and the Last-Modified header indicates when the most recent book was published.  Based on this\ninformation, the client may or may not download the full object list. Asynchronous class-based views ¶ As well as the synchronous ( def ) method handlers already shown, View subclasses may define asynchronous ( async def ) method handlers to leverage\nasynchronous code using await : import asyncio from django.http import HttpResponse from django.views import View class AsyncView ( View ): async def get ( self , request , * args , ** kwargs ): # Perform io-blocking view logic using await, sleep for example. await asyncio . sleep ( 1 ) return HttpResponse ( \"Hello async world!\" ) Within a single view-class, all user-defined method handlers must be either\nsynchronous, using def , or all asynchronous, using async def . An ImproperlyConfigured exception will be raised in as_view() if def and async def declarations are mixed. Django will automatically detect asynchronous views and run them in an\nasynchronous context. You can read more about Django’s asynchronous support,\nand how to best use async views, in Asynchronous support .", "keywords": ["urlconf", "listview", "await", "about.html", "asyncio", "declarations", "range", "template", "improperlyconfigured", "url", "httpresponse", "support", "sleep", "book", "tasks", "documentation", "def", "cpu", "time", "exception", "classes", "method", "args", "mixins", "values", "d", "templateview", "use", "strftime", "views", "import", "subclasses", "information", "async", "books/", "redirectview", "h:%m:%s", "#", "topic", "way", "¶", "books", "methods", "client", "waste", "usage", "model", "y", "urls", "format", "base", "some_app", "suppose", "example", "self", "handlers", "case", "class", "applications", "request", "visit", "introduction", "redirect", "inheritance", "get_context_data", "attribute", "function", "examples", "list", "details", "some_app.views", "gmt", "django.views", "data", "aboutview", "view", "override", "as_view", "rfc", "form", "name", "object", "book_list.html", "pattern", "body", "user", "header", "world", "attributes", "library", "asyncview", "booklistview", "books.models", "get", "response", "template_name", "kwargs", "subclass", "api", "publication_date", "path", "django", "books.views", "*", "date", "structure", "arguments", "head", "http", "database", "context", "last_book", "headers", "django.urls", "basic", "logic", "reference", "download", "features", "code", "=", "io", "entry"], "type": "documentation"},
{"title": "Templates", "url": "https://docs.djangoproject.com/en/5.1/topics/templates/", "content": "Templates ¶ Being a web framework, Django needs a convenient way to generate HTML\ndynamically. The most common approach relies on templates. A template contains\nthe static parts of the desired HTML output as well as some special syntax\ndescribing how dynamic content will be inserted. For a hands-on example of\ncreating HTML pages with templates, see Tutorial 3 . A Django project can be configured with one or several template engines (or\neven zero if you don’t use templates). Django ships built-in backends for its\nown template system, creatively called the Django template language (DTL), and\nfor the popular alternative Jinja2 . Backends for other template languages may\nbe available from third-parties. You can also write your own custom backend,\nsee Custom template backend Django defines a standard API for loading and rendering templates regardless\nof the backend. Loading consists of finding the template for a given identifier\nand preprocessing it, usually compiling it to an in-memory representation.\nRendering means interpolating the template with context data and returning the\nresulting string. The Django template language is Django’s own\ntemplate system. Until Django 1.8 it was the only built-in option available.\nIt’s a good template library even though it’s fairly opinionated and sports a\nfew idiosyncrasies. If you don’t have a pressing reason to choose another\nbackend, you should use the DTL, especially if you’re writing a pluggable\napplication and you intend to distribute templates. Django’s contrib apps that\ninclude templates, like django.contrib.admin ,\nuse the DTL. For historical reasons, both the generic support for template engines and the\nimplementation of the Django template language live in the django.template namespace. Warning The template system isn’t safe against untrusted template authors. For\nexample, a site shouldn’t allow its users to provide their own templates,\nsince template authors can do things like perform XSS attacks and access\nproperties of template variables that may contain sensitive information. The Django template language ¶ Syntax ¶ About this section This is an overview of the Django template language’s syntax. For details\nsee the language syntax reference . A Django template is a text document or a Python string marked-up using the\nDjango template language. Some constructs are recognized and interpreted by the\ntemplate engine. The main ones are variables and tags. A template is rendered with a context. Rendering replaces variables with their\nvalues, which are looked up in the context, and executes tags. Everything else\nis output as is. The syntax of the Django template language involves four constructs. Variables ¶ A variable outputs a value from the context, which is a dict-like object\nmapping keys to values. Variables are surrounded by {{ and }} like this: My first name is {{ first_name }} . My last name is {{ last_name }} . With a context of {'first_name': 'John', 'last_name': 'Doe'} , this template\nrenders to: My first name is John. My last name is Doe. Dictionary lookup, attribute lookup and list-index lookups are implemented with\na dot notation: {{ my_dict.key }} {{ my_object.attribute }} {{ my_list.0 }} If a variable resolves to a callable, the template system will call it with no\narguments and use its result instead of the callable. Tags ¶ Tags provide arbitrary logic in the rendering process. This definition is deliberately vague. For example, a tag can output content,\nserve as a control structure e.g. an “if” statement or a “for” loop, grab\ncontent from a database, or even enable access to other template tags. Tags are surrounded by {% and %} like this: {% csrf_token %} Most tags accept arguments: {% cycle 'odd' 'even' %} Some tags require beginning and ending tags: {% if user.is_authenticated %} Hello, {{ user.username }} . {% endif %} A reference of built-in tags is\navailable as well as instructions for writing custom tags . Filters ¶ Filters transform the values of variables and tag arguments. They look like this: {{ django | title }} With a context of {'django': 'the web framework for perfectionists with deadlines'} , this template renders to: The Web Framework For Perfectionists With Deadlines Some filters take an argument: {{ my_date | date :\"Y-m-d\" }} A reference of built-in filters is\navailable as well as instructions for writing custom filters . Comments ¶ Comments look like this: {# this won't be rendered #} A {% comment %} tag provides multi-line comments. Components ¶ About this section This is an overview of the Django template language’s APIs. For details\nsee the API reference . Engine ¶ django.template.Engine encapsulates an instance of the Django\ntemplate system. The main reason for instantiating an Engine directly is to use the Django template\nlanguage outside of a Django project. django.template.backends.django.DjangoTemplates is a thin wrapper\nadapting django.template.Engine to Django’s template backend API. Template ¶ django.template.Template represents a compiled template. Templates are\nobtained with Engine.get_template() or Engine.from_string() . Likewise django.template.backends.django.Template is a thin wrapper\nadapting django.template.Template to the common template API. Context ¶ django.template.Context holds some metadata in addition to the context\ndata. It is passed to Template.render() for rendering a template. django.template.RequestContext is a subclass of Context that stores the current HttpRequest and runs template context processors. The common API doesn’t have an equivalent concept. Context data is passed in a\nplain dict and the current HttpRequest is passed\nseparately if needed. Loaders ¶ Template loaders are responsible for locating templates, loading them, and\nreturning Template objects. Django provides several built-in template loaders and supports custom template loaders . Context processors ¶ Context processors are functions that receive the current HttpRequest as an argument and return a dict of\ndata to be added to the rendering context. Their main use is to add common data shared by all templates to the context\nwithout repeating code in every view. Django provides many built-in context processors ,\nand you can implement your own additional context processors, too. Support for template engines ¶ Configuration ¶ Templates engines are configured with the TEMPLATES setting. It’s a\nlist of configurations, one for each engine. The default value is empty. The settings.py generated by the startproject command defines a\nmore useful value: TEMPLATES = [ { \"BACKEND\" : \"django.template.backends.django.DjangoTemplates\" , \"DIRS\" : [], \"APP_DIRS\" : True , \"OPTIONS\" : { # ... some options here ... }, }, ] BACKEND is a dotted Python path to a template\nengine class implementing Django’s template backend API. The built-in backends\nare django.template.backends.django.DjangoTemplates and django.template.backends.jinja2.Jinja2 . Since most engines load templates from files, the top-level configuration for\neach engine contains two common settings: DIRS defines a list of directories where the\nengine should look for template source files, in search order. APP_DIRS tells whether the engine should\nlook for templates inside installed applications. Each backend defines a\nconventional name for the subdirectory inside applications where its\ntemplates should be stored. While uncommon, it’s possible to configure several instances of the same\nbackend with different options. In that case you should define a unique NAME for each engine. OPTIONS contains backend-specific settings. Usage ¶ The django.template.loader module defines two functions to load templates. get_template ( template_name , using = None ) [source] ¶ This function loads the template with the given name and returns a Template object. The exact type of the return value depends on the backend that loaded the\ntemplate. Each backend has its own Template class. get_template() tries each template engine in order until one succeeds.\nIf the template cannot be found, it raises TemplateDoesNotExist . If the template is found but\ncontains invalid syntax, it raises TemplateSyntaxError . How templates are searched and loaded depends on each engine’s backend and\nconfiguration. If you want to restrict the search to a particular template engine, pass\nthe engine’s NAME in the using argument. select_template ( template_name_list , using = None ) [source] ¶ select_template() is just like get_template() , except it takes a\nlist of template names. It tries each name in order and returns the first\ntemplate that exists. If loading a template fails, the following two exceptions, defined in django.template , may be raised: exception TemplateDoesNotExist ( msg , tried = None , backend = None , chain = None ) [source] ¶ This exception is raised when a template cannot be found. It accepts the\nfollowing optional arguments for populating the template postmortem on the debug page: backend The template backend instance from which the exception originated. tried A list of sources that were tried when finding the template. This is\nformatted as a list of tuples containing (origin, status) , where origin is an origin-like object and status is a string with the reason the template wasn’t found. chain A list of intermediate TemplateDoesNotExist exceptions raised when trying to load a template. This is used by\nfunctions, such as get_template() , that\ntry to load a given template from multiple engines. exception TemplateSyntaxError ( msg ) [source] ¶ This exception is raised when a template was found but contains errors. Template objects returned by get_template() and select_template() must provide a render() method with the following signature: Template. render ( context = None , request = None ) ¶ Renders this template with a given context. If context is provided, it must be a dict . If it isn’t\nprovided, the engine will render the template with an empty context. If request is provided, it must be an HttpRequest .\nThen the engine must make it, as well as the CSRF token, available in the\ntemplate. How this is achieved is up to each backend. Here’s an example of the search algorithm. For this example the TEMPLATES setting is: TEMPLATES = [ { \"BACKEND\" : \"django.template.backends.django.DjangoTemplates\" , \"DIRS\" : [ \"/home/html/example.com\" , \"/home/html/default\" , ], }, { \"BACKEND\" : \"django.template.backends.jinja2.Jinja2\" , \"DIRS\" : [ \"/home/html/jinja2\" , ], }, ] If you call get_template('story_detail.html') , here are the files Django\nwill look for, in order: /home/html/example.com/story_detail.html ( 'django' engine) /home/html/default/story_detail.html ( 'django' engine) /home/html/jinja2/story_detail.html ( 'jinja2' engine) If you call select_template(['story_253_detail.html', 'story_detail.html']) ,\nhere’s what Django will look for: /home/html/example.com/story_253_detail.html ( 'django' engine) /home/html/default/story_253_detail.html ( 'django' engine) /home/html/jinja2/story_253_detail.html ( 'jinja2' engine) /home/html/example.com/story_detail.html ( 'django' engine) /home/html/default/story_detail.html ( 'django' engine) /home/html/jinja2/story_detail.html ( 'jinja2' engine) When Django finds a template that exists, it stops looking. Use django.template.loader.select_template() for more flexibility You can use select_template() for flexible\ntemplate loading. For example, if you’ve written a news story and want\nsome stories to have custom templates, use something like select_template(['story_%s_detail.html' % story.id, 'story_detail.html']) . That’ll allow you to use a custom template for an\nindividual story, with a fallback template for stories that don’t have\ncustom templates. It’s possible – and preferable – to organize templates in subdirectories\ninside each directory containing templates. The convention is to make a\nsubdirectory for each Django app, with subdirectories within those\nsubdirectories as needed. Do this for your own sanity. Storing all templates in the root level of a\nsingle directory gets messy. To load a template that’s within a subdirectory, use a slash, like so: get_template ( \"news/story_detail.html\" ) Using the same TEMPLATES option as above, this will attempt to load\nthe following templates: /home/html/example.com/news/story_detail.html ( 'django' engine) /home/html/default/news/story_detail.html ( 'django' engine) /home/html/jinja2/news/story_detail.html ( 'jinja2' engine) In addition, to cut down on the repetitive nature of loading and rendering\ntemplates, Django provides a shortcut function which automates the process. render_to_string ( template_name , context = None , request = None , using = None ) [source] ¶ render_to_string() loads a template like get_template() and\ncalls its render() method immediately. It takes the following\narguments. template_name The name of the template to load and render. If it’s a list of template\nnames, Django uses select_template() instead of get_template() to find the template. context A dict to be used as the template’s context for rendering. request An optional HttpRequest that will be available\nduring the template’s rendering process. using An optional template engine NAME . The\nsearch for the template will be restricted to that engine. Usage example: from django.template.loader import render_to_string rendered = render_to_string ( \"my_template.html\" , { \"foo\" : \"bar\" }) See also the render() shortcut which calls render_to_string() and feeds the result into an HttpResponse suitable for returning from a view. Finally, you can use configured engines directly: engines ¶ Template engines are available in django.template.engines : from django.template import engines django_engine = engines [ \"django\" ] template = django_engine . from_string ( \"Hello {{ name }}!\" ) The lookup key — 'django' in this example — is the engine’s NAME . Built-in backends ¶ class DjangoTemplates [source] ¶ Set BACKEND to 'django.template.backends.django.DjangoTemplates' to configure a Django\ntemplate engine. When APP_DIRS is True , DjangoTemplates engines look for templates in the templates subdirectory of installed\napplications. This generic name was kept for backwards-compatibility. DjangoTemplates engines accept the following OPTIONS : 'autoescape' : a boolean that controls whether HTML autoescaping is\nenabled. It defaults to True . Warning Only set it to False if you’re rendering non-HTML templates! 'context_processors' : a list of dotted Python paths to callables that\nare used to populate the context when a template is rendered with a request.\nThese callables take a request object as their argument and return a dict of items to be merged into the context. It defaults to an empty list. See RequestContext for more information. 'debug' : a boolean that turns on/off template debug mode. If it is True , the fancy error page will display a detailed report for any\nexception raised during template rendering. This report contains the\nrelevant snippet of the template with the appropriate line highlighted. It defaults to the value of the DEBUG setting. 'loaders' : a list of dotted Python paths to template loader classes.\nEach Loader class knows how to import templates from a particular\nsource. Optionally, a tuple can be used instead of a string. The first item\nin the tuple should be the Loader class name, and subsequent items are\npassed to the Loader during initialization. The default depends on the values of DIRS and APP_DIRS . See Loader types for details. 'string_if_invalid' : the output, as a string, that the template system\nshould use for invalid (e.g. misspelled) variables. It defaults to an empty string. See How invalid variables are handled for details. 'file_charset' : the charset used to read template files on disk. It defaults to 'utf-8' . 'libraries' : A dictionary of labels and dotted Python paths of template\ntag modules to register with the template engine. This can be used to add\nnew libraries or provide alternate labels for existing ones. For example: OPTIONS = { \"libraries\" : { \"myapp_tags\" : \"path.to.myapp.tags\" , \"admin.urls\" : \"django.contrib.admin.templatetags.admin_urls\" , }, } Libraries can be loaded by passing the corresponding dictionary key to\nthe {% load %} tag. 'builtins' : A list of dotted Python paths of template tag modules to\nadd to built-ins . For example: OPTIONS = { \"builtins\" : [ \"myapp.builtins\" ], } Tags and filters from built-in libraries can be used without first calling\nthe {% load %} tag. class Jinja2 [source] ¶ Requires Jinja2 to be installed: /  $ python -m pip install Jinja2 ...\\> py -m pip install Jinja2 Set BACKEND to 'django.template.backends.jinja2.Jinja2' to configure a Jinja2 engine. When APP_DIRS is True , Jinja2 engines\nlook for templates in the jinja2 subdirectory of installed applications. The most important entry in OPTIONS is 'environment' . It’s a dotted Python path to a callable returning a Jinja2\nenvironment. It defaults to 'jinja2.Environment' . Django invokes that\ncallable and passes other options as keyword arguments. Furthermore, Django\nadds defaults that differ from Jinja2’s for a few options: 'autoescape' : True 'loader' : a loader configured for DIRS and APP_DIRS 'auto_reload' : settings.DEBUG 'undefined' : DebugUndefined if settings.DEBUG else Undefined Jinja2 engines also accept the following OPTIONS : 'context_processors' : a list of dotted Python paths to callables that\nare used to populate the context when a template is rendered with a request.\nThese callables take a request object as their argument and return a dict of items to be merged into the context. It defaults to an empty list. Using context processors with Jinja2 templates is discouraged. Context processors are useful with Django templates because Django templates\ndon’t support calling functions with arguments. Since Jinja2 doesn’t have\nthat limitation, it’s recommended to put the function that you would use as a\ncontext processor in the global variables available to the template using jinja2.Environment as described below. You can then call that function in\nthe template: {{ function ( request ) }} Some Django templates context processors return a fixed value. For Jinja2\ntemplates, this layer of indirection isn’t necessary since you can add\nconstants directly in jinja2.Environment . The original use case for adding context processors for Jinja2 involved: Making an expensive computation that depends on the request. Needing the result in every template. Using the result multiple times in each template. Unless all of these conditions are met, passing a function to the template is\nmore in line with the design of Jinja2. The default configuration is purposefully kept to a minimum. If a template is\nrendered with a request (e.g. when using render() ),\nthe Jinja2 backend adds the globals request , csrf_input , and csrf_token to the context. Apart from that, this backend doesn’t create a\nDjango-flavored environment. It doesn’t know about Django filters and tags.\nIn order to use Django-specific APIs, you must configure them into the\nenvironment. For example, you can create myproject/jinja2.py with this content: from django.templatetags.static import static from django.urls import reverse from jinja2 import Environment def environment ( ** options ): env = Environment ( ** options ) env . globals . update ( { \"static\" : static , \"url\" : reverse , } ) return env and set the 'environment' option to 'myproject.jinja2.environment' . Then you could use the following constructs in Jinja2 templates: < img src = \" {{ static ( 'path/to/company-logo.png' ) }} \" alt = \"Company Logo\" > < a href = \" {{ url ( 'admin:index' ) }} \" > Administration </ a > The concepts of tags and filters exist both in the Django template language\nand in Jinja2 but they’re used differently. Since Jinja2 supports passing\narguments to callables in templates, many features that require a template tag\nor filter in Django templates can be achieved by calling a function in Jinja2\ntemplates, as shown in the example above. Jinja2’s global namespace removes the\nneed for template context processors. The Django template language doesn’t have\nan equivalent of Jinja2 tests.", "keywords": ["py", "comments", "path.to.myapp.tags", "type", "line", "globals", "httpresponse", "url", "fallback", "statement", "\\", "limitation", "administration", "settings", "reason", "m", "overview", "classes", "perfectionists", "ships", "myapp.builtins", "method", "configurations", "directories", "authors", "boolean", "labels", "use", "status", "callables", "items", "project", "equivalent", "way", "example.com", "filters", "default", "template_name_list", "option", "src", "need", "page", "contrib", "users", "django.template.backends.jinja2.jinja2", "render_to_string", "backend", "argument", "alternative", "autoescape", "subdirectory", "tuple", "chain", "dict", "templatesyntaxerror", "properties", "comment", "name", "env", "my_dict.key", "first_name", "python", "addition", "instances", "story_253_detail.html", "subclass", "dtl", "lookup", "get_template", "tag", "|", "namespace", "true", "*", "framework", "structure", "search", "processor", "django.urls", "logic", "features", "key", "dictionary", "odd", "logo", "error", "xss", "design", "template", "debug", "control", "story", "/home", "rendering", "%", "static", "order", "postmortem", "application", "system", "concept", "mode", "modules", "minimum", "files", "import", "slash", "bar", "'", "information", "paths", "result", "#", "section", "¶", "web", "definition", "render", "beginning", "example", "djangotemplates", "identifier", "value", "functions", "source", "engine.from_string", "languages", "html", "things", "details", "indirection", "object", "root", "httprequest", "templatedoesnotexist", "library", "sources", "algorithm", "deadlines", "engine.get_template", "initialization", "api", "conditions", "level", "django", "syntax", "csrf", "text", "approach", "requestcontext", "libraries", "layer", "=", "django.template.engines", "objects", "news", "language", "defaults", "my_template.html", "doe", "implementation", "index", "instructions", "wrapper", "callable", "myapp_tags", "nature", "sanity", "templates", "select_template", "exception", "loader", "site", "d", "grab", "story_detail.html", "get_template('story_detail.html", "john", "load", "ins", "output", "apis", "jinja2", "parties", "signature", "select_template(['story_253_detail.html", "custom", "my_date", "jinja2.environment", "keyword", "renders", "none", "variables", "loop", "msg", "process", "access", "string_if_invalid", "command", "convention", "company", "dot", "content", "applications", "request", "attacks", "cycle", "engine", "mapping", "admin.urls", "href", "data", "lookups", "options", "environment", "django.contrib.admin.templatetags.admin_urls", "debugundefined", "context_processors", "reasons", "shortcut", "keys", "configuration", "path", "directory", "undefined", "dirs", "constants", "backends", "apps", "arguments", "module", "last_name", "memory", "context", "pages", "title", "processors", "django.contrib.admin", "disk", "stories", "app_dirs", "support", "types", "filter", "utf-8", "idiosyncrasies", "false", "tests", "metadata", "flexibility", "values", "template.render", "notation", "times", "item", "compatibility", "subdirectories", "csrf_input", "/", "django.template", "img", "builtins", "usage", "computation", "tutorial", "y", "snippet", "origin", "n’t", "pip", "case", "class", "django.template.loader.select_template", "components", "user.username", "return", "tuples", "constructs", "report", "charset", "ones", "function", "string", "list", "concepts", "loading", "replaces", "view", "app", "parts", "jinja2.py", "errors", "template_name", "hands", "exceptions", "names", "tags", "document", "representation", "date", "set", "foo", "database", "reverse", "loaders", "reference", "instance", "engines", "code", "my_list.0", "entry"], "type": "documentation"},
{"title": "Working with forms", "url": "https://docs.djangoproject.com/en/5.1/topics/forms/", "content": "Working with forms ¶ About this document This document provides an introduction to the basics of web forms and how\nthey are handled in Django. For a more detailed look at specific areas of\nthe forms API, see The Forms API , Form fields , and Form and field validation . Unless you’re planning to build websites and applications that do nothing but\npublish content, and don’t accept input from your visitors, you’re going to\nneed to understand and use forms. Django provides a range of tools and libraries to help you build forms to\naccept input from site visitors, and then process and respond to the input. HTML forms ¶ In HTML, a form is a collection of elements inside <form>...</form> that\nallow a visitor to do things like enter text, select options, manipulate\nobjects or controls, and so on, and then send that information back to the\nserver. Some of these form interface elements - text input or checkboxes - are built\ninto HTML itself. Others are much more complex; an interface that pops up a\ndate picker or allows you to move a slider or manipulate controls will\ntypically use JavaScript and CSS as well as HTML form <input> elements to\nachieve these effects. As well as its <input> elements, a form must specify two things: where : the URL to which the data corresponding to the user’s input should\nbe returned how : the HTTP method the data should be returned by As an example, the login form for the Django admin contains several <input> elements: one of type=\"text\" for the username, one of type=\"password\" for the password, and one of type=\"submit\" for the\n“Log in” button. It also contains some hidden text fields that the user\ndoesn’t see, which Django uses to determine what to do next. It also tells the browser that the form data should be sent to the URL\nspecified in the <form> ’s action attribute - /admin/ - and that it\nshould be sent using the HTTP mechanism specified by the method attribute - post . When the <input type=\"submit\" value=\"Log in\"> element is triggered, the\ndata is returned to /admin/ . GET and POST ¶ GET and POST are the only HTTP methods to use when dealing with forms. Django’s login form is returned using the POST method, in which the browser\nbundles up the form data, encodes it for transmission, sends it to the server,\nand then receives back its response. GET , by contrast, bundles the submitted data into a string, and uses this\nto compose a URL. The URL contains the address where the data must be sent, as\nwell as the data keys and values. You can see this in action if you do a search\nin the Django documentation, which will produce a URL of the form https://docs.djangoproject.com/search/?q=forms&release=1 . GET and POST are typically used for different purposes. Any request that could be used to change the state of the system - for example,\na request that makes changes in the database - should use POST . GET should be used only for requests that do not affect the state of the system. GET would also be unsuitable for a password form, because the password\nwould appear in the URL, and thus, also in browser history and server logs,\nall in plain text. Neither would it be suitable for large quantities of data,\nor for binary data, such as an image. A web application that uses GET requests for admin forms is a security risk: it can be easy for an attacker to\nmimic a form’s request to gain access to sensitive parts of the system. POST , coupled with other protections like Django’s CSRF protection offers more control over access. On the other hand, GET is suitable for things like a web search form,\nbecause the URLs that represent a GET request can easily be bookmarked,\nshared, or resubmitted. Django’s role in forms ¶ Handling forms is a complex business. Consider Django’s admin, where numerous\nitems of data of several different types may need to be prepared for display in\na form, rendered as HTML, edited using a convenient interface, returned to the\nserver, validated and cleaned up, and then saved or passed on for further\nprocessing. Django’s form functionality can simplify and automate vast portions of this\nwork, and can also do it more securely than most programmers would be able to\ndo in code they wrote themselves. Django handles three distinct parts of the work involved in forms: preparing and restructuring data to make it ready for rendering creating HTML forms for the data receiving and processing submitted forms and data from the client It is possible to write code that does all of this manually, but Django can\ntake care of it all for you. Forms in Django ¶ We’ve described HTML forms briefly, but an HTML <form> is just one part of\nthe machinery required. In the context of a web application, ‘form’ might refer to that HTML <form> , or to the Django Form that produces it, or to the\nstructured data returned when it is submitted, or to the end-to-end working\ncollection of these parts. The Django Form class ¶ At the heart of this system of components is Django’s Form class. In\nmuch the same way that a Django model describes the logical structure of an\nobject, its behavior, and the way its parts are represented to us, a Form class describes a form and determines how it works and appears. In a similar way that a model class’s fields map to database fields, a form\nclass’s fields map to HTML form <input> elements. (A ModelForm maps a model class’s fields to HTML form <input> elements via a Form ; this is what the Django admin is based upon.) A form’s fields are themselves classes; they manage form data and perform\nvalidation when a form is submitted. A DateField and a FileField handle very different kinds of data and have to do\ndifferent things with it. A form field is represented to a user in the browser as an HTML “widget” - a\npiece of user interface machinery. Each field type has an appropriate default Widget class , but these can be overridden as\nrequired. Instantiating, processing, and rendering forms ¶ When rendering an object in Django, we generally: get hold of it in the view (fetch it from the database, for example) pass it to the template context expand it to HTML markup using template variables Rendering a form in a template involves nearly the same work as rendering any\nother kind of object, but there are some key differences. In the case of a model instance that contained no data, it would rarely if ever\nbe useful to do anything with it in a template. On the other hand, it makes\nperfect sense to render an unpopulated form - that’s what we do when we want\nthe user to populate it. So when we handle a model instance in a view, we typically retrieve it from the\ndatabase. When we’re dealing with a form we typically instantiate it in the\nview. When we instantiate a form, we can opt to leave it empty or prepopulate it, for\nexample with: data from a saved model instance (as in the case of admin forms for editing) data that we have collated from other sources data received from a previous HTML form submission The last of these cases is the most interesting, because it’s what makes it\npossible for users not just to read a website, but to send information back\nto it too. Building a form ¶ The work that needs to be done ¶ Suppose you want to create a simple form on your website, in order to obtain\nthe user’s name. You’d need something like this in your template: < form action = \"/your-name/\" method = \"post\" > < label for = \"your_name\" > Your name: </ label > < input id = \"your_name\" type = \"text\" name = \"your_name\" value = \" {{ current_name }} \" > < input type = \"submit\" value = \"OK\" > </ form > This tells the browser to return the form data to the URL /your-name/ , using\nthe POST method. It will display a text field, labeled “Your name:”, and a\nbutton marked “OK”. If the template context contains a current_name variable, that will be used to pre-fill the your_name field. You’ll need a view that renders the template containing the HTML form, and\nthat can supply the current_name field as appropriate. When the form is submitted, the POST request which is sent to the server\nwill contain the form data. Now you’ll also need a view corresponding to that /your-name/ URL which will\nfind the appropriate key/value pairs in the request, and then process them. This is a very simple form. In practice, a form might contain dozens or\nhundreds of fields, many of which might need to be prepopulated, and we might\nexpect the user to work through the edit-submit cycle several times before\nconcluding the operation. We might require some validation to occur in the browser, even before the form\nis submitted; we might want to use much more complex fields, that allow the\nuser to do things like pick dates from a calendar and so on. At this point it’s much easier to get Django to do most of this work for us. Building a form in Django ¶ The Form class ¶ We already know what we want our HTML form to look like. Our starting point for\nit in Django is this: forms.py ¶ from django import forms class NameForm ( forms . Form ): your_name = forms . CharField ( label = \"Your name\" , max_length = 100 ) This defines a Form class with a single field ( your_name ). We’ve\napplied a human-friendly label to the field, which will appear in the <label> when it’s rendered (although in this case, the label we specified is actually the same one that would be generated automatically if\nwe had omitted it). The field’s maximum allowable length is defined by max_length . This does two things. It puts a maxlength=\"100\" on the HTML <input> (so the browser should prevent the\nuser from entering more than that number of characters in the first place). It\nalso means that when Django receives the form back from the browser, it will\nvalidate the length of the data. A Form instance has an is_valid() method, which runs\nvalidation routines for all its fields. When this method is called, if all\nfields contain valid data, it will: return True place the form’s data in its cleaned_data attribute. The whole form, when rendered for the first time, will look like: < label for = \"your_name\" > Your name: </ label > < input id = \"your_name\" type = \"text\" name = \"your_name\" maxlength = \"100\" required > Note that it does not include the <form> tags, or a submit button.\nWe’ll have to provide those ourselves in the template. The view ¶ Form data sent back to a Django website is processed by a view, generally the\nsame view which published the form. This allows us to reuse some of the same\nlogic. To handle the form we need to instantiate it in the view for the URL where we\nwant it to be published: views.py ¶ from django.http import HttpResponseRedirect from django.shortcuts import render from .forms import NameForm def get_name ( request ): # if this is a POST request we need to process the form data if request . method == \"POST\" : # create a form instance and populate it with data from the request: form = NameForm ( request . POST ) # check whether it's valid: if form . is_valid (): # process the data in form.cleaned_data as required # ... # redirect to a new URL: return HttpResponseRedirect ( \"/thanks/\" ) # if a GET (or any other method) we'll create a blank form else : form = NameForm () return render ( request , \"name.html\" , { \"form\" : form }) If we arrive at this view with a GET request, it will create an empty form\ninstance and place it in the template context to be rendered. This is what we\ncan expect to happen the first time we visit the URL. If the form is submitted using a POST request, the view will once again\ncreate a form instance and populate it with data from the request: form = NameForm(request.POST) This is called “binding data to the form” (it is now\na bound form). We call the form’s is_valid() method; if it’s not True , we go back to\nthe template with the form. This time the form is no longer empty ( unbound )\nso the HTML form will be populated with the data previously submitted, where it\ncan be edited and corrected as required. If is_valid() is True , we’ll now be able to find all the validated form\ndata in its cleaned_data attribute. We can use this data to update the\ndatabase or do other processing before sending an HTTP redirect to the browser\ntelling it where to go next. The template ¶ We don’t need to do much in our name.html template: < form action = \"/your-name/\" method = \"post\" > {% csrf_token %} {{ form }} < input type = \"submit\" value = \"Submit\" > </ form > All the form’s fields and their attributes will be unpacked into HTML markup\nfrom that {{ form }} by Django’s template language. Forms and Cross Site Request Forgery protection Django ships with an easy-to-use protection against Cross Site Request\nForgeries . When submitting a form via POST with\nCSRF protection enabled you must use the csrf_token template tag\nas in the preceding example. However, since CSRF protection is not\ndirectly tied to forms in templates, this tag is omitted from the\nfollowing examples in this document. HTML5 input types and browser validation If your form includes a URLField , an EmailField or any integer field type, Django will\nuse the url , email and number HTML5 input types. By default,\nbrowsers may apply their own validation on these fields, which may be\nstricter than Django’s validation. If you would like to disable this\nbehavior, set the novalidate attribute on the form tag, or specify\na different widget on the field, like TextInput . We now have a working web form, described by a Django Form , processed\nby a view, and rendered as an HTML <form> . That’s all you need to get started, but the forms framework puts a lot more at\nyour fingertips. Once you understand the basics of the process described above,\nyou should be prepared to understand other features of the forms system and\nready to learn a bit more about the underlying machinery. More about Django Form classes ¶ All form classes are created as subclasses of either django.forms.Form or django.forms.ModelForm . You can think of ModelForm as a\nsubclass of Form . Form and ModelForm actually inherit common\nfunctionality from a (private) BaseForm class, but this implementation\ndetail is rarely important. Models and Forms In fact if your form is going to be used to directly add or edit a Django\nmodel, a ModelForm can save you a great\ndeal of time, effort, and code, because it will build a form, along with the\nappropriate fields and their attributes, from a Model class. Bound and unbound form instances ¶ The distinction between Bound and unbound forms is important: An unbound form has no data associated with it. When rendered to the user,\nit will be empty or will contain default values. A bound form has submitted data, and hence can be used to tell if that data\nis valid. If an invalid bound form is rendered, it can include inline error\nmessages telling the user what data to correct. The form’s is_bound attribute will tell you whether a form has\ndata bound to it or not. More on fields ¶ Consider a more useful form than our minimal example above, which we could use\nto implement “contact me” functionality on a personal website: forms.py ¶ from django import forms class ContactForm ( forms . Form ): subject = forms . CharField ( max_length = 100 ) message = forms . CharField ( widget = forms . Textarea ) sender = forms . EmailField () cc_myself = forms . BooleanField ( required = False ) Our earlier form used a single field, your_name , a CharField . In\nthis case, our form has four fields: subject , message , sender and cc_myself . CharField , EmailField and BooleanField are just three of the available field types; a full list\ncan be found in Form fields . Widgets ¶ Each form field has a corresponding Widget class ,\nwhich in turn corresponds to an HTML form widget such as <input type=\"text\"> . In most cases, the field will have a sensible default widget. For example, by\ndefault, a CharField will have a TextInput widget, that\nproduces an <input type=\"text\"> in the HTML. If you needed <textarea> instead, you’d specify the appropriate widget when defining your form field,\nas we have done for the message field. Field data ¶ Whatever the data submitted with a form, once it has been successfully\nvalidated by calling is_valid() (and is_valid() has returned True ),\nthe validated form data will be in the form.cleaned_data dictionary. This\ndata will have been nicely converted into Python types for you. Note You can still access the unvalidated data directly from request.POST at\nthis point, but the validated data is better. In the contact form example above, cc_myself will be a boolean value.\nLikewise, fields such as IntegerField and FloatField convert\nvalues to a Python int and float respectively. Here’s how the form data could be processed in the view that handles this form: views.py ¶ from django.core.mail import send_mail if form . is_valid (): subject = form . cleaned_data [ \"subject\" ] message = form . cleaned_data [ \"message\" ] sender = form . cleaned_data [ \"sender\" ] cc_myself = form . cleaned_data [ \"cc_myself\" ] recipients = [ \"info@example.com\" ] if cc_myself : recipients . append ( sender ) send_mail ( subject , message , sender , recipients ) return HttpResponseRedirect ( \"/thanks/\" ) Tip For more on sending email from Django, see Sending email . Some field types need some extra handling. For example, files that are uploaded\nusing a form need to be handled differently (they can be retrieved from request.FILES , rather than request.POST ). For details of how to handle\nfile uploads with your form, see Binding uploaded files to a form . Working with form templates ¶ All you need to do to get your form into a template is to place the form\ninstance into the template context. So if your form is called form in the\ncontext, {{ form }} will render its <label> and <input> elements\nappropriately. Additional form template furniture Don’t forget that a form’s output does not include the surrounding <form> tags, or the form’s submit control. You will have to provide\nthese yourself. Reusable form templates ¶ The HTML output when rendering a form is itself generated via a template. You\ncan control this by creating an appropriate template file and setting a custom FORM_RENDERER to use that form_template_name site-wide. You\ncan also customize per-form by overriding the form’s template_name attribute to render the form using the\ncustom template, or by passing the template name directly to Form.render() . The example below will result in {{ form }} being rendered as the output of\nthe form_snippet.html template. In your templates: # In your template: {{ form }} # In form_snippet.html: {% for field in form %} < div class = \"fieldWrapper\" > {{ field.errors }} {{ field.label_tag }} {{ field }} </ div > {% endfor %} Then you can configure the FORM_RENDERER setting: settings.py ¶ from django.forms.renderers import TemplatesSetting class CustomFormRenderer ( TemplatesSetting ): form_template_name = \"form_snippet.html\" FORM_RENDERER = \"project.settings.CustomFormRenderer\" … or for a single form: class MyForm ( forms . Form ): template_name = \"form_snippet.html\" ... … or for a single render of a form instance, passing in the template name to\nthe Form.render() . Here’s an example of this being used in a view: def index ( request ): form = MyForm () rendered_form = form . render ( \"form_snippet.html\" ) context = { \"form\" : rendered_form } return render ( request , \"index.html\" , context ) See Outputting forms as HTML for more details. Reusable field group templates ¶ New in Django 5.0. Each field is available as an attribute of the form, using {{ form.name_of_field }} in a template. A field has a as_field_group() method which renders the\nrelated elements of the field as a group, its label, widget, errors, and help\ntext. This allows generic templates to be written that arrange fields elements in the\nrequired layout. For example: {{ form.non_field_errors }} < div class = \"fieldWrapper\" > {{ form.subject.as_field_group }} </ div > < div class = \"fieldWrapper\" > {{ form.message.as_field_group }} </ div > < div class = \"fieldWrapper\" > {{ form.sender.as_field_group }} </ div > < div class = \"fieldWrapper\" > {{ form.cc_myself.as_field_group }} </ div > By default Django uses the \"django/forms/field.html\" template which is\ndesigned for use with the default \"django/forms/div.html\" form style. The default template can be customized by setting field_template_name in your\nproject-level FORM_RENDERER : from django.forms.renderers import TemplatesSetting class CustomFormRenderer ( TemplatesSetting ): field_template_name = \"field_snippet.html\" … or on a single field: class MyForm ( forms . Form ): subject = forms . CharField ( template_name = \"my_custom_template.html\" ) ... … or on a per-request basis by calling BoundField.render() and supplying a template name: def index ( request ): form = ContactForm () subject = form [ \"subject\" ] context = { \"subject\" : subject . render ( \"my_custom_template.html\" )} return render ( request , \"index.html\" , context ) Rendering fields manually ¶ More fine grained control over field rendering is also possible. Likely this\nwill be in a custom field template, to allow the template to be written once\nand reused for each field. However, it can also be directly accessed from the\nfield attribute on the form. For example: {{ form.non_field_errors }} < div class = \"fieldWrapper\" > {{ form.subject.errors }} < label for = \" {{ form.subject.id_for_label }} \" > Email subject: </ label > {{ form.subject }} </ div > < div class = \"fieldWrapper\" > {{ form.message.errors }} < label for = \" {{ form.message.id_for_label }} \" > Your message: </ label > {{ form.message }} </ div > < div class = \"fieldWrapper\" > {{ form.sender.errors }} < label for = \" {{ form.sender.id_for_label }} \" > Your email address: </ label > {{ form.sender }} </ div > < div class = \"fieldWrapper\" > {{ form.cc_myself.errors }} < label for = \" {{ form.cc_myself.id_for_label }} \" > CC yourself? </ label > {{ form.cc_myself }} </ div > Complete <label> elements can also be generated using the label_tag() . For example: < div class = \"fieldWrapper\" > {{ form.subject.errors }} {{ form.subject.label_tag }} {{ form.subject }} </ div > Rendering form error messages ¶ The price of this flexibility is a bit more work. Until now we haven’t had to\nworry about how to display form errors, because that’s taken care of for us. In\nthis example we have had to make sure we take care of any errors for each field\nand any errors for the form as a whole. Note {{ form.non_field_errors }} at\nthe top of the form and the template lookup for errors on each field. Using {{ form.name_of_field.errors }} displays a list of form errors,\nrendered as an unordered list. This might look like: < ul class = \"errorlist\" > < li > Sender is required. </ li > </ ul > The list has a CSS class of errorlist to allow you to style its appearance.\nIf you wish to further customize the display of errors you can do so by looping\nover them: {% if form.subject.errors %} < ol > {% for error in form.subject.errors %} < li >< strong > {{ error | escape }} </ strong ></ li > {% endfor %} </ ol > {% endif %} Non-field errors (and/or hidden field errors that are rendered at the top of\nthe form when using helpers like form.as_p() ) will be rendered with an\nadditional class of nonfield to help distinguish them from field-specific\nerrors. For example, {{ form.non_field_errors }} would look like: < ul class = \"errorlist nonfield\" > < li > Generic validation error </ li > </ ul > See The Forms API for more on errors, styling, and working with form\nattributes in templates. Looping over the form’s fields ¶ If you’re using the same HTML for each of your form fields, you can reduce\nduplicate code by looping through each field in turn using a {% for %} loop: {% for field in form %} < div class = \"fieldWrapper\" > {{ field.errors }} {{ field.label_tag }} {{ field }} {% if field.help_text %} < p class = \"help\" id = \" {{ field.auto_id }} _helptext\" > {{ field.help_text | safe }} </ p > {% endif %} </ div > {% endfor %} Useful attributes on {{ field }} include: {{ field.errors }} Outputs a <ul class=\"errorlist\"> containing any validation errors\ncorresponding to this field. You can customize the presentation of\nthe errors with a {% for error in field.errors %} loop. In this\ncase, each object in the loop is a string containing the error message. {{ field.field }} The Field instance from the form class that\nthis BoundField wraps. You can use it to access Field attributes, e.g. {{ char_field.field.max_length }} . {{ field.help_text }} Any help text that has been associated with the field. {{ field.html_name }} The name of the field that will be used in the input element’s name\nfield. This takes the form prefix into account, if it has been set. {{ field.id_for_label }} The ID that will be used for this field ( id_email in the example\nabove). If you are constructing the label manually, you may want to use\nthis in lieu of label_tag . It’s also useful, for example, if you have\nsome inline JavaScript and want to avoid hardcoding the field’s ID. {{ field.is_hidden }} This attribute is True if the form field is a hidden field and False otherwise. It’s not particularly useful as a template\nvariable, but could be useful in conditional tests such as: {% if field.is_hidden %} {# Do something special #} {% endif %} {{ field.label }} The label of the field, e.g. Email address . {{ field.label_tag }} The field’s label wrapped in the appropriate HTML <label> tag. This\nincludes the form’s label_suffix . For example,\nthe default label_suffix is a colon: < label for = \"id_email\" > Email address: </ label > {{ field.legend_tag }} Similar to field.label_tag but uses a <legend> tag in place of <label> , for widgets with multiple inputs wrapped in a <fieldset> . {{ field.use_fieldset }} This attribute is True if the form field’s widget contains multiple\ninputs that should be semantically grouped in a <fieldset> with a <legend> to improve accessibility. An example use in a template: {% if field.use_fieldset %} < fieldset > {% if field.label %}{{ field.legend_tag }}{% endif %} {% else %} {% if field.label %}{{ field.label_tag }}{% endif %} {% endif %} {{ field }} {% if field.use_fieldset %} </ fieldset > {% endif %} {{ field.value }} The value of the field. e.g someone@example.com . See also For a complete list of attributes and methods, see BoundField . Looping over hidden and visible fields ¶ If you’re manually laying out a form in a template, as opposed to relying on\nDjango’s default form layout, you might want to treat <input type=\"hidden\"> fields differently from non-hidden fields. For example, because hidden fields\ndon’t display anything, putting error messages “next to” the field could cause\nconfusion for your users – so errors for those fields should be handled\ndifferently. Django provides two methods on a form that allow you to loop over the hidden\nand visible fields independently: hidden_fields() and visible_fields() . Here’s a modification of an earlier example that uses\nthese two methods: {# Include the hidden fields #} {% for hidden in form.hidden_fields %} {{ hidden }} {% endfor %} {# Include the visible fields #} {% for field in form.visible_fields %} < div class = \"fieldWrapper\" > {{ field.errors }} {{ field.label_tag }} {{ field }} </ div > {% endfor %} This example does not handle any errors in the hidden fields. Usually, an\nerror in a hidden field is a sign of form tampering, since normal form\ninteraction won’t alter them. However, you could easily insert some error\ndisplays for those form errors, as well. Further topics ¶ This covers the basics, but forms can do a whole lot more: Formsets Using initial data with a formset Limiting the maximum number of forms Limiting the maximum number of instantiated forms Formset validation Validating the number of forms in a formset Dealing with ordering and deletion of forms Adding additional fields to a formset Passing custom parameters to formset forms Customizing a formset’s prefix Using a formset in views and templates Creating forms from models ModelForm Model formsets Inline formsets Form Assets (the Media class) Assets as a static definition Media as a dynamic property Paths in asset definitions Media objects Media on Forms See also The Forms Reference Covers the full API reference, including form fields, form widgets,\nand form and field validation.", "keywords": ["contrast", "bound", "work", "variable", "form.message", "type", "url", "emailfield", "helpers", "field.errors", "tip", "place", "username", "id", "classes", "form.sender", "ships", "method", "colon", "appearance", "form.cc_myself", "field.label", "use", "views", "messages", "items", "project", "login", "way", "default", "piece", "client", "calendar", "fingertips", "effort", "sender", "hidden_fields", "django.forms", "kind", "top", "char_field.field.max_length", "users", "customformrenderer", "textarea", "<", "label", "form.subject.as_field_group", "deletion", "integer", "form_template_name", "protections", "cross", "forgeries", "/your", "send_mail", "element", "form.message.id_for_label", "name", "field.help_text", "admin", "python", "charfield", "interaction", "logs", "working", "subclass", "rendered_form", "lookup", "others", "tag", "|", "address", "look", "accessibility", "topics", "display", "framework", "structure", "presentation", "form.cc_myself.errors", "requests", "search", "modelform", "turn", "form.subject.label_tag", "label_suffix", "kinds", "ol", "operation", "logic", "forms", "length", "features", "label_tag", "your_name", "key", "django.shortcuts", "collection", "parameters", "state", "dictionary", "type=\"text", "assets", "quantities", "characters", "browser", "error", "differences", "template", "inline", "control", "maxlength", "%", "setting", "rendering", "order", "basis", "documentation", "style", "form.sender.errors", "uploads", "pairs", "sense", "application", "get_name", "form.name_of_field", "form.subject.id_for_label", "lieu", "behavior", "system", "form.cc_myself.id_for_label", "risk", "files", "machinery", "import", "baseform", "field_template_name", "datefield", "information", "paths", "#", "point", "¶", "my_custom_template.html", "web", "definition", "server", "layout", "field.label_tag", "picker", "render", "example", "current_name", "ordering", "value", "definitions", "styling", "int", "publish", "field.value", "form_snippet.html", "introduction", "form.subject.errors", "html", "examples", "name.html", "things", "details", "areas", "form", "map", "object", "field.legend_tag", "asset", "boundfield.render", "one", "attributes", "sources", "form.message.as_field_group", "httpresponseredirect", "as_field_group", "div", "password", "api", "dates", "wraps", "project.settings", "post", "level", "django", "message", "fact", "hold", "validation", "lot", "csrf", "text", "nonfield", "field", "is_valid", "http", "integerfield", "libraries", "field.id_for_label", "textinput", "formsets", "=", "objects", "language", "implementation", "index", "form.hidden_fields", "interface", "urlfield", "range", "button", "):", "widgets", "handling", "field.field", "templates", "field.use_fieldset", ".forms", "recipients", "help", "controls", "time", "furniture", "property", "site", "https://docs.djangoproject.com/search/?q=forms&release=1", "d", "contact", "css", "templatessetting", "subclasses", "id_email", "output", "fields", "nameform", "custom", "fieldwrapper", "methods", "browsers", "contactform", "floatfield", "heart", "field.auto_id", "urls", "form.name_of_field.errors", "variables", "hundreds", "loop", "process", "access", "field.html_name", "javascript", "form.message.errors", "manipulate", "email", "form.as_p", "content", "/thanks/", "end", "applications", "request", "cycle", "visitor", "convert", "protection", "data", "widget", "legend", "effects", "group", "options", "complete", "submission", "’s", "response", "formset", "editing", "append", "keys", "distinction", "tools", "arrange", "value=\"log", "django.forms.renderers", "elements", "markup", "practice", "dozens", "/admin/", "deal", "context", "e.g", "visitors", "security", "dealing", "models", "detail", "class=\"errorlist", "bundles", "website", "edit", "image", "types", "p", "changes", "form.non_field_errors", "subject", "booleanfield", "price", "whole", "filefield", "prefix", "ul", "boundfield", "tests", "hand", "inputs", "slider", "flexibility", "values", "cases", "new", "times", "form_renderer", "generic", "role", "media", "attacker", "form.cleaned_data", "forgery", "input", "model", "max_length", "processing", "type=\"submit", "purposes", "cc", "displays", "starting", "n’t", "transmission", "basics", "routines", "case", "class", "number", "business", "components", "programmers", "redirect", "return", "form.render", "html5", "div.html", "action", "attribute", "care", "string", "li", "list", "bit", "errorlist", "view", "confusion", "parts", "i", "user", "part", "file", "errors", "endfor", "get", "account", "maxlength=\"100", "mechanism", "history", "sign", "visible_fields", "checkboxes", "modification", "myform", "document", "tags", "</form", "date", "functionality", "cleaned_data", "database", "websites", "submit", "reference", "instance", "code", "field.html", "portions"], "type": "documentation"},
{"title": "How to use sessions", "url": "https://docs.djangoproject.com/en/5.1/topics/http/sessions/", "content": "How to use sessions ¶ Django provides full support for anonymous sessions. The session framework\nlets you store and retrieve arbitrary data on a per-site-visitor basis. It\nstores data on the server side and abstracts the sending and receiving of\ncookies. Cookies contain a session ID – not the data itself (unless you’re\nusing the cookie based backend ). Enabling sessions ¶ Sessions are implemented via a piece of middleware . To enable session functionality, do the following: Edit the MIDDLEWARE setting and make sure it contains 'django.contrib.sessions.middleware.SessionMiddleware' . The default settings.py created by django-admin startproject has SessionMiddleware activated. If you don’t want to use sessions, you might as well remove the SessionMiddleware line from MIDDLEWARE and 'django.contrib.sessions' from your INSTALLED_APPS .\nIt’ll save you a small bit of overhead. Configuring the session engine ¶ By default, Django stores sessions in your database (using the model django.contrib.sessions.models.Session ). Though this is convenient, in\nsome setups it’s faster to store session data elsewhere, so Django can be\nconfigured to store session data on your filesystem or in your cache. Using database-backed sessions ¶ If you want to use a database-backed session, you need to add 'django.contrib.sessions' to your INSTALLED_APPS setting. Once you have configured your installation, run manage.py migrate to install the single database table that stores session data. Using cached sessions ¶ For better performance, you may want to use a cache-based session backend. To store session data using Django’s cache system, you’ll first need to make\nsure you’ve configured your cache; see the cache documentation for details. Warning You should only use cache-based sessions if you’re using the Memcached or\nRedis cache backend. The local-memory cache backend doesn’t retain data\nlong enough to be a good choice, and it’ll be faster to use file or\ndatabase sessions directly instead of sending everything through the file\nor database cache backends. Additionally, the local-memory cache backend is\nNOT multi-process safe, therefore probably not a good choice for production\nenvironments. If you have multiple caches defined in CACHES , Django will use the\ndefault cache. To use another cache, set SESSION_CACHE_ALIAS to the\nname of that cache. Once your cache is configured, you have to choose between a database-backed\ncache or a non-persistent cache. The cached database backend ( cached_db ) uses a write-through cache –\nsession writes are applied to both the database and cache, in that order. If\nwriting to the cache fails, the exception is handled and logged via the sessions logger , to avoid failing an\notherwise successful write operation. Changed in Django 5.1: Handling and logging of exceptions when writing to the cache was added. Session reads use the cache, or the database if the data has been evicted from\nthe cache. To use this backend, set SESSION_ENGINE to \"django.contrib.sessions.backends.cached_db\" , and follow the configuration\ninstructions for the using database-backed sessions . The cache backend ( cache ) stores session data only in your cache. This is\nfaster because it avoids database persistence, but you will have to consider\nwhat happens when cache data is evicted. Eviction can occur if the cache fills\nup or the cache server is restarted, and it will mean session data is lost,\nincluding logging out users. To use this backend, set SESSION_ENGINE to \"django.contrib.sessions.backends.cache\" . The cache backend can be made persistent by using a persistent cache, such as\nRedis with appropriate configuration. But unless your cache is definitely\nconfigured for sufficient persistence, opt for the cached database backend.\nThis avoids edge cases caused by unreliable data storage in production. Using file-based sessions ¶ To use file-based sessions, set the SESSION_ENGINE setting to \"django.contrib.sessions.backends.file\" . You might also want to set the SESSION_FILE_PATH setting (which\ndefaults to output from tempfile.gettempdir() , most likely /tmp ) to\ncontrol where Django stores session files. Be sure to check that your web\nserver has permissions to read and write to this location. Using cookie-based sessions ¶ To use cookies-based sessions, set the SESSION_ENGINE setting to \"django.contrib.sessions.backends.signed_cookies\" . The session data will be\nstored using Django’s tools for cryptographic signing and the SECRET_KEY setting. Note It’s recommended to leave the SESSION_COOKIE_HTTPONLY setting\non True to prevent access to the stored data from JavaScript. Warning The session data is signed but not encrypted When using the cookies backend the session data can be read by the client. A MAC (Message Authentication Code) is used to protect the data against\nchanges by the client, so that the session data will be invalidated when being\ntampered with. The same invalidation happens if the client storing the\ncookie (e.g. your user’s browser) can’t store all of the session cookie and\ndrops data. Even though Django compresses the data, it’s still entirely\npossible to exceed the common limit of 4096 bytes per cookie. No freshness guarantee Note also that while the MAC can guarantee the authenticity of the data\n(that it was generated by your site, and not someone else), and the\nintegrity of the data (that it is all there and correct), it cannot\nguarantee freshness i.e. that you are being sent back the last thing you\nsent to the client. This means that for some uses of session data, the\ncookie backend might open you up to replay attacks . Unlike other session\nbackends which keep a server-side record of each session and invalidate it\nwhen a user logs out, cookie-based sessions are not invalidated when a user\nlogs out. Thus if an attacker steals a user’s cookie, they can use that\ncookie to login as that user even if the user logs out. Cookies will only\nbe detected as ‘stale’ if they are older than your SESSION_COOKIE_AGE . Performance Finally, the size of a cookie can have an impact on the speed of your site. Using sessions in views ¶ When SessionMiddleware is activated, each HttpRequest object – the first argument to any Django view function – will have a session attribute, which is a dictionary-like object. You can read it and write to request.session at any point in your view.\nYou can edit it multiple times. class backends.base. SessionBase ¶ This is the base class for all session objects. It has the following\nstandard dictionary methods: __getitem__ ( key ) ¶ Example: fav_color = request.session['fav_color'] __setitem__ ( key , value ) ¶ Example: request.session['fav_color'] = 'blue' __delitem__ ( key ) ¶ Example: del request.session['fav_color'] . This raises KeyError if the given key isn’t already in the session. __contains__ ( key ) ¶ Example: 'fav_color' in request.session get ( key , default = None ) ¶ aget ( key , default = None ) ¶ Asynchronous version : aget() Example: fav_color = request.session.get('fav_color', 'red') Changed in Django 5.1: aget() function was added. aset ( key , value ) ¶ New in Django 5.1. Example: await request.session.aset('fav_color', 'red') update ( dict ) ¶ aupdate ( dict ) ¶ Asynchronous version : aupdate() Example: request.session.update({'fav_color': 'red'}) Changed in Django 5.1: aupdate() function was added. pop ( key , default = __not_given ) ¶ apop ( key , default = __not_given ) ¶ Asynchronous version : apop() Example: fav_color = request.session.pop('fav_color', 'blue') Changed in Django 5.1: apop() function was added. keys () ¶ akeys () ¶ Asynchronous version : akeys() Changed in Django 5.1: akeys() function was added. values () ¶ avalues () ¶ Asynchronous version : avalues() Changed in Django 5.1: avalues() function was added. has_key ( key ) ¶ ahas_key ( key ) ¶ Asynchronous version : ahas_key() Changed in Django 5.1: ahas_key() function was added. items () ¶ aitems () ¶ Asynchronous version : aitems() Changed in Django 5.1: aitems() function was added. setdefault () ¶ asetdefault () ¶ Asynchronous version : asetdefault() Changed in Django 5.1: asetdefault() function was added. clear () ¶ It also has these methods: flush () ¶ aflush () ¶ Asynchronous version : aflush() Deletes the current session data from the session and deletes the session\ncookie. This is used if you want to ensure that the previous session data\ncan’t be accessed again from the user’s browser (for example, the django.contrib.auth.logout() function calls it). Changed in Django 5.1: aflush() function was added. set_test_cookie () ¶ aset_test_cookie () ¶ Asynchronous version : aset_test_cookie() Sets a test cookie to determine whether the user’s browser supports\ncookies. Due to the way cookies work, you won’t be able to test this\nuntil the user’s next page request. See Setting test cookies below for\nmore information. Changed in Django 5.1: aset_test_cookie() function was added. test_cookie_worked () ¶ atest_cookie_worked () ¶ Asynchronous version : atest_cookie_worked() Returns either True or False , depending on whether the user’s\nbrowser accepted the test cookie. Due to the way cookies work, you’ll\nhave to call set_test_cookie() or aset_test_cookie() on a\nprevious, separate page request.\nSee Setting test cookies below for more information. Changed in Django 5.1: atest_cookie_worked() function was added. delete_test_cookie () ¶ adelete_test_cookie () ¶ Asynchronous version : adelete_test_cookie() Deletes the test cookie. Use this to clean up after yourself. Changed in Django 5.1: adelete_test_cookie() function was added. get_session_cookie_age () ¶ Returns the value of the setting SESSION_COOKIE_AGE . This can\nbe overridden in a custom session backend. set_expiry ( value ) ¶ aset_expiry ( value ) ¶ Asynchronous version : aset_expiry() Sets the expiration time for the session. You can pass a number of\ndifferent values: If value is an integer, the session will expire after that\nmany seconds of inactivity. For example, calling request.session.set_expiry(300) would make the session expire\nin 5 minutes. If value is a datetime or timedelta object, the session\nwill expire at that specific date/time. If value is 0 , the user’s session cookie will expire\nwhen the user’s web browser is closed. If value is None , the session reverts to using the global\nsession expiry policy. Reading a session is not considered activity for expiration\npurposes. Session expiration is computed from the last time the\nsession was modified . Changed in Django 5.1: aset_expiry() function was added. get_expiry_age () ¶ aget_expiry_age () ¶ Asynchronous version : aget_expiry_age() Returns the number of seconds until this session expires. For sessions\nwith no custom expiration (or those set to expire at browser close), this\nwill equal SESSION_COOKIE_AGE . This function accepts two optional keyword arguments: modification : last modification of the session, as a datetime object. Defaults to the current time. expiry : expiry information for the session, as a datetime object, an int (in seconds), or None . Defaults to the value stored in the session by set_expiry() / aset_expiry() , if there is one, or None . Note This method is used by session backends to determine the session expiry\nage in seconds when saving the session. It is not really intended for\nusage outside of that context. In particular, while it is possible to determine the remaining\nlifetime of a session just when you have the correct modification value and the expiry is set as a datetime object, where you do have the modification value, it is more\nstraight-forward to calculate the expiry by-hand: expires_at = modification + timedelta ( seconds = settings . SESSION_COOKIE_AGE ) Changed in Django 5.1: aget_expiry_age() function was added. get_expiry_date () ¶ aget_expiry_date () ¶ Asynchronous version : aget_expiry_date() Returns the date this session will expire. For sessions with no custom\nexpiration (or those set to expire at browser close), this will equal the\ndate SESSION_COOKIE_AGE seconds from now. This function accepts the same keyword arguments as get_expiry_age() , and similar notes on usage apply. Changed in Django 5.1: aget_expiry_date() function was added. get_expire_at_browser_close () ¶ aget_expire_at_browser_close () ¶ Asynchronous version : aget_expire_at_browser_close() Returns either True or False , depending on whether the user’s\nsession cookie will expire when the user’s web browser is closed. Changed in Django 5.1: aget_expire_at_browser_close() function was added. clear_expired () ¶ aclear_expired () ¶ Asynchronous version : aclear_expired() Removes expired sessions from the session store. This class method is\ncalled by clearsessions . Changed in Django 5.1: aclear_expired() function was added. cycle_key () ¶ acycle_key () ¶ Asynchronous version : acycle_key() Creates a new session key while retaining the current session data. django.contrib.auth.login() calls this method to mitigate against\nsession fixation. Changed in Django 5.1: acycle_key() function was added. Session serialization ¶ By default, Django serializes session data using JSON. You can use the SESSION_SERIALIZER setting to customize the session serialization\nformat. Even with the caveats described in Write your own serializer , we highly\nrecommend sticking with JSON serialization especially if you are using the\ncookie backend . For example, here’s an attack scenario if you use pickle to serialize\nsession data. If you’re using the signed cookie session backend and SECRET_KEY (or any key of SECRET_KEY_FALLBACKS ) is known by an attacker (there isn’t an\ninherent vulnerability in Django that would cause it to leak), the attacker\ncould insert a string into their session which, when unpickled, executes\narbitrary code on the server. The technique for doing so is simple and easily\navailable on the internet. Although the cookie session storage signs the\ncookie-stored data to prevent tampering, a SECRET_KEY leak\nimmediately escalates to a remote code execution vulnerability. Bundled serializers ¶ class serializers. JSONSerializer ¶ A wrapper around the JSON serializer from django.core.signing . Can\nonly serialize basic data types. In addition, as JSON supports only string keys, note that using non-string\nkeys in request.session won’t work as expected: >>> # initial assignment >>> request . session [ 0 ] = \"bar\" >>> # subsequent requests following serialization & deserialization >>> # of session data >>> request . session [ 0 ] # KeyError >>> request . session [ \"0\" ] 'bar' Similarly, data that can’t be encoded in JSON, such as non-UTF8 bytes like '\\xd9' (which raises UnicodeDecodeError ), can’t be stored. See the Write your own serializer section for more details on limitations\nof JSON serialization. Write your own serializer ¶ Note that the JSONSerializer cannot handle arbitrary Python data types. As is often the case, there is a\ntrade-off between convenience and security. If you wish to store more advanced\ndata types including datetime and Decimal in JSON backed sessions, you\nwill need to write a custom serializer (or convert such values to a JSON\nserializable object before storing them in request.session ). While\nserializing these values is often straightforward\n( DjangoJSONEncoder may be helpful),\nwriting a decoder that can reliably get back the same thing that you put in is\nmore fragile. For example, you run the risk of returning a datetime that\nwas actually a string that just happened to be in the same format chosen for datetime s). Your serializer class must implement two methods, dumps(self, obj) and loads(self, data) , to serialize and deserialize\nthe dictionary of session data, respectively. Session object guidelines ¶ Use normal Python strings as dictionary keys on request.session . This\nis more of a convention than a hard-and-fast rule. Session dictionary keys that begin with an underscore are reserved for\ninternal use by Django. Don’t override request.session with a new object, and don’t access or\nset its attributes. Use it like a Python dictionary. Examples ¶ This simplistic view sets a has_commented variable to True after a user\nposts a comment. It doesn’t let a user post a comment more than once: def post_comment ( request , new_comment ): if request . session . get ( \"has_commented\" , False ): return HttpResponse ( \"You've already commented.\" ) c = comments . Comment ( comment = new_comment ) c . save () request . session [ \"has_commented\" ] = True return HttpResponse ( \"Thanks for your comment!\" ) This simplistic view logs in a “member” of the site: def login ( request ): m = Member . objects . get ( username = request . POST [ \"username\" ]) if m . check_password ( request . POST [ \"password\" ]): request . session [ \"member_id\" ] = m . id return HttpResponse ( \"You're logged in.\" ) else : return HttpResponse ( \"Your username and password didn't match.\" ) …And this one logs a member out, according to login() above: def logout ( request ): try : del request . session [ \"member_id\" ] except KeyError : pass return HttpResponse ( \"You're logged out.\" ) The standard django.contrib.auth.logout() function actually does a bit\nmore than this to prevent inadvertent data leakage. It calls the flush() method of request.session .\nWe are using this example as a demonstration of how to work with session\nobjects, not as a full logout() implementation. Setting test cookies ¶ As a convenience, Django provides a way to test whether the user’s browser\naccepts cookies. Call the set_test_cookie() method of request.session in a view, and call test_cookie_worked() in a subsequent view –\nnot in the same view call. This awkward split between set_test_cookie() and test_cookie_worked() is necessary due to the way cookies work. When you set a cookie, you can’t\nactually tell whether a browser accepted it until the browser’s next request. It’s good practice to use delete_test_cookie() to clean up after\nyourself. Do this after you’ve verified that the test cookie worked. Here’s a typical usage example: from django.http import HttpResponse from django.shortcuts import render def login ( request ): if request . method == \"POST\" : if request . session . test_cookie_worked (): request . session . delete_test_cookie () return HttpResponse ( \"You're logged in.\" ) else : return HttpResponse ( \"Please enable cookies and try again.\" ) request . session . set_test_cookie () return render ( request , \"foo/login_form.html\" ) Changed in Django 5.1: Support for setting test cookies in asynchronous view functions was added. Using sessions out of views ¶ Note The examples in this section import the SessionStore object directly\nfrom the django.contrib.sessions.backends.db backend. In your own code,\nyou should consider importing SessionStore from the session engine\ndesignated by SESSION_ENGINE , as below: >>> from importlib import import_module >>> from django.conf import settings >>> SessionStore = import_module ( settings . SESSION_ENGINE ) . SessionStore An API is available to manipulate session data outside of a view: >>> from django.contrib.sessions.backends.db import SessionStore >>> s = SessionStore () >>> # stored as seconds since epoch since datetimes are not serializable in JSON. >>> s [ \"last_login\" ] = 1376587691 >>> s . create () >>> s . session_key '2b1189a188b44ad18c35e113ac6ceead' >>> s = SessionStore ( session_key = \"2b1189a188b44ad18c35e113ac6ceead\" ) >>> s [ \"last_login\" ] 1376587691 SessionStore.create() is designed to create a new session (i.e. one not\nloaded from the session store and with session_key=None ). save() is\ndesigned to save an existing session (i.e. one loaded from the session store).\nCalling save() on a new session may also work but has a small chance of\ngenerating a session_key that collides with an existing one. create() calls save() and loops until an unused session_key is generated. If you’re using the django.contrib.sessions.backends.db backend, each\nsession is a normal Django model. The Session model is defined in django/contrib/sessions/models.py . Because it’s a normal model, you can\naccess sessions using the normal Django database API: >>> from django.contrib.sessions.models import Session >>> s = Session . objects . get ( pk = \"2b1189a188b44ad18c35e113ac6ceead\" ) >>> s . expire_date datetime.datetime(2005, 8, 20, 13, 35, 12) Note that you’ll need to call get_decoded() to get the session\ndictionary. This is necessary because the dictionary is stored in an encoded\nformat: >>> s . session_data 'KGRwMQpTJ19hdXRoX3VzZXJfaWQnCnAyCkkxCnMuMTExY2ZjODI2Yj...' >>> s . get_decoded () {'user_id': 42} When sessions are saved ¶ By default, Django only saves to the session database when the session has been\nmodified – that is if any of its dictionary values have been assigned or\ndeleted: # Session is modified. request . session [ \"foo\" ] = \"bar\" # Session is modified. del request . session [ \"foo\" ] # Session is modified. request . session [ \"foo\" ] = {} # Gotcha: Session is NOT modified, because this alters # request.session['foo'] instead of request.session. request . session [ \"foo\" ][ \"bar\" ] = \"baz\" In the last case of the above example, we can tell the session object\nexplicitly that it has been modified by setting the modified attribute on\nthe session object: request . session . modified = True To change this default behavior, set the SESSION_SAVE_EVERY_REQUEST setting to True . When set to True , Django will save the session to the\ndatabase on every single request. Note that the session cookie is only sent when a session has been created or\nmodified. If SESSION_SAVE_EVERY_REQUEST is True , the session\ncookie will be sent on every request. Similarly, the expires part of a session cookie is updated each time the\nsession cookie is sent. The session is not saved if the response’s status code is 500. Browser-length sessions vs. persistent sessions ¶ You can control whether the session framework uses browser-length sessions vs.\npersistent sessions with the SESSION_EXPIRE_AT_BROWSER_CLOSE setting. By default, SESSION_EXPIRE_AT_BROWSER_CLOSE is set to False ,\nwhich means session cookies will be stored in users’ browsers for as long as SESSION_COOKIE_AGE . Use this if you don’t want people to have to\nlog in every time they open a browser. If SESSION_EXPIRE_AT_BROWSER_CLOSE is set to True , Django will\nuse browser-length cookies – cookies that expire as soon as the user closes\ntheir browser. Use this if you want people to have to log in every time they\nopen a browser. This setting is a global default and can be overwritten at a per-session level\nby explicitly calling the set_expiry() method\nof request.session as described above in using sessions in views . Note Some browsers (Chrome, for example) provide settings that allow users to\ncontinue browsing sessions after closing and reopening the browser. In\nsome cases, this can interfere with the SESSION_EXPIRE_AT_BROWSER_CLOSE setting and prevent sessions\nfrom expiring on browser close. Please be aware of this while testing\nDjango applications which have the SESSION_EXPIRE_AT_BROWSER_CLOSE setting enabled. Clearing the session store ¶ As users create new sessions on your website, session data can accumulate in\nyour session store. If you’re using the database backend, the django_session database table will grow. If you’re using the file backend,\nyour temporary directory will contain an increasing number of files. To understand this problem, consider what happens with the database backend.\nWhen a user logs in, Django adds a row to the django_session database\ntable. Django updates this row each time the session data changes. If the user\nlogs out manually, Django deletes the row. But if the user does not log out,\nthe row never gets deleted. A similar process happens with the file backend. Django does not provide automatic purging of expired sessions. Therefore,\nit’s your job to purge expired sessions on a regular basis. Django provides a\nclean-up management command for this purpose: clearsessions . It’s\nrecommended to call this command on a regular basis, for example as a daily\ncron job. Note that the cache backend isn’t vulnerable to this problem, because caches\nautomatically delete stale data. Neither is the cookie backend, because the\nsession data is stored by the users’ browsers. Settings ¶ A few Django settings give you control over session\nbehavior: SESSION_CACHE_ALIAS SESSION_COOKIE_AGE SESSION_COOKIE_DOMAIN SESSION_COOKIE_HTTPONLY SESSION_COOKIE_NAME SESSION_COOKIE_PATH SESSION_COOKIE_SAMESITE SESSION_COOKIE_SECURE SESSION_ENGINE SESSION_EXPIRE_AT_BROWSER_CLOSE SESSION_FILE_PATH SESSION_SAVE_EVERY_REQUEST SESSION_SERIALIZER Session security ¶ Subdomains within a site are able to set cookies on the client for the whole\ndomain. This makes session fixation possible if cookies are permitted from\nsubdomains not controlled by trusted users. For example, an attacker could log into good.example.com and get a valid\nsession for their account. If the attacker has control over bad.example.com ,\nthey can use it to send their session key to you since a subdomain is permitted\nto set cookies on *.example.com . When you visit good.example.com ,\nyou’ll be logged in as the attacker and might inadvertently enter your\nsensitive personal data (e.g. credit card info) into the attacker’s account. Another possible attack would be if good.example.com sets its SESSION_COOKIE_DOMAIN to \"example.com\" which would cause\nsession cookies from that site to be sent to bad.example.com . Technical details ¶ The session dictionary accepts any json serializable value when using JSONSerializer . Session data is stored in a database table named django_session . Django only sends a cookie if it needs to. If you don’t set any session\ndata, it won’t send a session cookie. The SessionStore object ¶ When working with sessions internally, Django uses a session store object from\nthe corresponding session engine. By convention, the session store object class\nis named SessionStore and is located in the module designated by SESSION_ENGINE . All SessionStore subclasses available in Django implement the following\ndata manipulation methods: exists() create() save() delete() load() clear_expired() An asynchronous interface for these methods is provided by wrapping them with sync_to_async() . They can be implemented directly if an async-native\nimplementation is available: aexists() acreate() asave() adelete() aload() aclear_expired() In order to build a custom session engine or to customize an existing one, you\nmay create a new class inheriting from SessionBase or\nany other existing SessionStore class. You can extend the session engines, but doing so with database-backed session\nengines generally requires some extra effort (see the next section for\ndetails). Changed in Django 5.1: aexists() , acreate() , asave() , adelete() , aload() , and aclear_expired() methods were added. Extending database-backed session engines ¶ Creating a custom database-backed session engine built upon those included in\nDjango (namely db and cached_db ) may be done by inheriting AbstractBaseSession and either SessionStore class. AbstractBaseSession and BaseSessionManager are importable from django.contrib.sessions.base_session so that they can be imported without\nincluding django.contrib.sessions in INSTALLED_APPS . class base_session. AbstractBaseSession ¶ The abstract base session model. session_key ¶ Primary key. The field itself may contain up to 40 characters. The\ncurrent implementation generates a 32-character string (a random\nsequence of digits and lowercase ASCII letters). session_data ¶ A string containing an encoded and serialized session dictionary. expire_date ¶ A datetime designating when the session expires. Expired sessions are not available to a user, however, they may still\nbe stored in the database until the clearsessions management\ncommand is run. classmethod get_session_store_class () ¶ Returns a session store class to be used with this session model. get_decoded () ¶ Returns decoded session data. Decoding is performed by the session store class. You can also customize the model manager by subclassing BaseSessionManager : class base_session. BaseSessionManager ¶ encode ( session_dict ) ¶ Returns the given session dictionary serialized and encoded as a string. Encoding is performed by the session store class tied to a model class. save ( session_key , session_dict , expire_date ) ¶ Saves session data for a provided session key, or deletes the session\nin case the data is empty. Customization of SessionStore classes is achieved by overriding methods\nand properties described below: class backends.db. SessionStore ¶ Implements database-backed session store. classmethod get_model_class () ¶ Override this method to return a custom session model if you need one. create_model_instance ( data ) ¶ Returns a new instance of the session model object, which represents\nthe current session state. Overriding this method provides the ability to modify session model\ndata before it’s saved to database. class backends.cached_db. SessionStore ¶ Implements cached database-backed session store. cache_key_prefix ¶ A prefix added to a session key to build a cache key string. Example ¶ The example below shows a custom database-backed session engine that includes\nan additional database column to store an account ID (thus providing an option\nto query the database for all active sessions for an account): from django.contrib.sessions.backends.db import SessionStore as DBStore from django.contrib.sessions.base_session import AbstractBaseSession from django.db import models class CustomSession ( AbstractBaseSession ): account_id = models . IntegerField ( null = True , db_index = True ) @classmethod def get_session_store_class ( cls ): return SessionStore class SessionStore ( DBStore ): @classmethod def get_model_class ( cls ): return CustomSession def create_model_instance ( self , data ): obj = super () . create_model_instance ( data ) try : account_id = int ( data . get ( \"_auth_user_id\" )) except ( ValueError , TypeError ): account_id = None obj . account_id = account_id return obj If you are migrating from the Django’s built-in cached_db session store to\na custom one based on cached_db , you should override the cache key prefix\nin order to prevent a namespace clash: class SessionStore ( CachedDBStore ): cache_key_prefix = \"mysessions.custom_cached_db_backend\" # ... Session IDs in URLs ¶ The Django sessions framework is entirely, and solely, cookie-based. It does\nnot fall back to putting session IDs in URLs as a last resort, as PHP does.\nThis is an intentional design decision. Not only does that behavior make URLs\nugly, it makes your site vulnerable to session-ID theft via the “Referer”\nheader.", "keywords": ["get_expire_at_browser_close", "column", "comments", "setups", "signing", "variable", "authenticity", "line", "apop", "subdomain", "httpresponse", "cron", "def", "username", "id", "acycle_key", "settings", "serializers", "logout", "m", "classes", "fav_color", "null", "getitem", "info", "method", "set_test_cookie", "split", "secret_key", "session_cookie_path", "performance", "sending", "use", "session_cookie_name", "status", "views", "pickle", "receiving", "encoding", "cookies", "items", "minutes", ".example.com", "login", "aload", "leak", "way", "default", "option", "piece", "keyerror", "referer", "import_module", "client", "session_cookie_domain", "domain", "effort", "page", "purging", "decoder", "contrib", "age", "django.contrib.sessions.middleware", "users", "session_dict", "backend", "self", "aitems", "people", "argument", "mac", "setdefault", "version", "filesystem", "@classmethod", "integer", "request.session['foo", "adelete_test_cookie", "aupdate", "environments", "pop", "request.session.update({'fav_color", "aget_expiry_date", "properties", "django.contrib.sessions.backends.db", "mysessions.custom_cached_db_backend", "comment", "policy", "secret_key_fallbacks", "delitem", "get_model_class", "name", "header", "size", "get_session_cookie_age", "python", "addition", "base_session", "logging", "chrome", "last_login", "edge", "guarantee", "avalues", "unicodedecodeerror", "sessions", "leakage", "user_id", "storage", "chance", "rule", "namespace", "speed", "request.session['fav_color", "aset_expiry", "true", "*", "framework", "requests", "post_comment", "operation", "write", "delete_test_cookie", "length", "sync_to_async", "/tmp", "backends.base", "key", "django.shortcuts", "request.session.pop('fav_color", "state", "dictionary", "django.core.signing", "permissions", "characters", "member_id", "browser", "session_expire_at_browser_close", "session_save_every_request", "backends.cached_db", "design", "cache", "django.contrib.auth.login", "control", "datetime", "writes", "setting", "order", "django.contrib.sessions", "basis", "documentation", "pk", "flush", "get_expiry_date", "migrate", "table", "customization", "convenience", "behavior", "php", "system", "ids", "risk", "files", "import", "bar", "information", "json", "off", "manipulation", "#", "decimal", "point", "session_key", "section", "authentication", "limitations", "¶", "web", "member", "server", "persistence", "format", "render", "example", "inheriting", "session", "session_cache_alias", "value", "tampering", "functions", "int", "good.example.com", "impact", "datetime.datetime(2005", "session_cookie_age", "primary", "save", "c", "subdomains", "sessionstore.create", "gotcha", "examples", "details", "deserialization", "override", "request.session", "object", "cookie", "httprequest", "fixation", "attributes", "asetdefault", "one", "sessionbase", "returns", "demonstration", "assignment", "store", "password", "basesessionmanager", "sequence", "api", "note", "post", "valueerror", "level", "django", "request.session.aset('fav_color", "message", "vulnerability", "clash", "field", "django.contrib.sessions.models", "strings", "integerfield", "credit", "session_engine", "request.session.get('fav_color", "digits", "=", "objects", "session_file_path", "defaults", "ability", "invalidation", "implementation", "instructions", "wrapper", "setitem", "interface", "tempfile.gettempdir", "activity", "datetimes", "aset_test_cookie", "expiration", "obj", "):", "cached_db", "apply", "akeys", "serialization", "cacheddbstore", "adelete", "time", "kgrwmqptj19hdxrox3vzzxjfawqncnayckkxcnmumtexy2zjodi2yj", "card", "exception", "middleware", "close", "eviction", "site", "expiry", "d", "replay", "manager", "problem", "bytes", "record", "load", "startproject", "removes", "custom", "methods", "side", "browsers", "keyword", "update", "none", "urls", "base", "process", "access", "command", "javascript", "implements", "timedelta", "convention", "account_id", "production", "decision", "seconds", "2b1189a188b44ad18c35e113ac6ceead", "classmethod", "applications", "request", "attacks", "engine", "test_cookie_worked", "get_session_store_class", "visitor", "attack", "designating", "thing", "session_cookie_secure", "\\xd9", "data", "resort", "theft", "create_model_instance", "django.contrib.sessions.base_session", "notes", "job", "trade", "response", "execution", "s", "keys", "configuration", "django.contrib.sessions.backends.signed_cookies", "aexists", "tools", "directory", "acreate", "backends", "module", "arguments", "practice", "session_data", "memory", "context", "purpose", "db", "security", "customsession", "models", "jsonserializer", "session_cookie_samesite", "importlib", "epoch", "caveats", "session_serializer", "expires_at", "row", "call", "website", "aget_expiry_age", "support", "types", "cache_key_prefix", "dbstore", "changes", "scenario", "false", "management", "request.session.set_expiry(300", "prefix", "_", "ascii", "encode", "hand", "aget", "values", "cases", "new", "times", "caches", "set_expiry", "guidelines", "attacker", "test", "underscore", "lifetime", "redis", "stores", "get_expiry_age", "location", "usage", "model", "character", "choice", "sessionmiddleware", "serializer", "letters", "purposes", "expire_date", "djangojsonencoder", "django_session", "django.contrib.auth.logout", "calls", "n’t", "clearsessions", "installed_apps", "aset", "case", "django.contrib.sessions.backends.cache", "class", "number", "return", "aflush", "attribute", "function", "string", "bit", "internet", "view", "memcached", "uses", "ahas_key", "user", "sessionstore", "file", "part", "loads(self", "abstractbasesession", "installation", "django.contrib.sessions.backends.cached_db", "get", "account", "exceptions", "new_comment", "technique", "thanks", "modification", "typeerror", "date", "functionality", "foo", "database", "atest_cookie_worked", "limit", "db_index", "instance", "engines", "overhead", "code", "integrity", "cls", "del", "inactivity", "freshness", "loops", "session_cookie_httponly"], "type": "documentation"},
{"title": "Middleware", "url": "https://docs.djangoproject.com/en/5.1/topics/http/middleware/", "content": "Middleware ¶ Middleware is a framework of hooks into Django’s request/response processing.\nIt’s a light, low-level “plugin” system for globally altering Django’s input\nor output. Each middleware component is responsible for doing some specific function. For\nexample, Django includes a middleware component, AuthenticationMiddleware , that\nassociates users with requests using sessions. This document explains how middleware works, how you activate middleware, and\nhow to write your own middleware. Django ships with some built-in middleware\nyou can use right out of the box. They’re documented in the built-in\nmiddleware reference . Writing your own middleware ¶ A middleware factory is a callable that takes a get_response callable and\nreturns a middleware. A middleware is a callable that takes a request and\nreturns a response, just like a view. A middleware can be written as a function that looks like this: def simple_middleware ( get_response ): # One-time configuration and initialization. def middleware ( request ): # Code to be executed for each request before # the view (and later middleware) are called. response = get_response ( request ) # Code to be executed for each request/response after # the view is called. return response return middleware Or it can be written as a class whose instances are callable, like this: class SimpleMiddleware : def __init__ ( self , get_response ): self . get_response = get_response # One-time configuration and initialization. def __call__ ( self , request ): # Code to be executed for each request before # the view (and later middleware) are called. response = self . get_response ( request ) # Code to be executed for each request/response after # the view is called. return response The get_response callable provided by Django might be the actual view (if\nthis is the last listed middleware) or it might be the next middleware in the\nchain. The current middleware doesn’t need to know or care what exactly it is,\njust that it represents whatever comes next. The above is a slight simplification – the get_response callable for the\nlast middleware in the chain won’t be the actual view but rather a wrapper\nmethod from the handler which takes care of applying view middleware , calling the view with appropriate URL arguments, and\napplying template-response and exception middleware. Middleware can either support only synchronous Python (the default), only\nasynchronous Python, or both. See Asynchronous support for details of how to\nadvertise what you support, and know what kind of request you are getting. Middleware can live anywhere on your Python path. __init__(get_response) ¶ Middleware factories must accept a get_response argument. You can also\ninitialize some global state for the middleware. Keep in mind a couple of\ncaveats: Django initializes your middleware with only the get_response argument,\nso you can’t define __init__() as requiring any other arguments. Unlike the __call__() method which is called once per request, __init__() is called only once , when the web server starts. Marking middleware as unused ¶ It’s sometimes useful to determine at startup time whether a piece of\nmiddleware should be used. In these cases, your middleware’s __init__() method may raise MiddlewareNotUsed . Django will\nthen remove that middleware from the middleware process and log a debug message\nto the django.request logger when DEBUG is True . Activating middleware ¶ To activate a middleware component, add it to the MIDDLEWARE list in\nyour Django settings. In MIDDLEWARE , each middleware component is represented by a string:\nthe full Python path to the middleware factory’s class or function name. For\nexample, here’s the default value created by django-admin startproject : MIDDLEWARE = [ \"django.middleware.security.SecurityMiddleware\" , \"django.contrib.sessions.middleware.SessionMiddleware\" , \"django.middleware.common.CommonMiddleware\" , \"django.middleware.csrf.CsrfViewMiddleware\" , \"django.contrib.auth.middleware.AuthenticationMiddleware\" , \"django.contrib.messages.middleware.MessageMiddleware\" , \"django.middleware.clickjacking.XFrameOptionsMiddleware\" , ] A Django installation doesn’t require any middleware — MIDDLEWARE can be empty, if you’d like — but it’s strongly suggested that you at least use CommonMiddleware . The order in MIDDLEWARE matters because a middleware can depend on\nother middleware. For instance, AuthenticationMiddleware stores the\nauthenticated user in the session; therefore, it must run after SessionMiddleware . See Middleware ordering for some common hints about ordering of Django\nmiddleware classes. Middleware order and layering ¶ During the request phase, before calling the view, Django applies middleware in\nthe order it’s defined in MIDDLEWARE , top-down. You can think of it like an onion: each middleware class is a “layer” that\nwraps the view, which is in the core of the onion. If the request passes\nthrough all the layers of the onion (each one calls get_response to pass\nthe request in to the next layer), all the way to the view at the core, the\nresponse will then pass through every layer (in reverse order) on the way back\nout. If one of the layers decides to short-circuit and return a response without\never calling its get_response , none of the layers of the onion inside that\nlayer (including the view) will see the request or the response. The response\nwill only return through the same layers that the request passed in through. Other middleware hooks ¶ Besides the basic request/response middleware pattern described earlier, you\ncan add three other special methods to class-based middleware: process_view() ¶ process_view ( request , view_func , view_args , view_kwargs ) ¶ request is an HttpRequest object. view_func is\nthe Python function that Django is about to use. (It’s the actual function\nobject, not the name of the function as a string.) view_args is a list of\npositional arguments that will be passed to the view, and view_kwargs is a\ndictionary of keyword arguments that will be passed to the view. Neither view_args nor view_kwargs include the first view argument\n( request ). process_view() is called just before Django calls the view. It should return either None or an HttpResponse object. If it returns None , Django will continue processing this request,\nexecuting any other process_view() middleware and, then, the appropriate\nview. If it returns an HttpResponse object, Django won’t\nbother calling the appropriate view; it’ll apply response middleware to that HttpResponse and return the result. Note Accessing request.POST inside\nmiddleware before the view runs or in process_view() will prevent any\nview running after the middleware from being able to modify the\nupload handlers for the request ,\nand should normally be avoided. The CsrfViewMiddleware class can be\nconsidered an exception, as it provides the csrf_exempt() and csrf_protect() decorators which allow\nviews to explicitly control at what point the CSRF validation should occur. process_exception() ¶ process_exception ( request , exception ) ¶ request is an HttpRequest object. exception is an Exception object raised by the view function. Django calls process_exception() when a view raises an exception. process_exception() should return either None or an HttpResponse object. If it returns an HttpResponse object, the template response and response\nmiddleware will be applied and the resulting response returned to the\nbrowser. Otherwise, default exception handling kicks in. Again, middleware are run in reverse order during the response phase, which\nincludes process_exception . If an exception middleware returns a response,\nthe process_exception methods of the middleware classes above that\nmiddleware won’t be called at all. process_template_response() ¶ process_template_response ( request , response ) ¶ request is an HttpRequest object. response is\nthe TemplateResponse object (or equivalent)\nreturned by a Django view or by a middleware. process_template_response() is called just after the view has finished\nexecuting, if the response instance has a render() method, indicating that\nit is a TemplateResponse or equivalent. It must return a response object that implements a render method. It could\nalter the given response by changing response.template_name and response.context_data , or it could create and return a brand-new TemplateResponse or equivalent. You don’t need to explicitly render responses – responses will be\nautomatically rendered once all template response middleware has been\ncalled. Middleware are run in reverse order during the response phase, which\nincludes process_template_response() . Dealing with streaming responses ¶ Unlike HttpResponse , StreamingHttpResponse does not have a content attribute. As a result, middleware can no longer assume that all responses\nwill have a content attribute. If they need access to the content, they\nmust test for streaming responses and adjust their behavior accordingly: if response . streaming : response . streaming_content = wrap_streaming_content ( response . streaming_content ) else : response . content = alter_content ( response . content ) Note streaming_content should be assumed to be too large to hold in memory.\nResponse middleware may wrap it in a new generator, but must not consume\nit. Wrapping is typically implemented as follows: def wrap_streaming_content ( content ): for chunk in content : yield alter_content ( chunk ) StreamingHttpResponse allows both synchronous and\nasynchronous iterators. The wrapping function must match. Check StreamingHttpResponse.is_async if your middleware needs to\nsupport both types of iterator. Exception handling ¶ Django automatically converts exceptions raised by the view or by middleware\ninto an appropriate HTTP response with an error status code. Certain\nexceptions are converted to 4xx status codes, while an unknown\nexception is converted to a 500 status code. This conversion takes place before and after each middleware (you can think of\nit as the thin film in between each layer of the onion), so that every\nmiddleware can always rely on getting some kind of HTTP response back from\ncalling its get_response callable. Middleware don’t need to worry about\nwrapping their call to get_response in a try/except and handling an\nexception that might have been raised by a later middleware or the view. Even\nif the very next middleware in the chain raises an Http404 exception, for example, your middleware won’t see\nthat exception; instead it will get an HttpResponse object with a status_code of 404. You can set DEBUG_PROPAGATE_EXCEPTIONS to True to skip this\nconversion and propagate exceptions upward. Asynchronous support ¶ Middleware can support any combination of synchronous and asynchronous\nrequests. Django will adapt requests to fit the middleware’s requirements if it\ncannot support both, but at a performance penalty. By default, Django assumes that your middleware is capable of handling only\nsynchronous requests. To change these assumptions, set the following attributes\non your middleware factory function or class: sync_capable is a boolean indicating if the middleware can handle\nsynchronous requests. Defaults to True . async_capable is a boolean indicating if the middleware can handle\nasynchronous requests. Defaults to False . If your middleware has both sync_capable = True and async_capable = True , then Django will pass it the request without\nconverting it. In this case, you can work out if your middleware will receive\nasync requests by checking if the get_response object you are passed is a\ncoroutine function, using asgiref.sync.iscoroutinefunction . The django.utils.decorators module contains sync_only_middleware() , async_only_middleware() , and sync_and_async_middleware() decorators that\nallow you to apply these flags to middleware factory functions. The returned callable must match the sync or async nature of the get_response method. If you have an asynchronous get_response , you must\nreturn a coroutine function ( async def ). process_view , process_template_response and process_exception methods, if they are provided, should also be adapted to match the sync/async\nmode. However, Django will individually adapt them as required if you do not,\nat an additional performance penalty. Here’s an example of how to create a middleware function that supports both: from asgiref.sync import iscoroutinefunction from django.utils.decorators import sync_and_async_middleware @sync_and_async_middleware def simple_middleware ( get_response ): # One-time configuration and initialization goes here. if iscoroutinefunction ( get_response ): async def middleware ( request ): # Do something here! response = await get_response ( request ) return response else : def middleware ( request ): # Do something here! response = get_response ( request ) return response return middleware Note If you declare a hybrid middleware that supports both synchronous and\nasynchronous calls, the kind of call you get may not match the underlying\nview. Django will optimize the middleware call stack to have as few\nsync/async transitions as possible. Thus, even if you are wrapping an async view, you may be called in sync\nmode if there is other, synchronous middleware between you and the view. When using an asynchronous class-based middleware, you must ensure that\ninstances are correctly marked as coroutine functions: from asgiref.sync import iscoroutinefunction , markcoroutinefunction class AsyncMiddleware : async_capable = True sync_capable = False def __init__ ( self , get_response ): self . get_response = get_response if iscoroutinefunction ( self . get_response ): markcoroutinefunction ( self ) async def __call__ ( self , request ): response = await self . get_response ( request ) # Some logic ... return response Upgrading pre-Django 1.10-style middleware ¶ class django.utils.deprecation. MiddlewareMixin ¶ Django provides django.utils.deprecation.MiddlewareMixin to ease creating\nmiddleware classes that are compatible with both MIDDLEWARE and the\nold MIDDLEWARE_CLASSES , and support synchronous and asynchronous requests.\nAll middleware classes included with Django are compatible with both settings. The mixin provides an __init__() method that requires a get_response argument and stores it in self.get_response . The __call__() method: Calls self.process_request(request) (if defined). Calls self.get_response(request) to get the response from later\nmiddleware and the view. Calls self.process_response(request, response) (if defined). Returns the response. If used with MIDDLEWARE_CLASSES , the __call__() method will\nnever be used; Django calls process_request() and process_response() directly. In most cases, inheriting from this mixin will be sufficient to make an\nold-style middleware compatible with the new system with sufficient\nbackwards-compatibility. The new short-circuiting semantics will be harmless or\neven beneficial to the existing middleware. In a few cases, a middleware class\nmay need some changes to adjust to the new semantics. These are the behavioral differences between using MIDDLEWARE and MIDDLEWARE_CLASSES : Under MIDDLEWARE_CLASSES , every middleware will always have its process_response method called, even if an earlier middleware\nshort-circuited by returning a response from its process_request method. Under MIDDLEWARE , middleware behaves more like an onion:\nthe layers that a response goes through on the way out are the same layers\nthat saw the request on the way in. If a middleware short-circuits, only\nthat middleware and the ones before it in MIDDLEWARE will see the\nresponse. Under MIDDLEWARE_CLASSES , process_exception is applied to\nexceptions raised from a middleware process_request method. Under MIDDLEWARE , process_exception applies only to exceptions\nraised from the view (or from the render method of a TemplateResponse ). Exceptions raised from\na middleware are converted to the appropriate HTTP response and then passed\nto the next middleware. Under MIDDLEWARE_CLASSES , if a process_response method raises\nan exception, the process_response methods of all earlier middleware are\nskipped and a 500 Internal Server Error HTTP response is always\nreturned (even if the exception raised was e.g. an Http404 ). Under MIDDLEWARE , an exception\nraised from a middleware will immediately be converted to the appropriate\nHTTP response, and then the next middleware in line will see that\nresponse. Middleware are never skipped due to a middleware raising an\nexception.", "keywords": ["state", "dictionary", "streaming_content", "csrf_exempt", "response.template_name", "sync_and_async_middleware", "wrapper", "asyncmiddleware", "callable", "chunk", "browser", "django.utils.decorators", "error", "hints", "differences", "line", "template", "logger", "url", "debug", "support", "httpresponse", "types", "nature", "order", "changes", "def", "-", "stack", "place", "style", "django.middleware.csrf", "settings", "false", "time", "onion", "exception", "classes", "process_exception", "middleware", "method", "starts", "semantics", "behavior", "system", "startup", "upload", "codes", "executing", "performance", "responses", "mode", "cases", "status", "process_template_response", "views", "iterator", "circuit", "accessing", "import", "film", "async", "transitions", "#", "result", "point", "compatibility", "output", "startproject", "way", "view_args", "¶", "default", "init", "matters", "self.get_response", "piece", "asgiref.sync.iscoroutinefunction", "web", "stores", "sync_only_middleware", "penalty", "methods", "input", "requirements", "middlewaremixin", "couple", "server", "none", "processing", "iterators", "sessionmiddleware", "process", "view_kwargs", "render", "kind", "access", "top", "mind", "example", "init__(get_response", "session", "users", "layering", "n’t", "calls", "component", "django.middleware.security", "streaminghttpresponse", "value", "functions", "process_view", "content", "self", "handlers", "case", "argument", "class", "simplemiddleware", "async_capable", "behaves", "short", "request", "indicating", "return", "factories", "chain", "assumptions", "get_response", "attribute", "ones", "function", "authenticationmiddleware", "care", "string", "iscoroutinefunction", "csrf_protect", "list", "details", "generator", "debug_propagate_exceptions", "middlewarenotused", "view", "django.utils.deprecation", "wrap_streaming_content", "circuits", "name", "object", "pattern", "messagemiddleware", "securitymiddleware", "user", "httprequest", "flags", "simple_middleware", "one", "attributes", "try", "returns", "installation", "down", "python", "combination", "core", "http404", "templateresponse", "sync", "instances", "phase", "conversion", "response", "alter_content", "handler", "initialization", "simplification", "configuration", "exceptions", "box", "note", "wrapping", "sessions", "internal", "brand", "path", "post", "level", "django", "mixin", "layers", "coroutine", "pre", "message", "django.middleware.common", "validation", "document", "true", "csrf", "framework", "module", "self.process_request(request", "arguments", "requests", "response.context_data", "http", "middleware_classes", "self.get_response(request", "decorators", "memory", "hooks", "process_response", "commonmiddleware", "logic", "async_only_middleware", "reference", "instance", "layer", "status_code", "code", "factory", "=", "kicks", "view_func", "caveats", "markcoroutinefunction", "defaults", "call", "streaming", "csrfviewmiddleware"], "type": "documentation"},
{"title": "Generic views", "url": "https://docs.djangoproject.com/en/5.1/topics/http/generic-views/", "content": "Generic views ¶ See Built-in class-based views API .", "keywords": ["class", "views", "api"], "type": "documentation"},
{"title": "Django shortcut functions", "url": "https://docs.djangoproject.com/en/5.1/topics/http/shortcuts/", "content": "Django shortcut functions ¶ The package django.shortcuts collects helper functions and classes that\n“span” multiple levels of MVC. In other words, these functions/classes\nintroduce controlled coupling for convenience’s sake. render() ¶ render ( request , template_name , context = None , content_type = None , status = None , using = None ) [source] ¶ Combines a given template with a given context dictionary and returns an HttpResponse object with that rendered text. Django does not provide a shortcut function which returns a TemplateResponse because the constructor\nof TemplateResponse offers the same level\nof convenience as render() . Required arguments ¶ request The request object used to generate this response. template_name The full name of a template to use or sequence of template names. If a\nsequence is given, the first template that exists will be used. See the template loading documentation for more\ninformation on how templates are found. Optional arguments ¶ context A dictionary of values to add to the template context. By default, this\nis an empty dictionary. If a value in the dictionary is callable, the\nview will call it just before rendering the template. content_type The MIME type to use for the resulting document. Defaults to 'text/html' . status The status code for the response. Defaults to 200 . using The NAME of a template engine to use for\nloading the template. Example ¶ The following example renders the template myapp/index.html with the\nMIME type application/xhtml+xml : from django.shortcuts import render def my_view ( request ): # View code here... return render ( request , \"myapp/index.html\" , { \"foo\" : \"bar\" , }, content_type = \"application/xhtml+xml\" , ) This example is equivalent to: from django.http import HttpResponse from django.template import loader def my_view ( request ): # View code here... t = loader . get_template ( \"myapp/index.html\" ) c = { \"foo\" : \"bar\" } return HttpResponse ( t . render ( c , request ), content_type = \"application/xhtml+xml\" ) redirect() ¶ redirect ( to , * args , permanent = False , ** kwargs ) [source] ¶ Returns an HttpResponseRedirect to the appropriate URL\nfor the arguments passed. The arguments could be: A model: the model’s get_absolute_url() function will be called. A view name, possibly with arguments: reverse() will be\nused to reverse-resolve the name. An absolute or relative URL, which will be used as-is for the redirect\nlocation. By default issues a temporary redirect; pass permanent=True to issue a\npermanent redirect. Examples ¶ You can use the redirect() function in a number of ways. By passing some object; that object’s get_absolute_url() method will be called\nto figure out the redirect URL: from django.shortcuts import redirect def my_view ( request ): ... obj = MyModel . objects . get ( ... ) return redirect ( obj ) By passing the name of a view and optionally some positional or\nkeyword arguments; the URL will be reverse resolved using the reverse() method: def my_view ( request ): ... return redirect ( \"some-view-name\" , foo = \"bar\" ) By passing a hardcoded URL to redirect to: def my_view ( request ): ... return redirect ( \"/some/url/\" ) This also works with full URLs: def my_view ( request ): ... return redirect ( \"https://example.com/\" ) By default, redirect() returns a temporary redirect. All of the above\nforms accept a permanent argument; if set to True a permanent redirect\nwill be returned: def my_view ( request ): ... obj = MyModel . objects . get ( ... ) return redirect ( obj , permanent = True ) get_object_or_404() ¶ get_object_or_404 ( klass , * args , ** kwargs ) [source] ¶ aget_object_or_404 ( klass , * args , ** kwargs ) ¶ Asynchronous version : aget_object_or_404() Calls get() on a given model\nmanager, but it raises Http404 instead of the model’s DoesNotExist exception. Arguments ¶ klass A Model class,\na Manager ,\nor a QuerySet instance from which to get\nthe object. *args Q objects . **kwargs Lookup parameters, which should be in the format accepted by get() and filter() . Example ¶ The following example gets the object with the primary key of 1 from MyModel : from django.shortcuts import get_object_or_404 def my_view ( request ): obj = get_object_or_404 ( MyModel , pk = 1 ) This example is equivalent to: from django.http import Http404 def my_view ( request ): try : obj = MyModel . objects . get ( pk = 1 ) except MyModel . DoesNotExist : raise Http404 ( \"No MyModel matches the given query.\" ) The most common use case is to pass a Model , as\nshown above. However, you can also pass a QuerySet instance: queryset = Book . objects . filter ( title__startswith = \"M\" ) get_object_or_404 ( queryset , pk = 1 ) The above example is a bit contrived since it’s equivalent to doing: get_object_or_404 ( Book , title__startswith = \"M\" , pk = 1 ) but it can be useful if you are passed the queryset variable from somewhere\nelse. Finally, you can also use a Manager . This is useful\nfor example if you have a custom manager : get_object_or_404 ( Book . dahl_objects , title = \"Matilda\" ) You can also use related managers : author = Author . objects . get ( name = \"Roald Dahl\" ) get_object_or_404 ( author . book_set , title = \"Matilda\" ) Note: As with get() , a MultipleObjectsReturned exception\nwill be raised if more than one object is found. Changed in Django 5.0: aget_object_or_404() function was added. get_list_or_404() ¶ get_list_or_404 ( klass , * args , ** kwargs ) [source] ¶ aget_list_or_404 ( klass , * args , ** kwargs ) ¶ Asynchronous version : aget_list_or_404() Returns the result of filter() on\na given model manager cast to a list, raising Http404 if the resulting list is empty. Arguments ¶ klass A Model , Manager or QuerySet instance from which to get the\nlist. *args Q objects . **kwargs Lookup parameters, which should be in the format accepted by get() and filter() . Example ¶ The following example gets all published objects from MyModel : from django.shortcuts import get_list_or_404 def my_view ( request ): my_objects = get_list_or_404 ( MyModel , published = True ) This example is equivalent to: from django.http import Http404 def my_view ( request ): my_objects = list ( MyModel . objects . filter ( published = True )) if not my_objects : raise Http404 ( \"No MyModel matches the given query.\" ) Changed in Django 5.0: aget_list_or_404() function was added.", "keywords": ["dictionary", "roald", "mvc", "doesnotexist", "variable", "type", "template", "httpresponse", "url", "obj", "book", "templates", "documentation", "def", "filter", "pk", "m", "application", "exception", "classes", "loader", "q", "method", "queryset", "convenience", "args", "values", "query", "use", "manager", "status", "import", "bar", "ways", "information", "#", "result", "get_absolute_url", "¶", "default", "https://example.com/", "mime", "custom", "django.template", "location", "model", "none", "urls", "format", "package", "render", "span", "example", "calls", "content_type", "functions", "value", "dahl_objects", "mymodel", "source", "case", "argument", "class", "dahl", "t", "number", "words", "request", "redirect", "version", "c", "html", "engine", "klass", "function", "examples", "list", "url/", "bit", "title", "a", "my_objects", "view", "get_object_or_404", "my_view", "name", "object", "sake", "coupling", "returns", "httpresponseredirect", "http404", "templateresponse", "get", "response", "shortcut", "myapp", "constructor", "kwargs", "sequence", "aget_object_or_404", "aget_list_or_404", "lookup", "note", "get_template", "author", "level", "names", "django", "managers", "index.html", "true", "document", "*", "text", "arguments", "xhtml+xml", "foo", "get_list_or_404", "reverse", "no", "context", "matilda", "forms", "instance", "=", "code", "objects", "django.shortcuts", "key", "levels", "parameters", "defaults", "issues", "helper"], "type": "documentation"},
{"title": "File Uploads", "url": "https://docs.djangoproject.com/en/5.1/topics/http/file-uploads/", "content": "File Uploads ¶ When Django handles a file upload, the file data ends up placed in request.FILES (for more on the request object see the documentation for request and response objects ). This document explains how files are stored on disk\nand in memory, and how to customize the default behavior. Warning There are security risks if you are accepting uploaded content from\nuntrusted users! See the security guide’s topic on User-uploaded content for mitigation details. Basic file uploads ¶ Consider a form containing a FileField : forms.py ¶ from django import forms class UploadFileForm ( forms . Form ): title = forms . CharField ( max_length = 50 ) file = forms . FileField () A view handling this form will receive the file data in request.FILES , which is a dictionary\ncontaining a key for each FileField (or ImageField , or other FileField subclass) in the form. So the data from the above form would\nbe accessible as request.FILES['file'] . Note that request.FILES will only\ncontain data if the request method was POST , at least one file field was\nactually posted, and the <form> that posted the request has the attribute enctype=\"multipart/form-data\" . Otherwise, request.FILES will be empty. Most of the time, you’ll pass the file data from request into the form as\ndescribed in Binding uploaded files to a form . This would look something like: views.py ¶ from django.http import HttpResponseRedirect from django.shortcuts import render from .forms import UploadFileForm # Imaginary function to handle an uploaded file. from somewhere import handle_uploaded_file def upload_file ( request ): if request . method == \"POST\" : form = UploadFileForm ( request . POST , request . FILES ) if form . is_valid (): handle_uploaded_file ( request . FILES [ \"file\" ]) return HttpResponseRedirect ( \"/success/url/\" ) else : form = UploadFileForm () return render ( request , \"upload.html\" , { \"form\" : form }) Notice that we have to pass request.FILES into the form’s constructor; this is how file data gets bound into a form. Here’s a common way you might handle an uploaded file: def handle_uploaded_file ( f ): with open ( \"some/file/name.txt\" , \"wb+\" ) as destination : for chunk in f . chunks (): destination . write ( chunk ) Looping over UploadedFile.chunks() instead of using read() ensures that\nlarge files don’t overwhelm your system’s memory. There are a few other methods and attributes available on UploadedFile objects; see UploadedFile for a complete reference. Handling uploaded files with a model ¶ If you’re saving a file on a Model with a FileField , using a ModelForm makes this process much easier. The file object will be saved to the location\nspecified by the upload_to argument of the\ncorresponding FileField when calling form.save() : from django.http import HttpResponseRedirect from django.shortcuts import render from .forms import ModelFormWithFileField def upload_file ( request ): if request . method == \"POST\" : form = ModelFormWithFileField ( request . POST , request . FILES ) if form . is_valid (): # file is saved form . save () return HttpResponseRedirect ( \"/success/url/\" ) else : form = ModelFormWithFileField () return render ( request , \"upload.html\" , { \"form\" : form }) If you are constructing an object manually, you can assign the file object from request.FILES to the file field in the\nmodel: from django.http import HttpResponseRedirect from django.shortcuts import render from .forms import UploadFileForm from .models import ModelWithFileField def upload_file ( request ): if request . method == \"POST\" : form = UploadFileForm ( request . POST , request . FILES ) if form . is_valid (): instance = ModelWithFileField ( file_field = request . FILES [ \"file\" ]) instance . save () return HttpResponseRedirect ( \"/success/url/\" ) else : form = UploadFileForm () return render ( request , \"upload.html\" , { \"form\" : form }) If you are constructing an object manually outside of a request, you can assign\na File like object to the FileField : from django.core.management.base import BaseCommand from django.core.files.base import ContentFile class MyCommand ( BaseCommand ): def handle ( self , * args , ** options ): content_file = ContentFile ( b \"Hello world!\" , name = \"hello-world.txt\" ) instance = ModelWithFileField ( file_field = content_file ) instance . save () Uploading multiple files ¶ If you want to upload multiple files using one form field, create a subclass\nof the field’s widget and set its allow_multiple_selected class attribute\nto True . In order for such files to be all validated by your form (and have the value of\nthe field include them all), you will also have to subclass FileField . See\nbelow for an example. Multiple file field Django is likely to have a proper multiple file field support at some point\nin the future. forms.py ¶ from django import forms class MultipleFileInput ( forms . ClearableFileInput ): allow_multiple_selected = True class MultipleFileField ( forms . FileField ): def __init__ ( self , * args , ** kwargs ): kwargs . setdefault ( \"widget\" , MultipleFileInput ()) super () . __init__ ( * args , ** kwargs ) def clean ( self , data , initial = None ): single_file_clean = super () . clean if isinstance ( data , ( list , tuple )): result = [ single_file_clean ( d , initial ) for d in data ] else : result = [ single_file_clean ( data , initial )] return result class FileFieldForm ( forms . Form ): file_field = MultipleFileField () Then override the form_valid() method of your FormView subclass to handle multiple file\nuploads: views.py ¶ from django.views.generic.edit import FormView from .forms import FileFieldForm class FileFieldFormView ( FormView ): form_class = FileFieldForm template_name = \"upload.html\" # Replace with your template. success_url = \"...\" # Replace with your URL or reverse(). def form_valid ( self , form ): files = form . cleaned_data [ \"file_field\" ] for f in files : ... # Do something with each file. return super () . form_valid ( form ) Warning This will allow you to handle multiple files at the form level only. Be\naware that you cannot use it to put multiple files on a single model\ninstance (in a single field), for example, even if the custom widget is used\nwith a form field related to a model FileField . Upload Handlers ¶ When a user uploads a file, Django passes off the file data to an upload\nhandler – a small class that handles file data as it gets uploaded. Upload\nhandlers are initially defined in the FILE_UPLOAD_HANDLERS setting,\nwhich defaults to: [ \"django.core.files.uploadhandler.MemoryFileUploadHandler\" , \"django.core.files.uploadhandler.TemporaryFileUploadHandler\" , ] Together MemoryFileUploadHandler and TemporaryFileUploadHandler provide Django’s default file upload\nbehavior of reading small files into memory and large ones onto disk. You can write custom handlers that customize how Django handles files. You\ncould, for example, use custom handlers to enforce user-level quotas, compress\ndata on the fly, render progress bars, and even send data to another storage\nlocation directly without storing it locally. See Writing custom upload handlers for details on how you can customize or completely replace upload behavior. Where uploaded data is stored ¶ Before you save uploaded files, the data needs to be stored somewhere. By default, if an uploaded file is smaller than 2.5 megabytes, Django will hold\nthe entire contents of the upload in memory. This means that saving the file\ninvolves only a read from memory and a write to disk and thus is very fast. However, if an uploaded file is too large, Django will write the uploaded file\nto a temporary file stored in your system’s temporary directory. On a Unix-like\nplatform this means you can expect Django to generate a file called something\nlike /tmp/tmpzfp6I6.upload . If an upload is large enough, you can watch this\nfile grow in size as Django streams the data onto disk. These specifics – 2.5 megabytes; /tmp ; etc. – are “reasonable defaults”\nwhich can be customized as described in the next section. Changing upload handler behavior ¶ There are a few settings which control Django’s file upload behavior. See File Upload Settings for details. Modifying upload handlers on the fly ¶ Sometimes particular views require different upload behavior. In these cases,\nyou can override upload handlers on a per-request basis by modifying request.upload_handlers . By default, this list will contain the upload\nhandlers given by FILE_UPLOAD_HANDLERS , but you can modify the list\nas you would any other list. For instance, suppose you’ve written a ProgressBarUploadHandler that\nprovides feedback on upload progress to some sort of AJAX widget. You’d add this\nhandler to your upload handlers like this: request . upload_handlers . insert ( 0 , ProgressBarUploadHandler ( request )) You’d probably want to use list.insert() in this case (instead of append() ) because a progress bar handler would need to run before any\nother handlers. Remember, the upload handlers are processed in order. If you want to replace the upload handlers completely, you can assign a new\nlist: request . upload_handlers = [ ProgressBarUploadHandler ( request )] Note You can only modify upload handlers before accessing request.POST or request.FILES – it doesn’t make sense to\nchange upload handlers after upload handling has already\nstarted. If you try to modify request.upload_handlers after\nreading from request.POST or request.FILES Django will\nthrow an error. Thus, you should always modify uploading handlers as early in your view as\npossible. Also, request.POST is accessed by CsrfViewMiddleware which is enabled by\ndefault. This means you will need to use csrf_exempt() on your view to allow you\nto change the upload handlers.  You will then need to use csrf_protect() on the function that\nactually processes the request.  Note that this means that the handlers may\nstart receiving the file upload before the CSRF checks have been done.\nExample code: from django.views.decorators.csrf import csrf_exempt , csrf_protect @csrf_exempt def upload_file_view ( request ): request . upload_handlers . insert ( 0 , ProgressBarUploadHandler ( request )) return _upload_file_view ( request ) @csrf_protect def _upload_file_view ( request ): # Process request ... If you are using a class-based view, you will need to use csrf_exempt() on its dispatch() method and csrf_protect() on the method that\nactually processes the request. Example code: from django.utils.decorators import method_decorator from django.views import View from django.views.decorators.csrf import csrf_exempt , csrf_protect @method_decorator ( csrf_exempt , name = \"dispatch\" ) class UploadFileView ( View ): def setup ( self , request , * args , ** kwargs ): request . upload_handlers . insert ( 0 , ProgressBarUploadHandler ( request )) super () . setup ( request , * args , ** kwargs ) @method_decorator ( csrf_protect ) def post ( self , request , * args , ** kwargs ): # Process request ...", "keywords": ["dictionary", "disk", "csrf_exempt", "uploadedfile", "contentfile", "chunk", "multiplefileinput", "django.utils.decorators", "error", "template", "specifics", "url", "allow_multiple_selected", "support", "upload_handlers", "clearablefileinput", "destination", "mycommand", "multiplefilefield", "setting", "handling", "order", "basis", "documentation", "def", ".forms", "uploads", "django.core.files.uploadhandler", "imaginary", "settings", "sense", "time", "single_file_clean", "filefield", "dispatch", "bars", "method", "imagefield", "feedback", "form_class", "args", "behavior", "system", "method_decorator", "upload", "views.py", "d", "files", "cases", "list.insert", "wb+", "import", "views", "bar", "content_file", "sort", "filefieldform", "topic", "#", "result", "point", "quotas", "handle", "way", "section", "¶", "default", "init", "compress", "custom", "f", "methods", "location", "hello-world.txt", "fly", "model", "max_length", "none", "upload_file_view", "modifying", "process", "render", "tmpzfp6i6.upload", "request.upload_handlers", "isinstance", "example", "checks", "users", "mitigation", "enctype=\"multipart", "guide", "handle_uploaded_file", "formview", "value", "modelformwithfilefield", "content", "self", "handlers", "unix", "case", "argument", "class", "setdefault", "request", "tuple", "@method_decorator", "return", "platform", "file_field", "progress", "upload.html", "attribute", "ones", "function", "future", "csrf_protect", "list", "details", "url/", "title", "django.views", "data", "widget", "setup", "view", "modelwithfilefield", "form", "name", "object", "options", "user", "uploadfileform", "file", "read", "world", "attributes", "size", "risks", "httpresponseredirect", "charfield", "temporaryfileuploadhandler", "response", "handler", "constructor", "django.views.generic.edit", "template_name", "kwargs", "append", "uploadfileview", "subclass", "form.save", "progressbaruploadhandler", "insert", "storage", "post", "level", "django", "directory", "true", "document", "*", "csrf", "field", "is_valid", "form_valid", "contents", "cleaned_data", "modelform", "reverse", "memory", "megabytes", "basecommand", "forms", "reference", "instance", "security", "write", "=", "code", "file_upload_handlers", "/tmp", "objects", "key", "django.shortcuts", "defaults", ".models", "chunks", "csrfviewmiddleware"], "type": "documentation"},
{"title": "View decorators", "url": "https://docs.djangoproject.com/en/5.1/topics/http/decorators/", "content": "View decorators ¶ Django provides several decorators that can be applied to views to support\nvarious HTTP features. See Decorating the class for how to use these decorators with\nclass-based views. Allowed HTTP methods ¶ The decorators in django.views.decorators.http can be used to restrict\naccess to views based on the request method. These decorators will return\na django.http.HttpResponseNotAllowed if the conditions are not met. require_http_methods ( request_method_list ) [source] ¶ Decorator to require that a view only accepts particular request\nmethods. Usage: from django.views.decorators.http import require_http_methods @require_http_methods ([ \"GET\" , \"POST\" ]) def my_view ( request ): # I can assume now that only GET or POST requests make it this far # ... pass Note that request methods should be in uppercase. Changed in Django 5.0: Support for wrapping asynchronous view functions was added. require_GET () ¶ Decorator to require that a view only accepts the GET method. Changed in Django 5.0: Support for wrapping asynchronous view functions was added. require_POST () ¶ Decorator to require that a view only accepts the POST method. Changed in Django 5.0: Support for wrapping asynchronous view functions was added. require_safe () ¶ Decorator to require that a view only accepts the GET and HEAD methods.\nThese methods are commonly considered “safe” because they should not have\nthe significance of taking an action other than retrieving the requested\nresource. Note Web servers should automatically strip the content of responses to HEAD\nrequests while leaving the headers unchanged, so you may handle HEAD\nrequests exactly like GET requests in your views. Since some software,\nsuch as link checkers, rely on HEAD requests, you might prefer\nusing require_safe instead of require_GET . Changed in Django 5.0: Support for wrapping asynchronous view functions was added. Conditional view processing ¶ The following decorators in django.views.decorators.http can be used to\ncontrol caching behavior on particular views. condition ( etag_func = None , last_modified_func = None ) [source] ¶ etag ( etag_func ) [source] ¶ last_modified ( last_modified_func ) [source] ¶ These decorators can be used to generate ETag and Last-Modified headers; see conditional view processing . Changed in Django 5.0: Support for wrapping asynchronous view functions was added. GZip compression ¶ The decorators in django.views.decorators.gzip control content\ncompression on a per-view basis. gzip_page () ¶ This decorator compresses content if the browser allows gzip compression.\nIt sets the Vary header accordingly, so that caches will base their\nstorage on the Accept-Encoding header. Changed in Django 5.0: Support for wrapping asynchronous view functions was added. Vary headers ¶ The decorators in django.views.decorators.vary can be used to control\ncaching based on specific request headers. vary_on_cookie ( func ) ¶ Changed in Django 5.0: Support for wrapping asynchronous view functions was added. vary_on_headers ( * headers ) [source] ¶ The Vary header defines which request headers a cache mechanism should take\ninto account when building its cache key. See using vary headers . Changed in Django 5.0: Support for wrapping asynchronous view functions was added. Caching ¶ The decorators in django.views.decorators.cache control server and\nclient-side caching. cache_control ( ** kwargs ) [source] ¶ This decorator patches the response’s Cache-Control header by adding\nall of the keyword arguments to it. See patch_cache_control() for the details of the\ntransformation. Changed in Django 5.0: Support for wrapping asynchronous view functions was added. never_cache ( view_func ) [source] ¶ This decorator adds an Expires header to the current date/time. This decorator adds a Cache-Control: max-age=0, no-cache, no-store, must-revalidate, private header to a response to indicate that a page\nshould never be cached. Each header is only added if it isn’t already set. Changed in Django 5.0: Support for wrapping asynchronous view functions was added. Common ¶ The decorators in django.views.decorators.common allow per-view\ncustomization of CommonMiddleware behavior. no_append_slash () [source] ¶ This decorator allows individual views to be excluded from APPEND_SLASH URL normalization. Changed in Django 5.0: Support for wrapping asynchronous view functions was added.", "keywords": ["software", "etag_func", "browser", "accept", "compression", "url", "support", "cache", "control", "gzip_page", "basis", "-", "servers", "time", "method", "customization", "behavior", "responses", "views", "import", "encoding", "django.views.decorators.common", "caches", "condition", "#", "¶", "resource", "decorator", "web", "methods", "client", "require_http_methods", "side", "keyword", "usage", "server", "none", "page", "etag", "processing", "expires", "vary", "django.views.decorators.gzip", "vary_on_cookie", "access", "age=0", "functions", "content", "caching", "source", "@require_http_methods", "class", "gzip", "request", "action", "transformation", "uppercase", "details", "vary_on_headers", "view", "my_view", "header", "patch_cache_control", "httpresponsenotallowed", "last_modified_func", "link", "get", "account", "response", "mechanism", "store", "kwargs", "defines", "note", "storage", "post", "conditions", "django", "*", "date", "require_safe", "max", "normalization", "arguments", "head", "requests", "django.views.decorators.cache", "http", "func", "decorators", "django.http", "headers", "commonmiddleware", "features", "=", "view_func", "significance", "key", "checkers", "django.views.decorators.http"], "type": "documentation"},
{"title": "Writing views", "url": "https://docs.djangoproject.com/en/5.1/topics/http/views/", "content": "Writing views ¶ A view function, or view for short, is a Python function that takes a\nweb request and returns a web response. This response can be the HTML contents\nof a web page, or a redirect, or a 404 error, or an XML document, or an image .\n. . or anything, really. The view itself contains whatever arbitrary logic is\nnecessary to return that response. This code can live anywhere you want, as long\nas it’s on your Python path. There’s no other requirement–no “magic,” so to\nspeak. For the sake of putting the code somewhere , the convention is to\nput views in a file called views.py , placed in your project or\napplication directory. A simple view ¶ Here’s a view that returns the current date and time, as an HTML document: from django.http import HttpResponse import datetime def current_datetime ( request ): now = datetime . datetime . now () html = '<html lang=\"en\"><body>It is now %s .</body></html>' % now return HttpResponse ( html ) Let’s step through this code one line at a time: First, we import the class HttpResponse from the django.http module, along with Python’s datetime library. Next, we define a function called current_datetime . This is the view\nfunction. Each view function takes an HttpRequest object as its first parameter, which is typically named request . Note that the name of the view function doesn’t matter; it doesn’t have to\nbe named in a certain way in order for Django to recognize it. We’re\ncalling it current_datetime here, because that name clearly indicates\nwhat it does. The view returns an HttpResponse object that\ncontains the generated response. Each view function is responsible for\nreturning an HttpResponse object. (There are\nexceptions, but we’ll get to those later.) Django’s Time Zone Django includes a TIME_ZONE setting that defaults to America/Chicago . This probably isn’t where you live, so you might want\nto change it in your settings file. Mapping URLs to views ¶ So, to recap, this view function returns an HTML page that includes the current\ndate and time. To display this view at a particular URL, you’ll need to create a URLconf ; see URL dispatcher for instructions. Returning errors ¶ Django provides help for returning HTTP error codes. There are subclasses of HttpResponse for a number of common HTTP status codes\nother than 200 (which means “OK” ). You can find the full list of available\nsubclasses in the request/response documentation. Return an instance of one of those subclasses instead of a\nnormal HttpResponse in order to signify an error. For\nexample: from django.http import HttpResponse , HttpResponseNotFound def my_view ( request ): # ... if foo : return HttpResponseNotFound ( \"<h1>Page not found</h1>\" ) else : return HttpResponse ( \"<h1>Page was found</h1>\" ) There isn’t a specialized subclass for every possible HTTP response code,\nsince many of them aren’t going to be that common. However, as documented in\nthe HttpResponse documentation, you can also pass the\nHTTP status code into the constructor for HttpResponse to create a return class for any status code you like. For example: from django.http import HttpResponse def my_view ( request ): # ... # Return a \"created\" (201) response code. return HttpResponse ( status = 201 ) Because 404 errors are by far the most common HTTP error, there’s an easier way\nto handle those errors. The Http404 exception ¶ class django.http. Http404 ¶ When you return an error such as HttpResponseNotFound ,\nyou’re responsible for defining the HTML of the resulting error page: return HttpResponseNotFound ( \"<h1>Page not found</h1>\" ) For convenience, and because it’s a good idea to have a consistent 404 error page\nacross your site, Django provides an Http404 exception. If you raise Http404 at any point in a view function, Django will catch it and return the\nstandard error page for your application, along with an HTTP error code 404. Example usage: from django.http import Http404 from django.shortcuts import render from polls.models import Poll def detail ( request , poll_id ): try : p = Poll . objects . get ( pk = poll_id ) except Poll . DoesNotExist : raise Http404 ( \"Poll does not exist\" ) return render ( request , \"polls/detail.html\" , { \"poll\" : p }) In order to show customized HTML when Django returns a 404, you can create an\nHTML template named 404.html and place it in the top level of your\ntemplate tree. This template will then be served when DEBUG is set\nto False . When DEBUG is True , you can provide a message to Http404 and\nit will appear in the standard 404 debug template. Use these messages for\ndebugging purposes; they generally aren’t suitable for use in a production 404\ntemplate. Customizing error views ¶ The default error views in Django should suffice for most web applications,\nbut can easily be overridden if you need any custom behavior. Specify the\nhandlers as seen below in your URLconf (setting them anywhere else will have no\neffect). The page_not_found() view is overridden by handler404 : handler404 = \"mysite.views.my_custom_page_not_found_view\" The server_error() view is overridden by handler500 : handler500 = \"mysite.views.my_custom_error_view\" The permission_denied() view is overridden by handler403 : handler403 = \"mysite.views.my_custom_permission_denied_view\" The bad_request() view is overridden by handler400 : handler400 = \"mysite.views.my_custom_bad_request_view\" See also Use the CSRF_FAILURE_VIEW setting to override the CSRF error\nview. Testing custom error views ¶ To test the response of a custom error handler, raise the appropriate exception\nin a test view. For example: from django.core.exceptions import PermissionDenied from django.http import HttpResponse from django.test import SimpleTestCase , override_settings from django.urls import path def response_error_handler ( request , exception = None ): return HttpResponse ( \"Error handler content\" , status = 403 ) def permission_denied_view ( request ): raise PermissionDenied urlpatterns = [ path ( \"403/\" , permission_denied_view ), ] handler403 = response_error_handler # ROOT_URLCONF must specify the module that contains handler403 = ... @override_settings ( ROOT_URLCONF = __name__ ) class CustomErrorHandlerTests ( SimpleTestCase ): def test_handler_renders_template_response ( self ): response = self . client . get ( \"/403/\" ) # Make assertions on the response here. For example: self . assertContains ( response , \"Error handler content\" , status_code = 403 ) Async views ¶ As well as being synchronous functions, views can also be asynchronous\n(“async”) functions, normally defined using Python’s async def syntax.\nDjango will automatically detect these and run them in an async context.\nHowever, you will need to use an async server based on ASGI to get their\nperformance benefits. Here’s an example of an async view: import datetime from django.http import HttpResponse async def current_datetime ( request ): now = datetime . datetime . now () html = '<html lang=\"en\"><body>It is now %s .</body></html>' % now return HttpResponse ( html ) You can read more about Django’s async support, and how to best use async\nviews, in Asynchronous support .", "keywords": ["urlconf", "django.core.exceptions", "instructions", "doesnotexist", "error", "line", "template", "httpresponse", "url", "image", "debug", "support", "datetime", "%", "setting", "p", "order", "bad_request", "documentation", "def", "settings", "help", "pk", "false", "time", "application", "exception", "server_error", "convenience", "requirement", "behavior", "codes", "site", "performance", "use", "status", "views", "import", "messages", "@override_settings", "'", "subclasses", "test_handler_renders_template_response", "project", "response_error_handler", "async", "mysite.views.my_custom_bad_request_view", "#", "america", "point", "test", "way", "idea", "¶", "default", "recap", "custom", "web", "client", "usage", "handler500", "server", "magic", "page", "none", "urls", "render", "purposes", "polls.models", "assertions", "example", ">", "n’t", "httpresponsenotfound", "handler400", "tree", "convention", "functions", "production", "content", "self", "handlers", "the", "class", "number", "xml", "mysite.views.my_custom_page_not_found_view", "applications", "request", "redirect", "return", "found</h1", "html", "benefits", "mapping", "handler404", "function", "list", "customerrorhandlertests", "page_not_found", "polls", "view", "my_view", "name", "object", "current_datetime", "poll", "mysite.views.my_custom_error_view", "sake", "httprequest", "dispatcher", "file", "library", "permissiondenied", "errors", "lang=\"en\"><body", "python", "http404", "403/", "404.html", "response", "handler", "constructor", "subclass", "exceptions", "permission_denied_view", "path", "level", "django", "mysite.views.my_custom_permission_denied_view", "poll_id", "directory", "message", "h1", "parameter", "document", "simpletestcase", "syntax", "date", "csrf", "asgi", "module", "contents", "foo", "http", "context", "django.http", "assertcontains", "django.urls", "logic", "effect", "instance", "status_code", "code", "=", "detail", "objects", "django.shortcuts", "handler403", "detail.html", "defaults", "chicago", "root_urlconf", "zone"], "type": "documentation"},
{"title": "URL dispatcher", "url": "https://docs.djangoproject.com/en/5.1/topics/http/urls/", "content": "URL dispatcher ¶ A clean, elegant URL scheme is an important detail in a high-quality web\napplication. Django lets you design URLs however you want, with no framework\nlimitations. See Cool URIs don’t change , by World Wide Web creator Tim Berners-Lee, for\nexcellent arguments on why URLs should be clean and usable. Overview ¶ To design URLs for an app, you create a Python module informally called a URLconf (URL configuration). This module is pure Python code and is a\nmapping between URL path expressions to Python functions (your views). This mapping can be as short or as long as needed. It can reference other\nmappings. And, because it’s pure Python code, it can be constructed\ndynamically. Django also provides a way to translate URLs according to the active\nlanguage. See the internationalization documentation for more information. How Django processes a request ¶ When a user requests a page from your Django-powered site, this is the\nalgorithm the system follows to determine which Python code to execute: Django determines the root URLconf module to use. Ordinarily,\nthis is the value of the ROOT_URLCONF setting, but if the incoming HttpRequest object has a urlconf attribute (set by middleware), its value will be used in place of the ROOT_URLCONF setting. Django loads that Python module and looks for the variable urlpatterns . This should be a sequence of django.urls.path() and/or django.urls.re_path() instances. Django runs through each URL pattern, in order, and stops at the first\none that matches the requested URL, matching against path_info . Once one of the URL patterns matches, Django imports and calls the given\nview, which is a Python function (or a class-based view ). The view gets passed the following\narguments: An instance of HttpRequest . If the matched URL pattern contained no named groups, then the\nmatches from the regular expression are provided as positional arguments. The keyword arguments are made up of any named parts matched by the\npath expression that are provided, overridden by any arguments specified\nin the optional kwargs argument to django.urls.path() or django.urls.re_path() . If no URL pattern matches, or if an exception is raised during any\npoint in this process, Django invokes an appropriate\nerror-handling view. See Error handling below. Example ¶ Here’s a sample URLconf: from django.urls import path from . import views urlpatterns = [ path ( \"articles/2003/\" , views . special_case_2003 ), path ( \"articles/<int:year>/\" , views . year_archive ), path ( \"articles/<int:year>/<int:month>/\" , views . month_archive ), path ( \"articles/<int:year>/<int:month>/<slug:slug>/\" , views . article_detail ), ] Notes: To capture a value from the URL, use angle brackets. Captured values can optionally include a converter type. For example, use <int:name> to capture an integer parameter. If a converter isn’t included,\nany string, excluding a / character, is matched. There’s no need to add a leading slash, because every URL has that. For\nexample, it’s articles , not /articles . Example requests: A request to /articles/2005/03/ would match the third entry in the\nlist. Django would call the function views.month_archive(request, year=2005, month=3) . /articles/2003/ would match the first pattern in the list, not the\nsecond one, because the patterns are tested in order, and the first one\nis the first test to pass. Feel free to exploit the ordering to insert\nspecial cases like this. Here, Django would call the function views.special_case_2003(request) /articles/2003 would not match any of these patterns, because each\npattern requires that the URL end with a slash. /articles/2003/03/building-a-django-site/ would match the final\npattern. Django would call the function views.article_detail(request, year=2003, month=3, slug=\"building-a-django-site\") . Path converters ¶ The following path converters are available by default: str - Matches any non-empty string, excluding the path separator, '/' .\nThis is the default if a converter isn’t included in the expression. int - Matches zero or any positive integer. Returns an int . slug - Matches any slug string consisting of ASCII letters or numbers,\nplus the hyphen and underscore characters. For example, building-your-1st-django-site . uuid - Matches a formatted UUID. To prevent multiple URLs from mapping to\nthe same page, dashes must be included and letters must be lowercase. For\nexample, 075194d3-6885-417e-a8a8-6c931e272f00 . Returns a UUID instance. path - Matches any non-empty string, including the path separator, '/' . This allows you to match against a complete URL path rather than\na segment of a URL path as with str . Registering custom path converters ¶ For more complex matching requirements, you can define your own path converters. A converter is a class that includes the following: A regex class attribute, as a string. A to_python(self, value) method, which handles converting the matched\nstring into the type that should be passed to the view function. It should\nraise ValueError if it can’t convert the given value. A ValueError is\ninterpreted as no match and as a consequence a 404 response is sent to the\nuser unless another URL pattern matches. A to_url(self, value) method, which handles converting the Python type\ninto a string to be used in the URL. It should raise ValueError if it\ncan’t convert the given value. A ValueError is interpreted as no match\nand as a consequence reverse() will raise NoReverseMatch unless another URL pattern matches. For example: class FourDigitYearConverter : regex = \"[0-9] {4} \" def to_python ( self , value ): return int ( value ) def to_url ( self , value ): return \" %04d \" % value Register custom converter classes in your URLconf using register_converter() : from django.urls import path , register_converter from . import converters , views register_converter ( converters . FourDigitYearConverter , \"yyyy\" ) urlpatterns = [ path ( \"articles/2003/\" , views . special_case_2003 ), path ( \"articles/<yyyy:year>/\" , views . year_archive ), ... , ] Deprecated since version 5.1: Overriding existing converters with django.urls.register_converter() is\ndeprecated. Using regular expressions ¶ If the paths and converters syntax isn’t sufficient for defining your URL\npatterns, you can also use regular expressions. To do so, use re_path() instead of path() . In Python regular expressions, the syntax for named regular expression groups\nis (?P<name>pattern) , where name is the name of the group and pattern is some pattern to match. Here’s the example URLconf from earlier, rewritten using regular expressions: from django.urls import path , re_path from . import views urlpatterns = [ path ( \"articles/2003/\" , views . special_case_2003 ), re_path ( r \"^articles/(?P<year>[0-9] {4} )/$\" , views . year_archive ), re_path ( r \"^articles/(?P<year>[0-9] {4} )/(?P<month>[0-9] {2} )/$\" , views . month_archive ), re_path ( r \"^articles/(?P<year>[0-9] {4} )/(?P<month>[0-9] {2} )/(?P<slug>[\\w-]+)/$\" , views . article_detail , ), ] This accomplishes roughly the same thing as the previous example, except: The exact URLs that will match are slightly more constrained. For example,\nthe year 10000 will no longer match since the year integers are constrained\nto be exactly four digits long. Each captured argument is sent to the view as a string, regardless of what\nsort of match the regular expression makes. When switching from using path() to re_path() or vice versa, it’s particularly important to be\naware that the type of the view arguments may change, and so you may need to\nadapt your views. Using unnamed regular expression groups ¶ As well as the named group syntax, e.g. (?P<year>[0-9]{4}) , you can\nalso use the shorter unnamed group, e.g. ([0-9]{4}) . This usage isn’t particularly recommended as it makes it easier to accidentally\nintroduce errors between the intended meaning of a match and the arguments\nof the view. In either case, using only one style within a given regex is recommended. When\nboth styles are mixed, any unnamed groups are ignored and only named groups are\npassed to the view function. Nested arguments ¶ Regular expressions allow nested arguments, and Django will resolve them and\npass them to the view. When reversing, Django will try to fill in all outer\ncaptured arguments, ignoring any nested captured arguments. Consider the\nfollowing URL patterns which optionally take a page argument: from django.urls import re_path urlpatterns = [ re_path ( r \"^blog/(page-([0-9]+)/)?$\" , blog_articles ), # bad re_path ( r \"^comments/(?:page-(?P<page_number>[0-9]+)/)?$\" , comments ), # good ] Both patterns use nested arguments and will resolve: for example, blog/page-2/ will result in a match to blog_articles with two\npositional arguments: page-2/ and 2 . The second pattern for comments will match comments/page-2/ with keyword argument page_number set to 2. The outer argument in this case is a non-capturing\nargument (?:...) . The blog_articles view needs the outermost captured argument to be reversed, page-2/ or no arguments in this case, while comments can be reversed\nwith either no arguments or a value for page_number . Nested captured arguments create a strong coupling between the view arguments\nand the URL as illustrated by blog_articles : the view receives part of the\nURL ( page-2/ ) instead of only the value the view is interested in. This\ncoupling is even more pronounced when reversing, since to reverse the view we\nneed to pass the piece of URL instead of the page number. As a rule of thumb, only capture the values the view needs to work with and\nuse non-capturing arguments when the regular expression needs an argument but\nthe view ignores it. What the URLconf searches against ¶ The URLconf searches against the requested URL, as a normal Python string. This\ndoes not include GET or POST parameters, or the domain name. For example, in a request to https://www.example.com/myapp/ , the URLconf\nwill look for myapp/ . In a request to https://www.example.com/myapp/?page=3 , the URLconf will look\nfor myapp/ . The URLconf doesn’t look at the request method. In other words, all request\nmethods – POST , GET , HEAD , etc. – will be routed to the same\nfunction for the same URL. Specifying defaults for view arguments ¶ A convenient trick is to specify default parameters for your views’ arguments.\nHere’s an example URLconf and view: # URLconf from django.urls import path from . import views urlpatterns = [ path ( \"blog/\" , views . page ), path ( \"blog/page<int:num>/\" , views . page ), ] # View (in blog/views.py) def page ( request , num = 1 ): # Output the appropriate page of blog entries, according to num. ... In the above example, both URL patterns point to the same view – views.page – but the first pattern doesn’t capture anything from the\nURL. If the first pattern matches, the page() function will use its\ndefault argument for num , 1 . If the second pattern matches, page() will use whatever num value was captured. Performance ¶ Django processes regular expressions in the urlpatterns list which is\ncompiled the first time it’s accessed. Subsequent requests use the cached\nconfiguration via the URL resolver. Syntax of the urlpatterns variable ¶ urlpatterns should be a sequence of path() and/or re_path() instances. Error handling ¶ When Django can’t find a match for the requested URL, or when an exception is\nraised, Django invokes an error-handling view. The views to use for these cases are specified by four variables. Their\ndefault values should suffice for most projects, but further customization is\npossible by overriding their default values. See the documentation on customizing error views for the full details. Such values can be set in your root URLconf. Setting these variables in any\nother URLconf will have no effect. Values must be callables, or strings representing the full Python import path\nto the view that should be called to handle the error condition at hand. The variables are: handler400 – See django.conf.urls.handler400 . handler403 – See django.conf.urls.handler403 . handler404 – See django.conf.urls.handler404 . handler500 – See django.conf.urls.handler500 . Including other URLconfs ¶ At any point, your urlpatterns can “include” other URLconf modules. This\nessentially “roots” a set of URLs below other ones. For example, here’s an excerpt of the URLconf for the Django website itself. It includes a number of other URLconfs: from django.urls import include , path urlpatterns = [ # ... snip ... path ( \"community/\" , include ( \"aggregator.urls\" )), path ( \"contact/\" , include ( \"contact.urls\" )), # ... snip ... ] Whenever Django encounters include() , it chops off\nwhatever part of the URL matched up to that point and sends the remaining\nstring to the included URLconf for further processing. Another possibility is to include additional URL patterns by using a list of path() instances. For example, consider this URLconf: from django.urls import include , path from apps.main import views as main_views from credit import views as credit_views extra_patterns = [ path ( \"reports/\" , credit_views . report ), path ( \"reports/<int:id>/\" , credit_views . report ), path ( \"charge/\" , credit_views . charge ), ] urlpatterns = [ path ( \"\" , main_views . homepage ), path ( \"help/\" , include ( \"apps.help.urls\" )), path ( \"credit/\" , include ( extra_patterns )), ] In this example, the /credit/reports/ URL will be handled by the credit_views.report() Django view. This can be used to remove redundancy from URLconfs where a single pattern\nprefix is used repeatedly. For example, consider this URLconf: from django.urls import path from . import views urlpatterns = [ path ( \"<page_slug>-<page_id>/history/\" , views . history ), path ( \"<page_slug>-<page_id>/edit/\" , views . edit ), path ( \"<page_slug>-<page_id>/discuss/\" , views . discuss ), path ( \"<page_slug>-<page_id>/permissions/\" , views . permissions ), ] We can improve this by stating the common path prefix only once and grouping\nthe suffixes that differ: from django.urls import include , path from . import views urlpatterns = [ path ( \"<page_slug>-<page_id>/\" , include ( [ path ( \"history/\" , views . history ), path ( \"edit/\" , views . edit ), path ( \"discuss/\" , views . discuss ), path ( \"permissions/\" , views . permissions ), ] ), ), ] Captured parameters ¶ An included URLconf receives any captured parameters from parent URLconfs, so\nthe following example is valid: # In settings/urls/main.py from django.urls import include , path urlpatterns = [ path ( \"<username>/blog/\" , include ( \"foo.urls.blog\" )), ] # In foo/urls/blog.py from django.urls import path from . import views urlpatterns = [ path ( \"\" , views . blog . index ), path ( \"archive/\" , views . blog . archive ), ] In the above example, the captured \"username\" variable is passed to the\nincluded URLconf, as expected. Passing extra options to view functions ¶ URLconfs have a hook that lets you pass extra arguments to your view functions,\nas a Python dictionary. The path() function can take an optional third argument\nwhich should be a dictionary of extra keyword arguments to pass to the view\nfunction. For example: from django.urls import path from . import views urlpatterns = [ path ( \"blog/<int:year>/\" , views . year_archive , { \"foo\" : \"bar\" }), ] In this example, for a request to /blog/2005/ , Django will call views.year_archive(request, year=2005, foo='bar') . This technique is used in the syndication framework to pass metadata and\noptions to views. Dealing with conflicts It’s possible to have a URL pattern which captures named keyword arguments,\nand also passes arguments with the same names in its dictionary of extra\narguments. When this happens, the arguments in the dictionary will be used\ninstead of the arguments captured in the URL. Passing extra options to include() ¶ Similarly, you can pass extra options to include() and\neach line in the included URLconf will be passed the extra options. For example, these two URLconf sets are functionally identical: Set one: # main.py from django.urls import include , path urlpatterns = [ path ( \"blog/\" , include ( \"inner\" ), { \"blog_id\" : 3 }), ] # inner.py from django.urls import path from mysite import views urlpatterns = [ path ( \"archive/\" , views . archive ), path ( \"about/\" , views . about ), ] Set two: # main.py from django.urls import include , path from mysite import views urlpatterns = [ path ( \"blog/\" , include ( \"inner\" )), ] # inner.py from django.urls import path urlpatterns = [ path ( \"archive/\" , views . archive , { \"blog_id\" : 3 }), path ( \"about/\" , views . about , { \"blog_id\" : 3 }), ] Note that extra options will always be passed to every line in the included\nURLconf, regardless of whether the line’s view actually accepts those options\nas valid. For this reason, this technique is only useful if you’re certain that\nevery view in the included URLconf accepts the extra options you’re passing. Reverse resolution of URLs ¶ A common need when working on a Django project is the possibility to obtain URLs\nin their final forms either for embedding in generated content (views and assets\nURLs, URLs shown to the user, etc.) or for handling of the navigation flow on\nthe server side (redirections, etc.) It is strongly desirable to avoid hard-coding these URLs (a laborious,\nnon-scalable and error-prone strategy). Equally dangerous is devising ad-hoc\nmechanisms to generate URLs that are parallel to the design described by the\nURLconf, which can result in the production of URLs that become stale over time. In other words, what’s needed is a DRY mechanism. Among other advantages it\nwould allow evolution of the URL design without having to go over all the\nproject source code to search and replace outdated URLs. The primary piece of information we have available to get a URL is an\nidentification (e.g. the name) of the view in charge of handling it. Other\npieces of information that necessarily must participate in the lookup of the\nright URL are the types (positional, keyword) and values of the view arguments. Django provides a solution such that the URL mapper is the only repository of\nthe URL design. You feed it with your URLconf and then it can be used in both\ndirections: Starting with a URL requested by the user/browser, it calls the right Django\nview providing any arguments it might need with their values as extracted from\nthe URL. Starting with the identification of the corresponding Django view plus the\nvalues of arguments that would be passed to it, obtain the associated URL. The first one is the usage we’ve been discussing in the previous sections. The\nsecond one is what is known as reverse resolution of URLs , reverse URL\nmatching , reverse URL lookup , or simply URL reversing . Django provides tools for performing URL reversing that match the different\nlayers where URLs are needed: In templates: Using the url template tag. In Python code: Using the reverse() function. In higher level code related to handling of URLs of Django model instances:\nThe get_absolute_url() method. Examples ¶ Consider again this URLconf entry: from django.urls import path from . import views urlpatterns = [ # ... path ( \"articles/<int:year>/\" , views . year_archive , name = \"news-year-archive\" ), # ... ] According to this design, the URL for the archive corresponding to year nnnn is /articles/<nnnn>/ . You can obtain these in template code by using: < a href = \" {% url 'news-year-archive' 2012 %} \" > 2012 Archive </ a > {# Or with the year in a template context variable: #} < ul > {% for yearvar in year_list %} < li >< a href = \" {% url 'news-year-archive' yearvar %} \" > {{ yearvar }} Archive </ a ></ li > {% endfor %} </ ul > Or in Python code: from django.http import HttpResponseRedirect from django.urls import reverse def redirect_to_year ( request ): # ... year = 2006 # ... return HttpResponseRedirect ( reverse ( \"news-year-archive\" , args = ( year ,))) If, for some reason, it was decided that the URLs where content for yearly\narticle archives are published at should be changed then you would only need to\nchange the entry in the URLconf. In some scenarios where views are of a generic nature, a many-to-one\nrelationship might exist between URLs and views. For these cases the view name\nisn’t a good enough identifier for it when comes the time of reversing\nURLs. Read the next section to know about the solution Django provides for this. Naming URL patterns ¶ In order to perform URL reversing, you’ll need to use named URL patterns as done in the examples above. The string used for the URL name can contain any\ncharacters you like. You are not restricted to valid Python names. When naming URL patterns, choose names that are unlikely to clash with other\napplications’ choice of names. If you call your URL pattern comment and another application does the same thing, the URL that reverse() finds depends on whichever pattern is last in\nyour project’s urlpatterns list. Putting a prefix on your URL names, perhaps derived from the application\nname (such as myapp-comment instead of comment ), decreases the chance\nof collision. You can deliberately choose the same URL name as another application if you\nwant to override a view. For example, a common use case is to override the LoginView . Parts of Django and most\nthird-party apps assume that this view has a URL pattern with the name login . If you have a custom login view and give its URL the name login , reverse() will find your custom view as long as it’s in urlpatterns after django.contrib.auth.urls is included (if that’s\nincluded at all). You may also use the same name for multiple URL patterns if they differ in\ntheir arguments. In addition to the URL name, reverse() matches the number of arguments and the names of the keyword arguments. Path\nconverters can also raise ValueError to indicate no match, see Registering custom path converters for details. URL namespaces ¶ Introduction ¶ URL namespaces allow you to uniquely reverse named URL patterns even if different applications use the same URL names.\nIt’s a good practice for third-party apps to always use namespaced URLs (as we\ndid in the tutorial). Similarly, it also allows you to reverse URLs if multiple\ninstances of an application are deployed. In other words, since multiple\ninstances of a single application will share named URLs, namespaces provide a\nway to tell these named URLs apart. Django applications that make proper use of URL namespacing can be deployed\nmore than once for a particular site. For example django.contrib.admin has an AdminSite class which allows you to deploy more than one instance of the admin .  In a\nlater example, we’ll discuss the idea of deploying the polls application from\nthe tutorial in two different locations so we can serve the same functionality\nto two different audiences (authors and publishers). A URL namespace comes in two parts, both of which are strings: application namespace ¶ This describes the name of the application that is being deployed. Every\ninstance of a single application will have the same application namespace.\nFor example, Django’s admin application has the somewhat predictable\napplication namespace of 'admin' . instance namespace ¶ This identifies a specific instance of an application. Instance namespaces\nshould be unique across your entire project. However, an instance namespace\ncan be the same as the application namespace. This is used to specify a\ndefault instance of an application. For example, the default Django admin\ninstance has an instance namespace of 'admin' . Namespaced URLs are specified using the ':' operator. For example, the main\nindex page of the admin application is referenced using 'admin:index' . This\nindicates a namespace of 'admin' , and a named URL of 'index' . Namespaces can also be nested. The named URL 'sports:polls:index' would\nlook for a pattern named 'index' in the namespace 'polls' that is itself\ndefined within the top-level namespace 'sports' . Reversing namespaced URLs ¶ When given a namespaced URL (e.g. 'polls:index' ) to resolve, Django splits\nthe fully qualified name into parts and then tries the following lookup: First, Django looks for a matching application namespace (in this\nexample, 'polls' ). This will yield a list of instances of that\napplication. If there is a current application defined, Django finds and returns the URL\nresolver for that instance. The current application can be specified with\nthe current_app argument to the reverse() function. The url template tag uses the namespace of the currently resolved\nview as the current application in a RequestContext . You can override this default by\nsetting the current application on the request.current_app attribute. If there is no current application, Django looks for a default\napplication instance. The default application instance is the instance\nthat has an instance namespace matching the application\nnamespace (in this example, an instance of polls called 'polls' ). If there is no default application instance, Django will pick the last\ndeployed instance of the application, whatever its instance name may be. If the provided namespace doesn’t match an application namespace in\nstep 1, Django will attempt a direct lookup of the namespace as an instance namespace . If there are nested namespaces, these steps are repeated for each part of the\nnamespace until only the view name is unresolved. The view name will then be\nresolved into a URL in the namespace that has been found. Example ¶ To show this resolution strategy in action, consider an example of two instances\nof the polls application from the tutorial: one called 'author-polls' and one called 'publisher-polls' . Assume we have enhanced that application\nso that it takes the instance namespace into consideration when creating and\ndisplaying polls. urls.py ¶ from django.urls import include , path urlpatterns = [ path ( \"author-polls/\" , include ( \"polls.urls\" , namespace = \"author-polls\" )), path ( \"publisher-polls/\" , include ( \"polls.urls\" , namespace = \"publisher-polls\" )), ] polls/urls.py ¶ from django.urls import path from . import views app_name = \"polls\" urlpatterns = [ path ( \"\" , views . IndexView . as_view (), name = \"index\" ), path ( \"<int:pk>/\" , views . DetailView . as_view (), name = \"detail\" ), ... , ] Using this setup, the following lookups are possible: If one of the instances is current - say, if we were rendering the detail page\nin the instance 'author-polls' - 'polls:index' will resolve to the\nindex page of the 'author-polls' instance; i.e. both of the following will\nresult in \"/author-polls/\" . In the method of a class-based view: reverse ( \"polls:index\" , current_app = self . request . resolver_match . namespace ) and in the template: {% url 'polls:index' %} If there is no current instance - say, if we were rendering a page\nsomewhere else on the site - 'polls:index' will resolve to the last\nregistered instance of polls . Since there is no default instance\n(instance namespace of 'polls' ), the last instance of polls that is\nregistered will be used. This would be 'publisher-polls' since it’s\ndeclared last in the urlpatterns . 'author-polls:index' will always resolve to the index page of the instance 'author-polls' (and likewise for 'publisher-polls' ) . If there were also a default instance - i.e., an instance named 'polls' -\nthe only change from above would be in the case where there is no current\ninstance (the second item in the list above). In this case 'polls:index' would resolve to the index page of the default instance instead of the instance\ndeclared last in urlpatterns . URL namespaces and included URLconfs ¶ Application namespaces of included URLconfs can be specified in two ways. Firstly, you can set an app_name attribute in the included URLconf module,\nat the same level as the urlpatterns attribute. You have to pass the actual\nmodule, or a string reference to the module, to include() ,\nnot the list of urlpatterns itself. polls/urls.py ¶ from django.urls import path from . import views app_name = \"polls\" urlpatterns = [ path ( \"\" , views . IndexView . as_view (), name = \"index\" ), path ( \"<int:pk>/\" , views . DetailView . as_view (), name = \"detail\" ), ... , ] urls.py ¶ from django.urls import include , path urlpatterns = [ path ( \"polls/\" , include ( \"polls.urls\" )), ] The URLs defined in polls.urls will have an application namespace polls . Secondly, you can include an object that contains embedded namespace data. If\nyou include() a list of path() or re_path() instances, the URLs contained in that object\nwill be added to the global namespace. However, you can also include() a\n2-tuple containing: (<list of path()/re_path() instances>, <application namespace>) For example: from django.urls import include , path from . import views polls_patterns = ( [ path ( \"\" , views . IndexView . as_view (), name = \"index\" ), path ( \"<int:pk>/\" , views . DetailView . as_view (), name = \"detail\" ), ], \"polls\" , ) urlpatterns = [ path ( \"polls/\" , include ( polls_patterns )), ] This will include the nominated URL patterns into the given application\nnamespace. The instance namespace can be specified using the namespace argument to include() . If the instance namespace is not specified,\nit will default to the included URLconf’s application namespace. This means\nit will also be the default instance for that namespace.", "keywords": ["page_slug>-<page_id>/history/", "comments", "variable", "type", "line", "url", "register", "detailview", "def", "place", "searches", "settings", "reason", "overview", "classes", "mysite", "method", "party", "slug>[\\w-]+)/$", "roots", "authors", "to_url(self", "corresponding", "performance", "use", "redundancy", "views", "callables", "ways", "apps.main", "sample", "condition", "charge", "project", "login", "cool", "publisher", "way", "uris", "converters", "default", "piece", "num", "naming", "domain", "requirements", "need", "page", "converter", "consequence", "page_slug>-<page_id>/permissions/", "evolution", "self", "month>/", "argument", "words", "version", "building", "tuple", "integer", "page_number>[0", "^blog/(page-([0", "comment", "steps", "reports/<int", "angle", "name", "pattern", "reversing", "world", "operator", "admin", "pk>/", "id>/", "python", "django.urls.path", "instances", "loginview", "addition", "to_url", "regex", "slug>/", "sections", "lookup", "chance", "rule", "wide", "tag", "namespace", "framework", "head", "requests", "django.urls", "forms", "month=3", "year=2003", "parameters", "django.conf.urls.handler400", "dictionary", "urlconf", "permissions", "characters", "assets", "resolution", "browser", "error", "design", "template", "archives", "%", "setting", "order", "documentation", "-", "style", "application", "mechanisms", "customization", "system", "conflicts", "modules", "str", "navigation", "following", "excerpt", "import", "slash", "bar", "information", "fourdigityearconverter", "paths", "article", "#", "get_absolute_url", "point", "section", "idea", "request.current_app", "limitations", "¶", "urls.py", "adminsite", "web", "server", "main.py", "change", "example", "month>[0", "ordering", "year", "identifier", "functions", "value", "int", "source", "dry", "/articles/2003/03", "introduction", "blog", "handler404", "aggregator.urls", "main_views", "examples", "details", "advantages", "/articles", "scenarios", "setup", "locations", "as_view", "object", "root", "httprequest", "one", "algorithm", "polls_patterns", "returns", "blog_articles", "httpresponseredirect", "parent", "year=2005", "to_python", "myapp", "sequence", "redirections", "credit_views", "year>/", "post", "valueerror", "projects", "level", "django", "parameter", "articles/2003/", "syntax", "strings", "/blog/2005/", "page_number", "requestcontext", "credit", "effect", "year>/<int", "digits", "=", "namespacing", "news", "language", "defaults", "scheme", "^comments/(?:page-(?p", "segment", "matches", "index", "hook", "match", "path()/re_path", "mapper", "nature", "handling", "templates", "views.page", "trick", "time", "sets", "exception", "middleware", "args", "site", "pieces", "meaning", "groups", "berners", "indexview", "repository", "output", "9]+)/)?$", "custom", "resolver", "ad", "methods", "side", "keyword", "urls", "variables", "process", "production", "content", "uuid", "contact.urls", "redirect_to_year", "applications", "request", "internationalization", "mapping", "thing", "current_app", "django.urls.re_path", "href", "registering", "data", "polls", "matching", "brackets", "register_converter", "group", "lookups", "options", "django.conf.urls.handler404", "notes", "patterns", "optional", "namespaces", "response", "dashes", "kwargs", "configuration", "articles/<int", "author", "path", "archive", "tools", "django.contrib.auth.urls", "month>/<slug", "module", "apps", "arguments", "practice", "urlconfs", "yearvar", "page_slug>-<page_id>/edit/", "context", "publishers", "detail", "special_case_2003", "django.contrib.admin", "consideration", "lee", "website", "edit", "extra_patterns", "path_info", "075194d3", "year>[0", "username>/blog/", "types", "creator", "directions", "p", "articles/<yyyy", "page_slug>-<page_id>/discuss/", "apps.help.urls", "prefix", "foo='bar", "thumb", "ul", "hand", "collision", "metadata", "integers", "values", "cases", "solution", "page-2/", "urlpatterns", "item", "test", "re_path", "blog_id", "mappings", "usage", "audiences", "entries", "handler500", "model", "tutorial", "polls.urls", "character", "processing", "choice", "django.urls.register_converter", "letters", "n’t", "/articles/2003/", "handler400", "syndication", "suffixes", "case", "imports", "django.conf.urls.handler403", "class", "number", "foo.urls.blog", "numbers", "return", "report", "action", "attribute", "ones", "function", "li", "string", "list", "your-1st", "identification", "styles", "flow", "app", "view", "^articles/(?p", "parts", "articles", "user", "coupling", "part", "yyyy", "quality", "errors", "endfor", "r", "get", "mechanism", "history", "a8a8", "sports", "possibility", "names", "technique", "layers", "expressions", "separator", "blog/<int", "set", "functionality", "foo", "relationship", "reverse", "6c931e272f00", "expression", "reference", "instance", "code", "/author", "handler403", "entry", "strategy", "step", "root_urlconf", "tim"], "type": "documentation"},
{"title": "Handling HTTP requests", "url": "https://docs.djangoproject.com/en/5.1/topics/http/", "content": "Handling HTTP requests ¶ Information on handling HTTP requests in Django: URL dispatcher Writing views View decorators File Uploads Django shortcut functions Generic views Middleware How to use sessions", "keywords": ["url", "django", "views", "uploads", "¶", "requests", "http", "information", "view", "decorators", "functions", "sessions", "middleware", "writing"], "type": "documentation"},
{"title": "Examples of model relationship API usage", "url": "https://docs.djangoproject.com/en/5.1/topics/db/examples/", "content": "Examples of model relationship API usage ¶ Many-to-many relationships Many-to-one relationships One-to-one relationships", "keywords": ["usage", "¶", "model", "relationship", "examples", "api", "relationships"], "type": "documentation"},
{"title": "Fixtures", "url": "https://docs.djangoproject.com/en/5.1/topics/db/fixtures/", "content": "Fixtures ¶ A fixture is a collection of files that contain the serialized contents of\nthe database. Each fixture has a unique name, and the files that comprise the\nfixture can be distributed over multiple directories, in multiple applications. See also How to provide initial data for models How to produce a fixture ¶ Fixtures can be generated by manage.py dumpdata . It’s\nalso possible to generate custom fixtures by directly using serialization\ntools or even by handwriting them. How to use a fixture ¶ Fixtures can be used to pre-populate the database with data for tests : class MyTestCase ( TestCase ): fixtures = [ \"fixture-label\" ] or to provide some initial data using the loaddata command: django-admin loaddata <fixture label> How fixtures are discovered ¶ Django will search in these locations for fixtures: In the fixtures directory of every installed application In any directory listed in the FIXTURE_DIRS setting In the literal path named by the fixture Django will load any and all fixtures it finds in these locations that match\nthe provided fixture names. If the named fixture has a file extension, only\nfixtures of that type will be loaded. For example: django-admin loaddata mydata.json would only load JSON fixtures called mydata . The fixture extension must\ncorrespond to the registered name of a serializer (e.g., json or xml ). If you omit the extensions, Django will search all available fixture types for\na matching fixture. For example: django-admin loaddata mydata would look for any fixture of any fixture type called mydata . If a fixture\ndirectory contained mydata.json , that fixture would be loaded as a JSON\nfixture. The fixtures that are named can include directory components. These directories\nwill be included in the search path. For example: django-admin loaddata foo/bar/mydata.json would search <app_label>/fixtures/foo/bar/mydata.json for each installed\napplication, <dirname>/foo/bar/mydata.json for each directory in FIXTURE_DIRS , and the literal path foo/bar/mydata.json . Fixtures loading order ¶ Multiple fixtures can be specified in the same invocation. For example: django-admin loaddata mammals birds insects or in a test case class: class AnimalTestCase ( TestCase ): fixtures = [ \"mammals\" , \"birds\" , \"insects\" ] The order in which fixtures are loaded follows the order in which they are\nlisted, whether it’s when using the management command or when listing them in\nthe test case class as shown above. In these examples, all the fixtures named mammals from all applications (in\nthe order in which applications are defined in INSTALLED_APPS ) will\nbe loaded first. Subsequently, all the birds fixtures will be loaded,\nfollowed by all the insects fixtures. Be aware that if the database backend supports row-level constraints, these\nconstraints will be checked at the end of the transaction. Any relationships\nacross fixtures may result in a load error if the database configuration does\nnot support deferred constraint checking (refer to the MySQL docs for an\nexample). How fixtures are saved to the database ¶ When fixture files are processed, the data is saved to the database as is.\nModel defined save() methods are not called, and\nany pre_save or post_save signals will be called with raw=True since the instance only contains attributes that are local to the\nmodel. You may, for example, want to disable handlers that access\nrelated fields that aren’t present during fixture loading and would otherwise\nraise an exception: from django.db.models.signals import post_save from .models import MyModel def my_handler ( ** kwargs ): # disable the handler during fixture loading if kwargs [ \"raw\" ]: return ... post_save . connect ( my_handler , sender = MyModel ) You could also write a decorator to encapsulate this logic: from functools import wraps def disable_for_loaddata ( signal_handler ): \"\"\" Decorator that turns off signal handlers when loading fixture data. \"\"\" @wraps ( signal_handler ) def wrapper ( * args , ** kwargs ): if kwargs [ \"raw\" ]: return signal_handler ( * args , ** kwargs ) return wrapper @disable_for_loaddata def my_handler ( ** kwargs ): ... Just be aware that this logic will disable the signals whenever fixtures are\ndeserialized, not just during loaddata . Compressed fixtures ¶ Fixtures may be compressed in zip , gz , bz2 , lzma , or xz format. For example: django-admin loaddata mydata.json would look for any of mydata.json , mydata.json.zip , mydata.json.gz , mydata.json.bz2 , mydata.json.lzma , or mydata.json.xz . The first\nfile contained within a compressed archive is used. Note that if two fixtures with the same name but different fixture type are\ndiscovered (for example, if mydata.json and mydata.xml.gz were found in\nthe same fixture directory), fixture installation will be aborted, and any data\ninstalled in the call to loaddata will be removed from the database. MySQL with MyISAM and fixtures The MyISAM storage engine of MySQL doesn’t support transactions or\nconstraints, so if you use MyISAM, you won’t get validation of fixture\ndata, or a rollback if multiple transaction files are found. Database-specific fixtures ¶ If you’re in a multi-database setup, you might have fixture data that\nyou want to load onto one database, but not onto another. In this\nsituation, you can add a database identifier into the names of your fixtures. For example, if your DATABASES setting has a users database\ndefined, name the fixture mydata.users.json or mydata.users.json.gz and the fixture will only be loaded when you\nspecify you want to load data into the users database.", "keywords": ["mydata.json.zip", "wrapper", "mydata.json.lzma", "transactions", "mysql", "error", "type", "types", "mydata", "django.db.models.signals", "docs", "bz2", "order", "serialization", "-", "def", "signal", "my_handler", "application", "exception", "management", "dirname>/foo", "myisam", "tests", "args", "mydata.json", "directories", "disable_for_loaddata", "files", "zip", "lzma", "mydata.json.bz2", "import", "mammals", "bar", "dumpdata", "json", "#", "load", "test", "fields", "¶", "testcase", "custom", "decorator", "animaltestcase", "pre_save", "methods", "sender", "fixture", "transaction", "model", "fixture_dirs", "app_label>/fixtures", "format", "serializer", "access", "command", "example", "mydata.users.json.gz", "constraints", "users", "n’t", "@wraps", "mymodel", "backend", "label", "end", "handlers", "case", "class", "xml", "components", "applications", "return", "save", "engine", "insects", "checking", "examples", "@disable_for_loaddata", "loading", "data", "setup", "locations", "matching", "constraint", "name", "signal_handler", "rollback", "mydata.users.json", "extension", "relationships", "file", "loaddata", "attributes", "installation", "invocation", "extensions", "handler", "fixtures", "kwargs", "configuration", "wraps", "storage", "path", "names", "level", "django", "signals", "archive", "tools", "birds", "directory", "validation", "mytestcase", "*", "contents", "foo", "database", "search", "functools", "post_save", "databases", "logic", "instance", "=", "models", "collection", "situation", ".models", "row", "call"], "type": "documentation"},
{"title": "Database instrumentation", "url": "https://docs.djangoproject.com/en/5.1/topics/db/instrumentation/", "content": "Database instrumentation ¶ To help you understand and control the queries issued by your code, Django\nprovides a hook for installing wrapper functions around the execution of\ndatabase queries. For example, wrappers can count queries, measure query\nduration, log queries, or even prevent query execution (e.g. to make sure that\nno queries are issued while rendering a template with prefetched data). The wrappers are modeled after middleware –\nthey are callables which take another callable as one of their arguments. They\ncall that callable to invoke the (possibly wrapped) database query, and they\ncan do what they want around that call. They are, however, created and\ninstalled by user code, and so don’t need a separate factory like middleware do. Installing a wrapper is done in a context manager – so the wrappers are\ntemporary and specific to some flow in your code. As mentioned above, an example of a wrapper is a query execution blocker. It\ncould look like this: def blocker ( * args ): raise Exception ( \"No database access allowed here.\" ) And it would be used in a view to block queries from the template like so: from django.db import connection from django.shortcuts import render def my_view ( request ): context = { ... } # Code to generate context with all data. template_name = ... with connection . execute_wrapper ( blocker ): return render ( request , template_name , context ) The parameters sent to the wrappers are: execute – a callable, which should be invoked with the rest of the\nparameters in order to execute the query. sql – a str , the SQL query to be sent to the database. params – a list/tuple of parameter values for the SQL command, or a\nlist/tuple of lists/tuples if the wrapped call is executemany() . many – a bool indicating whether the ultimately invoked call is execute() or executemany() (and whether params is expected to be\na sequence of values, or a sequence of sequences of values). context – a dictionary with further data about the context of\ninvocation. This includes the connection and cursor. Using the parameters, a slightly more complex version of the blocker could\ninclude the connection name in the error message: def blocker ( execute , sql , params , many , context ): alias = context [ \"connection\" ] . alias raise Exception ( \"Access to database ' {} ' blocked here\" . format ( alias )) For a more complete example, a query logger could look like this: import time class QueryLogger : def __init__ ( self ): self . queries = [] def __call__ ( self , execute , sql , params , many , context ): current_query = { \"sql\" : sql , \"params\" : params , \"many\" : many } start = time . monotonic () try : result = execute ( sql , params , many , context ) except Exception as e : current_query [ \"status\" ] = \"error\" current_query [ \"exception\" ] = e raise else : current_query [ \"status\" ] = \"ok\" return result finally : duration = time . monotonic () - start current_query [ \"duration\" ] = duration self . queries . append ( current_query ) To use this, you would create a logger object and install it as a wrapper: from django.db import connection ql = QueryLogger () with connection . execute_wrapper ( ql ): do_queries () # Now we can print the log. print ( ql . queries ) connection.execute_wrapper() ¶ execute_wrapper ( wrapper ) ¶ Returns a context manager which, when entered, installs a wrapper around\ndatabase query executions, and when exited, removes the wrapper. The wrapper is\ninstalled on the thread-local connection object. wrapper is a callable taking five arguments.  It is called for every query\nexecution in the scope of the context manager, with arguments execute , sql , params , many , and context as described above. It’s\nexpected to call execute(sql, params, many, context) and return the return\nvalue of that call.", "keywords": ["dictionary", "instrumentation", "log", "lists", "hook", "connection", "wrapper", "callable", "error", "template", "logger", "measure", "execute(sql", "order", "def", "bool", "monotonic", "time", "exception", "middleware", "args", "values", "rest", "str", "query", "manager", "status", "blocker", "import", "callables", "#", "cursor", "result", "¶", "init", "format", "execute", "access", "render", "querylogger", "command", "example", "executions", "functions", "value", "self", "class", "print", "request", "version", "wrappers", "tuple", "return", "tuples", "list", "e", "data", "duration", "flow", "view", "my_view", "name", "object", "user", "queries", "params", "invocation", "executemany", "execution", "do_queries", "append", "sequence", "sql", "sequences", "django", "message", "thread", "parameter", "scope", "arguments", "database", "context", "raise", "execute_wrapper", "code", "factory", "=", "parameters", "current_query", ".", "alias", "call"], "type": "documentation"},
{"title": "Database access optimization", "url": "https://docs.djangoproject.com/en/5.1/topics/db/optimization/", "content": "Database access optimization ¶ Django’s database layer provides various ways to help developers get the most\nout of their databases. This document gathers together links to the relevant\ndocumentation, and adds various tips, organized under a number of headings that\noutline the steps to take when attempting to optimize your database usage. Profile first ¶ As general programming practice, this goes without saying. Find out what\nqueries you are doing and what they are costing you .\nUse QuerySet.explain() to understand how specific QuerySet s are\nexecuted by your database. You may also want to use an external project like django-debug-toolbar , or a tool that monitors your database directly. Remember that you may be optimizing for speed or memory or both, depending on\nyour requirements. Sometimes optimizing for one will be detrimental to the\nother, but sometimes they will help each other. Also, work that is done by the\ndatabase process might not have the same cost (to you) as the same amount of\nwork done in your Python process. It is up to you to decide what your\npriorities are, where the balance must lie, and profile all of these as required\nsince this will depend on your application and server. With everything that follows, remember to profile after every change to ensure\nthat the change is a benefit, and a big enough benefit given the decrease in\nreadability of your code. All of the suggestions below come with the caveat\nthat in your circumstances the general principle might not apply, or might even\nbe reversed. Use standard DB optimization techniques ¶ …including: Indexes . This is a number one priority, after you have determined from\nprofiling what indexes should be added. Use Meta.indexes or Field.db_index to add these from\nDjango. Consider adding indexes to fields that you frequently query using filter() , exclude() , order_by() , etc. as indexes may help\nto speed up lookups. Note that determining the best indexes is a complex\ndatabase-dependent topic that will depend on your particular application.\nThe overhead of maintaining an index may outweigh any gains in query speed. Appropriate use of field types. We will assume you have done the things listed above. The rest of this document\nfocuses on how to use Django in such a way that you are not doing unnecessary\nwork. This document also does not address other optimization techniques that\napply to all expensive operations, such as general purpose caching . Understand QuerySet s ¶ Understanding QuerySets is vital to getting good\nperformance with simple code. In particular: Understand QuerySet evaluation ¶ To avoid performance problems, it is important to understand: that QuerySets are lazy . when they are evaluated . how the data is held in memory . Understand cached attributes ¶ As well as caching of the whole QuerySet , there is caching of the result of\nattributes on ORM objects. In general, attributes that are not callable will be\ncached. For example, assuming the example blog models : >>> entry = Entry . objects . get ( id = 1 ) >>> entry . blog # Blog object is retrieved at this point >>> entry . blog # cached version, no DB access But in general, callable attributes cause DB lookups every time: >>> entry = Entry . objects . get ( id = 1 ) >>> entry . authors . all () # query performed >>> entry . authors . all () # query performed again Be careful when reading template code - the template system does not allow use\nof parentheses, but will call callables automatically, hiding the above\ndistinction. Be careful with your own custom properties - it is up to you to implement\ncaching when required, for example using the cached_property decorator. Use the with template tag ¶ To make use of the caching behavior of QuerySet , you may need to use the with template tag. Use iterator() ¶ When you have a lot of objects, the caching behavior of the QuerySet can\ncause a large amount of memory to be used. In this case, iterator() may help. Use explain() ¶ QuerySet.explain() gives you detailed information about how the database\nexecutes a query, including indexes and joins that are used. These details may\nhelp you find queries that could be rewritten more efficiently, or identify\nindexes that could be added to improve performance. Do database work in the database rather than in Python ¶ For instance: At the most basic level, use filter and exclude to do\nfiltering in the database. Use F expressions to filter\nbased on other fields within the same model. Use annotate to do aggregation in the database . If these aren’t enough to generate the SQL you need: Use RawSQL ¶ A less portable but more powerful method is the RawSQL expression, which allows some SQL\nto be explicitly added to the query. If that still isn’t powerful enough: Use raw SQL ¶ Write your own custom SQL to retrieve data or populate models . Use django.db.connection.queries to find out what Django\nis writing for you and start from there. Retrieve individual objects using a unique, indexed column ¶ There are two reasons to use a column with unique or db_index when using get() to retrieve individual objects.\nFirst, the query will be quicker because of the underlying database index.\nAlso, the query could run much slower if multiple objects match the lookup;\nhaving a unique constraint on the column guarantees this will never happen. So using the example blog models : >>> entry = Entry . objects . get ( id = 10 ) will be quicker than: >>> entry = Entry . objects . get ( headline = \"News Item Title\" ) because id is indexed by the database and is guaranteed to be unique. Doing the following is potentially quite slow: >>> entry = Entry . objects . get ( headline__startswith = \"News\" ) First of all, headline is not indexed, which will make the underlying\ndatabase fetch slower. Second, the lookup doesn’t guarantee that only one object will be returned.\nIf the query matches more than one object, it will retrieve and transfer all of\nthem from the database. This penalty could be substantial if hundreds or\nthousands of records are returned. The penalty will be compounded if the\ndatabase lives on a separate server, where network overhead and latency also\nplay a factor. Retrieve everything at once if you know you will need it ¶ Hitting the database multiple times for different parts of a single ‘set’ of\ndata that you will need all parts of is, in general, less efficient than\nretrieving it all in one query. This is particularly important if you have a\nquery that is executed in a loop, and could therefore end up doing many database\nqueries, when only one was needed. So: Use QuerySet.select_related() and prefetch_related() ¶ Understand select_related() and prefetch_related() thoroughly, and use\nthem: in managers and default managers where\nappropriate. Be aware when your manager is and is not used; sometimes this is\ntricky so don’t make assumptions. in view code or other layers, possibly making use of prefetch_related_objects() where needed. Don’t retrieve things you don’t need ¶ Use QuerySet.values() and values_list() ¶ When you only want a dict or list of values, and don’t need ORM model\nobjects, make appropriate usage of values() .\nThese can be useful for replacing model objects in template code - as long as\nthe dicts you supply have the same attributes as those used in the template,\nyou are fine. Use QuerySet.defer() and only() ¶ Use defer() and only() if there are database columns\nyou know that you won’t need (or won’t need in most cases) to avoid loading\nthem. Note that if you do use them, the ORM will have to go and get them in\na separate query, making this a pessimization if you use it inappropriately. Don’t be too aggressive in deferring fields without profiling as the database\nhas to read most of the non-text, non- VARCHAR data from the disk for a\nsingle row in the results, even if it ends up only using a few columns. The defer() and only() methods are most useful when you can avoid loading a\nlot of text data or for fields that might take a lot of processing to convert\nback to Python. As always, profile first, then optimize. Use QuerySet.contains(obj) ¶ …if you only want to find out if obj is in the queryset, rather than if obj in queryset . Use QuerySet.count() ¶ …if you only want the count, rather than doing len(queryset) . Use QuerySet.exists() ¶ …if you only want to find out if at least one result exists, rather than if queryset . But: Don’t overuse contains() , count() , and exists() ¶ If you are going to need other data from the QuerySet, evaluate it immediately. For example, assuming a Group model that has a many-to-many relation to User , the following code is optimal: members = group . members . all () if display_group_members : if members : if current_user in members : print ( \"You and\" , len ( members ) - 1 , \"other users are members of this group.\" ) else : print ( \"There are\" , len ( members ), \"members in this group.\" ) for member in members : print ( member . username ) else : print ( \"There are no members in this group.\" ) It is optimal because: Since QuerySets are lazy, this does no database queries if display_group_members is False . Storing group.members.all() in the members variable allows its\nresult cache to be reused. The line if members: causes QuerySet.__bool__() to be called, which\ncauses the group.members.all() query to be run on the database. If there\naren’t any results, it will return False , otherwise True . The line if current_user in members: checks if the user is in the result\ncache, so no additional database queries are issued. The use of len(members) calls QuerySet.__len__() , reusing the result\ncache, so again, no database queries are issued. The for member loop iterates over the result cache. In total, this code does either one or zero database queries. The only\ndeliberate optimization performed is using the members variable. Using QuerySet.exists() for the if , QuerySet.contains() for the in ,\nor QuerySet.count() for the count would each cause additional queries. Use QuerySet.update() and delete() ¶ Rather than retrieve a load of objects, set some values, and save them\nindividual, use a bulk SQL UPDATE statement, via QuerySet.update() . Similarly, do bulk deletes where possible. Note, however, that these bulk update methods cannot call the save() or delete() methods of individual instances, which means that any custom\nbehavior you have added for these methods will not be executed, including\nanything driven from the normal database object signals . Use foreign key values directly ¶ If you only need a foreign key value, use the foreign key value that is already on\nthe object you’ve got, rather than getting the whole related object and taking\nits primary key. i.e. do: entry . blog_id instead of: entry . blog . id Don’t order results if you don’t care ¶ Ordering is not free; each field to order by is an operation the database must\nperform. If a model has a default ordering ( Meta.ordering ) and you don’t need it, remove\nit on a QuerySet by calling order_by() with no parameters. Adding an index to your database may help to improve ordering performance. Use bulk methods ¶ Use bulk methods to reduce the number of SQL statements. Create in bulk ¶ When creating objects, where possible, use the bulk_create() method to reduce the\nnumber of SQL queries. For example: Entry . objects . bulk_create ( [ Entry ( headline = \"This is a test\" ), Entry ( headline = \"This is only a test\" ), ] ) …is preferable to: Entry . objects . create ( headline = \"This is a test\" ) Entry . objects . create ( headline = \"This is only a test\" ) Note that there are a number of caveats to this method , so make sure it’s appropriate\nfor your use case. Update in bulk ¶ When updating objects, where possible, use the bulk_update() method to reduce the\nnumber of SQL queries. Given a list or queryset of objects: entries = Entry . objects . bulk_create ( [ Entry ( headline = \"This is a test\" ), Entry ( headline = \"This is only a test\" ), ] ) The following example: entries [ 0 ] . headline = \"This is not a test\" entries [ 1 ] . headline = \"This is no longer a test\" Entry . objects . bulk_update ( entries , [ \"headline\" ]) …is preferable to: entries [ 0 ] . headline = \"This is not a test\" entries [ 0 ] . save () entries [ 1 ] . headline = \"This is no longer a test\" entries [ 1 ] . save () Note that there are a number of caveats to this method , so make sure it’s appropriate\nfor your use case. Insert in bulk ¶ When inserting objects into ManyToManyFields , use add() with multiple\nobjects to reduce the number of SQL queries. For example: my_band . members . add ( me , my_friend ) …is preferable to: my_band . members . add ( me ) my_band . members . add ( my_friend ) …where Bands and Artists have a many-to-many relationship. When inserting different pairs of objects into ManyToManyField or when the custom through table is defined, use bulk_create() method to reduce the\nnumber of SQL queries. For example: PizzaToppingRelationship = Pizza . toppings . through PizzaToppingRelationship . objects . bulk_create ( [ PizzaToppingRelationship ( pizza = my_pizza , topping = pepperoni ), PizzaToppingRelationship ( pizza = your_pizza , topping = pepperoni ), PizzaToppingRelationship ( pizza = your_pizza , topping = mushroom ), ], ignore_conflicts = True , ) …is preferable to: my_pizza . toppings . add ( pepperoni ) your_pizza . toppings . add ( pepperoni , mushroom ) …where Pizza and Topping have a many-to-many relationship. Note that\nthere are a number of caveats to this method , so make sure it’s appropriate\nfor your use case. Remove in bulk ¶ When removing objects from ManyToManyFields , use remove() with multiple\nobjects to reduce the number of SQL queries. For example: my_band . members . remove ( me , my_friend ) …is preferable to: my_band . members . remove ( me ) my_band . members . remove ( my_friend ) …where Bands and Artists have a many-to-many relationship. When removing different pairs of objects from ManyToManyFields , use delete() on a Q expression with multiple through model instances to reduce\nthe number of SQL queries. For example: from django.db.models import Q PizzaToppingRelationship = Pizza . toppings . through PizzaToppingRelationship . objects . filter ( Q ( pizza = my_pizza , topping = pepperoni ) | Q ( pizza = your_pizza , topping = pepperoni ) | Q ( pizza = your_pizza , topping = mushroom ) ) . delete () …is preferable to: my_pizza . toppings . remove ( pepperoni ) your_pizza . toppings . remove ( pepperoni , mushroom ) …where Pizza and Topping have a many-to-many relationship.", "keywords": ["disk", "index", "queryset.values", "column", "work", "iterates", "variable", "statements", "line", "template", "querysets", "obj", "cache", "overuse", "types", "queryset.defer", "manytomanyfield", "total", "statement", "queryset.update", "order", "documentation", "filter", "problems", "username", "pairs", "pizza", "time", "artists", "pizzatoppingrelationship", "application", "aggregation", "order_by", "dicts", "count", "q", "records", "method", "delete", "queryset", "table", "defer", "behavior", "system", "authors", "individual", "values", "rest", "performance", "d", "query", "cases", "use", "manager", "following", "iterator", "import", "times", "ways", "principle", "callables", "information", "item", "project", "ignore_conflicts", "topic", "result", "#", "queryset.exists", "point", "load", "test", "fields", "way", "len", "¶", "my_pizza", "default", "understand", "pepperoni", "blog_id", "techniques", "custom", "decorator", "f", "penalty", "methods", "member", "requirements", "usage", "update", "supply", "entries", "model", "server", "manytomanyfields", "my_band", "suggestions", "change", "decrease", "processing", "display_group_members", "hundreds", "loop", "group.members.all", "process", "toppings", "access", "results", "example", "your_pizza", "checks", "users", "ordering", "n’t", "tool", "priorities", "value", "parentheses", "prefetch_related_objects", "toolbar", "circumstances", "case", "field.db_index", "number", "thousands", "print", "version", "django.db.connection.queries", "blog", "optimization", "profiling", "values_list", "save", "columns", "factor", "mushroom", "queryset.count", "assumptions", "bulk_create", "tips", "developers", "things", "len(members", "list", "properties", "details", "steps", "pessimization", "data", "view", "constraint", "populate", "parts", "lookups", "i", "object", "caveat", "joins", "latency", "priority", "gains", "group", "user", "queryset.explain", "queries", "attributes", "remove", "readability", "programming", "operations", "queryset.__bool", "bulk_update", "my_friend", "python", "amount", "reasons", "get", "instances", "network", "meta.indexes", "deletes", "distinction", "indexes", "lookup", "sql", "understanding", "orm", "insert", "level", "signals", "django", "layers", "tag", "evaluation", "|", "expressions", "speed", "managers", "document", "fetch", "lot", "rawsql", "set", "text", "in", "field", "inserting", "topping", "practice", "cost", "balance", "relation", "database", "queryset.contains", "relationship", "memory", "databases", "annotate", "add", "expression", "headline", "purpose", "db", "db_index", "operation", "layer", "instance", "meta.ordering", "code", "overhead", "models", "headings", "=", "queryset.select_related", "benefit", "links", "objects", "news", "key", "parameters", "caveats", "bands", "explain", "members", "entry", "row", "title", "queryset.contains(obj"], "type": "documentation"},
{"title": "Tablespaces", "url": "https://docs.djangoproject.com/en/5.1/topics/db/tablespaces/", "content": "Tablespaces ¶ A common paradigm for optimizing performance in database systems is the use of tablespaces to organize disk layout. Warning Django does not create the tablespaces for you. Please refer to your\ndatabase engine’s documentation for details on creating and managing\ntablespaces. Declaring tablespaces for tables ¶ A tablespace can be specified for the table generated by a model by supplying\nthe db_tablespace option inside the model’s class Meta . This option also affects tables automatically created for ManyToManyField s in the model. You can use the DEFAULT_TABLESPACE setting to specify a default value\nfor db_tablespace . This is useful for setting\na tablespace for the built-in Django apps and other applications whose code you\ncannot control. Declaring tablespaces for indexes ¶ You can pass the db_tablespace option to an Index constructor to specify the name of a tablespace to use for the index.\nFor single field indexes, you can pass the db_tablespace option to a Field constructor\nto specify an alternate tablespace for the field’s column index. If the column\ndoesn’t have an index, the option is ignored. You can use the DEFAULT_INDEX_TABLESPACE setting to specify\na default value for db_tablespace . If db_tablespace isn’t specified and you didn’t\nset DEFAULT_INDEX_TABLESPACE , the index is created in the same\ntablespace as the tables. An example ¶ class TablespaceExample ( models . Model ): name = models . CharField ( max_length = 30 , db_index = True , db_tablespace = \"indexes\" ) data = models . CharField ( max_length = 255 , db_index = True ) shortcut = models . CharField ( max_length = 7 ) edges = models . ManyToManyField ( to = \"self\" , db_tablespace = \"indexes\" ) class Meta : db_tablespace = \"tables\" indexes = [ models . Index ( fields = [ \"shortcut\" ], db_tablespace = \"other_indexes\" )] In this example, the tables generated by the TablespaceExample model (i.e.\nthe model table and the many-to-many table) would be stored in the tables tablespace. The index for the name field and the indexes on the many-to-many\ntable would be stored in the indexes tablespace. The data field would\nalso generate an index, but no tablespace for it is specified, so it would be\nstored in the model tablespace tables by default. The index for the shortcut field would be stored in the other_indexes tablespace. Database support ¶ PostgreSQL and Oracle support tablespaces. SQLite, MariaDB and MySQL don’t. When you use a backend that lacks support for tablespaces, Django ignores all\ntablespace-related options.", "keywords": ["shortcut", "disk", "index", "paradigm", "constructor", "class", "s", "column", "default_index_tablespace", "applications", "indexes", "fields", "django", "other_indexes", "support", "tables", "¶", "engine", "manytomanyfield", "default", "option", "systems", "setting", "meta", "backend", "edges", "documentation", "details", "apps", "field", "tablespaces", "db_tablespace", "model", "data", "database", "layout", "max_length", "tablespaceexample", "default_tablespace", "oracle", "name", "options", "db_index", "table", "warning", "code", "example", "models", "=", "postgresql", "n’t", "tablespace", "value", "performance", "sqlite", "charfield", "mariadb", "use", "self"], "type": "documentation"},
{"title": "Multiple databases", "url": "https://docs.djangoproject.com/en/5.1/topics/db/multi-db/", "content": "Multiple databases ¶ This topic guide describes Django’s support for interacting with\nmultiple databases. Most of the rest of Django’s documentation assumes\nyou are interacting with a single database. If you want to interact\nwith multiple databases, you’ll need to take some additional steps. See also See Multi-database support for information about testing with multiple\ndatabases. Defining your databases ¶ The first step to using more than one database with Django is to tell\nDjango about the database servers you’ll be using. This is done using\nthe DATABASES setting. This setting maps database aliases,\nwhich are a way to refer to a specific database throughout Django, to\na dictionary of settings for that specific connection. The settings in\nthe inner dictionaries are described fully in the DATABASES documentation. Databases can have any alias you choose. However, the alias default has special significance. Django uses the database with\nthe alias of default when no other database has been selected. The following is an example settings.py snippet defining two\ndatabases – a default PostgreSQL database and a MySQL database called users : DATABASES = { \"default\" : { \"NAME\" : \"app_data\" , \"ENGINE\" : \"django.db.backends.postgresql\" , \"USER\" : \"postgres_user\" , \"PASSWORD\" : \"s3krit\" , }, \"users\" : { \"NAME\" : \"user_data\" , \"ENGINE\" : \"django.db.backends.mysql\" , \"USER\" : \"mysql_user\" , \"PASSWORD\" : \"priv4te\" , }, } If the concept of a default database doesn’t make sense in the context\nof your project, you need to be careful to always specify the database\nthat you want to use. Django requires that a default database entry\nbe defined, but the parameters dictionary can be left blank if it will not be\nused. To do this, you must set up DATABASE_ROUTERS for all of your\napps’ models, including those in any contrib and third-party apps you’re using,\nso that no queries are routed to the default database. The following is an\nexample settings.py snippet defining two non-default databases, with the default entry intentionally left empty: DATABASES = { \"default\" : {}, \"users\" : { \"NAME\" : \"user_data\" , \"ENGINE\" : \"django.db.backends.mysql\" , \"USER\" : \"mysql_user\" , \"PASSWORD\" : \"superS3cret\" , }, \"customers\" : { \"NAME\" : \"customer_data\" , \"ENGINE\" : \"django.db.backends.mysql\" , \"USER\" : \"mysql_cust\" , \"PASSWORD\" : \"veryPriv@ate\" , }, } If you attempt to access a database that you haven’t defined in your DATABASES setting, Django will raise a django.utils.connection.ConnectionDoesNotExist exception. Synchronizing your databases ¶ The migrate management command operates on one database at a\ntime. By default, it operates on the default database, but by\nproviding the --database option, you can tell it\nto synchronize a different database. So, to synchronize all models onto\nall databases in the first example above, you would need to call: $ ./manage.py migrate\n$ ./manage.py migrate --database = users If you don’t want every application to be synchronized onto a\nparticular database, you can define a database\nrouter that implements a policy\nconstraining the availability of particular models. If, as in the second example above, you’ve left the default database empty,\nyou must provide a database name each time you run migrate . Omitting\nthe database name would raise an error. For the second example: $ ./manage.py migrate --database = users\n$ ./manage.py migrate --database = customers Using other management commands ¶ Most other django-admin commands that interact with the database operate in\nthe same way as migrate – they only ever operate on one database at\na time, using --database to control the database used. An exception to this rule is the makemigrations command. It\nvalidates the migration history in the databases to catch problems with the\nexisting migration files (which could be caused by editing them) before\ncreating new migrations. By default, it checks only the default database,\nbut it consults the allow_migrate() method of routers if any are installed. Automatic database routing ¶ The easiest way to use multiple databases is to set up a database\nrouting scheme. The default routing scheme ensures that objects remain\n‘sticky’ to their original database (i.e., an object retrieved from\nthe foo database will be saved on the same database). The default\nrouting scheme ensures that if a database isn’t specified, all queries\nfall back to the default database. You don’t have to do anything to activate the default routing scheme\n– it is provided ‘out of the box’ on every Django project. However,\nif you want to implement more interesting database allocation\nbehaviors, you can define and install your own database routers. Database routers ¶ A database Router is a class that provides up to four methods: db_for_read ( model , ** hints ) ¶ Suggest the database that should be used for read operations for\nobjects of type model . If a database operation is able to provide any additional\ninformation that might assist in selecting a database, it will be\nprovided in the hints dictionary. Details on valid hints are\nprovided below . Returns None if there is no suggestion. db_for_write ( model , ** hints ) ¶ Suggest the database that should be used for writes of objects of\ntype Model. If a database operation is able to provide any additional\ninformation that might assist in selecting a database, it will be\nprovided in the hints dictionary. Details on valid hints are\nprovided below . Returns None if there is no suggestion. allow_relation ( obj1 , obj2 , ** hints ) ¶ Return True if a relation between obj1 and obj2 should be\nallowed, False if the relation should be prevented, or None if\nthe router has no opinion. This is purely a validation operation,\nused by foreign key and many to many operations to determine if a\nrelation should be allowed between two objects. If no router has an opinion (i.e. all routers return None ), only\nrelations within the same database are allowed. allow_migrate ( db , app_label , model_name = None , ** hints ) ¶ Determine if the migration operation is allowed to run on the database with\nalias db . Return True if the operation should run, False if it\nshouldn’t run, or None if the router has no opinion. The app_label positional argument is the label of the application\nbeing migrated. model_name is set by most migration operations to the value of model._meta.model_name (the lowercased version of the model __name__ ) of the model being migrated. Its value is None for the RunPython and RunSQL operations unless they\nprovide it using hints. hints are used by certain operations to communicate additional\ninformation to the router. When model_name is set, hints normally contains the model class\nunder the key 'model' . Note that it may be a historical model , and thus not have any custom attributes, methods, or\nmanagers. You should only rely on _meta . This method can also be used to determine the availability of a model on a\ngiven database. makemigrations always creates migrations for model changes, but\nif allow_migrate() returns False , any migration operations for the model_name will be silently skipped when running migrate on\nthe db . Changing the behavior of allow_migrate() for models that\nalready have migrations may result in broken foreign keys, extra tables,\nor missing tables. When makemigrations verifies the migration\nhistory, it skips databases where no app is allowed to migrate. A router doesn’t have to provide all these methods – it may omit one\nor more of them. If one of the methods is omitted, Django will skip\nthat router when performing the relevant check. Hints ¶ The hints received by the database router can be used to decide which\ndatabase should receive a given request. At present, the only hint that will be provided is instance , an\nobject instance that is related to the read or write operation that is\nunderway. This might be the instance that is being saved, or it might\nbe an instance that is being added in a many-to-many relation. In some\ncases, no instance hint will be provided at all. The router checks for\nthe existence of an instance hint, and determine if that hint should be\nused to alter routing behavior. Using routers ¶ Database routers are installed using the DATABASE_ROUTERS setting. This setting defines a list of class names, each specifying a\nrouter that should be used by the base router\n( django.db.router ). The base router is used by Django’s database operations to allocate\ndatabase usage. Whenever a query needs to know which database to use,\nit calls the base router, providing a model and a hint (if\navailable). The base router tries each router class in turn until one returns\na database suggestion. If no routers return a suggestion, the base router tries\nthe current instance._state.db of the hint instance. If no hint instance\nwas provided, or instance._state.db is None , the base router will allocate the default database. An example ¶ Example purposes only! This example is intended as a demonstration of how the router\ninfrastructure can be used to alter database usage. It\nintentionally ignores some complex issues in order to\ndemonstrate how routers are used. This example won’t work if any of the models in myapp contain\nrelationships to models outside of the other database. Cross-database relationships introduce referential integrity problems that Django can’t\ncurrently handle. The primary/replica (referred to as master/slave by some databases)\nconfiguration described is also flawed – it\ndoesn’t provide any solution for handling replication lag (i.e.,\nquery inconsistencies introduced because of the time taken for a\nwrite to propagate to the replicas). It also doesn’t consider the\ninteraction of transactions with the database utilization strategy. So - what does this mean in practice? Let’s consider another sample\nconfiguration. This one will have several databases: one for the auth application, and all other apps using a primary/replica setup\nwith two read replicas. Here are the settings specifying these\ndatabases: DATABASES = { \"default\" : {}, \"auth_db\" : { \"NAME\" : \"auth_db_name\" , \"ENGINE\" : \"django.db.backends.mysql\" , \"USER\" : \"mysql_user\" , \"PASSWORD\" : \"swordfish\" , }, \"primary\" : { \"NAME\" : \"primary_name\" , \"ENGINE\" : \"django.db.backends.mysql\" , \"USER\" : \"mysql_user\" , \"PASSWORD\" : \"spam\" , }, \"replica1\" : { \"NAME\" : \"replica1_name\" , \"ENGINE\" : \"django.db.backends.mysql\" , \"USER\" : \"mysql_user\" , \"PASSWORD\" : \"eggs\" , }, \"replica2\" : { \"NAME\" : \"replica2_name\" , \"ENGINE\" : \"django.db.backends.mysql\" , \"USER\" : \"mysql_user\" , \"PASSWORD\" : \"bacon\" , }, } Now we’ll need to handle routing. First we want a router that knows to\nsend queries for the auth and contenttypes apps to auth_db ( auth models are linked to ContentType , so they must be stored in the\nsame database): class AuthRouter : \"\"\" A router to control all database operations on models in the auth and contenttypes applications. \"\"\" route_app_labels = { \"auth\" , \"contenttypes\" } def db_for_read ( self , model , ** hints ): \"\"\" Attempts to read auth and contenttypes models go to auth_db. \"\"\" if model . _meta . app_label in self . route_app_labels : return \"auth_db\" return None def db_for_write ( self , model , ** hints ): \"\"\" Attempts to write auth and contenttypes models go to auth_db. \"\"\" if model . _meta . app_label in self . route_app_labels : return \"auth_db\" return None def allow_relation ( self , obj1 , obj2 , ** hints ): \"\"\" Allow relations if a model in the auth or contenttypes apps is involved. \"\"\" if ( obj1 . _meta . app_label in self . route_app_labels or obj2 . _meta . app_label in self . route_app_labels ): return True return None def allow_migrate ( self , db , app_label , model_name = None , ** hints ): \"\"\" Make sure the auth and contenttypes apps only appear in the 'auth_db' database. \"\"\" if app_label in self . route_app_labels : return db == \"auth_db\" return None And we also want a router that sends all other apps to the\nprimary/replica configuration, and randomly chooses a replica to read\nfrom: import random class PrimaryReplicaRouter : def db_for_read ( self , model , ** hints ): \"\"\" Reads go to a randomly-chosen replica. \"\"\" return random . choice ([ \"replica1\" , \"replica2\" ]) def db_for_write ( self , model , ** hints ): \"\"\" Writes always go to primary. \"\"\" return \"primary\" def allow_relation ( self , obj1 , obj2 , ** hints ): \"\"\" Relations between objects are allowed if both objects are in the primary/replica pool. \"\"\" db_set = { \"primary\" , \"replica1\" , \"replica2\" } if obj1 . _state . db in db_set and obj2 . _state . db in db_set : return True return None def allow_migrate ( self , db , app_label , model_name = None , ** hints ): \"\"\" All non-auth models end up in this pool. \"\"\" return True Finally, in the settings file, we add the following (substituting path.to. with the actual Python path to the module(s) where the\nrouters are defined): DATABASE_ROUTERS = [ \"path.to.AuthRouter\" , \"path.to.PrimaryReplicaRouter\" ] The order in which routers are processed is significant. Routers will\nbe queried in the order they are listed in the DATABASE_ROUTERS setting. In this example, the AuthRouter is processed before the PrimaryReplicaRouter , and as a\nresult, decisions concerning the models in auth are processed\nbefore any other decision is made. If the DATABASE_ROUTERS setting listed the two routers in the other order, PrimaryReplicaRouter.allow_migrate() would be processed first. The\ncatch-all nature of the PrimaryReplicaRouter implementation would mean\nthat all models would be available on all databases. With this setup installed, and all databases migrated as per Synchronizing your databases , lets run some Django code: >>> # This retrieval will be performed on the 'auth_db' database >>> fred = User . objects . get ( username = \"fred\" ) >>> fred . first_name = \"Frederick\" >>> # This save will also be directed to 'auth_db' >>> fred . save () >>> # These retrieval will be randomly allocated to a replica database >>> dna = Person . objects . get ( name = \"Douglas Adams\" ) >>> # A new object has no database allocation when created >>> mh = Book ( title = \"Mostly Harmless\" ) >>> # This assignment will consult the router, and set mh onto >>> # the same database as the author object >>> mh . author = dna >>> # This save will force the 'mh' instance onto the primary database... >>> mh . save () >>> # ... but if we re-retrieve the object, it will come back on a replica >>> mh = Book . objects . get ( title = \"Mostly Harmless\" ) This example defined a router to handle interaction with models from the auth app, and other routers to handle interaction with all other apps. If\nyou left your default database empty and don’t want to define a catch-all\ndatabase router to handle all apps not otherwise specified, your routers must\nhandle the names of all apps in INSTALLED_APPS before you migrate.\nSee Behavior of contrib apps for information about contrib apps\nthat must be together in one database. Manually selecting a database ¶ Django also provides an API that allows you to maintain complete control\nover database usage in your code. A manually specified database allocation\nwill take priority over a database allocated by a router. Manually selecting a database for a QuerySet ¶ You can select the database for a QuerySet at any point in the QuerySet “chain.” Call using() on the QuerySet to get another QuerySet that uses the specified database. using() takes a single argument: the alias of the database on\nwhich you want to run the query. For example: >>> # This will run on the 'default' database. >>> Author . objects . all () >>> # So will this. >>> Author . objects . using ( \"default\" ) >>> # This will run on the 'other' database. >>> Author . objects . using ( \"other\" ) Selecting a database for save() ¶ Use the using keyword to Model.save() to specify to which\ndatabase the data should be saved. For example, to save an object to the legacy_users database, you’d\nuse this: >>> my_object . save ( using = \"legacy_users\" ) If you don’t specify using , the save() method will save into\nthe default database allocated by the routers. Moving an object from one database to another ¶ If you’ve saved an instance to one database, it might be tempting to\nuse save(using=...) as a way to migrate the instance to a new\ndatabase. However, if you don’t take appropriate steps, this could\nhave some unexpected consequences. Consider the following example: >>> p = Person ( name = \"Fred\" ) >>> p . save ( using = \"first\" ) # (statement 1) >>> p . save ( using = \"second\" ) # (statement 2) In statement 1, a new Person object is saved to the first database. At this time, p doesn’t have a primary key, so Django\nissues an SQL INSERT statement. This creates a primary key, and\nDjango assigns that primary key to p . When the save occurs in statement 2, p already has a primary key\nvalue, and Django will attempt to use that primary key on the new\ndatabase. If the primary key value isn’t in use in the second database, then you won’t have any problems – the object will be\ncopied to the new database. However, if the primary key of p is already in use on the second database, the existing object in the second database\nwill be overridden when p is saved. You can avoid this in two ways. First, you can clear the primary key\nof the instance. If an object has no primary key, Django will treat it\nas a new object, avoiding any loss of data on the second database: >>> p = Person ( name = \"Fred\" ) >>> p . save ( using = \"first\" ) >>> p . pk = None # Clear the primary key. >>> p . save ( using = \"second\" ) # Write a completely new object. The second option is to use the force_insert option to save() to ensure that Django does an SQL INSERT : >>> p = Person ( name = \"Fred\" ) >>> p . save ( using = \"first\" ) >>> p . save ( using = \"second\" , force_insert = True ) This will ensure that the person named Fred will have the same\nprimary key on both databases. If that primary key is already in use\nwhen you try to save onto the second database, an error will be\nraised. Selecting a database to delete from ¶ By default, a call to delete an existing object will be executed on\nthe same database that was used to retrieve the object in the first\nplace: >>> u = User . objects . using ( \"legacy_users\" ) . get ( username = \"fred\" ) >>> u . delete () # will delete from the `legacy_users` database To specify the database from which a model will be deleted, pass a using keyword argument to the Model.delete() method. This\nargument works just like the using keyword argument to save() . For example, if you’re migrating a user from the legacy_users database to the new_users database, you might use these commands: >>> user_obj . save ( using = \"new_users\" ) >>> user_obj . delete ( using = \"legacy_users\" ) Using managers with multiple databases ¶ Use the db_manager() method on managers to give managers access to\na non-default database. For example, say you have a custom manager method that touches the\ndatabase – User.objects.create_user() . Because create_user() is a manager method, not a QuerySet method, you can’t do User.objects.using('new_users').create_user() . (The create_user() method is only available on User.objects , the\nmanager, not on QuerySet objects derived from the manager.) The\nsolution is to use db_manager() , like this: User . objects . db_manager ( \"new_users\" ) . create_user ( ... ) db_manager() returns a copy of the manager bound to the database you specify. Using get_queryset() with multiple databases ¶ If you’re overriding get_queryset() on your manager, be sure to\neither call the method on the parent (using super() ) or do the\nappropriate handling of the _db attribute on the manager (a string\ncontaining the name of the database to use). For example, if you want to return a custom QuerySet class from\nthe get_queryset method, you could do this: class MyManager ( models . Manager ): def get_queryset ( self ): qs = CustomQuerySet ( self . model ) if self . _db is not None : qs = qs . using ( self . _db ) return qs Exposing multiple databases in Django’s admin interface ¶ Django’s admin doesn’t have any explicit support for multiple\ndatabases. If you want to provide an admin interface for a model on a\ndatabase other than that specified by your router chain, you’ll\nneed to write custom ModelAdmin classes\nthat will direct the admin to use a specific database for content. ModelAdmin objects have the following methods that require customization\nfor multiple-database support: class MultiDBModelAdmin ( admin . ModelAdmin ): # A handy constant for the name of the alternate database. using = \"other\" def save_model ( self , request , obj , form , change ): # Tell Django to save objects to the 'other' database. obj . save ( using = self . using ) def delete_model ( self , request , obj ): # Tell Django to delete objects from the 'other' database obj . delete ( using = self . using ) def get_queryset ( self , request ): # Tell Django to look for objects on the 'other' database. return super () . get_queryset ( request ) . using ( self . using ) def formfield_for_foreignkey ( self , db_field , request , ** kwargs ): # Tell Django to populate ForeignKey widgets using a query # on the 'other' database. return super () . formfield_for_foreignkey ( db_field , request , using = self . using , ** kwargs ) def formfield_for_manytomany ( self , db_field , request , ** kwargs ): # Tell Django to populate ManyToMany widgets using a query # on the 'other' database. return super () . formfield_for_manytomany ( db_field , request , using = self . using , ** kwargs ) The implementation provided here implements a multi-database strategy\nwhere all objects of a given type are stored on a specific database\n(e.g., all User objects are in the other database). If your\nusage of multiple databases is more complex, your ModelAdmin will\nneed to reflect that strategy. InlineModelAdmin objects can be handled in a\nsimilar fashion. They require three customized methods: class MultiDBTabularInline ( admin . TabularInline ): using = \"other\" def get_queryset ( self , request ): # Tell Django to look for inline objects on the 'other' database. return super () . get_queryset ( request ) . using ( self . using ) def formfield_for_foreignkey ( self , db_field , request , ** kwargs ): # Tell Django to populate ForeignKey widgets using a query # on the 'other' database. return super () . formfield_for_foreignkey ( db_field , request , using = self . using , ** kwargs ) def formfield_for_manytomany ( self , db_field , request , ** kwargs ): # Tell Django to populate ManyToMany widgets using a query # on the 'other' database. return super () . formfield_for_manytomany ( db_field , request , using = self . using , ** kwargs ) Once you’ve written your model admin definitions, they can be\nregistered with any Admin instance: from django.contrib import admin # Specialize the multi-db admin objects for use with specific models. class BookInline ( MultiDBTabularInline ): model = Book class PublisherAdmin ( MultiDBModelAdmin ): inlines = [ BookInline ] admin . site . register ( Author , MultiDBModelAdmin ) admin . site . register ( Publisher , PublisherAdmin ) othersite = admin . AdminSite ( \"othersite\" ) othersite . register ( Publisher , MultiDBModelAdmin ) This example sets up two admin sites. On the first site, the Author and Publisher objects are exposed; Publisher objects have a tabular inline showing books published by that\npublisher. The second site exposes just publishers, without the\ninlines. Using raw cursors with multiple databases ¶ If you are using more than one database you can use django.db.connections to obtain the connection (and cursor) for a\nspecific database. django.db.connections is a dictionary-like\nobject that allows you to retrieve a specific connection using its\nalias: from django.db import connections with connections [ \"my_db_alias\" ] . cursor () as cursor : ... Limitations of multiple databases ¶ Cross-database relations ¶ Django doesn’t currently provide any support for foreign key or\nmany-to-many relationships spanning multiple databases. If you\nhave used a router to partition models to different databases,\nany foreign key and many-to-many relationships defined by those\nmodels must be internal to a single database. This is because of referential integrity. In order to maintain a\nrelationship between two objects, Django needs to know that the\nprimary key of the related object is valid. If the primary key is\nstored on a separate database, it’s not possible to easily evaluate\nthe validity of a primary key. If you’re using Postgres, SQLite, Oracle, or MySQL with InnoDB, this is\nenforced at the database integrity level – database level key\nconstraints prevent the creation of relations that can’t be validated. However, if you’re using MySQL with MyISAM tables, there is no enforced\nreferential integrity; as a result, you may be able to ‘fake’ cross database\nforeign keys. However, this configuration is not officially supported by\nDjango. Behavior of contrib apps ¶ Several contrib apps include models, and some apps depend on others. Since\ncross-database relationships are impossible, this creates some restrictions on\nhow you can split these models across databases: each one of contenttypes.ContentType , sessions.Session and sites.Site can be stored in any database, given a suitable router. auth models — User , Group and Permission — are linked\ntogether and linked to ContentType , so they must be stored in the same\ndatabase as ContentType . admin depends on auth , so its models must be in the same database\nas auth . flatpages and redirects depend on sites , so their models must be\nin the same database as sites . In addition, some objects are automatically created just after migrate creates a table to hold them in a database: a default Site , a ContentType for each model (including those not stored in that\ndatabase), the Permission s for each model (including those not stored in that\ndatabase). For common setups with multiple databases, it isn’t useful to have these\nobjects in more than one database. Common setups include primary/replica and\nconnecting to external databases. Therefore, it’s recommended to write a database router that allows synchronizing\nthese three models to only one database. Use the same approach for contrib\nand third-party apps that don’t need their tables in multiple databases. Warning If you’re synchronizing content types to more than one database, be aware\nthat their primary keys may not match across databases. This may result in\ndata corruption or data loss.", "keywords": ["transactions", "setups", "hints", "type", "book", "statement", "verypriv@ate", "def", "place", "db_for_write", "username", "settings", "user_obj", "classes", "replica2", "method", "party", "customqueryset", "person", "authrouter", "use", "ways", "sample", "project", "runpython", "topic", "cursor", "publisher", "way", "default", "option", "model.save", "postgres", "contrib", "auth_db", "constraints", "users", "guide", "primary_name", "self", "label", "router", "db_for_read", "argument", "django.utils.connection", "version", "app_label", "chain", "assumes", "cross", "meta", "reads", "./manage.py", "policy", "steps", "supers3cret", "name", "relationships", "flatpages", "first_name", "admin", "python", "interaction", "addition", "my_object", "allow_migrate", "migration", "sessions", "inlines", "others", "rule", "dna", "my_db_alias", "*", "relations", "availability", "model_name", "turn", "publisheradmin", "operation", "write", "significance", "modeladmin", "key", "parameters", "alias", "issues", "user.objects", "state", "dictionary", "fashion", "formfield_for_manytomany", "error", "replica2_name", "inline", "migrations", "control", "writes", "setting", "order", "documentation", "-", "django.db.connections", "creation", "priv4te", "sense", "routers", "pk", "application", "adams", "migrate", "table", "customization", "behavior", "maps", "aliases", "rest", "concept", "files", "query", "following", "django.db.backends.postgresql", "import", "information", "using", "result", "#", "point", "limitations", "¶", "allocation", "adminsite", "change", "sites", "infrastructure", "example", "session", "value", "definitions", "primary", "existence", "save", "django.db", "details", "inlinemodeladmin", "setup", "decisions", "form", "object", "postgresql", "attributes", "one", "returns", "retrieval", "db_field", "parent", "demonstration", "assignment", "myapp", "password", "fred", "api", "box", "insert", "level", "django", "save_model", "validation", "approach", "loss", "relation", "u", "=", "objects", "scheme", "implementation", "connection", "interface", "pool", "mysql", "replicas", "nature", "widgets", "handling", "replica", "tabularinline", "time", "primaryreplicarouter.allow_migrate", "mysql_user", "exception", "oracle", "delete", "queryset", "innodb", "spam", "commands", "ensures", "replica1", "site", "manager", "corruption", "routing", "slave", "create_user", "primaryreplicarouter", "multidbtabularinline", "frederick", "copy", "custom", "books", "methods", "keyword", "none", "base", "access", "command", ">", "content", "db_manager", "decision", "makemigrations", "inconsistencies", "applications", "request", "redirects", "tables", "engine", "determine", "data", "obj1", "contenttype", "runsql", "group", "contain", "harmless", "present", "new_users", "attempts", "user_data", "obj2", "kwargs", "keys", "configuration", "sql", "author", "path", "s3krit", "managers", "auth", "contenttypes", "apps", "practice", "legacy_users", "context", "db", "save(using=", "publishers", "models", "connectiondoesnotexist", "get_queryset", "title", "call", "mh", "customer_data", "opinion", "bookinline", "support", "types", "douglas", "p", "changes", "formfield_for_foreignkey", "django.contrib", "problems", "servers", "false", "management", "customers", "myisam", "_", "model.delete", "allow_relation", "check", "database_routers", "cases", "solution", "user.objects.using('new_users').create_user", "postgres_user", "super", "eggs", "permission", "replica1_name", "behaviors", "consequences", "usage", "model", "lag", "snippet", "choice", "purposes", "auth_db_name", "n’t", "sqlite", "class", "multidbmodeladmin", "return", "constant", "force_insert", "connections", "attribute", "restrictions", "string", "django.db.backends.mysql", "list", "module(s", "db_set", "app", "validity", "priority", "user", "replication", "file", "queries", "read", "bacon", "model._meta.model_name", "operations", "route_app_labels", "dictionaries", "history", "hint", "names", "--database", "master", "delete_model", "cursors", "utilization", "foo", "foreignkey", "database", "relationship", "databases", "mymanager", "instance", "code", "integrity", "partition", "entry", "step", "strategy", "suggestion", "catch"], "type": "documentation"},
{"title": "Database transactions", "url": "https://docs.djangoproject.com/en/5.1/topics/db/transactions/", "content": "Database transactions ¶ Django gives you a few ways to control how database transactions are managed. Managing database transactions ¶ Django’s default transaction behavior ¶ Django’s default behavior is to run in autocommit mode. Each query is\nimmediately committed to the database, unless a transaction is active. See below for details . Django uses transactions or savepoints automatically to guarantee the\nintegrity of ORM operations that require multiple queries, especially delete() and update() queries. Django’s TestCase class also wraps each test in a\ntransaction for performance reasons. Tying transactions to HTTP requests ¶ A common way to handle transactions on the web is to wrap each request in a\ntransaction. Set ATOMIC_REQUESTS to True in the configuration of each database for which you want to enable\nthis behavior. It works like this. Before calling a view function, Django starts a\ntransaction. If the response is produced without problems, Django commits the\ntransaction. If the view produces an exception, Django rolls back the\ntransaction. You may perform subtransactions using savepoints in your view code, typically\nwith the atomic() context manager. However, at the end of the view,\neither all or none of the changes will be committed. Warning While the simplicity of this transaction model is appealing, it also makes it\ninefficient when traffic increases. Opening a transaction for every view has\nsome overhead. The impact on performance depends on the query patterns of your\napplication and on how well your database handles locking. Per-request transactions and streaming responses When a view returns a StreamingHttpResponse , reading\nthe contents of the response will often execute code to generate the\ncontent. Since the view has already returned, such code runs outside of\nthe transaction. Generally speaking, it isn’t advisable to write to the database while\ngenerating a streaming response, since there’s no sensible way to handle\nerrors after starting to send the response. In practice, this feature wraps every view function in the atomic() decorator described below. Note that only the execution of your view is enclosed in the transactions.\nMiddleware runs outside of the transaction, and so does the rendering of\ntemplate responses. When ATOMIC_REQUESTS is enabled, it’s\nstill possible to prevent views from running in a transaction. non_atomic_requests ( using = None ) [source] ¶ This decorator will negate the effect of ATOMIC_REQUESTS for a given view: from django.db import transaction @transaction . non_atomic_requests def my_view ( request ): do_stuff () @transaction . non_atomic_requests ( using = \"other\" ) def my_other_view ( request ): do_stuff_on_the_other_database () It only works if it’s applied to the view itself. Controlling transactions explicitly ¶ Django provides a single API to control database transactions. atomic ( using = None , savepoint = True , durable = False ) [source] ¶ Atomicity is the defining property of database transactions. atomic allows us to create a block of code within which the atomicity on the\ndatabase is guaranteed. If the block of code is successfully completed, the\nchanges are committed to the database. If there is an exception, the\nchanges are rolled back. atomic blocks can be nested. In this case, when an inner block\ncompletes successfully, its effects can still be rolled back if an\nexception is raised in the outer block at a later point. It is sometimes useful to ensure an atomic block is always the\noutermost atomic block, ensuring that any database changes are\ncommitted when the block is exited without errors. This is known as\ndurability and can be achieved by setting durable=True . If the atomic block is nested within another it raises a RuntimeError . atomic is usable both as a decorator : from django.db import transaction @transaction . atomic def viewfunc ( request ): # This code executes inside a transaction. do_stuff () and as a context manager : from django.db import transaction def viewfunc ( request ): # This code executes in autocommit mode (Django's default). do_stuff () with transaction . atomic (): # This code executes inside a transaction. do_more_stuff () Wrapping atomic in a try/except block allows for natural handling of\nintegrity errors: from django.db import IntegrityError , transaction @transaction . atomic def viewfunc ( request ): create_parent () try : with transaction . atomic (): generate_relationships () except IntegrityError : handle_exception () add_children () In this example, even if generate_relationships() causes a database\nerror by breaking an integrity constraint, you can execute queries in add_children() , and the changes from create_parent() are still\nthere and bound to the same transaction. Note that any operations attempted\nin generate_relationships() will already have been rolled back safely\nwhen handle_exception() is called, so the exception handler can also\noperate on the database if necessary. Avoid catching exceptions inside atomic ! When exiting an atomic block, Django looks at whether it’s exited\nnormally or with an exception to determine whether to commit or roll\nback. If you catch and handle exceptions inside an atomic block,\nyou may hide from Django the fact that a problem has happened. This\ncan result in unexpected behavior. This is mostly a concern for DatabaseError and its\nsubclasses such as IntegrityError . After such an\nerror, the transaction is broken and Django will perform a rollback at\nthe end of the atomic block. If you attempt to run database\nqueries before the rollback happens, Django will raise a TransactionManagementError . You may\nalso encounter this behavior when an ORM-related signal handler raises\nan exception. The correct way to catch database errors is around an atomic block\nas shown above. If necessary, add an extra atomic block for this\npurpose. This pattern has another advantage: it delimits explicitly\nwhich operations will be rolled back if an exception occurs. If you catch exceptions raised by raw SQL queries, Django’s behavior\nis unspecified and database-dependent. You may need to manually revert app state when rolling back a transaction. The values of a model’s fields won’t be reverted when a transaction\nrollback happens. This could lead to an inconsistent model state unless\nyou manually restore the original field values. For example, given MyModel with an active field, this snippet\nensures that the if obj.active check at the end uses the correct\nvalue if updating active to True fails in the transaction: from django.db import DatabaseError , transaction obj = MyModel ( active = False ) obj . active = True try : with transaction . atomic (): obj . save () except DatabaseError : obj . active = False if obj . active : ... This also applies to any other mechanism that may hold app state, such\nas caching or global variables. For example, if the code proactively\nupdates data in the cache after saving an object, it’s recommended to\nuse transaction.on_commit() instead, to defer cache alterations until the transaction is actually\ncommitted. In order to guarantee atomicity, atomic disables some APIs. Attempting\nto commit, roll back, or change the autocommit state of the database\nconnection within an atomic block will raise an exception. atomic takes a using argument which should be the name of a\ndatabase. If this argument isn’t provided, Django uses the \"default\" database. Under the hood, Django’s transaction management code: opens a transaction when entering the outermost atomic block; creates a savepoint when entering an inner atomic block; releases or rolls back to the savepoint when exiting an inner block; commits or rolls back the transaction when exiting the outermost block. You can disable the creation of savepoints for inner blocks by setting the savepoint argument to False . If an exception occurs, Django will\nperform the rollback when exiting the first parent block with a savepoint\nif there is one, and the outermost block otherwise. Atomicity is still\nguaranteed by the outer transaction. This option should only be used if\nthe overhead of savepoints is noticeable. It has the drawback of breaking\nthe error handling described above. You may use atomic when autocommit is turned off. It will only use\nsavepoints, even for the outermost block. Performance considerations Open transactions have a performance cost for your database server. To\nminimize this overhead, keep your transactions as short as possible. This\nis especially important if you’re using atomic() in long-running\nprocesses, outside of Django’s request / response cycle. Autocommit ¶ Why Django uses autocommit ¶ In the SQL standards, each SQL query starts a transaction, unless one is\nalready active. Such transactions must then be explicitly committed or rolled\nback. This isn’t always convenient for application developers. To alleviate this\nproblem, most databases provide an autocommit mode. When autocommit is turned\non and no transaction is active, each SQL query gets wrapped in its own\ntransaction. In other words, not only does each such query start a\ntransaction, but the transaction also gets automatically committed or rolled\nback, depending on whether the query succeeded. PEP 249 , the Python Database API Specification v2.0, requires autocommit to\nbe initially turned off. Django overrides this default and turns autocommit\non. To avoid this, you can deactivate the transaction management , but it isn’t recommended. Deactivating transaction management ¶ You can totally disable Django’s transaction management for a given database\nby setting AUTOCOMMIT to False in its\nconfiguration. If you do this, Django won’t enable autocommit, and won’t\nperform any commits. You’ll get the regular behavior of the underlying\ndatabase library. This requires you to commit explicitly every transaction, even those started\nby Django or by third-party libraries. Thus, this is best used in situations\nwhere you want to run your own transaction-controlling middleware or do\nsomething really strange. Performing actions after commit ¶ Sometimes you need to perform an action related to the current database\ntransaction, but only if the transaction successfully commits. Examples might\ninclude a background task, an email notification, or a cache invalidation. on_commit() allows you to register callbacks that will be executed after\nthe open transaction is successfully committed: on_commit ( func , using = None , robust = False ) [source] ¶ Pass a function, or any callable, to on_commit() : from django.db import transaction def send_welcome_email (): ... transaction . on_commit ( send_welcome_email ) Callbacks will not be passed any arguments, but you can bind them with functools.partial() : from functools import partial for user in users : transaction . on_commit ( partial ( send_invite_email , user = user )) Callbacks are called after the open transaction is successfully committed. If\nthe transaction is instead rolled back (typically when an unhandled exception\nis raised in an atomic() block), the callback will be discarded, and\nnever called. If you call on_commit() while there isn’t an open transaction,\nthe callback will be executed immediately. It’s sometimes useful to register callbacks that can fail. Passing robust=True allows the next callbacks to be executed even if the current\none throws an exception. All errors derived from Python’s Exception class\nare caught and logged to the django.db.backends.base logger. You can use TestCase.captureOnCommitCallbacks() to test callbacks\nregistered with on_commit() . Savepoints ¶ Savepoints (i.e. nested atomic() blocks) are handled correctly. That is,\nan on_commit() callable registered after a savepoint (in a nested atomic() block) will be called after the outer transaction is committed,\nbut not if a rollback to that savepoint or any previous savepoint occurred\nduring the transaction: with transaction . atomic (): # Outer atomic, start a new transaction transaction . on_commit ( foo ) with transaction . atomic (): # Inner atomic block, create a savepoint transaction . on_commit ( bar ) # foo() and then bar() will be called when leaving the outermost block On the other hand, when a savepoint is rolled back (due to an exception being\nraised), the inner callable will not be called: with transaction . atomic (): # Outer atomic, start a new transaction transaction . on_commit ( foo ) try : with transaction . atomic (): # Inner atomic block, create a savepoint transaction . on_commit ( bar ) raise SomeError () # Raising an exception - abort the savepoint except SomeError : pass # foo() will be called, but not bar() Order of execution ¶ On-commit functions for a given transaction are executed in the order they were\nregistered. Exception handling ¶ If one on-commit function registered with robust=False within a given\ntransaction raises an uncaught exception, no later registered functions in that\nsame transaction will run. This is the same behavior as if you’d executed the\nfunctions sequentially yourself without on_commit() . Timing of execution ¶ Your callbacks are executed after a successful commit, so a failure in a\ncallback will not cause the transaction to roll back. They are executed\nconditionally upon the success of the transaction, but they are not part of\nthe transaction. For the intended use cases (mail notifications, background\ntasks, etc.), this should be fine. If it’s not (if your follow-up action is so\ncritical that its failure should mean the failure of the transaction itself),\nthen you don’t want to use the on_commit() hook. Instead, you may want two-phase commit such as the psycopg Two-Phase Commit protocol support and the optional Two-Phase Commit Extensions\nin the Python DB-API specification . Callbacks are not run until autocommit is restored on the connection following\nthe commit (because otherwise any queries done in a callback would open an\nimplicit transaction, preventing the connection from going back into autocommit\nmode). When in autocommit mode and outside of an atomic() block, the function\nwill run immediately, not on commit. On-commit functions only work with autocommit mode and the atomic() (or ATOMIC_REQUESTS ) transaction API. Calling on_commit() when\nautocommit is disabled and you are not within an atomic block will result in an\nerror. Use in tests ¶ Django’s TestCase class wraps each test in a transaction\nand rolls back that transaction after each test, in order to provide test\nisolation. This means that no transaction is ever actually committed, thus your on_commit() callbacks will never be run. You can overcome this limitation by using TestCase.captureOnCommitCallbacks() . This captures your on_commit() callbacks in a list, allowing you to make assertions on them,\nor emulate the transaction committing by calling them. Another way to overcome the limitation is to use TransactionTestCase instead of TestCase . This will mean your transactions are committed,\nand the callbacks will run. However TransactionTestCase flushes the database between tests,\nwhich is significantly slower than TestCase 's isolation. Why no rollback hook? ¶ A rollback hook is harder to implement robustly than a commit hook, since a\nvariety of things can cause an implicit rollback. For instance, if your database connection is dropped because your process was\nkilled without a chance to shut down gracefully, your rollback hook will never\nrun. But there is a solution: instead of doing something during the atomic block\n(transaction) and then undoing it if the transaction fails, use on_commit() to delay doing it in the first place until after the\ntransaction succeeds. It’s a lot easier to undo something you never did in the\nfirst place! Low-level APIs ¶ Warning Always prefer atomic() if possible at all. It accounts for the\nidiosyncrasies of each database and prevents invalid operations. The low level APIs are only useful if you’re implementing your own\ntransaction management. Autocommit ¶ Django provides an API in the django.db.transaction module to manage the\nautocommit state of each database connection. get_autocommit ( using = None ) [source] ¶ set_autocommit ( autocommit , using = None ) [source] ¶ These functions take a using argument which should be the name of a\ndatabase. If it isn’t provided, Django uses the \"default\" database. Autocommit is initially turned on. If you turn it off, it’s your\nresponsibility to restore it. Once you turn autocommit off, you get the default behavior of your database\nadapter, and Django won’t help you. Although that behavior is specified in PEP 249 , implementations of adapters aren’t always consistent with one\nanother. Review the documentation of the adapter you’re using carefully. You must ensure that no transaction is active, usually by issuing a commit() or a rollback() , before turning autocommit back on. Django will refuse to turn autocommit off when an atomic() block is\nactive, because that would break atomicity. Transactions ¶ A transaction is an atomic set of database queries. Even if your program\ncrashes, the database guarantees that either all the changes will be applied,\nor none of them. Django doesn’t provide an API to start a transaction. The expected way to\nstart a transaction is to disable autocommit with set_autocommit() . Once you’re in a transaction, you can choose either to apply the changes\nyou’ve performed until this point with commit() , or to cancel them with rollback() . These functions are defined in django.db.transaction . commit ( using = None ) [source] ¶ rollback ( using = None ) [source] ¶ These functions take a using argument which should be the name of a\ndatabase. If it isn’t provided, Django uses the \"default\" database. Django will refuse to commit or to rollback when an atomic() block is\nactive, because that would break atomicity. Savepoints ¶ A savepoint is a marker within a transaction that enables you to roll back\npart of a transaction, rather than the full transaction. Savepoints are\navailable with the SQLite, PostgreSQL, Oracle, and MySQL (when using the InnoDB\nstorage engine) backends. Other backends provide the savepoint functions, but\nthey’re empty operations – they don’t actually do anything. Savepoints aren’t especially useful if you are using autocommit, the default\nbehavior of Django. However, once you open a transaction with atomic() ,\nyou build up a series of database operations awaiting a commit or rollback. If\nyou issue a rollback, the entire transaction is rolled back. Savepoints\nprovide the ability to perform a fine-grained rollback, rather than the full\nrollback that would be performed by transaction.rollback() . When the atomic() decorator is nested, it creates a savepoint to allow\npartial commit or rollback. You’re strongly encouraged to use atomic() rather than the functions described below, but they’re still part of the\npublic API, and there’s no plan to deprecate them. Each of these functions takes a using argument which should be the name of\na database for which the behavior applies.  If no using argument is\nprovided then the \"default\" database is used. Savepoints are controlled by three functions in django.db.transaction : savepoint ( using = None ) [source] ¶ Creates a new savepoint. This marks a point in the transaction that is\nknown to be in a “good” state. Returns the savepoint ID ( sid ). savepoint_commit ( sid , using = None ) [source] ¶ Releases savepoint sid . The changes performed since the savepoint was\ncreated become part of the transaction. savepoint_rollback ( sid , using = None ) [source] ¶ Rolls back the transaction to savepoint sid . These functions do nothing if savepoints aren’t supported or if the database\nis in autocommit mode. In addition, there’s a utility function: clean_savepoints ( using = None ) [source] ¶ Resets the counter used to generate unique savepoint IDs. The following example demonstrates the use of savepoints: from django.db import transaction # open a transaction @transaction . atomic def viewfunc ( request ): a . save () # transaction now contains a.save() sid = transaction . savepoint () b . save () # transaction now contains a.save() and b.save() if want_to_keep_b : transaction . savepoint_commit ( sid ) # open transaction still contains a.save() and b.save() else : transaction . savepoint_rollback ( sid ) # open transaction now contains only a.save() Savepoints may be used to recover from a database error by performing a partial\nrollback. If you’re doing this inside an atomic() block, the entire block\nwill still be rolled back, because it doesn’t know you’ve handled the situation\nat a lower level! To prevent this, you can control the rollback behavior with\nthe following functions. get_rollback ( using = None ) [source] ¶ set_rollback ( rollback , using = None ) [source] ¶ Setting the rollback flag to True forces a rollback when exiting the\ninnermost atomic block. This may be useful to trigger a rollback without\nraising an exception. Setting it to False prevents such a rollback. Before doing that, make sure\nyou’ve rolled back the transaction to a known-good savepoint within the current\natomic block! Otherwise you’re breaking atomicity and data corruption may\noccur. Database-specific notes ¶ Savepoints in SQLite ¶ While SQLite supports savepoints, a flaw in the design of the sqlite3 module makes them hardly usable. When autocommit is enabled, savepoints don’t make sense. When it’s disabled, sqlite3 commits implicitly before savepoint statements. (In fact, it\ncommits before any statement other than SELECT , INSERT , UPDATE , DELETE and REPLACE .) This bug has two consequences: The low level APIs for savepoints are only usable inside a transaction i.e.\ninside an atomic() block. It’s impossible to use atomic() when autocommit is turned off. Transactions in MySQL ¶ If you’re using MySQL, your tables may or may not support transactions; it\ndepends on your MySQL version and the table types you’re using. (By\n“table types,” we mean something like “InnoDB” or “MyISAM”.) MySQL transaction\npeculiarities are outside the scope of this article, but the MySQL site has information on MySQL transactions . If your MySQL setup does not support transactions, then Django will always\nfunction in autocommit mode: statements will be executed and committed as soon\nas they’re called. If your MySQL setup does support transactions, Django\nwill handle transactions as explained in this document. Handling exceptions within PostgreSQL transactions ¶ Note This section is relevant only if you’re implementing your own transaction\nmanagement. This problem cannot occur in Django’s default mode and atomic() handles it automatically. Inside a transaction, when a call to a PostgreSQL cursor raises an exception\n(typically IntegrityError ), all subsequent SQL in the same transaction\nwill fail with the error “current transaction is aborted, queries ignored\nuntil end of transaction block”. While the basic use of save() is unlikely\nto raise an exception in PostgreSQL, there are more advanced usage patterns\nwhich might, such as saving objects with unique fields, saving using the force_insert / force_update flag, or invoking custom SQL. There are several ways to recover from this sort of error. Transaction rollback ¶ The first option is to roll back the entire transaction. For example: a . save () # Succeeds, but may be undone by transaction rollback try : b . save () # Could throw exception except IntegrityError : transaction . rollback () c . save () # Succeeds, but a.save() may have been undone Calling transaction.rollback() rolls back the entire transaction. Any\nuncommitted database operations will be lost. In this example, the changes\nmade by a.save() would be lost, even though that operation raised no error\nitself. Savepoint rollback ¶ You can use savepoints to control\nthe extent of a rollback. Before performing a database operation that could\nfail, you can set or update the savepoint; that way, if the operation fails,\nyou can roll back the single offending operation, rather than the entire\ntransaction. For example: a . save () # Succeeds, and never undone by savepoint rollback sid = transaction . savepoint () try : b . save () # Could throw exception transaction . savepoint_commit ( sid ) except IntegrityError : transaction . savepoint_rollback ( sid ) c . save () # Succeeds, and a.save() is never undone In this example, a.save() will not be undone in the case where b.save() raises an exception.", "keywords": ["transactions", "marker", "someerror", "statement", "def", "signal", "place", "limitation", "id", "rolls", "party", "do_stuff", "on", "transactiontestcase", "performance", "responses", "use", "utility", "views", "ways", "sort", "specification", "cursor", "way", "default", "option", "b.save", "savepoints", "concern", "block", "my_other_view", "users", "argument", "words", "version", "testcase.captureoncommitcallbacks", "transactionmanagementerror", "name", "pattern", "add_children", "adapter", "do_stuff_on_the_other_database", "python", "addition", "crashes", "handler", "orm", "chance", "storage", "transaction.on_commit", "pep", "true", "requests", "functools", "operation", "feature", "traffic", "blocks", "situation", "state", "implementations", "error", "forces", "design", "template", "cache", "handle_exception", "rendering", "@transaction", "tasks", "order", "documentation", "creation", "integrityerror", "sense", "application", "table", "behavior", "ids", "mode", "notifications", "query", "import", "bar", "information", "article", "#", "point", "section", "¶", "web", "standards", "django.db.backends.base", "server", "sid", "commit", "assertions", "example", "value", "functions", "impact", "source", "save", "timing", "set_rollback", "c", "examples", "django.db", "things", "details", "setup", "psycopg", "my_view", "hood", "object", "task", "warning", "prevents", "library", "one", "postgresql", "try", "returns", "parent", "phase", "peculiarities", "api", "note", "want_to_keep_b", "set_autocommit", "insert", "callbacks", "level", "django", "fact", "failure", "sqlite3", "lot", "field", "contents", "http", "libraries", "effect", "=", "non_atomic_requests", "objects", "ability", "invalidation", "connection", "hook", "callable", "mysql", "statements", "a.save", "logger", "obj", "handling", "exception", "oracle", "property", "middleware", "delete", "innodb", "site", "extent", "manager", "corruption", "problem", "subclasses", "releases", "processes", "send_welcome_email", "apis", "fields", "durability", "testcase", "decorator", "custom", "update", "none", "variables", "protocol", "process", "responsibility", "commits", "streaminghttpresponse", "email", "mymodel", "content", "end", "send_invite_email", "flag", "request", "advantage", "cycle", "b", "tables", "databaseerror", "engine", "runtimeerror", "series", "isolation", "data", "effects", "constraint", "create_parent", "drawback", "two", "notes", "patterns", "reasons", "response", "execution", "configuration", "sql", "functools.partial", "adapters", "subtransactions", "module", "backends", "arguments", "practice", "program", "resets", "context", "savepoint", "purpose", "db", "force_update", "success", "call", "replace", "plan", "support", "counter", "types", "background", "changes", "problems", "idiosyncrasies", "false", "management", "myisam", "tests", "check", "hand", "values", "cases", "solution", "variety", "test", "atomicity", "atomic", "consequences", "usage", "transaction", "model", "snippet", "callback", "roll", "n’t", "sqlite", "on_commit", "case", "class", "viewfunc", "force_insert", "flaw", "action", "function", "generate_relationships", "developers", "list", "bug", "actions", "simplicity", "view", "app", "autocommit", "rollback", "user", "transaction.rollback", "part", "alterations", "queries", "operations", "errors", "fails", "extensions", "mechanism", "atomic_requests", "exceptions", "situations", "notification", "mail", "scope", "document", "set", "cost", "foo", "database", "func", "databases", "instance", "code", "overhead", "integrity", "streaming"], "type": "documentation"},
{"title": "Performing raw SQL queries", "url": "https://docs.djangoproject.com/en/5.1/topics/db/sql/", "content": "Performing raw SQL queries ¶ Django gives you two ways of performing raw SQL queries: you can use Manager.raw() to perform raw queries and return model instances , or\nyou can avoid the model layer entirely and execute custom SQL directly . Explore the ORM before using raw SQL! The Django ORM provides many tools to express queries without writing raw\nSQL. For example: The QuerySet API is extensive. You can annotate and aggregate using many built-in database functions . Beyond those, you can create custom query expressions . Before using raw SQL, explore the ORM . Ask on\none of the support channels to see if the ORM supports\nyour use case. Warning You should be very careful whenever you write raw SQL. Every time you use\nit, you should properly escape any parameters that the user can control\nby using params in order to protect against SQL injection attacks.\nPlease read more about SQL injection protection . Performing raw queries ¶ The raw() manager method can be used to perform raw SQL queries that\nreturn model instances: Manager. raw ( raw_query , params = () , translations = None ) ¶ This method takes a raw SQL query, executes it, and returns a django.db.models.query.RawQuerySet instance. This RawQuerySet instance\ncan be iterated over like a normal QuerySet to\nprovide object instances. This is best illustrated with an example. Suppose you have the following model: class Person ( models . Model ): first_name = models . CharField ( ... ) last_name = models . CharField ( ... ) birth_date = models . DateField ( ... ) You could then execute custom SQL like so: >>> for p in Person . objects . raw ( \"SELECT * FROM myapp_person\" ): ... print ( p ) ... John Smith Jane Jones This example isn’t very exciting – it’s exactly the same as running Person.objects.all() . However, raw() has a bunch of other options that\nmake it very powerful. Model table names Where did the name of the Person table come from in that example? By default, Django figures out a database table name by joining the\nmodel’s “app label” – the name you used in manage.py startapp – to\nthe model’s class name, with an underscore between them. In the example\nwe’ve assumed that the Person model lives in an app named myapp ,\nso its table would be myapp_person . For more details check out the documentation for the db_table option, which also lets you manually set the\ndatabase table name. Warning No checking is done on the SQL statement that is passed in to .raw() .\nDjango expects that the statement will return a set of rows from the\ndatabase, but does nothing to enforce that. If the query does not\nreturn rows, a (possibly cryptic) error will result. Warning If you are performing queries on MySQL, note that MySQL’s silent type coercion\nmay cause unexpected results when mixing types. If you query on a string\ntype column, but with an integer value, MySQL will coerce the types of all values\nin the table to an integer before performing the comparison. For example, if your\ntable contains the values 'abc' , 'def' and you query for WHERE mycolumn=0 ,\nboth rows will match. To prevent this, perform the correct typecasting\nbefore using the value in a query. Mapping query fields to model fields ¶ raw() automatically maps fields in the query to fields on the model. The order of fields in your query doesn’t matter. In other words, both\nof the following queries work identically: >>> Person . objects . raw ( \"SELECT id, first_name, last_name, birth_date FROM myapp_person\" ) >>> Person . objects . raw ( \"SELECT last_name, birth_date, first_name, id FROM myapp_person\" ) Matching is done by name. This means that you can use SQL’s AS clauses to\nmap fields in the query to model fields. So if you had some other table that\nhad Person data in it, you could easily map it into Person instances: >>> Person . objects . raw ( ... \"\"\" ... SELECT first AS first_name, ... last AS last_name, ... bd AS birth_date, ... pk AS id, ... FROM some_other_table ... \"\"\" ... ) As long as the names match, the model instances will be created correctly. Alternatively, you can map fields in the query to model fields using the translations argument to raw() . This is a dictionary mapping names of\nfields in the query to names of fields on the model. For example, the above\nquery could also be written: >>> name_map = { \"first\" : \"first_name\" , \"last\" : \"last_name\" , \"bd\" : \"birth_date\" , \"pk\" : \"id\" } >>> Person . objects . raw ( \"SELECT * FROM some_other_table\" , translations = name_map ) Index lookups ¶ raw() supports indexing, so if you need only the first result you can\nwrite: >>> first_person = Person . objects . raw ( \"SELECT * FROM myapp_person\" )[ 0 ] However, the indexing and slicing are not performed at the database level. If\nyou have a large number of Person objects in your database, it is more\nefficient to limit the query at the SQL level: >>> first_person = Person . objects . raw ( \"SELECT * FROM myapp_person LIMIT 1\" )[ 0 ] Deferring model fields ¶ Fields may also be left out: >>> people = Person . objects . raw ( \"SELECT id, first_name FROM myapp_person\" ) The Person objects returned by this query will be deferred model instances\n(see defer() ). This means that the\nfields that are omitted from the query will be loaded on demand. For example: >>> for p in Person . objects . raw ( \"SELECT id, first_name FROM myapp_person\" ): ... print ( ... p . first_name , # This will be retrieved by the original query ... p . last_name , # This will be retrieved on demand ... ) ... John Smith Jane Jones From outward appearances, this looks like the query has retrieved both\nthe first name and last name. However, this example actually issued 3\nqueries. Only the first names were retrieved by the raw() query – the\nlast names were both retrieved on demand when they were printed. There is only one field that you can’t leave out - the primary key\nfield. Django uses the primary key to identify model instances, so it\nmust always be included in a raw query. A FieldDoesNotExist exception will be raised if\nyou forget to include the primary key. Adding annotations ¶ You can also execute queries containing fields that aren’t defined on the\nmodel. For example, we could use PostgreSQL’s age() function to get a list\nof people with their ages calculated by the database: >>> people = Person . objects . raw ( \"SELECT *, age(birth_date) AS age FROM myapp_person\" ) >>> for p in people : ... print ( \" %s is %s .\" % ( p . first_name , p . age )) ... John is 37. Jane is 42. ... You can often avoid using raw SQL to compute annotations by instead using a Func() expression . Passing parameters into raw() ¶ If you need to perform parameterized queries, you can use the params argument to raw() : >>> lname = \"Doe\" >>> Person . objects . raw ( \"SELECT * FROM myapp_person WHERE last_name = %s \" , [ lname ]) params is a list or dictionary of parameters. You’ll use %s placeholders in the query string for a list, or %(key)s placeholders for a dictionary (where key is replaced by a\ndictionary key), regardless of your database engine. Such placeholders will be\nreplaced with parameters from the params argument. Note Dictionary params are not supported with the SQLite backend; with\nthis backend, you must pass parameters as a list. Warning Do not use string formatting on raw queries or quote placeholders in your\nSQL strings! It’s tempting to write the above query as: >>> query = \"SELECT * FROM myapp_person WHERE last_name = %s \" % lname >>> Person . objects . raw ( query ) You might also think you should write your query like this (with quotes\naround %s ): >>> query = \"SELECT * FROM myapp_person WHERE last_name = ' %s '\" Don’t make either of these mistakes. As discussed in SQL injection protection , using the params argument and leaving the placeholders unquoted protects you from SQL\ninjection attacks , a common exploit where attackers inject arbitrary\nSQL into your database. If you use string interpolation or quote the\nplaceholder, you’re at risk for SQL injection. Executing custom SQL directly ¶ Sometimes even Manager.raw() isn’t quite enough: you might need to\nperform queries that don’t map cleanly to models, or directly execute UPDATE , INSERT , or DELETE queries. In these cases, you can always access the database directly, routing around\nthe model layer entirely. The object django.db.connection represents the default database\nconnection. To use the database connection, call connection.cursor() to\nget a cursor object. Then, call cursor.execute(sql, [params]) to execute\nthe SQL and cursor.fetchone() or cursor.fetchall() to return the\nresulting rows. For example: from django.db import connection def my_custom_sql ( self ): with connection . cursor () as cursor : cursor . execute ( \"UPDATE bar SET foo = 1 WHERE baz = %s \" , [ self . baz ]) cursor . execute ( \"SELECT foo FROM bar WHERE baz = %s \" , [ self . baz ]) row = cursor . fetchone () return row To protect against SQL injection, you must not include quotes around the %s placeholders in the SQL string. Note that if you want to include literal percent signs in the query, you have to\ndouble them in the case you are passing parameters: cursor . execute ( \"SELECT foo FROM bar WHERE baz = '30%'\" ) cursor . execute ( \"SELECT foo FROM bar WHERE baz = '30 %% ' AND id = %s \" , [ self . id ]) If you are using more than one database , you can\nuse django.db.connections to obtain the connection (and cursor) for a\nspecific database. django.db.connections is a dictionary-like\nobject that allows you to retrieve a specific connection using its\nalias: from django.db import connections with connections [ \"my_db_alias\" ] . cursor () as cursor : # Your code here ... By default, the Python DB API will return results without their field names,\nwhich means you end up with a list of values, rather than a dict . At a\nsmall performance and memory cost, you can return results as a dict by\nusing something like this: def dictfetchall ( cursor ): \"\"\" Return all rows from a cursor as a dict. Assume the column names are unique. \"\"\" columns = [ col [ 0 ] for col in cursor . description ] return [ dict ( zip ( columns , row )) for row in cursor . fetchall ()] Another option is to use collections.namedtuple() from the Python\nstandard library. A namedtuple is a tuple-like object that has fields\naccessible by attribute lookup; it’s also indexable and iterable. Results are\nimmutable and accessible by field names or indices, which might be useful: from collections import namedtuple def namedtuplefetchall ( cursor ): \"\"\" Return all rows from a cursor as a namedtuple. Assume the column names are unique. \"\"\" desc = cursor . description nt_result = namedtuple ( \"Result\" , [ col [ 0 ] for col in desc ]) return [ nt_result ( * row ) for row in cursor . fetchall ()] The dictfetchall() and namedtuplefetchall() examples assume unique\ncolumn names, since a cursor cannot distinguish columns from different tables. Here is an example of the difference between the three: >>> cursor . execute ( \"SELECT id, parent_id FROM test LIMIT 2\" ) >>> cursor . fetchall () ((54360982, None), (54360880, None)) >>> cursor . execute ( \"SELECT id, parent_id FROM test LIMIT 2\" ) >>> dictfetchall ( cursor ) [{'parent_id': None, 'id': 54360982}, {'parent_id': None, 'id': 54360880}] >>> cursor . execute ( \"SELECT id, parent_id FROM test LIMIT 2\" ) >>> results = namedtuplefetchall ( cursor ) >>> results [Result(id=54360982, parent_id=None), Result(id=54360880, parent_id=None)] >>> results [ 0 ] . id 54360982 >>> results [ 0 ][ 0 ] 54360982 Connections and cursors ¶ connection and cursor mostly implement the standard Python DB-API\ndescribed in PEP 249 — except when it comes to transaction handling . If you’re not familiar with the Python DB-API, note that the SQL statement in cursor.execute() uses placeholders, \"%s\" , rather than adding\nparameters directly within the SQL. If you use this technique, the underlying\ndatabase library will automatically escape your parameters as necessary. Also note that Django expects the \"%s\" placeholder, not the \"?\" placeholder, which is used by the SQLite Python bindings. This is for the sake\nof consistency and sanity. Using a cursor as a context manager: with connection . cursor () as c : c . execute ( ... ) is equivalent to: c = connection . cursor () try : c . execute ( ... ) finally : c . close () Calling stored procedures ¶ CursorWrapper. callproc ( procname , params = None , kparams = None ) ¶ Calls a database stored procedure with the given name. A sequence\n( params ) or dictionary ( kparams ) of input parameters may be\nprovided. Most databases don’t support kparams . Of Django’s built-in\nbackends, only Oracle supports it. For example, given this stored procedure in an Oracle database: CREATE PROCEDURE \"TEST_PROCEDURE\" ( v_i INTEGER , v_text NVARCHAR2 ( 10 )) AS p_i INTEGER ; p_text NVARCHAR2 ( 10 ); BEGIN p_i : = v_i ; p_text : = v_text ; ... END ; This will call it: with connection . cursor () as cursor : cursor . callproc ( \"test_procedure\" , [ 1 , \"test\" ])", "keywords": ["dictionary", "age(birth_date", "index", "connection", "rawqueryset", "column", "mysql", "error", "type", "nt_result", "support", "types", "cursor.execute", "sanity", "test_procedure", "statement", "p", "rows", "%", "django.db.connection", "order", "collections.namedtuple", "namedtuple", "handling", "documentation", "def", "lname", "django.db.connections", "result(id=54360982", "indexing", "manager.raw", "pk", "time", "exception", "oracle", "method", "slicing", "delete", "queryset", "table", "close", "coercion", "defer", "cursor.fetchone", "person", "namedtuplefetchall", "values", "quotes", "abc", "d", "risk", "fetchone", "query", "cases", "performance", "zip", "use", "manager", "import", "baz", "demand", "connection.cursor", "mistakes", "ways", "datefield", "bar", "difference", "birth_date", "translations", "django.db.models.query", "john", "result", "#", "annotations", "cursor", "test", "underscore", "fields", "jones", "¶", "cursor.fetchall", "default", "option", "channels", "signs", "custom", "input", "cursor.execute(sql", "update", "transaction", "injection", "model", "none", "select", "kparams", "execute", "results", "jane", "example", "age", ">", "p_text", "procname", "n’t", "functions", "value", "sqlite", "backend", "self", "label", "end", "procedures", "people", "case", "argument", "class", "begin", "number", "bunch", "words", "print", "placeholder", "attacks", "tuple", "bindings", "return", "c", "integer", "columns", "tables", "engine", "mapping", "exploit", "create", "checking", "connections", "dict", "attribute", "function", "examples", "string", "interpolation", "django.db", "list", "details", "col", "protection", "data", "key)s", "call", "app", "matching", "my_custom_sql", "name", "object", "options", "person.objects.all", "i", "lookups", "user", "sake", "warning", "queries", "first_name", "postgresql", "comparison", "library", "percent", "params", "python", "fetchall", "charfield", "nvarchar2", "instances", "startapp", "myapp", "description", "s", "sequence", "appearances", "api", "sql", "name_map", "orm", "note", "insert", "lookup", "callproc", "names", "level", "django", "technique", "tools", "smith", "expressions", "clauses", "mycolumn=0", "raw", "my_db_alias", "pep", "ages", "desc", "cursorwrapper", "cursors", "placeholders", "set", "first_person", "field", "backends", "myapp_person", "last_name", "strings", "fielddoesnotexist", "foo", "cost", "dictfetchall", "calling", "database", "parent_id", "func", "memory", "collections", "consistency", "context", "limit", "databases", "expression", "procedure", "db", "typecasting", "layer", "instance", "=", "models", "code", "indices", "objects", "key", "attackers", "parameters", "bd", ".raw", "row", "alias", "doe"], "type": "documentation"},
{"title": "Managers", "url": "https://docs.djangoproject.com/en/5.1/topics/db/managers/", "content": "Managers ¶ class Manager [source] ¶ A Manager is the interface through which database query operations are\nprovided to Django models. At least one Manager exists for every model in\na Django application. The way Manager classes work is documented in Making queries ;\nthis document specifically touches on model options that customize Manager behavior. Manager names ¶ By default, Django adds a Manager with the name objects to every Django\nmodel class. However, if you want to use objects as a field name, or if you\nwant to use a name other than objects for the Manager , you can rename\nit on a per-model basis. To rename the Manager for a given class, define a\nclass attribute of type models.Manager() on that model. For example: from django.db import models class Person ( models . Model ): # ... people = models . Manager () Using this example model, Person.objects will generate an AttributeError exception, but Person.people.all() will provide a list\nof all Person objects. Custom managers ¶ You can use a custom Manager in a particular model by extending the base Manager class and instantiating your custom Manager in your model. There are two reasons you might want to customize a Manager : to add extra Manager methods, and/or to modify the initial QuerySet the Manager returns. Adding extra manager methods ¶ Adding extra Manager methods is the preferred way to add “table-level”\nfunctionality to your models. (For “row-level” functionality – i.e., functions\nthat act on a single instance of a model object – use Model methods , not custom Manager methods.) For example, this custom Manager adds a method with_counts() : from django.db import models from django.db.models.functions import Coalesce class PollManager ( models . Manager ): def with_counts ( self ): return self . annotate ( num_responses = Coalesce ( models . Count ( \"response\" ), 0 )) class OpinionPoll ( models . Model ): question = models . CharField ( max_length = 200 ) objects = PollManager () class Response ( models . Model ): poll = models . ForeignKey ( OpinionPoll , on_delete = models . CASCADE ) # ... With this example, you’d use OpinionPoll.objects.with_counts() to get a QuerySet of OpinionPoll objects with the extra num_responses attribute attached. A custom Manager method can return anything you want. It doesn’t have to\nreturn a QuerySet . Another thing to note is that Manager methods can access self.model to\nget the model class to which they’re attached. Modifying a manager’s initial QuerySet ¶ A Manager ’s base QuerySet returns all objects in the system. For\nexample, using this model: from django.db import models class Book ( models . Model ): title = models . CharField ( max_length = 100 ) author = models . CharField ( max_length = 50 ) …the statement Book.objects.all() will return all books in the database. You can override a Manager ’s base QuerySet by overriding the Manager.get_queryset() method. get_queryset() should return a QuerySet with the properties you require. For example, the following model has two Manager s – one that returns\nall objects, and one that returns only the books by Roald Dahl: # First, define the Manager subclass. class DahlBookManager ( models . Manager ): def get_queryset ( self ): return super () . get_queryset () . filter ( author = \"Roald Dahl\" ) # Then hook it into the Book model explicitly. class Book ( models . Model ): title = models . CharField ( max_length = 100 ) author = models . CharField ( max_length = 50 ) objects = models . Manager () # The default manager. dahl_objects = DahlBookManager () # The Dahl-specific manager. With this sample model, Book.objects.all() will return all books in the\ndatabase, but Book.dahl_objects.all() will only return the ones written by\nRoald Dahl. Because get_queryset() returns a QuerySet object, you can use filter() , exclude() and all the other QuerySet methods on it. So\nthese statements are all legal: Book . dahl_objects . all () Book . dahl_objects . filter ( title = \"Matilda\" ) Book . dahl_objects . count () This example also pointed out another interesting technique: using multiple\nmanagers on the same model. You can attach as many Manager() instances to\na model as you’d like. This is a non-repetitive way to define common “filters”\nfor your models. For example: class AuthorManager ( models . Manager ): def get_queryset ( self ): return super () . get_queryset () . filter ( role = \"A\" ) class EditorManager ( models . Manager ): def get_queryset ( self ): return super () . get_queryset () . filter ( role = \"E\" ) class Person ( models . Model ): first_name = models . CharField ( max_length = 50 ) last_name = models . CharField ( max_length = 50 ) role = models . CharField ( max_length = 1 , choices = { \"A\" : _ ( \"Author\" ), \"E\" : _ ( \"Editor\" )}) people = models . Manager () authors = AuthorManager () editors = EditorManager () This example allows you to request Person.authors.all() , Person.editors.all() ,\nand Person.people.all() , yielding predictable results. Default managers ¶ Model. _default_manager ¶ If you use custom Manager objects, take note that the first Manager Django encounters (in the order in which they’re defined in the model) has a\nspecial status. Django interprets the first Manager defined in a class as\nthe “default” Manager , and several parts of Django (including dumpdata ) will use that Manager exclusively for that model. As a\nresult, it’s a good idea to be careful in your choice of default manager in\norder to avoid a situation where overriding get_queryset() results in an\ninability to retrieve objects you’d like to work with. You can specify a custom default manager using Meta.default_manager_name . If you’re writing some code that must handle an unknown model, for example, in\na third-party app that implements a generic view, use this manager (or _base_manager ) rather than assuming the model has an objects manager. Base managers ¶ Model. _base_manager ¶ Using managers for related object access ¶ By default, Django uses an instance of the Model._base_manager manager\nclass when accessing related objects (i.e. choice.question ), not the _default_manager on the related object. This is because Django needs to be\nable to retrieve the related object, even if it would otherwise be filtered out\n(and hence be inaccessible) by the default manager. If the normal base manager class ( django.db.models.Manager ) isn’t\nappropriate for your circumstances, you can tell Django which class to use by\nsetting Meta.base_manager_name . Base managers aren’t used when querying on related models, or when accessing a one-to-many or many-to-many relationship . For example, if the Question model from the tutorial had a deleted field and a base\nmanager that filters out instances with deleted=True , a queryset like Choice.objects.filter(question__name__startswith='What') would include\nchoices related to deleted questions. Don’t filter away any results in this type of manager subclass ¶ This manager is used to access objects that are related to from some other\nmodel. In those situations, Django has to be able to see all the objects for\nthe model it is fetching, so that anything which is referred to can be\nretrieved. Therefore, you should not override get_queryset() to filter out any rows.\nIf you do so, Django will return incomplete results. Calling custom QuerySet methods from the manager ¶ While most methods from the standard QuerySet are accessible directly from\nthe Manager , this is only the case for the extra methods defined on a\ncustom QuerySet if you also implement them on the Manager : class PersonQuerySet ( models . QuerySet ): def authors ( self ): return self . filter ( role = \"A\" ) def editors ( self ): return self . filter ( role = \"E\" ) class PersonManager ( models . Manager ): def get_queryset ( self ): return PersonQuerySet ( self . model , using = self . _db ) def authors ( self ): return self . get_queryset () . authors () def editors ( self ): return self . get_queryset () . editors () class Person ( models . Model ): first_name = models . CharField ( max_length = 50 ) last_name = models . CharField ( max_length = 50 ) role = models . CharField ( max_length = 1 , choices = { \"A\" : _ ( \"Author\" ), \"E\" : _ ( \"Editor\" )}) people = PersonManager () This example allows you to call both authors() and editors() directly from\nthe manager Person.people . Creating a manager with QuerySet methods ¶ In lieu of the above approach which requires duplicating methods on both the QuerySet and the Manager , QuerySet.as_manager() can be used to create an instance\nof Manager with a copy of a custom QuerySet ’s methods: class Person ( models . Model ): ... people = PersonQuerySet . as_manager () The Manager instance created by QuerySet.as_manager() will be virtually\nidentical to the PersonManager from the previous example. Not every QuerySet method makes sense at the Manager level; for\ninstance we intentionally prevent the QuerySet.delete() method from being copied onto\nthe Manager class. Methods are copied according to the following rules: Public methods are copied by default. Private methods (starting with an underscore) are not copied by default. Methods with a queryset_only attribute set to False are always copied. Methods with a queryset_only attribute set to True are never copied. For example: class CustomQuerySet ( models . QuerySet ): # Available on both Manager and QuerySet. def public_method ( self ): return # Available only on QuerySet. def _private_method ( self ): return # Available only on QuerySet. def opted_out_public_method ( self ): return opted_out_public_method . queryset_only = True # Available on both Manager and QuerySet. def _opted_in_private_method ( self ): return _opted_in_private_method . queryset_only = False from_queryset() ¶ classmethod from_queryset ( queryset_class ) ¶ For advanced usage you might want both a custom Manager and a custom QuerySet . You can do that by calling Manager.from_queryset() which\nreturns a subclass of your base Manager with a copy of the custom QuerySet methods: class CustomManager ( models . Manager ): def manager_only_method ( self ): return class CustomQuerySet ( models . QuerySet ): def manager_and_queryset_method ( self ): return class MyModel ( models . Model ): objects = CustomManager . from_queryset ( CustomQuerySet )() You may also store the generated class into a variable: MyManager = CustomManager . from_queryset ( CustomQuerySet ) class MyModel ( models . Model ): objects = MyManager () Custom managers and model inheritance ¶ Here’s how Django handles custom managers and model inheritance : Managers from base classes are always inherited by the child class,\nusing Python’s normal name resolution order (names on the child\nclass override all others; then come names on the first parent class,\nand so on). If no managers are declared on a model and/or its parents, Django\nautomatically creates the objects manager. The default manager on a class is either the one chosen with Meta.default_manager_name , or the first manager\ndeclared on the model, or the default manager of the first parent model. These rules provide the necessary flexibility if you want to install a\ncollection of custom managers on a group of models, via an abstract base\nclass, but still customize the default manager. For example, suppose you have\nthis base class: class AbstractBase ( models . Model ): # ... objects = CustomManager () class Meta : abstract = True If you use this directly in a child class, objects will be the default\nmanager if you declare no managers in the child class: class ChildA ( AbstractBase ): # ... # This class has CustomManager as the default manager. pass If you want to inherit from AbstractBase , but provide a different default\nmanager, you can provide the default manager on the child class: class ChildB ( AbstractBase ): # ... # An explicit default manager. default_manager = OtherManager () Here, default_manager is the default. The objects manager is\nstill available, since it’s inherited, but isn’t used as the default. Finally for this example, suppose you want to add extra managers to the child\nclass, but still use the default from AbstractBase . You can’t add the new\nmanager directly in the child class, as that would override the default and you would\nhave to also explicitly include all the managers from the abstract base class.\nThe solution is to put the extra managers in another base class and introduce\nit into the inheritance hierarchy after the defaults: class ExtraManager ( models . Model ): extra_manager = OtherManager () class Meta : abstract = True class ChildC ( AbstractBase , ExtraManager ): # ... # Default manager is CustomManager, but OtherManager is # also available via the \"extra_manager\" attribute. pass Note that while you can define a custom manager on the abstract model, you\ncan’t invoke any methods using the abstract model. That is: ClassA . objects . do_something () is legal, but: AbstractBase . objects . do_something () will raise an exception. This is because managers are intended to encapsulate\nlogic for managing collections of objects. Since you can’t have a collection of\nabstract objects, it doesn’t make sense to be managing them. If you have\nfunctionality that applies to the abstract model, you should put that functionality\nin a staticmethod or classmethod on the abstract model. Implementation concerns ¶ Whatever features you add to your custom Manager , it must be\npossible to make a shallow copy of a Manager instance; i.e., the\nfollowing code must work: >>> import copy >>> manager = MyManager () >>> my_copy = copy . copy ( manager ) Django makes shallow copies of manager objects during certain queries;\nif your Manager cannot be copied, those queries will fail. This won’t be an issue for most custom managers. If you are just\nadding simple methods to your Manager , it is unlikely that you\nwill inadvertently make instances of your Manager uncopyable.\nHowever, if you’re overriding __getattr__ or some other private\nmethod of your Manager object that controls object state, you\nshould ensure that you don’t affect the ability of your Manager to\nbe copied.", "keywords": ["state", "implementation", "roald", "authormanager", "interface", "work", "resolution", "variable", "editors", "statements", "type", "meta.base_manager_name", "opted_out_public_method", "book", "statement", "rows", "order", "basis", "questions", "filter", "def", "rules", "custommanager", "extra_manager", "sense", "false", "extramanager", "abstractbase", "application", "exception", "count", "classes", "_", "method", "party", "customqueryset", "queryset", "table", "person.authors.all", "lieu", "person", "behavior", "othermanager", "system", "authors", "flexibility", "opted_in_private_method", "query", "solution", "manager", "status", "import", "classa", "dumpdata", "sample", "role", "choice.objects.filter(question__name__startswith='what", "person.objects", "editormanager", "attributeerror", "#", "result", "underscore", "way", "idea", "queryset.delete", "¶", "default", "filters", "manager.from_queryset", "num_responses", "public_method", "copy", "custom", "books", "methods", "book.objects.all", "usage", "parents", "model", "tutorial", "max_length", "personmanager", "choice", "childa", "base", "access", "copies", "results", "example", "django.db.models", "inability", "n’t", "opinionpoll.objects.with_counts", "functions", "dahl_objects", "mymodel", "self", "source", "people", "circumstances", "model._base_manager", "case", "classmethod", "class", "dahl", "person.editors.all", "base_manager", "choices", "inheritance", "return", "choice.question", "personqueryset", "attribute", "ones", "thing", "meta", "django.db", "list", "private_method", "properties", "question", "manager_and_queryset_method", "e", "a", "editor", "person.people.all", "app", "view", "override", "parts", "name", "object", "options", "poll", "group", "self.model", "opinionpoll", "queries", "pollmanager", "one", "first_name", "queryset.as_manager", "hierarchy", "operations", "returns", "python", "charfield", "parent", "reasons", "instances", "manager.get_queryset", "issue", "response", "child", "with_counts", "subclass", "person.people", "situations", "note", "author", "others", "names", "level", "django", "technique", "managers", "true", "document", "staticmethod", "approach", "field", "meta.default_manager_name", "functionality", "last_name", "foreignkey", "database", "relationship", "annotate", "collections", "matilda", "coalesce", "db", "manager_only_method", "mymanager", "logic", "instance", "=", "models", "code", "objects", "collection", "dahlbookmanager", "django.db.models.functions", "get_queryset", "situation", "defaults", "row", "title", "ability"], "type": "documentation"},
{"title": "Search", "url": "https://docs.djangoproject.com/en/5.1/topics/db/search/", "content": "Search ¶ A common task for web applications is to search some data in the database with\nuser input. In a simple case, this could be filtering a list of objects by a\ncategory. A more complex use case might require searching with weighting,\ncategorization, highlighting, multiple languages, and so on. This document\nexplains some of the possible use cases and the tools you can use. We’ll refer to the same models used in Making queries . Use Cases ¶ Standard textual queries ¶ Text-based fields have a selection of matching operations. For example, you may\nwish to allow lookup up an author like so: >>> Author . objects . filter ( name__contains = \"Terry\" ) [<Author: Terry Gilliam>, <Author: Terry Jones>] This is a very fragile solution as it requires the user to know an exact\nsubstring of the author’s name. A better approach could be a case-insensitive\nmatch ( icontains ), but this is only marginally better. A database’s more advanced comparison functions ¶ If you’re using PostgreSQL, Django provides a selection of database\nspecific tools to allow you to leverage more\ncomplex querying options. Other databases have different selections of tools,\npossibly via plugins or user-defined functions. Django doesn’t include any\nsupport for them at this time. We’ll use some examples from PostgreSQL to\ndemonstrate the kind of functionality databases may have. Searching in other databases All of the searching tools provided by django.contrib.postgres are\nconstructed entirely on public APIs such as custom lookups and database functions . Depending on your database, you should\nbe able to construct queries to allow similar APIs. If there are specific\nthings which cannot be achieved this way, please open a ticket. In the above example, we determined that a case insensitive lookup would be\nmore useful. When dealing with non-English names, a further improvement is to\nuse unaccented comparison : >>> Author . objects . filter ( name__unaccent__icontains = \"Helen\" ) [<Author: Helen Mirren>, <Author: Helena Bonham Carter>, <Author: Hélène Joy>] This shows another issue, where we are matching against a different spelling of\nthe name. In this case we have an asymmetry though - a search for Helen will pick up Helena or Hélène , but not the reverse. Another option\nwould be to use a trigram_similar comparison, which compares\nsequences of letters. For example: >>> Author . objects . filter ( name__unaccent__lower__trigram_similar = \"Hélène\" ) [<Author: Helen Mirren>, <Author: Hélène Joy>] Now we have a different problem - the longer name of “Helena Bonham Carter”\ndoesn’t show up as it is much longer. Trigram searches consider all\ncombinations of three letters, and compares how many appear in both search and\nsource strings. For the longer name, there are more combinations that don’t\nappear in the source string, so it is no longer considered a close match. The correct choice of comparison functions here depends on your particular data\nset, for example the language(s) used and the type of text being searched. All\nof the examples we’ve seen are on short strings where the user is likely to\nenter something close (by varying definitions) to the source data. Document-based search ¶ Standard database operations stop being a useful approach when you start\nconsidering large blocks of text. Whereas the examples above can be thought of\nas operations on a string of characters, full text search looks at the actual\nwords. Depending on the system used, it’s likely to use some of the following\nideas: Ignoring “stop words” such as “a”, “the”, “and”. Stemming words, so that “pony” and “ponies” are considered similar. Weighting words based on different criteria such as how frequently they\nappear in the text, or the importance of the fields, such as the title or\nkeywords, that they appear in. There are many alternatives for using searching software, some of the most\nprominent are Elastic and Solr . These are full document-based search\nsolutions. To use them with data from Django models, you’ll need a layer which\ntranslates your data into a textual document, including back-references to the\ndatabase ids. When a search using the engine returns a certain document, you\ncan then look it up in the database. There are a variety of third-party\nlibraries which are designed to help with this process. PostgreSQL support ¶ PostgreSQL has its own full text search implementation built-in. While not as\npowerful as some other search engines, it has the advantage of being inside\nyour database and so can easily be combined with other relational queries such\nas categorization. The django.contrib.postgres module provides some helpers to make these\nqueries. For example, a query might select all the blog entries which mention\n“cheese”: >>> Entry . objects . filter ( body_text__search = \"cheese\" ) [<Entry: Cheese on Toast recipes>, <Entry: Pizza recipes>] You can also filter on a combination of fields and on related models: >>> Entry . objects . annotate ( ... search = SearchVector ( \"blog__tagline\" , \"body_text\" ), ... ) . filter ( search = \"cheese\" ) [ <Entry: Cheese on Toast recipes>, <Entry: Pizza Recipes>, <Entry: Dairy farming in Argentina>, ] See the contrib.postgres Full text search document for\ncomplete details.", "keywords": ["implementation", "helena", "joy", "characters", "match", "selections", "software", "prominent", "type", "substring", "support", "blog__tagline", "helpers", "selection", "filter", "searches", "pizza", "time", "category", "party", "solutions", "cheese", "system", "solr", "searchvector", "ids", "carter", "cases", "solution", "query", "use", "spelling", "problem", "helen", "body_text", "variety", "apis", "fields", "way", "standard", "jones", "¶", "alternatives", "name__unaccent__icontains", "option", "icontains", "custom", "web", "input", "entries", "improvement", "choice", "process", "plugins", "letters", "kind", "combinations", "example", ">", "recipes", "farming", "n’t", "functions", "asymmetry", "name__unaccent__lower__trigram_similar", "definitions", "source", "case", "words", "applications", "django.contrib.postgres", "weighting", "languages", "ideas", "pony", "blog", "advantage", "engine", "categorization", "examples", "mirren", "string", "things", "list", "details", "ticket", "data", "relational", "name", "lookups", "options", "highlighting", "user", "task", "queries", "postgresql", "comparison", "references", "operations", "contrib.postgres", "combination", "issue", "terry", "hélène", "lookup", "keywords", "language(s", "sequences", "ponies", "author", "body_text__search", "toast", "names", "django", "tools", "trigram", "document", "set", "text", "approach", "criteria", "back", "in", "module", "functionality", "importance", "strings", "name__contains", "search", "database", "reverse", "annotate", "databases", "bonham", "libraries", "gilliam", "layer", "engines", "dairy", "=", "models", "objects", "blocks", "argentina", "entry", "title"], "type": "documentation"},
{"title": "Aggregation", "url": "https://docs.djangoproject.com/en/5.1/topics/db/aggregation/", "content": "Aggregation ¶ The topic guide on Django’s database-abstraction API described the way that you can use Django queries that create,\nretrieve, update and delete individual objects. However, sometimes you will\nneed to retrieve values that are derived by summarizing or aggregating a\ncollection of objects. This topic guide describes the ways that aggregate values\ncan be generated and returned using Django queries. Throughout this guide, we’ll refer to the following models. These models are\nused to track the inventory for a series of online bookstores: from django.db import models class Author ( models . Model ): name = models . CharField ( max_length = 100 ) age = models . IntegerField () class Publisher ( models . Model ): name = models . CharField ( max_length = 300 ) class Book ( models . Model ): name = models . CharField ( max_length = 300 ) pages = models . IntegerField () price = models . DecimalField ( max_digits = 10 , decimal_places = 2 ) rating = models . FloatField () authors = models . ManyToManyField ( Author ) publisher = models . ForeignKey ( Publisher , on_delete = models . CASCADE ) pubdate = models . DateField () class Store ( models . Model ): name = models . CharField ( max_length = 300 ) books = models . ManyToManyField ( Book ) Cheat sheet ¶ In a hurry? Here’s how to do common aggregate queries, assuming the models\nabove: # Total number of books. >>> Book . objects . count () 2452 # Total number of books with publisher=BaloneyPress >>> Book . objects . filter ( publisher__name = \"BaloneyPress\" ) . count () 73 # Average price across all books, provide default to be returned instead # of None if no books exist. >>> from django.db.models import Avg >>> Book . objects . aggregate ( Avg ( \"price\" , default = 0 )) {'price__avg': 34.35} # Max price across all books, provide default to be returned instead of # None if no books exist. >>> from django.db.models import Max >>> Book . objects . aggregate ( Max ( \"price\" , default = 0 )) {'price__max': Decimal('81.20')} # Difference between the highest priced book and the average price of all books. >>> from django.db.models import FloatField >>> Book . objects . aggregate ( ... price_diff = Max ( \"price\" , output_field = FloatField ()) - Avg ( \"price\" ) ... ) {'price_diff': 46.85} # All the following queries involve traversing the Book<->Publisher # foreign key relationship backwards. # Each publisher, each with a count of books as a \"num_books\" attribute. >>> from django.db.models import Count >>> pubs = Publisher . objects . annotate ( num_books = Count ( \"book\" )) >>> pubs <QuerySet [<Publisher: BaloneyPress>, <Publisher: SalamiPress>, ...]> >>> pubs [ 0 ] . num_books 73 # Each publisher, with a separate count of books with a rating above and below 5 >>> from django.db.models import Q >>> above_5 = Count ( \"book\" , filter = Q ( book__rating__gt = 5 )) >>> below_5 = Count ( \"book\" , filter = Q ( book__rating__lte = 5 )) >>> pubs = Publisher . objects . annotate ( below_5 = below_5 ) . annotate ( above_5 = above_5 ) >>> pubs [ 0 ] . above_5 23 >>> pubs [ 0 ] . below_5 12 # The top 5 publishers, in order by number of books. >>> pubs = Publisher . objects . annotate ( num_books = Count ( \"book\" )) . order_by ( \"-num_books\" )[: 5 ] >>> pubs [ 0 ] . num_books 1323 Generating aggregates over a QuerySet ¶ Django provides two ways to generate aggregates. The first way is to generate\nsummary values over an entire QuerySet . For example, say you wanted to\ncalculate the average price of all books available for sale. Django’s query\nsyntax provides a means for describing the set of all books: >>> Book . objects . all () What we need is a way to calculate summary values over the objects that\nbelong to this QuerySet . This is done by appending an aggregate() clause onto the QuerySet : >>> from django.db.models import Avg >>> Book . objects . all () . aggregate ( Avg ( \"price\" )) {'price__avg': 34.35} The all() is redundant in this example, so this could be simplified to: >>> Book . objects . aggregate ( Avg ( \"price\" )) {'price__avg': 34.35} The argument to the aggregate() clause describes the aggregate value that\nwe want to compute - in this case, the average of the price field on the Book model. A list of the aggregate functions that are available can be\nfound in the QuerySet reference . aggregate() is a terminal clause for a QuerySet that, when invoked,\nreturns a dictionary of name-value pairs. The name is an identifier for the\naggregate value; the value is the computed aggregate. The name is\nautomatically generated from the name of the field and the aggregate function.\nIf you want to manually specify a name for the aggregate value, you can do so\nby providing that name when you specify the aggregate clause: >>> Book . objects . aggregate ( average_price = Avg ( \"price\" )) {'average_price': 34.35} If you want to generate more than one aggregate, you add another argument to\nthe aggregate() clause. So, if we also wanted to know the maximum and\nminimum price of all books, we would issue the query: >>> from django.db.models import Avg , Max , Min >>> Book . objects . aggregate ( Avg ( \"price\" ), Max ( \"price\" ), Min ( \"price\" )) {'price__avg': 34.35, 'price__max': Decimal('81.20'), 'price__min': Decimal('12.99')} Generating aggregates for each item in a QuerySet ¶ The second way to generate summary values is to generate an independent\nsummary for each object in a QuerySet . For example, if you are\nretrieving a list of books, you may want to know how many authors contributed\nto each book. Each Book has a many-to-many relationship with the Author; we\nwant to summarize this relationship for each book in the QuerySet . Per-object summaries can be generated using the annotate() clause. When an annotate() clause is\nspecified, each object in the QuerySet will be annotated with the\nspecified values. The syntax for these annotations is identical to that used for the aggregate() clause. Each argument to annotate() describes\nan aggregate that is to be calculated. For example, to annotate books with the\nnumber of authors: # Build an annotated queryset >>> from django.db.models import Count >>> q = Book . objects . annotate ( Count ( \"authors\" )) # Interrogate the first object in the queryset >>> q [ 0 ] <Book: The Definitive Guide to Django> >>> q [ 0 ] . authors__count 2 # Interrogate the second object in the queryset >>> q [ 1 ] <Book: Practical Django Projects> >>> q [ 1 ] . authors__count 1 As with aggregate() , the name for the annotation is automatically derived\nfrom the name of the aggregate function and the name of the field being\naggregated. You can override this default name by providing an alias when you\nspecify the annotation: >>> q = Book . objects . annotate ( num_authors = Count ( \"authors\" )) >>> q [ 0 ] . num_authors 2 >>> q [ 1 ] . num_authors 1 Unlike aggregate() , annotate() is not a terminal clause. The output\nof the annotate() clause is a QuerySet ; this QuerySet can be\nmodified using any other QuerySet operation, including filter() , order_by() , or even additional calls to annotate() . Combining multiple aggregations ¶ Combining multiple aggregations with annotate() will yield the\nwrong results because joins are used instead of subqueries: >>> book = Book . objects . first () >>> book . authors . count () 2 >>> book . store_set . count () 3 >>> q = Book . objects . annotate ( Count ( \"authors\" ), Count ( \"store\" )) >>> q [ 0 ] . authors__count 6 >>> q [ 0 ] . store__count 6 For most aggregates, there is no way to avoid this problem, however, the Count aggregate has a distinct parameter that\nmay help: >>> q = Book . objects . annotate ( ... Count ( \"authors\" , distinct = True ), Count ( \"store\" , distinct = True ) ... ) >>> q [ 0 ] . authors__count 2 >>> q [ 0 ] . store__count 3 If in doubt, inspect the SQL query! In order to understand what happens in your query, consider inspecting the query property of your QuerySet . Joins and aggregates ¶ So far, we have dealt with aggregates over fields that belong to the\nmodel being queried. However, sometimes the value you want to aggregate\nwill belong to a model that is related to the model you are querying. When specifying the field to be aggregated in an aggregate function, Django\nwill allow you to use the same double underscore notation that is used when referring to related fields in\nfilters. Django will then handle any table joins that are required to retrieve\nand aggregate the related value. For example, to find the price range of books offered in each store,\nyou could use the annotation: >>> from django.db.models import Max , Min >>> Store . objects . annotate ( min_price = Min ( \"books__price\" ), max_price = Max ( \"books__price\" )) This tells Django to retrieve the Store model, join (through the\nmany-to-many relationship) with the Book model, and aggregate on the\nprice field of the book model to produce a minimum and maximum value. The same rules apply to the aggregate() clause. If you wanted to\nknow the lowest and highest price of any book that is available for sale\nin any of the stores, you could use the aggregate: >>> Store . objects . aggregate ( min_price = Min ( \"books__price\" ), max_price = Max ( \"books__price\" )) Join chains can be as deep as you require. For example, to extract the\nage of the youngest author of any book available for sale, you could\nissue the query: >>> Store . objects . aggregate ( youngest_age = Min ( \"books__authors__age\" )) Following relationships backwards ¶ In a way similar to Lookups that span relationships , aggregations and\nannotations on fields of models or models that are related to the one you are\nquerying can include traversing “reverse” relationships. The lowercase name\nof related models and double-underscores are used here too. For example, we can ask for all publishers, annotated with their respective\ntotal book stock counters (note how we use 'book' to specify the Publisher -> Book reverse foreign key hop): >>> from django.db.models import Avg , Count , Min , Sum >>> Publisher . objects . annotate ( Count ( \"book\" )) (Every Publisher in the resulting QuerySet will have an extra attribute\ncalled book__count .) We can also ask for the oldest book of any of those managed by every publisher: >>> Publisher . objects . aggregate ( oldest_pubdate = Min ( \"book__pubdate\" )) (The resulting dictionary will have a key called 'oldest_pubdate' . If no\nsuch alias were specified, it would be the rather long 'book__pubdate__min' .) This doesn’t apply just to foreign keys. It also works with many-to-many\nrelations. For example, we can ask for every author, annotated with the total\nnumber of pages considering all the books the author has (co-)authored (note how we\nuse 'book' to specify the Author -> Book reverse many-to-many hop): >>> Author . objects . annotate ( total_pages = Sum ( \"book__pages\" )) (Every Author in the resulting QuerySet will have an extra attribute\ncalled total_pages . If no such alias were specified, it would be the rather\nlong book__pages__sum .) Or ask for the average rating of all the books written by author(s) we have on\nfile: >>> Author . objects . aggregate ( average_rating = Avg ( \"book__rating\" )) (The resulting dictionary will have a key called 'average_rating' . If no\nsuch alias were specified, it would be the rather long 'book__rating__avg' .) Aggregations and other QuerySet clauses ¶ filter() and exclude() ¶ Aggregates can also participate in filters. Any filter() (or exclude() ) applied to normal model fields will have the effect of\nconstraining the objects that are considered for aggregation. When used with an annotate() clause, a filter has the effect of\nconstraining the objects for which an annotation is calculated. For example,\nyou can generate an annotated list of all books that have a title starting\nwith “Django” using the query: >>> from django.db.models import Avg , Count >>> Book . objects . filter ( name__startswith = \"Django\" ) . annotate ( num_authors = Count ( \"authors\" )) When used with an aggregate() clause, a filter has the effect of\nconstraining the objects over which the aggregate is calculated.\nFor example, you can generate the average price of all books with a\ntitle that starts with “Django” using the query: >>> Book . objects . filter ( name__startswith = \"Django\" ) . aggregate ( Avg ( \"price\" )) Filtering on annotations ¶ Annotated values can also be filtered. The alias for the annotation can be\nused in filter() and exclude() clauses in the same way as any other\nmodel field. For example, to generate a list of books that have more than one author,\nyou can issue the query: >>> Book . objects . annotate ( num_authors = Count ( \"authors\" )) . filter ( num_authors__gt = 1 ) This query generates an annotated result set, and then generates a filter\nbased upon that annotation. If you need two annotations with two separate filters you can use the filter argument with any aggregate. For example, to generate a list of\nauthors with a count of highly rated books: >>> highly_rated = Count ( \"book\" , filter = Q ( book__rating__gte = 7 )) >>> Author . objects . annotate ( num_books = Count ( \"book\" ), highly_rated_books = highly_rated ) Each Author in the result set will have the num_books and highly_rated_books attributes. See also Conditional aggregation . Choosing between filter and QuerySet.filter() Avoid using the filter argument with a single annotation or\naggregation. It’s more efficient to use QuerySet.filter() to exclude\nrows. The aggregation filter argument is only useful when using two or\nmore aggregations over the same relations with different conditionals. Order of annotate() and filter() clauses ¶ When developing a complex query that involves both annotate() and filter() clauses, pay particular attention to the order in which the\nclauses are applied to the QuerySet . When an annotate() clause is applied to a query, the annotation is computed\nover the state of the query up to the point where the annotation is requested.\nThe practical implication of this is that filter() and annotate() are\nnot commutative operations. Given: Publisher A has two books with ratings 4 and 5. Publisher B has two books with ratings 1 and 4. Publisher C has one book with rating 1. Here’s an example with the Count aggregate: >>> a , b = Publisher . objects . annotate ( num_books = Count ( \"book\" , distinct = True )) . filter ( ... book__rating__gt = 3.0 ... ) >>> a , a . num_books (<Publisher: A>, 2) >>> b , b . num_books (<Publisher: B>, 2) >>> a , b = Publisher . objects . filter ( book__rating__gt = 3.0 ) . annotate ( num_books = Count ( \"book\" )) >>> a , a . num_books (<Publisher: A>, 2) >>> b , b . num_books (<Publisher: B>, 1) Both queries return a list of publishers that have at least one book with a\nrating exceeding 3.0, hence publisher C is excluded. In the first query, the annotation precedes the filter, so the filter has no\neffect on the annotation. distinct=True is required to avoid a query\nbug . The second query counts the number of books that have a rating exceeding 3.0\nfor each publisher. The filter precedes the annotation, so the filter\nconstrains the objects considered when calculating the annotation. Here’s another example with the Avg aggregate: >>> a , b = Publisher . objects . annotate ( avg_rating = Avg ( \"book__rating\" )) . filter ( ... book__rating__gt = 3.0 ... ) >>> a , a . avg_rating (<Publisher: A>, 4.5)  # (5+4)/2 >>> b , b . avg_rating (<Publisher: B>, 2.5)  # (1+4)/2 >>> a , b = Publisher . objects . filter ( book__rating__gt = 3.0 ) . annotate ( ... avg_rating = Avg ( \"book__rating\" ) ... ) >>> a , a . avg_rating (<Publisher: A>, 4.5)  # (5+4)/2 >>> b , b . avg_rating (<Publisher: B>, 4.0)  # 4/1 (book with rating 1 excluded) The first query asks for the average rating of all a publisher’s books for\npublisher’s that have at least one book with a rating exceeding 3.0. The second\nquery asks for the average of a publisher’s book’s ratings for only those\nratings exceeding 3.0. It’s difficult to intuit how the ORM will translate complex querysets into SQL\nqueries so when in doubt, inspect the SQL with str(queryset.query) and\nwrite plenty of tests. order_by() ¶ Annotations can be used as a basis for ordering. When you\ndefine an order_by() clause, the aggregates you provide can reference\nany alias defined as part of an annotate() clause in the query. For example, to order a QuerySet of books by the number of authors\nthat have contributed to the book, you could use the following query: >>> Book . objects . annotate ( num_authors = Count ( \"authors\" )) . order_by ( \"num_authors\" ) values() ¶ Ordinarily, annotations are generated on a per-object basis - an annotated QuerySet will return one result for each object in the original QuerySet . However, when a values() clause is used to constrain the\ncolumns that are returned in the result set, the method for evaluating\nannotations is slightly different. Instead of returning an annotated result\nfor each result in the original QuerySet , the original results are\ngrouped according to the unique combinations of the fields specified in the values() clause. An annotation is then provided for each unique group;\nthe annotation is computed over all members of the group. For example, consider an author query that attempts to find out the average\nrating of books written by each author: >>> Author . objects . annotate ( average_rating = Avg ( \"book__rating\" )) This will return one result for each author in the database, annotated with\ntheir average book rating. However, the result will be slightly different if you use a values() clause: >>> Author . objects . values ( \"name\" ) . annotate ( average_rating = Avg ( \"book__rating\" )) In this example, the authors will be grouped by name, so you will only get\nan annotated result for each unique author name. This means if you have\ntwo authors with the same name, their results will be merged into a single\nresult in the output of the query; the average will be computed as the\naverage over the books written by both authors. Order of annotate() and values() clauses ¶ As with the filter() clause, the order in which annotate() and values() clauses are applied to a query is significant. If the values() clause precedes the annotate() , the annotation will be\ncomputed using the grouping described by the values() clause. However, if the annotate() clause precedes the values() clause,\nthe annotations will be generated over the entire query set. In this case,\nthe values() clause only constrains the fields that are generated on\noutput. For example, if we reverse the order of the values() and annotate() clause from our previous example: >>> Author . objects . annotate ( average_rating = Avg ( \"book__rating\" )) . values ( ... \"name\" , \"average_rating\" ... ) This will now yield one unique result for each author; however, only\nthe author’s name and the average_rating annotation will be returned\nin the output data. You should also note that average_rating has been explicitly included\nin the list of values to be returned. This is required because of the\nordering of the values() and annotate() clause. If the values() clause precedes the annotate() clause, any annotations\nwill be automatically added to the result set. However, if the values() clause is applied after the annotate() clause, you need to explicitly\ninclude the aggregate column. Interaction with order_by() ¶ Fields that are mentioned in the order_by() part of a queryset are used\nwhen selecting the output data, even if they are not otherwise specified in the values() call. These extra fields are used to group “like” results together\nand they can make otherwise identical result rows appear to be separate. This\nshows up, particularly, when counting things. By way of example, suppose you have a model like this: from django.db import models class Item ( models . Model ): name = models . CharField ( max_length = 10 ) data = models . IntegerField () If you want to count how many times each distinct data value appears in an\nordered queryset, you might try this: items = Item . objects . order_by ( \"name\" ) # Warning: not quite correct! items . values ( \"data\" ) . annotate ( Count ( \"id\" )) …which will group the Item objects by their common data values and\nthen count the number of id values in each group. Except that it won’t\nquite work. The ordering by name will also play a part in the grouping, so\nthis query will group by distinct (data, name) pairs, which isn’t what you\nwant. Instead, you should construct this queryset: items . values ( \"data\" ) . annotate ( Count ( \"id\" )) . order_by () …clearing any ordering in the query. You could also order by, say, data without any harmful effects, since that is already playing a role in the\nquery. This behavior is the same as that noted in the queryset documentation for distinct() and the general rule is the\nsame: normally you won’t want extra columns playing a part in the result, so\nclear out the ordering, or at least make sure it’s restricted only to those\nfields you also select in a values() call. Note You might reasonably ask why Django doesn’t remove the extraneous columns\nfor you. The main reason is consistency with distinct() and other\nplaces: Django never removes ordering constraints that you have\nspecified (and we can’t change those other methods’ behavior, as that\nwould violate our API stability policy). Aggregating annotations ¶ You can also generate an aggregate on the result of an annotation. When you\ndefine an aggregate() clause, the aggregates you provide can reference\nany alias defined as part of an annotate() clause in the query. For example, if you wanted to calculate the average number of authors per\nbook you first annotate the set of books with the author count, then\naggregate that author count, referencing the annotation field: >>> from django.db.models import Avg , Count >>> Book . objects . annotate ( num_authors = Count ( \"authors\" )) . aggregate ( Avg ( \"num_authors\" )) {'num_authors__avg': 1.66} Aggregating on empty querysets or groups ¶ When an aggregation is applied to an empty queryset or grouping, the result\ndefaults to its default parameter, typically None . This behavior occurs because aggregate functions return NULL when\nthe executed query returns no rows. You can specify a return value by providing the default argument for most aggregations. However, since Count does not support the default argument, it will always return 0 for empty querysets\nor groups. For example, assuming that no book contains web in its name, calculating the\ntotal price for this book set would return None since there are no matching\nrows to compute the Sum aggregation on: >>> from django.db.models import Sum >>> Book . objects . filter ( name__contains = \"web\" ) . aggregate ( Sum ( \"price\" )) {\"price__sum\": None} However, the default argument can be set when\ncalling Sum to return a different default value if\nno books can be found: >>> Book . objects . filter ( name__contains = \"web\" ) . aggregate ( Sum ( \"price\" , default = 0 )) {\"price__sum\": Decimal(\"0\")} Under the hood, the default argument is implemented\nby wrapping the aggregate function with Coalesce .", "keywords": ["state", "dictionary", "book__rating__gt", "book__rating__lte", "column", "work", "total_pages", "sum", "author(s", "generating", "range", "retrieve", "annotation", "querysets", "manytomanyfield", "book", "book__pubdate", "rows", "order", "ratings", "basis", "documentation", "filter", "rules", "price", "distinct", "book__pages", "pairs", "highly_rated_books", "book__rating__avg", "sheet", "price__min", "book__pubdate__min", "reason", "aggregation", "count", "order_by", "null", "book__pages__sum", "q", "property", "method", "queryset", "table", "tests", "behavior", "authors", "cheat", "values", "lowercase", "grouping", "d", "price__avg", "query", "oldest_pubdate", "places", "import", "problem", "notation", "times", "books__price", "'", "ways", "datefield", "difference", "item", "items", "hurry", "role", "doubt", "groups", "topic", "#", "annotations", "result", "point", "publisher", "output", "fields", "way", "underscore", "book__count", "conditionals", "book__rating", "¶", "avg_rating", "default", "filters", "num_authors__gt", "books__authors__age", "bookstores", "salamipress", "stores", "web", "books", "stock", "methods", "attention", "output_field", "floatfield", "pubs", "model", "max_length", "none", "querying", "join", "results", "book__rating__gte", "span", "combinations", "age", "example", ">", "practical", "constraints", "ordering", "calls", "guide", "abstraction", "identifier", "below_5", "n’t", "value", "functions", "book<->publisher", "above_5", "price__max", "case", "publisher__name", "argument", "class", "number", "decimal_places", "num_authors", "return", "b", "c", "columns", "average", "definitive", "attribute", "function", "aggregate", "django.db", "queryset.filter", "things", "series", "sale", "list", "rating", "bug", "decimal('12.99", "a", "policy", "data", "call", "avg", "subqueries", "effects", "matching", "decimal('81.20", "average_price", "name", "object", "joins", "lookups", "group", "relationships", "i", "hood", "plenty", "warning", "part", "file", "queries", "baloneypress", "one", "youngest_age", "attributes", "num_books", "operations", "’s", "num_authors__avg", "charfield", "interaction", "inventory", "store", "price_diff", "average_rating", "keys", "means", "api", "pubdate", "sql", "orm", "stability", "max_price", "author", "summary", "projects", "rule", "django", "clause", "clauses", "ordinarily", "aggregates", "parameter", "syntax", "set", "max", "hop", "field", "aggregations", "min", "relations", "foreignkey", "name__contains", "database", "integerfield", "relationship", "decimalfield", "reverse", "annotate", "consistency", "chains", "coalesce", "operation", "reference", "effect", "publishers", "=", "models", "summaries", "pages", "underscores", "implication", "objects", "collection", "members", "defaults", "alias", "title", "counters"], "type": "documentation"},
{"title": "Making queries", "url": "https://docs.djangoproject.com/en/5.1/topics/db/queries/", "content": "Making queries ¶ Once you’ve created your data models , Django\nautomatically gives you a database-abstraction API that lets you create,\nretrieve, update and delete objects. This document explains how to use this\nAPI. Refer to the data model reference for full\ndetails of all the various model lookup options. Throughout this guide (and in the reference), we’ll refer to the following\nmodels, which comprise a blog application: from datetime import date from django.db import models class Blog ( models . Model ): name = models . CharField ( max_length = 100 ) tagline = models . TextField () def __str__ ( self ): return self . name class Author ( models . Model ): name = models . CharField ( max_length = 200 ) email = models . EmailField () def __str__ ( self ): return self . name class Entry ( models . Model ): blog = models . ForeignKey ( Blog , on_delete = models . CASCADE ) headline = models . CharField ( max_length = 255 ) body_text = models . TextField () pub_date = models . DateField () mod_date = models . DateField ( default = date . today ) authors = models . ManyToManyField ( Author ) number_of_comments = models . IntegerField ( default = 0 ) number_of_pingbacks = models . IntegerField ( default = 0 ) rating = models . IntegerField ( default = 5 ) def __str__ ( self ): return self . headline Creating objects ¶ To represent database-table data in Python objects, Django uses an intuitive\nsystem: A model class represents a database table, and an instance of that\nclass represents a particular record in the database table. To create an object, instantiate it using keyword arguments to the model class,\nthen call save() to save it to the database. Assuming models live in a models.py file inside a blog Django app, here\nis an example: >>> from blog.models import Blog >>> b = Blog ( name = \"Beatles Blog\" , tagline = \"All the latest Beatles news.\" ) >>> b . save () This performs an INSERT SQL statement behind the scenes. Django doesn’t hit\nthe database until you explicitly call save() . The save() method has no return value. See also save() takes a number of advanced options not\ndescribed here. See the documentation for save() for complete details. To create and save an object in a single step, use the create() method. Saving changes to objects ¶ To save changes to an object that’s already in the database, use save() . Given a Blog instance b5 that has already been saved to the database,\nthis example changes its name and updates its record in the database: >>> b5 . name = \"New name\" >>> b5 . save () This performs an UPDATE SQL statement behind the scenes. Django doesn’t hit\nthe database until you explicitly call save() . Saving ForeignKey and ManyToManyField fields ¶ Updating a ForeignKey field works exactly the same\nway as saving a normal field – assign an object of the right type to the field\nin question. This example updates the blog attribute of an Entry instance entry , assuming appropriate instances of Entry and Blog are already saved to the database (so we can retrieve them below): >>> from blog.models import Blog , Entry >>> entry = Entry . objects . get ( pk = 1 ) >>> cheese_blog = Blog . objects . get ( name = \"Cheddar Talk\" ) >>> entry . blog = cheese_blog >>> entry . save () Updating a ManyToManyField works a little\ndifferently – use the add() method on the field\nto add a record to the relation. This example adds the Author instance joe to the entry object: >>> from blog.models import Author >>> joe = Author . objects . create ( name = \"Joe\" ) >>> entry . authors . add ( joe ) To add multiple records to a ManyToManyField in one\ngo, include multiple arguments in the call to add() , like this: >>> john = Author . objects . create ( name = \"John\" ) >>> paul = Author . objects . create ( name = \"Paul\" ) >>> george = Author . objects . create ( name = \"George\" ) >>> ringo = Author . objects . create ( name = \"Ringo\" ) >>> entry . authors . add ( john , paul , george , ringo ) Django will complain if you try to assign or add an object of the wrong type. Retrieving objects ¶ To retrieve objects from your database, construct a QuerySet via a Manager on your model class. A QuerySet represents a collection of objects\nfrom your database. It can have zero, one or many filters . Filters narrow\ndown the query results based on the given parameters. In SQL terms, a QuerySet equates to a SELECT statement,\nand a filter is a limiting clause such as WHERE or LIMIT . You get a QuerySet by using your model’s Manager . Each model has at least one Manager , and it’s called objects by default. Access it directly via the\nmodel class, like so: >>> Blog . objects <django.db.models.manager.Manager object at ...> >>> b = Blog ( name = \"Foo\" , tagline = \"Bar\" ) >>> b . objects Traceback: ... AttributeError: \"Manager isn't accessible via Blog instances.\" Note Managers are accessible only via model classes, rather than from model\ninstances, to enforce a separation between “table-level” operations and\n“record-level” operations. The Manager is the main source of QuerySets for\na model. For example, Blog.objects.all() returns a QuerySet that contains all Blog objects in\nthe database. Retrieving all objects ¶ The simplest way to retrieve objects from a table is to get all of them. To do\nthis, use the all() method on a Manager : >>> all_entries = Entry . objects . all () The all() method returns a QuerySet of all the objects in the database. Retrieving specific objects with filters ¶ The QuerySet returned by all() describes all objects in the\ndatabase table. Usually, though, you’ll need to select only a subset of the\ncomplete set of objects. To create such a subset, you refine the initial QuerySet , adding filter conditions. The two\nmost common ways to refine a QuerySet are: filter(**kwargs) Returns a new QuerySet containing objects\nthat match the given lookup parameters. exclude(**kwargs) Returns a new QuerySet containing objects\nthat do not match the given lookup parameters. The lookup parameters ( **kwargs in the above function definitions) should\nbe in the format described in Field lookups below. For example, to get a QuerySet of blog entries\nfrom the year 2006, use filter() like\nso: Entry . objects . filter ( pub_date__year = 2006 ) With the default manager class, it is the same as: Entry . objects . all () . filter ( pub_date__year = 2006 ) Chaining filters ¶ The result of refining a QuerySet is itself a QuerySet , so it’s possible to chain\nrefinements together. For example: >>> Entry . objects . filter ( headline__startswith = \"What\" ) . exclude ( ... pub_date__gte = datetime . date . today () ... ) . filter ( pub_date__gte = datetime . date ( 2005 , 1 , 30 )) This takes the initial QuerySet of all entries\nin the database, adds a filter, then an exclusion, then another filter. The\nfinal result is a QuerySet containing all\nentries with a headline that starts with “What”, that were published between\nJanuary 30, 2005, and the current day. Filtered QuerySet s are unique ¶ Each time you refine a QuerySet , you get a\nbrand-new QuerySet that is in no way bound to\nthe previous QuerySet . Each refinement creates\na separate and distinct QuerySet that can be\nstored, used and reused. Example: >>> q1 = Entry . objects . filter ( headline__startswith = \"What\" ) >>> q2 = q1 . exclude ( pub_date__gte = datetime . date . today ()) >>> q3 = q1 . filter ( pub_date__gte = datetime . date . today ()) These three QuerySets are separate. The first is a base QuerySet containing all entries that contain a\nheadline starting with “What”. The second is a subset of the first, with an\nadditional criteria that excludes records whose pub_date is today or in the\nfuture. The third is a subset of the first, with an additional criteria that\nselects only the records whose pub_date is today or in the future. The\ninitial QuerySet ( q1 ) is unaffected by the\nrefinement process. QuerySet s are lazy ¶ QuerySets are lazy – the act of creating a QuerySet doesn’t involve any database\nactivity. You can stack filters together all day long, and Django won’t\nactually run the query until the QuerySet is evaluated . Take a look at this example: >>> q = Entry . objects . filter ( headline__startswith = \"What\" ) >>> q = q . filter ( pub_date__lte = datetime . date . today ()) >>> q = q . exclude ( body_text__icontains = \"food\" ) >>> print ( q ) Though this looks like three database hits, in fact it hits the database only\nonce, at the last line ( print(q) ). In general, the results of a QuerySet aren’t fetched from the database\nuntil you “ask” for them. When you do, the QuerySet is evaluated by accessing the\ndatabase. For more details on exactly when evaluation takes place, see When QuerySets are evaluated . Retrieving a single object with get() ¶ filter() will always give you a QuerySet , even if only a single object matches\nthe query - in this case, it will be a QuerySet containing a single element. If you know there is only one object that matches your query, you can use the get() method on a Manager which returns the object directly: >>> one_entry = Entry . objects . get ( pk = 1 ) You can use any query expression with get() , just like with filter() - again, see Field lookups below. Note that there is a difference between using get() , and using filter() with a slice of [0] . If\nthere are no results that match the query, get() will raise a DoesNotExist exception. This exception is an attribute of the model class that the query is\nbeing performed on - so in the code above, if there is no Entry object with\na primary key of 1, Django will raise Entry.DoesNotExist . Similarly, Django will complain if more than one item matches the get() query. In this case, it will raise MultipleObjectsReturned , which again is an\nattribute of the model class itself. Other QuerySet methods ¶ Most of the time you’ll use all() , get() , filter() and exclude() when you need to look up\nobjects from the database. However, that’s far from all there is; see the QuerySet API Reference for a complete list of all the\nvarious QuerySet methods. Limiting QuerySet s ¶ Use a subset of Python’s array-slicing syntax to limit your QuerySet to a certain number of results. This\nis the equivalent of SQL’s LIMIT and OFFSET clauses. For example, this returns the first 5 objects ( LIMIT 5 ): >>> Entry . objects . all ()[: 5 ] This returns the sixth through tenth objects ( OFFSET 5 LIMIT 5 ): >>> Entry . objects . all ()[ 5 : 10 ] Negative indexing (i.e. Entry.objects.all()[-1] ) is not supported. Generally, slicing a QuerySet returns a new QuerySet – it doesn’t evaluate the query. An\nexception is if you use the “step” parameter of Python slice syntax. For\nexample, this would actually execute the query in order to return a list of\nevery second object of the first 10: >>> Entry . objects . all ()[: 10 : 2 ] Further filtering or ordering of a sliced queryset is prohibited due to the\nambiguous nature of how that might work. To retrieve a single object rather than a list\n(e.g. SELECT foo FROM bar LIMIT 1 ), use an index instead of a slice. For\nexample, this returns the first Entry in the database, after ordering\nentries alphabetically by headline: >>> Entry . objects . order_by ( \"headline\" )[ 0 ] This is roughly equivalent to: >>> Entry . objects . order_by ( \"headline\" )[ 0 : 1 ] . get () Note, however, that the first of these will raise IndexError while the\nsecond will raise DoesNotExist if no objects match the given criteria. See get() for more details. Field lookups ¶ Field lookups are how you specify the meat of an SQL WHERE clause. They’re\nspecified as keyword arguments to the QuerySet methods filter() , exclude() and get() . Basic lookups keyword arguments take the form field__lookuptype=value .\n(That’s a double-underscore). For example: >>> Entry . objects . filter ( pub_date__lte = \"2006-01-01\" ) translates (roughly) into the following SQL: SELECT * FROM blog_entry WHERE pub_date <= '2006-01-01' ; How this is possible Python has the ability to define functions that accept arbitrary name-value\narguments whose names and values are evaluated at runtime. For more\ninformation, see Keyword Arguments in the official Python tutorial. The field specified in a lookup has to be the name of a model field. There’s\none exception though, in case of a ForeignKey you\ncan specify the field name suffixed with _id . In this case, the value\nparameter is expected to contain the raw value of the foreign model’s primary\nkey. For example: >>> Entry . objects . filter ( blog_id = 4 ) If you pass an invalid keyword argument, a lookup function will raise TypeError . The database API supports about two dozen lookup types; a complete reference\ncan be found in the field lookup reference . To give you\na taste of what’s available, here’s some of the more common lookups you’ll\nprobably use: exact An “exact” match. For example: >>> Entry . objects . get ( headline__exact = \"Cat bites dog\" ) Would generate SQL along these lines: SELECT ... WHERE headline = 'Cat bites dog' ; If you don’t provide a lookup type – that is, if your keyword argument\ndoesn’t contain a double underscore – the lookup type is assumed to be exact . For example, the following two statements are equivalent: >>> Blog . objects . get ( id__exact = 14 ) # Explicit form >>> Blog . objects . get ( id = 14 ) # __exact is implied This is for convenience, because exact lookups are the common case. iexact A case-insensitive match. So, the query: >>> Blog . objects . get ( name__iexact = \"beatles blog\" ) Would match a Blog titled \"Beatles Blog\" , \"beatles blog\" , or\neven \"BeAtlES blOG\" . contains Case-sensitive containment test. For example: Entry . objects . get ( headline__contains = \"Lennon\" ) Roughly translates to this SQL: SELECT ... WHERE headline LIKE '%Lennon%' ; Note this will match the headline 'Today Lennon honored' but not 'today lennon honored' . There’s also a case-insensitive version, icontains . startswith , endswith Starts-with and ends-with search, respectively. There are also\ncase-insensitive versions called istartswith and iendswith . Again, this only scratches the surface. A complete reference can be found in the field lookup reference . Lookups that span relationships ¶ Django offers a powerful and intuitive way to “follow” relationships in\nlookups, taking care of the SQL JOIN s for you automatically, behind the\nscenes. To span a relationship, use the field name of related fields\nacross models, separated by double underscores, until you get to the field you\nwant. This example retrieves all Entry objects with a Blog whose name is 'Beatles Blog' : >>> Entry . objects . filter ( blog__name = \"Beatles Blog\" ) This spanning can be as deep as you’d like. It works backwards, too. While it can be customized , by default you refer to a “reverse”\nrelationship in a lookup using the lowercase name of the model. This example retrieves all Blog objects which have at least one Entry whose headline contains 'Lennon' : >>> Blog . objects . filter ( entry__headline__contains = \"Lennon\" ) If you are filtering across multiple relationships and one of the intermediate\nmodels doesn’t have a value that meets the filter condition, Django will treat\nit as if there is an empty (all values are NULL ), but valid, object there.\nAll this means is that no error will be raised. For example, in this filter: Blog . objects . filter ( entry__authors__name = \"Lennon\" ) (if there was a related Author model), if there was no author associated with an entry, it would be treated as if there was also no name attached, rather than raising an error because of the missing author .\nUsually this is exactly what you want to have happen. The only case where it\nmight be confusing is if you are using isnull . Thus: Blog . objects . filter ( entry__authors__name__isnull = True ) will return Blog objects that have an empty name on the author and\nalso those which have an empty author on the entry . If you don’t want\nthose latter objects, you could write: Blog . objects . filter ( entry__authors__isnull = False , entry__authors__name__isnull = True ) Spanning multi-valued relationships ¶ When spanning a ManyToManyField or a reverse ForeignKey (such as from Blog to Entry ),\nfiltering on multiple attributes raises the question of whether to require each\nattribute to coincide in the same related object. We might seek blogs that have\nan entry from 2008 with “Lennon” in its headline, or we might seek blogs that\nmerely have any entry from 2008 as well as some newer or older entry with “Lennon” in its headline. To select all blogs containing at least one entry from 2008 having “Lennon” in its headline (the same entry satisfying both conditions), we would write: Blog . objects . filter ( entry__headline__contains = \"Lennon\" , entry__pub_date__year = 2008 ) Otherwise, to perform a more permissive query selecting any blogs with merely some entry with “Lennon” in its headline and some entry from 2008, we\nwould write: Blog . objects . filter ( entry__headline__contains = \"Lennon\" ) . filter ( entry__pub_date__year = 2008 ) Suppose there is only one blog that has both entries containing “Lennon” and\nentries from 2008, but that none of the entries from 2008 contained “Lennon” .\nThe first query would not return any blogs, but the second query would return\nthat one blog. (This is because the entries selected by the second filter may\nor may not be the same as the entries in the first filter. We are filtering the Blog items with each filter statement, not the Entry items.) In short,\nif each condition needs to match the same related object, then each should be\ncontained in a single filter() call. Note As the second (more permissive) query chains multiple filters, it performs\nmultiple joins to the primary model, potentially yielding duplicates. >>> from datetime import date >>> beatles = Blog . objects . create ( name = \"Beatles Blog\" ) >>> pop = Blog . objects . create ( name = \"Pop Music Blog\" ) >>> Entry . objects . create ( ... blog = beatles , ... headline = \"New Lennon Biography\" , ... pub_date = date ( 2008 , 6 , 1 ), ... ) <Entry: New Lennon Biography> >>> Entry . objects . create ( ... blog = beatles , ... headline = \"New Lennon Biography in Paperback\" , ... pub_date = date ( 2009 , 6 , 1 ), ... ) <Entry: New Lennon Biography in Paperback> >>> Entry . objects . create ( ... blog = pop , ... headline = \"Best Albums of 2008\" , ... pub_date = date ( 2008 , 12 , 15 ), ... ) <Entry: Best Albums of 2008> >>> Entry . objects . create ( ... blog = pop , ... headline = \"Lennon Would Have Loved Hip Hop\" , ... pub_date = date ( 2020 , 4 , 1 ), ... ) <Entry: Lennon Would Have Loved Hip Hop> >>> Blog . objects . filter ( ... entry__headline__contains = \"Lennon\" , ... entry__pub_date__year = 2008 , ... ) <QuerySet [<Blog: Beatles Blog>]> >>> Blog . objects . filter ( ... entry__headline__contains = \"Lennon\" , ... ) . filter ( ... entry__pub_date__year = 2008 , ... ) <QuerySet [<Blog: Beatles Blog>, <Blog: Beatles Blog>, <Blog: Pop Music Blog]> Note The behavior of filter() for queries\nthat span multi-value relationships, as described above, is not implemented\nequivalently for exclude() . Instead,\nthe conditions in a single exclude() call will not necessarily refer to the same item. For example, the following query would exclude blogs that contain both entries with “Lennon” in the headline and entries published in 2008: Blog . objects . exclude ( entry__headline__contains = \"Lennon\" , entry__pub_date__year = 2008 , ) However, unlike the behavior when using filter() , this will not limit blogs\nbased on entries that satisfy both conditions. In order to do that, i.e.\nto select all blogs that do not contain entries published with “Lennon” that were published in 2008, you need to make two queries: Blog . objects . exclude ( entry__in = Entry . objects . filter ( headline__contains = \"Lennon\" , pub_date__year = 2008 , ), ) Filters can reference fields on the model ¶ In the examples given so far, we have constructed filters that compare\nthe value of a model field with a constant. But what if you want to compare\nthe value of a model field with another field on the same model? Django provides F expressions to allow such\ncomparisons. Instances of F() act as a reference to a model field within a\nquery. These references can then be used in query filters to compare the values\nof two different fields on the same model instance. For example, to find a list of all blog entries that have had more comments\nthan pingbacks, we construct an F() object to reference the pingback count,\nand use that F() object in the query: >>> from django.db.models import F >>> Entry . objects . filter ( number_of_comments__gt = F ( \"number_of_pingbacks\" )) Django supports the use of addition, subtraction, multiplication,\ndivision, modulo, and power arithmetic with F() objects, both with constants\nand with other F() objects. To find all the blog entries with more than twice as many comments as pingbacks, we modify the query: >>> Entry . objects . filter ( number_of_comments__gt = F ( \"number_of_pingbacks\" ) * 2 ) To find all the entries where the rating of the entry is less than the\nsum of the pingback count and comment count, we would issue the\nquery: >>> Entry . objects . filter ( rating__lt = F ( \"number_of_comments\" ) + F ( \"number_of_pingbacks\" )) You can also use the double underscore notation to span relationships in\nan F() object. An F() object with a double underscore will introduce\nany joins needed to access the related object. For example, to retrieve all\nthe entries where the author’s name is the same as the blog name, we could\nissue the query: >>> Entry . objects . filter ( authors__name = F ( \"blog__name\" )) For date and date/time fields, you can add or subtract a timedelta object. The following would return all entries\nthat were modified more than 3 days after they were published: >>> from datetime import timedelta >>> Entry . objects . filter ( mod_date__gt = F ( \"pub_date\" ) + timedelta ( days = 3 )) The F() objects support bitwise operations by .bitand() , .bitor() , .bitxor() , .bitrightshift() , and .bitleftshift() . For example: >>> F ( \"somefield\" ) . bitand ( 16 ) Oracle Oracle doesn’t support bitwise XOR operation. Expressions can reference transforms ¶ Django supports using transforms in expressions. For example, to find all Entry objects published in the same year as they\nwere last modified: >>> from django.db.models import F >>> Entry . objects . filter ( pub_date__year = F ( \"mod_date__year\" )) To find the earliest year an entry was published, we can issue the query: >>> from django.db.models import Min >>> Entry . objects . aggregate ( first_published_year = Min ( \"pub_date__year\" )) This example finds the value of the highest rated entry and the total number\nof comments on all entries for each year: >>> from django.db.models import OuterRef , Subquery , Sum >>> Entry . objects . values ( \"pub_date__year\" ) . annotate ( ... top_rating = Subquery ( ... Entry . objects . filter ( ... pub_date__year = OuterRef ( \"pub_date__year\" ), ... ) ... . order_by ( \"-rating\" ) ... . values ( \"rating\" )[: 1 ] ... ), ... total_comments = Sum ( \"number_of_comments\" ), ... ) The pk lookup shortcut ¶ For convenience, Django provides a pk lookup shortcut, which stands for\n“primary key”. In the example Blog model, the primary key is the id field, so these\nthree statements are equivalent: >>> Blog . objects . get ( id__exact = 14 ) # Explicit form >>> Blog . objects . get ( id = 14 ) # __exact is implied >>> Blog . objects . get ( pk = 14 ) # pk implies id__exact The use of pk isn’t limited to __exact queries – any query term\ncan be combined with pk to perform a query on the primary key of a model: # Get blogs entries with id 1, 4 and 7 >>> Blog . objects . filter ( pk__in = [ 1 , 4 , 7 ]) # Get all blog entries with id > 14 >>> Blog . objects . filter ( pk__gt = 14 ) pk lookups also work across joins. For example, these three statements are\nequivalent: >>> Entry . objects . filter ( blog__id__exact = 3 ) # Explicit form >>> Entry . objects . filter ( blog__id = 3 ) # __exact is implied >>> Entry . objects . filter ( blog__pk = 3 ) # __pk implies __id__exact Escaping percent signs and underscores in LIKE statements ¶ The field lookups that equate to LIKE SQL statements ( iexact , contains , icontains , startswith , istartswith , endswith and iendswith ) will automatically escape the two special characters used in LIKE statements – the percent sign and the underscore. (In a LIKE statement, the percent sign signifies a multiple-character wildcard and the\nunderscore signifies a single-character wildcard.) This means things should work intuitively, so the abstraction doesn’t leak.\nFor example, to retrieve all the entries that contain a percent sign, use the\npercent sign as any other character: >>> Entry . objects . filter ( headline__contains = \"%\" ) Django takes care of the quoting for you; the resulting SQL will look something\nlike this: SELECT ... WHERE headline LIKE '%\\%%' ; Same goes for underscores. Both percentage signs and underscores are handled\nfor you transparently. Caching and QuerySet s ¶ Each QuerySet contains a cache to minimize\ndatabase access. Understanding how it works will allow you to write the most\nefficient code. In a newly created QuerySet , the cache is\nempty. The first time a QuerySet is evaluated\n– and, hence, a database query happens – Django saves the query results in\nthe QuerySet ’s cache and returns the results\nthat have been explicitly requested (e.g., the next element, if the QuerySet is being iterated over). Subsequent\nevaluations of the QuerySet reuse the cached\nresults. Keep this caching behavior in mind, because it may bite you if you don’t use\nyour QuerySet s correctly. For example, the\nfollowing will create two QuerySet s, evaluate\nthem, and throw them away: >>> print ([ e . headline for e in Entry . objects . all ()]) >>> print ([ e . pub_date for e in Entry . objects . all ()]) That means the same database query will be executed twice, effectively doubling\nyour database load. Also, there’s a possibility the two lists may not include\nthe same database records, because an Entry may have been added or deleted\nin the split second between the two requests. To avoid this problem, save the QuerySet and\nreuse it: >>> queryset = Entry . objects . all () >>> print ([ p . headline for p in queryset ]) # Evaluate the query set. >>> print ([ p . pub_date for p in queryset ]) # Reuse the cache from the evaluation. When QuerySet s are not cached ¶ Querysets do not always cache their results.  When evaluating only part of\nthe queryset, the cache is checked, but if it is not populated then the items\nreturned by the subsequent query are not cached. Specifically, this means that limiting the queryset using an array slice or an\nindex will not populate the cache. For example, repeatedly getting a certain index in a queryset object will query\nthe database each time: >>> queryset = Entry . objects . all () >>> print ( queryset [ 5 ]) # Queries the database >>> print ( queryset [ 5 ]) # Queries the database again However, if the entire queryset has already been evaluated, the cache will be\nchecked instead: >>> queryset = Entry . objects . all () >>> [ entry for entry in queryset ] # Queries the database >>> print ( queryset [ 5 ]) # Uses cache >>> print ( queryset [ 5 ]) # Uses cache Here are some examples of other actions that will result in the entire queryset\nbeing evaluated and therefore populate the cache: >>> [ entry for entry in queryset ] >>> bool ( queryset ) >>> entry in queryset >>> list ( queryset ) Note Simply printing the queryset will not populate the cache. This is because\nthe call to __repr__() only returns a slice of the entire queryset. Asynchronous queries ¶ If you are writing asynchronous views or code, you cannot use the ORM for\nqueries in quite the way we have described above, as you cannot call blocking synchronous code from asynchronous code - it will block up the event loop\n(or, more likely, Django will notice and raise a SynchronousOnlyOperation to stop that from happening). Fortunately, you can do many queries using Django’s asynchronous query APIs.\nEvery method that might block - such as get() or delete() - has an\nasynchronous variant ( aget() or adelete() ), and when you iterate over\nresults, you can use asynchronous iteration ( async for ) instead. Query iteration ¶ The default way of iterating over a query - with for - will result in a\nblocking database query behind the scenes as Django loads the results at\niteration time. To fix this, you can swap to async for : async for entry in Authors . objects . filter ( name__startswith = \"A\" ): ... Be aware that you also can’t do other things that might iterate over the\nqueryset, such as wrapping list() around it to force its evaluation (you\ncan use async for in a comprehension, if you want it). Because QuerySet methods like filter() and exclude() do not\nactually run the query - they set up the queryset to run when it’s iterated\nover - you can use those freely in asynchronous code. For a guide to which\nmethods can keep being used like this, and which have asynchronous versions,\nread the next section. QuerySet and manager methods ¶ Some methods on managers and querysets - like get() and first() - force\nexecution of the queryset and are blocking. Some, like filter() and exclude() , don’t force execution and so are safe to run from asynchronous\ncode. But how are you supposed to tell the difference? While you could poke around and see if there is an a -prefixed version of\nthe method (for example, we have aget() but not afilter() ), there is a\nmore logical way - look up what kind of method it is in the QuerySet reference . In there, you’ll find the methods on QuerySets grouped into two sections: Methods that return new querysets : These are the non-blocking ones,\nand don’t have asynchronous versions. You’re free to use these in any\nsituation, though read the notes on defer() and only() before you use\nthem. Methods that do not return querysets : These are the blocking ones, and\nhave asynchronous versions - the asynchronous name for each is noted in its\ndocumentation, though our standard pattern is to add an a prefix. Using this distinction, you can work out when you need to use asynchronous\nversions, and when you don’t. For example, here’s a valid asynchronous query: user = await User . objects . filter ( username = my_input ) . afirst () filter() returns a queryset, and so it’s fine to keep chaining it inside an\nasynchronous environment, whereas first() evaluates and returns a model\ninstance - thus, we change to afirst() , and use await at the front of\nthe whole expression in order to call it in an asynchronous-friendly way. Note If you forget to put the await part in, you may see errors like “coroutine object has no attribute x” or “<coroutine …>” strings in\nplace of your model instances. If you ever see these, you are missing an await somewhere to turn that coroutine into a real value. Transactions ¶ Transactions are not currently supported with asynchronous queries and\nupdates. You will find that trying to use one raises SynchronousOnlyOperation . If you wish to use a transaction, we suggest you write your ORM code inside a\nseparate, synchronous function and then call that using sync_to_async - see Asynchronous support for more. Querying JSONField ¶ Lookups implementation is different in JSONField ,\nmainly due to the existence of key transformations. To demonstrate, we will use\nthe following example model: from django.db import models class Dog ( models . Model ): name = models . CharField ( max_length = 200 ) data = models . JSONField ( null = True ) def __str__ ( self ): return self . name Storing and querying for None ¶ As with other fields, storing None as the field’s value will store it as\nSQL NULL . While not recommended, it is possible to store JSON scalar null instead of SQL NULL by using Value(None, JSONField()) . Whichever of the values is stored, when retrieved from the database, the Python\nrepresentation of the JSON scalar null is the same as SQL NULL , i.e. None . Therefore, it can be hard to distinguish between them. This only applies to None as the top-level value of the field. If None is inside a list or dict , it will always be interpreted\nas JSON null . When querying, None value will always be interpreted as JSON null . To\nquery for SQL NULL , use isnull : >>> Dog . objects . create ( name = \"Max\" , data = None ) # SQL NULL. <Dog: Max> >>> Dog . objects . create ( name = \"Archie\" , data = Value ( None , JSONField ())) # JSON null. <Dog: Archie> >>> Dog . objects . filter ( data = None ) <QuerySet [<Dog: Archie>]> >>> Dog . objects . filter ( data = Value ( None , JSONField ())) <QuerySet [<Dog: Archie>]> >>> Dog . objects . filter ( data__isnull = True ) <QuerySet [<Dog: Max>]> >>> Dog . objects . filter ( data__isnull = False ) <QuerySet [<Dog: Archie>]> Unless you are sure you wish to work with SQL NULL values, consider setting null=False and providing a suitable default for empty values, such as default=dict . Note Storing JSON scalar null does not violate null=False . Key, index, and path transforms ¶ To query based on a given dictionary key, use that key as the lookup name: >>> Dog . objects . create ( ... name = \"Rufus\" , ... data = { ... \"breed\" : \"labrador\" , ... \"owner\" : { ... \"name\" : \"Bob\" , ... \"other_pets\" : [ ... { ... \"name\" : \"Fishy\" , ... } ... ], ... }, ... }, ... ) <Dog: Rufus> >>> Dog . objects . create ( name = \"Meg\" , data = { \"breed\" : \"collie\" , \"owner\" : None }) <Dog: Meg> >>> Dog . objects . filter ( data__breed = \"collie\" ) <QuerySet [<Dog: Meg>]> Multiple keys can be chained together to form a path lookup: >>> Dog . objects . filter ( data__owner__name = \"Bob\" ) <QuerySet [<Dog: Rufus>]> If the key is an integer, it will be interpreted as an index transform in an\narray: >>> Dog . objects . filter ( data__owner__other_pets__0__name = \"Fishy\" ) <QuerySet [<Dog: Rufus>]> If the key you wish to query by clashes with the name of another lookup, use\nthe contains lookup instead. To query for missing keys, use the isnull lookup: >>> Dog . objects . create ( name = \"Shep\" , data = { \"breed\" : \"collie\" }) <Dog: Shep> >>> Dog . objects . filter ( data__owner__isnull = True ) <QuerySet [<Dog: Shep>]> Note The lookup examples given above implicitly use the exact lookup.\nKey, index, and path transforms can also be chained with: icontains , endswith , iendswith , iexact , regex , iregex , startswith , istartswith , lt , lte , gt , and gte , as well as with Containment and key lookups . KT() expressions ¶ class KT ( lookup ) ¶ Represents the text value of a key, index, or path transform of JSONField . You can use the double underscore\nnotation in lookup to chain dictionary key and index transforms. For example: >>> from django.db.models.fields.json import KT >>> Dog . objects . create ( ... name = \"Shep\" , ... data = { ... \"owner\" : { \"name\" : \"Bob\" }, ... \"breed\" : [ \"collie\" , \"lhasa apso\" ], ... }, ... ) <Dog: Shep> >>> Dogs . objects . annotate ( ... first_breed = KT ( \"data__breed__1\" ), owner_name = KT ( \"data__owner__name\" ) ... ) . filter ( first_breed__startswith = \"lhasa\" , owner_name = \"Bob\" ) <QuerySet [<Dog: Shep>]> Note Due to the way in which key-path queries work, exclude() and filter() are not guaranteed to\nproduce exhaustive sets. If you want to include objects that do not have\nthe path, add the isnull lookup. Warning Since any string could be a key in a JSON object, any lookup other than\nthose listed below will be interpreted as a key lookup. No errors are\nraised. Be extra careful for typing mistakes, and always check your queries\nwork as you intend. MariaDB and Oracle users Using order_by() on key, index, or\npath transforms will sort the objects using the string representation of\nthe values. This is because MariaDB and Oracle Database do not provide a\nfunction that converts JSON values into their equivalent SQL values. Oracle users On Oracle Database, using None as the lookup value in an exclude() query will return objects\nthat do not have null as the value at the given path, including objects\nthat do not have the path. On other database backends, the query will\nreturn objects that have the path and the value is not null . PostgreSQL users On PostgreSQL, if only one key or index is used, the SQL operator -> is\nused. If multiple operators are used then the #> operator is used. SQLite users On SQLite, \"true\" , \"false\" , and \"null\" string values will\nalways be interpreted as True , False , and JSON null respectively. Containment and key lookups ¶ contains ¶ The contains lookup is overridden on JSONField . The returned\nobjects are those where the given dict of key-value pairs are all\ncontained in the top-level of the field. For example: >>> Dog . objects . create ( name = \"Rufus\" , data = { \"breed\" : \"labrador\" , \"owner\" : \"Bob\" }) <Dog: Rufus> >>> Dog . objects . create ( name = \"Meg\" , data = { \"breed\" : \"collie\" , \"owner\" : \"Bob\" }) <Dog: Meg> >>> Dog . objects . create ( name = \"Fred\" , data = {}) <Dog: Fred> >>> Dog . objects . filter ( data__contains = { \"owner\" : \"Bob\" }) <QuerySet [<Dog: Rufus>, <Dog: Meg>]> >>> Dog . objects . filter ( data__contains = { \"breed\" : \"collie\" }) <QuerySet [<Dog: Meg>]> Oracle and SQLite contains is not supported on Oracle and SQLite. contained_by ¶ This is the inverse of the contains lookup - the\nobjects returned will be those where the key-value pairs on the object are a\nsubset of those in the value passed. For example: >>> Dog . objects . create ( name = \"Rufus\" , data = { \"breed\" : \"labrador\" , \"owner\" : \"Bob\" }) <Dog: Rufus> >>> Dog . objects . create ( name = \"Meg\" , data = { \"breed\" : \"collie\" , \"owner\" : \"Bob\" }) <Dog: Meg> >>> Dog . objects . create ( name = \"Fred\" , data = {}) <Dog: Fred> >>> Dog . objects . filter ( data__contained_by = { \"breed\" : \"collie\" , \"owner\" : \"Bob\" }) <QuerySet [<Dog: Meg>, <Dog: Fred>]> >>> Dog . objects . filter ( data__contained_by = { \"breed\" : \"collie\" }) <QuerySet [<Dog: Fred>]> Oracle and SQLite contained_by is not supported on Oracle and SQLite. has_key ¶ Returns objects where the given key is in the top-level of the data. For\nexample: >>> Dog . objects . create ( name = \"Rufus\" , data = { \"breed\" : \"labrador\" }) <Dog: Rufus> >>> Dog . objects . create ( name = \"Meg\" , data = { \"breed\" : \"collie\" , \"owner\" : \"Bob\" }) <Dog: Meg> >>> Dog . objects . filter ( data__has_key = \"owner\" ) <QuerySet [<Dog: Meg>]> has_keys ¶ Returns objects where all of the given keys are in the top-level of the data.\nFor example: >>> Dog . objects . create ( name = \"Rufus\" , data = { \"breed\" : \"labrador\" }) <Dog: Rufus> >>> Dog . objects . create ( name = \"Meg\" , data = { \"breed\" : \"collie\" , \"owner\" : \"Bob\" }) <Dog: Meg> >>> Dog . objects . filter ( data__has_keys = [ \"breed\" , \"owner\" ]) <QuerySet [<Dog: Meg>]> has_any_keys ¶ Returns objects where any of the given keys are in the top-level of the data.\nFor example: >>> Dog . objects . create ( name = \"Rufus\" , data = { \"breed\" : \"labrador\" }) <Dog: Rufus> >>> Dog . objects . create ( name = \"Meg\" , data = { \"owner\" : \"Bob\" }) <Dog: Meg> >>> Dog . objects . filter ( data__has_any_keys = [ \"owner\" , \"breed\" ]) <QuerySet [<Dog: Rufus>, <Dog: Meg>]> Complex lookups with Q objects ¶ Keyword argument queries – in filter() ,\netc. – are “AND”ed together. If you need to execute more complex queries (for\nexample, queries with OR statements), you can use Q objects . A Q object ( django.db.models.Q ) is an object\nused to encapsulate a collection of keyword arguments. These keyword arguments\nare specified as in “Field lookups” above. For example, this Q object encapsulates a single LIKE query: from django.db.models import Q Q ( question__startswith = \"What\" ) Q objects can be combined using the & , | , and ^ operators. When\nan operator is used on two Q objects, it yields a new Q object. For example, this statement yields a single Q object that represents the\n“OR” of two \"question__startswith\" queries: Q ( question__startswith = \"Who\" ) | Q ( question__startswith = \"What\" ) This is equivalent to the following SQL WHERE clause: WHERE question LIKE 'Who%' OR question LIKE 'What%' You can compose statements of arbitrary complexity by combining Q objects\nwith the & , | , and ^ operators and use parenthetical grouping.\nAlso, Q objects can be negated using the ~ operator, allowing for\ncombined lookups that combine both a normal query and a negated ( NOT )\nquery: Q ( question__startswith = \"Who\" ) | ~ Q ( pub_date__year = 2005 ) Each lookup function that takes keyword-arguments\n(e.g. filter() , exclude() , get() ) can also be passed one or more Q objects as positional (not-named) arguments. If you provide multiple Q object arguments to a lookup function, the arguments will be “AND”ed\ntogether. For example: Poll . objects . get ( Q ( question__startswith = \"Who\" ), Q ( pub_date = date ( 2005 , 5 , 2 )) | Q ( pub_date = date ( 2005 , 5 , 6 )), ) … roughly translates into the SQL: SELECT * from polls WHERE question LIKE 'Who%' AND ( pub_date = '2005-05-02' OR pub_date = '2005-05-06' ) Lookup functions can mix the use of Q objects and keyword arguments. All\narguments provided to a lookup function (be they keyword arguments or Q objects) are “AND”ed together. However, if a Q object is provided, it must\nprecede the definition of any keyword arguments. For example: Poll . objects . get ( Q ( pub_date = date ( 2005 , 5 , 2 )) | Q ( pub_date = date ( 2005 , 5 , 6 )), question__startswith = \"Who\" , ) … would be a valid query, equivalent to the previous example; but: # INVALID QUERY Poll . objects . get ( question__startswith = \"Who\" , Q ( pub_date = date ( 2005 , 5 , 2 )) | Q ( pub_date = date ( 2005 , 5 , 6 )), ) … would not be valid. See also The OR lookups examples in Django’s\nunit tests show some possible uses of Q . Comparing objects ¶ To compare two model instances, use the standard Python comparison operator,\nthe double equals sign: == . Behind the scenes, that compares the primary\nkey values of two models. Using the Entry example above, the following two statements are equivalent: >>> some_entry == other_entry >>> some_entry . id == other_entry . id If a model’s primary key isn’t called id , no problem. Comparisons will\nalways use the primary key, whatever it’s called. For example, if a model’s\nprimary key field is called name , these two statements are equivalent: >>> some_obj == other_obj >>> some_obj . name == other_obj . name Deleting objects ¶ The delete method, conveniently, is named delete() . This method immediately deletes the\nobject and returns the number of objects deleted and a dictionary with\nthe number of deletions per object type. Example: >>> e . delete () (1, {'blog.Entry': 1}) You can also delete objects in bulk. Every QuerySet has a delete() method, which deletes all\nmembers of that QuerySet . For example, this deletes all Entry objects with a pub_date year of\n2005: >>> Entry . objects . filter ( pub_date__year = 2005 ) . delete () (5, {'webapp.Entry': 5}) Keep in mind that this will, whenever possible, be executed purely in SQL, and\nso the delete() methods of individual object instances will not necessarily\nbe called during the process. If you’ve provided a custom delete() method\non a model class and want to ensure that it is called, you will need to\n“manually” delete instances of that model (e.g., by iterating over a QuerySet and calling delete() on each\nobject individually) rather than using the bulk delete() method of a QuerySet . When Django deletes an object, by default it emulates the behavior of the SQL\nconstraint ON DELETE CASCADE – in other words, any objects which had\nforeign keys pointing at the object to be deleted will be deleted along with\nit. For example: b = Blog . objects . get ( pk = 1 ) # This will delete the Blog and all of its Entry objects. b . delete () This cascade behavior is customizable via the on_delete argument to the ForeignKey . Note that delete() is the only QuerySet method that is not exposed on a Manager itself. This is a safety mechanism to\nprevent you from accidentally requesting Entry.objects.delete() , and\ndeleting all the entries. If you do want to delete all the objects, then\nyou have to explicitly request a complete query set: Entry . objects . all () . delete () Copying model instances ¶ Although there is no built-in method for copying model instances, it is\npossible to easily create new instance with all fields’ values copied. In the\nsimplest case, you can set pk to None and _state.adding to True . Using our\nblog example: blog = Blog ( name = \"My blog\" , tagline = \"Blogging is easy\" ) blog . save () # blog.pk == 1 blog . pk = None blog . _state . adding = True blog . save () # blog.pk == 2 Things get more complicated if you use inheritance. Consider a subclass of Blog : class ThemeBlog ( Blog ): theme = models . CharField ( max_length = 200 ) django_blog = ThemeBlog ( name = \"Django\" , tagline = \"Django is easy\" , theme = \"python\" ) django_blog . save () # django_blog.pk == 3 Due to how inheritance works, you have to set both pk and id to None , and _state.adding to True : django_blog . pk = None django_blog . id = None django_blog . _state . adding = True django_blog . save () # django_blog.pk == 4 This process doesn’t copy relations that aren’t part of the model’s database\ntable. For example, Entry has a ManyToManyField to Author . After\nduplicating an entry, you must set the many-to-many relations for the new\nentry: entry = Entry . objects . all ()[ 0 ] # some previous entry old_authors = entry . authors . all () entry . pk = None entry . _state . adding = True entry . save () entry . authors . set ( old_authors ) For a OneToOneField , you must duplicate the related object and assign it\nto the new object’s field to avoid violating the one-to-one unique constraint.\nFor example, assuming entry is already duplicated as above: detail = EntryDetail . objects . all ()[ 0 ] detail . pk = None detail . _state . adding = True detail . entry = entry detail . save () Updating multiple objects at once ¶ Sometimes you want to set a field to a particular value for all the objects in\na QuerySet . You can do this with the update() method. For example: # Update all the headlines with pub_date in 2007. Entry . objects . filter ( pub_date__year = 2007 ) . update ( headline = \"Everything is the same\" ) You can only set non-relation fields and ForeignKey fields using this method. To update a non-relation field, provide the new value\nas a constant. To update ForeignKey fields, set the\nnew value to be the new model instance you want to point to. For example: >>> b = Blog . objects . get ( pk = 1 ) # Change every Entry so that it belongs to this Blog. >>> Entry . objects . update ( blog = b ) The update() method is applied instantly and returns the number of rows\nmatched by the query (which may not be equal to the number of rows updated if\nsome rows already have the new value). The only restriction on the QuerySet being updated is that it can only\naccess one database table: the model’s main table. You can filter based on\nrelated fields, but you can only update columns in the model’s main\ntable. Example: >>> b = Blog . objects . get ( pk = 1 ) # Update all the headlines belonging to this Blog. >>> Entry . objects . filter ( blog = b ) . update ( headline = \"Everything is the same\" ) Be aware that the update() method is converted directly to an SQL\nstatement. It is a bulk operation for direct updates. It doesn’t run any save() methods on your models, or emit the pre_save or post_save signals (which are a consequence of calling save() ), or honor the auto_now field option.\nIf you want to save every item in a QuerySet and make sure that the save() method is called on\neach instance, you don’t need any special function to handle that. Loop over\nthem and call save() : for item in my_queryset : item . save () Calls to update can also use F expressions to\nupdate one field based on the value of another field in the model. This is\nespecially useful for incrementing counters based upon their current value. For\nexample, to increment the pingback count for every entry in the blog: >>> Entry . objects . update ( number_of_pingbacks = F ( \"number_of_pingbacks\" ) + 1 ) However, unlike F() objects in filter and exclude clauses, you can’t\nintroduce joins when you use F() objects in an update – you can only\nreference fields local to the model being updated. If you attempt to introduce\na join with an F() object, a FieldError will be raised: # This will raise a FieldError >>> Entry . objects . update ( headline = F ( \"blog__name\" )) Related objects ¶ When you define a relationship in a model (i.e., a ForeignKey , OneToOneField , or ManyToManyField ), instances of that model will have\na convenient API to access the related object(s). Using the models at the top of this page, for example, an Entry object e can get its associated Blog object by accessing the blog attribute: e.blog . (Behind the scenes, this functionality is implemented by Python descriptors . This shouldn’t really matter to\nyou, but we point it out here for the curious.) Django also creates API accessors for the “other” side of the relationship –\nthe link from the related model to the model that defines the relationship.\nFor example, a Blog object b has access to a list of all related Entry objects via the entry_set attribute: b.entry_set.all() . All examples in this section use the sample Blog , Author and Entry models defined at the top of this page. One-to-many relationships ¶ Forward ¶ If a model has a ForeignKey , instances of that model\nwill have access to the related (foreign) object via an attribute of the model. Example: >>> e = Entry . objects . get ( id = 2 ) >>> e . blog # Returns the related Blog object. You can get and set via a foreign-key attribute. As you may expect, changes to\nthe foreign key aren’t saved to the database until you call save() . Example: >>> e = Entry . objects . get ( id = 2 ) >>> e . blog = some_blog >>> e . save () If a ForeignKey field has null=True set (i.e.,\nit allows NULL values), you can assign None to remove the relation.\nExample: >>> e = Entry . objects . get ( id = 2 ) >>> e . blog = None >>> e . save () # \"UPDATE blog_entry SET blog_id = NULL ...;\" Forward access to one-to-many relationships is cached the first time the\nrelated object is accessed. Subsequent accesses to the foreign key on the same\nobject instance are cached. Example: >>> e = Entry . objects . get ( id = 2 ) >>> print ( e . blog ) # Hits the database to retrieve the associated Blog. >>> print ( e . blog ) # Doesn't hit the database; uses cached version. Note that the select_related() QuerySet method recursively prepopulates the\ncache of all one-to-many relationships ahead of time. Example: >>> e = Entry . objects . select_related () . get ( id = 2 ) >>> print ( e . blog ) # Doesn't hit the database; uses cached version. >>> print ( e . blog ) # Doesn't hit the database; uses cached version. Following relationships “backward” ¶ If a model has a ForeignKey , instances of the\nforeign-key model will have access to a Manager that\nreturns all instances of the first model. By default, this Manager is named FOO_set , where FOO is the\nsource model name, lowercased. This Manager returns QuerySets , which can be filtered and manipulated as described in the\n“Retrieving objects” section above. Example: >>> b = Blog . objects . get ( id = 1 ) >>> b . entry_set . all () # Returns all Entry objects related to Blog. # b.entry_set is a Manager that returns QuerySets. >>> b . entry_set . filter ( headline__contains = \"Lennon\" ) >>> b . entry_set . count () You can override the FOO_set name by setting the related_name parameter in the ForeignKey definition. For example, if the Entry model was altered to blog = ForeignKey(Blog, on_delete=models.CASCADE, related_name='entries') , the above example code would look like this: >>> b = Blog . objects . get ( id = 1 ) >>> b . entries . all () # Returns all Entry objects related to Blog. # b.entries is a Manager that returns QuerySets. >>> b . entries . filter ( headline__contains = \"Lennon\" ) >>> b . entries . count () Using a custom reverse manager ¶ By default the RelatedManager used\nfor reverse relations is a subclass of the default manager for that model. If you would like to specify a different manager for a given\nquery you can use the following syntax: from django.db import models class Entry ( models . Model ): # ... objects = models . Manager () # Default Manager entries = EntryManager () # Custom Manager b = Blog . objects . get ( id = 1 ) b . entry_set ( manager = \"entries\" ) . all () If EntryManager performed default filtering in its get_queryset() method, that filtering would apply to the all() call. Specifying a custom reverse manager also enables you to call its custom\nmethods: b . entry_set ( manager = \"entries\" ) . is_published () Interaction with prefetching When calling prefetch_related() with\na reverse relation, the default manager will be used. If you want to\nprefetch related objects using a custom reverse manager, use Prefetch() . For example: from django.db.models import Prefetch prefetch_manager = Prefetch ( \"entry_set\" , queryset = Entry . entries . all ()) Blog . objects . prefetch_related ( prefetch_manager ) Additional methods to handle related objects ¶ In addition to the QuerySet methods defined in\n“Retrieving objects” above, the ForeignKey Manager has additional methods used to handle the\nset of related objects. A synopsis of each is below, and complete details can\nbe found in the related objects reference . add(obj1, obj2, ...) Adds the specified model objects to the related object set. create(**kwargs) Creates a new object, saves it and puts it in the related object set.\nReturns the newly created object. remove(obj1, obj2, ...) Removes the specified model objects from the related object set. clear() Removes all objects from the related object set. set(objs) Replace the set of related objects. To assign the members of a related set, use the set() method with an\niterable of object instances. For example, if e1 and e2 are Entry instances: b = Blog . objects . get ( id = 1 ) b . entry_set . set ([ e1 , e2 ]) If the clear() method is available, any preexisting objects will be\nremoved from the entry_set before all objects in the iterable (in this\ncase, a list) are added to the set. If the clear() method is not available, all objects in the iterable will be added without removing any\nexisting elements. Each “reverse” operation described in this section has an immediate effect on\nthe database. Every addition, creation and deletion is immediately and\nautomatically saved to the database. Many-to-many relationships ¶ Both ends of a many-to-many relationship get automatic API access to the other\nend. The API works similar to a “backward” one-to-many relationship, above. One difference is in the attribute naming: The model that defines the ManyToManyField uses the attribute name of that\nfield itself, whereas the “reverse” model uses the lowercased model name of the\noriginal model, plus '_set' (just like reverse one-to-many relationships). An example makes this easier to understand: e = Entry . objects . get ( id = 3 ) e . authors . all () # Returns all Author objects for this Entry. e . authors . count () e . authors . filter ( name__contains = \"John\" ) a = Author . objects . get ( id = 5 ) a . entry_set . all () # Returns all Entry objects for this Author. Like ForeignKey , ManyToManyField can specify related_name . In the above example,\nif the ManyToManyField in Entry had specified related_name='entries' , then each Author instance would have an entries attribute instead of entry_set . Another difference from one-to-many relationships is that in addition to model\ninstances,  the add() , set() , and remove() methods on many-to-many\nrelationships accept primary key values. For example, if e1 and e2 are Entry instances, then these set() calls work identically: a = Author . objects . get ( id = 5 ) a . entry_set . set ([ e1 , e2 ]) a . entry_set . set ([ e1 . pk , e2 . pk ]) One-to-one relationships ¶ One-to-one relationships are very similar to many-to-one relationships. If you\ndefine a OneToOneField on your model, instances of\nthat model will have access to the related object via an attribute of the\nmodel. For example: class EntryDetail ( models . Model ): entry = models . OneToOneField ( Entry , on_delete = models . CASCADE ) details = models . TextField () ed = EntryDetail . objects . get ( id = 2 ) ed . entry # Returns the related Entry object. The difference comes in “reverse” queries. The related model in a one-to-one\nrelationship also has access to a Manager object, but\nthat Manager represents a single object, rather than\na collection of objects: e = Entry . objects . get ( id = 2 ) e . entrydetail # returns the related EntryDetail object If no object has been assigned to this relationship, Django will raise\na DoesNotExist exception. Instances can be assigned to the reverse relationship in the same way as\nyou would assign the forward relationship: e . entrydetail = ed How are the backward relationships possible? ¶ Other object-relational mappers require you to define relationships on both\nsides. The Django developers believe this is a violation of the DRY (Don’t\nRepeat Yourself) principle, so Django only requires you to define the\nrelationship on one end. But how is this possible, given that a model class doesn’t know which other\nmodel classes are related to it until those other model classes are loaded? The answer lies in the app registry . When Django\nstarts, it imports each application listed in INSTALLED_APPS , and\nthen the models module inside each application. Whenever a new model class\nis created, Django adds backward-relationships to any related models. If the\nrelated models haven’t been imported yet, Django keeps tracks of the\nrelationships and adds them when the related models eventually are imported. For this reason, it’s particularly important that all the models you’re using\nbe defined in applications listed in INSTALLED_APPS . Otherwise,\nbackwards relations may not work properly. Queries over related objects ¶ Queries involving related objects follow the same rules as queries involving\nnormal value fields. When specifying the value for a query to match, you may\nuse either an object instance itself, or the primary key value for the object. For example, if you have a Blog object b with id=5 , the following\nthree queries would be identical: Entry . objects . filter ( blog = b ) # Query using object instance Entry . objects . filter ( blog = b . id ) # Query using id from instance Entry . objects . filter ( blog = 5 ) # Query using id directly Falling back to raw SQL ¶ If you find yourself needing to write an SQL query that is too complex for\nDjango’s database-mapper to handle, you can fall back on writing SQL by hand.\nDjango has a couple of options for writing raw SQL queries; see Performing raw SQL queries . Finally, it’s important to note that the Django database layer is merely an\ninterface to your database. You can access your database via other tools,\nprogramming languages or database frameworks; there’s nothing Django-specific\nabout your database.", "keywords": ["endswith", "old_authors", "iterable", "mod_date__gt", "comments", "await", "transactions", "lt", "work", "type", "line", "all_entries", "has_any_keys", "emailfield", "manytomanyfield", "entry.objects.delete", "entry.objects.all()[-1", "statement", "evaluations", "rows", "place", "scenes", "entry__authors__name__isnull", "username", "foreignkey(blog", "reason", "data__breed__1", "classes", "day", "null", "music", "answer", "method", "starts", "defer", "split", "authors", "dog", "name__iexact", "use", "create(**kwargs", "views", "data__has_keys", "beatles", "escaping", "mistakes", "ways", "startswith", "difference", "items", "principle", "condition", "sample", "equivalent", "blogging", "way", "default", "filters", "surface", "wildcard", "option", "field__lookuptype", "iteration", "pub_date__gte", "exclusion", "naming", "subquery", "rating__lt", "terms", "page", "descriptors", "select", "clear", "who%", "clashes", "consequence", "kind", "top", "mind", "total_comments", "related_name", "users", "guide", "event", "entrydetail", "self", "owner", "argument", ".bitand", "dogs", "best", "words", "number_of_comments", "some_blog", "version", "deletion", "integer", "dict", "outerref", "future", "pub_date__lte", "pop", "term", "x", "spanning", "comment", "e", "relational", "element", "lines", "name", "pattern", "relationships", "entry__authors__name", "operator", "q3", "programming", "percent", "python", "pk__gt", "charfield", "labrador", "link", "addition", "instances", "interaction", "taste", "regex", "subclass", "force", "sections", "lookup", "front", "orm", "wrapping", "blog_entry", "coroutine", "evaluation", "|", "look", "afilter", "true", "*", "hop", "joe", "relations", "requests", "search", "question__startswith", "annotate", "synopsis", "my_queryset", "operation", "repeat", "sync_to_async", "transformations", "updates", "key", "collection", "parameters", "situation", "members", "headline__contains", ".", "fishy", "modulo", "state", "dictionary", "characters", "[:", "kt", "operators", "doesnotexist", "separation", "restriction", "error", "q1", "data__has_any_keys", "headline__exact", "entry__pub_date__year", "cache", "istartswith", "gt", "datetime", "january", "%", "order", ".bitrightshift", "documentation", "bool", "comparisons", "creation", "pairs", "pk", "application", "order_by", "owner_name", "act", "food", "containment", "table", "iexact", "convenience", "entry_set", "behavior", "system", "lhasa", "grouping", "shep", "str", "query", "mariadb", "following", "pub_date__year", "import", "talk", "runtime", "bar", "'", "datefield", "information", "json", "b.entry_set", "data__isnull", "result", "#", "section", "versions", "¶", "comprehension", "object(s", "tracks", "division", "pre_save", "b.entry_set.all", "definition", "couple", "bitwise", "change", "george", "webapp", "auto_now", "foo_set", "format", "number_of_pingbacks", "mod_date", "example", "django.db.models", "ordering", "unit", "year", "value", "functions", "definitions", "first_breed", "blog.models", "source", "dry", "backward", "transforms", "offset", "entrymanager", "exclude", "print", "languages", "blog", "existence", "save", "create", "examples", "django.db", "things", "details", "albums", "data__contained_by", "form", "object", "poll", "deletions", "lte", "sides", "attributes", "postgresql", "comparison", "returns", "first_breed__startswith", "top_rating", "synchronousonlyoperation", "array", ".bitxor", "fred", "api", "note", "blog__pk", "quoting", "brand", "conditions", "level", "other_obj", "django", "days", "my_input", "complexity", "fact", "parameter", "ringo", "syntax", "slice", "text", "bites", "field", "pk__in", "hip", "strings", "bob", "relation", "e1", "name__contains", "integerfield", "bitand", "entry__authors__isnull", "cat", "effect", "layer", "=", "objects", "news", "tagline", "value(none", "ability", "somefield", "implementation", "matches", "index", "lists", "match", "blogs", "interface", "blog.objects.all", "activity", "statements", "^", "mapper", "nature", "refinement", "pingback", "gte", "adelete", "works", "time", "sets", "exception", "count", "cascade", "oracle", "q", "delete", "queryset", "b.entries", "lowercase", "d", "manager", "problem", "other_pets", "record", "relatedmanager", "yourself", "john", "subtraction", "load", "apis", "fields", "arithmetic", "icontains", "custom", "f", "methods", "side", "keyword", "update", "collie", "none", "join", "loop", "base", "process", "access", ">", "data__contains", "archie", "timedelta", "email", "fielderror", "prefetching", "caching", "end", "has_key", "applications", "print(q", "iendswith", "inheritance", "biography", "deleting", "b", "lennon%", "django.db.models.fields.json", "rating", "rufus", "and”ed", "breed", "a", "data", "multipleobjectsreturned", "meat", "polls", "storing", "constraint", "bulk", "lookups", "pub_date", "options", "environment", "percentage", "contained_by", "filtering", "notes", "headline__startswith", "references", "q2", "select_related", "obj2", "shortcut", "execution", "s", "kwargs", "violation", "keys", "distinction", "sql", "one_entry", "author", "path", "blog__id__exact", "data__owner__name", "tools", "managers", "constants", "elements", "max", "criteria", "backends", "data__has_key", "arguments", "forward", "pingbacks", "add", "cheddar", "models", "underscores", "detail", "some_entry", "registry", "get_queryset", "b5", "call", "blog__name", "subset", "other_entry", "onetoonefield", "sum", "paul", "meg", "retrieve", "querysets", "support", "types", "data__breed", "multiplication", "p", "changes", "themeblog", "filter", "rules", "indexing", "iregex", "indexerror", "prefix", "xor", "records", "_", "e2", "tests", "variant", "hand", "isnull", "aget", "values", "ed", "lennon", "refinements", "new", "notation", "number_of_comments__gt", "item", "async", "today", "attributeerror", "related_name='entries", "apso", "safety", "test", "underscore", ".bitor", "duplicates", "mod_date__year", "cheese_blog", "blog_id", "\\%%", "signs", "paperback", "preexisting", "transaction", "entries", "model", "tutorial", "remove(obj1", "max_length", "character", "results", "span", "e.blog", "invalid", "abstraction", "n’t", "second", "sqlite", "or", "entry__headline__contains", "case", "class", "number", "authors__name", "headlines", "return", "constant", "columns", "copying", "attribute", "ones", "function", "developers", "care", "string", "like", "list", "question", "actions", "app", "uses", "i", "joins", "user", "mappers", "part", "file", "queries", "operations", "jsonfield", "blog__id", "errors", "get", "mechanism", "sign", "traceback", "possibility", "names", "signals", "clause", "clauses", "typeerror", "expressions", "document", "representation", "date", "set", "functionality", "textfield", "min", "foo", "inverse", "foreignkey", "database", "relationship", "reverse", "transform", "prefetch", "limit", "headline", "expression", "chains", "theme", "reference", "instance", "code", "filter(**kwargs", "accessors", "entry", "step", "counters", "power", "dozen", "entry__in"], "type": "documentation"},
{"title": "Models", "url": "https://docs.djangoproject.com/en/5.1/topics/db/models/", "content": "Models ¶ A model is the single, definitive source of information about your data. It\ncontains the essential fields and behaviors of the data you’re storing.\nGenerally, each model maps to a single database table. The basics: Each model is a Python class that subclasses django.db.models.Model . Each attribute of the model represents a database field. With all of this, Django gives you an automatically-generated\ndatabase-access API; see Making queries . Quick example ¶ This example model defines a Person , which has a first_name and last_name : from django.db import models class Person ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) first_name and last_name are fields of the model. Each field is\nspecified as a class attribute, and each attribute maps to a database column. The above Person model would create a database table like this: CREATE TABLE myapp_person ( \"id\" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY , \"first_name\" varchar ( 30 ) NOT NULL , \"last_name\" varchar ( 30 ) NOT NULL ); Some technical notes: The name of the table, myapp_person , is automatically derived from\nsome model metadata but can be overridden. See Table names for more\ndetails. An id field is added automatically, but this behavior can be\noverridden. See Automatic primary key fields . The CREATE TABLE SQL in this example is formatted using PostgreSQL\nsyntax, but it’s worth noting Django uses SQL tailored to the database\nbackend specified in your settings file . Using models ¶ Once you have defined your models, you need to tell Django you’re going to use those models. Do this by editing your settings file and changing the INSTALLED_APPS setting to add the name of the module that contains\nyour models.py . For example, if the models for your application live in the module myapp.models (the package structure that is created for an\napplication by the manage.py startapp script), INSTALLED_APPS should read, in part: INSTALLED_APPS = [ # ... \"myapp\" , # ... ] When you add new apps to INSTALLED_APPS , be sure to run manage.py migrate , optionally making migrations\nfor them first with manage.py makemigrations . Fields ¶ The most important part of a model – and the only required part of a model –\nis the list of database fields it defines. Fields are specified by class\nattributes. Be careful not to choose field names that conflict with the models API like clean , save , or delete . Example: from django.db import models class Musician ( models . Model ): first_name = models . CharField ( max_length = 50 ) last_name = models . CharField ( max_length = 50 ) instrument = models . CharField ( max_length = 100 ) class Album ( models . Model ): artist = models . ForeignKey ( Musician , on_delete = models . CASCADE ) name = models . CharField ( max_length = 100 ) release_date = models . DateField () num_stars = models . IntegerField () Field types ¶ Each field in your model should be an instance of the appropriate Field class. Django uses the field class types to\ndetermine a few things: The column type, which tells the database what kind of data to store (e.g. INTEGER , VARCHAR , TEXT ). The default HTML widget to use when rendering a form\nfield (e.g. <input type=\"text\"> , <select> ). The minimal validation requirements, used in Django’s admin and in\nautomatically-generated forms. Django ships with dozens of built-in field types; you can find the complete list\nin the model field reference . You can easily write\nyour own fields if Django’s built-in ones don’t do the trick; see How to create custom model fields . Field options ¶ Each field takes a certain set of field-specific arguments (documented in the model field reference ). For example, CharField (and its subclasses) require a max_length argument which specifies the size\nof the VARCHAR database field used to store the data. There’s also a set of common arguments available to all field types. All are\noptional. They’re fully explained in the reference , but here’s a quick summary of the most often-used\nones: null If True , Django will store empty values as NULL in the database.\nDefault is False . blank If True , the field is allowed to be blank. Default is False . Note that this is different than null . null is purely database-related, whereas blank is validation-related. If a field has blank=True , form validation will\nallow entry of an empty value. If a field has blank=False , the field will be required. choices A sequence of 2-value tuples, a mapping , an enumeration type , or a callable (that\nexpects no arguments and returns any of the previous formats), to use as\nchoices for this field. If this is given, the default form widget will be a\nselect box instead of the standard text field and will limit choices to the\nchoices given. A choices list looks like this: YEAR_IN_SCHOOL_CHOICES = [ ( \"FR\" , \"Freshman\" ), ( \"SO\" , \"Sophomore\" ), ( \"JR\" , \"Junior\" ), ( \"SR\" , \"Senior\" ), ( \"GR\" , \"Graduate\" ), ] Note A new migration is created each time the order of choices changes. The first element in each tuple is the value that will be stored in the\ndatabase. The second element is displayed by the field’s form widget. Given a model instance, the display value for a field with choices can\nbe accessed using the get_FOO_display() method. For example: from django.db import models class Person ( models . Model ): SHIRT_SIZES = { \"S\" : \"Small\" , \"M\" : \"Medium\" , \"L\" : \"Large\" , } name = models . CharField ( max_length = 60 ) shirt_size = models . CharField ( max_length = 1 , choices = SHIRT_SIZES ) >>> p = Person ( name = \"Fred Flintstone\" , shirt_size = \"L\" ) >>> p . save () >>> p . shirt_size 'L' >>> p . get_shirt_size_display () 'Large' You can also use enumeration classes to define choices in a concise\nway: from django.db import models class Runner ( models . Model ): MedalType = models . TextChoices ( \"MedalType\" , \"GOLD SILVER BRONZE\" ) name = models . CharField ( max_length = 60 ) medal = models . CharField ( blank = True , choices = MedalType , max_length = 10 ) Further examples are available in the model field reference . Changed in Django 5.0: Support for mappings and callables was added. default The default value for the field. This can be a value or a callable\nobject. If callable it will be called every time a new object is\ncreated. db_default The database-computed default value for the field. This can be a literal\nvalue or a database function. If both db_default and Field.default are set, default will\ntake precedence when creating instances in Python code. db_default will\nstill be set at the database level and will be used when inserting rows\noutside of the ORM or when adding a new field in a migration. help_text Extra “help” text to be displayed with the form widget. It’s useful for\ndocumentation even if your field isn’t used on a form. primary_key If True , this field is the primary key for the model. If you don’t specify primary_key=True for\nany fields in your model, Django will automatically add an IntegerField to hold the primary key, so you don’t need to set primary_key=True on any of your fields\nunless you want to override the default primary-key behavior. For more,\nsee Automatic primary key fields . The primary key field is read-only. If you change the value of the primary\nkey on an existing object and then save it, a new object will be created\nalongside the old one. For example: from django.db import models class Fruit ( models . Model ): name = models . CharField ( max_length = 100 , primary_key = True ) >>> fruit = Fruit . objects . create ( name = \"Apple\" ) >>> fruit . name = \"Pear\" >>> fruit . save () >>> Fruit . objects . values_list ( \"name\" , flat = True ) <QuerySet ['Apple', 'Pear']> unique If True , this field must be unique throughout the table. Again, these are just short descriptions of the most common field options. Full\ndetails can be found in the common model field option reference . Automatic primary key fields ¶ By default, Django gives each model an auto-incrementing primary key with the\ntype specified per app in AppConfig.default_auto_field or globally in the DEFAULT_AUTO_FIELD setting. For example: id = models . BigAutoField ( primary_key = True ) If you’d like to specify a custom primary key, specify primary_key=True on one of your fields. If Django\nsees you’ve explicitly set Field.primary_key , it won’t add the automatic id column. Each model requires exactly one field to have primary_key=True (either explicitly declared or automatically added). Verbose field names ¶ Each field type, except for ForeignKey , ManyToManyField and OneToOneField , takes an optional first positional\nargument – a verbose name. If the verbose name isn’t given, Django will\nautomatically create it using the field’s attribute name, converting underscores\nto spaces. In this example, the verbose name is \"person's first name\" : first_name = models . CharField ( \"person's first name\" , max_length = 30 ) In this example, the verbose name is \"first name\" : first_name = models . CharField ( max_length = 30 ) ForeignKey , ManyToManyField and OneToOneField require the first argument to be a\nmodel class, so use the verbose_name keyword argument: poll = models . ForeignKey ( Poll , on_delete = models . CASCADE , verbose_name = \"the related poll\" , ) sites = models . ManyToManyField ( Site , verbose_name = \"list of sites\" ) place = models . OneToOneField ( Place , on_delete = models . CASCADE , verbose_name = \"related place\" , ) The convention is not to capitalize the first letter of the verbose_name . Django will automatically capitalize the first\nletter where it needs to. Relationships ¶ Clearly, the power of relational databases lies in relating tables to each\nother. Django offers ways to define the three most common types of database\nrelationships: many-to-one, many-to-many and one-to-one. Many-to-one relationships ¶ To define a many-to-one relationship, use django.db.models.ForeignKey .\nYou use it just like any other Field type: by\nincluding it as a class attribute of your model. ForeignKey requires a positional argument: the class\nto which the model is related. For example, if a Car model has a Manufacturer – that is, a Manufacturer makes multiple cars but each Car only has one Manufacturer – use the following definitions: from django.db import models class Manufacturer ( models . Model ): # ... pass class Car ( models . Model ): manufacturer = models . ForeignKey ( Manufacturer , on_delete = models . CASCADE ) # ... You can also create recursive relationships (an\nobject with a many-to-one relationship to itself) and relationships to\nmodels not yet defined ; see the model field\nreference for details. It’s suggested, but not required, that the name of a ForeignKey field ( manufacturer in the example\nabove) be the name of the model, lowercase. You can call the field whatever you\nwant. For example: class Car ( models . Model ): company_that_makes_it = models . ForeignKey ( Manufacturer , on_delete = models . CASCADE , ) # ... See also ForeignKey fields accept a number of extra\narguments which are explained in the model field reference . These options help define how the relationship\nshould work; all are optional. For details on accessing backwards-related objects, see the Following relationships backward example . For sample code, see the Many-to-one relationship model example . Many-to-many relationships ¶ To define a many-to-many relationship, use ManyToManyField . You use it just like any other Field type: by including it as a class attribute of\nyour model. ManyToManyField requires a positional argument: the\nclass to which the model is related. For example, if a Pizza has multiple Topping objects – that is, a Topping can be on multiple pizzas and each Pizza has multiple toppings\n– here’s how you’d represent that: from django.db import models class Topping ( models . Model ): # ... pass class Pizza ( models . Model ): # ... toppings = models . ManyToManyField ( Topping ) As with ForeignKey , you can also create recursive relationships (an object with a\nmany-to-many relationship to itself) and relationships to models not yet\ndefined . It’s suggested, but not required, that the name of a ManyToManyField ( toppings in the example above)\nbe a plural describing the set of related model objects. It doesn’t matter which model has the ManyToManyField , but you should only put it in one\nof the models – not both. Generally, ManyToManyField instances should go in\nthe object that’s going to be edited on a form. In the above example, toppings is in Pizza (rather than Topping having a pizzas ManyToManyField ) because it’s more natural to think\nabout a pizza having toppings than a topping being on multiple pizzas. The way\nit’s set up above, the Pizza form would let users select the toppings. See also See the Many-to-many relationship model example for a full example. ManyToManyField fields also accept a number of\nextra arguments which are explained in the model field reference . These options help define how the relationship\nshould work; all are optional. Extra fields on many-to-many relationships ¶ When you’re only dealing with many-to-many relationships such as mixing and\nmatching pizzas and toppings, a standard ManyToManyField is all you need. However, sometimes\nyou may need to associate data with the relationship between two models. For example, consider the case of an application tracking the musical groups\nwhich musicians belong to. There is a many-to-many relationship between a person\nand the groups of which they are a member, so you could use a ManyToManyField to represent this relationship.\nHowever, there is a lot of detail about the membership that you might want to\ncollect, such as the date at which the person joined the group. For these situations, Django allows you to specify the model that will be used\nto govern the many-to-many relationship. You can then put extra fields on the\nintermediate model. The intermediate model is associated with the ManyToManyField using the through argument to point to the model\nthat will act as an intermediary. For our musician example, the code would look\nsomething like this: from django.db import models class Person ( models . Model ): name = models . CharField ( max_length = 128 ) def __str__ ( self ): return self . name class Group ( models . Model ): name = models . CharField ( max_length = 128 ) members = models . ManyToManyField ( Person , through = \"Membership\" ) def __str__ ( self ): return self . name class Membership ( models . Model ): person = models . ForeignKey ( Person , on_delete = models . CASCADE ) group = models . ForeignKey ( Group , on_delete = models . CASCADE ) date_joined = models . DateField () invite_reason = models . CharField ( max_length = 64 ) When you set up the intermediary model, you explicitly specify foreign\nkeys to the models that are involved in the many-to-many relationship. This\nexplicit declaration defines how the two models are related. There are a few restrictions on the intermediate model: Your intermediate model must contain one - and only one - foreign key\nto the source model (this would be Group in our example), or you must\nexplicitly specify the foreign keys Django should use for the relationship\nusing ManyToManyField.through_fields .\nIf you have more than one foreign key and through_fields is not\nspecified, a validation error will be raised. A similar restriction applies\nto the foreign key to the target model (this would be Person in our\nexample). For a model which has a many-to-many relationship to itself through an\nintermediary model, two foreign keys to the same model are permitted, but\nthey will be treated as the two (different) sides of the many-to-many\nrelationship. If there are more than two foreign keys though, you\nmust also specify through_fields as above, or a validation error\nwill be raised. Now that you have set up your ManyToManyField to use\nyour intermediary model ( Membership , in this case), you’re ready to start\ncreating some many-to-many relationships. You do this by creating instances of\nthe intermediate model: >>> ringo = Person . objects . create ( name = \"Ringo Starr\" ) >>> paul = Person . objects . create ( name = \"Paul McCartney\" ) >>> beatles = Group . objects . create ( name = \"The Beatles\" ) >>> m1 = Membership ( ... person = ringo , ... group = beatles , ... date_joined = date ( 1962 , 8 , 16 ), ... invite_reason = \"Needed a new drummer.\" , ... ) >>> m1 . save () >>> beatles . members . all () <QuerySet [<Person: Ringo Starr>]> >>> ringo . group_set . all () <QuerySet [<Group: The Beatles>]> >>> m2 = Membership . objects . create ( ... person = paul , ... group = beatles , ... date_joined = date ( 1960 , 8 , 1 ), ... invite_reason = \"Wanted to form a band.\" , ... ) >>> beatles . members . all () <QuerySet [<Person: Ringo Starr>, <Person: Paul McCartney>]> You can also use add() , create() , or set() to create\nrelationships, as long as you specify through_defaults for any required\nfields: >>> beatles . members . add ( john , through_defaults = { \"date_joined\" : date ( 1960 , 8 , 1 )}) >>> beatles . members . create ( ... name = \"George Harrison\" , through_defaults = { \"date_joined\" : date ( 1960 , 8 , 1 )} ... ) >>> beatles . members . set ( ... [ john , paul , ringo , george ], through_defaults = { \"date_joined\" : date ( 1960 , 8 , 1 )} ... ) You may prefer to create instances of the intermediate model directly. If the custom through table defined by the intermediate model does not enforce\nuniqueness on the (model1, model2) pair, allowing multiple values, the remove() call will\nremove all intermediate model instances: >>> Membership . objects . create ( ... person = ringo , ... group = beatles , ... date_joined = date ( 1968 , 9 , 4 ), ... invite_reason = \"You've been gone for a month and we miss you.\" , ... ) >>> beatles . members . all () <QuerySet [<Person: Ringo Starr>, <Person: Paul McCartney>, <Person: Ringo Starr>]> >>> # This deletes both of the intermediate model instances for Ringo Starr >>> beatles . members . remove ( ringo ) >>> beatles . members . all () <QuerySet [<Person: Paul McCartney>]> The clear() method can be used to remove all many-to-many relationships for an instance: >>> # Beatles have broken up >>> beatles . members . clear () >>> # Note that this deletes the intermediate model instances >>> Membership . objects . all () <QuerySet []> Once you have established the many-to-many relationships, you can issue\nqueries. Just as with normal many-to-many relationships, you can query using\nthe attributes of the many-to-many-related model: # Find all the groups with a member whose name starts with 'Paul' >>> Group . objects . filter ( members__name__startswith = \"Paul\" ) <QuerySet [<Group: The Beatles>]> As you are using an intermediate model, you can also query on its attributes: # Find all the members of the Beatles that joined after 1 Jan 1961 >>> Person . objects . filter ( ... group__name = \"The Beatles\" , membership__date_joined__gt = date ( 1961 , 1 , 1 ) ... ) <QuerySet [<Person: Ringo Starr]> If you need to access a membership’s information you may do so by directly\nquerying the Membership model: >>> ringos_membership = Membership . objects . get ( group = beatles , person = ringo ) >>> ringos_membership . date_joined datetime.date(1962, 8, 16) >>> ringos_membership . invite_reason 'Needed a new drummer.' Another way to access the same information is by querying the many-to-many reverse relationship from a Person object: >>> ringos_membership = ringo . membership_set . get ( group = beatles ) >>> ringos_membership . date_joined datetime.date(1962, 8, 16) >>> ringos_membership . invite_reason 'Needed a new drummer.' One-to-one relationships ¶ To define a one-to-one relationship, use OneToOneField . You use it just like any other Field type: by including it as a class attribute of your model. This is most useful on the primary key of an object when that object “extends”\nanother object in some way. OneToOneField requires a positional argument: the\nclass to which the model is related. For example, if you were building a database of “places”, you would\nbuild pretty standard stuff such as address, phone number, etc. in the\ndatabase. Then, if you wanted to build a database of restaurants on\ntop of the places, instead of repeating yourself and replicating those\nfields in the Restaurant model, you could make Restaurant have\na OneToOneField to Place (because a\nrestaurant “is a” place; in fact, to handle this you’d typically use inheritance , which involves an implicit\none-to-one relation). As with ForeignKey , a recursive relationship can be defined and references to as-yet\nundefined models can be made. See also See the One-to-one relationship model example for a full example. OneToOneField fields also accept an optional parent_link argument. OneToOneField classes used to automatically become\nthe primary key on a model. This is no longer true (although you can manually\npass in the primary_key argument if you like).\nThus, it’s now possible to have multiple fields of type OneToOneField on a single model. Models across files ¶ It’s perfectly OK to relate a model to one from another app. To do this, import\nthe related model at the top of the file where your model is defined. Then,\nrefer to the other model class wherever needed. For example: from django.db import models from geography.models import ZipCode class Restaurant ( models . Model ): # ... zip_code = models . ForeignKey ( ZipCode , on_delete = models . SET_NULL , blank = True , null = True , ) Field name restrictions ¶ Django places some restrictions on model field names: A field name cannot be a Python reserved word, because that would result\nin a Python syntax error. For example: class Example(models.Model):\n    pass = models.IntegerField() # 'pass' is a reserved word! A field name cannot contain more than one underscore in a row, due to\nthe way Django’s query lookup syntax works. For example: class Example ( models . Model ): foo__bar = models . IntegerField () # 'foo__bar' has two underscores! A field name cannot end with an underscore, for similar reasons. These limitations can be worked around, though, because your field name doesn’t\nnecessarily have to match your database column name. See the db_column option. SQL reserved words, such as join , where or select , are allowed as\nmodel field names, because Django escapes all database table names and column\nnames in every underlying SQL query. It uses the quoting syntax of your\nparticular database engine. Custom field types ¶ If one of the existing model fields cannot be used to fit your purposes, or if\nyou wish to take advantage of some less common database column types, you can\ncreate your own field class. Full coverage of creating your own fields is\nprovided in How to create custom model fields . Meta options ¶ Give your model metadata by using an inner class Meta , like so: from django.db import models class Ox ( models . Model ): horn_length = models . IntegerField () class Meta : ordering = [ \"horn_length\" ] verbose_name_plural = \"oxen\" Model metadata is “anything that’s not a field”, such as ordering options\n( ordering ), database table name ( db_table ), or\nhuman-readable singular and plural names ( verbose_name and verbose_name_plural ). None are required, and adding class Meta to a model is completely optional. A complete list of all possible Meta options can be found in the model\noption reference . Model attributes ¶ objects The most important attribute of a model is the Manager . It’s the interface through which\ndatabase query operations are provided to Django models and is used to retrieve the instances from the database. If no\ncustom Manager is defined, the default name is objects . Managers are only accessible via\nmodel classes, not the model instances. Model methods ¶ Define custom methods on a model to add custom “row-level” functionality to your\nobjects. Whereas Manager methods are intended to do\n“table-wide” things, model methods should act on a particular model instance. This is a valuable technique for keeping business logic in one place – the\nmodel. For example, this model has a few custom methods: from django.db import models class Person ( models . Model ): first_name = models . CharField ( max_length = 50 ) last_name = models . CharField ( max_length = 50 ) birth_date = models . DateField () def baby_boomer_status ( self ): \"Returns the person's baby-boomer status.\" import datetime if self . birth_date < datetime . date ( 1945 , 8 , 1 ): return \"Pre-boomer\" elif self . birth_date < datetime . date ( 1965 , 1 , 1 ): return \"Baby boomer\" else : return \"Post-boomer\" @property def full_name ( self ): \"Returns the person's full name.\" return f \" { self . first_name } { self . last_name } \" The last method in this example is a property . The model instance reference has a complete list\nof methods automatically given to each model .\nYou can override most of these – see overriding predefined model methods ,\nbelow – but there are a couple that you’ll almost always want to define: __str__() A Python “magic method” that returns a string representation of any\nobject. This is what Python and Django will use whenever a model\ninstance needs to be coerced and displayed as a plain string. Most\nnotably, this happens when you display an object in an interactive\nconsole or in the admin. You’ll always want to define this method; the default isn’t very helpful\nat all. get_absolute_url() This tells Django how to calculate the URL for an object. Django uses\nthis in its admin interface, and any time it needs to figure out a URL\nfor an object. Any object that has a URL that uniquely identifies it should define this\nmethod. Overriding predefined model methods ¶ There’s another set of model methods that\nencapsulate a bunch of database behavior that you’ll want to customize. In\nparticular you’ll often want to change the way save() and delete() work. You’re free to override these methods (and any other model method) to alter\nbehavior. A classic use-case for overriding the built-in methods is if you want something\nto happen whenever you save an object. For example (see save() for documentation of the parameters it accepts): from django.db import models class Blog ( models . Model ): name = models . CharField ( max_length = 100 ) tagline = models . TextField () def save ( self , ** kwargs ): do_something () super () . save ( ** kwargs ) # Call the \"real\" save() method. do_something_else () You can also prevent saving: from django.db import models class Blog ( models . Model ): name = models . CharField ( max_length = 100 ) tagline = models . TextField () def save ( self , ** kwargs ): if self . name == \"Yoko Ono's blog\" : return # Yoko shall never have her own blog! else : super () . save ( ** kwargs ) # Call the \"real\" save() method. It’s important to remember to call the superclass method – that’s\nthat super().save(**kwargs) business – to ensure that the object still\ngets saved into the database. If you forget to call the superclass method, the\ndefault behavior won’t happen and the database won’t get touched. It’s also important that you pass through the arguments that can be\npassed to the model method – that’s what the **kwargs bit does. Django\nwill, from time to time, extend the capabilities of built-in model methods,\nadding new keyword arguments. If you use **kwargs in your method\ndefinitions, you are guaranteed that your code will automatically support those\narguments when they are added. If you wish to update a field value in the save() method, you may\nalso want to have this field added to the update_fields keyword argument.\nThis will ensure the field is saved when update_fields is specified. For\nexample: from django.db import models from django.utils.text import slugify class Blog ( models . Model ): name = models . CharField ( max_length = 100 ) slug = models . TextField () def save ( self , ** kwargs ): self . slug = slugify ( self . name ) if ( update_fields := kwargs . get ( \"update_fields\" ) ) is not None and \"name\" in update_fields : kwargs [ \"update_fields\" ] = { \"slug\" } . union ( update_fields ) super () . save ( ** kwargs ) See Specifying which fields to save for more details. Overridden model methods are not called on bulk operations Note that the delete() method for an object is not\nnecessarily called when deleting objects in bulk using a\nQuerySet or as a result of a cascading delete . To ensure customized\ndelete logic gets executed, you can use pre_delete and/or post_delete signals. Unfortunately, there isn’t a workaround when creating or updating objects in bulk,\nsince none of save() , pre_save , and post_save are called. Executing custom SQL ¶ Another common pattern is writing custom SQL statements in model methods and\nmodule-level methods. For more details on using raw SQL, see the documentation\non using raw SQL . Model inheritance ¶ Model inheritance in Django works almost identically to the way normal\nclass inheritance works in Python, but the basics at the beginning of the page\nshould still be followed. That means the base class should subclass django.db.models.Model . The only decision you have to make is whether you want the parent models to be\nmodels in their own right (with their own database tables), or if the parents\nare just holders of common information that will only be visible through the\nchild models. There are three styles of inheritance that are possible in Django. Often, you will just want to use the parent class to hold information that\nyou don’t want to have to type out for each child model. This class isn’t\ngoing to ever be used in isolation, so Abstract base classes are\nwhat you’re after. If you’re subclassing an existing model (perhaps something from another\napplication entirely) and want each model to have its own database table, Multi-table inheritance is the way to go. Finally, if you only want to modify the Python-level behavior of a model,\nwithout changing the models fields in any way, you can use Proxy models . Abstract base classes ¶ Abstract base classes are useful when you want to put some common\ninformation into a number of other models. You write your base class\nand put abstract=True in the Meta class. This model will then not be used to create any database\ntable. Instead, when it is used as a base class for other models, its\nfields will be added to those of the child class. An example: from django.db import models class CommonInfo ( models . Model ): name = models . CharField ( max_length = 100 ) age = models . PositiveIntegerField () class Meta : abstract = True class Student ( CommonInfo ): home_group = models . CharField ( max_length = 5 ) The Student model will have three fields: name , age and home_group . The CommonInfo model cannot be used as a normal Django\nmodel, since it is an abstract base class. It does not generate a database\ntable or have a manager, and cannot be instantiated or saved directly. Fields inherited from abstract base classes can be overridden with another\nfield or value, or be removed with None . For many uses, this type of model inheritance will be exactly what you want.\nIt provides a way to factor out common information at the Python level, while\nstill only creating one database table per child model at the database level. Meta inheritance ¶ When an abstract base class is created, Django makes any Meta inner class you declared in the base class available as an\nattribute. If a child class does not declare its own Meta class, it will inherit the parent’s Meta . If the child wants to\nextend the parent’s Meta class, it can subclass it. For example: from django.db import models class CommonInfo ( models . Model ): # ... class Meta : abstract = True ordering = [ \"name\" ] class Student ( CommonInfo ): # ... class Meta ( CommonInfo . Meta ): db_table = \"student_info\" Django does make one adjustment to the Meta class of an\nabstract base class: before installing the Meta attribute, it sets abstract=False . This means that children of abstract\nbase classes don’t automatically become abstract classes themselves. To make\nan abstract base class that inherits from another abstract base class, you need\nto explicitly set abstract=True on the child. Some attributes won’t make sense to include in the Meta class of an\nabstract base class. For example, including db_table would mean that all\nthe child classes (the ones that don’t specify their own Meta ) would use\nthe same database table, which is almost certainly not what you want. Due to the way Python inheritance works, if a child class inherits from\nmultiple abstract base classes, only the Meta options\nfrom the first listed class will be inherited by default. To inherit Meta options from multiple abstract base classes, you must\nexplicitly declare the Meta inheritance. For example: from django.db import models class CommonInfo ( models . Model ): name = models . CharField ( max_length = 100 ) age = models . PositiveIntegerField () class Meta : abstract = True ordering = [ \"name\" ] class Unmanaged ( models . Model ): class Meta : abstract = True managed = False class Student ( CommonInfo , Unmanaged ): home_group = models . CharField ( max_length = 5 ) class Meta ( CommonInfo . Meta , Unmanaged . Meta ): pass Be careful with related_name and related_query_name ¶ If you are using related_name or related_query_name on a ForeignKey or ManyToManyField , you must always specify a unique reverse name and query\nname for the field. This would normally cause a problem in abstract base\nclasses, since the fields on this class are included into each of the child\nclasses, with exactly the same values for the attributes (including related_name and related_query_name ) each time. To work around this problem, when you are using related_name or related_query_name in an abstract base\nclass (only), part of the value should contain '%(app_label)s' and '%(class)s' . '%(class)s' is replaced by the lowercased name of the child class that\nthe field is used in. '%(app_label)s' is replaced by the lowercased name of the app the child\nclass is contained within. Each installed application name must be unique and\nthe model class names within each app must also be unique, therefore the\nresulting name will end up being different. For example, given an app common/models.py : from django.db import models class Base ( models . Model ): m2m = models . ManyToManyField ( OtherModel , related_name = \" %(app_label)s _ %(class)s _related\" , related_query_name = \" %(app_label)s _ %(class)s s\" , ) class Meta : abstract = True class ChildA ( Base ): pass class ChildB ( Base ): pass Along with another app rare/models.py : from common.models import Base class ChildB ( Base ): pass The reverse name of the common.ChildA.m2m field will be common_childa_related and the reverse query name will be common_childas .\nThe reverse name of the common.ChildB.m2m field will be common_childb_related and the reverse query name will be common_childbs . Finally, the reverse name of the rare.ChildB.m2m field\nwill be rare_childb_related and the reverse query name will be rare_childbs . It’s up to you how you use the '%(class)s' and '%(app_label)s' portion to construct your related name or related query name\nbut if you forget to use it, Django will raise errors when you perform system\nchecks (or run migrate ). If you don’t specify a related_name attribute for a field in an abstract base class, the default reverse name will\nbe the name of the child class followed by '_set' , just as it normally\nwould be if you’d declared the field directly on the child class. For example,\nin the above code, if the related_name attribute was omitted, the reverse name for the m2m field would be childa_set in the ChildA case and childb_set for the ChildB field. Multi-table inheritance ¶ The second type of model inheritance supported by Django is when each model in\nthe hierarchy is a model all by itself. Each model corresponds to its own\ndatabase table and can be queried and created individually. The inheritance\nrelationship introduces links between the child model and each of its parents\n(via an automatically-created OneToOneField ).\nFor example: from django.db import models class Place ( models . Model ): name = models . CharField ( max_length = 50 ) address = models . CharField ( max_length = 80 ) class Restaurant ( Place ): serves_hot_dogs = models . BooleanField ( default = False ) serves_pizza = models . BooleanField ( default = False ) All of the fields of Place will also be available in Restaurant ,\nalthough the data will reside in a different database table. So these are both\npossible: >>> Place . objects . filter ( name = \"Bob's Cafe\" ) >>> Restaurant . objects . filter ( name = \"Bob's Cafe\" ) If you have a Place that is also a Restaurant , you can get from the Place object to the Restaurant object by using the lowercase version of\nthe model name: >>> p = Place . objects . get ( id = 12 ) # If p is a Restaurant object, this will give the child class: >>> p . restaurant <Restaurant: ...> However, if p in the above example was not a Restaurant (it had been\ncreated directly as a Place object or was the parent of some other class),\nreferring to p.restaurant would raise a Restaurant.DoesNotExist exception. The automatically-created OneToOneField on Restaurant that links it to Place looks like this: place_ptr = models . OneToOneField ( Place , on_delete = models . CASCADE , parent_link = True , primary_key = True , ) You can override that field by declaring your own OneToOneField with parent_link=True on Restaurant . Meta and multi-table inheritance ¶ In the multi-table inheritance situation, it doesn’t make sense for a child\nclass to inherit from its parent’s Meta class. All the Meta options\nhave already been applied to the parent class and applying them again would\nnormally only lead to contradictory behavior (this is in contrast with the\nabstract base class case, where the base class doesn’t exist in its own\nright). So a child model does not have access to its parent’s Meta class. However, there are a few limited cases where the child\ninherits behavior from the parent: if the child does not specify an ordering attribute or a get_latest_by attribute, it will inherit\nthese from its parent. If the parent has an ordering and you don’t want the child to have any natural\nordering, you can explicitly disable it: class ChildModel ( ParentModel ): # ... class Meta : # Remove parent's ordering effect ordering = [] Inheritance and reverse relations ¶ Because multi-table inheritance uses an implicit OneToOneField to link the child and\nthe parent, it’s possible to move from the parent down to the child,\nas in the above example. However, this uses up the name that is the\ndefault related_name value for ForeignKey and ManyToManyField relations.  If you\nare putting those types of relations on a subclass of the parent model, you must specify the related_name attribute on each such field. If you forget, Django will raise a validation\nerror. For example, using the above Place class again, let’s create another\nsubclass with a ManyToManyField : class Supplier ( Place ): customers = models . ManyToManyField ( Place ) This results in the error: Reverse query name for 'Supplier.customers' clashes with reverse query name for 'Supplier.place_ptr'. HINT: Add or change a related_name argument to the definition for 'Supplier.customers' or 'Supplier.place_ptr'. Adding related_name to the customers field as follows would resolve the\nerror: models.ManyToManyField(Place, related_name='provider') . Specifying the parent link field ¶ As mentioned, Django will automatically create a OneToOneField linking your child\nclass back to any non-abstract parent models. If you want to control the\nname of the attribute linking back to the parent, you can create your\nown OneToOneField and set parent_link=True to indicate that your field is the link back to the parent class. Proxy models ¶ When using multi-table inheritance , a new\ndatabase table is created for each subclass of a model. This is usually the\ndesired behavior, since the subclass needs a place to store any additional\ndata fields that are not present on the base class. Sometimes, however, you\nonly want to change the Python behavior of a model – perhaps to change the\ndefault manager, or add a new method. This is what proxy model inheritance is for: creating a proxy for the\noriginal model. You can create, delete and update instances of the proxy model\nand all the data will be saved as if you were using the original (non-proxied)\nmodel. The difference is that you can change things like the default model\nordering or the default manager in the proxy, without having to alter the\noriginal. Proxy models are declared like normal models. You tell Django that it’s a\nproxy model by setting the proxy attribute of\nthe Meta class to True . For example, suppose you want to add a method to the Person model. You can do it like this: from django.db import models class Person ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) class MyPerson ( Person ): class Meta : proxy = True def do_something ( self ): # ... pass The MyPerson class operates on the same database table as its parent Person class. In particular, any new instances of Person will also be\naccessible through MyPerson , and vice-versa: >>> p = Person . objects . create ( first_name = \"foobar\" ) >>> MyPerson . objects . get ( first_name = \"foobar\" ) <MyPerson: foobar> You could also use a proxy model to define a different default ordering on\na model. You might not always want to order the Person model, but regularly\norder by the last_name attribute when you use the proxy: class OrderedPerson ( Person ): class Meta : ordering = [ \"last_name\" ] proxy = True Now normal Person queries will be unordered\nand OrderedPerson queries will be ordered by last_name . Proxy models inherit Meta attributes in the same way as regular\nmodels . QuerySet s still return the model that was requested ¶ There is no way to have Django return, say, a MyPerson object whenever you\nquery for Person objects. A queryset for Person objects will return\nthose types of objects. The whole point of proxy objects is that code relying\non the original Person will use those and your own code can use the\nextensions you included (that no other code is relying on anyway). It is not\na way to replace the Person (or any other) model everywhere with something\nof your own creation. Base class restrictions ¶ A proxy model must inherit from exactly one non-abstract model class. You\ncan’t inherit from multiple non-abstract models as the proxy model doesn’t\nprovide any connection between the rows in the different database tables. A\nproxy model can inherit from any number of abstract model classes, providing\nthey do not define any model fields. A proxy model may also inherit from any\nnumber of proxy models that share a common non-abstract parent class. Proxy model managers ¶ If you don’t specify any model managers on a proxy model, it inherits the\nmanagers from its model parents. If you define a manager on the proxy model,\nit will become the default, although any managers defined on the parent\nclasses will still be available. Continuing our example from above, you could change the default manager used\nwhen you query the Person model like this: from django.db import models class NewManager ( models . Manager ): # ... pass class MyPerson ( Person ): objects = NewManager () class Meta : proxy = True If you wanted to add a new manager to the Proxy, without replacing the\nexisting default, you can use the techniques described in the custom\nmanager documentation: create a base class\ncontaining the new managers and inherit that after the primary base class: # Create an abstract class for the new manager. class ExtraManagers ( models . Model ): secondary = NewManager () class Meta : abstract = True class MyPerson ( Person , ExtraManagers ): class Meta : proxy = True You probably won’t need to do this very often, but, when you do, it’s\npossible. Differences between proxy inheritance and unmanaged models ¶ Proxy model inheritance might look fairly similar to creating an unmanaged\nmodel, using the managed attribute on a\nmodel’s Meta class. With careful setting of Meta.db_table you could create an unmanaged model that\nshadows an existing model and adds Python methods to it. However, that would be\nvery repetitive and fragile as you need to keep both copies synchronized if you\nmake any changes. On the other hand, proxy models are intended to behave exactly like the model\nthey are proxying for. They are always in sync with the parent model since they\ndirectly inherit its fields and managers. The general rules are: If you are mirroring an existing model or database table and don’t want\nall the original database table columns, use Meta.managed=False .\nThat option is normally useful for modeling database views and tables\nnot under the control of Django. If you are wanting to change the Python-only behavior of a model, but\nkeep all the same fields as in the original, use Meta.proxy=True .\nThis sets things up so that the proxy model is an exact copy of the\nstorage structure of the original model when data is saved. Multiple inheritance ¶ Just as with Python’s subclassing, it’s possible for a Django model to inherit\nfrom multiple parent models. Keep in mind that normal Python name resolution\nrules apply. The first base class that a particular name (e.g. Meta ) appears in will be the one that is used; for example, this\nmeans that if multiple parents contain a Meta class,\nonly the first one is going to be used, and all others will be ignored. Generally, you won’t need to inherit from multiple parents. The main use-case\nwhere this is useful is for “mix-in” classes: adding a particular extra\nfield or method to every class that inherits the mix-in. Try to keep your\ninheritance hierarchies as simple and straightforward as possible so that you\nwon’t have to struggle to work out where a particular piece of information is\ncoming from. Note that inheriting from multiple models that have a common id primary\nkey field will raise an error. To properly use multiple inheritance, you can\nuse an explicit AutoField in the base models: class Article ( models . Model ): article_id = models . AutoField ( primary_key = True ) ... class Book ( models . Model ): book_id = models . AutoField ( primary_key = True ) ... class BookReview ( Book , Article ): pass Or use a common ancestor to hold the AutoField . This\nrequires using an explicit OneToOneField from each\nparent model to the common ancestor to avoid a clash between the fields that\nare automatically generated and inherited by the child: class Piece ( models . Model ): pass class Article ( Piece ): article_piece = models . OneToOneField ( Piece , on_delete = models . CASCADE , parent_link = True ) ... class Book ( Piece ): book_piece = models . OneToOneField ( Piece , on_delete = models . CASCADE , parent_link = True ) ... class BookReview ( Book , Article ): pass Field name “hiding” is not permitted ¶ In normal Python class inheritance, it is permissible for a child class to\noverride any attribute from the parent class. In Django, this isn’t usually\npermitted for model fields. If a non-abstract model base class has a field\ncalled author , you can’t create another model field or define\nan attribute called author in any class that inherits from that base class. This restriction doesn’t apply to model fields inherited from an abstract\nmodel. Such fields may be overridden with another field or value, or be removed\nby setting field_name = None . Warning Model managers are inherited from abstract base classes. Overriding an\ninherited field which is referenced by an inherited Manager may cause subtle bugs. See custom\nmanagers and model inheritance . Note Some fields define extra attributes on the model, e.g. a ForeignKey defines an extra attribute with _id appended to the field name, as well as related_name and related_query_name on the foreign model. These extra attributes cannot be overridden unless the field that defines\nit is changed or removed so that it no longer defines the extra attribute. Overriding fields in a parent model leads to difficulties in areas such as\ninitializing new instances (specifying which field is being initialized in Model.__init__ ) and serialization. These are features which normal Python\nclass inheritance doesn’t have to deal with in quite the same way, so the\ndifference between Django model inheritance and Python class inheritance isn’t\narbitrary. This restriction only applies to attributes which are Field instances. Normal Python attributes\ncan be overridden if you wish. It also only applies to the name of the\nattribute as Python sees it: if you are manually specifying the database\ncolumn name, you can have the same column name appearing in both a child and\nan ancestor model for multi-table inheritance (they are columns in two\ndifferent database tables). Django will raise a FieldError if you override\nany model field in any ancestor model. Note that because of the way fields are resolved during class definition, model\nfields inherited from multiple abstract parent models are resolved in a strict\ndepth-first order. This contrasts with standard Python MRO, which is resolved\nbreadth-first in cases of diamond shaped inheritance. This difference only\naffects complex model hierarchies, which (as per the advice above) you should\ntry to avoid. Organizing models in a package ¶ The manage.py startapp command creates an application\nstructure that includes a models.py file. If you have many models,\norganizing them in separate files may be useful. To do so, create a models package. Remove models.py and create a myapp/models/ directory with an __init__.py file and the files to\nstore your models. You must import the models in the __init__.py file. For example, if you had organic.py and synthetic.py in the models directory: myapp/models/__init__.py ¶ from .organic import Person from .synthetic import Robot Explicitly importing each model rather than using from .models import * has the advantages of not cluttering the namespace, making code more readable,\nand keeping code analysis tools useful. See also The Models Reference Covers all the model related APIs including model fields, related\nobjects, and QuerySet .", "keywords": ["contrast", "column", "sr", "work", "l", "update_fields", "type", "url", "manytomanyfield", "book", "rows", "slugify", "model.__init", "def", "membership", "place", "settings", "m", "classes", "null", "drummer", "default_auto_field", "method", "related_query_name", "student_info", "person", "gr", "use", "status", "horn_length", "views", "beatles", "right", "band", "callables", "field.default", "ways", "difference", "sample", "birth_date", "common_childas", "advice", "orderedperson", "way", "serves_hot_dogs", "default", "option", "piece", "musician", "techniques", "requirements", "cars", "page", "clear", "childa", "package", "clashes", "kind", "top", "mind", "age", "related_name", "users", "super().save(**kwargs", "childb_set", "date_joined", "backend", "self", "pass", "ancestor", "argument", "junior", "@property", "words", "by", "childb.m2", "auto", "version", "db_column", "values_list", "tuple", "integer", "related_name='provider", "meta", "month", "relational", "element", "myapp.models", "name", "coverage", "pattern", "relationships", "adjustment", "medaltype", "sophomore", "first_name", "remove", "admin", "size", "python", "link", "charfield", "instances", "startapp", "diamond", "supplier.customers", "formats", "subclass", "lookup", "migration", "orm", "storage", "others", "myperson", "app_label)s", "address", "namespace", "display", "true", "*", "through_fields", "concise", "structure", "topping", "relations", "difficulties", "hiding", "pizzas", "logic", "forms", "features", "key", "parameters", "situation", "members", "zip_code", "class)s", "type=\"text", "resolution", "script", "baby_boomer_status", "restriction", "error", "differences", "identity", "migrations", "control", "company_that_makes_it", "datetime", "set_null", "intermediary", "setting", "%", "order", "documentation", "creation", "apple", "field_name", "sense", "application", "robot", "migrate", "table", "bugs", "behavior", "system", "str", "files", "query", "import", "home_group", "supplier", "datefield", "information", "descriptions", "article", "m2", "#", "result", "get_absolute_url", "point", "manytomanyfield.through_fields", "newmanager", "limitations", "¶", "serves_pizza", "member", "definition", "ringos_membership", "couple", "george", "uniqueness", "mix", "sites", "precedence", "toppings", "beginning", "word", "example", "vice", "django.db.models", "inheriting", "ordering", "medal", "value", "othermodel", "full_name", "definitions", "membership__date_joined__gt", "source", "manufacturer", "bronze", "django.utils.text", "blog", "primary", "save", "article_id", "html", "positiveintegerfield", "album", "year_in_school_choices", "create", "article_piece", "examples", "django.db", "things", "student", "details", "slug", "proxy", "areas", "advantages", "form", ".synthetic", "shirt_size", "object", "poll", "sides", "warning", "postgresql", "attributes", "one", "hierarchy", "book_piece", "returns", "car", "sync", "parent", "verbose", "mccartney", "myapp", "sequence", "breadth", "fred", "api", "box", "singular", "level", "django", "fact", "validation", "clash", "stuff", "syntax", "lot", "text", "ringo", "field", "meta.proxy", "bob", "relation", "integerfield", "bigautofield", "effect", "superclass", "=", "console", "objects", "tagline", ".models", "verbose_name", "connection", "interface", "statements", "model2", "foobar", "flintstone", "members__name__startswith", "serialization", "appconfig.default_auto_field", "trick", "help", "places", "works", "time", "exception", "letter", "cascade", "property", "delete", "queryset", "restaurant", "lowercase", "define", "site", "d", "ox", "manager", "problem", "fruit", "subclasses", "instrument", "groups", ".organic", "john", "childa.m2", "apis", "fields", "restaurants", "cafe", "union", "book_id", "inherit", "copy", "custom", "f", "methods", "keyword", "none", "join", "base", "access", "capabilities", "command", "ono", ">", "fielderror", "convention", "decision", "parentmodel", "makemigrations", "bunch", "inheritance", "db_default", "advantage", "tables", "engine", "mapping", "meta.managed", "graduate", "rare", "isolation", "childmodel", "jr", "data", "widget", "common.models", "matching", "bulk", "manytomanyfield(place", "group", "options", "supplier.place_ptr", "notes", "references", "’s", "starr", "reasons", "baby", "child", "senior", "s", "kwargs", "keys", "children", "sql", "m1", "author", "summary", "tools", "directory", "managers", "in", "module", "apps", "arguments", "last_name", "dozens", "textchoices", "holders", "add", "models", "phone", "underscores", "detail", "do_something_else", "model1", "commoninfo", "row", "call", "workaround", "varchar", "onetoonefield", "yoko", "foo__bar", "gold", "freshman", "paul", "support", "types", "p", "changes", "filter", "boomer", "booleanfield", "rules", "portion", "pizza", "declaration", "example(models", "customers", "_", "hand", "harrison", "metadata", "values", "analysis", "cases", "runner", "mro", "models/__init__.py", "oxen", "post_delete", "num_stars", "underscore", "behaviors", "spaces", "artist", "zipcode", "pair", "input", "mappings", "parents", "target", "model", "max_length", "fr", "copies", "purposes", "parent_link", "through_defaults", "checks", "n’t", "datetime.date(1962", "normal", "installed_apps", "basics", "hierarchies", "case", "class", "number", "business", "choices", "tuples", "return", "bigint", "columns", "field.primary_key", "attribute", "ones", "function", "restrictions", "string", "list", "group__name", "musicians", "bit", "styles", "app", "uses", "i", "p.restaurant", "geography.models", "extramanagers", "part", "file", "queries", "lies", "operations", "errors", "extensions", "situations", "hint", "saving", "get_latest_by", "names", "enumeration", "technique", "signals", "pre", "subclassing", "jan", "representation", "date", "set", "autofield", "bookreview", "functionality", "myapp_person", "textfield", "foreignkey", "database", "get_foo_display", "relationship", "databases", "reference", "instance", "silver", "code", "primary_key", "links", "entry", "power"], "type": "documentation"},
{"title": "Models and databases", "url": "https://docs.djangoproject.com/en/5.1/topics/db/", "content": "Models and databases ¶ A model is the single, definitive source of information about your data. It\ncontains the essential fields and behaviors of the data you’re storing.\nGenerally, each model maps to a single database table. Models Making queries Aggregation Search Managers Performing raw SQL queries Database transactions Multiple databases Tablespaces Database access optimization Database instrumentation Fixtures Examples of model relationship API usage", "keywords": ["source", "instrumentation", "fixtures", "information", "transactions", "api", "sql", "optimization", "fields", "behaviors", "managers", "examples", "tablespaces", "usage", "data", "model", "database", "search", "relationship", "aggregation", "databases", "access", "table", "models"], "type": "documentation"},
{"title": "Using Django", "url": "https://docs.djangoproject.com/en/5.1/topics/", "content": "Using Django ¶ Introductions to all the key parts of Django you’ll need to know: How to install Django Install Python Install Apache and mod_wsgi Get your database running Install the Django code Models and databases Models Making queries Aggregation Search Managers Performing raw SQL queries Database transactions Multiple databases Tablespaces Database access optimization Database instrumentation Fixtures Examples of model relationship API usage Handling HTTP requests URL dispatcher Writing views View decorators File Uploads Django shortcut functions Generic views Middleware How to use sessions Working with forms HTML forms Django’s role in forms Forms in Django Building a form More about Django Form classes Working with form templates Further topics Templates The Django template language Support for template engines Class-based views Introduction to class-based views Built-in class-based generic views Form handling with class-based views Using mixins with class-based views Basic examples Usage in your URLconf Subclassing generic views Asynchronous class-based views Migrations The Commands Backend Support Workflow Transactions Dependencies Migration files Adding migrations to apps Reversing migrations Historical models Considerations when removing model fields Data Migrations Squashing migrations Serializing values Supporting multiple Django versions Managing files Using files in models The File object File storage Testing in Django Writing and running tests Testing tools Advanced testing topics User authentication in Django Overview Installation Usage Django’s cache framework Setting up the cache The per-site cache The per-view cache Template fragment caching The low-level cache API Asynchronous support Downstream caches Using Vary headers Controlling cache: Using other headers Order of MIDDLEWARE Conditional View Processing The condition decorator Shortcuts for only computing one value Using the decorators with other HTTP methods Comparison with middleware conditional processing Cryptographic signing Protecting SECRET_KEY and SECRET_KEY_FALLBACKS Using the low-level API Sending email Quick examples send_mail() send_mass_mail() mail_admins() mail_managers() Examples Preventing header injection The EmailMessage class Email backends Configuring email for development Internationalization and localization Overview Definitions Logging Overview Security implications Configuring logging Pagination The Paginator class Example Paginating a ListView Using Paginator in a view function Security in Django Cross site scripting (XSS) protection Cross site request forgery (CSRF) protection SQL injection protection Clickjacking protection SSL/HTTPS Host header validation Referrer policy Cross-origin opener policy Session security User-uploaded content Additional security topics Performance and optimization Introduction General approaches Caching Understanding laziness Databases HTTP performance Template performance Using different versions of available software Serializing Django objects Serializing data Deserializing data Serialization formats Natural keys Django settings The basics Designating the settings Default settings Using settings in Python code Altering settings at runtime Security Available settings Creating your own settings Using settings without setting DJANGO_SETTINGS_MODULE Signals Listening to signals Defining and sending signals Disconnecting signals System check framework Writing your own checks External packages Localflavor Comments Formtools Asynchronous support Async views Async safety Async adapter functions", "keywords": ["urlconf", "instrumentation", "listview", "comments", "transactions", "software", "https", "signing", "xss", "template", "url", "shortcuts", "support", "cache", "migrations", "deserializing", "handling", "altering", "order", "serialization", "templates", "-", "development", "mod_wsgi", "uploads", "general", "settings", "aggregation", "scripting", "classes", "overview", "django_settings_module", "middleware", "tests", "check", "mixins", "testing", "secret_key", "mail_managers", "system", "commands", "values", "emailmessage", "site", "performance", "files", "views", "runtime", "caches", "using", "role", "condition", "async", "safety", "fields", "versions", "authentication", "¶", "fragment", "default", "forgery", "decorator", "laziness", "methods", "referrer", "mail_admins", "pagination", "usage", "injection", "model", "apache", "workflow", "processing", "vary", "access", "example", "checks", "session", "considerations", "email", "functions", "value", "definitions", "basics", "content", "backend", "caching", "class", "paginator", "localization", "request", "introduction", "optimization", "writing", "install", "internationalization", "html", "ssl", "cross", "function", "examples", "introductions", "tablespaces", "protection", "policy", "data", "view", "secret_key_fallbacks", "form", "parts", "object", "user", "header", "implications", "file", "comparison", "dependencies", "adapter", "installation", "python", "downstream", "clickjacking", "logging", "formats", "fixtures", "keys", "api", "sql", "send_mass_mail", "migration", "understanding", "sessions", "host", "storage", "level", "signals", "django", "tools", "managers", "topics", "validation", "csrf", "opener", "framework", "backends", "apps", "serializing", "packages", "database", "search", "relationship", "http", "decorators", "databases", "headers", "forms", "engines", "security", "code", "models", "language", "per", "squashing"], "type": "documentation"}
]